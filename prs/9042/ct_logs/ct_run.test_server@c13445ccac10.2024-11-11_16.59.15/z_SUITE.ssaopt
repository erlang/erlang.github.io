module z_SUITE.
exports [{all,0},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {loaded,1},
         {module_info,0},
         {module_info,1},
         {suite,0}].
attributes [].

%% z_SUITE.erl:26
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% z_SUITE.erl:28
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list('loaded')
  ret `[loaded]`
}

%% z_SUITE.erl:31
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% z_SUITE.erl:34
%% Counter = 6
%% bs_ensure_opt: true
function `z_SUITE`:`init_per_suite`(_0) {
0:
  %% z_SUITE.erl:35
  _2 = call (`test_lib`:`recompile`/1), `z_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% z_SUITE.erl:38
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% z_SUITE.erl:41
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% z_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `z_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% z_SUITE.erl:47
%% Counter = 14
%% bs_ensure_opt: true
function `z_SUITE`:`loaded`(_0) {
0:
  %% z_SUITE.erl:48
  _1 = call (`code`:`all_loaded`/0)

  %% Aliased:
  %%    _1
  _7 = succeeded:body _1
  br _7, ^7, ^1

7:
  %% z_SUITE.erl:48
  %% Result type:
  %%    0..'+inf'
  %% Aliased:
  %%    _1
  _3 = call (`do_loaded`/2), _1, `0`

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    _3 => 0..'+inf'
  %% Unique:
  %%    _3
  _12 = bif:'=:=' _3, `0`
  br _12, ^11, ^10

11:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% z_SUITE.erl:48
  %% Unique:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% z_SUITE.erl:51
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     0..'+inf'
function `z_SUITE`:`do_loaded`(_0, _1) {
0:
  %% Aliased:
  %%    _0
  _48 = is_nonempty_list _0
  br _48, ^48, ^30

48:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _14 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _13 = get_tl _0

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _45 = bif:is_tuple _14
  br _45, ^45, ^29

45:
  %% Argument types:
  %%    _14 => {...}
  %% Aliased:
  %%    _14
  _46 = bif:tuple_size _14

  %% Argument types:
  %%    _46 => 0..16777215
  %% Unique:
  %%    _46
  _47 = bif:'=:=' _46, `2`
  br _47, ^67, ^29

67:
  %% Argument types:
  %%    _14 => {any(), any()}
  %% Aliased:
  %%    _14
  _16 = get_tuple_element _14, `0`
  br ^69

69:
  _35 = new_try_tag `'try'`
  br _35, ^34, ^32

34:
  %% z_SUITE.erl:53
  _21 = call (_16:`module_info`/0)

  %% Aliased:
  %%    _21
  _36 = succeeded:body _21
  br _36, ^36, ^32

36:
  %% z_SUITE.erl:54
  _22 = call (_16:`module_info`/1), `functions`

  %% Aliased:
  %%    _22
  _37 = succeeded:body _22
  br _37, ^37, ^32

37:
  %% Unique:
  %%    _35
  _42 = kill_try_tag _35
  br ^33

32:
  %% Unique:
  %%    _35
  _40 = landingpad `'try'`, _35

  %% Aliased:
  %%    _40
  _7 = extract _40, `0`

  %% Aliased:
  %%    _40
  _6 = extract _40, `1`

  %% Aliased:
  %%    _40
  _5 = extract _40, `2`

  %% Unique:
  %%    _35
  _41 = kill_try_tag _35

  %% Aliased:
  %%    _5
  Stk = build_stacktrace _5

  %% Argument types:
  %%    
  %% Aliased:
  %%    Stk
  _17 = put_list Stk, `[]`

  %% Argument types:
  %%    _17 => nonempty_list(any())
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _17
  _18 = put_list _6, _17

  %% Argument types:
  %%    _7 => 'error' | 'exit' | 'throw'
  %%    _18 => nonempty_list(any())
  %% Unique:
  %%    _7, 
  %%    _18
  _19 = put_list _7, _18
  br ^51

51:
  %% z_SUITE.erl:58
  %% Unique:
  %%    _19
  _23 = call (`io`:`format`/2), `"~p:~p\n~p\n"`, _19

  %% Aliased:
  %%    _23
  _38 = succeeded:body _23
  br _38, ^38, ^1

38:
  %% z_SUITE.erl:59
  %% Argument types:
  %%    _1 => 0..'+inf'
  %% Unique:
  %%    _1
  _24 = bif:'+' _1, `1`

  %% Unique:
  %%    _24
  _39 = succeeded:body _24
  br _39, ^39, ^1

39:
  br ^33

33:
  _8 = phi { _1, ^37 }, { _24, ^39 }

  %% z_SUITE.erl:61
  %% Result type:
  %%    0..'+inf'
  %% Aliased:
  %%    _13
  %% Unique:
  %%    _8
  _25 = call (`do_loaded`/2), _13, _8

  %% Unique:
  %%    _25
  _43 = succeeded:body _25
  br _43, ^43, ^1

43:
  %% Result type:
  %%    0..'+inf'
  %% Unique:
  %%    _25
  ret _25

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _49 = bif:'=:=' _0, `[]`
  br _49, ^49, ^29

49:
  %% Result type:
  %%    0..'+inf'
  %% Unique:
  %%    _1
  ret _1

29:
  %% z_SUITE.erl:51
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  %% Anno: #{inlined => {'-inlined-do_loaded/2-',2}}
  _26 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _26
  _50 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% Counter = 6
%% bs_ensure_opt: true
function `z_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `z_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `z_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `z_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}
