module test_lib.
exports [{binary,1},
         {binary_part,2},
         {get_data_dir,1},
         {highest_opcode,1},
         {id,1},
         {is_cloned_mod,1},
         {module_info,0},
         {module_info,1},
         {opt_opts,1},
         {p_run,2},
         {p_run,3},
         {parallel,0},
         {recompile,1},
         {recompile_core,1},
         {smoke_disasm,1},
         {uniq,0}].
attributes [].

%% test_lib.erl:32
%% Counter = 4
%% bs_ensure_opt: true
function `test_lib`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% test_lib.erl:34
%% Counter = 40
%% bs_ensure_opt: true
function `test_lib`:`recompile`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _23 = bif:is_atom _0
  br _23, ^23, ^22

23:
  %% test_lib.erl:35
  _10 = call (`erlang`:`whereis`/1), `cover_server`

  %% Aliased:
  %%    _10
  _24 = succeeded:body _10
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _28 = bif:'=:=' _10, `undefined`
  br _28, ^25, ^26

26:
  %% test_lib.erl:39
  %% Aliased:
  %%    _0
  Beam = call (`code`:`which`/1), _0

  %% Aliased:
  %%    Beam
  _29 = succeeded:body Beam
  br _29, ^29, ^1

29:
  %% test_lib.erl:40
  %% Aliased:
  %%    Beam
  _2 = call (`filename`:`rootname`/2), Beam, `".beam"`

  %% Aliased:
  %%    _2
  _30 = succeeded:body _2
  br _30, ^30, ^1

30:
  %% test_lib.erl:40
  %% Aliased:
  %%    _2
  Src = call (`erlang`:`'++'`/2), _2, `".erl"`

  %% Aliased:
  %%    Src
  _31 = succeeded:body Src
  br _31, ^31, ^1

31:
  %% test_lib.erl:41
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`opt_opts`/1), _0

  %% Aliased:
  %%    _4
  _32 = succeeded:body _4
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _11 = put_list `recv_opt_info`, _4

  %% Argument types:
  %%    _11 => nonempty_list(any())
  %% Aliased:
  %%    _11
  Opts = put_list `bin_opt_info`, _11

  %% Argument types:
  %%    Opts => nonempty_list(any())
  %% Aliased:
  %%    Opts
  _12 = put_list Opts, `[]`

  %% Argument types:
  %%    _0 => atom()
  %%    _12 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _0, 
  %%    _12
  _13 = put_list _0, _12

  %% test_lib.erl:42
  %% Unique:
  %%    _13
  _16 = call (`io`:`format`/2), `"Recompiling ~p (~p)\n"`, _13

  %% Aliased:
  %%    _16
  _33 = succeeded:body _16
  br _33, ^33, ^1

33:
  %% test_lib.erl:43
  %% Aliased:
  %%    Src
  _6 = call (`filename`:`dirname`/1), Src

  %% Aliased:
  %%    _6
  _34 = succeeded:body _6
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _14 = put_tuple `outdir`, _6

  %% Argument types:
  %%    _14 => {'outdir', any()}
  %%    Opts => nonempty_list(any())
  %% Aliased:
  %%    Opts
  %% Unique:
  %%    _14
  _15 = put_list _14, Opts

  %% test_lib.erl:43
  %% Aliased:
  %%    Src
  %% Unique:
  %%    _15
  _17 = call (`c`:`c`/2), Src, _15

  %% Aliased:
  %%    _17
  _35 = succeeded:body _17
  br _35, ^25, ^1

25:
  %% test_lib.erl:47
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _0
  _18 = call (`smoke_disasm`/1), _0

  %% Aliased:
  %%    _18
  _36 = succeeded:body _18
  br _36, ^36, ^1

36:
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _18
  ret _18

22:
  %% test_lib.erl:34
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-recompile/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _37 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% test_lib.erl:49
%% Counter = 39
%% bs_ensure_opt: true
function `test_lib`:`recompile_core`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _23 = bif:is_atom _0
  br _23, ^23, ^22

23:
  %% test_lib.erl:50
  _9 = call (`erlang`:`whereis`/1), `cover_server`

  %% Aliased:
  %%    _9
  _24 = succeeded:body _9
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _28 = bif:'=:=' _9, `undefined`
  br _28, ^25, ^26

26:
  %% test_lib.erl:54
  %% Aliased:
  %%    _0
  Beam = call (`code`:`which`/1), _0

  %% Aliased:
  %%    Beam
  _29 = succeeded:body Beam
  br _29, ^29, ^1

29:
  %% test_lib.erl:55
  %% Aliased:
  %%    Beam
  Src = call (`filename`:`rootname`/2), Beam, `".beam"`

  %% Aliased:
  %%    Src
  _30 = succeeded:body Src
  br _30, ^30, ^1

30:
  %% test_lib.erl:56
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`opt_opts`/1), _0

  %% Aliased:
  %%    _3
  _31 = succeeded:body _3
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _10 = put_list `recv_opt_info`, _3

  %% Argument types:
  %%    _10 => nonempty_list(any())
  %% Aliased:
  %%    _10
  Opts = put_list `bin_opt_info`, _10

  %% Argument types:
  %%    Opts => nonempty_list(any())
  %% Aliased:
  %%    Opts
  _11 = put_list Opts, `[]`

  %% Argument types:
  %%    _0 => atom()
  %%    _11 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _0, 
  %%    _11
  _12 = put_list _0, _11

  %% test_lib.erl:57
  %% Unique:
  %%    _12
  _16 = call (`io`:`format`/2), `"Recompiling ~p (~p)\n"`, _12

  %% Aliased:
  %%    _16
  _32 = succeeded:body _16
  br _32, ^32, ^1

32:
  %% test_lib.erl:58
  %% Aliased:
  %%    Src
  _5 = call (`filename`:`dirname`/1), Src

  %% Aliased:
  %%    _5
  _33 = succeeded:body _5
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _13 = put_tuple `outdir`, _5

  %% Argument types:
  %%    _13 => {'outdir', any()}
  %%    Opts => nonempty_list(any())
  %% Aliased:
  %%    Opts
  %% Unique:
  %%    _13
  _14 = put_list _13, Opts

  %% Argument types:
  %%    _14 => nonempty_list(any())
  %% Unique:
  %%    _14
  _15 = put_list `from_core`, _14

  %% test_lib.erl:58
  %% Aliased:
  %%    Src
  %% Unique:
  %%    _15
  _17 = call (`c`:`c`/2), Src, _15

  %% Aliased:
  %%    _17
  _34 = succeeded:body _17
  br _34, ^25, ^1

25:
  %% test_lib.erl:62
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _0
  _18 = call (`smoke_disasm`/1), _0

  %% Aliased:
  %%    _18
  _35 = succeeded:body _18
  br _35, ^35, ^1

35:
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _18
  ret _18

22:
  %% test_lib.erl:49
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-recompile_core/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _36 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% test_lib.erl:64
%% Counter = 30
%% bs_ensure_opt: true
function `test_lib`:`smoke_disasm`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _17 = bif:is_atom _0
  br _17, ^17, ^16

17:
  %% test_lib.erl:65
  %% Aliased:
  %%    _0
  _1 = call (`code`:`which`/1), _0

  %% Aliased:
  %%    _1
  _18 = succeeded:body _1
  br _18, ^18, ^1

18:
  %% test_lib.erl:65
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _1
  _11 = call (`smoke_disasm`/1), _1

  %% Aliased:
  %%    _11
  _19 = succeeded:body _11
  br _19, ^19, ^1

19:
  %% Result type:
  %%    {'beam_file', any()}
  %% Aliased:
  %%    _11
  ret _11

16:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_list _0
  br _20, ^20, ^15

20:
  %% test_lib.erl:67
  %% Aliased:
  %%    _0
  Res = call (`beam_disasm`:`file`/1), _0

  %% Aliased:
  %%    Res
  _21 = succeeded:body Res
  br _21, ^21, ^1

21:
  %% test_lib.erl:68
  %% Argument types:
  %%    
  %% Aliased:
  %%    Res
  _4 = bif:element `1`, Res

  %% Aliased:
  %%    _4
  _22 = succeeded:body _4
  br _22, ^22, ^1

22:
  %% test_lib.erl:68
  %% Argument types:
  %%    Res => {any(), ...}
  %% Aliased:
  %%    Res
  _3 = bif:element `2`, Res

  %% Aliased:
  %%    _3
  _23 = succeeded:body _3
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _27 = bif:'=:=' _4, `beam_file`
  br _27, ^26, ^25

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _9 = put_tuple `beam_file`, _3
  %% Result type:
  %%    {'beam_file', any()}
  %% Unique:
  %%    _9
  ret _9

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _4
  _5 = put_tuple _4, _3

  %% test_lib.erl:68
  %% Unique:
  %%    _5
  _10 = match_fail `badmatch`, _5

  %% Unique:
  %%    _10
  _28 = succeeded:body _10
  br ^1

15:
  %% test_lib.erl:64
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-smoke_disasm/1-',1}}
  _12 = match_fail `function_clause`, _0

  %% Unique:
  %%    _12
  _29 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% test_lib.erl:70
%% Counter = 9
%% bs_ensure_opt: true
function `test_lib`:`parallel`() {
0:
  %% test_lib.erl:71
  _0 = call (`erlang`:`system_info`/1), `schedulers`

  %% Aliased:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% test_lib.erl:71
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:'=:=' _0, `1`
  br _2, ^7, ^8

7:
  %% Result type:
  %%    nil()
  ret `[]`

8:
  %% Result type:
  %%    nonempty_list('parallel')
  ret `[parallel]`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% test_lib.erl:76
%% Counter = 7
%% bs_ensure_opt: true
function `test_lib`:`uniq`() {
0:
  %% test_lib.erl:77
  U = call (`erlang`:`unique_integer`/1), `[positive]`

  %% Aliased:
  %%    U
  _5 = succeeded:body U
  br _5, ^5, ^1

5:
  %% test_lib.erl:78
  %% Aliased:
  %%    U
  _1 = call (`erlang`:`integer_to_list`/1), U

  %% Aliased:
  %%    _1
  _6 = succeeded:body _1
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    _1 => nonempty_list(any())
  %% Aliased:
  %%    _1
  _2 = put_list `95`, _1
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% test_lib.erl:83
%% Counter = 20
%% bs_ensure_opt: true
function `test_lib`:`opt_opts`(_0) {
0:
  %% test_lib.erl:84
  Comp = call (_0:`module_info`/1), `compile`

  %% Aliased:
  %%    Comp
  _16 = succeeded:body Comp
  br _16, ^16, ^1

16:
  %% test_lib.erl:86
  %% Aliased:
  %%    Comp
  Opts = call (`proplists`:`get_value`/3), `options`, Comp, `[]`

  %% Aliased:
  %%    Opts
  _17 = succeeded:body Opts
  br _17, ^17, ^1

17:
  %% Result type:
  %%    'false' | 'true'
  _5 = make_fun (`'-opt_opts/1-fun-0-'`/1)

  %% test_lib.erl:87
  %% Aliased:
  %%    _5, 
  %%    Opts
  _13 = call (`lists`:`filter`/2), _5, Opts

  %% Aliased:
  %%    _13
  _18 = succeeded:body _13
  br _18, ^18, ^1

18:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _13
  ret _13

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% test_lib.erl:117
%% Counter = 17
%% bs_ensure_opt: true
function `test_lib`:`get_data_dir`(_0) {
0:
  %% test_lib.erl:118
  %% Aliased:
  %%    _0
  Data = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    Data
  _14 = succeeded:body Data
  br _14, ^14, ^1

14:
  _9 = make_fun (`'-get_data_dir/1-fun-0-'`/2)

  %% test_lib.erl:129
  %% Aliased:
  %%    _9, 
  %%    Data
  _11 = call (`lists`:`foldl`/3), _9, Data, `["_no_opt_SUITE","_no_copt_SUITE","_no_copt_ssa_SUITE","_post_opt_SUITE",
  "_inline_SUITE","_no_module_opt_SUITE","_no_type_opt_SUITE",
  "_no_ssa_opt_SUITE","_cover_SUITE"]`

  %% Aliased:
  %%    _11
  _15 = succeeded:body _11
  br _15, ^15, ^1

15:
  %% Aliased:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% test_lib.erl:134
%% Counter = 7
%% bs_ensure_opt: true
function `test_lib`:`is_cloned_mod`(_0) {
0:
  %% test_lib.erl:135
  %% Aliased:
  %%    _0
  _1 = call (`erlang`:`atom_to_list`/1), _0

  %% Aliased:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% test_lib.erl:135
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1
  _2 = call (`is_cloned_mod_1`/1), _1

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% test_lib.erl:141
%% Counter = 77
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(0..1114111)
function `test_lib`:`is_cloned_mod_1`(_0) {
0:
  %% Aliased:
  %%    _0
  _74 = is_nonempty_list _0
  br _74, ^74, ^75

74:
  %% Argument types:
  %%    _0 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _0
  _4 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _0
  _3 = get_tl _0

  %% Argument types:
  %%    _4 => 0..1114111
  %% Unique:
  %%    _4
  _72 = bif:'=:=' _4, `95`
  br _72, ^71, ^29

71:
  %% Aliased:
  %%    _3
  _70 = is_nonempty_list _3
  br _70, ^70, ^29

70:
  %% Argument types:
  %%    _3 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _3
  _6 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _3
  _5 = get_tl _3
  %% Argument types:
  %%    
  switch _6, ^29, [
    { `99`, ^69 },
    { `105`, ^68 },
    { `110`, ^66 },
    { `112`, ^67 }
  ]

67:
  %% Argument types:
  %%    _5 => list(0..1114111)
  %% Aliased:
  %%    _5
  _63 = bif:'=:=' _5, `"ost_opt_SUITE"`
  br _63, ^63, ^29

63:
  %% Result type:
  %%    'true'
  ret `true`

66:
  %% Aliased:
  %%    _5
  _62 = is_nonempty_list _5
  br _62, ^62, ^29

62:
  %% Argument types:
  %%    _5 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _5
  _8 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _5
  _7 = get_tl _5

  %% Argument types:
  %%    _8 => 0..1114111
  %% Unique:
  %%    _8
  _61 = bif:'=:=' _8, `111`
  br _61, ^60, ^29

60:
  %% Aliased:
  %%    _7
  _59 = is_nonempty_list _7
  br _59, ^59, ^29

59:
  %% Argument types:
  %%    _7 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _7
  _10 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _7
  _9 = get_tl _7

  %% Argument types:
  %%    _10 => 0..1114111
  %% Unique:
  %%    _10
  _58 = bif:'=:=' _10, `95`
  br _58, ^57, ^29

57:
  %% Aliased:
  %%    _9
  _56 = is_nonempty_list _9
  br _56, ^56, ^29

56:
  %% Argument types:
  %%    _9 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _9
  _12 = get_hd _9

  %% Argument types:
  %%    _9 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _9
  _11 = get_tl _9
  %% Argument types:
  %%    
  switch _12, ^29, [
    { `99`, ^52 },
    { `109`, ^55 },
    { `111`, ^51 },
    { `115`, ^53 },
    { `116`, ^54 }
  ]

54:
  %% Argument types:
  %%    _11 => list(0..1114111)
  %% Aliased:
  %%    _11
  _49 = bif:'=:=' _11, `"ype_opt_SUITE"`
  br _49, ^49, ^29

49:
  %% Result type:
  %%    'true'
  ret `true`

53:
  %% Argument types:
  %%    _11 => list(0..1114111)
  %% Aliased:
  %%    _11
  _48 = bif:'=:=' _11, `"sa_opt_SUITE"`
  br _48, ^48, ^29

48:
  %% Result type:
  %%    'true'
  ret `true`

51:
  %% Argument types:
  %%    _11 => list(0..1114111)
  %% Aliased:
  %%    _11
  _30 = bif:'=:=' _11, `"pt_SUITE"`
  br _30, ^30, ^29

30:
  %% Result type:
  %%    'true'
  ret `true`

55:
  %% Argument types:
  %%    _11 => list(0..1114111)
  %% Aliased:
  %%    _11
  _50 = bif:'=:=' _11, `"odule_opt_SUITE"`
  br _50, ^50, ^29

50:
  %% Result type:
  %%    'true'
  ret `true`

52:
  %% Aliased:
  %%    _11
  _47 = is_nonempty_list _11
  br _47, ^47, ^29

47:
  %% Argument types:
  %%    _11 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _11
  _14 = get_hd _11

  %% Argument types:
  %%    _11 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _11
  _13 = get_tl _11

  %% Argument types:
  %%    _14 => 0..1114111
  %% Unique:
  %%    _14
  _46 = bif:'=:=' _14, `111`
  br _46, ^45, ^29

45:
  %% Aliased:
  %%    _13
  _44 = is_nonempty_list _13
  br _44, ^44, ^29

44:
  %% Argument types:
  %%    _13 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _13
  _16 = get_hd _13

  %% Argument types:
  %%    _13 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _13
  _15 = get_tl _13

  %% Argument types:
  %%    _16 => 0..1114111
  %% Unique:
  %%    _16
  _43 = bif:'=:=' _16, `112`
  br _43, ^42, ^29

42:
  %% Aliased:
  %%    _15
  _41 = is_nonempty_list _15
  br _41, ^41, ^29

41:
  %% Argument types:
  %%    _15 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _15
  _18 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _15
  _17 = get_tl _15

  %% Argument types:
  %%    _18 => 0..1114111
  %% Unique:
  %%    _18
  _40 = bif:'=:=' _18, `116`
  br _40, ^39, ^29

39:
  %% Aliased:
  %%    _17
  _38 = is_nonempty_list _17
  br _38, ^38, ^29

38:
  %% Argument types:
  %%    _17 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _17
  _20 = get_hd _17

  %% Argument types:
  %%    _17 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _17
  _19 = get_tl _17

  %% Argument types:
  %%    _20 => 0..1114111
  %% Unique:
  %%    _20
  _37 = bif:'=:=' _20, `95`
  br _37, ^36, ^29

36:
  %% Aliased:
  %%    _19
  _35 = is_nonempty_list _19
  br _35, ^35, ^29

35:
  %% Argument types:
  %%    _19 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _19
  _22 = get_hd _19

  %% Argument types:
  %%    _19 => nonempty_list(0..1114111)
  %% Aliased:
  %%    _19
  _21 = get_tl _19
  %% Argument types:
  %%    
  switch _22, ^29, [
    { `83`, ^33 },
    { `115`, ^34 }
  ]

34:
  %% Argument types:
  %%    _21 => list(0..1114111)
  %% Aliased:
  %%    _21
  _32 = bif:'=:=' _21, `"sa_SUITE"`
  br _32, ^32, ^29

32:
  %% Result type:
  %%    'true'
  ret `true`

33:
  %% Argument types:
  %%    _21 => list(0..1114111)
  %% Aliased:
  %%    _21
  _31 = bif:'=:=' _21, `"UITE"`
  br _31, ^31, ^29

31:
  %% Result type:
  %%    'true'
  ret `true`

68:
  %% Argument types:
  %%    _5 => list(0..1114111)
  %% Aliased:
  %%    _5
  _64 = bif:'=:=' _5, `"nline_SUITE"`
  br _64, ^64, ^29

64:
  %% Result type:
  %%    'true'
  ret `true`

69:
  %% Argument types:
  %%    _5 => list(0..1114111)
  %% Aliased:
  %%    _5
  _65 = bif:'=:=' _5, `"over_SUITE"`
  br _65, ^65, ^29

65:
  %% Result type:
  %%    'true'
  ret `true`

29:
  %% test_lib.erl:150
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _3
  _23 = call (`is_cloned_mod_1`/1), _3

  %% Unique:
  %%    _23
  _73 = succeeded:body _23
  br _73, ^73, ^1

73:
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _23
  ret _23

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25

75:
  %% Result type:
  %%    'false'
  ret `false`
}

%% test_lib.erl:155
%% Counter = 63
%% bs_ensure_opt: true
function `test_lib`:`highest_opcode`(_0) {
0:
  %% test_lib.erl:156
  %% Aliased:
  %%    _0
  _7 = call (`beam_lib`:`chunks`/2), _0, `["Code"]`

  %% Aliased:
  %%    _7
  _29 = succeeded:body _7
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _56 = is_tagged_tuple _7, `2`, `ok`
  br _56, ^53, ^31

53:
  %% Argument types:
  %%    _7 => {'ok', any()}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _50 = bif:is_tuple _8
  br _50, ^50, ^31

50:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _51 = bif:tuple_size _8

  %% Argument types:
  %%    _51 => 0..16777215
  %% Unique:
  %%    _51
  _52 = bif:'=:=' _51, `2`
  br _52, ^49, ^31

49:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _10
  _48 = is_nonempty_list _10
  br _48, ^48, ^31

48:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _13 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _12 = get_tl _10

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _45 = bif:is_tuple _13
  br _45, ^45, ^31

45:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _46 = bif:tuple_size _13

  %% Argument types:
  %%    _46 => 0..16777215
  %% Unique:
  %%    _46
  _47 = bif:'=:=' _46, `2`
  br _47, ^44, ^31

44:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _43 = bif:'=:=' _15, `"Code"`
  br _43, ^43, ^31

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _42 = bif:'=:=' _12, `[]`
  br _42, ^42, ^31

42:
  %% Argument types:
  %%    _13 => {nonempty_list(67..111), any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _16 = bs_start_match `new`, _14

  %% Aliased:
  %%    _16
  _40 = succeeded:guard _16
  br _40, ^40, ^33

40:
  _61 = bs_ensure _16, `96`, `8`
  _62 = succeeded:guard _61
  br _62, ^60, ^33

60:
  %% Argument types:
  %%    _61 => bs_context(1)
  %% Aliased:
  %%    _16
  %% Anno: #{ensured => true}
  _18 = bs_match `string`, _61, `<<0,0,0,16>>`

  %% Aliased:
  %%    _18
  _35 = succeeded:guard _18
  br _35, ^35, ^33

35:
  %% test_lib.erl:158
  %% Argument types:
  %%    _18 => bs_context(1)
  %% Aliased:
  %%    _18
  %% Anno: #{ensured => true}
  _19 = bs_match `integer`, _18, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _19
  _36 = succeeded:guard _19
  br _36, ^36, ^33

36:
  %% Aliased:
  %%    _19
  _20 = bs_extract _19

  %% test_lib.erl:158
  %% Argument types:
  %%    _19 => bs_context(1)
  %% Aliased:
  %%    _19
  %% Anno: #{ensured => true}
  _21 = bs_match `integer`, _19, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _21
  _37 = succeeded:guard _21
  br _37, ^37, ^33

37:
  %% Aliased:
  %%    _21
  _22 = bs_extract _21

  %% test_lib.erl:158
  %% Aliased:
  %%    _21
  %% Anno: #{ensured => true}
  _23 = bs_match `skip`, _21, `binary`, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _23
  _38 = succeeded:guard _23
  br _38, ^38, ^33

38:
  %% Argument types:
  %%    _20 => 0..4294967295
  %% Unique:
  %%    _20
  _39 = bif:'=:=' _20, `0`
  br _39, ^39, ^33

39:
  %% Result type:
  %%    0..4294967295
  %% Aliased:
  %%    _22
  ret _22

33:
  %% test_lib.erl:158
  %% Aliased:
  %%    _14
  _25 = match_fail `badmatch`, _14

  %% Unique:
  %%    _25
  _41 = succeeded:body _25
  br ^1

31:
  %% test_lib.erl:156
  %% Aliased:
  %%    _7
  _26 = match_fail `badmatch`, _7

  %% Unique:
  %%    _26
  _59 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% test_lib.erl:164
%% Counter = 26
%% bs_ensure_opt: true
function `test_lib`:`p_run`(_0, _1) {
0:
  %% test_lib.erl:169
  _3 = call (`erlang`:`system_info`/1), `schedulers`

  %% Aliased:
  %%    _3
  _17 = succeeded:body _3
  br _17, ^17, ^1

17:
  %% test_lib.erl:169
  _2 = call (`erlang`:`system_info`/1), `wordsize`

  %% Aliased:
  %%    _2
  _18 = succeeded:body _2
  br _18, ^18, ^1

18:
  switch _2, ^20, [
    { `4`, ^21 },
    { `8`, ^22 }
  ]

22:
  %% test_lib.erl:173
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _12 = bif:min _3, `8`
  br ^19

21:
  br ^19

19:
  _5 = phi { `1`, ^21 }, { _12, ^22 }

  %% test_lib.erl:175
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Unique:
  %%    _5
  _14 = call (`p_run`/3), _0, _1, _5

  %% Aliased:
  %%    _14
  _24 = succeeded:body _14
  br _24, ^24, ^1

24:
  %% Aliased:
  %%    _14
  ret _14

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _3
  _4 = put_tuple _3, _2

  %% test_lib.erl:169
  %% Unique:
  %%    _4
  _13 = match_fail `case_clause`, _4

  %% Unique:
  %%    _13
  _23 = succeeded:body _13
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% test_lib.erl:177
%% Counter = 14
%% bs_ensure_opt: true
function `test_lib`:`p_run`(_0, _1, _2) {
0:
  %% test_lib.erl:179
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:length _1

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => 0..288230376151711743
  %% Unique:
  %%    _3
  _4 = put_list _3, `[]`

  %% Argument types:
  %%    _4 => nonempty_list(0..288230376151711743)
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _4
  _5 = put_list _2, _4

  %% test_lib.erl:178
  %% Unique:
  %%    _5
  _6 = call (`io`:`format`/2), `"p_run: ~p parallel processes; ~p jobs\n"`, _5

  %% Aliased:
  %%    _6
  _11 = succeeded:body _6
  br _11, ^11, ^1

11:
  %% test_lib.erl:180
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _7 = call (`p_run_loop`/6), _0, _1, _2, `[]`, `0`, `0`

  %% Aliased:
  %%    _7
  _12 = succeeded:body _7
  br _12, ^12, ^1

12:
  %% Aliased:
  %%    _7
  ret _7

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% test_lib.erl:182
%% Counter = 132
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     list(any())
%%    _3 =>
%%     list(reference())
%%    _4 =>
%%     0..'+inf'
%%    _5 =>
%%     0..'+inf'
function `test_lib`:`p_run_loop`(_0, _1, _2, _3, _4, _5) {
0:
  %% Aliased:
  %%    _1
  _84 = is_nonempty_list _1
  br _84, ^84, ^97

84:
  %% Argument types:
  %%    _1 => nonempty_list(any())
  %% Aliased:
  %%    _1
  _48 = get_hd _1

  %% Argument types:
  %%    _1 => nonempty_list(any())
  %% Aliased:
  %%    _1
  _47 = get_tl _1

  %% test_lib.erl:193
  %% Argument types:
  %%    _3 => list(reference())
  %% Aliased:
  %%    _3
  _10 = bif:length _3

  %% Argument types:
  %%    _10 => 0..288230376151711743
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _10
  _74 = bif:'<' _10, _2
  br _74, ^74, ^70

74:
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _0, 
  %%    _48
  _12 = make_fun (`'-p_run_loop/6-fun-0-'`/2), _0, _48

  %% test_lib.erl:194
  %% Aliased:
  %%    _12
  _50 = call (`erlang`:`spawn_monitor`/1), _12

  %% Aliased:
  %%    _50
  _75 = succeeded:body _50
  br _75, ^79, ^1

79:
  %% Argument types:
  %%    _50 => {pid(), reference()}
  %% Aliased:
  %%    _50
  _52 = get_tuple_element _50, `1`

  %% Argument types:
  %%    _52 => reference()
  %%    _3 => list(reference())
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _52
  _54 = put_list _52, _3

  %% test_lib.erl:195
  %% Aliased:
  %%    _0, 
  %%    _2, 
  %%    _4, 
  %%    _5, 
  %%    _47
  %% Unique:
  %%    _54
  _61 = call (`p_run_loop`/6), _0, _47, _2, _54, _4, _5

  %% Aliased:
  %%    _61
  _78 = succeeded:body _61
  br _78, ^78, ^1

78:
  %% Aliased:
  %%    _61
  ret _61

97:
  %% Argument types:
  %%    _3 => list(reference())
  %% Aliased:
  %%    _3
  _96 = bif:'=:=' _3, `[]`
  br _96, ^96, ^70

96:
  %% Argument types:
  %%    _4 => 0..'+inf'
  %% Unique:
  %%    _4
  _94 = bif:'=:=' _4, `0`
  br _94, ^93, ^86

93:
  %% Argument types:
  %%    
  switch _5, ^88, [
    { `0`, ^89 },
    { `1`, ^90 }
  ]

90:
  %% Result type:
  %%    {'comment', nonempty_list(32..119)}
  ret `{comment,"1 warning"}`

89:
  %% Result type:
  %%    'ok'
  ret `ok`

88:
  %% test_lib.erl:188
  %% Aliased:
  %%    _5
  _6 = call (`erlang`:`integer_to_list`/1), _5

  %% Aliased:
  %%    _6
  _91 = succeeded:body _6
  br _91, ^91, ^1

91:
  %% test_lib.erl:188
  %% Aliased:
  %%    _6
  _7 = call (`erlang`:`'++'`/2), _6, `" warnings"`

  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _58 = put_tuple `comment`, _7
  %% Result type:
  %%    {'comment', nonempty_list(any())}
  %% Unique:
  %%    _58
  ret _58

86:
  %% Argument types:
  %%    _4 => 1..'+inf'
  %% Unique:
  %%    _4
  _56 = put_tuple _4, `errors`

  %% test_lib.erl:191
  %% Unique:
  %%    _56
  _59 = call (`ct`:`fail`/1), _56

  %% Aliased:
  %%    _59
  _95 = succeeded:body _59
  br _95, ^95, ^1

95:
  %% Aliased:
  %%    _59
  ret _59

70:
  br ^39

39:
  %% test_lib.erl:197
  _30 = peek_message `none`

  %% Aliased:
  %%    _30
  _127 = succeeded:guard _30
  br _127, ^125, ^126

125:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _117 = is_tagged_tuple _30, `5`, `'DOWN'`
  br _117, ^116, ^101

116:
  %% Argument types:
  %%    _30 => {''DOWN'', any(), any(), any(), any()}
  %% Aliased:
  %%    _30
  _42 = get_tuple_element _30, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _113 = bif:'=:=' _42, `process`
  br _113, ^112, ^101

112:
  %% Argument types:
  %%    _30 => {''DOWN'', any(), 'process', any(), any()}
  %% Aliased:
  %%    _30
  _40 = get_tuple_element _30, `4`
  _63 = remove_message
  switch _40, ^103, [
    { `error`, ^107 },
    { `ok`, ^106 },
    { `warning`, ^108 }
  ]

108:
  %% test_lib.erl:202
  %% Argument types:
  %%    _5 => 0..'+inf'
  %% Unique:
  %%    _5
  _15 = bif:'+' _5, `1`

  %% Unique:
  %%    _15
  _105 = succeeded:body _15
  br _105, ^105, ^1

105:
  br ^102

106:
  br ^102

107:
  %% test_lib.erl:201
  %% Argument types:
  %%    _4 => 0..'+inf'
  %% Unique:
  %%    _4
  _14 = bif:'+' _4, `1`

  %% Aliased:
  %%    _14
  _104 = succeeded:body _14
  br _104, ^104, ^1

104:
  br ^102

102:
  _33 = phi { _14, ^104 }, { _4, ^105 }, { _4, ^106 }
  _34 = phi { _5, ^104 }, { _15, ^105 }, { _5, ^106 }

  %% Argument types:
  %%    _30 => {''DOWN'', any(), 'process', any(), 'error' | 'ok' | 'warning'}
  %% Aliased:
  %%    _30
  _43 = get_tuple_element _30, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _45 = put_list _43, `[]`

  %% test_lib.erl:204
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _45
  _46 = call (`erlang`:`'--'`/2), _3, _45

  %% test_lib.erl:205
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2, 
  %%    _33, 
  %%    _34, 
  %%    _46
  _66 = call (`p_run_loop`/6), _0, _1, _2, _46, _33, _34

  %% Aliased:
  %%    _66
  _111 = succeeded:body _66
  br _111, ^111, ^1

111:
  %% Aliased:
  %%    _66
  ret _66

103:
  %% test_lib.erl:199
  %% Aliased:
  %%    _40
  _65 = match_fail `case_clause`, _40

  %% Unique:
  %%    _65
  _109 = succeeded:body _65
  br ^1

101:
  _67 = recv_next
  br ^39

126:
  _120 = wait_timeout `infinity`

  %% Unique:
  %%    _120
  _121 = succeeded:body _120
  br _121, ^124, ^1

124:
  br ^39

1:
  _68 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _68
}

%% test_lib.erl:209
%% Counter = 4
%% bs_ensure_opt: true
function `test_lib`:`binary_part`(_0, _1) {
0:
  %% Result type:
  %%    'dummy'
  ret `dummy`
}

%% test_lib.erl:213
%% Counter = 6
%% bs_ensure_opt: true
function `test_lib`:`binary`(_0) {
0:
  %% test_lib.erl:214
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:'rem' _0, `10`

  %% Unique:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% test_lib.erl:214
  %% Argument types:
  %%    _1 => -9..9
  %% Unique:
  %%    _1
  _2 = bif:'=:=' _1, `0`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `test_lib`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `test_lib`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `test_lib`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `test_lib`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% test_lib.erl:194
%% Counter = 65
%% bs_ensure_opt: true
function `test_lib`:`'-p_run_loop/6-fun-0-'`(_0, _48) {
0:
  %% test_lib.erl:194
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _48
  _11 = call _0, _48

  %% Aliased:
  %%    _11
  _63 = succeeded:body _11
  br _63, ^63, ^1

63:
  %% test_lib.erl:194
  %% Aliased:
  %%    _11
  _60 = call (`erlang`:`exit`/1), _11

  %% Unique:
  %%    _60
  _64 = succeeded:body _60
  br ^1

1:
  _61 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _61
}

%% test_lib.erl:129
%% Counter = 14
%% bs_ensure_opt: true
function `test_lib`:`'-get_data_dir/1-fun-0-'`(_6, _5) {
0:
  %% test_lib.erl:131
  %% Aliased:
  %%    _5, 
  %%    _6
  _10 = call (`re`:`replace`/4), _5, _6, `"_SUITE"`, `[{return,list}]`

  %% Aliased:
  %%    _10
  _13 = succeeded:body _10
  br _13, ^13, ^1

13:
  %% Aliased:
  %%    _10
  ret _10

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% test_lib.erl:87
%% Counter = 25
%% bs_ensure_opt: true
function `test_lib`:`'-opt_opts/1-fun-0-'`(_3) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _21 = bif:is_tuple _3
  br _21, ^21, ^16

21:
  %% Argument types:
  %%    _3 => {...}
  %% Aliased:
  %%    _3
  _23 = is_tagged_tuple _3, `3`, `feature`
  br _23, ^18, ^15

18:
  %% Argument types:
  %%    _3 => {'feature', any(), any()}
  %% Aliased:
  %%    _3
  _10 = get_tuple_element _3, `2`
  switch _10, ^15, [
    { `disable`, ^17 },
    { `enable`, ^17 }
  ]

17:
  %% Result type:
  %%    'true'
  ret `true`

16:
  switch _3, ^15, [
    { `debug_info`, ^24 },
    { `dialyzer`, ^24 },
    { `inline`, ^24 },
    { `line_coverage`, ^24 },
    { `no_badrecord`, ^24 },
    { `no_bs_create_bin`, ^24 },
    { `no_bs_match`, ^24 },
    { `no_bsm_opt`, ^24 },
    { `no_copt`, ^24 },
    { `no_fun_opt`, ^24 },
    { `no_min_max_bifs`, ^24 },
    { `no_module_opt`, ^24 },
    { `no_postopt`, ^24 },
    { `no_recv_opt`, ^24 },
    { `no_share_opt`, ^24 },
    { `no_ssa_opt`, ^24 },
    { `no_ssa_opt_float`, ^24 },
    { `no_ssa_opt_ranges`, ^24 },
    { `no_stack_trimming`, ^24 },
    { `no_type_opt`, ^24 }
  ]

24:
  %% Result type:
  %%    'true'
  ret `true`

15:
  %% Result type:
  %%    'false'
  ret `false`
}
