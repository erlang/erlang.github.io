module float_SUITE.
exports [{all,0},
         {bif_calls,1},
         {end_per_group,2},
         {end_per_suite,1},
         {exception_signals,1},
         {fconv_line_numbers,1},
         {float_followed_by_guard,1},
         {float_zero,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {math_functions,1},
         {mixed_float_and_int,1},
         {module_info,0},
         {module_info,1},
         {pending,1},
         {subtract_number_type,1},
         {suite,0}].
attributes [].

%% float_SUITE.erl:29
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% float_SUITE.erl:31
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list(atom())
  ret `[pending,bif_calls,math_functions,float_zero,mixed_float_and_int,
  subtract_number_type,float_followed_by_guard,fconv_line_numbers,
  exception_signals]`
}

%% float_SUITE.erl:37
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% float_SUITE.erl:40
%% Counter = 6
%% bs_ensure_opt: true
function `float_SUITE`:`init_per_suite`(_0) {
0:
  %% float_SUITE.erl:41
  _2 = call (`test_lib`:`recompile`/1), `float_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% float_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% float_SUITE.erl:47
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% float_SUITE.erl:50
%% Counter = 4
%% bs_ensure_opt: true
function `float_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% float_SUITE.erl:53
%% Counter = 27
%% bs_ensure_opt: true
function `float_SUITE`:`float_zero`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_list _0
  br _15, ^15, ^14

15:
  %% float_SUITE.erl:54
  %% Result type:
  %%    bitstring(64)
  _7 = call (`match_on_zero_and_to_binary`/1), `0.0`

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _7 => bitstring(64)
  %% Aliased:
  %%    _7
  _24 = bif:'=:=' _7, `<<0,0,0,0,0,0,0,0>>`
  br _24, ^24, ^18

24:
  %% float_SUITE.erl:55
  %% Result type:
  %%    bitstring(64)
  _8 = call (`match_on_zero_and_to_binary`/1), `-0.0`

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _8 => bitstring(64)
  %% Aliased:
  %%    _8
  _22 = bif:'=:=' _8, `<<128,0,0,0,0,0,0,0>>`
  br _22, ^22, ^21

22:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% float_SUITE.erl:55
  %% Aliased:
  %%    _8
  _9 = match_fail `badmatch`, _8

  %% Unique:
  %%    _9
  _23 = succeeded:body _9
  br ^1

18:
  %% float_SUITE.erl:54
  %% Aliased:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _25 = succeeded:body _10
  br ^1

14:
  %% float_SUITE.erl:53
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-float_zero/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _26 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% float_SUITE.erl:58
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -0.0..0.0
function `float_SUITE`:`match_on_zero_and_to_binary`(_0) {
0:
  %% Argument types:
  %%    _0 => -0.0..0.0
  %% Unique:
  %%    _0
  _7 = bif:'==' _0, `0.0`
  br _7, ^7, ^6

7:
  %% float_SUITE.erl:58
  %% Argument types:
  %%    _0 => -0.0..0.0
  %% Unique:
  %%    _0
  %% Anno: #{unit => 64}
  _2 = bs_create_bin `float`, `[1,{segment,1}]`, _0, `64`

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    bitstring(64)
  %% Aliased:
  %%    _2
  ret _2

6:
  %% float_SUITE.erl:58
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-match_on_zero_and_to_binary/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% float_SUITE.erl:63
%% Counter = 71
%% bs_ensure_opt: true
function `float_SUITE`:`pending`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_list _0
  br _20, ^69, ^19

69:
  br ^70

70:
  _24 = new_try_tag `'catch'`
  br _24, ^22, ^23

22:
  %% float_SUITE.erl:64
  %% Result type:
  %%    'ok'
  _13 = call (`float_mul`/3), `1`, `1.1e300`, `3.14e300`

  %% Unique:
  %%    _13
  _26 = succeeded:body _13
  br _26, ^26, ^23

26:
  br ^21

23:
  %% Unique:
  %%    _24
  _29 = landingpad `'catch'`, _24

  %% Aliased:
  %%    _29
  _27 = extract _29, `0`
  br ^21

21:
  _30 = phi { _27, ^23 }, { `ok`, ^26 }

  %% Aliased:
  %%    _30
  %% Unique:
  %%    _24
  _1 = catch_end _24, _30

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _42 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _42, ^39, ^32

39:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _8 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _36 = is_tagged_tuple _8, `2`, `badarith`
  br _36, ^31, ^32

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _7 = put_tuple `expected_exception`, _1

  %% float_SUITE.erl:66
  %% Unique:
  %%    _7
  _14 = call (`ct`:`fail`/1), _7

  %% Aliased:
  %%    _14
  _45 = succeeded:body _14
  br _45, ^31, ^1

31:
  %% float_SUITE.erl:68
  %% Result type:
  %%    0.0
  _6 = call (`float_sub`/1), `2.0`

  %% Unique:
  %%    _6
  _46 = succeeded:body _6
  br _46, ^49, ^1

49:
  %% Result type:
  %%    0.0
  %% Unique:
  %%    _6
  ret _6

19:
  %% float_SUITE.erl:63
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pending/1-',1}}
  _16 = match_fail `function_clause`, _0

  %% Unique:
  %%    _16
  _52 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% float_SUITE.erl:70
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
function `float_SUITE`:`float_sub`(_0) {
0:
  %% Result type:
  %%    0.0
  ret `0.0`
}

%% float_SUITE.erl:73
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..1
%%    _1 =>
%%     1.1e300
%%    _2 =>
%%     3.14e300
function `float_SUITE`:`float_mul`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => 0..1
  %% Unique:
  %%    _0
  _20 = bif:'=:=' _0, `0`
  br _20, ^19, ^23

19:
  %% Result type:
  %%    'ok'
  ret `ok`

23:
  %% float_SUITE.erl:76
  _32 = float:put `1.1e300`

  %% float_SUITE.erl:76
  _33 = float:put `3.14e300`

  %% float_SUITE.erl:76
  %% Unique:
  %%    _32, 
  %%    _33
  _34 = float:'*' _32, _33

  %% Unique:
  %%    _34
  _24 = succeeded:body _34
  br _24, ^25, ^1

25:
  %% float_SUITE.erl:77
  %% Result type:
  %%    'ok'
  _14 = call (`float_mul`/3), `0`, _1, _2

  %% Unique:
  %%    _14
  _26 = succeeded:body _14
  br _26, ^26, ^1

26:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _14
  ret _14

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% float_SUITE.erl:81
%% Counter = 268
%% bs_ensure_opt: true
function `float_SUITE`:`bif_calls`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _56 = bif:is_list _0
  br _56, ^258, ^55

258:
  br ^263

263:
  _60 = new_try_tag `'catch'`
  br _60, ^58, ^59

58:
  %% float_SUITE.erl:82
  %% Result type:
  %%    {float(), 3.4}
  _38 = call (`bad_arith`/2), `2.0`, `1.7`

  %% Unique:
  %%    _38
  _62 = succeeded:body _38
  br _62, ^62, ^59

62:
  br ^57

59:
  %% Unique:
  %%    _60
  _65 = landingpad `'catch'`, _60

  %% Aliased:
  %%    _65
  _63 = extract _65, `0`
  br ^57

57:
  _66 = phi { _63, ^59 }, { _38, ^62 }

  %% Aliased:
  %%    _66
  %% Unique:
  %%    _60
  _1 = catch_end _60, _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _178 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _178, ^175, ^68

175:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _17 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _172 = is_tagged_tuple _17, `2`, `badarith`
  br _172, ^259, ^68

259:
  br ^264

264:
  _72 = new_try_tag `'catch'`
  br _72, ^70, ^71

70:
  %% float_SUITE.erl:83
  %% Result type:
  %%    none()
  _40 = call (`bad_arith_again`/2), `2.0`, `[]`

  %% Aliased:
  %%    _40
  _74 = succeeded:body _40
  br ^71

71:
  %% Unique:
  %%    _72
  _77 = landingpad `'catch'`, _72

  %% Aliased:
  %%    _77
  _75 = extract _77, `0`
  br ^69

69:
  %% Aliased:
  %%    _75
  %% Unique:
  %%    _72
  _3 = catch_end _72, _75

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _165 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _165, ^162, ^80

162:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _21 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _159 = is_tagged_tuple _21, `2`, `badarith`
  br _159, ^260, ^80

260:
  br ^265

265:
  _84 = new_try_tag `'catch'`
  br _84, ^82, ^83

82:
  %% float_SUITE.erl:84
  %% Result type:
  %%    none()
  _42 = call (`bad_arith_xor`/2), `2.0`, `[]`

  %% Aliased:
  %%    _42
  _86 = succeeded:body _42
  br ^83

83:
  %% Unique:
  %%    _84
  _89 = landingpad `'catch'`, _84

  %% Aliased:
  %%    _89
  _87 = extract _89, `0`
  br ^81

81:
  %% Aliased:
  %%    _87
  %% Unique:
  %%    _84
  _5 = catch_end _84, _87

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _152 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _152, ^149, ^92

149:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _25 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _146 = is_tagged_tuple _25, `2`, `badarith`
  br _146, ^261, ^92

261:
  br ^266

266:
  _96 = new_try_tag `'catch'`
  br _96, ^94, ^95

94:
  %% float_SUITE.erl:85
  %% Result type:
  %%    none()
  _44 = call (`bad_arith_hd`/2), `2.0`, `[]`

  %% Aliased:
  %%    _44
  _98 = succeeded:body _44
  br ^95

95:
  %% Unique:
  %%    _96
  _101 = landingpad `'catch'`, _96

  %% Aliased:
  %%    _101
  _99 = extract _101, `0`
  br ^93

93:
  %% Aliased:
  %%    _99
  %% Unique:
  %%    _96
  _7 = catch_end _96, _99

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _139 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _139, ^136, ^104

136:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _29 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _133 = is_tagged_tuple _29, `2`, `badarith`
  br _133, ^262, ^104

262:
  br ^267

267:
  _108 = new_try_tag `'catch'`
  br _108, ^106, ^107

106:
  %% float_SUITE.erl:86
  %% Result type:
  %%    {float(), -1.7}
  _46 = call (`bad_negate`/2), `2.0`, `1.7`

  %% Unique:
  %%    _46
  _110 = succeeded:body _46
  br _110, ^110, ^107

110:
  br ^105

107:
  %% Unique:
  %%    _108
  _113 = landingpad `'catch'`, _108

  %% Aliased:
  %%    _113
  _111 = extract _113, `0`
  br ^105

105:
  _114 = phi { _111, ^107 }, { _46, ^110 }

  %% Aliased:
  %%    _114
  %% Unique:
  %%    _108
  _9 = catch_end _108, _114

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _126 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _126, ^123, ^116

123:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _33 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _120 = is_tagged_tuple _33, `2`, `badarith`
  br _120, ^117, ^116

117:
  %% Result type:
  %%    'ok'
  ret `ok`

116:
  %% float_SUITE.erl:86
  %% Aliased:
  %%    _9
  _47 = match_fail `badmatch`, _9

  %% Unique:
  %%    _47
  _129 = succeeded:body _47
  br ^1

104:
  %% float_SUITE.erl:85
  %% Aliased:
  %%    _7
  _48 = match_fail `badmatch`, _7

  %% Unique:
  %%    _48
  _142 = succeeded:body _48
  br ^1

92:
  %% float_SUITE.erl:84
  %% Aliased:
  %%    _5
  _49 = match_fail `badmatch`, _5

  %% Unique:
  %%    _49
  _155 = succeeded:body _49
  br ^1

80:
  %% float_SUITE.erl:83
  %% Aliased:
  %%    _3
  _50 = match_fail `badmatch`, _3

  %% Unique:
  %%    _50
  _168 = succeeded:body _50
  br ^1

68:
  %% float_SUITE.erl:82
  %% Aliased:
  %%    _1
  _51 = match_fail `badmatch`, _1

  %% Unique:
  %%    _51
  _181 = succeeded:body _51
  br ^1

55:
  %% float_SUITE.erl:81
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bif_calls/1-',1}}
  _52 = match_fail `function_clause`, _0

  %% Unique:
  %%    _52
  _182 = succeeded:body _52
  br ^1

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% float_SUITE.erl:89
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
%%    _1 =>
%%     1.7
function `float_SUITE`:`bad_arith`(_0, _1) {
0:
  %% float_SUITE.erl:90
  _17 = float:put `2.0`

  %% float_SUITE.erl:90
  _18 = float:put `1.7e308`

  %% float_SUITE.erl:90
  %% Unique:
  %%    _17, 
  %%    _18
  _19 = float:'*' _17, _18

  %% Unique:
  %%    _19
  _13 = succeeded:body _19
  br _13, ^13, ^1

13:
  %% float_SUITE.erl:91
  _20 = float:put `1.0`

  %% float_SUITE.erl:91
  %% Unique:
  %%    _19, 
  %%    _20
  _21 = float:'+' _19, _20

  %% Unique:
  %%    _21
  _14 = succeeded:body _21
  br _14, ^22, ^1

22:
  %% Unique:
  %%    _21
  X2 = float:get _21

  %% Argument types:
  %%    X2 => float()
  %% Unique:
  %%    X2
  _7 = put_tuple X2, `3.4`
  %% Result type:
  %%    {float(), 3.4}
  %% Unique:
  %%    _7
  ret _7

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:96
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
%%    _1 =>
%%     nil()
function `float_SUITE`:`bad_arith_xor`(_0, _1) {
0:
  %% float_SUITE.erl:97
  _17 = float:put `2.0`

  %% float_SUITE.erl:97
  _18 = float:put `1.7e308`

  %% float_SUITE.erl:97
  %% Unique:
  %%    _17, 
  %%    _18
  _19 = float:'*' _17, _18

  %% Unique:
  %%    _19
  _13 = succeeded:body _19
  br _13, ^13, ^1

13:
  %% float_SUITE.erl:98
  %% Argument types:
  %%    
  Y1 = bif:'xor' `[]`, `true`

  %% Unique:
  %%    Y1
  _14 = succeeded:body Y1
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:101
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
%%    _1 =>
%%     nil()
function `float_SUITE`:`bad_arith_hd`(_0, _1) {
0:
  %% float_SUITE.erl:102
  _17 = float:put `2.0`

  %% float_SUITE.erl:102
  _18 = float:put `1.7e308`

  %% float_SUITE.erl:102
  %% Unique:
  %%    _17, 
  %%    _18
  _19 = float:'*' _17, _18

  %% Unique:
  %%    _19
  _13 = succeeded:body _19
  br _13, ^13, ^1

13:
  %% float_SUITE.erl:103
  %% Argument types:
  %%    
  Y1 = bif:hd `[]`

  %% Unique:
  %%    Y1
  _14 = succeeded:body Y1
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:106
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
%%    _1 =>
%%     nil()
function `float_SUITE`:`bad_arith_again`(_0, _1) {
0:
  %% float_SUITE.erl:107
  _17 = float:put `2.0`

  %% float_SUITE.erl:107
  _18 = float:put `1.7e308`

  %% float_SUITE.erl:107
  %% Unique:
  %%    _17, 
  %%    _18
  _19 = float:'*' _17, _18

  %% Unique:
  %%    _19
  _13 = succeeded:body _19
  br _13, ^13, ^1

13:
  %% float_SUITE.erl:108
  %% Argument types:
  %%    
  Y1 = bif:element `1`, `[]`

  %% Unique:
  %%    Y1
  _14 = succeeded:body Y1
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:111
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2.0
%%    _1 =>
%%     1.7
function `float_SUITE`:`bad_negate`(_0, _1) {
0:
  %% float_SUITE.erl:112
  _17 = float:put `2.0`

  %% float_SUITE.erl:112
  _18 = float:put `1.7e308`

  %% float_SUITE.erl:112
  %% Unique:
  %%    _17, 
  %%    _18
  _19 = float:'*' _17, _18

  %% Unique:
  %%    _19
  _13 = succeeded:body _19
  br _13, ^13, ^1

13:
  %% float_SUITE.erl:113
  _20 = float:put `1.0`

  %% float_SUITE.erl:113
  %% Unique:
  %%    _19, 
  %%    _20
  _21 = float:'+' _19, _20

  %% Unique:
  %%    _21
  _14 = succeeded:body _21
  br _14, ^22, ^1

22:
  %% Unique:
  %%    _21
  X2 = float:get _21

  %% Argument types:
  %%    X2 => float()
  %% Unique:
  %%    X2
  _7 = put_tuple X2, `-1.7`
  %% Result type:
  %%    {float(), -1.7}
  %% Unique:
  %%    _7
  ret _7

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:125
%% Counter = 742
%% bs_ensure_opt: true
function `float_SUITE`:`math_functions`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _244 = bif:is_list _0
  br _244, ^244, ^243

244:
  %% float_SUITE.erl:146
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _41 = call (`id`/1), `0`

  %% Unique:
  %%    _41
  _245 = succeeded:body _41
  br _245, ^245, ^1

245:
  %% float_SUITE.erl:146
  %% Unique:
  %%    _41
  _159 = call (`math`:`tan`/1), _41

  %% Aliased:
  %%    _159
  _246 = succeeded:body _159
  br _246, ^246, ^1

246:
  %% Argument types:
  %%    _159 => float()
  %% Unique:
  %%    _159
  _569 = bif:'=:=' _159, `0.0`
  br _569, ^568, ^248

568:
  %% float_SUITE.erl:147
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _43 = call (`id`/1), `0`

  %% Unique:
  %%    _43
  _249 = succeeded:body _43
  br _249, ^249, ^1

249:
  %% float_SUITE.erl:147
  %% Unique:
  %%    _43
  _160 = call (`math`:`atan2`/2), _43, `1`

  %% Aliased:
  %%    _160
  _250 = succeeded:body _160
  br _250, ^250, ^1

250:
  %% Argument types:
  %%    _160 => float()
  %% Unique:
  %%    _160
  _566 = bif:'=:=' _160, `0.0`
  br _566, ^565, ^252

565:
  %% float_SUITE.erl:148
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _45 = call (`id`/1), `0`

  %% Unique:
  %%    _45
  _253 = succeeded:body _45
  br _253, ^253, ^1

253:
  %% float_SUITE.erl:148
  %% Unique:
  %%    _45
  _161 = call (`math`:`sinh`/1), _45

  %% Aliased:
  %%    _161
  _254 = succeeded:body _161
  br _254, ^254, ^1

254:
  %% Argument types:
  %%    _161 => float()
  %% Unique:
  %%    _161
  _563 = bif:'=:=' _161, `0.0`
  br _563, ^562, ^256

562:
  %% float_SUITE.erl:149
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _47 = call (`id`/1), `0`

  %% Unique:
  %%    _47
  _257 = succeeded:body _47
  br _257, ^257, ^1

257:
  %% float_SUITE.erl:149
  %% Unique:
  %%    _47
  _162 = call (`math`:`cosh`/1), _47

  %% Aliased:
  %%    _162
  _258 = succeeded:body _162
  br _258, ^258, ^1

258:
  %% Argument types:
  %%    _162 => float()
  %% Unique:
  %%    _162
  _560 = bif:'=:=' _162, `1.0`
  br _560, ^559, ^260

559:
  %% float_SUITE.erl:150
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _49 = call (`id`/1), `0`

  %% Unique:
  %%    _49
  _261 = succeeded:body _49
  br _261, ^261, ^1

261:
  %% float_SUITE.erl:150
  %% Unique:
  %%    _49
  _163 = call (`math`:`tanh`/1), _49

  %% Aliased:
  %%    _163
  _262 = succeeded:body _163
  br _262, ^262, ^1

262:
  %% Argument types:
  %%    _163 => float()
  %% Unique:
  %%    _163
  _557 = bif:'=:=' _163, `0.0`
  br _557, ^556, ^264

556:
  %% float_SUITE.erl:151
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _51 = call (`id`/1), `2`

  %% Unique:
  %%    _51
  _265 = succeeded:body _51
  br _265, ^265, ^1

265:
  %% float_SUITE.erl:151
  %% Unique:
  %%    _51
  _164 = call (`math`:`log2`/1), _51

  %% Aliased:
  %%    _164
  _266 = succeeded:body _164
  br _266, ^266, ^1

266:
  %% Argument types:
  %%    _164 => float()
  %% Unique:
  %%    _164
  _554 = bif:'=:=' _164, `1.0`
  br _554, ^553, ^268

553:
  %% float_SUITE.erl:152
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _53 = call (`id`/1), `10`

  %% Unique:
  %%    _53
  _269 = succeeded:body _53
  br _269, ^269, ^1

269:
  %% float_SUITE.erl:152
  %% Unique:
  %%    _53
  _165 = call (`math`:`log10`/1), _53

  %% Aliased:
  %%    _165
  _270 = succeeded:body _165
  br _270, ^270, ^1

270:
  %% Argument types:
  %%    _165 => float()
  %% Unique:
  %%    _165
  _551 = bif:'=:=' _165, `1.0`
  br _551, ^550, ^272

550:
  %% float_SUITE.erl:153
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _55 = call (`id`/1), `0`

  %% Unique:
  %%    _55
  _273 = succeeded:body _55
  br _273, ^273, ^1

273:
  %% float_SUITE.erl:153
  %% Unique:
  %%    _55
  _166 = call (`math`:`exp`/1), _55

  %% Aliased:
  %%    _166
  _274 = succeeded:body _166
  br _274, ^274, ^1

274:
  %% Argument types:
  %%    _166 => float()
  %% Unique:
  %%    _166
  _548 = bif:'=:=' _166, `1.0`
  br _548, ^547, ^276

547:
  %% float_SUITE.erl:154
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _57 = call (`id`/1), `1`

  %% Unique:
  %%    _57
  _277 = succeeded:body _57
  br _277, ^277, ^1

277:
  %% float_SUITE.erl:154
  %% Unique:
  %%    _57
  _167 = call (`math`:`log`/1), _57

  %% Aliased:
  %%    _167
  _278 = succeeded:body _167
  br _278, ^278, ^1

278:
  %% Argument types:
  %%    _167 => float()
  %% Unique:
  %%    _167
  _545 = bif:'=:=' _167, `0.0`
  br _545, ^544, ^280

544:
  %% float_SUITE.erl:155
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _59 = call (`id`/1), `0`

  %% Unique:
  %%    _59
  _281 = succeeded:body _59
  br _281, ^281, ^1

281:
  %% float_SUITE.erl:155
  %% Unique:
  %%    _59
  _168 = call (`math`:`asin`/1), _59

  %% Aliased:
  %%    _168
  _282 = succeeded:body _168
  br _282, ^282, ^1

282:
  %% Argument types:
  %%    _168 => float()
  %% Unique:
  %%    _168
  _542 = bif:'=:=' _168, `0.0`
  br _542, ^541, ^284

541:
  %% float_SUITE.erl:156
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _61 = call (`id`/1), `1`

  %% Unique:
  %%    _61
  _285 = succeeded:body _61
  br _285, ^285, ^1

285:
  %% float_SUITE.erl:156
  %% Unique:
  %%    _61
  _169 = call (`math`:`acos`/1), _61

  %% Aliased:
  %%    _169
  _286 = succeeded:body _169
  br _286, ^286, ^1

286:
  %% Argument types:
  %%    _169 => float()
  %% Unique:
  %%    _169
  _539 = bif:'=:=' _169, `0.0`
  br _539, ^722, ^288

722:
  br ^732

732:
  _293 = new_try_tag `'try'`
  br _293, ^292, ^290

292:
  %% float_SUITE.erl:157
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _63 = call (`id`/1), `0`

  %% Unique:
  %%    _63
  _294 = succeeded:body _63
  br _294, ^294, ^290

294:
  %% float_SUITE.erl:157
  %% Unique:
  %%    _63
  _129 = call (`math`:`asinh`/1), _63

  %% Aliased:
  %%    _129
  _295 = succeeded:body _129
  br _295, ^295, ^290

295:
  %% Argument types:
  %%    _129 => float()
  %% Unique:
  %%    _129
  _299 = bif:'=:=' _129, `0.0`
  br _299, ^296, ^297

296:
  %% Unique:
  %%    _293
  _310 = kill_try_tag _293
  br ^723

297:
  %% float_SUITE.erl:157
  %% Aliased:
  %%    _129
  _194 = match_fail `badmatch`, _129

  %% Unique:
  %%    _194
  _300 = succeeded:body _194
  br ^290

290:
  %% Unique:
  %%    _293
  _308 = landingpad `'try'`, _293

  %% Aliased:
  %%    _308
  _68 = extract _308, `0`

  %% Aliased:
  %%    _308
  _67 = extract _308, `1`

  %% Aliased:
  %%    _308
  _66 = extract _308, `2`

  %% Unique:
  %%    _293
  _309 = kill_try_tag _293

  %% Argument types:
  %%    _68 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _68
  _306 = bif:'=:=' _68, `error`
  br _306, ^305, ^302

305:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _304 = bif:'=:=' _67, `undef`
  br _304, ^723, ^302

723:
  br ^733

733:
  _315 = new_try_tag `'try'`
  br _315, ^314, ^312

314:
  %% float_SUITE.erl:158
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _69 = call (`id`/1), `1`

  %% Unique:
  %%    _69
  _316 = succeeded:body _69
  br _316, ^316, ^312

316:
  %% float_SUITE.erl:158
  %% Unique:
  %%    _69
  _131 = call (`math`:`acosh`/1), _69

  %% Aliased:
  %%    _131
  _317 = succeeded:body _131
  br _317, ^317, ^312

317:
  %% Argument types:
  %%    _131 => float()
  %% Unique:
  %%    _131
  _321 = bif:'=:=' _131, `0.0`
  br _321, ^318, ^319

318:
  %% Unique:
  %%    _315
  _332 = kill_try_tag _315
  br ^724

319:
  %% float_SUITE.erl:158
  %% Aliased:
  %%    _131
  _198 = match_fail `badmatch`, _131

  %% Unique:
  %%    _198
  _322 = succeeded:body _198
  br ^312

312:
  %% Unique:
  %%    _315
  _330 = landingpad `'try'`, _315

  %% Aliased:
  %%    _330
  _74 = extract _330, `0`

  %% Aliased:
  %%    _330
  _73 = extract _330, `1`

  %% Aliased:
  %%    _330
  _72 = extract _330, `2`

  %% Unique:
  %%    _315
  _331 = kill_try_tag _315

  %% Argument types:
  %%    _74 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _74
  _328 = bif:'=:=' _74, `error`
  br _328, ^327, ^324

327:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _326 = bif:'=:=' _73, `undef`
  br _326, ^724, ^324

724:
  br ^734

734:
  _337 = new_try_tag `'try'`
  br _337, ^336, ^334

336:
  %% float_SUITE.erl:159
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _75 = call (`id`/1), `0`

  %% Unique:
  %%    _75
  _338 = succeeded:body _75
  br _338, ^338, ^334

338:
  %% float_SUITE.erl:159
  %% Unique:
  %%    _75
  _133 = call (`math`:`atanh`/1), _75

  %% Aliased:
  %%    _133
  _339 = succeeded:body _133
  br _339, ^339, ^334

339:
  %% Argument types:
  %%    _133 => float()
  %% Unique:
  %%    _133
  _343 = bif:'=:=' _133, `0.0`
  br _343, ^340, ^341

340:
  %% Unique:
  %%    _337
  _354 = kill_try_tag _337
  br ^725

341:
  %% float_SUITE.erl:159
  %% Aliased:
  %%    _133
  _202 = match_fail `badmatch`, _133

  %% Unique:
  %%    _202
  _344 = succeeded:body _202
  br ^334

334:
  %% Unique:
  %%    _337
  _352 = landingpad `'try'`, _337

  %% Aliased:
  %%    _352
  _80 = extract _352, `0`

  %% Aliased:
  %%    _352
  _79 = extract _352, `1`

  %% Aliased:
  %%    _352
  _78 = extract _352, `2`

  %% Unique:
  %%    _337
  _353 = kill_try_tag _337

  %% Argument types:
  %%    _80 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _80
  _350 = bif:'=:=' _80, `error`
  br _350, ^349, ^346

349:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _348 = bif:'=:=' _79, `undef`
  br _348, ^725, ^346

725:
  br ^735

735:
  _359 = new_try_tag `'try'`
  br _359, ^358, ^356

358:
  %% float_SUITE.erl:160
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _81 = call (`id`/1), `0`

  %% Unique:
  %%    _81
  _360 = succeeded:body _81
  br _360, ^360, ^356

360:
  %% float_SUITE.erl:160
  %% Unique:
  %%    _81
  _135 = call (`math`:`erf`/1), _81

  %% Aliased:
  %%    _135
  _361 = succeeded:body _135
  br _361, ^361, ^356

361:
  %% Argument types:
  %%    _135 => float()
  %% Unique:
  %%    _135
  _365 = bif:'=:=' _135, `0.0`
  br _365, ^362, ^363

362:
  %% Unique:
  %%    _359
  _376 = kill_try_tag _359
  br ^726

363:
  %% float_SUITE.erl:160
  %% Aliased:
  %%    _135
  _206 = match_fail `badmatch`, _135

  %% Unique:
  %%    _206
  _366 = succeeded:body _206
  br ^356

356:
  %% Unique:
  %%    _359
  _374 = landingpad `'try'`, _359

  %% Aliased:
  %%    _374
  _86 = extract _374, `0`

  %% Aliased:
  %%    _374
  _85 = extract _374, `1`

  %% Aliased:
  %%    _374
  _84 = extract _374, `2`

  %% Unique:
  %%    _359
  _375 = kill_try_tag _359

  %% Argument types:
  %%    _86 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _86
  _372 = bif:'=:=' _86, `error`
  br _372, ^371, ^368

371:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _370 = bif:'=:=' _85, `undef`
  br _370, ^726, ^368

726:
  br ^736

736:
  _381 = new_try_tag `'try'`
  br _381, ^380, ^378

380:
  %% float_SUITE.erl:161
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _87 = call (`id`/1), `0`

  %% Unique:
  %%    _87
  _382 = succeeded:body _87
  br _382, ^382, ^378

382:
  %% float_SUITE.erl:161
  %% Unique:
  %%    _87
  _137 = call (`math`:`erfc`/1), _87

  %% Aliased:
  %%    _137
  _383 = succeeded:body _137
  br _383, ^383, ^378

383:
  %% Argument types:
  %%    _137 => float()
  %% Unique:
  %%    _137
  _387 = bif:'=:=' _137, `1.0`
  br _387, ^384, ^385

384:
  %% Unique:
  %%    _381
  _398 = kill_try_tag _381
  br ^379

385:
  %% float_SUITE.erl:161
  %% Aliased:
  %%    _137
  _210 = match_fail `badmatch`, _137

  %% Unique:
  %%    _210
  _388 = succeeded:body _210
  br ^378

378:
  %% Unique:
  %%    _381
  _396 = landingpad `'try'`, _381

  %% Aliased:
  %%    _396
  _92 = extract _396, `0`

  %% Aliased:
  %%    _396
  _91 = extract _396, `1`

  %% Aliased:
  %%    _396
  _90 = extract _396, `2`

  %% Unique:
  %%    _381
  _397 = kill_try_tag _381

  %% Argument types:
  %%    _92 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _92
  _394 = bif:'=:=' _92, `error`
  br _394, ^393, ^390

393:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _392 = bif:'=:=' _91, `undef`
  br _392, ^379, ^390

379:
  %% float_SUITE.erl:165
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _95 = call (`id`/1), `5.4`

  %% Unique:
  %%    _95
  _399 = succeeded:body _95
  br _399, ^399, ^1

399:
  %% float_SUITE.erl:165
  %% Unique:
  %%    _95
  _170 = call (`math`:`floor`/1), _95

  %% Aliased:
  %%    _170
  _400 = succeeded:body _170
  br _400, ^400, ^1

400:
  %% Argument types:
  %%    _170 => float()
  %% Unique:
  %%    _170
  _536 = bif:'=:=' _170, `5.0`
  br _536, ^535, ^402

535:
  %% float_SUITE.erl:166
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _97 = call (`id`/1), `5.4`

  %% Unique:
  %%    _97
  _403 = succeeded:body _97
  br _403, ^403, ^1

403:
  %% float_SUITE.erl:166
  %% Unique:
  %%    _97
  _171 = call (`math`:`ceil`/1), _97

  %% Aliased:
  %%    _171
  _404 = succeeded:body _171
  br _404, ^404, ^1

404:
  %% Argument types:
  %%    _171 => float()
  %% Unique:
  %%    _171
  _533 = bif:'=:=' _171, `6.0`
  br _533, ^727, ^406

727:
  br ^737

737:
  _410 = new_try_tag `'catch'`
  br _410, ^408, ^409

408:
  %% float_SUITE.erl:173
  _213 = call (`math`:`fmod`/2), `5.0`, `0.0`

  %% Aliased:
  %%    _213
  _412 = succeeded:body _213
  br _412, ^412, ^409

412:
  br ^407

409:
  %% Unique:
  %%    _410
  _415 = landingpad `'catch'`, _410

  %% Aliased:
  %%    _415
  _413 = extract _415, `0`
  br ^407

407:
  _416 = phi { _413, ^409 }, { _213, ^412 }

  %% Aliased:
  %%    _416
  %% Unique:
  %%    _410
  _108 = catch_end _410, _416

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _528 = is_tagged_tuple _108, `2`, `'EXIT'`
  br _528, ^525, ^418

525:
  %% Argument types:
  %%    _108 => {''EXIT'', any()}
  %% Aliased:
  %%    _108
  _172 = get_tuple_element _108, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _522 = is_tagged_tuple _172, `2`, `badarith`
  br _522, ^728, ^418

728:
  br ^738

738:
  _422 = new_try_tag `'catch'`
  br _422, ^420, ^421

420:
  %% float_SUITE.erl:176
  _215 = call (`math`:`fnurfla`/1), `0`

  %% Aliased:
  %%    _215
  _424 = succeeded:body _215
  br _424, ^424, ^421

424:
  br ^419

421:
  %% Unique:
  %%    _422
  _427 = landingpad `'catch'`, _422

  %% Aliased:
  %%    _427
  _425 = extract _427, `0`
  br ^419

419:
  _428 = phi { _425, ^421 }, { _215, ^424 }

  %% Aliased:
  %%    _428
  %% Unique:
  %%    _422
  _110 = catch_end _422, _428

  %% Argument types:
  %%    
  %% Aliased:
  %%    _110
  _515 = is_tagged_tuple _110, `2`, `'EXIT'`
  br _515, ^512, ^430

512:
  %% Argument types:
  %%    _110 => {''EXIT'', any()}
  %% Aliased:
  %%    _110
  _176 = get_tuple_element _110, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _176
  _509 = is_tagged_tuple _176, `2`, `undef`
  br _509, ^729, ^430

729:
  br ^739

739:
  _434 = new_try_tag `'catch'`
  br _434, ^432, ^433

432:
  %% float_SUITE.erl:177
  _217 = call (`math`:`fnurfla`/2), `0`, `0`

  %% Aliased:
  %%    _217
  _436 = succeeded:body _217
  br _436, ^436, ^433

436:
  br ^431

433:
  %% Unique:
  %%    _434
  _439 = landingpad `'catch'`, _434

  %% Aliased:
  %%    _439
  _437 = extract _439, `0`
  br ^431

431:
  _440 = phi { _437, ^433 }, { _217, ^436 }

  %% Aliased:
  %%    _440
  %% Unique:
  %%    _434
  _112 = catch_end _434, _440

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _502 = is_tagged_tuple _112, `2`, `'EXIT'`
  br _502, ^499, ^442

499:
  %% Argument types:
  %%    _112 => {''EXIT'', any()}
  %% Aliased:
  %%    _112
  _180 = get_tuple_element _112, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _180
  _496 = is_tagged_tuple _180, `2`, `undef`
  br _496, ^730, ^442

730:
  br ^740

740:
  _446 = new_try_tag `'catch'`
  br _446, ^444, ^445

444:
  %% float_SUITE.erl:178
  %% Argument types:
  %%    
  _219 = bif:float `kalle`

  %% Unique:
  %%    _219
  _448 = succeeded:body _219
  br ^445

445:
  %% Unique:
  %%    _446
  _451 = landingpad `'catch'`, _446

  %% Aliased:
  %%    _451
  _449 = extract _451, `0`
  br ^443

443:
  %% Aliased:
  %%    _449
  %% Unique:
  %%    _446
  _114 = catch_end _446, _449

  %% Argument types:
  %%    
  %% Aliased:
  %%    _114
  _489 = is_tagged_tuple _114, `2`, `'EXIT'`
  br _489, ^486, ^454

486:
  %% Argument types:
  %%    _114 => {''EXIT'', any()}
  %% Aliased:
  %%    _114
  _184 = get_tuple_element _114, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _184
  _483 = is_tagged_tuple _184, `2`, `badarg`
  br _483, ^731, ^454

731:
  br ^741

741:
  _458 = new_try_tag `'catch'`
  br _458, ^456, ^457

456:
  %% float_SUITE.erl:179
  %% Argument types:
  %%    
  %% Anno: #{float_op => [convert,convert]}
  _221 = bif:'/' `name`, `1`

  %% Unique:
  %%    _221
  _460 = succeeded:body _221
  br ^457

457:
  %% Unique:
  %%    _458
  _463 = landingpad `'catch'`, _458

  %% Aliased:
  %%    _463
  _461 = extract _463, `0`
  br ^455

455:
  %% Aliased:
  %%    _461
  %% Unique:
  %%    _458
  _116 = catch_end _458, _461

  %% Argument types:
  %%    
  %% Aliased:
  %%    _116
  _476 = is_tagged_tuple _116, `2`, `'EXIT'`
  br _476, ^473, ^466

473:
  %% Argument types:
  %%    _116 => {''EXIT'', any()}
  %% Aliased:
  %%    _116
  _188 = get_tuple_element _116, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _188
  _470 = is_tagged_tuple _188, `2`, `badarith`
  br _470, ^467, ^466

467:
  %% Result type:
  %%    'ok'
  ret `ok`

466:
  %% float_SUITE.erl:179
  %% Aliased:
  %%    _116
  _222 = match_fail `badmatch`, _116

  %% Unique:
  %%    _222
  _479 = succeeded:body _222
  br ^1

454:
  %% float_SUITE.erl:178
  %% Aliased:
  %%    _114
  _223 = match_fail `badmatch`, _114

  %% Unique:
  %%    _223
  _492 = succeeded:body _223
  br ^1

442:
  %% float_SUITE.erl:177
  %% Aliased:
  %%    _112
  _224 = match_fail `badmatch`, _112

  %% Unique:
  %%    _224
  _505 = succeeded:body _224
  br ^1

430:
  %% float_SUITE.erl:176
  %% Aliased:
  %%    _110
  _225 = match_fail `badmatch`, _110

  %% Unique:
  %%    _225
  _518 = succeeded:body _225
  br ^1

418:
  %% float_SUITE.erl:173
  %% Aliased:
  %%    _108
  _226 = match_fail `badmatch`, _108

  %% Unique:
  %%    _226
  _531 = succeeded:body _226
  br ^1

406:
  %% float_SUITE.erl:166
  %% Aliased:
  %%    _171
  _227 = match_fail `badmatch`, _171

  %% Unique:
  %%    _227
  _534 = succeeded:body _227
  br ^1

402:
  %% float_SUITE.erl:165
  %% Aliased:
  %%    _170
  _228 = match_fail `badmatch`, _170

  %% Unique:
  %%    _228
  _537 = succeeded:body _228
  br ^1

390:
  %% Aliased:
  %%    _90, 
  %%    _91
  _211 = resume _90, _91

  %% Unique:
  %%    _211
  _395 = succeeded:body _211
  br ^1

368:
  %% Aliased:
  %%    _84, 
  %%    _85
  _207 = resume _84, _85

  %% Unique:
  %%    _207
  _373 = succeeded:body _207
  br ^1

346:
  %% Aliased:
  %%    _78, 
  %%    _79
  _203 = resume _78, _79

  %% Unique:
  %%    _203
  _351 = succeeded:body _203
  br ^1

324:
  %% Aliased:
  %%    _72, 
  %%    _73
  _199 = resume _72, _73

  %% Unique:
  %%    _199
  _329 = succeeded:body _199
  br ^1

302:
  %% Aliased:
  %%    _66, 
  %%    _67
  _195 = resume _66, _67

  %% Unique:
  %%    _195
  _307 = succeeded:body _195
  br ^1

288:
  %% float_SUITE.erl:156
  %% Aliased:
  %%    _169
  _229 = match_fail `badmatch`, _169

  %% Unique:
  %%    _229
  _540 = succeeded:body _229
  br ^1

284:
  %% float_SUITE.erl:155
  %% Aliased:
  %%    _168
  _230 = match_fail `badmatch`, _168

  %% Unique:
  %%    _230
  _543 = succeeded:body _230
  br ^1

280:
  %% float_SUITE.erl:154
  %% Aliased:
  %%    _167
  _231 = match_fail `badmatch`, _167

  %% Unique:
  %%    _231
  _546 = succeeded:body _231
  br ^1

276:
  %% float_SUITE.erl:153
  %% Aliased:
  %%    _166
  _232 = match_fail `badmatch`, _166

  %% Unique:
  %%    _232
  _549 = succeeded:body _232
  br ^1

272:
  %% float_SUITE.erl:152
  %% Aliased:
  %%    _165
  _233 = match_fail `badmatch`, _165

  %% Unique:
  %%    _233
  _552 = succeeded:body _233
  br ^1

268:
  %% float_SUITE.erl:151
  %% Aliased:
  %%    _164
  _234 = match_fail `badmatch`, _164

  %% Unique:
  %%    _234
  _555 = succeeded:body _234
  br ^1

264:
  %% float_SUITE.erl:150
  %% Aliased:
  %%    _163
  _235 = match_fail `badmatch`, _163

  %% Unique:
  %%    _235
  _558 = succeeded:body _235
  br ^1

260:
  %% float_SUITE.erl:149
  %% Aliased:
  %%    _162
  _236 = match_fail `badmatch`, _162

  %% Unique:
  %%    _236
  _561 = succeeded:body _236
  br ^1

256:
  %% float_SUITE.erl:148
  %% Aliased:
  %%    _161
  _237 = match_fail `badmatch`, _161

  %% Unique:
  %%    _237
  _564 = succeeded:body _237
  br ^1

252:
  %% float_SUITE.erl:147
  %% Aliased:
  %%    _160
  _238 = match_fail `badmatch`, _160

  %% Unique:
  %%    _238
  _567 = succeeded:body _238
  br ^1

248:
  %% float_SUITE.erl:146
  %% Aliased:
  %%    _159
  _239 = match_fail `badmatch`, _159

  %% Unique:
  %%    _239
  _570 = succeeded:body _239
  br ^1

243:
  %% float_SUITE.erl:125
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-math_functions/1-',1}}
  _240 = match_fail `function_clause`, _0

  %% Unique:
  %%    _240
  _571 = succeeded:body _240
  br ^1

1:
  _241 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _241
}

%% float_SUITE.erl:182
%% Counter = 124
%% bs_ensure_opt: true
function `float_SUITE`:`mixed_float_and_int`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _31 = bif:is_list _0
  br _31, ^31, ^30

31:
  %% float_SUITE.erl:183
  %% Result type:
  %%    129.0
  _11 = call (`pc`/3), `77`, `23`, `5`

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^120, ^1

120:
  br ^122

122:
  _38 = new_try_tag `'catch'`
  br _38, ^36, ^37

36:
  %% float_SUITE.erl:185
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _2 = call (`id`/1), `{a,b,c}`

  %% Unique:
  %%    _2
  _40 = succeeded:body _2
  br _40, ^40, ^37

40:
  %% float_SUITE.erl:185
  %% Result type:
  %%    none()
  %% Unique:
  %%    _2
  _21 = call (`mixed_1`/1), _2

  %% Aliased:
  %%    _21
  _41 = succeeded:body _21
  br ^37

37:
  %% Unique:
  %%    _38
  _44 = landingpad `'catch'`, _38

  %% Aliased:
  %%    _44
  _42 = extract _44, `0`
  br ^35

35:
  %% Aliased:
  %%    _42
  %% Unique:
  %%    _38
  _3 = catch_end _38, _42

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _82 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _82, ^79, ^47

79:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _12 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _76 = is_tagged_tuple _12, `2`, `badarith`
  br _76, ^121, ^47

121:
  br ^123

123:
  _51 = new_try_tag `'catch'`
  br _51, ^49, ^50

49:
  %% float_SUITE.erl:186
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _5 = call (`id`/1), `42`

  %% Unique:
  %%    _5
  _53 = succeeded:body _5
  br _53, ^53, ^50

53:
  %% float_SUITE.erl:186
  %% Result type:
  %%    none()
  %% Unique:
  %%    _5
  _23 = call (`mixed_1`/1), _5

  %% Aliased:
  %%    _23
  _54 = succeeded:body _23
  br ^50

50:
  %% Unique:
  %%    _51
  _57 = landingpad `'catch'`, _51

  %% Aliased:
  %%    _57
  _55 = extract _57, `0`
  br ^48

48:
  %% Aliased:
  %%    _55
  %% Unique:
  %%    _51
  _6 = catch_end _51, _55

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _69 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _69, ^66, ^60

66:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _16 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _63 = bif:is_tuple _16
  br _63, ^63, ^60

63:
  %% Argument types:
  %%    _16 => {...}
  %% Aliased:
  %%    _16
  _64 = bif:tuple_size _16

  %% Argument types:
  %%    _64 => 0..16777215
  %% Unique:
  %%    _64
  _65 = bif:'=:=' _64, `2`
  br _65, ^62, ^60

62:
  %% Argument types:
  %%    _16 => {any(), any()}
  %% Aliased:
  %%    _16
  _19 = get_tuple_element _16, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _61 = bif:'=:=' _19, `{badarg,0.023809523809523808}`
  br _61, ^61, ^60

61:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% float_SUITE.erl:186
  %% Aliased:
  %%    _6
  _24 = match_fail `badmatch`, _6

  %% Unique:
  %%    _24
  _72 = succeeded:body _24
  br ^1

47:
  %% float_SUITE.erl:185
  %% Aliased:
  %%    _3
  _25 = match_fail `badmatch`, _3

  %% Unique:
  %%    _25
  _85 = succeeded:body _25
  br ^1

30:
  %% float_SUITE.erl:182
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-mixed_float_and_int/1-',1}}
  _27 = match_fail `function_clause`, _0

  %% Unique:
  %%    _27
  _89 = succeeded:body _27
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% float_SUITE.erl:190
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     77
%%    _1 =>
%%     23
%%    _2 =>
%%     5
function `float_SUITE`:`pc`(_0, _1, _2) {
0:
  %% Result type:
  %%    129.0
  ret `129.0`
}

%% float_SUITE.erl:193
%% Counter = 43
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
function `float_SUITE`:`mixed_1`(_0) {
0:
  %% float_SUITE.erl:194
  %% Argument types:
  %%    _0 => 'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  _7 = bif:is_tuple _0
  br _7, ^15, ^18

18:
  %% float_SUITE.erl:194
  _29 = float:put `1.0`

  %% float_SUITE.erl:194
  %% Argument types:
  %%    _0 => 'false' | 'gurka' | 'true' | number(0, 42)
  %% Unique:
  %%    _0
  _30 = float:convert _0

  %% Unique:
  %%    _30
  _35 = succeeded:body _30
  br _35, ^35, ^1

35:
  %% float_SUITE.erl:194
  %% Unique:
  %%    _29, 
  %%    _30
  _31 = float:'/' _29, _30

  %% Unique:
  %%    _31
  _16 = succeeded:body _31
  br _16, ^15, ^1

15:
  %% float_SUITE.erl:195
  _36 = float:put `1.0`

  %% float_SUITE.erl:195
  %% Argument types:
  %%    _0 => number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  _37 = float:convert _0

  %% Unique:
  %%    _37
  _42 = succeeded:body _37
  br _42, ^42, ^1

42:
  %% float_SUITE.erl:195
  %% Unique:
  %%    _36, 
  %%    _37
  _38 = float:'/' _36, _37

  %% Unique:
  %%    _38
  _19 = succeeded:body _38
  br _19, ^39, ^1

39:
  %% Unique:
  %%    _38
  _8 = float:get _38

  %% Argument types:
  %%    _8 => float()
  %% Unique:
  %%    _8
  _9 = put_tuple `badarg`, _8

  %% float_SUITE.erl:195
  %% Unique:
  %%    _9
  _11 = call (`erlang`:`error`/1), _9

  %% Aliased:
  %%    _11
  _24 = succeeded:body _11
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% float_SUITE.erl:197
%% Counter = 17
%% bs_ensure_opt: true
function `float_SUITE`:`subtract_number_type`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% float_SUITE.erl:198
  %% Result type:
  %%    integer()
  _3 = call (`fact`/1), `5`

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => integer()
  %% Unique:
  %%    _3
  _14 = bif:'=:=' _3, `120`
  br _14, ^13, ^12

13:
  %% Result type:
  %%    120
  %% Unique:
  %%    _3
  ret _3

12:
  %% float_SUITE.erl:198
  %% Unique:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _15 = succeeded:body _4
  br ^1

8:
  %% float_SUITE.erl:197
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-subtract_number_type/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% float_SUITE.erl:200
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     5
function `float_SUITE`:`fact`(_0) {
0:
  %% float_SUITE.erl:201
  %% Result type:
  %%    integer()
  _2 = call (`fact`/2), _0, `1`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% float_SUITE.erl:203
%% Counter = 14
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     '-inf'..5
%%    _1 =>
%%     integer()
function `float_SUITE`:`fact`(_0, _1) {
0:
  %% Argument types:
  %%    
  switch _0, ^9, [
    { `0`, ^10 },
    { `1`, ^10 }
  ]

10:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _1
  ret _1

9:
  %% float_SUITE.erl:205
  %% Argument types:
  %%    _0 => '-inf'..5
  %% Unique:
  %%    _0
  _3 = bif:'-' _0, `1`

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br _11, ^11, ^1

11:
  %% float_SUITE.erl:205
  %% Argument types:
  %%    _1 => integer()
  %%    _0 => '-inf'..5
  %% Unique:
  %%    _0, 
  %%    _1
  _2 = bif:'*' _1, _0

  %% Unique:
  %%    _2
  _12 = succeeded:body _2
  br _12, ^12, ^1

12:
  %% float_SUITE.erl:205
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _2, 
  %%    _3
  _6 = call (`fact`/2), _3, _2

  %% Unique:
  %%    _6
  _13 = succeeded:body _6
  br _13, ^13, ^1

13:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _6
  ret _6

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% float_SUITE.erl:207
%% Counter = 26
%% bs_ensure_opt: true
function `float_SUITE`:`float_followed_by_guard`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _12 = bif:is_list _0
  br _12, ^12, ^11

12:
  %% float_SUITE.erl:208
  %% Result type:
  %%    'false' | 'true'
  _4 = call (`ffbg_1`/2), `5`, `1`

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^13, ^1

13:
  br _4, ^22, ^15

22:
  %% float_SUITE.erl:209
  %% Result type:
  %%    'false' | 'true'
  _5 = call (`ffbg_1`/2), `1`, `5`

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br _16, ^16, ^1

16:
  br _5, ^18, ^19

18:
  %% float_SUITE.erl:209
  _6 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _6
  _21 = succeeded:body _6
  br ^1

19:
  %% Result type:
  %%    'ok'
  ret `ok`

15:
  %% float_SUITE.erl:208
  _7 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _7
  _24 = succeeded:body _7
  br ^1

11:
  %% float_SUITE.erl:207
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-float_followed_by_guard/1-',1}}
  _8 = match_fail `function_clause`, _0

  %% Unique:
  %%    _8
  _25 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% float_SUITE.erl:212
%% Counter = 30
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     1..5
%%    _1 =>
%%     1..5
function `float_SUITE`:`ffbg_1`(_0, _1) {
0:
  %% float_SUITE.erl:217
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _1
  _2 = call (`id`/1), _1

  %% Unique:
  %%    _2
  _12 = succeeded:body _2
  br _12, ^12, ^1

12:
  %% float_SUITE.erl:217
  %% Argument types:
  %%    _2 => 'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _2
  _24 = float:convert _2

  %% Unique:
  %%    _24
  _29 = succeeded:body _24
  br _29, ^29, ^1

29:
  %% float_SUITE.erl:217
  _25 = float:put `1.0`

  %% float_SUITE.erl:217
  %% Unique:
  %%    _24, 
  %%    _25
  _26 = float:'/' _24, _25

  %% Unique:
  %%    _26
  _13 = succeeded:body _26
  br _13, ^27, ^1

27:
  %% Unique:
  %%    _26
  B = float:get _26

  %% float_SUITE.erl:219
  %% Argument types:
  %%    _0 => 1..5
  %%    B => float()
  %% Unique:
  %%    _0, 
  %%    B
  %% Anno: #{float_op => [convert,float]}
  _4 = bif:'-' _0, B

  %% Unique:
  %%    _4
  _18 = succeeded:guard _4
  br _18, ^18, ^16

18:
  %% Argument types:
  %%    _4 => float()
  %% Unique:
  %%    _4
  _19 = bif:'>' _4, `0.0`
  br _19, ^19, ^16

19:
  %% Result type:
  %%    'true'
  ret `true`

16:
  %% float_SUITE.erl:220
  %% Argument types:
  %%    _0 => 1..5
  %%    B => float()
  %% Unique:
  %%    _0, 
  %%    B
  %% Anno: #{float_op => [convert,float]}
  _5 = bif:'-' _0, B

  %% Unique:
  %%    _5
  _21 = succeeded:guard _5
  br _21, ^21, ^15

21:
  %% Argument types:
  %%    _5 => float()
  %% Unique:
  %%    _5
  _22 = bif:'=<' _5, `0.0`
  br _22, ^22, ^15

22:
  %% Result type:
  %%    'false'
  ret `false`

15:
  %% float_SUITE.erl:218
  _9 = match_fail `if_clause`

  %% Unique:
  %%    _9
  _23 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% float_SUITE.erl:225
%% Counter = 12
%% bs_ensure_opt: true
function `float_SUITE`:`fconv_line_numbers`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:is_list _0
  br _8, ^8, ^7

8:
  %% float_SUITE.erl:226
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _1 = call (`id`/1), `gurka`

  %% Unique:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% float_SUITE.erl:226
  %% Result type:
  %%    'true'
  %% Unique:
  %%    _1
  _3 = call (`fconv_line_numbers_1`/1), _1

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% float_SUITE.erl:225
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-fconv_line_numbers/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% float_SUITE.erl:229
%% Counter = 91
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
function `float_SUITE`:`fconv_line_numbers_1`(_0) {
0:
  %% float_SUITE.erl:231
  _83 = float:put `10.0`
  br ^90

90:
  _38 = new_try_tag `'catch'`
  br _38, ^36, ^37

36:
  %% float_SUITE.erl:231
  %% Argument types:
  %%    _0 => 'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  _84 = float:convert _0

  %% Unique:
  %%    _84
  _89 = succeeded:body _84
  br _89, ^89, ^37

89:
  %% float_SUITE.erl:231
  %% Unique:
  %%    _83, 
  %%    _84
  _85 = float:'/' _83, _84

  %% Unique:
  %%    _85
  _40 = succeeded:body _85
  br _40, ^86, ^37

86:
  %% Unique:
  %%    _85
  _29 = float:get _85
  br ^35

37:
  %% Unique:
  %%    _38
  _43 = landingpad `'catch'`, _38

  %% Aliased:
  %%    _43
  _41 = extract _43, `0`
  br ^35

35:
  _44 = phi { _41, ^37 }, { _29, ^86 }

  %% Aliased:
  %%    _44
  %% Unique:
  %%    _38
  _1 = catch_end _38, _44

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _62 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _62, ^59, ^46

59:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _12 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _56 = is_tagged_tuple _12, `2`, `badarith`
  br _56, ^53, ^46

53:
  %% Result type:
  %%    'false' | 'true'
  _6 = make_fun (`'-fconv_line_numbers_1/1-fun-0-'`/1)

  %% Argument types:
  %%    _12 => {'badarith', any()}
  %% Aliased:
  %%    _12
  _14 = get_tuple_element _12, `1`

  %% float_SUITE.erl:232
  %% Aliased:
  %%    _6, 
  %%    _14
  _11 = call (`lists`:`any`/2), _6, _14

  %% Aliased:
  %%    _11
  _47 = succeeded:body _11
  br _47, ^47, ^1

47:
  br _11, ^50, ^49

50:
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    _11
  ret _11

49:
  %% float_SUITE.erl:232
  _31 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _31
  _52 = succeeded:body _31
  br ^1

46:
  %% float_SUITE.erl:231
  %% Aliased:
  %%    _1
  _32 = match_fail `badmatch`, _1

  %% Unique:
  %%    _32
  _65 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% float_SUITE.erl:240
%% Counter = 60
%% bs_ensure_opt: true
function `float_SUITE`:`exception_signals`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _26 = bif:is_list _0
  br _26, ^26, ^25

26:
  %% float_SUITE.erl:241
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _2 = call (`id`/1), `25`

  %% Unique:
  %%    _2
  _27 = succeeded:body _2
  br _27, ^27, ^1

27:
  %% float_SUITE.erl:241
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _1 = call (`id`/1), `true`

  %% Unique:
  %%    _1
  _28 = succeeded:body _1
  br _28, ^28, ^1

28:
  %% float_SUITE.erl:241
  %% Result type:
  %%    float()
  %% Unique:
  %%    _1, 
  %%    _2
  _14 = call (`exception_signals_1`/3), _2, _1, `[]`

  %% Unique:
  %%    _14
  _29 = succeeded:body _14
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _14 => float()
  %% Unique:
  %%    _14
  _57 = bif:'=:=' _14, `2.0`
  br _57, ^56, ^31

56:
  %% float_SUITE.erl:242
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _5 = call (`id`/1), `25`

  %% Unique:
  %%    _5
  _32 = succeeded:body _5
  br _32, ^32, ^1

32:
  %% float_SUITE.erl:242
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _4 = call (`id`/1), `false`

  %% Unique:
  %%    _4
  _33 = succeeded:body _4
  br _33, ^33, ^1

33:
  %% float_SUITE.erl:242
  %% Result type:
  %%    float()
  %% Unique:
  %%    _4, 
  %%    _5
  _15 = call (`exception_signals_1`/3), _5, _4, `[]`

  %% Unique:
  %%    _15
  _34 = succeeded:body _15
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _15 => float()
  %% Unique:
  %%    _15
  _54 = bif:'=:=' _15, `2.0`
  br _54, ^53, ^36

53:
  %% float_SUITE.erl:243
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _8 = call (`id`/1), `25.0`

  %% Unique:
  %%    _8
  _37 = succeeded:body _8
  br _37, ^37, ^1

37:
  %% float_SUITE.erl:243
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _7 = call (`id`/1), `true`

  %% Unique:
  %%    _7
  _38 = succeeded:body _7
  br _38, ^38, ^1

38:
  %% float_SUITE.erl:243
  %% Result type:
  %%    float()
  %% Unique:
  %%    _7, 
  %%    _8
  _16 = call (`exception_signals_1`/3), _8, _7, `[]`

  %% Unique:
  %%    _16
  _39 = succeeded:body _16
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _16 => float()
  %% Unique:
  %%    _16
  _51 = bif:'=:=' _16, `2.0`
  br _51, ^50, ^41

50:
  %% float_SUITE.erl:244
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _11 = call (`id`/1), `25.0`

  %% Unique:
  %%    _11
  _42 = succeeded:body _11
  br _42, ^42, ^1

42:
  %% float_SUITE.erl:244
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  _10 = call (`id`/1), `false`

  %% Unique:
  %%    _10
  _43 = succeeded:body _10
  br _43, ^43, ^1

43:
  %% float_SUITE.erl:244
  %% Result type:
  %%    float()
  %% Unique:
  %%    _10, 
  %%    _11
  _17 = call (`exception_signals_1`/3), _11, _10, `[]`

  %% Unique:
  %%    _17
  _44 = succeeded:body _17
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    _17 => float()
  %% Unique:
  %%    _17
  _48 = bif:'=:=' _17, `2.0`
  br _48, ^47, ^46

47:
  %% Result type:
  %%    'ok'
  ret `ok`

46:
  %% float_SUITE.erl:244
  %% Unique:
  %%    _17
  _18 = match_fail `badmatch`, _17

  %% Unique:
  %%    _18
  _49 = succeeded:body _18
  br ^1

41:
  %% float_SUITE.erl:243
  %% Unique:
  %%    _16
  _19 = match_fail `badmatch`, _16

  %% Unique:
  %%    _19
  _52 = succeeded:body _19
  br ^1

36:
  %% float_SUITE.erl:242
  %% Unique:
  %%    _15
  _20 = match_fail `badmatch`, _15

  %% Unique:
  %%    _20
  _55 = succeeded:body _20
  br ^1

31:
  %% float_SUITE.erl:241
  %% Unique:
  %%    _14
  _21 = match_fail `badmatch`, _14

  %% Unique:
  %%    _21
  _58 = succeeded:body _21
  br ^1

25:
  %% float_SUITE.erl:240
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-exception_signals/1-',1}}
  _22 = match_fail `function_clause`, _0

  %% Unique:
  %%    _22
  _59 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% float_SUITE.erl:247
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
%%    _1 =>
%%     'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
%%    _2 =>
%%     nil()
function `float_SUITE`:`exception_signals_1`(_0, _1, _2) {
0:
  %% float_SUITE.erl:248
  %% Argument types:
  %%    _0 => 'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  _18 = float:convert _0

  %% Unique:
  %%    _18
  _23 = succeeded:body _18
  br _23, ^23, ^1

23:
  %% float_SUITE.erl:248
  _19 = float:put `25.0`

  %% float_SUITE.erl:248
  %% Unique:
  %%    _18, 
  %%    _19
  _20 = float:'/' _18, _19

  %% Unique:
  %%    _20
  _10 = succeeded:body _20
  br _10, ^21, ^1

21:
  %% Unique:
  %%    _20
  Height = float:get _20
  %% Argument types:
  %%    
  switch _1, ^12, [
    { `false`, ^11 },
    { `true`, ^15 }
  ]

15:
  %% float_SUITE.erl:250
  %% Argument types:
  %%    _0 => number(0, 42)
  %% Unique:
  %%    _0
  _24 = float:convert _0

  %% Unique:
  %%    _24
  _29 = succeeded:body _24
  br _29, ^29, ^1

29:
  %% float_SUITE.erl:250
  _25 = float:put `2.0`

  %% float_SUITE.erl:250
  %% Unique:
  %%    _24, 
  %%    _25
  _26 = float:'/' _24, _25

  %% Unique:
  %%    _26
  _13 = succeeded:body _26
  br _13, ^11, ^1

11:
  %% float_SUITE.erl:253
  %% Argument types:
  %%    Height => float()
  %% Unique:
  %%    Height
  _30 = float:put Height

  %% float_SUITE.erl:253
  _31 = float:put `1.0`

  %% float_SUITE.erl:253
  %% Unique:
  %%    _30, 
  %%    _31
  _32 = float:'+' _30, _31

  %% Unique:
  %%    _32
  _17 = succeeded:body _32
  br _17, ^33, ^1

33:
  %% Unique:
  %%    _32
  _7 = float:get _32
  %% Result type:
  %%    float()
  %% Unique:
  %%    _7
  ret _7

12:
  %% float_SUITE.erl:249
  %% Unique:
  %%    _1
  _6 = match_fail `case_clause`, _1

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% float_SUITE.erl:255
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
function `float_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    'false' | 'gurka' | 'true' | number(0, 42) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `float_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `float_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `float_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `float_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% float_SUITE.erl:232
%% Counter = 59
%% bs_ensure_opt: true
function `float_SUITE`:`'-fconv_line_numbers_1/1-fun-0-'`(_4) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _56 = is_tagged_tuple _4, `4`, `float_SUITE`
  br _56, ^53, ^33

53:
  %% Argument types:
  %%    _4 => {'float_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _4
  _18 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _52 = bif:'=:=' _18, `fconv_line_numbers_1`
  br _52, ^51, ^33

51:
  %% Argument types:
  %%    _4 => {'float_SUITE', 'fconv_line_numbers_1', any(), any()}
  %% Aliased:
  %%    _4
  _17 = get_tuple_element _4, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _50 = bif:'=:=' _17, `1`
  br _50, ^49, ^33

49:
  %% Argument types:
  %%    _4 => {'float_SUITE', 'fconv_line_numbers_1', 1, any()}
  %% Aliased:
  %%    _4
  _16 = get_tuple_element _4, `3`

  %% Aliased:
  %%    _16
  _48 = is_nonempty_list _16
  br _48, ^48, ^33

48:
  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _21 = get_hd _16

  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _20 = get_tl _16

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _45 = is_tagged_tuple _21, `2`, `file`
  br _45, ^42, ^33

42:
  %% Aliased:
  %%    _20
  _41 = is_nonempty_list _20
  br _41, ^41, ^33

41:
  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _25 = get_hd _20

  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _24 = get_tl _20

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _38 = is_tagged_tuple _25, `2`, `line`
  br _38, ^35, ^33

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _34 = bif:'=:=' _24, `[]`
  br _34, ^34, ^33

34:
  %% Argument types:
  %%    _25 => {'line', any()}
  %% Aliased:
  %%    _25
  _26 = get_tuple_element _25, `1`

  %% float_SUITE.erl:233
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _30 = bif:'=:=' _26, `231`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _30
  ret _30

33:
  %% Result type:
  %%    'false'
  ret `false`
}
