module beam_bounds_SUITE.
exports [{abs_bounds,1},
         {addition_bounds,1},
         {all,0},
         {band_bounds,1},
         {bnot_bounds,1},
         {bor_bounds,1},
         {bsl_bounds,1},
         {bsr_bounds,1},
         {bxor_bounds,1},
         {division_bounds,1},
         {end_per_group,2},
         {end_per_suite,1},
         {ge_bounds,1},
         {groups,0},
         {gt_bounds,1},
         {infer_lt_gt_bounds,1},
         {init_per_group,2},
         {init_per_suite,1},
         {le_bounds,1},
         {lt_bounds,1},
         {max_bounds,1},
         {min_bounds,1},
         {module_info,0},
         {module_info,1},
         {multiplication_bounds,1},
         {redundant_masking,1},
         {rem_bounds,1},
         {subtraction_bounds,1},
         {suite,0}].
attributes [].

%% beam_bounds_SUITE.erl:35
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_bounds_SUITE.erl:37
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_bounds_SUITE.erl:40
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [addition_bounds,subtraction_bounds,multiplication_bounds,
      division_bounds,rem_bounds,band_bounds,bor_bounds,bxor_bounds,
      bnot_bounds,bsr_bounds,bsl_bounds,lt_bounds,le_bounds,gt_bounds,
      ge_bounds,min_bounds,max_bounds,abs_bounds,infer_lt_gt_bounds,
      redundant_masking]}]`
}

%% beam_bounds_SUITE.erl:63
%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_bounds_SUITE.erl:64
  _2 = call (`test_lib`:`recompile`/1), `beam_bounds_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:67
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_bounds_SUITE.erl:70
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_bounds_SUITE.erl:73
%% Counter = 4
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_bounds_SUITE.erl:76
%% Counter = 65
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`addition_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:77
  %% Result type:
  %%    'ok'
  _18 = call (`test_commutative`/2), `'+'`, `{-12,12}`

  %% Unique:
  %%    _18
  _28 = succeeded:body _18
  br _28, ^28, ^1

28:
  %% beam_bounds_SUITE.erl:79
  _11 = call (`beam_bounds`:`bounds`/3), `'+'`, `{'-inf',-20}`, `{2,5}`

  %% Aliased:
  %%    _11
  _29 = succeeded:body _11
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _63 = bif:'=:=' _11, `{'-inf',-15}`
  br _63, ^63, ^31

63:
  %% beam_bounds_SUITE.erl:80
  _12 = call (`beam_bounds`:`bounds`/3), `'+'`, `{'-inf',50}`, `{'-inf',5}`

  %% Aliased:
  %%    _12
  _32 = succeeded:body _12
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _61 = bif:'=:=' _12, `{'-inf',55}`
  br _61, ^61, ^34

61:
  %% beam_bounds_SUITE.erl:81
  _13 = call (`beam_bounds`:`bounds`/3), `'+'`, `{1,10}`, `{'-inf',100}`

  %% Aliased:
  %%    _13
  _35 = succeeded:body _13
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _59 = bif:'=:=' _13, `{'-inf',110}`
  br _59, ^59, ^37

59:
  %% beam_bounds_SUITE.erl:82
  _14 = call (`beam_bounds`:`bounds`/3), `'+'`, `{1,'+inf'}`, `{'-inf',100}`

  %% Aliased:
  %%    _14
  _38 = succeeded:body _14
  br _38, ^38, ^1

38:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _57 = bif:'=:=' _14, `any`
  br _57, ^56, ^40

56:
  %% beam_bounds_SUITE.erl:84
  _15 = call (`beam_bounds`:`bounds`/3), `'+'`, `{2,'+inf'}`, `{-10,20}`

  %% Aliased:
  %%    _15
  _41 = succeeded:body _15
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _54 = bif:'=:=' _15, `{-8,'+inf'}`
  br _54, ^54, ^43

54:
  %% beam_bounds_SUITE.erl:85
  _16 = call (`beam_bounds`:`bounds`/3), `'+'`, `{1,10}`, `{5,'+inf'}`

  %% Aliased:
  %%    _16
  _44 = succeeded:body _16
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _52 = bif:'=:=' _16, `{6,'+inf'}`
  br _52, ^52, ^46

52:
  %% beam_bounds_SUITE.erl:86
  _17 = call (`beam_bounds`:`bounds`/3), `'+'`, `{2,'+inf'}`, `{7,'+inf'}`

  %% Aliased:
  %%    _17
  _47 = succeeded:body _17
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _50 = bif:'=:=' _17, `{9,'+inf'}`
  br _50, ^50, ^49

50:
  %% Result type:
  %%    'ok'
  ret `ok`

49:
  %% beam_bounds_SUITE.erl:86
  %% Aliased:
  %%    _17
  _19 = match_fail `badmatch`, _17

  %% Unique:
  %%    _19
  _51 = succeeded:body _19
  br ^1

46:
  %% beam_bounds_SUITE.erl:85
  %% Aliased:
  %%    _16
  _20 = match_fail `badmatch`, _16

  %% Unique:
  %%    _20
  _53 = succeeded:body _20
  br ^1

43:
  %% beam_bounds_SUITE.erl:84
  %% Aliased:
  %%    _15
  _21 = match_fail `badmatch`, _15

  %% Unique:
  %%    _21
  _55 = succeeded:body _21
  br ^1

40:
  %% beam_bounds_SUITE.erl:82
  %% Aliased:
  %%    _14
  _22 = match_fail `badmatch`, _14

  %% Unique:
  %%    _22
  _58 = succeeded:body _22
  br ^1

37:
  %% beam_bounds_SUITE.erl:81
  %% Aliased:
  %%    _13
  _23 = match_fail `badmatch`, _13

  %% Unique:
  %%    _23
  _60 = succeeded:body _23
  br ^1

34:
  %% beam_bounds_SUITE.erl:80
  %% Aliased:
  %%    _12
  _24 = match_fail `badmatch`, _12

  %% Unique:
  %%    _24
  _62 = succeeded:body _24
  br ^1

31:
  %% beam_bounds_SUITE.erl:79
  %% Aliased:
  %%    _11
  _25 = match_fail `badmatch`, _11

  %% Unique:
  %%    _25
  _64 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_bounds_SUITE.erl:90
%% Counter = 65
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`subtraction_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:91
  %% Result type:
  %%    'ok'
  _17 = call (`test_noncommutative`/2), `'-'`, `{-12,12}`

  %% Unique:
  %%    _17
  _27 = succeeded:body _17
  br _27, ^27, ^1

27:
  %% beam_bounds_SUITE.erl:93
  _10 = call (`beam_bounds`:`bounds`/3), `'-'`, `{'-inf',20}`, `{2,9}`

  %% Aliased:
  %%    _10
  _28 = succeeded:body _10
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _63 = bif:'=:=' _10, `{'-inf',18}`
  br _63, ^63, ^30

63:
  %% beam_bounds_SUITE.erl:94
  _11 = call (`beam_bounds`:`bounds`/3), `'-'`, `{'-inf',20}`, `{'-inf',17}`

  %% Aliased:
  %%    _11
  _31 = succeeded:body _11
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _61 = bif:'=:=' _11, `any`
  br _61, ^60, ^33

60:
  %% beam_bounds_SUITE.erl:95
  _12 = call (`beam_bounds`:`bounds`/3), `'-'`, `{1,10}`, `{'-inf',100}`

  %% Aliased:
  %%    _12
  _34 = succeeded:body _12
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _58 = bif:'=:=' _12, `{-99,'+inf'}`
  br _58, ^58, ^36

58:
  %% beam_bounds_SUITE.erl:96
  _13 = call (`beam_bounds`:`bounds`/3), `'-'`, `{7,'+inf'}`, `{'-inf',100}`

  %% Aliased:
  %%    _13
  _37 = succeeded:body _13
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _56 = bif:'=:=' _13, `{-93,'+inf'}`
  br _56, ^56, ^39

56:
  %% beam_bounds_SUITE.erl:98
  _14 = call (`beam_bounds`:`bounds`/3), `'-'`, `{2,'+inf'}`, `{-10,20}`

  %% Aliased:
  %%    _14
  _40 = succeeded:body _14
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _54 = bif:'=:=' _14, `{-18,'+inf'}`
  br _54, ^54, ^42

54:
  %% beam_bounds_SUITE.erl:99
  _15 = call (`beam_bounds`:`bounds`/3), `'-'`, `{1,11}`, `{5,'+inf'}`

  %% Aliased:
  %%    _15
  _43 = succeeded:body _15
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _52 = bif:'=:=' _15, `{'-inf',6}`
  br _52, ^52, ^45

52:
  %% beam_bounds_SUITE.erl:100
  _16 = call (`beam_bounds`:`bounds`/3), `'-'`, `{2,'+inf'}`, `{7,'+inf'}`

  %% Aliased:
  %%    _16
  _46 = succeeded:body _16
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _50 = bif:'=:=' _16, `any`
  br _50, ^49, ^48

49:
  %% Result type:
  %%    'ok'
  ret `ok`

48:
  %% beam_bounds_SUITE.erl:100
  %% Aliased:
  %%    _16
  _18 = match_fail `badmatch`, _16

  %% Unique:
  %%    _18
  _51 = succeeded:body _18
  br ^1

45:
  %% beam_bounds_SUITE.erl:99
  %% Aliased:
  %%    _15
  _19 = match_fail `badmatch`, _15

  %% Unique:
  %%    _19
  _53 = succeeded:body _19
  br ^1

42:
  %% beam_bounds_SUITE.erl:98
  %% Aliased:
  %%    _14
  _20 = match_fail `badmatch`, _14

  %% Unique:
  %%    _20
  _55 = succeeded:body _20
  br ^1

39:
  %% beam_bounds_SUITE.erl:96
  %% Aliased:
  %%    _13
  _21 = match_fail `badmatch`, _13

  %% Unique:
  %%    _21
  _57 = succeeded:body _21
  br ^1

36:
  %% beam_bounds_SUITE.erl:95
  %% Aliased:
  %%    _12
  _22 = match_fail `badmatch`, _12

  %% Unique:
  %%    _22
  _59 = succeeded:body _22
  br ^1

33:
  %% beam_bounds_SUITE.erl:94
  %% Aliased:
  %%    _11
  _23 = match_fail `badmatch`, _11

  %% Unique:
  %%    _23
  _62 = succeeded:body _23
  br ^1

30:
  %% beam_bounds_SUITE.erl:93
  %% Aliased:
  %%    _10
  _24 = match_fail `badmatch`, _10

  %% Unique:
  %%    _24
  _64 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% beam_bounds_SUITE.erl:104
%% Counter = 78
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`multiplication_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:105
  %% Result type:
  %%    'ok'
  _24 = call (`test_commutative`/2), `'*'`, `{-12,12}`

  %% Unique:
  %%    _24
  _35 = succeeded:body _24
  br _35, ^35, ^1

35:
  %% beam_bounds_SUITE.erl:107
  _16 = call (`beam_bounds`:`bounds`/3), `'*'`, `{'-inf',-20}`, `{2,5}`

  %% Aliased:
  %%    _16
  _36 = succeeded:body _16
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _76 = bif:'=:=' _16, `{'-inf',-40}`
  br _76, ^76, ^38

76:
  %% beam_bounds_SUITE.erl:108
  _17 = call (`beam_bounds`:`bounds`/3), `'*'`, `{'-inf',100}`, `{1,10}`

  %% Aliased:
  %%    _17
  _39 = succeeded:body _17
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _74 = bif:'=:=' _17, `{'-inf',1000}`
  br _74, ^74, ^41

74:
  %% beam_bounds_SUITE.erl:109
  _18 = call (`beam_bounds`:`bounds`/3), `'*'`, `{'-inf',100}`, `{-10,10}`

  %% Aliased:
  %%    _18
  _42 = succeeded:body _18
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _72 = bif:'=:=' _18, `any`
  br _72, ^71, ^44

71:
  %% beam_bounds_SUITE.erl:111
  _19 = call (`beam_bounds`:`bounds`/3), `'*'`, `{-10,'+inf'}`, `{1,10}`

  %% Aliased:
  %%    _19
  _45 = succeeded:body _19
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _69 = bif:'=:=' _19, `{-100,'+inf'}`
  br _69, ^69, ^47

69:
  %% beam_bounds_SUITE.erl:112
  _20 = call (`beam_bounds`:`bounds`/3), `'*'`, `{7,'+inf'}`, `{1,10}`

  %% Aliased:
  %%    _20
  _48 = succeeded:body _20
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _67 = bif:'=:=' _20, `{7,'+inf'}`
  br _67, ^67, ^50

67:
  %% beam_bounds_SUITE.erl:113
  _21 = call (`beam_bounds`:`bounds`/3), `'*'`, `{-10,'+inf'}`, `{-5,5}`

  %% Aliased:
  %%    _21
  _51 = succeeded:body _21
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _65 = bif:'=:=' _21, `any`
  br _65, ^64, ^53

64:
  %% beam_bounds_SUITE.erl:115
  _22 = call (`beam_bounds`:`bounds`/3), `'*'`, `{1,10}`, `{'-inf',100}`

  %% Aliased:
  %%    _22
  _54 = succeeded:body _22
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _62 = bif:'=:=' _22, `{'-inf',1000}`
  br _62, ^62, ^56

62:
  %% beam_bounds_SUITE.erl:116
  _23 = call (`beam_bounds`:`bounds`/3), `'*'`, `{1,10}`, `{-10,'+inf'}`

  %% Aliased:
  %%    _23
  _57 = succeeded:body _23
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _60 = bif:'=:=' _23, `{-100,'+inf'}`
  br _60, ^60, ^59

60:
  %% Result type:
  %%    'ok'
  ret `ok`

59:
  %% beam_bounds_SUITE.erl:116
  %% Aliased:
  %%    _23
  _25 = match_fail `badmatch`, _23

  %% Unique:
  %%    _25
  _61 = succeeded:body _25
  br ^1

56:
  %% beam_bounds_SUITE.erl:115
  %% Aliased:
  %%    _22
  _26 = match_fail `badmatch`, _22

  %% Unique:
  %%    _26
  _63 = succeeded:body _26
  br ^1

53:
  %% beam_bounds_SUITE.erl:113
  %% Aliased:
  %%    _21
  _27 = match_fail `badmatch`, _21

  %% Unique:
  %%    _27
  _66 = succeeded:body _27
  br ^1

50:
  %% beam_bounds_SUITE.erl:112
  %% Aliased:
  %%    _20
  _28 = match_fail `badmatch`, _20

  %% Unique:
  %%    _28
  _68 = succeeded:body _28
  br ^1

47:
  %% beam_bounds_SUITE.erl:111
  %% Aliased:
  %%    _19
  _29 = match_fail `badmatch`, _19

  %% Unique:
  %%    _29
  _70 = succeeded:body _29
  br ^1

44:
  %% beam_bounds_SUITE.erl:109
  %% Aliased:
  %%    _18
  _30 = match_fail `badmatch`, _18

  %% Unique:
  %%    _30
  _73 = succeeded:body _30
  br ^1

41:
  %% beam_bounds_SUITE.erl:108
  %% Aliased:
  %%    _17
  _31 = match_fail `badmatch`, _17

  %% Unique:
  %%    _31
  _75 = succeeded:body _31
  br ^1

38:
  %% beam_bounds_SUITE.erl:107
  %% Aliased:
  %%    _16
  _32 = match_fail `badmatch`, _16

  %% Unique:
  %%    _32
  _77 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% beam_bounds_SUITE.erl:120
%% Counter = 176
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`division_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:121
  %% Result type:
  %%    'ok'
  _46 = call (`test_noncommutative`/2), `'div'`, `{-12,12}`

  %% Unique:
  %%    _46
  _65 = succeeded:body _46
  br _65, ^65, ^1

65:
  %% beam_bounds_SUITE.erl:123
  _29 = call (`beam_bounds`:`bounds`/3), `'div'`, `{'-inf',-20}`, `{2,4}`

  %% Aliased:
  %%    _29
  _66 = succeeded:body _29
  br _66, ^66, ^1

66:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _157 = bif:'=:=' _29, `{'-inf',-5}`
  br _157, ^157, ^68

157:
  %% beam_bounds_SUITE.erl:124
  _30 = call (`beam_bounds`:`bounds`/3), `'div'`, `{'-inf',100}`, `{2,4}`

  %% Aliased:
  %%    _30
  _69 = succeeded:body _30
  br _69, ^69, ^1

69:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _155 = bif:'=:=' _30, `{'-inf',50}`
  br _155, ^155, ^71

155:
  %% beam_bounds_SUITE.erl:126
  _31 = call (`beam_bounds`:`bounds`/3), `'div'`, `{-10,'+inf'}`, `{2,4}`

  %% Aliased:
  %%    _31
  _72 = succeeded:body _31
  br _72, ^72, ^1

72:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _153 = bif:'=:=' _31, `{-5,'+inf'}`
  br _153, ^153, ^74

153:
  %% beam_bounds_SUITE.erl:127
  _32 = call (`beam_bounds`:`bounds`/3), `'div'`, `{10,'+inf'}`, `{2,4}`

  %% Aliased:
  %%    _32
  _75 = succeeded:body _32
  br _75, ^75, ^1

75:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _151 = bif:'=:=' _32, `{2,'+inf'}`
  br _151, ^151, ^77

151:
  %% beam_bounds_SUITE.erl:129
  _33 = call (`beam_bounds`:`bounds`/3), `'div'`, `{10,'+inf'}`, `{0,0}`

  %% Aliased:
  %%    _33
  _78 = succeeded:body _33
  br _78, ^78, ^1

78:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _149 = bif:'=:=' _33, `any`
  br _149, ^174, ^80

174:
  br ^175

175:
  _84 = new_try_tag `'catch'`
  br _84, ^82, ^83

82:
  %% beam_bounds_SUITE.erl:130
  %% Result type:
  %%    integer()
  _48 = call (`division_bounds_1`/2), `[]`, `ok`

  %% Unique:
  %%    _48
  _86 = succeeded:body _48
  br _86, ^86, ^83

86:
  br ^81

83:
  %% Unique:
  %%    _84
  _89 = landingpad `'catch'`, _84

  %% Aliased:
  %%    _89
  _87 = extract _89, `0`
  br ^81

81:
  _90 = phi { _87, ^83 }, { _48, ^86 }

  %% Aliased:
  %%    _90
  %% Unique:
  %%    _84
  _9 = catch_end _84, _90

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _144 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _144, ^141, ^92

141:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _34 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _138 = is_tagged_tuple _34, `2`, `badarith`
  br _138, ^135, ^92

135:
  %% beam_bounds_SUITE.erl:132
  _38 = call (`beam_bounds`:`bounds`/3), `'div'`, `{0,10}`, `any`

  %% Aliased:
  %%    _38
  _93 = succeeded:body _38
  br _93, ^93, ^1

93:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _133 = bif:'=:=' _38, `{-10,10}`
  br _133, ^133, ^95

133:
  %% beam_bounds_SUITE.erl:133
  _39 = call (`beam_bounds`:`bounds`/3), `'div'`, `{-50,-15}`, `{-10,'+inf'}`

  %% Aliased:
  %%    _39
  _96 = succeeded:body _39
  br _96, ^96, ^1

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _131 = bif:'=:=' _39, `{-50,50}`
  br _131, ^131, ^98

131:
  %% beam_bounds_SUITE.erl:134
  _40 = call (`beam_bounds`:`bounds`/3), `'div'`, `{-20,10}`, `any`

  %% Aliased:
  %%    _40
  _99 = succeeded:body _40
  br _99, ^99, ^1

99:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _129 = bif:'=:=' _40, `{-20,20}`
  br _129, ^129, ^101

129:
  %% beam_bounds_SUITE.erl:135
  _41 = call (`beam_bounds`:`bounds`/3), `'div'`, `{-5,7}`, `{'-inf',-1}`

  %% Aliased:
  %%    _41
  _102 = succeeded:body _41
  br _102, ^102, ^1

102:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _127 = bif:'=:=' _41, `{-7,7}`
  br _127, ^127, ^104

127:
  %% beam_bounds_SUITE.erl:136
  _42 = call (`beam_bounds`:`bounds`/3), `'div'`, `{42,42}`, `any`

  %% Aliased:
  %%    _42
  _105 = succeeded:body _42
  br _105, ^105, ^1

105:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _125 = bif:'=:=' _42, `{-42,42}`
  br _125, ^125, ^107

125:
  %% beam_bounds_SUITE.erl:137
  _43 = call (`beam_bounds`:`bounds`/3), `'div'`, `{-42,-42}`, `any`

  %% Aliased:
  %%    _43
  _108 = succeeded:body _43
  br _108, ^108, ^1

108:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _123 = bif:'=:=' _43, `{-42,42}`
  br _123, ^123, ^110

123:
  %% beam_bounds_SUITE.erl:139
  _44 = call (`beam_bounds`:`bounds`/3), `'div'`, `{'-inf',10}`, `any`

  %% Aliased:
  %%    _44
  _111 = succeeded:body _44
  br _111, ^111, ^1

111:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _121 = bif:'=:=' _44, `any`
  br _121, ^120, ^113

120:
  %% beam_bounds_SUITE.erl:140
  _45 = call (`beam_bounds`:`bounds`/3), `'div'`, `{0,'+inf'}`, `any`

  %% Aliased:
  %%    _45
  _114 = succeeded:body _45
  br _114, ^114, ^1

114:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _118 = bif:'=:=' _45, `any`
  br _118, ^117, ^116

117:
  %% Result type:
  %%    'ok'
  ret `ok`

116:
  %% beam_bounds_SUITE.erl:140
  %% Aliased:
  %%    _45
  _49 = match_fail `badmatch`, _45

  %% Unique:
  %%    _49
  _119 = succeeded:body _49
  br ^1

113:
  %% beam_bounds_SUITE.erl:139
  %% Aliased:
  %%    _44
  _50 = match_fail `badmatch`, _44

  %% Unique:
  %%    _50
  _122 = succeeded:body _50
  br ^1

110:
  %% beam_bounds_SUITE.erl:137
  %% Aliased:
  %%    _43
  _51 = match_fail `badmatch`, _43

  %% Unique:
  %%    _51
  _124 = succeeded:body _51
  br ^1

107:
  %% beam_bounds_SUITE.erl:136
  %% Aliased:
  %%    _42
  _52 = match_fail `badmatch`, _42

  %% Unique:
  %%    _52
  _126 = succeeded:body _52
  br ^1

104:
  %% beam_bounds_SUITE.erl:135
  %% Aliased:
  %%    _41
  _53 = match_fail `badmatch`, _41

  %% Unique:
  %%    _53
  _128 = succeeded:body _53
  br ^1

101:
  %% beam_bounds_SUITE.erl:134
  %% Aliased:
  %%    _40
  _54 = match_fail `badmatch`, _40

  %% Unique:
  %%    _54
  _130 = succeeded:body _54
  br ^1

98:
  %% beam_bounds_SUITE.erl:133
  %% Aliased:
  %%    _39
  _55 = match_fail `badmatch`, _39

  %% Unique:
  %%    _55
  _132 = succeeded:body _55
  br ^1

95:
  %% beam_bounds_SUITE.erl:132
  %% Aliased:
  %%    _38
  _56 = match_fail `badmatch`, _38

  %% Unique:
  %%    _56
  _134 = succeeded:body _56
  br ^1

92:
  %% beam_bounds_SUITE.erl:130
  %% Aliased:
  %%    _9
  _57 = match_fail `badmatch`, _9

  %% Unique:
  %%    _57
  _147 = succeeded:body _57
  br ^1

80:
  %% beam_bounds_SUITE.erl:129
  %% Aliased:
  %%    _33
  _58 = match_fail `badmatch`, _33

  %% Unique:
  %%    _58
  _150 = succeeded:body _58
  br ^1

77:
  %% beam_bounds_SUITE.erl:127
  %% Aliased:
  %%    _32
  _59 = match_fail `badmatch`, _32

  %% Unique:
  %%    _59
  _152 = succeeded:body _59
  br ^1

74:
  %% beam_bounds_SUITE.erl:126
  %% Aliased:
  %%    _31
  _60 = match_fail `badmatch`, _31

  %% Unique:
  %%    _60
  _154 = succeeded:body _60
  br ^1

71:
  %% beam_bounds_SUITE.erl:124
  %% Aliased:
  %%    _30
  _61 = match_fail `badmatch`, _30

  %% Unique:
  %%    _61
  _156 = succeeded:body _61
  br ^1

68:
  %% beam_bounds_SUITE.erl:123
  %% Aliased:
  %%    _29
  _62 = match_fail `badmatch`, _29

  %% Unique:
  %%    _62
  _158 = succeeded:body _62
  br ^1

1:
  _63 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _63
}

%% beam_bounds_SUITE.erl:146
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'ok' | nil()
%%    _1 =>
%%     'ok'
function `beam_bounds_SUITE`:`division_bounds_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 'ok' | nil()
  %% Unique:
  %%    _0
  _14 = bif:'=:=' _0, `[]`
  br _14, ^14, ^11

14:
  %% beam_bounds_SUITE.erl:147
  %% Result type:
  %%    0
  _2 = call (`division_bounds_1`/2), `ok`, _1

  %% Unique:
  %%    _2
  _12 = succeeded:body _2
  br _12, ^12, ^1

12:
  %% beam_bounds_SUITE.erl:147
  %% Argument types:
  %%    
  _8 = bif:'div' `-1`, `0`

  %% Unique:
  %%    _8
  _13 = succeeded:body _8
  br _13, ^13, ^1

13:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _8
  ret _8

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9

11:
  %% Result type:
  %%    0
  ret `0`
}

%% beam_bounds_SUITE.erl:151
%% Counter = 178
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`rem_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:152
  %% Result type:
  %%    'ok'
  _54 = call (`test_noncommutative`/2), `'rem'`, `{-12,12}`

  %% Unique:
  %%    _54
  _77 = succeeded:body _54
  br _77, ^77, ^1

77:
  %% beam_bounds_SUITE.erl:154
  _34 = call (`beam_bounds`:`bounds`/3), `'rem'`, `any`, `{1,8}`

  %% Aliased:
  %%    _34
  _78 = succeeded:body _34
  br _78, ^78, ^1

78:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _176 = bif:'=:=' _34, `{-7,7}`
  br _176, ^176, ^80

176:
  %% beam_bounds_SUITE.erl:155
  _35 = call (`beam_bounds`:`bounds`/3), `'rem'`, `any`, `{-12,8}`

  %% Aliased:
  %%    _35
  _81 = succeeded:body _35
  br _81, ^81, ^1

81:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _174 = bif:'=:=' _35, `{-11,11}`
  br _174, ^174, ^83

174:
  %% beam_bounds_SUITE.erl:157
  _36 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{'-inf',10}`, `{1,8}`

  %% Aliased:
  %%    _36
  _84 = succeeded:body _36
  br _84, ^84, ^1

84:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _172 = bif:'=:=' _36, `{-7,7}`
  br _172, ^172, ^86

172:
  %% beam_bounds_SUITE.erl:158
  _37 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{10,'+inf'}`, `{1,8}`

  %% Aliased:
  %%    _37
  _87 = succeeded:body _37
  br _87, ^87, ^1

87:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _170 = bif:'=:=' _37, `{0,7}`
  br _170, ^170, ^89

170:
  %% beam_bounds_SUITE.erl:159
  _38 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{17,'+inf'}`, `any`

  %% Aliased:
  %%    _38
  _90 = succeeded:body _38
  br _90, ^90, ^1

90:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _168 = bif:'=:=' _38, `{0,'+inf'}`
  br _168, ^168, ^92

168:
  %% beam_bounds_SUITE.erl:161
  _39 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{1,10}`, `{'-inf',10}`

  %% Aliased:
  %%    _39
  _93 = succeeded:body _39
  br _93, ^93, ^1

93:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _166 = bif:'=:=' _39, `{0,10}`
  br _166, ^166, ^95

166:
  %% beam_bounds_SUITE.erl:162
  _40 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{20,'+inf'}`, `{10,'+inf'}`

  %% Aliased:
  %%    _40
  _96 = succeeded:body _40
  br _96, ^96, ^1

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _164 = bif:'=:=' _40, `{0,'+inf'}`
  br _164, ^164, ^98

164:
  %% beam_bounds_SUITE.erl:163
  _41 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{'-inf',10}`, `any`

  %% Aliased:
  %%    _41
  _99 = succeeded:body _41
  br _99, ^99, ^1

99:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _162 = bif:'=:=' _41, `{'-inf',10}`
  br _162, ^162, ^101

162:
  %% beam_bounds_SUITE.erl:165
  _42 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-11,10}`, `{'-inf',89}`

  %% Aliased:
  %%    _42
  _102 = succeeded:body _42
  br _102, ^102, ^1

102:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _160 = bif:'=:=' _42, `{-11,10}`
  br _160, ^160, ^104

160:
  %% beam_bounds_SUITE.erl:166
  _43 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-11,10}`, `{7,'+inf'}`

  %% Aliased:
  %%    _43
  _105 = succeeded:body _43
  br _105, ^105, ^1

105:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _158 = bif:'=:=' _43, `{-11,10}`
  br _158, ^158, ^107

158:
  %% beam_bounds_SUITE.erl:167
  _44 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-11,10}`, `{'-inf',113}`

  %% Aliased:
  %%    _44
  _108 = succeeded:body _44
  br _108, ^108, ^1

108:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _156 = bif:'=:=' _44, `{-11,10}`
  br _156, ^156, ^110

156:
  %% beam_bounds_SUITE.erl:168
  _45 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-11,10}`, `{55,'+inf'}`

  %% Aliased:
  %%    _45
  _111 = succeeded:body _45
  br _111, ^111, ^1

111:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _154 = bif:'=:=' _45, `{-11,10}`
  br _154, ^154, ^113

154:
  %% beam_bounds_SUITE.erl:169
  _46 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-11,10}`, `any`

  %% Aliased:
  %%    _46
  _114 = succeeded:body _46
  br _114, ^114, ^1

114:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _152 = bif:'=:=' _46, `{-11,10}`
  br _152, ^152, ^116

152:
  %% beam_bounds_SUITE.erl:171
  _47 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{0,0}`, `any`

  %% Aliased:
  %%    _47
  _117 = succeeded:body _47
  br _117, ^117, ^1

117:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _150 = bif:'=:=' _47, `{0,0}`
  br _150, ^150, ^119

150:
  %% beam_bounds_SUITE.erl:172
  _48 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{1,1}`, `any`

  %% Aliased:
  %%    _48
  _120 = succeeded:body _48
  br _120, ^120, ^1

120:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _148 = bif:'=:=' _48, `{0,1}`
  br _148, ^148, ^122

148:
  %% beam_bounds_SUITE.erl:173
  _49 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{2,2}`, `any`

  %% Aliased:
  %%    _49
  _123 = succeeded:body _49
  br _123, ^123, ^1

123:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _146 = bif:'=:=' _49, `{0,2}`
  br _146, ^146, ^125

146:
  %% beam_bounds_SUITE.erl:174
  _50 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{2,3}`, `any`

  %% Aliased:
  %%    _50
  _126 = succeeded:body _50
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _144 = bif:'=:=' _50, `{0,3}`
  br _144, ^144, ^128

144:
  %% beam_bounds_SUITE.erl:176
  _51 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-1,-1}`, `any`

  %% Aliased:
  %%    _51
  _129 = succeeded:body _51
  br _129, ^129, ^1

129:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _142 = bif:'=:=' _51, `{-1,0}`
  br _142, ^142, ^131

142:
  %% beam_bounds_SUITE.erl:177
  _52 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-7,-7}`, `any`

  %% Aliased:
  %%    _52
  _132 = succeeded:body _52
  br _132, ^132, ^1

132:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _140 = bif:'=:=' _52, `{-7,0}`
  br _140, ^140, ^134

140:
  %% beam_bounds_SUITE.erl:178
  _53 = call (`beam_bounds`:`bounds`/3), `'rem'`, `{-6,-4}`, `any`

  %% Aliased:
  %%    _53
  _135 = succeeded:body _53
  br _135, ^135, ^1

135:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _138 = bif:'=:=' _53, `{-6,0}`
  br _138, ^138, ^137

138:
  %% Result type:
  %%    'ok'
  ret `ok`

137:
  %% beam_bounds_SUITE.erl:178
  %% Aliased:
  %%    _53
  _55 = match_fail `badmatch`, _53

  %% Unique:
  %%    _55
  _139 = succeeded:body _55
  br ^1

134:
  %% beam_bounds_SUITE.erl:177
  %% Aliased:
  %%    _52
  _56 = match_fail `badmatch`, _52

  %% Unique:
  %%    _56
  _141 = succeeded:body _56
  br ^1

131:
  %% beam_bounds_SUITE.erl:176
  %% Aliased:
  %%    _51
  _57 = match_fail `badmatch`, _51

  %% Unique:
  %%    _57
  _143 = succeeded:body _57
  br ^1

128:
  %% beam_bounds_SUITE.erl:174
  %% Aliased:
  %%    _50
  _58 = match_fail `badmatch`, _50

  %% Unique:
  %%    _58
  _145 = succeeded:body _58
  br ^1

125:
  %% beam_bounds_SUITE.erl:173
  %% Aliased:
  %%    _49
  _59 = match_fail `badmatch`, _49

  %% Unique:
  %%    _59
  _147 = succeeded:body _59
  br ^1

122:
  %% beam_bounds_SUITE.erl:172
  %% Aliased:
  %%    _48
  _60 = match_fail `badmatch`, _48

  %% Unique:
  %%    _60
  _149 = succeeded:body _60
  br ^1

119:
  %% beam_bounds_SUITE.erl:171
  %% Aliased:
  %%    _47
  _61 = match_fail `badmatch`, _47

  %% Unique:
  %%    _61
  _151 = succeeded:body _61
  br ^1

116:
  %% beam_bounds_SUITE.erl:169
  %% Aliased:
  %%    _46
  _62 = match_fail `badmatch`, _46

  %% Unique:
  %%    _62
  _153 = succeeded:body _62
  br ^1

113:
  %% beam_bounds_SUITE.erl:168
  %% Aliased:
  %%    _45
  _63 = match_fail `badmatch`, _45

  %% Unique:
  %%    _63
  _155 = succeeded:body _63
  br ^1

110:
  %% beam_bounds_SUITE.erl:167
  %% Aliased:
  %%    _44
  _64 = match_fail `badmatch`, _44

  %% Unique:
  %%    _64
  _157 = succeeded:body _64
  br ^1

107:
  %% beam_bounds_SUITE.erl:166
  %% Aliased:
  %%    _43
  _65 = match_fail `badmatch`, _43

  %% Unique:
  %%    _65
  _159 = succeeded:body _65
  br ^1

104:
  %% beam_bounds_SUITE.erl:165
  %% Aliased:
  %%    _42
  _66 = match_fail `badmatch`, _42

  %% Unique:
  %%    _66
  _161 = succeeded:body _66
  br ^1

101:
  %% beam_bounds_SUITE.erl:163
  %% Aliased:
  %%    _41
  _67 = match_fail `badmatch`, _41

  %% Unique:
  %%    _67
  _163 = succeeded:body _67
  br ^1

98:
  %% beam_bounds_SUITE.erl:162
  %% Aliased:
  %%    _40
  _68 = match_fail `badmatch`, _40

  %% Unique:
  %%    _68
  _165 = succeeded:body _68
  br ^1

95:
  %% beam_bounds_SUITE.erl:161
  %% Aliased:
  %%    _39
  _69 = match_fail `badmatch`, _39

  %% Unique:
  %%    _69
  _167 = succeeded:body _69
  br ^1

92:
  %% beam_bounds_SUITE.erl:159
  %% Aliased:
  %%    _38
  _70 = match_fail `badmatch`, _38

  %% Unique:
  %%    _70
  _169 = succeeded:body _70
  br ^1

89:
  %% beam_bounds_SUITE.erl:158
  %% Aliased:
  %%    _37
  _71 = match_fail `badmatch`, _37

  %% Unique:
  %%    _71
  _171 = succeeded:body _71
  br ^1

86:
  %% beam_bounds_SUITE.erl:157
  %% Aliased:
  %%    _36
  _72 = match_fail `badmatch`, _36

  %% Unique:
  %%    _72
  _173 = succeeded:body _72
  br ^1

83:
  %% beam_bounds_SUITE.erl:155
  %% Aliased:
  %%    _35
  _73 = match_fail `badmatch`, _35

  %% Unique:
  %%    _73
  _175 = succeeded:body _73
  br ^1

80:
  %% beam_bounds_SUITE.erl:154
  %% Aliased:
  %%    _34
  _74 = match_fail `badmatch`, _34

  %% Unique:
  %%    _74
  _177 = succeeded:body _74
  br ^1

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% beam_bounds_SUITE.erl:182
%% Counter = 64
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`band_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:183
  %% Result type:
  %%    'ok'
  _20 = call (`test_commutative`/1), `'band'`

  %% Unique:
  %%    _20
  _29 = succeeded:body _20
  br _29, ^29, ^1

29:
  %% beam_bounds_SUITE.erl:186
  _14 = call (`beam_bounds`:`bounds`/3), `'band'`, `any`, `{7,17}`

  %% Aliased:
  %%    _14
  _30 = succeeded:body _14
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _62 = bif:'=:=' _14, `{0,17}`
  br _62, ^62, ^32

62:
  %% beam_bounds_SUITE.erl:187
  _15 = call (`beam_bounds`:`bounds`/3), `'band'`, `{0,42}`, `any`

  %% Aliased:
  %%    _15
  _33 = succeeded:body _15
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _60 = bif:'=:=' _15, `{0,42}`
  br _60, ^60, ^35

60:
  %% beam_bounds_SUITE.erl:188
  _16 = call (`beam_bounds`:`bounds`/3), `'band'`, `{-1,1}`, `any`

  %% Aliased:
  %%    _16
  _36 = succeeded:body _16
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _58 = bif:'=:=' _16, `any`
  br _58, ^57, ^38

57:
  %% beam_bounds_SUITE.erl:189
  _17 = call (`beam_bounds`:`bounds`/3), `'band'`, `any`, `{-10,0}`

  %% Aliased:
  %%    _17
  _39 = succeeded:body _17
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _55 = bif:'=:=' _17, `any`
  br _55, ^54, ^41

54:
  %% beam_bounds_SUITE.erl:190
  _18 = call (`beam_bounds`:`bounds`/3), `'band'`, `{-10,0}`, `{-1,10}`

  %% Aliased:
  %%    _18
  _42 = succeeded:body _18
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _52 = bif:'=:=' _18, `any`
  br _52, ^51, ^44

51:
  %% beam_bounds_SUITE.erl:191
  _19 = call (`beam_bounds`:`bounds`/3), `'band'`, `{-20,-10}`, `{-1,10}`

  %% Aliased:
  %%    _19
  _45 = succeeded:body _19
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _49 = bif:'=:=' _19, `any`
  br _49, ^48, ^47

48:
  %% Result type:
  %%    'ok'
  ret `ok`

47:
  %% beam_bounds_SUITE.erl:191
  %% Aliased:
  %%    _19
  _21 = match_fail `badmatch`, _19

  %% Unique:
  %%    _21
  _50 = succeeded:body _21
  br ^1

44:
  %% beam_bounds_SUITE.erl:190
  %% Aliased:
  %%    _18
  _22 = match_fail `badmatch`, _18

  %% Unique:
  %%    _22
  _53 = succeeded:body _22
  br ^1

41:
  %% beam_bounds_SUITE.erl:189
  %% Aliased:
  %%    _17
  _23 = match_fail `badmatch`, _17

  %% Unique:
  %%    _23
  _56 = succeeded:body _23
  br ^1

38:
  %% beam_bounds_SUITE.erl:188
  %% Aliased:
  %%    _16
  _24 = match_fail `badmatch`, _16

  %% Unique:
  %%    _24
  _59 = succeeded:body _24
  br ^1

35:
  %% beam_bounds_SUITE.erl:187
  %% Aliased:
  %%    _15
  _25 = match_fail `badmatch`, _15

  %% Unique:
  %%    _25
  _61 = succeeded:body _25
  br ^1

32:
  %% beam_bounds_SUITE.erl:186
  %% Aliased:
  %%    _14
  _26 = match_fail `badmatch`, _14

  %% Unique:
  %%    _26
  _63 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_bounds_SUITE.erl:195
%% Counter = 95
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bor_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:196
  %% Result type:
  %%    'ok'
  _35 = call (`test_commutative`/1), `'bor'`

  %% Unique:
  %%    _35
  _47 = succeeded:body _35
  br _47, ^47, ^1

47:
  %% beam_bounds_SUITE.erl:198
  _26 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-10,7}`, `{3,10}`

  %% Aliased:
  %%    _26
  _48 = succeeded:body _26
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _93 = bif:'=:=' _26, `{'-inf',15}`
  br _93, ^93, ^50

93:
  %% beam_bounds_SUITE.erl:199
  _27 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-10,1}`, `{-1,10}`

  %% Aliased:
  %%    _27
  _51 = succeeded:body _27
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _91 = bif:'=:=' _27, `{'-inf',11}`
  br _91, ^91, ^53

91:
  %% beam_bounds_SUITE.erl:200
  _28 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-20,-10}`, `{-2,10}`

  %% Aliased:
  %%    _28
  _54 = succeeded:body _28
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _89 = bif:'=:=' _28, `{'-inf',-1}`
  br _89, ^89, ^56

89:
  %% beam_bounds_SUITE.erl:202
  _29 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{'-inf',10}`, `{3,5}`

  %% Aliased:
  %%    _29
  _57 = succeeded:body _29
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _87 = bif:'=:=' _29, `{'-inf',15}`
  br _87, ^87, ^59

87:
  %% beam_bounds_SUITE.erl:203
  _30 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-20,-10}`, `{-100,-50}`

  %% Aliased:
  %%    _30
  _60 = succeeded:body _30
  br _60, ^60, ^1

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _85 = bif:'=:=' _30, `{'-inf',-1}`
  br _85, ^85, ^62

85:
  %% beam_bounds_SUITE.erl:205
  _31 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-20,-10}`, `{-2,'+inf'}`

  %% Aliased:
  %%    _31
  _63 = succeeded:body _31
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _83 = bif:'=:=' _31, `any`
  br _83, ^82, ^65

82:
  %% beam_bounds_SUITE.erl:206
  _32 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{-20,'+inf'}`, `{-7,-3}`

  %% Aliased:
  %%    _32
  _66 = succeeded:body _32
  br _66, ^66, ^1

66:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _80 = bif:'=:=' _32, `any`
  br _80, ^79, ^68

79:
  %% beam_bounds_SUITE.erl:208
  _33 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{0,8}`, `{16,'+inf'}`

  %% Aliased:
  %%    _33
  _69 = succeeded:body _33
  br _69, ^69, ^1

69:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _77 = bif:'=:=' _33, `{16,'+inf'}`
  br _77, ^77, ^71

77:
  %% beam_bounds_SUITE.erl:209
  _34 = call (`beam_bounds`:`bounds`/3), `'bor'`, `{3,'+inf'}`, `{16,'+inf'}`

  %% Aliased:
  %%    _34
  _72 = succeeded:body _34
  br _72, ^72, ^1

72:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _75 = bif:'=:=' _34, `{16,'+inf'}`
  br _75, ^75, ^74

75:
  %% Result type:
  %%    'ok'
  ret `ok`

74:
  %% beam_bounds_SUITE.erl:209
  %% Aliased:
  %%    _34
  _36 = match_fail `badmatch`, _34

  %% Unique:
  %%    _36
  _76 = succeeded:body _36
  br ^1

71:
  %% beam_bounds_SUITE.erl:208
  %% Aliased:
  %%    _33
  _37 = match_fail `badmatch`, _33

  %% Unique:
  %%    _37
  _78 = succeeded:body _37
  br ^1

68:
  %% beam_bounds_SUITE.erl:206
  %% Aliased:
  %%    _32
  _38 = match_fail `badmatch`, _32

  %% Unique:
  %%    _38
  _81 = succeeded:body _38
  br ^1

65:
  %% beam_bounds_SUITE.erl:205
  %% Aliased:
  %%    _31
  _39 = match_fail `badmatch`, _31

  %% Unique:
  %%    _39
  _84 = succeeded:body _39
  br ^1

62:
  %% beam_bounds_SUITE.erl:203
  %% Aliased:
  %%    _30
  _40 = match_fail `badmatch`, _30

  %% Unique:
  %%    _40
  _86 = succeeded:body _40
  br ^1

59:
  %% beam_bounds_SUITE.erl:202
  %% Aliased:
  %%    _29
  _41 = match_fail `badmatch`, _29

  %% Unique:
  %%    _41
  _88 = succeeded:body _41
  br ^1

56:
  %% beam_bounds_SUITE.erl:200
  %% Aliased:
  %%    _28
  _42 = match_fail `badmatch`, _28

  %% Unique:
  %%    _42
  _90 = succeeded:body _42
  br ^1

53:
  %% beam_bounds_SUITE.erl:199
  %% Aliased:
  %%    _27
  _43 = match_fail `badmatch`, _27

  %% Unique:
  %%    _43
  _92 = succeeded:body _43
  br ^1

50:
  %% beam_bounds_SUITE.erl:198
  %% Aliased:
  %%    _26
  _44 = match_fail `badmatch`, _26

  %% Unique:
  %%    _44
  _94 = succeeded:body _44
  br ^1

1:
  _45 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _45
}

%% beam_bounds_SUITE.erl:213
%% Counter = 28
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bxor_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:214
  %% Result type:
  %%    'ok'
  _10 = call (`test_commutative`/1), `'bxor'`

  %% Unique:
  %%    _10
  _15 = succeeded:body _10
  br _15, ^15, ^1

15:
  %% beam_bounds_SUITE.erl:216
  _8 = call (`beam_bounds`:`bounds`/3), `'bxor'`, `{-10,0}`, `{-1,10}`

  %% Aliased:
  %%    _8
  _16 = succeeded:body _8
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _26 = bif:'=:=' _8, `any`
  br _26, ^25, ^18

25:
  %% beam_bounds_SUITE.erl:217
  _9 = call (`beam_bounds`:`bounds`/3), `'bxor'`, `{-20,-10}`, `{-1,10}`

  %% Aliased:
  %%    _9
  _19 = succeeded:body _9
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _23 = bif:'=:=' _9, `any`
  br _23, ^22, ^21

22:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% beam_bounds_SUITE.erl:217
  %% Aliased:
  %%    _9
  _11 = match_fail `badmatch`, _9

  %% Unique:
  %%    _11
  _24 = succeeded:body _11
  br ^1

18:
  %% beam_bounds_SUITE.erl:216
  %% Aliased:
  %%    _8
  _12 = match_fail `badmatch`, _8

  %% Unique:
  %%    _12
  _27 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_bounds_SUITE.erl:221
%% Counter = 365
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bnot_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:224
  Seq = call (`lists`:`seq`/2), `-7`, `7`

  %% Aliased:
  %%    Seq
  _118 = succeeded:body Seq
  br _118, ^118, ^1

118:
  %% beam_bounds_SUITE.erl:226
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    Seq
  _93 = call (`'-bnot_bounds/1-lc$^0/1-0-'`/2), Seq, Seq

  %% Unique:
  %%    _93
  _119 = succeeded:body _93
  br _119, ^119, ^1

119:
  %% beam_bounds_SUITE.erl:229
  _60 = call (`beam_bounds`:`bounds`/2), `'bnot'`, `{'-inf',42}`

  %% Aliased:
  %%    _60
  _120 = succeeded:body _60
  br _120, ^120, ^1

120:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _278 = bif:'=:=' _60, `{-43,'+inf'}`
  br _278, ^278, ^122

278:
  %% beam_bounds_SUITE.erl:230
  _61 = call (`beam_bounds`:`bounds`/2), `'bnot'`, `{'-inf',-100}`

  %% Aliased:
  %%    _61
  _123 = succeeded:body _61
  br _123, ^123, ^1

123:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _61
  _276 = bif:'=:=' _61, `{99,'+inf'}`
  br _276, ^276, ^125

276:
  %% beam_bounds_SUITE.erl:231
  _62 = call (`beam_bounds`:`bounds`/2), `'bnot'`, `{7,'+inf'}`

  %% Aliased:
  %%    _62
  _126 = succeeded:body _62
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _274 = bif:'=:=' _62, `{'-inf',-8}`
  br _274, ^274, ^128

274:
  %% beam_bounds_SUITE.erl:232
  _63 = call (`beam_bounds`:`bounds`/2), `'bnot'`, `{-10,'+inf'}`

  %% Aliased:
  %%    _63
  _129 = succeeded:body _63
  br _129, ^129, ^1

129:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _272 = bif:'=:=' _63, `{'-inf',9}`
  br _272, ^272, ^131

272:
  %% beam_bounds_SUITE.erl:233
  _64 = call (`beam_bounds`:`bounds`/2), `'bnot'`, `{'-inf',1114110}`

  %% Aliased:
  %%    _64
  _132 = succeeded:body _64
  br _132, ^132, ^1

132:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _270 = bif:'=:=' _64, `{-1114111,'+inf'}`
  br _270, ^270, ^134

270:
  %% beam_bounds_SUITE.erl:235
  %% Result type:
  %%    -1
  _65 = call (`bnot_bounds_2`/1), `0`

  %% Unique:
  %%    _65
  _135 = succeeded:body _65
  br _135, ^267, ^1

267:
  %% beam_bounds_SUITE.erl:236
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  _26 = call (`id`/1), `42`

  %% Unique:
  %%    _26
  _138 = succeeded:body _26
  br _138, ^138, ^1

138:
  %% beam_bounds_SUITE.erl:236
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _26
  _66 = call (`bnot_bounds_2_coverage`/1), _26

  %% Unique:
  %%    _66
  _139 = succeeded:body _66
  br _139, ^139, ^1

139:
  %% Argument types:
  %%    _66 => integer()
  %% Unique:
  %%    _66
  _265 = bif:'=:=' _66, `-43`
  br _265, ^355, ^141

355:
  br ^360

360:
  _145 = new_try_tag `'catch'`
  br _145, ^143, ^144

143:
  %% beam_bounds_SUITE.erl:237
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  _28 = call (`id`/1), `bad`

  %% Unique:
  %%    _28
  _147 = succeeded:body _28
  br _147, ^147, ^144

147:
  %% beam_bounds_SUITE.erl:237
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _28
  _95 = call (`bnot_bounds_2_coverage`/1), _28

  %% Unique:
  %%    _95
  _148 = succeeded:body _95
  br _148, ^148, ^144

148:
  br ^142

144:
  %% Unique:
  %%    _145
  _151 = landingpad `'catch'`, _145

  %% Aliased:
  %%    _151
  _149 = extract _151, `0`
  br ^142

142:
  _152 = phi { _149, ^144 }, { _95, ^148 }

  %% Aliased:
  %%    _152
  %% Unique:
  %%    _145
  _29 = catch_end _145, _152

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _260 = is_tagged_tuple _29, `2`, `'EXIT'`
  br _260, ^257, ^154

257:
  %% Argument types:
  %%    _29 => {''EXIT'', any()}
  %% Aliased:
  %%    _29
  _67 = get_tuple_element _29, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _254 = is_tagged_tuple _67, `2`, `badarith`
  br _254, ^356, ^154

356:
  br ^361

361:
  _158 = new_try_tag `'catch'`
  br _158, ^156, ^157

156:
  %% beam_bounds_SUITE.erl:239
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  _31 = call (`id`/1), `true`

  %% Unique:
  %%    _31
  _160 = succeeded:body _31
  br _160, ^160, ^157

160:
  %% beam_bounds_SUITE.erl:239
  %% Result type:
  %%    none()
  %% Unique:
  %%    _31
  _97 = call (`bnot_bounds_3`/1), _31

  %% Aliased:
  %%    _97
  _161 = succeeded:body _97
  br ^157

157:
  %% Unique:
  %%    _158
  _164 = landingpad `'catch'`, _158

  %% Aliased:
  %%    _164
  _162 = extract _164, `0`
  br ^155

155:
  %% Aliased:
  %%    _162
  %% Unique:
  %%    _158
  _32 = catch_end _158, _162

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _247 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _247, ^244, ^167

244:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _71 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _241 = bif:is_tuple _71
  br _241, ^241, ^167

241:
  %% Argument types:
  %%    _71 => {...}
  %% Aliased:
  %%    _71
  _242 = bif:tuple_size _71

  %% Argument types:
  %%    _242 => 0..16777215
  %% Unique:
  %%    _242
  _243 = bif:'=:=' _242, `2`
  br _243, ^357, ^167

357:
  br ^362

362:
  _171 = new_try_tag `'catch'`
  br _171, ^169, ^170

169:
  %% beam_bounds_SUITE.erl:240
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  _34 = call (`id`/1), `false`

  %% Unique:
  %%    _34
  _173 = succeeded:body _34
  br _173, ^173, ^170

173:
  %% beam_bounds_SUITE.erl:240
  %% Result type:
  %%    none()
  %% Unique:
  %%    _34
  _99 = call (`bnot_bounds_3`/1), _34

  %% Aliased:
  %%    _99
  _174 = succeeded:body _99
  br ^170

170:
  %% Unique:
  %%    _171
  _177 = landingpad `'catch'`, _171

  %% Aliased:
  %%    _177
  _175 = extract _177, `0`
  br ^168

168:
  %% Aliased:
  %%    _175
  %% Unique:
  %%    _171
  _35 = catch_end _171, _175

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _236 = is_tagged_tuple _35, `2`, `'EXIT'`
  br _236, ^233, ^180

233:
  %% Argument types:
  %%    _35 => {''EXIT'', any()}
  %% Aliased:
  %%    _35
  _75 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _230 = bif:is_tuple _75
  br _230, ^230, ^180

230:
  %% Argument types:
  %%    _75 => {...}
  %% Aliased:
  %%    _75
  _231 = bif:tuple_size _75

  %% Argument types:
  %%    _231 => 0..16777215
  %% Unique:
  %%    _231
  _232 = bif:'=:=' _231, `2`
  br _232, ^358, ^180

358:
  br ^363

363:
  _184 = new_try_tag `'catch'`
  br _184, ^182, ^183

182:
  %% beam_bounds_SUITE.erl:241
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  _37 = call (`id`/1), `0`

  %% Unique:
  %%    _37
  _186 = succeeded:body _37
  br _186, ^186, ^183

186:
  %% beam_bounds_SUITE.erl:241
  %% Result type:
  %%    none()
  %% Unique:
  %%    _37
  _101 = call (`bnot_bounds_3`/1), _37

  %% Aliased:
  %%    _101
  _187 = succeeded:body _101
  br ^183

183:
  %% Unique:
  %%    _184
  _190 = landingpad `'catch'`, _184

  %% Aliased:
  %%    _190
  _188 = extract _190, `0`
  br ^181

181:
  %% Aliased:
  %%    _188
  %% Unique:
  %%    _184
  _38 = catch_end _184, _188

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _225 = is_tagged_tuple _38, `2`, `'EXIT'`
  br _225, ^222, ^193

222:
  %% Argument types:
  %%    _38 => {''EXIT'', any()}
  %% Aliased:
  %%    _38
  _79 = get_tuple_element _38, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _219 = bif:is_tuple _79
  br _219, ^219, ^193

219:
  %% Argument types:
  %%    _79 => {...}
  %% Aliased:
  %%    _79
  _220 = bif:tuple_size _79

  %% Argument types:
  %%    _220 => 0..16777215
  %% Unique:
  %%    _220
  _221 = bif:'=:=' _220, `2`
  br _221, ^359, ^193

359:
  br ^364

364:
  _197 = new_try_tag `'catch'`
  br _197, ^195, ^196

195:
  %% beam_bounds_SUITE.erl:243
  %% Result type:
  %%    none()
  _103 = call (`bnot_bounds_4`/0)

  %% Aliased:
  %%    _103
  _199 = succeeded:body _103
  br ^196

196:
  %% Unique:
  %%    _197
  _202 = landingpad `'catch'`, _197

  %% Aliased:
  %%    _202
  _200 = extract _202, `0`
  br ^194

194:
  %% Aliased:
  %%    _200
  %% Unique:
  %%    _197
  _40 = catch_end _197, _200

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _214 = is_tagged_tuple _40, `2`, `'EXIT'`
  br _214, ^211, ^205

211:
  %% Argument types:
  %%    _40 => {''EXIT'', any()}
  %% Aliased:
  %%    _40
  _83 = get_tuple_element _40, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _208 = bif:is_tuple _83
  br _208, ^208, ^205

208:
  %% Argument types:
  %%    _83 => {...}
  %% Aliased:
  %%    _83
  _209 = bif:tuple_size _83

  %% Argument types:
  %%    _209 => 0..16777215
  %% Unique:
  %%    _209
  _210 = bif:'=:=' _209, `2`
  br _210, ^207, ^205

207:
  %% Argument types:
  %%    _83 => {any(), any()}
  %% Aliased:
  %%    _83
  _86 = get_tuple_element _83, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _206 = bif:'=:=' _86, `{bad_generator,-3}`
  br _206, ^206, ^205

206:
  %% Result type:
  %%    'ok'
  ret `ok`

205:
  %% beam_bounds_SUITE.erl:243
  %% Aliased:
  %%    _40
  _104 = match_fail `badmatch`, _40

  %% Unique:
  %%    _104
  _217 = succeeded:body _104
  br ^1

193:
  %% beam_bounds_SUITE.erl:241
  %% Aliased:
  %%    _38
  _105 = match_fail `badmatch`, _38

  %% Unique:
  %%    _105
  _228 = succeeded:body _105
  br ^1

180:
  %% beam_bounds_SUITE.erl:240
  %% Aliased:
  %%    _35
  _106 = match_fail `badmatch`, _35

  %% Unique:
  %%    _106
  _239 = succeeded:body _106
  br ^1

167:
  %% beam_bounds_SUITE.erl:239
  %% Aliased:
  %%    _32
  _107 = match_fail `badmatch`, _32

  %% Unique:
  %%    _107
  _250 = succeeded:body _107
  br ^1

154:
  %% beam_bounds_SUITE.erl:237
  %% Aliased:
  %%    _29
  _108 = match_fail `badmatch`, _29

  %% Unique:
  %%    _108
  _263 = succeeded:body _108
  br ^1

141:
  %% beam_bounds_SUITE.erl:236
  %% Unique:
  %%    _66
  _109 = match_fail `badmatch`, _66

  %% Unique:
  %%    _109
  _266 = succeeded:body _109
  br ^1

134:
  %% beam_bounds_SUITE.erl:233
  %% Aliased:
  %%    _64
  _111 = match_fail `badmatch`, _64

  %% Unique:
  %%    _111
  _271 = succeeded:body _111
  br ^1

131:
  %% beam_bounds_SUITE.erl:232
  %% Aliased:
  %%    _63
  _112 = match_fail `badmatch`, _63

  %% Unique:
  %%    _112
  _273 = succeeded:body _112
  br ^1

128:
  %% beam_bounds_SUITE.erl:231
  %% Aliased:
  %%    _62
  _113 = match_fail `badmatch`, _62

  %% Unique:
  %%    _113
  _275 = succeeded:body _113
  br ^1

125:
  %% beam_bounds_SUITE.erl:230
  %% Aliased:
  %%    _61
  _114 = match_fail `badmatch`, _61

  %% Unique:
  %%    _114
  _277 = succeeded:body _114
  br ^1

122:
  %% beam_bounds_SUITE.erl:229
  %% Aliased:
  %%    _60
  _115 = match_fail `badmatch`, _60

  %% Unique:
  %%    _115
  _279 = succeeded:body _115
  br ^1

1:
  _116 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _116
}

%% beam_bounds_SUITE.erl:247
%% Counter = 49
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`bnot_bounds_1`(_0) {
0:
  %% beam_bounds_SUITE.erl:248
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0
  _5 = call (`min_max_unary_op`/2), `'bnot'`, _0

  %% Unique:
  %%    _5
  _21 = succeeded:body _5
  br _21, ^47, ^1

47:
  %% beam_bounds_SUITE.erl:249
  %% Aliased:
  %%    _0
  _8 = call (`beam_bounds`:`bounds`/2), `'bnot'`, _0

  %% Aliased:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _34 = bif:is_tuple _8
  br _34, ^34, ^26

34:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _35 = bif:tuple_size _8

  %% Argument types:
  %%    _35 => 0..16777215
  %% Unique:
  %%    _35
  _36 = bif:'=:=' _35, `2`
  br _36, ^33, ^26

33:
  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _7 = get_tuple_element _5, `0`

  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `0`

  %% beam_bounds_SUITE.erl:251
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _7
  _3 = bif:'=<' _10, _7
  br _3, ^45, ^28

45:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`

  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _6 = get_tuple_element _5, `1`

  %% beam_bounds_SUITE.erl:251
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _6
  _4 = bif:'=<' _6, _9
  br _4, ^30, ^28

30:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _12 = put_list _5, `[]`

  %% Argument types:
  %%    _8 => {any(), any()}
  %%    _12 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _8
  %% Unique:
  %%    _12
  _13 = put_list _8, _12

  %% Argument types:
  %%    _0 => {number(), any()}
  %%    _13 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _13
  _14 = put_list _0, _13

  %% beam_bounds_SUITE.erl:254
  %% Unique:
  %%    _14
  _15 = call (`io`:`format`/2), `"bnot(~p) evaluates to ~p; should be ~p\n"`, _14

  %% Aliased:
  %%    _15
  _31 = succeeded:body _15
  br _31, ^31, ^1

31:
  %% beam_bounds_SUITE.erl:256
  _16 = call (`ct`:`fail`/1), `bad_min_or_max`

  %% Aliased:
  %%    _16
  _32 = succeeded:body _16
  br _32, ^32, ^1

32:
  %% Aliased:
  %%    _16
  ret _16

26:
  %% beam_bounds_SUITE.erl:249
  %% Aliased:
  %%    _8
  _17 = match_fail `badmatch`, _8

  %% Unique:
  %%    _17
  _37 = succeeded:body _17
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_bounds_SUITE.erl:260
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
function `beam_bounds_SUITE`:`bnot_bounds_2`(_0) {
0:
  %% Result type:
  %%    -1
  ret `-1`
}

%% beam_bounds_SUITE.erl:263
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'bad' | 'false' | 'true' | 0..42
function `beam_bounds_SUITE`:`bnot_bounds_2_coverage`(_0) {
0:
  %% beam_bounds_SUITE.erl:263
  %% Argument types:
  %%    _0 => 'bad' | 'false' | 'true' | 0..42
  %% Unique:
  %%    _0
  _2 = bif:'bnot' _0

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:266
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'bad' | 'false' | 'true' | 0..42
function `beam_bounds_SUITE`:`bnot_bounds_3`(_0) {
0:
  %% beam_bounds_SUITE.erl:267
  %% Argument types:
  %%    _0 => 'bad' | 'false' | 'true' | 0..42
  %% Unique:
  %%    _0
  _7 = bif:'xor' _0, `false`

  %% Unique:
  %%    _7
  _11 = succeeded:body _7
  br _11, ^11, ^1

11:
  br _7, ^13, ^14

13:
  br ^12

14:
  br ^12

12:
  _3 = phi { `1`, ^13 }, { `false`, ^14 }

  %% beam_bounds_SUITE.erl:267
  %% Argument types:
  %%    _3 => 'false' | 1
  %% Unique:
  %%    _3
  _4 = bif:'+' _3, `2`

  %% Unique:
  %%    _4
  _15 = succeeded:body _4
  br _15, ^16, ^1

16:
  %% beam_bounds_SUITE.erl:267
  %% Argument types:
  %%    _4 => 3
  %% Unique:
  %%    _4
  _6 = bif:'bnot' _4

  %% Unique:
  %%    _6
  _17 = succeeded:body _6
  br _17, ^17, ^1

17:
  %% beam_bounds_SUITE.erl:267
  %% Argument types:
  %%    _6 => -4
  %% Unique:
  %%    _6
  _8 = bif:'bsr' _6, `ok`

  %% Unique:
  %%    _8
  _18 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_bounds_SUITE.erl:270
%% Counter = 42
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bnot_bounds_4`() {
0:
  %% beam_bounds_SUITE.erl:271
  _0 = bs_init_writable `256`

  %% beam_bounds_SUITE.erl:271
  %% Result type:
  %%    none()
  %% Unique:
  %%    _0
  _37 = call (`'-bnot_bounds_4/0-lbc$^0/2-0-'`/2), `[1,2]`, _0

  %% Aliased:
  %%    _37
  _40 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% beam_bounds_SUITE.erl:274
%% Counter = 66
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bsr_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:275
  %% Result type:
  %%    'ok'
  _20 = call (`test_noncommutative`/3), `'bsr'`, `{-12,12}`, `{0,7}`

  %% Unique:
  %%    _20
  _30 = succeeded:body _20
  br _30, ^30, ^1

30:
  %% beam_bounds_SUITE.erl:277
  _13 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{0,10}`, `{0,'+inf'}`

  %% Aliased:
  %%    _13
  _31 = succeeded:body _13
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _64 = bif:'=:=' _13, `{0,10}`
  br _64, ^64, ^33

64:
  %% beam_bounds_SUITE.erl:278
  _14 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{0,10}`, `{2,'+inf'}`

  %% Aliased:
  %%    _14
  _34 = succeeded:body _14
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _62 = bif:'=:=' _14, `{0,2}`
  br _62, ^62, ^36

62:
  %% beam_bounds_SUITE.erl:280
  _15 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{-1,10}`, `{0,'+inf'}`

  %% Aliased:
  %%    _15
  _37 = succeeded:body _15
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _60 = bif:'=:=' _15, `{-1,10}`
  br _60, ^60, ^39

60:
  %% beam_bounds_SUITE.erl:281
  _16 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{-100,900}`, `{0,'+inf'}`

  %% Aliased:
  %%    _16
  _40 = succeeded:body _16
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _58 = bif:'=:=' _16, `{-100,900}`
  br _58, ^58, ^42

58:
  %% beam_bounds_SUITE.erl:282
  _17 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{-100,900}`, `{1,'+inf'}`

  %% Aliased:
  %%    _17
  _43 = succeeded:body _17
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _56 = bif:'=:=' _17, `{-50,450}`
  br _56, ^56, ^45

56:
  %% beam_bounds_SUITE.erl:284
  _18 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{'-inf',32}`, `{1,10}`

  %% Aliased:
  %%    _18
  _46 = succeeded:body _18
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _54 = bif:'=:=' _18, `{'-inf',16}`
  br _54, ^54, ^48

54:
  %% beam_bounds_SUITE.erl:285
  _19 = call (`beam_bounds`:`bounds`/3), `'bsr'`, `{-10,'+inf'}`, `{1,10}`

  %% Aliased:
  %%    _19
  _49 = succeeded:body _19
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _52 = bif:'=:=' _19, `{-5,'+inf'}`
  br _52, ^52, ^51

52:
  %% Result type:
  %%    'ok'
  ret `ok`

51:
  %% beam_bounds_SUITE.erl:285
  %% Aliased:
  %%    _19
  _21 = match_fail `badmatch`, _19

  %% Unique:
  %%    _21
  _53 = succeeded:body _21
  br ^1

48:
  %% beam_bounds_SUITE.erl:284
  %% Aliased:
  %%    _18
  _22 = match_fail `badmatch`, _18

  %% Unique:
  %%    _22
  _55 = succeeded:body _22
  br ^1

45:
  %% beam_bounds_SUITE.erl:282
  %% Aliased:
  %%    _17
  _23 = match_fail `badmatch`, _17

  %% Unique:
  %%    _23
  _57 = succeeded:body _23
  br ^1

42:
  %% beam_bounds_SUITE.erl:281
  %% Aliased:
  %%    _16
  _24 = match_fail `badmatch`, _16

  %% Unique:
  %%    _24
  _59 = succeeded:body _24
  br ^1

39:
  %% beam_bounds_SUITE.erl:280
  %% Aliased:
  %%    _15
  _25 = match_fail `badmatch`, _15

  %% Unique:
  %%    _25
  _61 = succeeded:body _25
  br ^1

36:
  %% beam_bounds_SUITE.erl:278
  %% Aliased:
  %%    _14
  _26 = match_fail `badmatch`, _14

  %% Unique:
  %%    _26
  _63 = succeeded:body _26
  br ^1

33:
  %% beam_bounds_SUITE.erl:277
  %% Aliased:
  %%    _13
  _27 = match_fail `badmatch`, _13

  %% Unique:
  %%    _27
  _65 = succeeded:body _27
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% beam_bounds_SUITE.erl:289
%% Counter = 179
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`bsl_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:290
  %% Result type:
  %%    'ok'
  _56 = call (`test_noncommutative`/3), `'bsl'`, `{-12,12}`, `{-7,7}`

  %% Unique:
  %%    _56
  _78 = succeeded:body _56
  br _78, ^78, ^1

78:
  %% beam_bounds_SUITE.erl:292
  _37 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{1,10}`, `{1,10000}`

  %% Aliased:
  %%    _37
  _79 = succeeded:body _37
  br _79, ^79, ^1

79:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _177 = bif:'=:=' _37, `{2,'+inf'}`
  br _177, ^177, ^81

177:
  %% beam_bounds_SUITE.erl:293
  _38 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{1,10}`, `{-10,10000}`

  %% Aliased:
  %%    _38
  _82 = succeeded:body _38
  br _82, ^82, ^1

82:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _175 = bif:'=:=' _38, `{0,'+inf'}`
  br _175, ^175, ^84

175:
  %% beam_bounds_SUITE.erl:294
  _39 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-30,-10}`, `{1,10000}`

  %% Aliased:
  %%    _39
  _85 = succeeded:body _39
  br _85, ^85, ^1

85:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _173 = bif:'=:=' _39, `{'-inf',-20}`
  br _173, ^173, ^87

173:
  %% beam_bounds_SUITE.erl:295
  _40 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-9,-1}`, `{1,10000}`

  %% Aliased:
  %%    _40
  _88 = succeeded:body _40
  br _88, ^88, ^1

88:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _171 = bif:'=:=' _40, `{'-inf',-2}`
  br _171, ^171, ^90

171:
  %% beam_bounds_SUITE.erl:296
  _41 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-7,10}`, `{1,10000}`

  %% Aliased:
  %%    _41
  _91 = succeeded:body _41
  br _91, ^91, ^1

91:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _169 = bif:'=:=' _41, `any`
  br _169, ^168, ^93

168:
  %% beam_bounds_SUITE.erl:298
  _42 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{0,'+inf'}`, `{0,'+inf'}`

  %% Aliased:
  %%    _42
  _94 = succeeded:body _42
  br _94, ^94, ^1

94:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _166 = bif:'=:=' _42, `{0,'+inf'}`
  br _166, ^166, ^96

166:
  %% beam_bounds_SUITE.erl:299
  _43 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{20,30}`, `{0,'+inf'}`

  %% Aliased:
  %%    _43
  _97 = succeeded:body _43
  br _97, ^97, ^1

97:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _164 = bif:'=:=' _43, `{20,'+inf'}`
  br _164, ^164, ^99

164:
  %% beam_bounds_SUITE.erl:301
  _44 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-10,100}`, `{0,'+inf'}`

  %% Aliased:
  %%    _44
  _100 = succeeded:body _44
  br _100, ^100, ^1

100:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _162 = bif:'=:=' _44, `any`
  br _162, ^161, ^102

161:
  %% beam_bounds_SUITE.erl:302
  _45 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-10,100}`, `{1,'+inf'}`

  %% Aliased:
  %%    _45
  _103 = succeeded:body _45
  br _103, ^103, ^1

103:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _159 = bif:'=:=' _45, `any`
  br _159, ^158, ^105

158:
  %% beam_bounds_SUITE.erl:303
  _46 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-10,100}`, `{-1,'+inf'}`

  %% Aliased:
  %%    _46
  _106 = succeeded:body _46
  br _106, ^106, ^1

106:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _156 = bif:'=:=' _46, `any`
  br _156, ^155, ^108

155:
  %% beam_bounds_SUITE.erl:305
  _47 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{1,10}`, `{'-inf',0}`

  %% Aliased:
  %%    _47
  _109 = succeeded:body _47
  br _109, ^109, ^1

109:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _153 = bif:'=:=' _47, `{0,10}`
  br _153, ^153, ^111

153:
  %% beam_bounds_SUITE.erl:306
  _48 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{1,10}`, `{'-inf',1}`

  %% Aliased:
  %%    _48
  _112 = succeeded:body _48
  br _112, ^112, ^1

112:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _151 = bif:'=:=' _48, `{0,20}`
  br _151, ^151, ^114

151:
  %% beam_bounds_SUITE.erl:307
  _49 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-7,10}`, `{'-inf',0}`

  %% Aliased:
  %%    _49
  _115 = succeeded:body _49
  br _115, ^115, ^1

115:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _149 = bif:'=:=' _49, `{-7,10}`
  br _149, ^149, ^117

149:
  %% beam_bounds_SUITE.erl:308
  _50 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-7,10}`, `{'-inf',2}`

  %% Aliased:
  %%    _50
  _118 = succeeded:body _50
  br _118, ^118, ^1

118:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _147 = bif:'=:=' _50, `{-28,40}`
  br _147, ^147, ^120

147:
  %% beam_bounds_SUITE.erl:310
  _51 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{-10,-1}`, `{500,1024}`

  %% Aliased:
  %%    _51
  _121 = succeeded:body _51
  br _121, ^121, ^1

121:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _145 = bif:'=:=' _51, `{'-inf',-1}`
  br _145, ^145, ^123

145:
  %% beam_bounds_SUITE.erl:311
  _52 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{1,10}`, `{500,1024}`

  %% Aliased:
  %%    _52
  _124 = succeeded:body _52
  br _124, ^124, ^1

124:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _143 = bif:'=:=' _52, `{0,'+inf'}`
  br _143, ^143, ^126

143:
  %% beam_bounds_SUITE.erl:313
  _53 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{'-inf',-10}`, `{2,64}`

  %% Aliased:
  %%    _53
  _127 = succeeded:body _53
  br _127, ^127, ^1

127:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _141 = bif:'=:=' _53, `{'-inf',-40}`
  br _141, ^141, ^129

141:
  %% beam_bounds_SUITE.erl:314
  _54 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{'-inf',7}`, `{3,5}`

  %% Aliased:
  %%    _54
  _130 = succeeded:body _54
  br _130, ^130, ^1

130:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _139 = bif:'=:=' _54, `{'-inf',224}`
  br _139, ^139, ^132

139:
  %% beam_bounds_SUITE.erl:316
  _55 = call (`beam_bounds`:`bounds`/3), `'bsl'`, `{'-inf',7}`, `{3,'+inf'}`

  %% Aliased:
  %%    _55
  _133 = succeeded:body _55
  br _133, ^133, ^1

133:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _137 = bif:'=:=' _55, `any`
  br _137, ^136, ^135

136:
  %% Result type:
  %%    'ok'
  ret `ok`

135:
  %% beam_bounds_SUITE.erl:316
  %% Aliased:
  %%    _55
  _57 = match_fail `badmatch`, _55

  %% Unique:
  %%    _57
  _138 = succeeded:body _57
  br ^1

132:
  %% beam_bounds_SUITE.erl:314
  %% Aliased:
  %%    _54
  _58 = match_fail `badmatch`, _54

  %% Unique:
  %%    _58
  _140 = succeeded:body _58
  br ^1

129:
  %% beam_bounds_SUITE.erl:313
  %% Aliased:
  %%    _53
  _59 = match_fail `badmatch`, _53

  %% Unique:
  %%    _59
  _142 = succeeded:body _59
  br ^1

126:
  %% beam_bounds_SUITE.erl:311
  %% Aliased:
  %%    _52
  _60 = match_fail `badmatch`, _52

  %% Unique:
  %%    _60
  _144 = succeeded:body _60
  br ^1

123:
  %% beam_bounds_SUITE.erl:310
  %% Aliased:
  %%    _51
  _61 = match_fail `badmatch`, _51

  %% Unique:
  %%    _61
  _146 = succeeded:body _61
  br ^1

120:
  %% beam_bounds_SUITE.erl:308
  %% Aliased:
  %%    _50
  _62 = match_fail `badmatch`, _50

  %% Unique:
  %%    _62
  _148 = succeeded:body _62
  br ^1

117:
  %% beam_bounds_SUITE.erl:307
  %% Aliased:
  %%    _49
  _63 = match_fail `badmatch`, _49

  %% Unique:
  %%    _63
  _150 = succeeded:body _63
  br ^1

114:
  %% beam_bounds_SUITE.erl:306
  %% Aliased:
  %%    _48
  _64 = match_fail `badmatch`, _48

  %% Unique:
  %%    _64
  _152 = succeeded:body _64
  br ^1

111:
  %% beam_bounds_SUITE.erl:305
  %% Aliased:
  %%    _47
  _65 = match_fail `badmatch`, _47

  %% Unique:
  %%    _65
  _154 = succeeded:body _65
  br ^1

108:
  %% beam_bounds_SUITE.erl:303
  %% Aliased:
  %%    _46
  _66 = match_fail `badmatch`, _46

  %% Unique:
  %%    _66
  _157 = succeeded:body _66
  br ^1

105:
  %% beam_bounds_SUITE.erl:302
  %% Aliased:
  %%    _45
  _67 = match_fail `badmatch`, _45

  %% Unique:
  %%    _67
  _160 = succeeded:body _67
  br ^1

102:
  %% beam_bounds_SUITE.erl:301
  %% Aliased:
  %%    _44
  _68 = match_fail `badmatch`, _44

  %% Unique:
  %%    _68
  _163 = succeeded:body _68
  br ^1

99:
  %% beam_bounds_SUITE.erl:299
  %% Aliased:
  %%    _43
  _69 = match_fail `badmatch`, _43

  %% Unique:
  %%    _69
  _165 = succeeded:body _69
  br ^1

96:
  %% beam_bounds_SUITE.erl:298
  %% Aliased:
  %%    _42
  _70 = match_fail `badmatch`, _42

  %% Unique:
  %%    _70
  _167 = succeeded:body _70
  br ^1

93:
  %% beam_bounds_SUITE.erl:296
  %% Aliased:
  %%    _41
  _71 = match_fail `badmatch`, _41

  %% Unique:
  %%    _71
  _170 = succeeded:body _71
  br ^1

90:
  %% beam_bounds_SUITE.erl:295
  %% Aliased:
  %%    _40
  _72 = match_fail `badmatch`, _40

  %% Unique:
  %%    _72
  _172 = succeeded:body _72
  br ^1

87:
  %% beam_bounds_SUITE.erl:294
  %% Aliased:
  %%    _39
  _73 = match_fail `badmatch`, _39

  %% Unique:
  %%    _73
  _174 = succeeded:body _73
  br ^1

84:
  %% beam_bounds_SUITE.erl:293
  %% Aliased:
  %%    _38
  _74 = match_fail `badmatch`, _38

  %% Unique:
  %%    _74
  _176 = succeeded:body _74
  br ^1

81:
  %% beam_bounds_SUITE.erl:292
  %% Aliased:
  %%    _37
  _75 = match_fail `badmatch`, _37

  %% Unique:
  %%    _75
  _178 = succeeded:body _75
  br ^1

1:
  _76 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _76
}

%% beam_bounds_SUITE.erl:320
%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`lt_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:321
  %% Result type:
  %%    'ok'
  _2 = call (`test_relop`/1), `'<'`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:323
%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`le_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:324
  %% Result type:
  %%    'ok'
  _2 = call (`test_relop`/1), `'=<'`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:326
%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`gt_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:327
  %% Result type:
  %%    'ok'
  _2 = call (`test_relop`/1), `'>'`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:329
%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`ge_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:330
  %% Result type:
  %%    'ok'
  _2 = call (`test_relop`/1), `'>='`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:332
%% Counter = 113
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`min_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:333
  %% Result type:
  %%    'ok'
  _30 = call (`test_commutative`/2), `min`, `{-12,12}`

  %% Unique:
  %%    _30
  _46 = succeeded:body _30
  br _46, ^46, ^1

46:
  %% beam_bounds_SUITE.erl:335
  _17 = call (`min_bounds`/2), `{'-inf',-10}`, `{1,100}`

  %% Aliased:
  %%    _17
  _47 = succeeded:body _17
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _111 = bif:'=:=' _17, `{'-inf',-10}`
  br _111, ^111, ^49

111:
  %% beam_bounds_SUITE.erl:336
  _18 = call (`min_bounds`/2), `{'-inf',1}`, `{1,100}`

  %% Aliased:
  %%    _18
  _50 = succeeded:body _18
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _109 = bif:'=:=' _18, `{'-inf',1}`
  br _109, ^109, ^52

109:
  %% beam_bounds_SUITE.erl:337
  _19 = call (`min_bounds`/2), `{'-inf',50}`, `{1,100}`

  %% Aliased:
  %%    _19
  _53 = succeeded:body _19
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _107 = bif:'=:=' _19, `{'-inf',50}`
  br _107, ^107, ^55

107:
  %% beam_bounds_SUITE.erl:338
  _20 = call (`min_bounds`/2), `{'-inf',500}`, `{1,100}`

  %% Aliased:
  %%    _20
  _56 = succeeded:body _20
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _105 = bif:'=:=' _20, `{'-inf',100}`
  br _105, ^105, ^58

105:
  %% beam_bounds_SUITE.erl:340
  _21 = call (`min_bounds`/2), `{'-inf',-10}`, `{1,'+inf'}`

  %% Aliased:
  %%    _21
  _59 = succeeded:body _21
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _103 = bif:'=:=' _21, `{'-inf',-10}`
  br _103, ^103, ^61

103:
  %% beam_bounds_SUITE.erl:341
  _22 = call (`min_bounds`/2), `{'-inf',1}`, `{1,'+inf'}`

  %% Aliased:
  %%    _22
  _62 = succeeded:body _22
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _101 = bif:'=:=' _22, `{'-inf',1}`
  br _101, ^101, ^64

101:
  %% beam_bounds_SUITE.erl:342
  _23 = call (`min_bounds`/2), `{'-inf',700}`, `{1,'+inf'}`

  %% Aliased:
  %%    _23
  _65 = succeeded:body _23
  br _65, ^65, ^1

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _99 = bif:'=:=' _23, `{'-inf',700}`
  br _99, ^99, ^67

99:
  %% beam_bounds_SUITE.erl:344
  _24 = call (`min_bounds`/2), `{1,99}`, `{100,'+inf'}`

  %% Aliased:
  %%    _24
  _68 = succeeded:body _24
  br _68, ^68, ^1

68:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _97 = bif:'=:=' _24, `{1,99}`
  br _97, ^97, ^70

97:
  %% beam_bounds_SUITE.erl:345
  _25 = call (`min_bounds`/2), `{1,100}`, `{100,'+inf'}`

  %% Aliased:
  %%    _25
  _71 = succeeded:body _25
  br _71, ^71, ^1

71:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _95 = bif:'=:=' _25, `{1,100}`
  br _95, ^95, ^73

95:
  %% beam_bounds_SUITE.erl:346
  _26 = call (`min_bounds`/2), `{150,200}`, `{100,'+inf'}`

  %% Aliased:
  %%    _26
  _74 = succeeded:body _26
  br _74, ^74, ^1

74:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _93 = bif:'=:=' _26, `{100,200}`
  br _93, ^93, ^76

93:
  %% beam_bounds_SUITE.erl:348
  _27 = call (`min_bounds`/2), `{1,10}`, `any`

  %% Aliased:
  %%    _27
  _77 = succeeded:body _27
  br _77, ^77, ^1

77:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _91 = bif:'=:=' _27, `{'-inf',10}`
  br _91, ^91, ^79

91:
  %% beam_bounds_SUITE.erl:349
  _28 = call (`min_bounds`/2), `{1,'+inf'}`, `any`

  %% Aliased:
  %%    _28
  _80 = succeeded:body _28
  br _80, ^80, ^1

80:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _89 = bif:'=:=' _28, `any`
  br _89, ^88, ^82

88:
  %% beam_bounds_SUITE.erl:350
  _29 = call (`min_bounds`/2), `any`, `{'-inf',777}`

  %% Aliased:
  %%    _29
  _83 = succeeded:body _29
  br _83, ^83, ^1

83:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _86 = bif:'=:=' _29, `{'-inf',777}`
  br _86, ^86, ^85

86:
  %% Result type:
  %%    'ok'
  ret `ok`

85:
  %% beam_bounds_SUITE.erl:350
  %% Aliased:
  %%    _29
  _31 = match_fail `badmatch`, _29

  %% Unique:
  %%    _31
  _87 = succeeded:body _31
  br ^1

82:
  %% beam_bounds_SUITE.erl:349
  %% Aliased:
  %%    _28
  _32 = match_fail `badmatch`, _28

  %% Unique:
  %%    _32
  _90 = succeeded:body _32
  br ^1

79:
  %% beam_bounds_SUITE.erl:348
  %% Aliased:
  %%    _27
  _33 = match_fail `badmatch`, _27

  %% Unique:
  %%    _33
  _92 = succeeded:body _33
  br ^1

76:
  %% beam_bounds_SUITE.erl:346
  %% Aliased:
  %%    _26
  _34 = match_fail `badmatch`, _26

  %% Unique:
  %%    _34
  _94 = succeeded:body _34
  br ^1

73:
  %% beam_bounds_SUITE.erl:345
  %% Aliased:
  %%    _25
  _35 = match_fail `badmatch`, _25

  %% Unique:
  %%    _35
  _96 = succeeded:body _35
  br ^1

70:
  %% beam_bounds_SUITE.erl:344
  %% Aliased:
  %%    _24
  _36 = match_fail `badmatch`, _24

  %% Unique:
  %%    _36
  _98 = succeeded:body _36
  br ^1

67:
  %% beam_bounds_SUITE.erl:342
  %% Aliased:
  %%    _23
  _37 = match_fail `badmatch`, _23

  %% Unique:
  %%    _37
  _100 = succeeded:body _37
  br ^1

64:
  %% beam_bounds_SUITE.erl:341
  %% Aliased:
  %%    _22
  _38 = match_fail `badmatch`, _22

  %% Unique:
  %%    _38
  _102 = succeeded:body _38
  br ^1

61:
  %% beam_bounds_SUITE.erl:340
  %% Aliased:
  %%    _21
  _39 = match_fail `badmatch`, _21

  %% Unique:
  %%    _39
  _104 = succeeded:body _39
  br ^1

58:
  %% beam_bounds_SUITE.erl:338
  %% Aliased:
  %%    _20
  _40 = match_fail `badmatch`, _20

  %% Unique:
  %%    _40
  _106 = succeeded:body _40
  br ^1

55:
  %% beam_bounds_SUITE.erl:337
  %% Aliased:
  %%    _19
  _41 = match_fail `badmatch`, _19

  %% Unique:
  %%    _41
  _108 = succeeded:body _41
  br ^1

52:
  %% beam_bounds_SUITE.erl:336
  %% Aliased:
  %%    _18
  _42 = match_fail `badmatch`, _18

  %% Unique:
  %%    _42
  _110 = succeeded:body _42
  br ^1

49:
  %% beam_bounds_SUITE.erl:335
  %% Aliased:
  %%    _17
  _43 = match_fail `badmatch`, _17

  %% Unique:
  %%    _43
  _112 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_bounds_SUITE.erl:354
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'any' | {''-inf'', -10..700} | {1, ''+inf'' | 10..100} | {150, 200}
%%    _1 =>
%%     'any' | {''-inf'', 777} | {1, ''+inf'' | 100} | {100, ''+inf''}
function `beam_bounds_SUITE`:`min_bounds`(_0, _1) {
0:
  %% beam_bounds_SUITE.erl:355
  %% Aliased:
  %%    _0, 
  %%    _1
  Result = call (`beam_bounds`:`bounds`/3), `min`, _0, _1

  %% Aliased:
  %%    Result
  _11 = succeeded:body Result
  br _11, ^11, ^1

11:
  %% beam_bounds_SUITE.erl:356
  %% Aliased:
  %%    _0, 
  %%    _1
  _6 = call (`beam_bounds`:`bounds`/3), `min`, _1, _0

  %% Aliased:
  %%    _6
  _12 = succeeded:body _6
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    Result
  _15 = bif:'=:=' _6, Result
  br _15, ^15, ^14

15:
  %% Aliased:
  %%    _6
  ret _6

14:
  %% beam_bounds_SUITE.erl:356
  %% Aliased:
  %%    _6
  _8 = match_fail `badmatch`, _6

  %% Unique:
  %%    _8
  _16 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_bounds_SUITE.erl:358
%% Counter = 113
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`max_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:359
  %% Result type:
  %%    'ok'
  _30 = call (`test_commutative`/2), `max`, `{-12,12}`

  %% Unique:
  %%    _30
  _46 = succeeded:body _30
  br _46, ^46, ^1

46:
  %% beam_bounds_SUITE.erl:361
  _17 = call (`max_bounds`/2), `{'-inf',-10}`, `{1,100}`

  %% Aliased:
  %%    _17
  _47 = succeeded:body _17
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _111 = bif:'=:=' _17, `{1,100}`
  br _111, ^111, ^49

111:
  %% beam_bounds_SUITE.erl:362
  _18 = call (`max_bounds`/2), `{'-inf',1}`, `{1,100}`

  %% Aliased:
  %%    _18
  _50 = succeeded:body _18
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _109 = bif:'=:=' _18, `{1,100}`
  br _109, ^109, ^52

109:
  %% beam_bounds_SUITE.erl:363
  _19 = call (`max_bounds`/2), `{'-inf',50}`, `{1,100}`

  %% Aliased:
  %%    _19
  _53 = succeeded:body _19
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _107 = bif:'=:=' _19, `{1,100}`
  br _107, ^107, ^55

107:
  %% beam_bounds_SUITE.erl:364
  _20 = call (`max_bounds`/2), `{'-inf',500}`, `{1,100}`

  %% Aliased:
  %%    _20
  _56 = succeeded:body _20
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _105 = bif:'=:=' _20, `{1,500}`
  br _105, ^105, ^58

105:
  %% beam_bounds_SUITE.erl:366
  _21 = call (`max_bounds`/2), `{'-inf',-10}`, `{1,'+inf'}`

  %% Aliased:
  %%    _21
  _59 = succeeded:body _21
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _103 = bif:'=:=' _21, `{1,'+inf'}`
  br _103, ^103, ^61

103:
  %% beam_bounds_SUITE.erl:367
  _22 = call (`max_bounds`/2), `{'-inf',1}`, `{1,'+inf'}`

  %% Aliased:
  %%    _22
  _62 = succeeded:body _22
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _101 = bif:'=:=' _22, `{1,'+inf'}`
  br _101, ^101, ^64

101:
  %% beam_bounds_SUITE.erl:368
  _23 = call (`max_bounds`/2), `{'-inf',700}`, `{1,'+inf'}`

  %% Aliased:
  %%    _23
  _65 = succeeded:body _23
  br _65, ^65, ^1

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _99 = bif:'=:=' _23, `{1,'+inf'}`
  br _99, ^99, ^67

99:
  %% beam_bounds_SUITE.erl:370
  _24 = call (`max_bounds`/2), `{1,99}`, `{100,'+inf'}`

  %% Aliased:
  %%    _24
  _68 = succeeded:body _24
  br _68, ^68, ^1

68:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _97 = bif:'=:=' _24, `{100,'+inf'}`
  br _97, ^97, ^70

97:
  %% beam_bounds_SUITE.erl:371
  _25 = call (`max_bounds`/2), `{1,100}`, `{100,'+inf'}`

  %% Aliased:
  %%    _25
  _71 = succeeded:body _25
  br _71, ^71, ^1

71:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _95 = bif:'=:=' _25, `{100,'+inf'}`
  br _95, ^95, ^73

95:
  %% beam_bounds_SUITE.erl:372
  _26 = call (`max_bounds`/2), `{150,200}`, `{100,'+inf'}`

  %% Aliased:
  %%    _26
  _74 = succeeded:body _26
  br _74, ^74, ^1

74:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _93 = bif:'=:=' _26, `{150,'+inf'}`
  br _93, ^93, ^76

93:
  %% beam_bounds_SUITE.erl:374
  _27 = call (`max_bounds`/2), `{1,99}`, `any`

  %% Aliased:
  %%    _27
  _77 = succeeded:body _27
  br _77, ^77, ^1

77:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _91 = bif:'=:=' _27, `{1,'+inf'}`
  br _91, ^91, ^79

91:
  %% beam_bounds_SUITE.erl:375
  _28 = call (`max_bounds`/2), `{10,'+inf'}`, `any`

  %% Aliased:
  %%    _28
  _80 = succeeded:body _28
  br _80, ^80, ^1

80:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _89 = bif:'=:=' _28, `{10,'+inf'}`
  br _89, ^89, ^82

89:
  %% beam_bounds_SUITE.erl:376
  _29 = call (`max_bounds`/2), `{'-inf',70}`, `any`

  %% Aliased:
  %%    _29
  _83 = succeeded:body _29
  br _83, ^83, ^1

83:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _87 = bif:'=:=' _29, `any`
  br _87, ^86, ^85

86:
  %% Result type:
  %%    'ok'
  ret `ok`

85:
  %% beam_bounds_SUITE.erl:376
  %% Aliased:
  %%    _29
  _31 = match_fail `badmatch`, _29

  %% Unique:
  %%    _31
  _88 = succeeded:body _31
  br ^1

82:
  %% beam_bounds_SUITE.erl:375
  %% Aliased:
  %%    _28
  _32 = match_fail `badmatch`, _28

  %% Unique:
  %%    _32
  _90 = succeeded:body _32
  br ^1

79:
  %% beam_bounds_SUITE.erl:374
  %% Aliased:
  %%    _27
  _33 = match_fail `badmatch`, _27

  %% Unique:
  %%    _33
  _92 = succeeded:body _33
  br ^1

76:
  %% beam_bounds_SUITE.erl:372
  %% Aliased:
  %%    _26
  _34 = match_fail `badmatch`, _26

  %% Unique:
  %%    _34
  _94 = succeeded:body _34
  br ^1

73:
  %% beam_bounds_SUITE.erl:371
  %% Aliased:
  %%    _25
  _35 = match_fail `badmatch`, _25

  %% Unique:
  %%    _35
  _96 = succeeded:body _35
  br ^1

70:
  %% beam_bounds_SUITE.erl:370
  %% Aliased:
  %%    _24
  _36 = match_fail `badmatch`, _24

  %% Unique:
  %%    _36
  _98 = succeeded:body _36
  br ^1

67:
  %% beam_bounds_SUITE.erl:368
  %% Aliased:
  %%    _23
  _37 = match_fail `badmatch`, _23

  %% Unique:
  %%    _37
  _100 = succeeded:body _37
  br ^1

64:
  %% beam_bounds_SUITE.erl:367
  %% Aliased:
  %%    _22
  _38 = match_fail `badmatch`, _22

  %% Unique:
  %%    _38
  _102 = succeeded:body _38
  br ^1

61:
  %% beam_bounds_SUITE.erl:366
  %% Aliased:
  %%    _21
  _39 = match_fail `badmatch`, _21

  %% Unique:
  %%    _39
  _104 = succeeded:body _39
  br ^1

58:
  %% beam_bounds_SUITE.erl:364
  %% Aliased:
  %%    _20
  _40 = match_fail `badmatch`, _20

  %% Unique:
  %%    _40
  _106 = succeeded:body _40
  br ^1

55:
  %% beam_bounds_SUITE.erl:363
  %% Aliased:
  %%    _19
  _41 = match_fail `badmatch`, _19

  %% Unique:
  %%    _41
  _108 = succeeded:body _41
  br ^1

52:
  %% beam_bounds_SUITE.erl:362
  %% Aliased:
  %%    _18
  _42 = match_fail `badmatch`, _18

  %% Unique:
  %%    _42
  _110 = succeeded:body _42
  br ^1

49:
  %% beam_bounds_SUITE.erl:361
  %% Aliased:
  %%    _17
  _43 = match_fail `badmatch`, _17

  %% Unique:
  %%    _43
  _112 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_bounds_SUITE.erl:380
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {''-inf'', -10..700} | {1, 99..100} | {10, ''+inf''} | {150, 200}
%%    _1 =>
%%     'any' | {1, ''+inf'' | 100} | {100, ''+inf''}
function `beam_bounds_SUITE`:`max_bounds`(_0, _1) {
0:
  %% beam_bounds_SUITE.erl:381
  %% Aliased:
  %%    _0, 
  %%    _1
  Result = call (`beam_bounds`:`bounds`/3), `max`, _0, _1

  %% Aliased:
  %%    Result
  _11 = succeeded:body Result
  br _11, ^11, ^1

11:
  %% beam_bounds_SUITE.erl:382
  %% Aliased:
  %%    _0, 
  %%    _1
  _6 = call (`beam_bounds`:`bounds`/3), `max`, _1, _0

  %% Aliased:
  %%    _6
  _12 = succeeded:body _6
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    Result
  _15 = bif:'=:=' _6, Result
  br _15, ^15, ^14

15:
  %% Aliased:
  %%    _6
  ret _6

14:
  %% beam_bounds_SUITE.erl:382
  %% Aliased:
  %%    _6
  _8 = match_fail `badmatch`, _6

  %% Unique:
  %%    _8
  _16 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_bounds_SUITE.erl:384
%% Counter = 34
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`abs_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:387
  Seq = call (`lists`:`seq`/2), `-7`, `7`

  %% Aliased:
  %%    Seq
  _32 = succeeded:body Seq
  br _32, ^32, ^1

32:
  %% beam_bounds_SUITE.erl:389
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    Seq
  _29 = call (`'-abs_bounds/1-lc$^0/1-0-'`/2), Seq, Seq

  %% Unique:
  %%    _29
  _33 = succeeded:body _29
  br _33, ^33, ^1

33:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% beam_bounds_SUITE.erl:393
%% Counter = 50
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`abs_bounds_1`(_0) {
0:
  %% beam_bounds_SUITE.erl:394
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0
  _5 = call (`min_max_unary_op`/2), `abs`, _0

  %% Unique:
  %%    _5
  _22 = succeeded:body _5
  br _22, ^48, ^1

48:
  %% beam_bounds_SUITE.erl:395
  %% Aliased:
  %%    _0
  _8 = call (`beam_bounds`:`bounds`/2), `abs`, _0

  %% Aliased:
  %%    _8
  _25 = succeeded:body _8
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _35 = bif:is_tuple _8
  br _35, ^35, ^27

35:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _36 = bif:tuple_size _8

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `2`
  br _37, ^34, ^27

34:
  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _7 = get_tuple_element _5, `0`

  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `0`

  %% beam_bounds_SUITE.erl:397
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _7
  _3 = bif:'=<' _10, _7
  br _3, ^46, ^29

46:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`

  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _6 = get_tuple_element _5, `1`

  %% beam_bounds_SUITE.erl:397
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _6
  _4 = bif:'=<' _6, _9
  br _4, ^31, ^29

31:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% Argument types:
  %%    _5 => {any(), any()}
  %% Unique:
  %%    _5
  _12 = put_list _5, `[]`

  %% Argument types:
  %%    _8 => {any(), any()}
  %%    _12 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _8
  %% Unique:
  %%    _12
  _13 = put_list _8, _12

  %% Argument types:
  %%    _0 => {number(), any()}
  %%    _13 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _13
  _14 = put_list _0, _13

  %% Argument types:
  %%    _14 => nonempty_list({any(), any()})
  %% Unique:
  %%    _14
  _15 = put_list `bif_abs`, _14

  %% beam_bounds_SUITE.erl:400
  %% Unique:
  %%    _15
  _16 = call (`io`:`format`/2), `"~p(~p) evaluates to ~p; should be ~p\n"`, _15

  %% Aliased:
  %%    _16
  _32 = succeeded:body _16
  br _32, ^32, ^1

32:
  %% beam_bounds_SUITE.erl:402
  _17 = call (`ct`:`fail`/1), `bad_min_or_max`

  %% Aliased:
  %%    _17
  _33 = succeeded:body _17
  br _33, ^33, ^1

33:
  %% Aliased:
  %%    _17
  ret _17

27:
  %% beam_bounds_SUITE.erl:395
  %% Aliased:
  %%    _8
  _18 = match_fail `badmatch`, _8

  %% Unique:
  %%    _18
  _38 = succeeded:body _18
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_bounds_SUITE.erl:405
%% Counter = 86
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`infer_lt_gt_bounds`(_0) {
0:
  %% beam_bounds_SUITE.erl:406
  %% Result type:
  %%    'any' | {any(), any()}
  _12 = call (`infer_lt_gt`/2), `{'-inf',0}`, `{'-inf',0}`

  %% Aliased:
  %%    _12
  _34 = succeeded:body _12
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _12 => 'any' | {any(), any()}
  %% Aliased:
  %%    _12
  _84 = bif:'=:=' _12, `{{'-inf',-1},{'-inf',0}}`
  br _84, ^84, ^36

84:
  %% beam_bounds_SUITE.erl:407
  %% Result type:
  %%    'any' | {any(), any()}
  _13 = call (`infer_lt_gt`/2), `{'-inf',1}`, `{'-inf',2}`

  %% Aliased:
  %%    _13
  _37 = succeeded:body _13
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    _13 => 'any' | {any(), any()}
  %% Aliased:
  %%    _13
  _82 = bif:'=:=' _13, `{{'-inf',1},{'-inf',2}}`
  br _82, ^82, ^39

82:
  %% beam_bounds_SUITE.erl:408
  %% Result type:
  %%    'any' | {any(), any()}
  _14 = call (`infer_lt_gt`/2), `{'-inf',1}`, `{'-inf',-1}`

  %% Aliased:
  %%    _14
  _40 = succeeded:body _14
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _14 => 'any' | {any(), any()}
  %% Aliased:
  %%    _14
  _80 = bif:'=:=' _14, `{{'-inf',-2},{'-inf',-1}}`
  br _80, ^80, ^42

80:
  %% beam_bounds_SUITE.erl:409
  %% Result type:
  %%    'any' | {any(), any()}
  _15 = call (`infer_lt_gt`/2), `{'-inf',2}`, `{1,3}`

  %% Aliased:
  %%    _15
  _43 = succeeded:body _15
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _15 => 'any' | {any(), any()}
  %% Aliased:
  %%    _15
  _78 = bif:'=:=' _15, `{{'-inf',2},{1,3}}`
  br _78, ^78, ^45

78:
  %% beam_bounds_SUITE.erl:411
  %% Result type:
  %%    'any' | {any(), any()}
  _16 = call (`infer_lt_gt`/2), `{'-inf',2}`, `{3,10}`

  %% Aliased:
  %%    _16
  _46 = succeeded:body _16
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _16 => 'any' | {any(), any()}
  %% Aliased:
  %%    _16
  _76 = bif:'=:=' _16, `any`
  br _76, ^75, ^48

75:
  %% beam_bounds_SUITE.erl:412
  %% Result type:
  %%    'any' | {any(), any()}
  _17 = call (`infer_lt_gt`/2), `{'-inf',2}`, `{3,'+inf'}`

  %% Aliased:
  %%    _17
  _49 = succeeded:body _17
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _17 => 'any' | {any(), any()}
  %% Aliased:
  %%    _17
  _73 = bif:'=:=' _17, `any`
  br _73, ^72, ^51

72:
  %% beam_bounds_SUITE.erl:414
  %% Result type:
  %%    'any' | {any(), any()}
  _18 = call (`infer_lt_gt`/2), `{0,10}`, `{'-inf',84}`

  %% Aliased:
  %%    _18
  _52 = succeeded:body _18
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    _18 => 'any' | {any(), any()}
  %% Aliased:
  %%    _18
  _70 = bif:'=:=' _18, `{{0,10},{1,84}}`
  br _70, ^70, ^54

70:
  %% beam_bounds_SUITE.erl:415
  %% Result type:
  %%    'any' | {any(), any()}
  _19 = call (`infer_lt_gt`/2), `{0,'+inf'}`, `{'-inf',84}`

  %% Aliased:
  %%    _19
  _55 = succeeded:body _19
  br _55, ^55, ^1

55:
  %% Argument types:
  %%    _19 => 'any' | {any(), any()}
  %% Aliased:
  %%    _19
  _68 = bif:'=:=' _19, `{{0,83},{1,84}}`
  br _68, ^68, ^57

68:
  %% beam_bounds_SUITE.erl:417
  %% Result type:
  %%    'any' | {any(), any()}
  _20 = call (`infer_lt_gt`/2), `{0,'+inf'}`, `{42,'+inf'}`

  %% Aliased:
  %%    _20
  _58 = succeeded:body _20
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    _20 => 'any' | {any(), any()}
  %% Aliased:
  %%    _20
  _66 = bif:'=:=' _20, `{{0,'+inf'},{42,'+inf'}}`
  br _66, ^66, ^60

66:
  %% beam_bounds_SUITE.erl:418
  %% Result type:
  %%    'any' | {any(), any()}
  _21 = call (`infer_lt_gt`/2), `{100,'+inf'}`, `{42,'+inf'}`

  %% Aliased:
  %%    _21
  _61 = succeeded:body _21
  br _61, ^61, ^1

61:
  %% Argument types:
  %%    _21 => 'any' | {any(), any()}
  %% Aliased:
  %%    _21
  _64 = bif:'=:=' _21, `{{100,'+inf'},{101,'+inf'}}`
  br _64, ^64, ^63

64:
  %% Result type:
  %%    'ok'
  ret `ok`

63:
  %% beam_bounds_SUITE.erl:418
  %% Aliased:
  %%    _21
  _22 = match_fail `badmatch`, _21

  %% Unique:
  %%    _22
  _65 = succeeded:body _22
  br ^1

60:
  %% beam_bounds_SUITE.erl:417
  %% Aliased:
  %%    _20
  _23 = match_fail `badmatch`, _20

  %% Unique:
  %%    _23
  _67 = succeeded:body _23
  br ^1

57:
  %% beam_bounds_SUITE.erl:415
  %% Aliased:
  %%    _19
  _24 = match_fail `badmatch`, _19

  %% Unique:
  %%    _24
  _69 = succeeded:body _24
  br ^1

54:
  %% beam_bounds_SUITE.erl:414
  %% Aliased:
  %%    _18
  _25 = match_fail `badmatch`, _18

  %% Unique:
  %%    _25
  _71 = succeeded:body _25
  br ^1

51:
  %% beam_bounds_SUITE.erl:412
  %% Aliased:
  %%    _17
  _26 = match_fail `badmatch`, _17

  %% Unique:
  %%    _26
  _74 = succeeded:body _26
  br ^1

48:
  %% beam_bounds_SUITE.erl:411
  %% Aliased:
  %%    _16
  _27 = match_fail `badmatch`, _16

  %% Unique:
  %%    _27
  _77 = succeeded:body _27
  br ^1

45:
  %% beam_bounds_SUITE.erl:409
  %% Aliased:
  %%    _15
  _28 = match_fail `badmatch`, _15

  %% Unique:
  %%    _28
  _79 = succeeded:body _28
  br ^1

42:
  %% beam_bounds_SUITE.erl:408
  %% Aliased:
  %%    _14
  _29 = match_fail `badmatch`, _14

  %% Unique:
  %%    _29
  _81 = succeeded:body _29
  br ^1

39:
  %% beam_bounds_SUITE.erl:407
  %% Aliased:
  %%    _13
  _30 = match_fail `badmatch`, _13

  %% Unique:
  %%    _30
  _83 = succeeded:body _30
  br ^1

36:
  %% beam_bounds_SUITE.erl:406
  %% Aliased:
  %%    _12
  _31 = match_fail `badmatch`, _12

  %% Unique:
  %%    _31
  _85 = succeeded:body _31
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_bounds_SUITE.erl:424
%% Counter = 56
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {''-inf'', 0..2} | {0, ''+inf'' | 10} | {100, ''+inf''}
%%    _1 =>
%%     {''-inf'', -1..84} | {1, 3} | {3, ''+inf'' | 10} | {42, ''+inf''}
function `beam_bounds_SUITE`:`infer_lt_gt`(_0, _1) {
0:
  %% beam_bounds_SUITE.erl:425
  %% Aliased:
  %%    _0, 
  %%    _1
  _13 = call (`beam_bounds`:`infer_relop_types`/3), `'>'`, _1, _0

  %% Aliased:
  %%    _13
  _24 = succeeded:body _13
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _39 = bif:is_tuple _13
  br _39, ^39, ^27

39:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _40 = bif:tuple_size _13

  %% Argument types:
  %%    _40 => 0..16777215
  %% Unique:
  %%    _40
  _41 = bif:'=:=' _40, `2`
  br _41, ^55, ^26

55:
  %% beam_bounds_SUITE.erl:427
  %% Aliased:
  %%    _0, 
  %%    _1
  _7 = call (`beam_bounds`:`infer_relop_types`/3), `'<'`, _0, _1

  %% Aliased:
  %%    _7
  _28 = succeeded:body _7
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _34 = bif:is_tuple _7
  br _34, ^34, ^30

34:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _35 = bif:tuple_size _7

  %% Argument types:
  %%    _35 => 0..16777215
  %% Unique:
  %%    _35
  _36 = bif:'=:=' _35, `2`
  br _36, ^33, ^30

33:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _17 = get_tuple_element _7, `0`

  %% beam_bounds_SUITE.erl:427
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14, 
  %%    _17
  _10 = bif:'=:=' _17, _14
  br _10, ^53, ^30

53:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _16 = get_tuple_element _7, `1`

  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% beam_bounds_SUITE.erl:427
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15, 
  %%    _16
  _11 = bif:'=:=' _16, _15
  br _11, ^32, ^30

32:
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _7
  ret _7

30:
  %% beam_bounds_SUITE.erl:427
  %% Aliased:
  %%    _7
  _20 = match_fail `badmatch`, _7

  %% Unique:
  %%    _20
  _37 = succeeded:body _20
  br ^1

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _49 = bif:'=:=' _13, `any`
  br _49, ^48, ^26

48:
  %% beam_bounds_SUITE.erl:429
  %% Aliased:
  %%    _0, 
  %%    _1
  _12 = call (`beam_bounds`:`infer_relop_types`/3), `'<'`, _0, _1

  %% Aliased:
  %%    _12
  _42 = succeeded:body _12
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _46 = bif:'=:=' _12, `any`
  br _46, ^45, ^44

45:
  %% Result type:
  %%    'any'
  %% Aliased:
  %%    _12
  ret _12

44:
  %% beam_bounds_SUITE.erl:429
  %% Aliased:
  %%    _12
  _19 = match_fail `badmatch`, _12

  %% Unique:
  %%    _19
  _47 = succeeded:body _19
  br ^1

26:
  %% beam_bounds_SUITE.erl:425
  %% Aliased:
  %%    _13
  _21 = match_fail `case_clause`, _13

  %% Unique:
  %%    _21
  _50 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% beam_bounds_SUITE.erl:432
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''band'' | ''bor'' | ''bxor''
function `beam_bounds_SUITE`:`test_commutative`(_0) {
0:
  %% beam_bounds_SUITE.erl:433
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _0
  _2 = call (`test_commutative`/2), _0, `{0,32}`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:435
%% Counter = 79
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     {-12, 12} | {0, 32}
function `beam_bounds_SUITE`:`test_commutative`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => {-12, 12} | {0, 32}
  %% Unique:
  %%    _1
  _32 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {-12, 12} | {0, 32}
  %% Unique:
  %%    _1
  _31 = get_tuple_element _1, `1`

  %% beam_bounds_SUITE.erl:436
  %% Aliased:
  %%    _32
  %% Unique:
  %%    _31
  Seq = call (`lists`:`seq`/2), _32, _31

  %% Aliased:
  %%    Seq
  _71 = succeeded:body Seq
  br _71, ^71, ^1

71:
  %% beam_bounds_SUITE.erl:438
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _32, 
  %%    Seq
  %% Unique:
  %%    _0
  _66 = call (`'-test_commutative/2-lc$^0/1-0-'`/4), Seq, _0, _32, Seq

  %% Unique:
  %%    _66
  _72 = succeeded:body _66
  br _72, ^72, ^1

72:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _68 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _68
}

%% beam_bounds_SUITE.erl:445
%% Counter = 81
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     {number(), any()}
%%    _2 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`test_commutative_1`(_0, _1, _2) {
0:
  %% beam_bounds_SUITE.erl:446
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _15 = call (`min_max_op`/3), _0, _1, _2

  %% Unique:
  %%    _15
  _38 = succeeded:body _15
  br _38, ^78, ^1

78:
  %% beam_bounds_SUITE.erl:447
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _18 = call (`beam_bounds`:`bounds`/3), _0, _1, _2

  %% Aliased:
  %%    _18
  _41 = succeeded:body _18
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _61 = bif:is_tuple _18
  br _61, ^61, ^43

61:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _62 = bif:tuple_size _18

  %% Argument types:
  %%    _62 => 0..16777215
  %% Unique:
  %%    _62
  _63 = bif:'=:=' _62, `2`
  br _63, ^79, ^43

79:
  %% beam_bounds_SUITE.erl:448
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _21 = call (`beam_bounds`:`bounds`/3), _0, _2, _1

  %% Aliased:
  %%    _21
  _44 = succeeded:body _21
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _56 = bif:is_tuple _21
  br _56, ^56, ^46

56:
  %% Argument types:
  %%    _21 => {...}
  %% Aliased:
  %%    _21
  _57 = bif:tuple_size _21

  %% Argument types:
  %%    _57 => 0..16777215
  %% Unique:
  %%    _57
  _58 = bif:'=:=' _57, `2`
  br _58, ^55, ^46

55:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _20 = get_tuple_element _18, `0`

  %% Argument types:
  %%    _21 => {any(), any()}
  %% Aliased:
  %%    _21
  _23 = get_tuple_element _21, `0`

  %% beam_bounds_SUITE.erl:448
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20, 
  %%    _23
  _13 = bif:'=:=' _23, _20
  br _13, ^76, ^46

76:
  %% Argument types:
  %%    _21 => {any(), any()}
  %% Aliased:
  %%    _21
  _22 = get_tuple_element _21, `1`

  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _19 = get_tuple_element _18, `1`

  %% beam_bounds_SUITE.erl:448
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19, 
  %%    _22
  _14 = bif:'=:=' _22, _19
  br _14, ^48, ^46

48:
  %% Argument types:
  %%    _15 => {any(), any()}
  %% Unique:
  %%    _15
  _17 = get_tuple_element _15, `0`

  %% beam_bounds_SUITE.erl:450
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  %% Unique:
  %%    _17
  _6 = bif:'=<' _20, _17
  br _6, ^72, ^50

72:
  %% Argument types:
  %%    _15 => {any(), any()}
  %% Unique:
  %%    _15
  _16 = get_tuple_element _15, `1`

  %% beam_bounds_SUITE.erl:450
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _16
  _7 = bif:'=<' _16, _19
  br _7, ^52, ^50

52:
  %% Result type:
  %%    'ok'
  ret `ok`

50:
  %% Argument types:
  %%    _15 => {any(), any()}
  %% Unique:
  %%    _15
  _26 = put_list _15, `[]`

  %% Argument types:
  %%    _18 => {any(), any()}
  %%    _26 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _18
  %% Unique:
  %%    _26
  _27 = put_list _18, _26

  %% Argument types:
  %%    _2 => {number(), any()}
  %%    _27 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _27
  _28 = put_list _2, _27

  %% Argument types:
  %%    _1 => {number(), any()}
  %%    _28 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _28
  _29 = put_list _1, _28

  %% Argument types:
  %%    _0 => atom()
  %%    _29 => nonempty_list({any(), any()})
  %% Unique:
  %%    _0, 
  %%    _29
  _30 = put_list _0, _29

  %% beam_bounds_SUITE.erl:453
  %% Unique:
  %%    _30
  _31 = call (`io`:`format`/2), `"~p(~p, ~p) evaluates to ~p; should be ~p\n"`, _30

  %% Aliased:
  %%    _31
  _53 = succeeded:body _31
  br _53, ^53, ^1

53:
  %% beam_bounds_SUITE.erl:455
  _32 = call (`ct`:`fail`/1), `bad_min_or_max`

  %% Aliased:
  %%    _32
  _54 = succeeded:body _32
  br _54, ^54, ^1

54:
  %% Aliased:
  %%    _32
  ret _32

46:
  %% beam_bounds_SUITE.erl:448
  %% Aliased:
  %%    _21
  _33 = match_fail `badmatch`, _21

  %% Unique:
  %%    _33
  _59 = succeeded:body _33
  br ^1

43:
  %% beam_bounds_SUITE.erl:447
  %% Aliased:
  %%    _18
  _34 = match_fail `badmatch`, _18

  %% Unique:
  %%    _34
  _64 = succeeded:body _34
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% beam_bounds_SUITE.erl:458
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''div'' | ''rem''
%%    _1 =>
%%     {-12, 12}
function `beam_bounds_SUITE`:`test_noncommutative`(_0, _1) {
0:
  %% beam_bounds_SUITE.erl:459
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _0
  _2 = call (`test_noncommutative`/3), _0, _1, `{-12,12}`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:461
%% Counter = 84
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _1 =>
%%     {-12, 12}
%%    _2 =>
%%     {-12, 12} | {-7, 7} | {0, 7}
function `beam_bounds_SUITE`:`test_noncommutative`(_0, _1, _2) {
0:
  %% beam_bounds_SUITE.erl:462
  Seq1 = call (`lists`:`seq`/2), `-12`, `12`

  %% Aliased:
  %%    Seq1
  _71 = succeeded:body Seq1
  br _71, ^71, ^1

71:
  %% Argument types:
  %%    _2 => {-12, 12} | {-7, 7} | {0, 7}
  %% Unique:
  %%    _2
  _35 = get_tuple_element _2, `0`

  %% Argument types:
  %%    _2 => {-12, 12} | {-7, 7} | {0, 7}
  %% Unique:
  %%    _2
  _34 = get_tuple_element _2, `1`

  %% beam_bounds_SUITE.erl:463
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _34
  Seq2 = call (`lists`:`seq`/2), _35, _34

  %% Aliased:
  %%    Seq2
  _72 = succeeded:body Seq2
  br _72, ^72, ^1

72:
  %% beam_bounds_SUITE.erl:465
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _35, 
  %%    Seq1, 
  %%    Seq2
  %% Unique:
  %%    _0
  _66 = call (`'-test_noncommutative/3-lc$^0/1-0-'`/6), Seq1, _0, `-12`, _35, Seq1, Seq2

  %% Unique:
  %%    _66
  _73 = succeeded:body _66
  br _73, ^73, ^1

73:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _68 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _68
}

%% beam_bounds_SUITE.erl:471
%% Counter = 71
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _1 =>
%%     {number(), any()}
%%    _2 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`test_noncommutative_1`(_0, _1, _2) {
0:
  %% beam_bounds_SUITE.erl:472
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _13 = call (`min_max_op`/3), _0, _1, _2

  %% Unique:
  %%    _13
  _34 = succeeded:body _13
  br _34, ^69, ^1

69:
  %% beam_bounds_SUITE.erl:473
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _16 = call (`beam_bounds`:`bounds`/3), _0, _1, _2

  %% Aliased:
  %%    _16
  _37 = succeeded:body _16
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _47 = bif:is_tuple _16
  br _47, ^47, ^40

47:
  %% Argument types:
  %%    _16 => {...}
  %% Aliased:
  %%    _16
  _48 = bif:tuple_size _16

  %% Argument types:
  %%    _48 => 0..16777215
  %% Unique:
  %%    _48
  _49 = bif:'=:=' _48, `2`
  br _49, ^46, ^39

46:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Unique:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% Argument types:
  %%    _16 => {any(), any()}
  %% Aliased:
  %%    _16
  _20 = get_tuple_element _16, `0`

  %% beam_bounds_SUITE.erl:479
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  %% Unique:
  %%    _15
  _5 = bif:'=<' _20, _15
  br _5, ^67, ^41

67:
  %% Argument types:
  %%    _16 => {any(), any()}
  %% Aliased:
  %%    _16
  _19 = get_tuple_element _16, `1`

  %% Argument types:
  %%    _13 => {any(), any()}
  %% Unique:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% beam_bounds_SUITE.erl:479
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _14
  _6 = bif:'=<' _14, _19
  br _6, ^43, ^41

43:
  %% Result type:
  %%    'ok'
  ret `ok`

41:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Unique:
  %%    _13
  _22 = put_list _13, `[]`

  %% Argument types:
  %%    _16 => {any(), any()}
  %%    _22 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _16
  %% Unique:
  %%    _22
  _23 = put_list _16, _22

  %% Argument types:
  %%    _2 => {number(), any()}
  %%    _23 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _23
  _24 = put_list _2, _23

  %% Argument types:
  %%    _1 => {number(), any()}
  %%    _24 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _24
  _25 = put_list _1, _24

  %% Argument types:
  %%    _0 => ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
  %%    _25 => nonempty_list({any(), any()})
  %% Unique:
  %%    _0, 
  %%    _25
  _26 = put_list _0, _25

  %% beam_bounds_SUITE.erl:482
  %% Unique:
  %%    _26
  _28 = call (`io`:`format`/2), `"~p(~p, ~p) evaluates to ~p; should be ~p\n"`, _26

  %% Aliased:
  %%    _28
  _44 = succeeded:body _28
  br _44, ^44, ^1

44:
  %% beam_bounds_SUITE.erl:484
  _29 = call (`ct`:`fail`/1), `bad_min_or_max`

  %% Aliased:
  %%    _29
  _45 = succeeded:body _29
  br _45, ^45, ^1

45:
  %% Aliased:
  %%    _29
  ret _29

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _58 = bif:'=:=' _16, `any`
  br _58, ^57, ^39

57:
  %% Argument types:
  %%    
  switch _0, ^51, [
    { `'div'`, ^55 },
    { `'rem'`, ^55 }
  ]

55:
  %% Argument types:
  %%    _2 => {number(), any()}
  %% Aliased:
  %%    _2
  _53 = bif:'=:=' _2, `{0,0}`
  br _53, ^53, ^51

53:
  %% Result type:
  %%    'ok'
  ret `ok`

51:
  %% Argument types:
  %%    _0 => ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
  %%    _2 => {number(), any()}
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _0
  _4 = put_tuple _0, _2

  %% beam_bounds_SUITE.erl:475
  %% Unique:
  %%    _4
  _27 = match_fail `case_clause`, _4

  %% Unique:
  %%    _27
  _56 = succeeded:body _27
  br ^1

39:
  %% beam_bounds_SUITE.erl:473
  %% Aliased:
  %%    _16
  _30 = match_fail `case_clause`, _16

  %% Unique:
  %%    _30
  _59 = succeeded:body _30
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_bounds_SUITE.erl:487
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     {number(), any()}
%%    _2 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`min_max_op`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _2 => {number(), any()}
  %% Aliased:
  %%    _2
  _11 = get_tuple_element _2, `0`

  %% Argument types:
  %%    _2 => {number(), any()}
  %% Aliased:
  %%    _2
  _10 = get_tuple_element _2, `1`

  %% Argument types:
  %%    _1 => {number(), any()}
  %% Aliased:
  %%    _1
  _9 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {number(), any()}
  %% Aliased:
  %%    _1
  _8 = get_tuple_element _1, `1`

  %% beam_bounds_SUITE.erl:488
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _8, 
  %%    _10
  %% Unique:
  %%    _9, 
  %%    _11
  _12 = call (`min_max_op_1`/6), _0, _9, _8, _11, _10, `{infinity,-16777216}`

  %% Unique:
  %%    _12
  _17 = succeeded:body _12
  br _17, ^17, ^1

17:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _12
  ret _12

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_bounds_SUITE.erl:490
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     number()
%%    _3 =>
%%     number()
%%    _5 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`min_max_op_1`(_0, _1, _2, _3, _4, _5) {
0:
  %% Argument types:
  %%    _1 => number()
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _1
  _23 = bif:'=<' _1, _2
  br _23, ^23, ^22

23:
  %% beam_bounds_SUITE.erl:491
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3, 
  %%    _4
  %% Unique:
  %%    _5
  _18 = call (`min_max_op_2`/5), _0, _1, _3, _4, _5

  %% Unique:
  %%    _18
  _24 = succeeded:body _18
  br _24, ^24, ^1

24:
  %% beam_bounds_SUITE.erl:492
  %% Argument types:
  %%    _1 => number()
  %% Unique:
  %%    _1
  _7 = bif:'+' _1, `1`

  %% Unique:
  %%    _7
  _25 = succeeded:body _7
  br _25, ^25, ^1

25:
  %% beam_bounds_SUITE.erl:492
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _2, 
  %%    _3, 
  %%    _4
  %% Unique:
  %%    _7, 
  %%    _18
  _19 = call (`min_max_op_1`/6), _0, _7, _2, _3, _4, _18

  %% Unique:
  %%    _19
  _26 = succeeded:body _19
  br _26, ^26, ^1

26:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20

22:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _5
  ret _5
}

%% beam_bounds_SUITE.erl:496
%% Counter = 73
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     number()
%%    _2 =>
%%     number()
%%    _4 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`min_max_op_2`(_0, _1, _2, _3, _4) {
0:
  %% Argument types:
  %%    _2 => number()
  %% Unique:
  %%    _2
  _46 = bif:'=:=' _2, `0`
  br _46, ^45, ^41

45:
  %% Argument types:
  %%    
  switch _0, ^41, [
    { `'div'`, ^43 },
    { `'rem'`, ^43 }
  ]

43:
  %% beam_bounds_SUITE.erl:497
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3
  %% Unique:
  %%    _4
  _35 = call (`min_max_op_2`/5), _0, _1, `1`, _3, _4

  %% Unique:
  %%    _35
  _44 = succeeded:body _35
  br _44, ^44, ^1

44:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _35
  ret _35

41:
  %% Argument types:
  %%    _2 => number()
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _2
  _48 = bif:'=<' _2, _3
  br _48, ^48, ^47

48:
  %% beam_bounds_SUITE.erl:499
  %% Aliased:
  %%    _1, 
  %%    _2
  Val = call (`erlang`:_0/2), _1, _2

  %% Aliased:
  %%    Val
  _49 = succeeded:body Val
  br _49, ^59, ^1

59:
  %% Argument types:
  %%    _4 => {any(), any()}
  %% Unique:
  %%    _4
  _31 = get_tuple_element _4, `0`

  %% Argument types:
  %%    _4 => {any(), any()}
  %% Unique:
  %%    _4
  _30 = get_tuple_element _4, `1`

  %% beam_bounds_SUITE.erl:501
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _31
  _8 = bif:'=<' _31, Val
  br _8, ^66, ^52

66:
  %% beam_bounds_SUITE.erl:501
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _30
  _9 = bif:'=<' Val, _30
  br _9, ^54, ^52

54:
  %% beam_bounds_SUITE.erl:502
  %% Argument types:
  %%    _2 => number()
  %% Unique:
  %%    _2
  _10 = bif:'+' _2, `1`

  %% Unique:
  %%    _10
  _55 = succeeded:body _10
  br _55, ^55, ^1

55:
  %% beam_bounds_SUITE.erl:502
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3
  %% Unique:
  %%    _4, 
  %%    _10
  _36 = call (`min_max_op_2`/5), _0, _1, _10, _3, _4

  %% Unique:
  %%    _36
  _56 = succeeded:body _36
  br _56, ^56, ^1

56:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _36
  ret _36

52:
  %% beam_bounds_SUITE.erl:504
  %% Argument types:
  %%    _2 => number()
  %% Unique:
  %%    _2
  _13 = bif:'+' _2, `1`

  %% Unique:
  %%    _13
  _57 = succeeded:body _13
  br _57, ^57, ^1

57:
  %% beam_bounds_SUITE.erl:504
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _31
  _12 = bif:min _31, Val

  %% beam_bounds_SUITE.erl:504
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _30
  _11 = bif:max _30, Val

  %% Argument types:
  %%    
  %% Unique:
  %%    _11, 
  %%    _12
  _33 = put_tuple _12, _11

  %% beam_bounds_SUITE.erl:504
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3
  %% Unique:
  %%    _13, 
  %%    _33
  _37 = call (`min_max_op_2`/5), _0, _1, _13, _3, _33

  %% Unique:
  %%    _37
  _58 = succeeded:body _37
  br _58, ^58, ^1

58:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _37
  ret _37

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39

47:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _4
  ret _4
}

%% beam_bounds_SUITE.erl:509
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'abs' | ''bnot''
%%    _1 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`min_max_unary_op`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => {number(), any()}
  %% Aliased:
  %%    _1
  _7 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {number(), any()}
  %% Aliased:
  %%    _1
  _6 = get_tuple_element _1, `1`

  %% beam_bounds_SUITE.erl:510
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _0, 
  %%    _7
  _8 = call (`min_max_unary_op_1`/4), _0, _7, _6, `{infinity,-16777216}`

  %% Unique:
  %%    _8
  _13 = succeeded:body _8
  br _13, ^13, ^1

13:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _8
  ret _8

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_bounds_SUITE.erl:512
%% Counter = 45
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'abs' | ''bnot''
%%    _1 =>
%%     number()
%%    _3 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`min_max_unary_op_1`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _1 => number()
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _1
  _26 = bif:'=<' _1, _2
  br _26, ^26, ^25

26:
  %% beam_bounds_SUITE.erl:513
  %% Aliased:
  %%    _1
  Val = call (`erlang`:_0/1), _1

  %% Aliased:
  %%    Val
  _27 = succeeded:body Val
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _3 => {any(), any()}
  %% Unique:
  %%    _3
  _18 = get_tuple_element _3, `0`

  %% Argument types:
  %%    _3 => {any(), any()}
  %% Unique:
  %%    _3
  _17 = get_tuple_element _3, `1`

  %% beam_bounds_SUITE.erl:515
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _18
  _5 = bif:'=<' _18, Val
  br _5, ^42, ^29

42:
  %% beam_bounds_SUITE.erl:515
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _17
  _6 = bif:'=<' Val, _17
  br _6, ^31, ^29

31:
  %% beam_bounds_SUITE.erl:516
  %% Argument types:
  %%    _1 => number()
  %% Unique:
  %%    _1
  _7 = bif:'+' _1, `1`

  %% Unique:
  %%    _7
  _32 = succeeded:body _7
  br _32, ^32, ^1

32:
  %% beam_bounds_SUITE.erl:516
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _0, 
  %%    _3, 
  %%    _7
  _21 = call (`min_max_unary_op_1`/4), _0, _7, _2, _3

  %% Unique:
  %%    _21
  _33 = succeeded:body _21
  br _33, ^33, ^1

33:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _21
  ret _21

29:
  %% beam_bounds_SUITE.erl:518
  %% Argument types:
  %%    _1 => number()
  %% Unique:
  %%    _1
  _10 = bif:'+' _1, `1`

  %% Unique:
  %%    _10
  _34 = succeeded:body _10
  br _34, ^34, ^1

34:
  %% beam_bounds_SUITE.erl:518
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _18
  _9 = bif:min _18, Val

  %% beam_bounds_SUITE.erl:518
  %% Argument types:
  %%    
  %% Aliased:
  %%    Val
  %% Unique:
  %%    _17
  _8 = bif:max _17, Val

  %% Argument types:
  %%    
  %% Unique:
  %%    _8, 
  %%    _9
  _20 = put_tuple _9, _8

  %% beam_bounds_SUITE.erl:518
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _0, 
  %%    _10, 
  %%    _20
  _22 = call (`min_max_unary_op_1`/4), _0, _10, _2, _20

  %% Unique:
  %%    _22
  _35 = succeeded:body _22
  br _35, ^35, ^1

35:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _22
  ret _22

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23

25:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _3
  ret _3
}

%% beam_bounds_SUITE.erl:523
%% Counter = 56
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`test_relop`(_0) {
0:
  %% beam_bounds_SUITE.erl:525
  Seq = call (`lists`:`seq`/2), `0`, `15`

  %% Aliased:
  %%    Seq
  _54 = succeeded:body Seq
  br _54, ^54, ^1

54:
  %% beam_bounds_SUITE.erl:527
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _0
  _51 = call (`'-test_relop/1-lc$^0/1-0-'`/3), Seq, _0, Seq

  %% Unique:
  %%    _51
  _55 = succeeded:body _51
  br _55, ^55, ^1

55:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _52 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _52
}

%% beam_bounds_SUITE.erl:533
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
%%    _1 =>
%%     {any(), any()}
%%    _2 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`test_relop_1`(_0, _1, _2) {
0:
  %% beam_bounds_SUITE.erl:534
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  Bool = call (`rel_op`/3), _0, _1, _2

  %% Aliased:
  %%    Bool
  _20 = succeeded:body Bool
  br _20, ^20, ^1

20:
  %% beam_bounds_SUITE.erl:535
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _9 = call (`beam_bounds`:`relop`/3), _0, _1, _2

  %% Aliased:
  %%    _9
  _21 = succeeded:body _9
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9, 
  %%    Bool
  _24 = bif:'=:=' _9, Bool
  br _24, ^24, ^23

24:
  %% beam_bounds_SUITE.erl:537
  %% Result type:
  %%    'any' | 'none' | 'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2, 
  %%    Bool
  _15 = call (`test_infer_relop`/4), Bool, _0, _1, _2

  %% Aliased:
  %%    _15
  _25 = succeeded:body _15
  br _25, ^25, ^1

25:
  %% Result type:
  %%    'any' | 'none' | 'ok'
  %% Aliased:
  %%    _15
  ret _15

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Bool
  _10 = put_list Bool, `[]`

  %% Argument types:
  %%    _10 => nonempty_list(any())
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _10
  _11 = put_list _9, _10

  %% Argument types:
  %%    _2 => {any(), any()}
  %%    _11 => nonempty_list(any())
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _11
  _12 = put_list _2, _11

  %% Argument types:
  %%    _1 => {any(), any()}
  %%    _12 => nonempty_list(any())
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _12
  _13 = put_list _1, _12

  %% Argument types:
  %%    _0 => ''<'' | ''=<'' | ''>'' | ''>=''
  %%    _13 => nonempty_list(any())
  %% Unique:
  %%    _0, 
  %%    _13
  _14 = put_list _0, _13

  %% beam_bounds_SUITE.erl:539
  %% Unique:
  %%    _14
  _16 = call (`io`:`format`/2), `"~p(~p, ~p) evaluates to ~p; should be ~p\n"`, _14

  %% Aliased:
  %%    _16
  _26 = succeeded:body _16
  br _26, ^26, ^1

26:
  %% beam_bounds_SUITE.erl:541
  _17 = call (`ct`:`fail`/1), `bad_bool_result`

  %% Aliased:
  %%    _17
  _27 = succeeded:body _17
  br _27, ^27, ^1

27:
  %% Aliased:
  %%    _17
  ret _17

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% beam_bounds_SUITE.erl:544
%% Counter = 171
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
%%    _2 =>
%%     {any(), any()}
%%    _3 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`test_infer_relop`(_0, _1, _2, _3) {
0:
  switch _0, ^103, [
    { `false`, ^155 },
    { `'maybe'`, ^169 },
    { `true`, ^154 }
  ]

154:
  %% beam_bounds_SUITE.erl:545
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3
  _40 = call (`beam_bounds`:`infer_relop_types`/3), _1, _2, _3

  %% Aliased:
  %%    _40
  _104 = succeeded:body _40
  br _104, ^104, ^1

104:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _108 = bif:'=:=' _40, `any`
  br _108, ^107, ^106

107:
  %% Result type:
  %%    'any'
  %% Aliased:
  %%    _40
  ret _40

106:
  %% beam_bounds_SUITE.erl:545
  %% Aliased:
  %%    _40
  _99 = match_fail `badmatch`, _40

  %% Unique:
  %%    _99
  _109 = succeeded:body _99
  br ^1

169:
  %% beam_bounds_SUITE.erl:549
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3
  _52 = call (`beam_bounds`:`infer_relop_types`/3), _1, _2, _3

  %% Aliased:
  %%    _52
  _116 = succeeded:body _52
  br _116, ^116, ^1

116:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _141 = bif:is_tuple _52
  br _141, ^141, ^118

141:
  %% Argument types:
  %%    _52 => {...}
  %% Aliased:
  %%    _52
  _142 = bif:tuple_size _52

  %% Argument types:
  %%    _142 => 0..16777215
  %% Unique:
  %%    _142
  _143 = bif:'=:=' _142, `2`
  br _143, ^140, ^118

140:
  %% Argument types:
  %%    _52 => {any(), any()}
  %% Aliased:
  %%    _52
  _54 = get_tuple_element _52, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _137 = bif:is_tuple _54
  br _137, ^137, ^118

137:
  %% Argument types:
  %%    _54 => {...}
  %% Aliased:
  %%    _54
  _138 = bif:tuple_size _54

  %% Argument types:
  %%    _138 => 0..16777215
  %% Unique:
  %%    _138
  _139 = bif:'=:=' _138, `2`
  br _139, ^136, ^118

136:
  %% Argument types:
  %%    _52 => {any(), any()}
  %% Aliased:
  %%    _52
  _53 = get_tuple_element _52, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _133 = bif:is_tuple _53
  br _133, ^133, ^118

133:
  %% Argument types:
  %%    _53 => {...}
  %% Aliased:
  %%    _53
  _134 = bif:tuple_size _53

  %% Argument types:
  %%    _134 => 0..16777215
  %% Unique:
  %%    _134
  _135 = bif:'=:=' _134, `2`
  br _135, ^132, ^118

132:
  %% Argument types:
  %%    _54 => {any(), any()}
  %% Aliased:
  %%    _54
  _56 = get_tuple_element _54, `0`

  %% Argument types:
  %%    _54 => {any(), any()}
  %% Aliased:
  %%    _54
  _55 = get_tuple_element _54, `1`

  %% Argument types:
  %%    _3 => {any(), any()}
  %% Aliased:
  %%    _3
  _51 = get_tuple_element _3, `0`

  %% Argument types:
  %%    _3 => {any(), any()}
  %% Aliased:
  %%    _3
  _50 = get_tuple_element _3, `1`

  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _49 = get_tuple_element _2, `0`

  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _48 = get_tuple_element _2, `1`

  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _55, 
  %%    _56
  _7 = bif:'=<' _56, _55
  br _7, ^163, ^120

163:
  %% Argument types:
  %%    _53 => {any(), any()}
  %% Aliased:
  %%    _53
  _58 = get_tuple_element _53, `0`

  %% Argument types:
  %%    _53 => {any(), any()}
  %% Aliased:
  %%    _53
  _57 = get_tuple_element _53, `1`

  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _57, 
  %%    _58
  _8 = bif:'=<' _58, _57
  br _8, ^164, ^120

164:
  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _49, 
  %%    _56
  _9 = bif:'=<' _49, _56
  br _9, ^165, ^120

165:
  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _48, 
  %%    _55
  _10 = bif:'>=' _48, _55
  br _10, ^166, ^120

166:
  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _51, 
  %%    _58
  _11 = bif:'=<' _51, _58
  br _11, ^167, ^120

167:
  %% beam_bounds_SUITE.erl:551
  %% Argument types:
  %%    
  %% Aliased:
  %%    _50, 
  %%    _57
  _12 = bif:'>=' _50, _57
  br _12, ^119, ^120

120:
  %% Argument types:
  %%    _53 => {any(), any()}
  %% Aliased:
  %%    _53
  _60 = put_list _53, `[]`

  %% Argument types:
  %%    _54 => {any(), any()}
  %%    _60 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _54
  %% Unique:
  %%    _60
  _61 = put_list _54, _60

  %% Argument types:
  %%    _3 => {any(), any()}
  %%    _61 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _61
  _62 = put_list _3, _61

  %% Argument types:
  %%    _2 => {any(), any()}
  %%    _62 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _62
  _63 = put_list _2, _62

  %% beam_bounds_SUITE.erl:554
  %% Unique:
  %%    _63
  _81 = call (`io`:`format`/2), `"~p ~p infers as ~p ~p\n"`, _63

  %% Aliased:
  %%    _81
  _128 = succeeded:body _81
  br _128, ^128, ^1

128:
  %% beam_bounds_SUITE.erl:556
  _82 = call (`ct`:`fail`/1), `ranges_grew`

  %% Aliased:
  %%    _82
  _129 = succeeded:body _82
  br _129, ^119, ^1

119:
  %% beam_bounds_SUITE.erl:568
  %% Aliased:
  %%    _48, 
  %%    _49
  _19 = call (`lists`:`seq`/2), _49, _48

  %% Aliased:
  %%    _19
  _130 = succeeded:body _19
  br _130, ^130, ^1

130:
  %% beam_bounds_SUITE.erl:568
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3, 
  %%    _19, 
  %%    _50, 
  %%    _51, 
  %%    _53, 
  %%    _54
  _96 = call (`'-test_infer_relop/4-lc$^0/1-0-'`/8), _19, _1, _2, _3, _50, _51, _53, _54

  %% Unique:
  %%    _96
  _131 = succeeded:body _96
  br _131, ^131, ^1

131:
  %% Result type:
  %%    'ok'
  ret `ok`

118:
  %% beam_bounds_SUITE.erl:549
  %% Aliased:
  %%    _52
  _97 = match_fail `badmatch`, _52

  %% Unique:
  %%    _97
  _144 = succeeded:body _97
  br ^1

155:
  %% beam_bounds_SUITE.erl:547
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3
  _41 = call (`beam_bounds`:`infer_relop_types`/3), _1, _2, _3

  %% Aliased:
  %%    _41
  _110 = succeeded:body _41
  br _110, ^110, ^1

110:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _114 = bif:'=:=' _41, `none`
  br _114, ^113, ^112

113:
  %% Result type:
  %%    'none'
  %% Aliased:
  %%    _41
  ret _41

112:
  %% beam_bounds_SUITE.erl:547
  %% Aliased:
  %%    _41
  _98 = match_fail `badmatch`, _41

  %% Unique:
  %%    _98
  _115 = succeeded:body _98
  br ^1

103:
  %% beam_bounds_SUITE.erl:544
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2, 
  %%    _3
  %% Anno: #{inlined => {'-inlined-test_infer_relop/4-',4}}
  _100 = match_fail `function_clause`, _0, _1, _2, _3

  %% Unique:
  %%    _100
  _156 = succeeded:body _100
  br ^1

1:
  _101 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _101
}

%% beam_bounds_SUITE.erl:573
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`in_range`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => {any(), any()}
  %% Aliased:
  %%    _1
  _7 = get_tuple_element _1, `0`

  %% beam_bounds_SUITE.erl:574
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _7
  _8 = bif:'=<' _7, _0
  br _8, ^16, ^15

16:
  %% Argument types:
  %%    _1 => {any(), any()}
  %% Aliased:
  %%    _1
  _6 = get_tuple_element _1, `1`

  %% beam_bounds_SUITE.erl:574
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _6
  _9 = bif:'=<' _0, _6
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _9
  ret _9

15:
  %% Result type:
  %%    'false'
  ret `false`
}

%% beam_bounds_SUITE.erl:576
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
%%    _1 =>
%%     {any(), any()}
%%    _2 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`rel_op`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _9 = get_tuple_element _2, `0`

  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _8 = get_tuple_element _2, `1`

  %% Argument types:
  %%    _1 => {any(), any()}
  %% Aliased:
  %%    _1
  _7 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {any(), any()}
  %% Aliased:
  %%    _1
  _6 = get_tuple_element _1, `1`

  %% beam_bounds_SUITE.erl:577
  %% Aliased:
  %%    _0, 
  %%    _6, 
  %%    _7, 
  %%    _8, 
  %%    _9
  _10 = call (`rel_op_1`/6), _0, _7, _6, _9, _8, `none`

  %% Aliased:
  %%    _10
  _15 = succeeded:body _10
  br _15, ^15, ^1

15:
  %% Aliased:
  %%    _10
  ret _10

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_bounds_SUITE.erl:579
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`rel_op_1`(_0, _1, _2, _3, _4, _5) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _23 = bif:'=<' _1, _2
  br _23, ^23, ^22

23:
  %% beam_bounds_SUITE.erl:580
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3, 
  %%    _4, 
  %%    _5
  _18 = call (`rel_op_2`/5), _0, _1, _3, _4, _5

  %% Aliased:
  %%    _18
  _24 = succeeded:body _18
  br _24, ^24, ^1

24:
  %% beam_bounds_SUITE.erl:581
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _7 = bif:'+' _1, `1`

  %% Unique:
  %%    _7
  _25 = succeeded:body _7
  br _25, ^25, ^1

25:
  %% beam_bounds_SUITE.erl:581
  %% Aliased:
  %%    _0, 
  %%    _2, 
  %%    _3, 
  %%    _4, 
  %%    _18
  %% Unique:
  %%    _7
  _19 = call (`rel_op_1`/6), _0, _7, _2, _3, _4, _18

  %% Aliased:
  %%    _19
  _26 = succeeded:body _19
  br _26, ^26, ^1

26:
  %% Aliased:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20

22:
  %% Aliased:
  %%    _5
  ret _5
}

%% beam_bounds_SUITE.erl:585
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`rel_op_2`(_0, _1, _2, _3, _4) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _3
  _24 = bif:'=<' _2, _3
  br _24, ^24, ^23

24:
  %% beam_bounds_SUITE.erl:586
  %% Aliased:
  %%    _1, 
  %%    _2
  Val = call (`erlang`:_0/2), _1, _2

  %% Aliased:
  %%    Val
  _25 = succeeded:body Val
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _29 = bif:'=:=' _4, `none`
  br _29, ^28, ^27

28:
  br ^26

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4, 
  %%    Val
  _31 = bif:'=:=' _4, Val
  br _31, ^31, ^30

31:
  br ^26

30:
  br ^26

26:
  _7 = phi { Val, ^28 }, { `'maybe'`, ^30 }, { _4, ^31 }

  %% beam_bounds_SUITE.erl:592
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _9 = bif:'+' _2, `1`

  %% Unique:
  %%    _9
  _32 = succeeded:body _9
  br _32, ^32, ^1

32:
  %% beam_bounds_SUITE.erl:592
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3, 
  %%    _7
  %% Unique:
  %%    _9
  _20 = call (`rel_op_2`/5), _0, _1, _9, _3, _7

  %% Aliased:
  %%    _20
  _33 = succeeded:body _20
  br _33, ^33, ^1

33:
  %% Aliased:
  %%    _20
  ret _20

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21

23:
  %% Aliased:
  %%    _4
  ret _4
}

%% beam_bounds_SUITE.erl:596
%% Counter = 67
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`redundant_masking`(_0) {
0:
  %% beam_bounds_SUITE.erl:599
  Seq = call (`lists`:`seq`/2), `-7`, `15`

  %% Aliased:
  %%    Seq
  _53 = succeeded:body Seq
  br _53, ^53, ^1

53:
  %% beam_bounds_SUITE.erl:601
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    Seq
  _48 = call (`'-redundant_masking/1-lc$^0/1-0-'`/2), Seq, Seq

  %% Unique:
  %%    _48
  _54 = succeeded:body _48
  br _54, ^54, ^1

54:
  %% beam_bounds_SUITE.erl:605
  _37 = call (`beam_bounds`:`is_masking_redundant`/2), `{'-inf',10}`, `255`

  %% Aliased:
  %%    _37
  _55 = succeeded:body _37
  br _55, ^55, ^1

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _65 = bif:'=:=' _37, `false`
  br _65, ^64, ^57

64:
  %% beam_bounds_SUITE.erl:606
  _38 = call (`beam_bounds`:`is_masking_redundant`/2), `{0,'+inf'}`, `255`

  %% Aliased:
  %%    _38
  _58 = succeeded:body _38
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _62 = bif:'=:=' _38, `false`
  br _62, ^61, ^60

61:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% beam_bounds_SUITE.erl:606
  %% Aliased:
  %%    _38
  _49 = match_fail `badmatch`, _38

  %% Unique:
  %%    _49
  _63 = succeeded:body _49
  br ^1

57:
  %% beam_bounds_SUITE.erl:605
  %% Aliased:
  %%    _37
  _50 = match_fail `badmatch`, _37

  %% Unique:
  %%    _50
  _66 = succeeded:body _50
  br ^1

1:
  _51 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _51
}

%% beam_bounds_SUITE.erl:609
%% Counter = 46
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {number(), any()}
function `beam_bounds_SUITE`:`test_redundant_masking`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => {number(), any()}
  %% Aliased:
  %%    _0
  _10 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {number(), any()}
  %% Aliased:
  %%    _0
  _9 = get_tuple_element _0, `1`

  %% beam_bounds_SUITE.erl:610
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _9, 
  %%    _10
  ShouldBe = call (`test_redundant_masking`/3), _10, _9, _1

  %% Unique:
  %%    ShouldBe
  _23 = succeeded:body ShouldBe
  br _23, ^23, ^1

23:
  %% beam_bounds_SUITE.erl:611
  %% Aliased:
  %%    _0, 
  %%    _1
  _11 = call (`beam_bounds`:`is_masking_redundant`/2), _0, _1

  %% Aliased:
  %%    _11
  _24 = succeeded:body _11
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    ShouldBe => 'false' | 'true'
  %% Aliased:
  %%    _11
  %% Unique:
  %%    ShouldBe
  _27 = bif:'=:=' _11, ShouldBe
  br _27, ^27, ^26

27:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _36 = bif:'=:=' _11, `false`
  br _36, ^35, ^28

35:
  %% beam_bounds_SUITE.erl:614
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:'+' _1, `1`

  %% Unique:
  %%    _3
  _31 = succeeded:guard _3
  br _31, ^31, ^29

31:
  %% beam_bounds_SUITE.erl:614
  %% Argument types:
  %%    _1 => number()
  %%    _3 => number()
  %% Unique:
  %%    _1, 
  %%    _3
  _4 = bif:'band' _1, _3

  %% Unique:
  %%    _4
  _32 = succeeded:guard _4
  br _32, ^32, ^29

32:
  %% Argument types:
  %%    _4 => integer()
  %% Unique:
  %%    _4
  _33 = bif:'=:=' _4, `0`
  br _33, ^29, ^33

33:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% Argument types:
  %%    _10 => number()
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _10
  _34 = bif:'=:=' _10, _9
  br _34, ^34, ^28

34:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% Argument types:
  %%    ShouldBe => 'false' | 'true'
  %% Unique:
  %%    ShouldBe
  _12 = put_list ShouldBe, `[]`

  %% Argument types:
  %%    _12 => nonempty_list('false' | 'true')
  %% Aliased:
  %%    _11
  %% Unique:
  %%    _12
  _13 = put_list _11, _12

  %% Argument types:
  %%    _13 => nonempty_list(any())
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _13
  _14 = put_list _1, _13

  %% Argument types:
  %%    _0 => {number(), any()}
  %%    _14 => nonempty_list(any())
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _14
  _15 = put_list _0, _14

  %% beam_bounds_SUITE.erl:620
  %% Unique:
  %%    _15
  _17 = call (`io`:`format`/2), `"beam_bounds:is_masking_redundant(~p, ~p) evaluates to ~p; should be ~p\n"`, _15

  %% Aliased:
  %%    _17
  _37 = succeeded:body _17
  br _37, ^37, ^1

37:
  %% beam_bounds_SUITE.erl:623
  _18 = call (`ct`:`fail`/1), `bad_boolean`

  %% Aliased:
  %%    _18
  _38 = succeeded:body _18
  br _38, ^38, ^1

38:
  %% Aliased:
  %%    _18
  ret _18

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_bounds_SUITE.erl:626
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     number()
function `beam_bounds_SUITE`:`test_redundant_masking`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => number()
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  _18 = bif:'=<' _0, _1
  br _18, ^18, ^17

18:
  %% beam_bounds_SUITE.erl:627
  %% Argument types:
  %%    _0 => number()
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _0
  _4 = bif:'band' _0, _2

  %% Unique:
  %%    _4
  _19 = succeeded:body _4
  br _19, ^19, ^1

19:
  %% beam_bounds_SUITE.erl:627
  %% Argument types:
  %%    _4 => integer()
  %%    _0 => integer()
  %% Unique:
  %%    _0, 
  %%    _4
  _13 = bif:'=:=' _4, _0
  br _13, ^24, ^23

24:
  %% beam_bounds_SUITE.erl:627
  %% Argument types:
  %%    _0 => integer()
  %% Unique:
  %%    _0
  _5 = bif:'+' _0, `1`

  %% Unique:
  %%    _5
  _21 = succeeded:body _5
  br _21, ^21, ^1

21:
  %% beam_bounds_SUITE.erl:627
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  %% Unique:
  %%    _5
  _14 = call (`test_redundant_masking`/3), _5, _1, _2

  %% Unique:
  %%    _14
  _22 = succeeded:body _14
  br _22, ^22, ^1

22:
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _14
  ret _14

23:
  %% Result type:
  %%    'false'
  ret `false`

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15

17:
  %% Result type:
  %%    'true'
  ret `true`
}

%% beam_bounds_SUITE.erl:634
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'bad' | 'false' | 'true' | 0..42
function `beam_bounds_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    'bad' | 'false' | 'true' | 0..42
  %% Unique:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_bounds_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_bounds_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_bounds_SUITE.erl:601
%% Counter = 59
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`'-redundant_masking/1-lc$^0/1-0-'`(_12, Seq) {
0:
  %% Aliased:
  %%    _12
  _55 = is_nonempty_list _12
  br _55, ^55, ^51

55:
  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _27 = get_hd _12

  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _26 = get_tl _12

  %% beam_bounds_SUITE.erl:602
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _8 = bif:'-' _27, `-7`

  %% Unique:
  %%    _8
  _52 = succeeded:body _8
  br _52, ^52, ^1

52:
  %% beam_bounds_SUITE.erl:602
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _8
  _9 = call (`lists`:`nthtail`/2), _8, Seq

  %% Aliased:
  %%    _9
  _53 = succeeded:body _9
  br _53, ^53, ^1

53:
  %% beam_bounds_SUITE.erl:602
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9, 
  %%    _26, 
  %%    _27, 
  %%    Seq
  _46 = call (`'-redundant_masking/1-lc$^1/1-1-'`/4), _9, _26, _27, Seq

  %% Unique:
  %%    _46
  _54 = succeeded:body _46
  br _54, ^54, ^1

54:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _46
  ret _46

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _56 = bif:'=:=' _12, `[]`
  br _56, ^56, ^50

56:
  %% Result type:
  %%    nil()
  ret `[]`

50:
  %% Argument types:
  %%    _12 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _12
  _25 = put_tuple `bad_generator`, _12

  %% beam_bounds_SUITE.erl:601
  %% Unique:
  %%    _25
  _47 = call (`erlang`:`error`/1), _25

  %% Aliased:
  %%    _47
  _57 = succeeded:body _47
  br ^1

1:
  _48 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _48
}

%% beam_bounds_SUITE.erl:602
%% Counter = 57
%% bs_ensure_opt: true
%% Parameters
%%    _27 =>
%%     number()
function `beam_bounds_SUITE`:`'-redundant_masking/1-lc$^1/1-1-'`(_14, _26, _27, Seq) {
0:
  %% Aliased:
  %%    _14
  _51 = is_nonempty_list _14
  br _51, ^51, ^49

51:
  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _31 = get_hd _14

  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _30 = get_tl _14

  %% beam_bounds_SUITE.erl:603
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _26, 
  %%    _27, 
  %%    _30, 
  %%    _31, 
  %%    Seq
  _44 = call (`'-redundant_masking/1-lc$^2/1-2-'`/6), Seq, _26, _27, _30, _31, Seq

  %% Unique:
  %%    _44
  _50 = succeeded:body _44
  br _50, ^50, ^1

50:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _44
  ret _44

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _53 = bif:'=:=' _14, `[]`
  br _53, ^53, ^48

53:
  %% beam_bounds_SUITE.erl:601
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _26, 
  %%    Seq
  _39 = call (`'-redundant_masking/1-lc$^0/1-0-'`/2), _26, Seq

  %% Unique:
  %%    _39
  _52 = succeeded:body _39
  br _52, ^52, ^1

52:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _39
  ret _39

48:
  %% Argument types:
  %%    _14 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _14
  _29 = put_tuple `bad_generator`, _14

  %% beam_bounds_SUITE.erl:602
  %% Unique:
  %%    _29
  _45 = call (`erlang`:`error`/1), _29

  %% Aliased:
  %%    _45
  _54 = succeeded:body _45
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% beam_bounds_SUITE.erl:603
%% Counter = 56
%% bs_ensure_opt: true
%% Parameters
%%    _27 =>
%%     number()
function `beam_bounds_SUITE`:`'-redundant_masking/1-lc$^2/1-2-'`(_16, _26, _27, _30, _31, Seq) {
0:
  %% Aliased:
  %%    _16
  _50 = is_nonempty_list _16
  br _50, ^50, ^47

50:
  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _35 = get_hd _16

  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _34 = get_tl _16

  %% Argument types:
  %%    _27 => number()
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _27
  _36 = put_tuple _27, _31

  %% beam_bounds_SUITE.erl:600
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _36
  _41 = call (`test_redundant_masking`/2), _36, _35

  %% Aliased:
  %%    _41
  _48 = succeeded:body _41
  br _48, ^48, ^1

48:
  %% beam_bounds_SUITE.erl:603
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _26, 
  %%    _27, 
  %%    _30, 
  %%    _31, 
  %%    _34, 
  %%    Seq
  _42 = call (`'-redundant_masking/1-lc$^2/1-2-'`/6), _34, _26, _27, _30, _31, Seq

  %% Unique:
  %%    _42
  _49 = succeeded:body _42
  br _49, ^49, ^1

49:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _42
  ret _42

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _52 = bif:'=:=' _16, `[]`
  br _52, ^52, ^46

52:
  %% beam_bounds_SUITE.erl:602
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _26, 
  %%    _27, 
  %%    _30, 
  %%    Seq
  _40 = call (`'-redundant_masking/1-lc$^1/1-1-'`/4), _30, _26, _27, Seq

  %% Unique:
  %%    _40
  _51 = succeeded:body _40
  br _51, ^51, ^1

51:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _40
  ret _40

46:
  %% Argument types:
  %%    _16 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _16
  _33 = put_tuple `bad_generator`, _16

  %% beam_bounds_SUITE.erl:603
  %% Unique:
  %%    _33
  _43 = call (`erlang`:`error`/1), _33

  %% Aliased:
  %%    _43
  _53 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_bounds_SUITE.erl:568
%% Counter = 107
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
%%    _2 =>
%%     {any(), any()}
%%    _3 =>
%%     {any(), any()}
%%    _53 =>
%%     {any(), any()}
%%    _54 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`'-test_infer_relop/4-lc$^0/1-0-'`(_23, _1, _2, _3, _50, _51, _53, _54) {
0:
  %% Aliased:
  %%    _23
  _102 = is_nonempty_list _23
  br _102, ^102, ^99

102:
  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _67 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _66 = get_tl _23

  %% beam_bounds_SUITE.erl:569
  %% Aliased:
  %%    _50, 
  %%    _51
  _22 = call (`lists`:`seq`/2), _51, _50

  %% Aliased:
  %%    _22
  _100 = succeeded:body _22
  br _100, ^100, ^1

100:
  %% beam_bounds_SUITE.erl:569
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3, 
  %%    _22, 
  %%    _50, 
  %%    _51, 
  %%    _53, 
  %%    _54, 
  %%    _66, 
  %%    _67
  _94 = call (`'-test_infer_relop/4-lc$^1/1-1-'`/10), _22, _1, _2, _3, _50, _51, _53, _54, _66, _67

  %% Unique:
  %%    _94
  _101 = succeeded:body _94
  br _101, ^101, ^1

101:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _94
  ret _94

99:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _103 = bif:'=:=' _23, `[]`
  br _103, ^103, ^98

103:
  %% Result type:
  %%    nil()
  ret `[]`

98:
  %% Argument types:
  %%    _23 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _23
  _65 = put_tuple `bad_generator`, _23

  %% beam_bounds_SUITE.erl:568
  %% Unique:
  %%    _65
  _95 = call (`erlang`:`error`/1), _65

  %% Aliased:
  %%    _95
  _104 = succeeded:body _95
  br ^1

1:
  _96 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _96
}

%% beam_bounds_SUITE.erl:569
%% Counter = 130
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
%%    _2 =>
%%     {any(), any()}
%%    _3 =>
%%     {any(), any()}
%%    _53 =>
%%     {any(), any()}
%%    _54 =>
%%     {any(), any()}
function `beam_bounds_SUITE`:`'-test_infer_relop/4-lc$^1/1-1-'`(_25, _1, _2, _3, _50, _51, _53, _54, _66, _67) {
0:
  %% Aliased:
  %%    _25
  _121 = is_nonempty_list _25
  br _121, ^121, ^97

121:
  %% Argument types:
  %%    _25 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _25
  _71 = get_hd _25

  %% Argument types:
  %%    _25 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _25
  _70 = get_tl _25

  %% beam_bounds_SUITE.erl:570
  %% Aliased:
  %%    _67, 
  %%    _71
  _72 = call (`erlang`:_1/2), _67, _71

  %% Aliased:
  %%    _72
  _98 = succeeded:body _72
  br _98, ^98, ^1

98:
  switch _72, ^100, [
    { `false`, ^119 },
    { `true`, ^118 }
  ]

118:
  %% beam_bounds_SUITE.erl:559
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _54, 
  %%    _67
  _73 = call (`in_range`/2), _67, _54

  %% Unique:
  %%    _73
  _102 = succeeded:body _73
  br _102, ^102, ^1

102:
  br _73, ^107, ^115

107:
  %% beam_bounds_SUITE.erl:559
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _53, 
  %%    _71
  _84 = call (`in_range`/2), _71, _53

  %% Unique:
  %%    _84
  _105 = succeeded:body _84
  br _105, ^105, ^1

105:
  br _84, ^109, ^115

115:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _75 = put_list _71, `[]`

  %% Argument types:
  %%    _75 => nonempty_list(any())
  %% Aliased:
  %%    _67
  %% Unique:
  %%    _75
  _76 = put_list _67, _75

  %% beam_bounds_SUITE.erl:563
  %% Unique:
  %%    _76
  _86 = call (`io`:`format`/2), `"X = ~p; Y = ~p\n"`, _76

  %% Aliased:
  %%    _86
  _111 = succeeded:body _86
  br _111, ^111, ^1

111:
  %% Argument types:
  %%    _53 => {any(), any()}
  %% Aliased:
  %%    _53
  _77 = put_list _53, `[]`

  %% Argument types:
  %%    _54 => {any(), any()}
  %%    _77 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _54
  %% Unique:
  %%    _77
  _78 = put_list _54, _77

  %% Argument types:
  %%    _3 => {any(), any()}
  %%    _78 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _78
  _79 = put_list _3, _78

  %% Argument types:
  %%    _2 => {any(), any()}
  %%    _79 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _79
  _80 = put_list _2, _79

  %% beam_bounds_SUITE.erl:564
  %% Unique:
  %%    _80
  _87 = call (`io`:`format`/2), `"~p ~p infers as ~p ~p\n"`, _80

  %% Aliased:
  %%    _87
  _112 = succeeded:body _87
  br _112, ^112, ^1

112:
  %% beam_bounds_SUITE.erl:566
  _88 = call (`ct`:`fail`/1), `bad_inference`

  %% Aliased:
  %%    _88
  _113 = succeeded:body _88
  br _113, ^109, ^1

109:
  %% beam_bounds_SUITE.erl:569
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3, 
  %%    _50, 
  %%    _51, 
  %%    _53, 
  %%    _54, 
  %%    _66, 
  %%    _67, 
  %%    _70
  _90 = call (`'-test_infer_relop/4-lc$^1/1-1-'`/10), _70, _1, _2, _3, _50, _51, _53, _54, _66, _67

  %% Unique:
  %%    _90
  _117 = succeeded:body _90
  br _117, ^117, ^1

117:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _90
  ret _90

119:
  %% beam_bounds_SUITE.erl:569
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3, 
  %%    _50, 
  %%    _51, 
  %%    _53, 
  %%    _54, 
  %%    _66, 
  %%    _67, 
  %%    _70
  _91 = call (`'-test_infer_relop/4-lc$^1/1-1-'`/10), _70, _1, _2, _3, _50, _51, _53, _54, _66, _67

  %% Unique:
  %%    _91
  _101 = succeeded:body _91
  br _101, ^101, ^1

101:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _91
  ret _91

100:
  %% beam_bounds_SUITE.erl:570
  %% Aliased:
  %%    _72
  _92 = match_fail `bad_filter`, _72

  %% Unique:
  %%    _92
  _120 = succeeded:body _92
  br ^1

97:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _123 = bif:'=:=' _25, `[]`
  br _123, ^123, ^96

123:
  %% beam_bounds_SUITE.erl:568
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3, 
  %%    _50, 
  %%    _51, 
  %%    _53, 
  %%    _54, 
  %%    _66
  _83 = call (`'-test_infer_relop/4-lc$^0/1-0-'`/8), _66, _1, _2, _3, _50, _51, _53, _54

  %% Unique:
  %%    _83
  _122 = succeeded:body _83
  br _122, ^122, ^1

122:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _83
  ret _83

96:
  %% Argument types:
  %%    _25 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _25
  _69 = put_tuple `bad_generator`, _25

  %% beam_bounds_SUITE.erl:569
  %% Unique:
  %%    _69
  _93 = call (`erlang`:`error`/1), _69

  %% Aliased:
  %%    _93
  _124 = succeeded:body _93
  br ^1

1:
  _94 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _94
}

%% beam_bounds_SUITE.erl:527
%% Counter = 62
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`'-test_relop/1-lc$^0/1-0-'`(_13, _0, Seq) {
0:
  %% Aliased:
  %%    _13
  _57 = is_nonempty_list _13
  br _57, ^57, ^54

57:
  %% Argument types:
  %%    _13 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _13
  _24 = get_hd _13

  %% Argument types:
  %%    _13 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _13
  _23 = get_tl _13

  %% beam_bounds_SUITE.erl:528
  %% Aliased:
  %%    _24, 
  %%    Seq
  _7 = call (`lists`:`nthtail`/2), _24, Seq

  %% Aliased:
  %%    _7
  _55 = succeeded:body _7
  br _55, ^55, ^1

55:
  %% beam_bounds_SUITE.erl:528
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _7, 
  %%    _23, 
  %%    _24, 
  %%    Seq
  _49 = call (`'-test_relop/1-lc$^1/1-1-'`/5), _7, _0, _23, _24, Seq

  %% Unique:
  %%    _49
  _56 = succeeded:body _49
  br _56, ^56, ^1

56:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _49
  ret _49

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _58 = bif:'=:=' _13, `[]`
  br _58, ^58, ^53

58:
  %% Result type:
  %%    nil()
  ret `[]`

53:
  %% Argument types:
  %%    _13 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _13
  _22 = put_tuple `bad_generator`, _13

  %% beam_bounds_SUITE.erl:527
  %% Unique:
  %%    _22
  _50 = call (`erlang`:`error`/1), _22

  %% Aliased:
  %%    _50
  _59 = succeeded:body _50
  br ^1

1:
  _51 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _51
}

%% beam_bounds_SUITE.erl:528
%% Counter = 60
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`'-test_relop/1-lc$^1/1-1-'`(_15, _0, _23, _24, Seq) {
0:
  %% Aliased:
  %%    _15
  _54 = is_nonempty_list _15
  br _54, ^54, ^52

54:
  %% Argument types:
  %%    _15 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _15
  _28 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _15
  _27 = get_tl _15

  %% beam_bounds_SUITE.erl:529
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _23, 
  %%    _24, 
  %%    _27, 
  %%    _28, 
  %%    Seq
  _47 = call (`'-test_relop/1-lc$^2/1-2-'`/7), Seq, _0, _23, _24, _27, _28, Seq

  %% Unique:
  %%    _47
  _53 = succeeded:body _47
  br _53, ^53, ^1

53:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _47
  ret _47

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _56 = bif:'=:=' _15, `[]`
  br _56, ^56, ^51

56:
  %% beam_bounds_SUITE.erl:527
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _23, 
  %%    Seq
  _39 = call (`'-test_relop/1-lc$^0/1-0-'`/3), _23, _0, Seq

  %% Unique:
  %%    _39
  _55 = succeeded:body _39
  br _55, ^55, ^1

55:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _39
  ret _39

51:
  %% Argument types:
  %%    _15 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _15
  _26 = put_tuple `bad_generator`, _15

  %% beam_bounds_SUITE.erl:528
  %% Unique:
  %%    _26
  _48 = call (`erlang`:`error`/1), _26

  %% Aliased:
  %%    _48
  _57 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% beam_bounds_SUITE.erl:529
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`'-test_relop/1-lc$^2/1-2-'`(_17, _0, _23, _24, _27, _28, Seq) {
0:
  %% Aliased:
  %%    _17
  _53 = is_nonempty_list _17
  br _53, ^53, ^50

53:
  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _32 = get_hd _17

  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _31 = get_tl _17

  %% beam_bounds_SUITE.erl:530
  %% Aliased:
  %%    _32, 
  %%    Seq
  _12 = call (`lists`:`nthtail`/2), _32, Seq

  %% Aliased:
  %%    _12
  _51 = succeeded:body _12
  br _51, ^51, ^1

51:
  %% beam_bounds_SUITE.erl:530
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _12, 
  %%    _23, 
  %%    _24, 
  %%    _27, 
  %%    _28, 
  %%    _31, 
  %%    _32, 
  %%    Seq
  _45 = call (`'-test_relop/1-lc$^3/1-3-'`/9), _12, _0, _23, _24, _27, _28, _31, _32, Seq

  %% Unique:
  %%    _45
  _52 = succeeded:body _45
  br _52, ^52, ^1

52:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _45
  ret _45

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _55 = bif:'=:=' _17, `[]`
  br _55, ^55, ^49

55:
  %% beam_bounds_SUITE.erl:528
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _23, 
  %%    _24, 
  %%    _27, 
  %%    Seq
  _40 = call (`'-test_relop/1-lc$^1/1-1-'`/5), _27, _0, _23, _24, Seq

  %% Unique:
  %%    _40
  _54 = succeeded:body _40
  br _54, ^54, ^1

54:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _40
  ret _40

49:
  %% Argument types:
  %%    _17 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _17
  _30 = put_tuple `bad_generator`, _17

  %% beam_bounds_SUITE.erl:529
  %% Unique:
  %%    _30
  _46 = call (`erlang`:`error`/1), _30

  %% Aliased:
  %%    _46
  _56 = succeeded:body _46
  br ^1

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% beam_bounds_SUITE.erl:530
%% Counter = 57
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''<'' | ''=<'' | ''>'' | ''>=''
function `beam_bounds_SUITE`:`'-test_relop/1-lc$^3/1-3-'`(_19, _0, _23, _24, _27, _28, _31, _32, Seq) {
0:
  %% Aliased:
  %%    _19
  _51 = is_nonempty_list _19
  br _51, ^51, ^48

51:
  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _36 = get_hd _19

  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _35 = get_tl _19

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24, 
  %%    _28
  _38 = put_tuple _24, _28

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32, 
  %%    _36
  _37 = put_tuple _32, _36

  %% beam_bounds_SUITE.erl:526
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _37, 
  %%    _38
  _42 = call (`test_relop_1`/3), _0, _38, _37

  %% Aliased:
  %%    _42
  _49 = succeeded:body _42
  br _49, ^49, ^1

49:
  %% beam_bounds_SUITE.erl:530
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _23, 
  %%    _24, 
  %%    _27, 
  %%    _28, 
  %%    _31, 
  %%    _32, 
  %%    _35, 
  %%    Seq
  _43 = call (`'-test_relop/1-lc$^3/1-3-'`/9), _35, _0, _23, _24, _27, _28, _31, _32, Seq

  %% Unique:
  %%    _43
  _50 = succeeded:body _43
  br _50, ^50, ^1

50:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _43
  ret _43

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _53 = bif:'=:=' _19, `[]`
  br _53, ^53, ^47

53:
  %% beam_bounds_SUITE.erl:529
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _23, 
  %%    _24, 
  %%    _27, 
  %%    _28, 
  %%    _31, 
  %%    Seq
  _41 = call (`'-test_relop/1-lc$^2/1-2-'`/7), _31, _0, _23, _24, _27, _28, Seq

  %% Unique:
  %%    _41
  _52 = succeeded:body _41
  br _52, ^52, ^1

52:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _41
  ret _41

47:
  %% Argument types:
  %%    _19 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _19
  _34 = put_tuple `bad_generator`, _19

  %% beam_bounds_SUITE.erl:530
  %% Unique:
  %%    _34
  _44 = call (`erlang`:`error`/1), _34

  %% Aliased:
  %%    _44
  _54 = succeeded:body _44
  br ^1

1:
  _45 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _45
}

%% beam_bounds_SUITE.erl:465
%% Counter = 77
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _33 =>
%%     -12
%%    _35 =>
%%     -12..0
function `beam_bounds_SUITE`:`'-test_noncommutative/3-lc$^0/1-0-'`(_17, _0, _33, _35, Seq1, Seq2) {
0:
  %% Aliased:
  %%    _17
  _73 = is_nonempty_list _17
  br _73, ^73, ^69

73:
  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _39 = get_hd _17

  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _38 = get_tl _17

  %% beam_bounds_SUITE.erl:466
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _9 = bif:'-' _39, `-12`

  %% Unique:
  %%    _9
  _70 = succeeded:body _9
  br _70, ^70, ^1

70:
  %% beam_bounds_SUITE.erl:466
  %% Aliased:
  %%    Seq1
  %% Unique:
  %%    _9
  _10 = call (`lists`:`nthtail`/2), _9, Seq1

  %% Aliased:
  %%    _10
  _71 = succeeded:body _10
  br _71, ^71, ^1

71:
  %% beam_bounds_SUITE.erl:466
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _10, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    Seq1, 
  %%    Seq2
  _64 = call (`'-test_noncommutative/3-lc$^1/1-1-'`/8), _10, _0, `-12`, _35, _38, _39, Seq1, Seq2

  %% Unique:
  %%    _64
  _72 = succeeded:body _64
  br _72, ^72, ^1

72:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _64
  ret _64

69:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _74 = bif:'=:=' _17, `[]`
  br _74, ^74, ^68

74:
  %% Result type:
  %%    nil()
  ret `[]`

68:
  %% Argument types:
  %%    _17 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _17
  _37 = put_tuple `bad_generator`, _17

  %% beam_bounds_SUITE.erl:465
  %% Unique:
  %%    _37
  _65 = call (`erlang`:`error`/1), _37

  %% Aliased:
  %%    _65
  _75 = succeeded:body _65
  br ^1

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66
}

%% beam_bounds_SUITE.erl:466
%% Counter = 75
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _33 =>
%%     -12
%%    _35 =>
%%     -12..0
%%    _39 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_noncommutative/3-lc$^1/1-1-'`(_19, _0, _33, _35, _38, _39, Seq1, Seq2) {
0:
  %% Aliased:
  %%    _19
  _69 = is_nonempty_list _19
  br _69, ^69, ^67

69:
  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _43 = get_hd _19

  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _42 = get_tl _19

  %% beam_bounds_SUITE.erl:467
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    _42, 
  %%    _43, 
  %%    Seq1, 
  %%    Seq2
  _62 = call (`'-test_noncommutative/3-lc$^2/1-2-'`/10), Seq2, _0, _33, _35, _38, _39, _42, _43, Seq1, Seq2

  %% Unique:
  %%    _62
  _68 = succeeded:body _62
  br _68, ^68, ^1

68:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _62
  ret _62

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _71 = bif:'=:=' _19, `[]`
  br _71, ^71, ^66

71:
  %% beam_bounds_SUITE.erl:465
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _35, 
  %%    _38, 
  %%    Seq1, 
  %%    Seq2
  _54 = call (`'-test_noncommutative/3-lc$^0/1-0-'`/6), _38, _0, _33, _35, Seq1, Seq2

  %% Unique:
  %%    _54
  _70 = succeeded:body _54
  br _70, ^70, ^1

70:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _54
  ret _54

66:
  %% Argument types:
  %%    _19 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _19
  _41 = put_tuple `bad_generator`, _19

  %% beam_bounds_SUITE.erl:466
  %% Unique:
  %%    _41
  _63 = call (`erlang`:`error`/1), _41

  %% Aliased:
  %%    _63
  _72 = succeeded:body _63
  br ^1

1:
  _64 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _64
}

%% beam_bounds_SUITE.erl:467
%% Counter = 74
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _33 =>
%%     -12
%%    _35 =>
%%     -12..0
%%    _39 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_noncommutative/3-lc$^2/1-2-'`(_21, _0, _33, _35, _38, _39, _42, _43, Seq1, Seq2) {
0:
  %% Aliased:
  %%    _21
  _69 = is_nonempty_list _21
  br _69, ^69, ^65

69:
  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _47 = get_hd _21

  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _46 = get_tl _21

  %% beam_bounds_SUITE.erl:468
  %% Argument types:
  %%    _35 => -12..0
  %% Aliased:
  %%    _47
  %% Unique:
  %%    _35
  _15 = bif:'-' _47, _35

  %% Unique:
  %%    _15
  _66 = succeeded:body _15
  br _66, ^66, ^1

66:
  %% beam_bounds_SUITE.erl:468
  %% Aliased:
  %%    Seq2
  %% Unique:
  %%    _15
  _16 = call (`lists`:`nthtail`/2), _15, Seq2

  %% Aliased:
  %%    _16
  _67 = succeeded:body _16
  br _67, ^67, ^1

67:
  %% beam_bounds_SUITE.erl:468
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _16, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    _42, 
  %%    _43, 
  %%    _46, 
  %%    _47, 
  %%    Seq1, 
  %%    Seq2
  _60 = call (`'-test_noncommutative/3-lc$^3/1-3-'`/12), _16, _0, `-12`, _35, _38, _39, _42, _43, _46, _47, Seq1, Seq2

  %% Unique:
  %%    _60
  _68 = succeeded:body _60
  br _68, ^68, ^1

68:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _60
  ret _60

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _71 = bif:'=:=' _21, `[]`
  br _71, ^71, ^64

71:
  %% beam_bounds_SUITE.erl:466
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    _42, 
  %%    Seq1, 
  %%    Seq2
  _55 = call (`'-test_noncommutative/3-lc$^1/1-1-'`/8), _42, _0, _33, _35, _38, _39, Seq1, Seq2

  %% Unique:
  %%    _55
  _70 = succeeded:body _55
  br _70, ^70, ^1

70:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _55
  ret _55

64:
  %% Argument types:
  %%    _21 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _21
  _45 = put_tuple `bad_generator`, _21

  %% beam_bounds_SUITE.erl:467
  %% Unique:
  %%    _45
  _61 = call (`erlang`:`error`/1), _45

  %% Aliased:
  %%    _61
  _72 = succeeded:body _61
  br ^1

1:
  _62 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _62
}

%% beam_bounds_SUITE.erl:468
%% Counter = 72
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     ''-'' | ''bsl'' | ''bsr'' | ''div'' | ''rem''
%%    _33 =>
%%     -12
%%    _35 =>
%%     -12..0
%%    _39 =>
%%     number()
%%    _47 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_noncommutative/3-lc$^3/1-3-'`(_23, _0, _33, _35, _38, _39, _42, _43, _46, _47, Seq1, Seq2) {
0:
  %% Aliased:
  %%    _23
  _66 = is_nonempty_list _23
  br _66, ^66, ^63

66:
  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _51 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _50 = get_tl _23

  %% Argument types:
  %%    _39 => number()
  %% Aliased:
  %%    _43
  %% Unique:
  %%    _39
  _53 = put_tuple _39, _43

  %% Argument types:
  %%    _47 => number()
  %% Aliased:
  %%    _51
  %% Unique:
  %%    _47
  _52 = put_tuple _47, _51

  %% beam_bounds_SUITE.erl:464
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _52, 
  %%    _53
  _57 = call (`test_noncommutative_1`/3), _0, _53, _52

  %% Aliased:
  %%    _57
  _64 = succeeded:body _57
  br _64, ^64, ^1

64:
  %% beam_bounds_SUITE.erl:468
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    _42, 
  %%    _43, 
  %%    _46, 
  %%    _47, 
  %%    _50, 
  %%    Seq1, 
  %%    Seq2
  _58 = call (`'-test_noncommutative/3-lc$^3/1-3-'`/12), _50, _0, `-12`, _35, _38, _39, _42, _43, _46, _47, Seq1, Seq2

  %% Unique:
  %%    _58
  _65 = succeeded:body _58
  br _65, ^65, ^1

65:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _58
  ret _58

63:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _68 = bif:'=:=' _23, `[]`
  br _68, ^68, ^62

68:
  %% beam_bounds_SUITE.erl:467
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _35, 
  %%    _38, 
  %%    _39, 
  %%    _42, 
  %%    _43, 
  %%    _46, 
  %%    Seq1, 
  %%    Seq2
  _56 = call (`'-test_noncommutative/3-lc$^2/1-2-'`/10), _46, _0, _33, _35, _38, _39, _42, _43, Seq1, Seq2

  %% Unique:
  %%    _56
  _67 = succeeded:body _56
  br _67, ^67, ^1

67:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _56
  ret _56

62:
  %% Argument types:
  %%    _23 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _23
  _49 = put_tuple `bad_generator`, _23

  %% beam_bounds_SUITE.erl:468
  %% Unique:
  %%    _49
  _59 = call (`erlang`:`error`/1), _49

  %% Aliased:
  %%    _59
  _69 = succeeded:body _59
  br ^1

1:
  _60 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _60
}

%% beam_bounds_SUITE.erl:438
%% Counter = 77
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _32 =>
%%     -12..0
function `beam_bounds_SUITE`:`'-test_commutative/2-lc$^0/1-0-'`(_17, _0, _32, Seq) {
0:
  %% Aliased:
  %%    _17
  _73 = is_nonempty_list _17
  br _73, ^73, ^69

73:
  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _36 = get_hd _17

  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _17
  _35 = get_tl _17

  %% beam_bounds_SUITE.erl:439
  %% Argument types:
  %%    _32 => -12..0
  %% Aliased:
  %%    _36
  %% Unique:
  %%    _32
  _7 = bif:'-' _36, _32

  %% Unique:
  %%    _7
  _70 = succeeded:body _7
  br _70, ^70, ^1

70:
  %% beam_bounds_SUITE.erl:439
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _7
  _8 = call (`lists`:`nthtail`/2), _7, Seq

  %% Aliased:
  %%    _8
  _71 = succeeded:body _8
  br _71, ^71, ^1

71:
  %% beam_bounds_SUITE.erl:439
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _8, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    Seq
  _64 = call (`'-test_commutative/2-lc$^1/1-1-'`/6), _8, _0, _32, _35, _36, Seq

  %% Unique:
  %%    _64
  _72 = succeeded:body _64
  br _72, ^72, ^1

72:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _64
  ret _64

69:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _74 = bif:'=:=' _17, `[]`
  br _74, ^74, ^68

74:
  %% Result type:
  %%    nil()
  ret `[]`

68:
  %% Argument types:
  %%    _17 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _17
  _34 = put_tuple `bad_generator`, _17

  %% beam_bounds_SUITE.erl:438
  %% Unique:
  %%    _34
  _65 = call (`erlang`:`error`/1), _34

  %% Aliased:
  %%    _65
  _75 = succeeded:body _65
  br ^1

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66
}

%% beam_bounds_SUITE.erl:439
%% Counter = 76
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _32 =>
%%     -12..0
%%    _36 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_commutative/2-lc$^1/1-1-'`(_19, _0, _32, _35, _36, Seq) {
0:
  %% Aliased:
  %%    _19
  _71 = is_nonempty_list _19
  br _71, ^71, ^67

71:
  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _40 = get_hd _19

  %% Argument types:
  %%    _19 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _19
  _39 = get_tl _19

  %% beam_bounds_SUITE.erl:440
  %% Argument types:
  %%    _36 => number()
  %%    _32 => -12..0
  %% Unique:
  %%    _32, 
  %%    _36
  _11 = bif:'-' _36, _32

  %% Unique:
  %%    _11
  _68 = succeeded:body _11
  br _68, ^68, ^1

68:
  %% beam_bounds_SUITE.erl:440
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _11
  _12 = call (`lists`:`nthtail`/2), _11, Seq

  %% Aliased:
  %%    _12
  _69 = succeeded:body _12
  br _69, ^69, ^1

69:
  %% beam_bounds_SUITE.erl:440
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _12, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    _40, 
  %%    Seq
  _62 = call (`'-test_commutative/2-lc$^2/1-2-'`/8), _12, _0, _32, _35, _36, _39, _40, Seq

  %% Unique:
  %%    _62
  _70 = succeeded:body _62
  br _70, ^70, ^1

70:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _62
  ret _62

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _73 = bif:'=:=' _19, `[]`
  br _73, ^73, ^66

73:
  %% beam_bounds_SUITE.erl:438
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _32, 
  %%    _35, 
  %%    Seq
  _53 = call (`'-test_commutative/2-lc$^0/1-0-'`/4), _35, _0, _32, Seq

  %% Unique:
  %%    _53
  _72 = succeeded:body _53
  br _72, ^72, ^1

72:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _53
  ret _53

66:
  %% Argument types:
  %%    _19 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _19
  _38 = put_tuple `bad_generator`, _19

  %% beam_bounds_SUITE.erl:439
  %% Unique:
  %%    _38
  _63 = call (`erlang`:`error`/1), _38

  %% Aliased:
  %%    _63
  _74 = succeeded:body _63
  br ^1

1:
  _64 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _64
}

%% beam_bounds_SUITE.erl:440
%% Counter = 74
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _32 =>
%%     -12..0
%%    _36 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_commutative/2-lc$^2/1-2-'`(_21, _0, _32, _35, _36, _39, _40, Seq) {
0:
  %% Aliased:
  %%    _21
  _69 = is_nonempty_list _21
  br _69, ^69, ^65

69:
  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _44 = get_hd _21

  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _43 = get_tl _21

  %% beam_bounds_SUITE.erl:441
  %% Argument types:
  %%    _32 => -12..0
  %% Aliased:
  %%    _44
  %% Unique:
  %%    _32
  _15 = bif:'-' _44, _32

  %% Unique:
  %%    _15
  _66 = succeeded:body _15
  br _66, ^66, ^1

66:
  %% beam_bounds_SUITE.erl:441
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _15
  _16 = call (`lists`:`nthtail`/2), _15, Seq

  %% Aliased:
  %%    _16
  _67 = succeeded:body _16
  br _67, ^67, ^1

67:
  %% beam_bounds_SUITE.erl:441
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _16, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    _40, 
  %%    _43, 
  %%    _44, 
  %%    Seq
  _60 = call (`'-test_commutative/2-lc$^3/1-3-'`/10), _16, _0, _32, _35, _36, _39, _40, _43, _44, Seq

  %% Unique:
  %%    _60
  _68 = succeeded:body _60
  br _68, ^68, ^1

68:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _60
  ret _60

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _71 = bif:'=:=' _21, `[]`
  br _71, ^71, ^64

71:
  %% beam_bounds_SUITE.erl:439
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    Seq
  _54 = call (`'-test_commutative/2-lc$^1/1-1-'`/6), _39, _0, _32, _35, _36, Seq

  %% Unique:
  %%    _54
  _70 = succeeded:body _54
  br _70, ^70, ^1

70:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _54
  ret _54

64:
  %% Argument types:
  %%    _21 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _21
  _42 = put_tuple `bad_generator`, _21

  %% beam_bounds_SUITE.erl:440
  %% Unique:
  %%    _42
  _61 = call (`erlang`:`error`/1), _42

  %% Aliased:
  %%    _61
  _72 = succeeded:body _61
  br ^1

1:
  _62 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _62
}

%% beam_bounds_SUITE.erl:441
%% Counter = 75
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _32 =>
%%     -12..0
%%    _36 =>
%%     number()
%%    _44 =>
%%     number()
function `beam_bounds_SUITE`:`'-test_commutative/2-lc$^3/1-3-'`(_23, _0, _32, _35, _36, _39, _40, _43, _44, Seq) {
0:
  %% Aliased:
  %%    _23
  _69 = is_nonempty_list _23
  br _69, ^69, ^63

69:
  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _48 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _47 = get_tl _23

  %% Argument types:
  %%    _36 => number()
  %% Aliased:
  %%    _40
  %% Unique:
  %%    _36
  _50 = put_tuple _36, _40

  %% Argument types:
  %%    _44 => number()
  %% Aliased:
  %%    _48
  %% Unique:
  %%    _44
  _49 = put_tuple _44, _48

  %% Argument types:
  %%    _50 => {number(), any()}
  %%    _49 => {number(), any()}
  %% Unique:
  %%    _49, 
  %%    _50
  _65 = bif:'=<' _50, _49
  br _65, ^73, ^64

73:
  %% beam_bounds_SUITE.erl:437
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _49, 
  %%    _50
  _56 = call (`test_commutative_1`/3), _0, _50, _49

  %% Aliased:
  %%    _56
  _66 = succeeded:body _56
  br _66, ^66, ^1

66:
  %% beam_bounds_SUITE.erl:441
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    _40, 
  %%    _43, 
  %%    _44, 
  %%    _47, 
  %%    Seq
  _57 = call (`'-test_commutative/2-lc$^3/1-3-'`/10), _47, _0, _32, _35, _36, _39, _40, _43, _44, Seq

  %% Unique:
  %%    _57
  _67 = succeeded:body _57
  br _67, ^67, ^1

67:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _57
  ret _57

64:
  %% beam_bounds_SUITE.erl:441
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    _40, 
  %%    _43, 
  %%    _44, 
  %%    _47, 
  %%    Seq
  _58 = call (`'-test_commutative/2-lc$^3/1-3-'`/10), _47, _0, _32, _35, _36, _39, _40, _43, _44, Seq

  %% Unique:
  %%    _58
  _68 = succeeded:body _58
  br _68, ^68, ^1

68:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _58
  ret _58

63:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _71 = bif:'=:=' _23, `[]`
  br _71, ^71, ^62

71:
  %% beam_bounds_SUITE.erl:440
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _32, 
  %%    _35, 
  %%    _36, 
  %%    _39, 
  %%    _40, 
  %%    _43, 
  %%    Seq
  _55 = call (`'-test_commutative/2-lc$^2/1-2-'`/8), _43, _0, _32, _35, _36, _39, _40, Seq

  %% Unique:
  %%    _55
  _70 = succeeded:body _55
  br _70, ^70, ^1

70:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _55
  ret _55

62:
  %% Argument types:
  %%    _23 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _23
  _46 = put_tuple `bad_generator`, _23

  %% beam_bounds_SUITE.erl:441
  %% Unique:
  %%    _46
  _59 = call (`erlang`:`error`/1), _46

  %% Aliased:
  %%    _59
  _72 = succeeded:body _59
  br ^1

1:
  _60 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _60
}

%% beam_bounds_SUITE.erl:389
%% Counter = 40
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`'-abs_bounds/1-lc$^0/1-0-'`(_10, Seq) {
0:
  %% Aliased:
  %%    _10
  _36 = is_nonempty_list _10
  br _36, ^36, ^32

36:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _17 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _16 = get_tl _10

  %% beam_bounds_SUITE.erl:390
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _8 = bif:'-' _17, `-7`

  %% Unique:
  %%    _8
  _33 = succeeded:body _8
  br _33, ^33, ^1

33:
  %% beam_bounds_SUITE.erl:390
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _8
  _9 = call (`lists`:`nthtail`/2), _8, Seq

  %% Aliased:
  %%    _9
  _34 = succeeded:body _9
  br _34, ^34, ^1

34:
  %% beam_bounds_SUITE.erl:390
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9, 
  %%    _16, 
  %%    _17, 
  %%    Seq
  _27 = call (`'-abs_bounds/1-lc$^1/1-1-'`/4), _9, _16, _17, Seq

  %% Unique:
  %%    _27
  _35 = succeeded:body _27
  br _35, ^35, ^1

35:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _27
  ret _27

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _37 = bif:'=:=' _10, `[]`
  br _37, ^37, ^31

37:
  %% Result type:
  %%    nil()
  ret `[]`

31:
  %% Argument types:
  %%    _10 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _10
  _15 = put_tuple `bad_generator`, _10

  %% beam_bounds_SUITE.erl:389
  %% Unique:
  %%    _15
  _28 = call (`erlang`:`error`/1), _15

  %% Aliased:
  %%    _28
  _38 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_bounds_SUITE.erl:390
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    _17 =>
%%     number()
function `beam_bounds_SUITE`:`'-abs_bounds/1-lc$^1/1-1-'`(_12, _16, _17, Seq) {
0:
  %% Aliased:
  %%    _12
  _33 = is_nonempty_list _12
  br _33, ^33, ^30

33:
  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _21 = get_hd _12

  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _20 = get_tl _12

  %% Argument types:
  %%    _17 => number()
  %% Aliased:
  %%    _21
  %% Unique:
  %%    _17
  _22 = put_tuple _17, _21

  %% beam_bounds_SUITE.erl:388
  %% Unique:
  %%    _22
  _24 = call (`abs_bounds_1`/1), _22

  %% Aliased:
  %%    _24
  _31 = succeeded:body _24
  br _31, ^31, ^1

31:
  %% beam_bounds_SUITE.erl:390
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _16, 
  %%    _17, 
  %%    _20, 
  %%    Seq
  _25 = call (`'-abs_bounds/1-lc$^1/1-1-'`/4), _20, _16, _17, Seq

  %% Unique:
  %%    _25
  _32 = succeeded:body _25
  br _32, ^32, ^1

32:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _25
  ret _25

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _35 = bif:'=:=' _12, `[]`
  br _35, ^35, ^29

35:
  %% beam_bounds_SUITE.erl:389
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _16, 
  %%    Seq
  _23 = call (`'-abs_bounds/1-lc$^0/1-0-'`/2), _16, Seq

  %% Unique:
  %%    _23
  _34 = succeeded:body _23
  br _34, ^34, ^1

34:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _23
  ret _23

29:
  %% Argument types:
  %%    _12 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _12
  _19 = put_tuple `bad_generator`, _12

  %% beam_bounds_SUITE.erl:390
  %% Unique:
  %%    _19
  _26 = call (`erlang`:`error`/1), _19

  %% Aliased:
  %%    _26
  _36 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_bounds_SUITE.erl:271
%% Counter = 51
%% bs_ensure_opt: true
%% Parameters
%%    _9 =>
%%     bitstring(256,appendable)
%%    _10 =>
%%     nonempty_list(1..2)
function `beam_bounds_SUITE`:`'-bnot_bounds_4/0-lbc$^0/2-0-'`(_10, _9) {
0:
  %% Argument types:
  %%    _10 => nonempty_list(1..2)
  %% Unique:
  %%    _10
  _26 = get_hd _10

  %% beam_bounds_SUITE.erl:271
  %% Argument types:
  %%    _26 => 1..2
  %%    _26 => 1..2
  %% Unique:
  %%    _26
  _6 = bif:'+' _26, _26

  %% beam_bounds_SUITE.erl:271
  %% Argument types:
  %%    _6 => 2..4
  %% Unique:
  %%    _6
  _8 = bif:'bnot' _6

  %% Unique:
  %%    _8
  _44 = succeeded:body _8
  br _44, ^44, ^1

44:
  %% beam_bounds_SUITE.erl:271
  %% Result type:
  %%    none()
  %% Unique:
  %%    _8, 
  %%    _9
  _20 = call (`'-bnot_bounds_4/0-lbc$^1/2-1-'`/2), _8, _9

  %% Aliased:
  %%    _20
  _45 = succeeded:body _20
  br ^1

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37
}

%% beam_bounds_SUITE.erl:271
%% Counter = 45
%% bs_ensure_opt: true
%% Parameters
%%    _14 =>
%%     bitstring(256,appendable)
%%    _15 =>
%%     integer()
function `beam_bounds_SUITE`:`'-bnot_bounds_4/0-lbc$^1/2-1-'`(_15, _14) {
0:
  %% Argument types:
  %%    _15 => integer()
  %% Unique:
  %%    _15
  _30 = put_tuple `bad_generator`, _15

  %% beam_bounds_SUITE.erl:271
  %% Unique:
  %%    _30
  _34 = call (`erlang`:`error`/1), _30

  %% Aliased:
  %%    _34
  _42 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% beam_bounds_SUITE.erl:226
%% Counter = 104
%% bs_ensure_opt: true
function `beam_bounds_SUITE`:`'-bnot_bounds/1-lc$^0/1-0-'`(_10, Seq) {
0:
  %% Aliased:
  %%    _10
  _100 = is_nonempty_list _10
  br _100, ^100, ^96

100:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _54 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _53 = get_tl _10

  %% beam_bounds_SUITE.erl:227
  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _8 = bif:'-' _54, `-7`

  %% Unique:
  %%    _8
  _97 = succeeded:body _8
  br _97, ^97, ^1

97:
  %% beam_bounds_SUITE.erl:227
  %% Aliased:
  %%    Seq
  %% Unique:
  %%    _8
  _9 = call (`lists`:`nthtail`/2), _8, Seq

  %% Aliased:
  %%    _9
  _98 = succeeded:body _9
  br _98, ^98, ^1

98:
  %% beam_bounds_SUITE.erl:227
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9, 
  %%    _53, 
  %%    _54, 
  %%    Seq
  _91 = call (`'-bnot_bounds/1-lc$^1/1-1-'`/4), _9, _53, _54, Seq

  %% Unique:
  %%    _91
  _99 = succeeded:body _91
  br _99, ^99, ^1

99:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _91
  ret _91

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _101 = bif:'=:=' _10, `[]`
  br _101, ^101, ^95

101:
  %% Result type:
  %%    nil()
  ret `[]`

95:
  %% Argument types:
  %%    _10 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _10
  _52 = put_tuple `bad_generator`, _10

  %% beam_bounds_SUITE.erl:226
  %% Unique:
  %%    _52
  _92 = call (`erlang`:`error`/1), _52

  %% Aliased:
  %%    _92
  _102 = succeeded:body _92
  br ^1

1:
  _93 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _93
}

%% beam_bounds_SUITE.erl:227
%% Counter = 103
%% bs_ensure_opt: true
%% Parameters
%%    _54 =>
%%     number()
function `beam_bounds_SUITE`:`'-bnot_bounds/1-lc$^1/1-1-'`(_12, _53, _54, Seq) {
0:
  %% Aliased:
  %%    _12
  _97 = is_nonempty_list _12
  br _97, ^97, ^94

97:
  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _58 = get_hd _12

  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _57 = get_tl _12

  %% Argument types:
  %%    _54 => number()
  %% Aliased:
  %%    _58
  %% Unique:
  %%    _54
  _59 = put_tuple _54, _58

  %% beam_bounds_SUITE.erl:225
  %% Unique:
  %%    _59
  _88 = call (`bnot_bounds_1`/1), _59

  %% Aliased:
  %%    _88
  _95 = succeeded:body _88
  br _95, ^95, ^1

95:
  %% beam_bounds_SUITE.erl:227
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _53, 
  %%    _54, 
  %%    _57, 
  %%    Seq
  _89 = call (`'-bnot_bounds/1-lc$^1/1-1-'`/4), _57, _53, _54, Seq

  %% Unique:
  %%    _89
  _96 = succeeded:body _89
  br _96, ^96, ^1

96:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _89
  ret _89

94:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _99 = bif:'=:=' _12, `[]`
  br _99, ^99, ^93

99:
  %% beam_bounds_SUITE.erl:226
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _53, 
  %%    Seq
  _87 = call (`'-bnot_bounds/1-lc$^0/1-0-'`/2), _53, Seq

  %% Unique:
  %%    _87
  _98 = succeeded:body _87
  br _98, ^98, ^1

98:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _87
  ret _87

93:
  %% Argument types:
  %%    _12 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _12
  _56 = put_tuple `bad_generator`, _12

  %% beam_bounds_SUITE.erl:227
  %% Unique:
  %%    _56
  _90 = call (`erlang`:`error`/1), _56

  %% Aliased:
  %%    _90
  _100 = succeeded:body _90
  br ^1

1:
  _91 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _91
}
