module beam_block_SUITE.
exports [{all,0},
         {coverage,1},
         {encode_wildcards3,4},
         {end_per_group,2},
         {end_per_suite,1},
         {erl_202,1},
         {find_operands,4},
         {get_map_elements,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {local_cse,1},
         {module_info,0},
         {module_info,1},
         {move_opt_across_gc_bif,1},
         {otp_7345,1},
         {repro,1},
         {second_block_pass,1},
         {suite,0}].
attributes [].

%% beam_block_SUITE.erl:32
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_block_SUITE.erl:34
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_block_SUITE.erl:37
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [get_map_elements,otp_7345,move_opt_across_gc_bif,erl_202,repro,
      local_cse,second_block_pass,coverage]}]`
}

%% beam_block_SUITE.erl:49
%% Counter = 6
%% bs_ensure_opt: true
function `beam_block_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_block_SUITE.erl:50
  _2 = call (`test_lib`:`recompile`/1), `beam_block_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_block_SUITE.erl:53
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_block_SUITE.erl:56
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_block_SUITE.erl:59
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_block_SUITE.erl:62
%% Counter = 28
%% bs_ensure_opt: true
function `beam_block_SUITE`:`get_map_elements`(_0) {
0:
  %% beam_block_SUITE.erl:63
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  _4 = call (`get_map_elements`/3), `[{pred,var}]`, `#{}`, `[]`

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _4 => 'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _4
  _26 = bif:'=:=' _4, `[{pred,var}]`
  br _26, ^26, ^14

26:
  %% beam_block_SUITE.erl:64
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  _5 = call (`get_map_elements`/3), `[{pred,var}]`, `#{pred => []}`, `[]`

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _5 => 'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _5
  _24 = bif:'=:=' _5, `[{pred,var}]`
  br _24, ^24, ^17

24:
  %% beam_block_SUITE.erl:65
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  _6 = call (`get_map_elements`/3), `[]`, `#{pred => []}`, `acc`

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => 'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _6
  _22 = bif:'=:=' _6, `acc`
  br _22, ^21, ^20

21:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% beam_block_SUITE.erl:65
  %% Unique:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _23 = succeeded:body _7
  br ^1

17:
  %% beam_block_SUITE.erl:64
  %% Unique:
  %%    _5
  _8 = match_fail `badmatch`, _5

  %% Unique:
  %%    _8
  _25 = succeeded:body _8
  br ^1

14:
  %% beam_block_SUITE.erl:63
  %% Unique:
  %%    _4
  _9 = match_fail `badmatch`, _4

  %% Unique:
  %%    _9
  _27 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_block_SUITE.erl:68
%% Counter = 50
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list({'pred', 'var'})
%%    _1 =>
%%     #{'pred'=>nil()}
%%    _2 =>
%%     'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
function `beam_block_SUITE`:`get_map_elements`(_0, _1, _2) {
0:
  %% Unique:
  %%    _0
  _45 = is_nonempty_list _0
  br _45, ^45, ^46

45:
  %% Argument types:
  %%    _0 => nonempty_list({'pred', 'var'})
  %% Unique:
  %%    _0
  _9 = get_tl _0

  %% Argument types:
  %%    _2 => 'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _2
  _17 = put_list `{pred,var}`, _2

  %% beam_block_SUITE.erl:76
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _1, 
  %%    _17
  _18 = call (`get_map_elements`/3), _9, _1, _17

  %% Unique:
  %%    _18
  _38 = succeeded:body _18
  br _38, ^38, ^1

38:
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _18
  ret _18

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23

46:
  %% Result type:
  %%    'acc' | maybe_improper_list({'pred', 'var'}, 'acc' | nil())
  %% Unique:
  %%    _2
  ret _2
}

%% beam_block_SUITE.erl:106
%% Counter = 26
%% bs_ensure_opt: true
function `beam_block_SUITE`:`otp_7345`(_0) {
0:
  %% beam_block_SUITE.erl:108
  _3 = call (`otp_7345`/3), `{contextId,undefined,undefined,undefined}`, `0`, `[[1,2,3],4,5]`

  %% Aliased:
  %%    _3
  _12 = succeeded:body _3
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _22 = is_tagged_tuple _3, `4`, `llUnitdataReq`
  br _22, ^19, ^14

19:
  %% Argument types:
  %%    _3 => {'llUnitdataReq', any(), any(), any()}
  %% Aliased:
  %%    _3
  _6 = get_tuple_element _3, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _18 = bif:'=:=' _6, `3`
  br _18, ^17, ^14

17:
  %% Argument types:
  %%    _3 => {'llUnitdataReq', any(), 3, any()}
  %% Aliased:
  %%    _3
  _5 = get_tuple_element _3, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _16 = bif:'=:=' _5, `4`
  br _16, ^15, ^14

15:
  %% Result type:
  %%    {'llUnitdataReq', any(), 3, 4}
  %% Aliased:
  %%    _3
  ret _3

14:
  %% beam_block_SUITE.erl:107
  %% Aliased:
  %%    _3
  _9 = match_fail `badmatch`, _3

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_block_SUITE.erl:111
%% Counter = 50
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'contextId', 'undefined', 'undefined', 'undefined'}
%%    _1 =>
%%     0
%%    _2 =>
%%     nonempty_list(nonempty_list(1..3) | 4..5)
function `beam_block_SUITE`:`otp_7345`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _2 => nonempty_list(nonempty_list(1..3) | 4..5)
  %% Unique:
  %%    _2
  _26 = get_hd _2

  %% beam_block_SUITE.erl:122
  %% Argument types:
  %%    _26 => nonempty_list(1..3) | 4..5
  %% Unique:
  %%    _26
  _11 = bif:length _26

  %% Unique:
  %%    _11
  _43 = succeeded:body _11
  br _43, ^43, ^1

43:
  %% beam_block_SUITE.erl:124
  _9 = call (`id`/1), `42`

  %% Aliased:
  %%    _9
  _44 = succeeded:body _9
  br _44, ^44, ^1

44:
  %% beam_block_SUITE.erl:125
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _10 = bif:'div' _9, `10`

  %% Unique:
  %%    _10
  _45 = succeeded:body _10
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _11 => 0..288230376151711743
  %%    _10 => integer()
  %% Unique:
  %%    _10, 
  %%    _11
  LlUnitdataReq = put_tuple `llUnitdataReq`, `7`, _11, _10

  %% beam_block_SUITE.erl:127
  %% Unique:
  %%    LlUnitdataReq
  _28 = call (`id`/1), LlUnitdataReq

  %% Aliased:
  %%    _28
  _46 = succeeded:body _28
  br _46, ^46, ^1

46:
  %% Aliased:
  %%    _28
  ret _28

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% beam_block_SUITE.erl:131
%% Counter = 11
%% bs_ensure_opt: true
function `beam_block_SUITE`:`move_opt_across_gc_bif`(_0) {
0:
  %% beam_block_SUITE.erl:132
  %% Result type:
  %%    nonempty_list('true' | 0..1)
  _2 = call (`positive`/1), `speaking`

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    _2 => nonempty_list('true' | 0..1)
  %% Unique:
  %%    _2
  _9 = bif:'=:=' _2, `[0,true,1]`
  br _9, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% beam_block_SUITE.erl:132
  %% Unique:
  %%    _2
  _3 = match_fail `badmatch`, _2

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_block_SUITE.erl:135
%% Counter = 51
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'speaking'
function `beam_block_SUITE`:`positive`(_0) {
0:
  br ^50

50:
  _25 = new_try_tag `'try'`
  br _25, ^24, ^22

24:
  %% beam_block_SUITE.erl:138
  %% Result type:
  %%    1
  _2 = call (`paris`/2), `[]`, `0`

  %% Unique:
  %%    _2
  _26 = succeeded:body _2
  br _26, ^21, ^22

21:
  %% Unique:
  %%    _25
  _30 = kill_try_tag _25
  %% Result type:
  %%    nonempty_list('true' | 0..1)
  ret `[0,true,1]`

22:
  %% Unique:
  %%    _25
  _28 = landingpad `'try'`, _25

  %% Aliased:
  %%    _28
  _9 = extract _28, `1`

  %% Aliased:
  %%    _28
  _8 = extract _28, `2`

  %% Unique:
  %%    _25
  _29 = kill_try_tag _25

  %% Aliased:
  %%    _8, 
  %%    _9
  _16 = resume _8, _9

  %% Unique:
  %%    _16
  _27 = succeeded:body _16
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% beam_block_SUITE.erl:143
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil()
%%    _1 =>
%%     0
function `beam_block_SUITE`:`paris`(_0, _1) {
0:
  %% Result type:
  %%    1
  ret `1`
}

%% beam_block_SUITE.erl:153
%% Counter = 34
%% bs_ensure_opt: true
function `beam_block_SUITE`:`erl_202`(_0) {
0:
  %% beam_block_SUITE.erl:154
  Ref = call (`erlang`:`make_ref`/0)

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _7 = put_tuple `{1,2}`, Ref

  %% beam_block_SUITE.erl:155
  %% Result type:
  %%    8 | reference()
  %% Unique:
  %%    _7
  _8 = call (`erl_202`/2), _7, `42`

  %% Unique:
  %%    _8
  _18 = succeeded:body _8
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _8 => 8 | reference()
  %%    Ref => reference()
  %% Unique:
  %%    _8, 
  %%    Ref
  _21 = bif:'=:=' _8, Ref
  br _21, ^21, ^20

21:
  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _9 = put_tuple `erl_202_r2`, Ref

  %% Argument types:
  %%    _9 => {'erl_202_r2', reference()}
  %% Unique:
  %%    _9
  _10 = put_tuple `erl_202_r1`, _9

  %% beam_block_SUITE.erl:157
  %% Result type:
  %%    8 | {reference()} | reference()
  %% Unique:
  %%    _10
  _11 = call (`erl_202`/2), `{7,8}`, _10

  %% Unique:
  %%    _11
  _22 = succeeded:body _11
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _11 => 8 | {reference()} | reference()
  %% Unique:
  %%    _11
  _27 = bif:is_tuple _11
  br _27, ^26, ^24

26:
  %% Argument types:
  %%    _11 => {reference()}
  %% Unique:
  %%    _11
  _12 = get_tuple_element _11, `0`

  %% Argument types:
  %%    _12 => reference()
  %%    Ref => reference()
  %% Unique:
  %%    _12, 
  %%    Ref
  _25 = bif:'=:=' _12, Ref
  br _25, ^25, ^24

25:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% beam_block_SUITE.erl:157
  %% Unique:
  %%    _11
  _13 = match_fail `badmatch`, _11

  %% Unique:
  %%    _13
  _30 = succeeded:body _13
  br ^1

20:
  %% beam_block_SUITE.erl:155
  %% Unique:
  %%    _8
  _14 = match_fail `badmatch`, _8

  %% Unique:
  %%    _14
  _31 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_block_SUITE.erl:161
%% Counter = 53
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {7, 8} | {{1, 2}, reference()}
%%    _1 =>
%%     42 | {'erl_202_r1', {'erl_202_r2', reference()}}
function `beam_block_SUITE`:`erl_202`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => {7, 8} | {{1, 2}, reference()}
  %% Unique:
  %%    _0
  _12 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _12 => 7 | {1, 2}
  %% Unique:
  %%    _12
  _28 = bif:is_tuple _12
  br _28, ^27, ^26

27:
  %% Argument types:
  %%    _0 => {7, 8} | {{1, 2}, reference()}
  %% Unique:
  %%    _0
  _11 = get_tuple_element _0, `1`
  %% Result type:
  %%    8 | reference()
  %% Unique:
  %%    _11
  ret _11

26:
  %% Argument types:
  %%    _1 => 42 | {'erl_202_r1', {'erl_202_r2', reference()}}
  %% Unique:
  %%    _1
  _43 = bif:is_tuple _1
  br _43, ^33, ^25

33:
  %% Argument types:
  %%    _1 => {'erl_202_r1', {'erl_202_r2', reference()}}
  %% Unique:
  %%    _1
  _13 = get_tuple_element _1, `1`

  %% Argument types:
  %%    _13 => {'erl_202_r2', reference()}
  %% Aliased:
  %%    _13
  _16 = get_tuple_element _13, `1`

  %% Argument types:
  %%    _16 => reference()
  %% Unique:
  %%    _16
  _51 = put_tuple _16
  %% Result type:
  %%    {reference()}
  %% Unique:
  %%    _51
  ret _51

25:
  %% beam_block_SUITE.erl:161
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-erl_202/2-',2}}
  _22 = match_fail `function_clause`, _0, `42`

  %% Unique:
  %%    _22
  _50 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% beam_block_SUITE.erl:171
%% Counter = 33
%% bs_ensure_opt: true
function `beam_block_SUITE`:`repro`(_0) {
0:
  %% beam_block_SUITE.erl:172
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  _1 = call (`repro`/3), `[]`, `#{}`, `#{}`

  %% Aliased:
  %%    _1
  _15 = succeeded:body _1
  br _15, ^15, ^1

15:
  %% beam_block_SUITE.erl:172
  %% Aliased:
  %%    _1
  _7 = call (`maps`:`to_list`/1), _1

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _7 => list({'tmp1', 'n' | 'name'})
  %% Aliased:
  %%    _7
  _31 = bif:'=:=' _7, `[]`
  br _31, ^31, ^18

31:
  %% beam_block_SUITE.erl:173
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  _3 = call (`repro`/3), `[{tmp1,0}]`, `#{}`, `#{}`

  %% Aliased:
  %%    _3
  _19 = succeeded:body _3
  br _19, ^19, ^1

19:
  %% beam_block_SUITE.erl:173
  %% Aliased:
  %%    _3
  _8 = call (`maps`:`to_list`/1), _3

  %% Aliased:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _8 => list({'tmp1', 'n' | 'name'})
  %% Aliased:
  %%    _8
  _29 = bif:'=:=' _8, `[{tmp1,n}]`
  br _29, ^29, ^22

29:
  %% beam_block_SUITE.erl:174
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  _5 = call (`repro`/3), `[{tmp1,0}]`, `#{}`, `#{0 => name}`

  %% Aliased:
  %%    _5
  _23 = succeeded:body _5
  br _23, ^23, ^1

23:
  %% beam_block_SUITE.erl:174
  %% Aliased:
  %%    _5
  _9 = call (`maps`:`to_list`/1), _5

  %% Aliased:
  %%    _9
  _24 = succeeded:body _9
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _9 => list({'tmp1', 'n' | 'name'})
  %% Aliased:
  %%    _9
  _27 = bif:'=:=' _9, `[{tmp1,name}]`
  br _27, ^27, ^26

27:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% beam_block_SUITE.erl:174
  %% Aliased:
  %%    _9
  _10 = match_fail `badmatch`, _9

  %% Unique:
  %%    _10
  _28 = succeeded:body _10
  br ^1

22:
  %% beam_block_SUITE.erl:173
  %% Aliased:
  %%    _8
  _11 = match_fail `badmatch`, _8

  %% Unique:
  %%    _11
  _30 = succeeded:body _11
  br ^1

18:
  %% beam_block_SUITE.erl:172
  %% Aliased:
  %%    _7
  _12 = match_fail `badmatch`, _7

  %% Unique:
  %%    _12
  _32 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_block_SUITE.erl:177
%% Counter = 54
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list({'tmp1', 0})
%%    _1 =>
%%     #{'tmp1'=>'n' | 'name'}
%%    _2 =>
%%     #{0=>'n' | 'name'}
function `beam_block_SUITE`:`repro`(_0, _1, _2) {
0:
  %% Unique:
  %%    _0
  _50 = is_nonempty_list _0
  br _50, ^50, ^51

50:
  %% Argument types:
  %%    _0 => nonempty_list({'tmp1', 0})
  %% Unique:
  %%    _0
  _14 = get_tl _0

  %% Argument types:
  %%    _2 => #{0=>'n' | 'name'}
  %% Aliased:
  %%    _2
  _18 = get_map_element _2, `0`

  %% Aliased:
  %%    _18
  _34 = succeeded:guard _18
  br _34, ^34, ^37

34:
  br ^31

37:
  %% beam_block_SUITE.erl:183
  %% Aliased:
  %%    _2
  _19 = put_map `assoc`, _2, `0`, `n`
  br ^31

31:
  _11 = phi { _18, ^34 }, { `n`, ^37 }
  _12 = phi { _2, ^34 }, { _19, ^37 }

  %% beam_block_SUITE.erl:185
  %% Aliased:
  %%    _1, 
  %%    _11
  _23 = put_map `assoc`, _1, `tmp1`, _11

  %% beam_block_SUITE.erl:185
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  %% Aliased:
  %%    _12, 
  %%    _23
  _25 = call (`repro`/3), _14, _23, _12

  %% Aliased:
  %%    _25
  _45 = succeeded:body _25
  br _45, ^45, ^1

45:
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  %% Aliased:
  %%    _25
  ret _25

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27

51:
  %% Result type:
  %%    #{'tmp1'=>'n' | 'name'}
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_block_SUITE.erl:207
%% Counter = 83
%% bs_ensure_opt: true
function `beam_block_SUITE`:`encode_wildcards3`(_0, _1, _2, _3) {
0:
  %% Aliased:
  %%    _0
  _78 = is_nonempty_list _0
  br _78, ^78, ^40

78:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _20 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _19 = get_tl _0

  %% Aliased:
  %%    _1
  _77 = is_nonempty_list _1
  br _77, ^77, ^39

77:
  %% Argument types:
  %%    _1 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _1
  _22 = get_hd _1

  %% Argument types:
  %%    _1 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _1
  _21 = get_tl _1
  _44 = new_try_tag `'catch'`
  br _44, ^42, ^43

42:
  %% beam_block_SUITE.erl:209
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _22
  _5 = bif:'-' _3, _22

  %% Unique:
  %%    _5
  _46 = succeeded:body _5
  br _46, ^46, ^43

46:
  %% beam_block_SUITE.erl:210
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _4 = bif:length _19

  %% Unique:
  %%    _4
  _47 = succeeded:body _4
  br _47, ^47, ^43

47:
  %% beam_block_SUITE.erl:209
  %% Aliased:
  %%    _20, 
  %%    _22
  %% Unique:
  %%    _4, 
  %%    _5
  _30 = call (`beam_block_SUITE`:`encode_wildcard`/4), _20, _22, _5, _4

  %% Aliased:
  %%    _30
  _48 = succeeded:body _30
  br _48, ^48, ^43

48:
  br ^41

43:
  %% Unique:
  %%    _44
  _51 = landingpad `'catch'`, _44

  %% Aliased:
  %%    _51
  _49 = extract _51, `0`
  br ^41

41:
  _52 = phi { _49, ^43 }, { _30, ^48 }

  %% Aliased:
  %%    _52
  %% Unique:
  %%    _44
  _6 = catch_end _44, _52

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _68 = bif:is_tuple _6
  br _68, ^68, ^55

68:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _69 = bif:tuple_size _6

  %% Argument types:
  %%    _69 => 0..16777215
  %% Unique:
  %%    _69
  _70 = bif:'=:=' _69, `2`
  br _70, ^67, ^54

67:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _24 = get_tuple_element _6, `0`

  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _23 = get_tuple_element _6, `1`
  switch _24, ^54, [
    { `'EXIT'`, ^65 },
    { `level`, ^66 },
    { `recursive`, ^64 }
  ]

64:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _32 = put_list _23, `[]`
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _32
  ret _32

66:
  %% beam_block_SUITE.erl:219
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _10 = bif:'+' _2, `1`

  %% Unique:
  %%    _10
  _61 = succeeded:body _10
  br _61, ^61, ^1

61:
  %% beam_block_SUITE.erl:219
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _22
  _9 = bif:'-' _3, _22

  %% Unique:
  %%    _9
  _62 = succeeded:body _9
  br _62, ^62, ^1

62:
  %% beam_block_SUITE.erl:219
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _19, 
  %%    _21
  %% Unique:
  %%    _9, 
  %%    _10
  _11 = call (`encode_wildcards3`/4), _19, _21, _10, _9

  %% Unique:
  %%    _11
  _63 = succeeded:body _11
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    _11 => list(any())
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _11
  _33 = put_list _23, _11
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _33
  ret _33

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _58 = bif:is_tuple _23
  br _58, ^58, ^54

58:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _59 = bif:tuple_size _23

  %% Argument types:
  %%    _59 => 0..16777215
  %% Unique:
  %%    _59
  _60 = bif:'=:=' _59, `2`
  br _60, ^57, ^54

57:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Aliased:
  %%    _23
  _26 = get_tuple_element _23, `0`

  %% Argument types:
  %%    _23 => {any(), any()}
  %% Aliased:
  %%    _23
  _25 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _25
  _27 = put_tuple _2, _25

  %% Argument types:
  %%    _27 => {any(), any()}
  %% Aliased:
  %%    _26
  %% Unique:
  %%    _27
  _28 = put_tuple _26, _27

  %% beam_block_SUITE.erl:212
  %% Unique:
  %%    _28
  _34 = call (`erlang`:`exit`/1), _28

  %% Unique:
  %%    _34
  _56 = succeeded:body _34
  br ^1

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _75 = bif:'=:=' _6, `no_wildcard`
  br _75, ^74, ^54

74:
  %% beam_block_SUITE.erl:215
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _8 = bif:'+' _2, `1`

  %% Unique:
  %%    _8
  _71 = succeeded:body _8
  br _71, ^71, ^1

71:
  %% beam_block_SUITE.erl:215
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _22
  _7 = bif:'-' _3, _22

  %% Unique:
  %%    _7
  _72 = succeeded:body _7
  br _72, ^72, ^1

72:
  %% beam_block_SUITE.erl:215
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _19, 
  %%    _21
  %% Unique:
  %%    _7, 
  %%    _8
  _31 = call (`encode_wildcards3`/4), _19, _21, _8, _7

  %% Unique:
  %%    _31
  _73 = succeeded:body _31
  br _73, ^73, ^1

73:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _31
  ret _31

54:
  %% beam_block_SUITE.erl:209
  %% Aliased:
  %%    _6
  _35 = match_fail `case_clause`, _6

  %% Unique:
  %%    _35
  _76 = succeeded:body _35
  br ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _80 = bif:'=:=' _0, `[]`
  br _80, ^80, ^39

80:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _79 = bif:'=:=' _1, `[]`
  br _79, ^79, ^39

79:
  %% Result type:
  %%    nil()
  ret `[]`

39:
  %% beam_block_SUITE.erl:207
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2, 
  %%    _3
  %% Anno: #{inlined => {'-inlined-encode_wildcards3/4-',4}}
  _36 = match_fail `function_clause`, _0, _1, _2, _3

  %% Unique:
  %%    _36
  _81 = succeeded:body _36
  br ^1

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37
}

%% beam_block_SUITE.erl:235
%% Counter = 42
%% bs_ensure_opt: true
function `beam_block_SUITE`:`find_operands`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _25 = bif:'=:=' _2, `[]`
  br _25, ^25, ^24

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _16 = put_tuple _0, _1
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _16
  ret _16

24:
  %% beam_block_SUITE.erl:238
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _13 = call (`beam_block_SUITE`:`find_operands_for_active_list`/4), _0, _1, _2, `[]`

  %% Aliased:
  %%    _13
  _26 = succeeded:body _13
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _37 = bif:is_tuple _13
  br _37, ^37, ^28

37:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _38 = bif:tuple_size _13

  %% Argument types:
  %%    _38 => 0..16777215
  %% Unique:
  %%    _38
  _39 = bif:'=:=' _38, `2`
  br _39, ^36, ^28

36:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% beam_block_SUITE.erl:240
  %% Aliased:
  %%    _14
  NewActiveList = call (`lists`:`reverse`/1), _14

  %% Aliased:
  %%    NewActiveList
  _29 = succeeded:body NewActiveList
  br _29, ^29, ^1

29:
  %% beam_block_SUITE.erl:241
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _17 = bif:'+' _3, `1`

  %% Unique:
  %%    _17
  _30 = succeeded:body _17
  br _30, ^31, ^1

31:
  %% beam_block_SUITE.erl:241
  %% Aliased:
  %%    _1
  _6 = call (`digraph`:`vertices`/1), _1

  %% Aliased:
  %%    _6
  _32 = succeeded:body _6
  br _32, ^32, ^1

32:
  %% beam_block_SUITE.erl:241
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _19 = bif:length _6

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br _33, ^33, ^1

33:
  %% beam_block_SUITE.erl:242
  %% Argument types:
  %%    _3 => number()
  %% Unique:
  %%    _3
  _10 = bif:'+' _3, `1`

  %% Unique:
  %%    _10
  _34 = succeeded:body _10
  br _34, ^34, ^1

34:
  %% beam_block_SUITE.erl:242
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _1, 
  %%    _15, 
  %%    NewActiveList
  %% Unique:
  %%    _10
  _20 = call (`find_operands`/4), _15, _1, NewActiveList, _10

  %% Unique:
  %%    _20
  _35 = succeeded:body _20
  br _35, ^35, ^1

35:
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _20
  ret _20

28:
  %% beam_block_SUITE.erl:238
  %% Aliased:
  %%    _13
  _21 = match_fail `badmatch`, _13

  %% Unique:
  %%    _21
  _40 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% beam_block_SUITE.erl:246
%% Counter = 80
%% bs_ensure_opt: true
function `beam_block_SUITE`:`local_cse`(_0) {
0:
  %% beam_block_SUITE.erl:247
  %% Result type:
  %%    {pid(), {'ok', pid()}}
  _12 = call (`local_cse_1`/0)

  %% Unique:
  %%    _12
  _33 = succeeded:body _12
  br _33, ^65, ^1

65:
  %% Argument types:
  %%    _12 => {pid(), {'ok', pid()}}
  %% Unique:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% Argument types:
  %%    _13 => {'ok', pid()}
  %% Unique:
  %%    _13
  _15 = get_tuple_element _13, `1`

  %% Argument types:
  %%    _12 => {pid(), {'ok', pid()}}
  %% Unique:
  %%    _12
  _14 = get_tuple_element _12, `0`

  %% Argument types:
  %%    _15 => pid()
  %%    _14 => pid()
  %% Unique:
  %%    _14, 
  %%    _15
  _36 = bif:'=:=' _15, _14
  br _36, ^36, ^35

36:
  %% beam_block_SUITE.erl:249
  _25 = call (`local_cse_2`/1), `[]`

  %% Aliased:
  %%    _25
  _37 = succeeded:body _25
  br _37, ^37, ^1

37:
  %% beam_block_SUITE.erl:250
  _2 = call (`lists`:`seq`/2), `1`, `512`

  %% Aliased:
  %%    _2
  _38 = succeeded:body _2
  br _38, ^38, ^1

38:
  %% beam_block_SUITE.erl:250
  %% Aliased:
  %%    _2
  _26 = call (`local_cse_2`/1), _2

  %% Aliased:
  %%    _26
  _39 = succeeded:body _26
  br _39, ^39, ^1

39:
  %% beam_block_SUITE.erl:251
  _3 = call (`beam_block_SUITE`:`module_info`/0)

  %% Aliased:
  %%    _3
  _40 = succeeded:body _3
  br _40, ^40, ^1

40:
  %% beam_block_SUITE.erl:251
  %% Aliased:
  %%    _3
  _27 = call (`local_cse_2`/1), _3

  %% Aliased:
  %%    _27
  _41 = succeeded:body _27
  br _41, ^41, ^1

41:
  %% beam_block_SUITE.erl:253
  %% Result type:
  %%    {nonempty_list('b'), nonempty_list('a' | 'b')}
  _17 = call (`local_cse_3`/2), `a`, `b`

  %% Unique:
  %%    _17
  _42 = succeeded:body _17
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    _17 => {nonempty_list('b'), nonempty_list('a' | 'b')}
  %% Unique:
  %%    _17
  _63 = bif:'=:=' _17, `{[b],[a,b]}`
  br _63, ^63, ^44

63:
  %% beam_block_SUITE.erl:255
  %% Result type:
  %%    {2000, pid(), {pid(), 'write_cache'}}
  _18 = call (`local_cse_4`/0)

  %% Unique:
  %%    _18
  _45 = succeeded:body _18
  br _45, ^50, ^1

50:
  %% Argument types:
  %%    _18 => {2000, pid(), {pid(), 'write_cache'}}
  %% Unique:
  %%    _18
  _20 = get_tuple_element _18, `1`

  %% beam_block_SUITE.erl:255
  %% Argument types:
  %%    _20 => pid()
  %%    _14 => pid()
  %% Unique:
  %%    _14, 
  %%    _20
  _10 = bif:'=:=' _20, _14
  br _10, ^78, ^47

78:
  %% Argument types:
  %%    _18 => {2000, pid(), {pid(), 'write_cache'}}
  %% Unique:
  %%    _18
  _19 = get_tuple_element _18, `2`

  %% Argument types:
  %%    _19 => {pid(), 'write_cache'}
  %% Unique:
  %%    _19
  _23 = get_tuple_element _19, `0`

  %% beam_block_SUITE.erl:255
  %% Argument types:
  %%    _23 => pid()
  %%    _14 => pid()
  %% Unique:
  %%    _14, 
  %%    _23
  _11 = bif:'=:=' _23, _14
  br _11, ^49, ^47

49:
  %% Result type:
  %%    'ok'
  ret `ok`

47:
  %% beam_block_SUITE.erl:255
  %% Unique:
  %%    _18
  _28 = match_fail `badmatch`, _18

  %% Unique:
  %%    _28
  _62 = succeeded:body _28
  br ^1

44:
  %% beam_block_SUITE.erl:253
  %% Unique:
  %%    _17
  _29 = match_fail `badmatch`, _17

  %% Unique:
  %%    _29
  _64 = succeeded:body _29
  br ^1

35:
  %% beam_block_SUITE.erl:247
  %% Unique:
  %%    _12
  _30 = match_fail `badmatch`, _12

  %% Unique:
  %%    _30
  _75 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_block_SUITE.erl:259
%% Counter = 6
%% bs_ensure_opt: true
function `beam_block_SUITE`:`local_cse_1`() {
0:
  %% beam_block_SUITE.erl:264
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _2 = put_tuple `ok`, _1

  %% Argument types:
  %%    _1 => pid()
  %%    _2 => {'ok', pid()}
  %% Unique:
  %%    _1, 
  %%    _2
  _3 = put_tuple _1, _2
  %% Result type:
  %%    {pid(), {'ok', pid()}}
  %% Unique:
  %%    _3
  ret _3
}

%% beam_block_SUITE.erl:266
%% Counter = 110
%% bs_ensure_opt: true
function `beam_block_SUITE`:`local_cse_2`(_0) {
0:
  %% beam_block_SUITE.erl:267
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _0
  _12 = call (`cse_make_binary`/1), _0

  %% Aliased:
  %%    _12
  _52 = succeeded:body _12
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    _12 => bitstring(8)
  %% Aliased:
  %%    _12
  _21 = bs_start_match `new`, _12
  _105 = bs_ensure _21, `8`, `1`
  _106 = succeeded:guard _105
  br _106, ^104, ^20

104:
  %% beam_block_SUITE.erl:268
  %% Argument types:
  %%    _105 => bs_context(8)
  %% Aliased:
  %%    _21
  %% Anno: #{ensured => true}
  _22 = bs_match `integer`, _105, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _22
  _57 = succeeded:guard _22
  br _57, ^57, ^20

57:
  %% Aliased:
  %%    _22
  _23 = bs_extract _22

  %% beam_block_SUITE.erl:268
  %% Argument types:
  %%    _22 => bs_context(8)
  %%    _23 => 0..255
  %% Aliased:
  %%    _22
  %% Unique:
  %%    _23
  _27 = bs_match `binary`, _22, `[unsigned,big]`, _23, `8`

  %% Aliased:
  %%    _27
  _61 = succeeded:guard _27
  br _61, ^61, ^20

61:
  %% Aliased:
  %%    _27
  _28 = bs_extract _27

  %% Aliased:
  %%    _27
  _67 = bs_test_tail _27, `0`
  br _67, ^67, ^20

67:
  %% beam_block_SUITE.erl:269
  %% Aliased:
  %%    _28
  _7 = call (`erlang`:`binary_to_term`/1), _28

  %% Aliased:
  %%    _7
  _62 = succeeded:body _7
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _7
  _65 = bif:'=:=' _7, _0
  br _65, ^65, ^64

65:
  %% Aliased:
  %%    _7
  ret _7

64:
  %% beam_block_SUITE.erl:269
  %% Aliased:
  %%    _7
  _45 = match_fail `badmatch`, _7

  %% Unique:
  %%    _45
  _66 = succeeded:body _45
  br ^1

20:
  %% Argument types:
  %%    _12 => bitstring(8)
  %% Aliased:
  %%    _12
  _30 = bs_start_match `new`, _12
  _108 = bs_ensure _30, `8`, `1`
  _109 = succeeded:guard _108
  br _109, ^107, ^19

107:
  %% beam_block_SUITE.erl:270
  %% Argument types:
  %%    _108 => bs_context(8)
  %% Aliased:
  %%    _30
  %% Anno: #{ensured => true}
  _31 = bs_match `integer`, _108, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _31
  _72 = succeeded:guard _31
  br _72, ^72, ^19

72:
  %% Aliased:
  %%    _31
  _32 = bs_extract _31

  %% beam_block_SUITE.erl:270
  %% Argument types:
  %%    _31 => bs_context(8)
  %%    _32 => 0..255
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _32
  _37 = bs_match `binary`, _31, `[unsigned,big]`, _32, `8`

  %% Aliased:
  %%    _37
  _76 = succeeded:guard _37
  br _76, ^76, ^19

76:
  %% Aliased:
  %%    _37
  _38 = bs_extract _37

  %% beam_block_SUITE.erl:271
  %% Aliased:
  %%    _38
  _41 = call (`erlang`:`binary_to_term`/1), _38

  %% Aliased:
  %%    _41
  _78 = succeeded:body _41
  br _78, ^78, ^1

78:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _94 = is_tagged_tuple _41, `2`, `'$size'`
  br _94, ^91, ^80

91:
  %% beam_block_SUITE.erl:272
  %% Argument types:
  %%    _37 => bs_context(8)
  %% Aliased:
  %%    _37
  %% Anno: #{bsm_info => context_reused}
  _44 = bif:byte_size _37

  %% Argument types:
  %%    _41 => {''$size'', any()}
  %% Aliased:
  %%    _41
  _42 = get_tuple_element _41, `1`

  %% Argument types:
  %%    _44 => 0..288230376151711743
  %% Aliased:
  %%    _42
  %% Unique:
  %%    _44
  _84 = bif:'=:=' _44, _42
  br _84, ^84, ^83

84:
  %% Aliased:
  %%    _37
  _101 = bs_get_tail _37

  %% beam_block_SUITE.erl:273
  %% Aliased:
  %%    _101
  %% Anno: #{bsm_info =>
                 {remote_call,
                     {b_remote,
                         {b_literal,erlang},
                         {b_literal,binary_to_term},
                         1}}}
  _10 = call (`erlang`:`binary_to_term`/1), _101

  %% Aliased:
  %%    _10
  _85 = succeeded:body _10
  br _85, ^85, ^1

85:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _10
  _88 = bif:'=:=' _10, _0
  br _88, ^88, ^87

88:
  %% Aliased:
  %%    _10
  ret _10

87:
  %% beam_block_SUITE.erl:273
  %% Aliased:
  %%    _10
  _46 = match_fail `badmatch`, _10

  %% Unique:
  %%    _46
  _89 = succeeded:body _46
  br ^1

83:
  %% beam_block_SUITE.erl:272
  %% Unique:
  %%    _44
  _47 = match_fail `badmatch`, _44

  %% Unique:
  %%    _47
  _90 = succeeded:body _47
  br ^1

80:
  %% beam_block_SUITE.erl:271
  %% Aliased:
  %%    _41
  _48 = match_fail `badmatch`, _41

  %% Unique:
  %%    _48
  _97 = succeeded:body _48
  br ^1

19:
  %% beam_block_SUITE.erl:267
  %% Aliased:
  %%    _12
  _49 = match_fail `case_clause`, _12

  %% Unique:
  %%    _49
  _100 = succeeded:body _49
  br ^1

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% beam_block_SUITE.erl:279
%% Counter = 20
%% bs_ensure_opt: true
function `beam_block_SUITE`:`cse_make_binary`(_0) {
0:
  %% beam_block_SUITE.erl:280
  %% Aliased:
  %%    _0
  B = call (`erlang`:`term_to_binary`/1), _0

  %% beam_block_SUITE.erl:281
  %% Argument types:
  %%    B => bitstring(8)
  %% Aliased:
  %%    B
  SizeB = bif:byte_size B

  %% Argument types:
  %%    SizeB => 0..288230376151711743
  %% Unique:
  %%    SizeB
  _14 = bif:'>' SizeB, `255`
  br _14, ^14, ^13

14:
  %% Argument types:
  %%    SizeB => 256..288230376151711743
  %% Unique:
  %%    SizeB
  _5 = put_tuple `'$size'`, SizeB

  %% beam_block_SUITE.erl:283
  %% Unique:
  %%    _5
  SB = call (`erlang`:`term_to_binary`/1), _5

  %% beam_block_SUITE.erl:284
  %% Argument types:
  %%    SB => bitstring(8)
  %% Aliased:
  %%    SB
  _4 = bif:byte_size SB

  %% beam_block_SUITE.erl:284
  %% Argument types:
  %%    _4 => 0..288230376151711743
  %%    SB => bitstring(8)
  %%    B => bitstring(8)
  %% Aliased:
  %%    B, 
  %%    SB
  %% Unique:
  %%    _4
  %% Anno: #{unit => 8}
  _6 = bs_create_bin `integer`, `[1,{segment,1}]`, _4, `8`, `binary`, `[8,{segment,2}]`, SB, `all`, `binary`, `[8,{segment,3}]`, B, `all`

  %% Aliased:
  %%    _6
  _17 = succeeded:body _6
  br _17, ^17, ^1

17:
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _6
  ret _6

13:
  %% beam_block_SUITE.erl:286
  %% Argument types:
  %%    SizeB => 0..255
  %%    B => bitstring(8)
  %% Aliased:
  %%    B
  %% Unique:
  %%    SizeB
  %% Anno: #{unit => 8}
  _7 = bs_create_bin `integer`, `[1,{segment,1}]`, SizeB, `8`, `binary`, `[8,{segment,2}]`, B, `all`

  %% Aliased:
  %%    _7
  _18 = succeeded:body _7
  br _18, ^18, ^1

18:
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _7
  ret _7

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_block_SUITE.erl:289
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
%%    _1 =>
%%     'b'
function `beam_block_SUITE`:`local_cse_3`(_0, _1) {
0:
  %% Result type:
  %%    {nonempty_list('b'), nonempty_list('a' | 'b')}
  ret `{[b],[a,b]}`
}

%% beam_block_SUITE.erl:295
%% Counter = 8
%% bs_ensure_opt: true
function `beam_block_SUITE`:`local_cse_4`() {
0:
  %% beam_block_SUITE.erl:296
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _2 = put_tuple _1, `write_cache`

  %% beam_block_SUITE.erl:296
  %% Result type:
  %%    {2000, pid(), {pid(), 'write_cache'}}
  %% Unique:
  %%    _1, 
  %%    _2
  _3 = call (`do_local_cse_4`/3), `2000`, _1, _2

  %% Unique:
  %%    _3
  _6 = succeeded:body _3
  br _6, ^6, ^1

6:
  %% Result type:
  %%    {2000, pid(), {pid(), 'write_cache'}}
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_block_SUITE.erl:298
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2000
%%    _1 =>
%%     pid()
%%    _2 =>
%%     {pid(), 'write_cache'}
function `beam_block_SUITE`:`do_local_cse_4`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _1 => pid()
  %%    _2 => {pid(), 'write_cache'}
  %% Unique:
  %%    _1, 
  %%    _2
  _3 = put_tuple `2000`, _1, _2
  %% Result type:
  %%    {2000, pid(), {pid(), 'write_cache'}}
  %% Unique:
  %%    _3
  ret _3
}

%% beam_block_SUITE.erl:303
%% Counter = 19
%% bs_ensure_opt: true
function `beam_block_SUITE`:`second_block_pass`(_0) {
0:
  %% beam_block_SUITE.erl:304
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  _2 = call (`second_1`/2), `[#{dts => 10.0}]`, `2.0`

  %% Unique:
  %%    _2
  _9 = succeeded:body _2
  br _9, ^9, ^1

9:
  %% Unique:
  %%    _2
  _17 = is_nonempty_list _2
  br _17, ^17, ^11

17:
  %% Argument types:
  %%    _2 => nonempty_list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _2
  _4 = get_hd _2

  %% Argument types:
  %%    _2 => nonempty_list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _2
  _3 = get_tl _2

  %% Argument types:
  %%    _4 => #{'dts'=>5.0..10.0}
  %% Unique:
  %%    _4
  _5 = get_map_element _4, `dts`

  %% Unique:
  %%    _5
  _12 = succeeded:guard _5
  br _12, ^12, ^11

12:
  %% Argument types:
  %%    _5 => 5.0..10.0
  %% Unique:
  %%    _5
  _15 = bif:'=:=' _5, `5.0`
  br _15, ^14, ^11

14:
  %% Argument types:
  %%    _3 => list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _3
  _13 = bif:'=:=' _3, `[]`
  br _13, ^13, ^11

13:
  %% Result type:
  %%    'ok'
  ret `ok`

11:
  %% beam_block_SUITE.erl:304
  %% Unique:
  %%    _2
  _6 = match_fail `badmatch`, _2

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_block_SUITE.erl:307
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(#{'dts'=>10.0})
%%    _1 =>
%%     2.0
function `beam_block_SUITE`:`second_1`(_0, _1) {
0:
  %% beam_block_SUITE.erl:308
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _0
  _19 = call (`'-second_1/2-lc$^0/1-0-'`/2), _0, _1

  %% Unique:
  %%    _19
  _22 = succeeded:body _19
  br _22, ^22, ^1

22:
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_block_SUITE.erl:310
%% Counter = 184
%% bs_ensure_opt: true
function `beam_block_SUITE`:`coverage`(_0) {
0:
  %% beam_block_SUITE.erl:311
  %% Result type:
  %%    nil()
  _23 = call (`coverage_1`/0)

  %% Unique:
  %%    _23
  _56 = succeeded:body _23
  br _56, ^147, ^1

147:
  %% beam_block_SUITE.erl:313
  %% Result type:
  %%    fun((_) -> nonempty_list(any()))
  %% Aliased:
  %%    _0
  _2 = call (`coverage_2`/1), _0

  %% Aliased:
  %%    _2
  _59 = succeeded:body _2
  br _59, ^59, ^1

59:
  _3 = make_fun (`id`/1)

  %% Argument types:
  %%    _3 => fun((_))
  %% Aliased:
  %%    _3
  _24 = put_tuple _3

  %% beam_block_SUITE.erl:313
  %% Result type:
  %%    nonempty_list(any())
  %% Argument types:
  %%    _2 => fun((_) -> nonempty_list(any()))
  %%    _24 => {fun((_))}
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _24
  _25 = call _2, _24

  %% Aliased:
  %%    _25
  _60 = succeeded:body _25
  br _60, ^145, ^1

145:
  %% Argument types:
  %%    _25 => nonempty_list(any())
  %% Aliased:
  %%    _25
  _27 = get_hd _25

  %% Argument types:
  %%    _25 => nonempty_list(any())
  %% Aliased:
  %%    _25
  _26 = get_tl _25

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _144 = bif:'=:=' _27, `42`
  br _144, ^143, ^62

143:
  %% Aliased:
  %%    _26
  _142 = is_nonempty_list _26
  br _142, ^142, ^62

142:
  %% Argument types:
  %%    _26 => nonempty_list(any())
  %% Aliased:
  %%    _26
  _29 = get_hd _26

  %% Argument types:
  %%    _26 => nonempty_list(any())
  %% Aliased:
  %%    _26
  _28 = get_tl _26

  %% Argument types:
  %%    _28 => list(any())
  %% Aliased:
  %%    _28
  _141 = bif:'=:=' _28, `[]`
  br _141, ^141, ^62

141:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _29
  _63 = bif:'=:=' _29, _0
  br _63, ^63, ^62

63:
  %% beam_block_SUITE.erl:315
  _30 = call (`coverage_3`/2), `a`, `b`

  %% Aliased:
  %%    _30
  _64 = succeeded:body _30
  br _64, ^64, ^1

64:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _139 = bif:'=:=' _30, `{b,a,badarith}`
  br _139, ^139, ^66

139:
  %% beam_block_SUITE.erl:316
  _31 = call (`coverage_3`/2), `0`, `1`

  %% Aliased:
  %%    _31
  _67 = succeeded:body _31
  br _67, ^67, ^1

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _137 = bif:'=:=' _31, `ok`
  br _137, ^180, ^69

180:
  br ^182

182:
  _73 = new_try_tag `'catch'`
  br _73, ^71, ^72

71:
  %% beam_block_SUITE.erl:318
  %% Result type:
  %%    none()
  _43 = call (`coverage_4`/2), `a`, `b`

  %% Aliased:
  %%    _43
  _75 = succeeded:body _43
  br ^72

72:
  %% Unique:
  %%    _73
  _78 = landingpad `'catch'`, _73

  %% Aliased:
  %%    _78
  _76 = extract _78, `0`
  br ^70

70:
  %% Aliased:
  %%    _76
  %% Unique:
  %%    _73
  _7 = catch_end _73, _76

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _132 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _132, ^129, ^81

129:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _32 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _126 = is_tagged_tuple _32, `2`, `badarg`
  br _126, ^123, ^81

123:
  %% beam_block_SUITE.erl:320
  _10 = call (`id`/1), `latin1`

  %% Aliased:
  %%    _10
  _82 = succeeded:body _10
  br _82, ^82, ^1

82:
  %% beam_block_SUITE.erl:320
  _9 = call (`id`/1), `true`

  %% Aliased:
  %%    _9
  _83 = succeeded:body _9
  br _83, ^83, ^1

83:
  %% beam_block_SUITE.erl:320
  %% Aliased:
  %%    _9, 
  %%    _10
  _36 = call (`coverage_5`/2), _10, _9

  %% Aliased:
  %%    _36
  _84 = succeeded:body _36
  br _84, ^84, ^1

84:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _121 = bif:'=:=' _36, `<<"true">>`
  br _121, ^121, ^86

121:
  %% beam_block_SUITE.erl:321
  _13 = call (`id`/1), `utf8`

  %% Aliased:
  %%    _13
  _87 = succeeded:body _13
  br _87, ^87, ^1

87:
  %% beam_block_SUITE.erl:321
  _12 = call (`id`/1), `false`

  %% Aliased:
  %%    _12
  _88 = succeeded:body _12
  br _88, ^88, ^1

88:
  %% beam_block_SUITE.erl:321
  %% Aliased:
  %%    _12, 
  %%    _13
  _37 = call (`coverage_5`/2), _13, _12

  %% Aliased:
  %%    _37
  _89 = succeeded:body _37
  br _89, ^89, ^1

89:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _119 = bif:'=:=' _37, `<<"true">>`
  br _119, ^181, ^91

181:
  br ^183

183:
  _95 = new_try_tag `'catch'`
  br _95, ^93, ^94

93:
  %% beam_block_SUITE.erl:322
  _16 = call (`id`/1), `42`

  %% Aliased:
  %%    _16
  _97 = succeeded:body _16
  br _97, ^97, ^94

97:
  %% beam_block_SUITE.erl:322
  _15 = call (`id`/1), `42`

  %% Aliased:
  %%    _15
  _98 = succeeded:body _15
  br _98, ^98, ^94

98:
  %% beam_block_SUITE.erl:322
  %% Aliased:
  %%    _15, 
  %%    _16
  _45 = call (`coverage_5`/2), _16, _15

  %% Aliased:
  %%    _45
  _99 = succeeded:body _45
  br _99, ^99, ^94

99:
  br ^92

94:
  %% Unique:
  %%    _95
  _102 = landingpad `'catch'`, _95

  %% Aliased:
  %%    _102
  _100 = extract _102, `0`
  br ^92

92:
  _103 = phi { _100, ^94 }, { _45, ^99 }

  %% Aliased:
  %%    _103
  %% Unique:
  %%    _95
  _17 = catch_end _95, _103

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _115 = is_tagged_tuple _17, `2`, `'EXIT'`
  br _115, ^112, ^105

112:
  %% Argument types:
  %%    _17 => {''EXIT'', any()}
  %% Aliased:
  %%    _17
  _38 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _109 = is_tagged_tuple _38, `2`, `badarg`
  br _109, ^106, ^105

106:
  %% Result type:
  %%    'ok'
  ret `ok`

105:
  %% beam_block_SUITE.erl:322
  %% Aliased:
  %%    _17
  _46 = match_fail `badmatch`, _17

  %% Unique:
  %%    _46
  _118 = succeeded:body _46
  br ^1

91:
  %% beam_block_SUITE.erl:321
  %% Aliased:
  %%    _37
  _47 = match_fail `badmatch`, _37

  %% Unique:
  %%    _47
  _120 = succeeded:body _47
  br ^1

86:
  %% beam_block_SUITE.erl:320
  %% Aliased:
  %%    _36
  _48 = match_fail `badmatch`, _36

  %% Unique:
  %%    _48
  _122 = succeeded:body _48
  br ^1

81:
  %% beam_block_SUITE.erl:318
  %% Aliased:
  %%    _7
  _49 = match_fail `badmatch`, _7

  %% Unique:
  %%    _49
  _135 = succeeded:body _49
  br ^1

69:
  %% beam_block_SUITE.erl:316
  %% Aliased:
  %%    _31
  _50 = match_fail `badmatch`, _31

  %% Unique:
  %%    _50
  _138 = succeeded:body _50
  br ^1

66:
  %% beam_block_SUITE.erl:315
  %% Aliased:
  %%    _30
  _51 = match_fail `badmatch`, _30

  %% Unique:
  %%    _51
  _140 = succeeded:body _51
  br ^1

62:
  %% beam_block_SUITE.erl:313
  %% Aliased:
  %%    _25
  _52 = match_fail `badmatch`, _25

  %% Unique:
  %%    _52
  _146 = succeeded:body _52
  br ^1

1:
  _54 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _54
}

%% beam_block_SUITE.erl:326
%% Counter = 16
%% bs_ensure_opt: true
function `beam_block_SUITE`:`coverage_1`() {
0:
  %% beam_block_SUITE.erl:329
  %% Result type:
  %%    nil()
  _12 = call (`'-coverage_1/0-lc$^0/1-0-'`/1), `[]`

  %% Unique:
  %%    _12
  _15 = succeeded:body _12
  br _15, ^15, ^1

15:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _12
  ret _12

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_block_SUITE.erl:331
%% Counter = 12
%% bs_ensure_opt: true
function `beam_block_SUITE`:`coverage_2`(_0) {
0:
  %% Result type:
  %%    nonempty_list(any())
  %% Aliased:
  %%    _0
  _7 = make_fun (`'-coverage_2/1-fun-0-'`/2), _0
  %% Result type:
  %%    fun((_) -> nonempty_list(any()))
  %% Aliased:
  %%    _7
  ret _7
}

%% beam_block_SUITE.erl:336
%% Counter = 42
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 0
%%    _1 =>
%%     'b' | 1
function `beam_block_SUITE`:`coverage_3`(_0, _1) {
0:
  br ^41

41:
  _17 = new_try_tag `'try'`
  br _17, ^16, ^14

16:
  %% beam_block_SUITE.erl:337
  %% Aliased:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _18 = succeeded:body _2
  br _18, ^18, ^14

18:
  %% beam_block_SUITE.erl:337
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _9 = bif:'+' _2, `1`

  %% Unique:
  %%    _9
  _19 = succeeded:body _9
  br _19, ^13, ^14

13:
  %% Unique:
  %%    _17
  _23 = kill_try_tag _17
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% Unique:
  %%    _17
  _21 = landingpad `'try'`, _17

  %% Aliased:
  %%    _21
  _6 = extract _21, `1`

  %% Unique:
  %%    _17
  _22 = kill_try_tag _17
  br ^24

24:
  %% beam_block_SUITE.erl:342
  %% Aliased:
  %%    _0, 
  %%    _6
  %% Unique:
  %%    _1
  _10 = call (`coverage_3`/3), _1, _0, _6

  %% Aliased:
  %%    _10
  _20 = succeeded:body _10
  br _20, ^20, ^1

20:
  %% Aliased:
  %%    _10
  ret _10

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_block_SUITE.erl:345
%% Counter = 9
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'b' | 1
%%    _1 =>
%%     'a' | 0
function `beam_block_SUITE`:`coverage_3`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => 'b' | 1
  %%    _1 => 'a' | 0
  %% Aliased:
  %%    _1, 
  %%    _2
  %% Unique:
  %%    _0
  _3 = put_tuple _0, _1, _2

  %% beam_block_SUITE.erl:346
  %% Unique:
  %%    _3
  _4 = call (`id`/1), _3

  %% Aliased:
  %%    _4
  _7 = succeeded:body _4
  br _7, ^7, ^1

7:
  %% Aliased:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_block_SUITE.erl:348
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
%%    _1 =>
%%     'b'
function `beam_block_SUITE`:`coverage_4`(_0, _1) {
0:
  %% beam_block_SUITE.erl:349
  %% Argument types:
  %%    
  _2 = bif:'xor' `ok`, `ok`

  %% Unique:
  %%    _2
  _10 = succeeded:body _2
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_block_SUITE.erl:354
%% Counter = 10
%% bs_ensure_opt: true
function `beam_block_SUITE`:`coverage_5`(_0, _1) {
0:
  %% beam_block_SUITE.erl:355
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = bif:'or' _1, _1

  %% Unique:
  %%    _2
  _7 = succeeded:body _2
  br _7, ^7, ^1

7:
  %% beam_block_SUITE.erl:355
  %% Argument types:
  %%    _2 => 'false' | 'true'
  %%    _1 => 'false' | 'true'
  %% Unique:
  %%    _1, 
  %%    _2
  _3 = bif:'=:=' _2, _1

  %% beam_block_SUITE.erl:355
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _3
  _4 = call (`erlang`:`atom_to_binary`/2), _3, _0

  %% Aliased:
  %%    _4
  _8 = succeeded:body _4
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_block_SUITE.erl:361
%% Counter = 4
%% bs_ensure_opt: true
function `beam_block_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_block_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_block_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_block_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_block_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_block_SUITE.erl:332
%% Counter = 21
%% bs_ensure_opt: true
function `beam_block_SUITE`:`'-coverage_2/1-fun-0-'`(_3, _0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _16 = bif:is_tuple _3
  br _16, ^16, ^12

16:
  %% Argument types:
  %%    _3 => {...}
  %% Aliased:
  %%    _3
  _17 = bif:tuple_size _3

  %% Argument types:
  %%    _17 => 0..16777215
  %% Unique:
  %%    _17
  _18 = bif:'=:=' _17, `1`
  br _18, ^20, ^12

20:
  %% beam_block_SUITE.erl:333
  _2 = call (`id`/1), `42`

  %% Aliased:
  %%    _2
  _13 = succeeded:body _2
  br _13, ^13, ^1

13:
  %% Argument types:
  %%    _3 => {any()}
  %% Aliased:
  %%    _3
  _5 = get_tuple_element _3, `0`

  %% beam_block_SUITE.erl:333
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _5
  _1 = call _5, _0

  %% Aliased:
  %%    _1
  _14 = succeeded:body _1
  br _14, ^14, ^1

14:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _6 = put_list _1, `[]`

  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _6
  _8 = put_list _2, _6
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _8
  ret _8

12:
  %% beam_block_SUITE.erl:332
  %% Aliased:
  %%    _3
  %% Anno: #{inlined => {'-coverage_2/1-inlined-0-',1}}
  _9 = match_fail `function_clause`, _3

  %% Unique:
  %%    _9
  _19 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_block_SUITE.erl:329
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _2 =>
%%     nil()
function `beam_block_SUITE`:`'-coverage_1/0-lc$^0/1-0-'`(_2) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_block_SUITE.erl:308
%% Counter = 38
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     2.0
%%    _4 =>
%%     list(#{'dts'=>10.0})
function `beam_block_SUITE`:`'-second_1/2-lc$^0/1-0-'`(_4, _1) {
0:
  %% Unique:
  %%    _4
  _33 = is_nonempty_list _4
  br _33, ^33, ^34

33:
  %% Argument types:
  %%    _4 => nonempty_list(#{'dts'=>10.0})
  %% Unique:
  %%    _4
  _12 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_list(#{'dts'=>10.0})
  %% Unique:
  %%    _4
  _11 = get_tl _4

  %% Argument types:
  %%    _12 => #{'dts'=>10.0}
  %% Unique:
  %%    _12
  _24 = has_map_field _12, `dts`
  br _24, ^28, ^23

28:
  %% beam_block_SUITE.erl:308
  %% Unique:
  %%    _12
  _14 = put_map `assoc`, _12, `dts`, `5.0`

  %% beam_block_SUITE.erl:308
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  _8 = call (`'-second_1/2-lc$^0/1-0-'`/2), _11, _1

  %% Unique:
  %%    _8
  _30 = succeeded:body _8
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _14 => #{'dts'=>5.0..10.0}
  %%    _8 => list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _8, 
  %%    _14
  _16 = put_list _14, _8
  %% Result type:
  %%    nonempty_list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _16
  ret _16

23:
  %% beam_block_SUITE.erl:308
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  _17 = call (`'-second_1/2-lc$^0/1-0-'`/2), _11, _1

  %% Unique:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% Result type:
  %%    list(#{'dts'=>5.0..10.0})
  %% Unique:
  %%    _17
  ret _17

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19

34:
  %% Result type:
  %%    nil()
  ret `[]`
}
