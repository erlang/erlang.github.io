module beam_jump_SUITE.
exports [{all,0},
         {ambiguous_catch_try_state,1},
         {build_tuple,1},
         {call_sharing,1},
         {coverage,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {module_info,0},
         {module_info,1},
         {suite,0},
         {undecided_allocation,1},
         {undefined_label,1},
         {unsafe_move_elimination,1}].
attributes [].

%% beam_jump_SUITE.erl:28
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_jump_SUITE.erl:31
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_jump_SUITE.erl:34
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [undefined_label,ambiguous_catch_try_state,unsafe_move_elimination,
      build_tuple,coverage,call_sharing,undecided_allocation]}]`
}

%% beam_jump_SUITE.erl:45
%% Counter = 6
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_jump_SUITE.erl:46
  _2 = call (`test_lib`:`recompile`/1), `beam_jump_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_jump_SUITE.erl:49
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_jump_SUITE.erl:52
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_jump_SUITE.erl:55
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_jump_SUITE.erl:58
%% Counter = 56
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`undefined_label`(_0) {
0:
  br ^55

55:
  _17 = new_try_tag `'catch'`
  br _17, ^15, ^16

15:
  %% beam_jump_SUITE.erl:59
  %% Result type:
  %%    none()
  _10 = call (`flights`/3), `0`, `[]`, `[]`
  _19 = succeeded:body _10
  br ^16

16:
  %% Unique:
  %%    _17
  _22 = landingpad `'catch'`, _17

  %% Aliased:
  %%    _22
  _20 = extract _22, `0`
  br ^14

14:
  %% Aliased:
  %%    _20
  %% Unique:
  %%    _17
  _1 = catch_end _17, _20

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _35 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _35, ^32, ^25

32:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _5 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _29 = is_tagged_tuple _5, `2`, `function_clause`
  br _29, ^26, ^25

26:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% beam_jump_SUITE.erl:59
  %% Aliased:
  %%    _1
  _11 = match_fail `badmatch`, _1

  %% Unique:
  %%    _11
  _38 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_jump_SUITE.erl:64
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     nil()
%%    _2 =>
%%     nil()
function `beam_jump_SUITE`:`flights`(_0, _1, _2) {
0:
  %% beam_jump_SUITE.erl:64
  %% Anno: #{inlined => {'-inlined-flights/3-',3}}
  _16 = match_fail `function_clause`, _0, _1, _2

  %% Unique:
  %%    _16
  _24 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_jump_SUITE.erl:72
%% Counter = 356
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`ambiguous_catch_try_state`(_0) {
0:
  %% beam_jump_SUITE.erl:74
  %% Result type:
  %%    {any(), any()}
  _23 = call (`checks`/1), `42`

  %% Unique:
  %%    _23
  _79 = succeeded:body _23
  br _79, ^249, ^1

249:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Unique:
  %%    _23
  _25 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _246 = is_tagged_tuple _25, `2`, `'EXIT'`
  br _246, ^243, ^81

243:
  %% Argument types:
  %%    _25 => {''EXIT'', any()}
  %% Aliased:
  %%    _25
  _26 = get_tuple_element _25, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _240 = bif:is_tuple _26
  br _240, ^240, ^81

240:
  %% Argument types:
  %%    _26 => {...}
  %% Aliased:
  %%    _26
  _241 = bif:tuple_size _26

  %% Argument types:
  %%    _241 => 0..16777215
  %% Unique:
  %%    _241
  _242 = bif:'=:=' _241, `2`
  br _242, ^239, ^81

239:
  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _29 = get_tuple_element _26, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _238 = bif:'=:=' _29, `{case_clause,song}`
  br _238, ^238, ^81

238:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Unique:
  %%    _23
  _24 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _235 = is_tagged_tuple _24, `2`, `'EXIT'`
  br _235, ^232, ^81

232:
  %% Argument types:
  %%    _24 => {''EXIT'', any()}
  %% Aliased:
  %%    _24
  _30 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _229 = bif:is_tuple _30
  br _229, ^229, ^81

229:
  %% Argument types:
  %%    _30 => {...}
  %% Aliased:
  %%    _30
  _230 = bif:tuple_size _30

  %% Argument types:
  %%    _230 => 0..16777215
  %% Unique:
  %%    _230
  _231 = bif:'=:=' _230, `2`
  br _231, ^228, ^81

228:
  %% Argument types:
  %%    _30 => {any(), any()}
  %% Aliased:
  %%    _30
  _33 = get_tuple_element _30, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _227 = bif:'=:=' _33, `{case_clause,song}`
  br _227, ^344, ^81

344:
  br ^350

350:
  _85 = new_try_tag `'catch'`
  br _85, ^83, ^84

83:
  %% beam_jump_SUITE.erl:76
  %% Result type:
  %%    'name'
  _59 = call (`unsafe_sharing`/0)

  %% Unique:
  %%    _59
  _87 = succeeded:body _59
  br _87, ^87, ^84

87:
  br ^82

84:
  %% Unique:
  %%    _85
  _90 = landingpad `'catch'`, _85

  %% Aliased:
  %%    _90
  _88 = extract _90, `0`
  br ^82

82:
  _91 = phi { _88, ^84 }, { `name`, ^87 }

  %% Aliased:
  %%    _91
  %% Unique:
  %%    _85
  _2 = catch_end _85, _91

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _223 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _223, ^220, ^93

220:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _34 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _217 = bif:is_tuple _34
  br _217, ^217, ^93

217:
  %% Argument types:
  %%    _34 => {...}
  %% Aliased:
  %%    _34
  _218 = bif:tuple_size _34

  %% Argument types:
  %%    _218 => 0..16777215
  %% Unique:
  %%    _218
  _219 = bif:'=:=' _218, `2`
  br _219, ^216, ^93

216:
  %% Argument types:
  %%    _34 => {any(), any()}
  %% Aliased:
  %%    _34
  _37 = get_tuple_element _34, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _215 = bif:'=:=' _37, `{try_clause,42}`
  br _215, ^345, ^93

345:
  br ^351

351:
  _97 = new_try_tag `'catch'`
  br _97, ^95, ^96

95:
  %% beam_jump_SUITE.erl:78
  %% Result type:
  %%    none()
  _61 = call (`ambiguous_catch_try_state_1`/1), `<<>>`

  %% Aliased:
  %%    _61
  _99 = succeeded:body _61
  br ^96

96:
  %% Unique:
  %%    _97
  _102 = landingpad `'catch'`, _97

  %% Aliased:
  %%    _102
  _100 = extract _102, `0`
  br ^94

94:
  %% Aliased:
  %%    _100
  %% Unique:
  %%    _97
  _4 = catch_end _97, _100

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _211 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _211, ^208, ^105

208:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _38 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _205 = bif:is_tuple _38
  br _205, ^205, ^105

205:
  %% Argument types:
  %%    _38 => {...}
  %% Aliased:
  %%    _38
  _206 = bif:tuple_size _38

  %% Argument types:
  %%    _206 => 0..16777215
  %% Unique:
  %%    _206
  _207 = bif:'=:=' _206, `2`
  br _207, ^204, ^105

204:
  %% Argument types:
  %%    _38 => {any(), any()}
  %% Aliased:
  %%    _38
  _41 = get_tuple_element _38, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _203 = bif:'=:=' _41, `{badmatch,b}`
  br _203, ^346, ^105

346:
  br ^352

352:
  _109 = new_try_tag `'catch'`
  br _109, ^107, ^108

107:
  %% beam_jump_SUITE.erl:79
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _0
  _63 = call (`ambiguous_catch_try_state_1`/1), _0

  %% Aliased:
  %%    _63
  _111 = succeeded:body _63
  br ^108

108:
  %% Unique:
  %%    _109
  _114 = landingpad `'catch'`, _109

  %% Aliased:
  %%    _114
  _112 = extract _114, `0`
  br ^106

106:
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _109
  _6 = catch_end _109, _112

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _199 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _199, ^196, ^117

196:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _42 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _193 = bif:is_tuple _42
  br _193, ^193, ^117

193:
  %% Argument types:
  %%    _42 => {...}
  %% Aliased:
  %%    _42
  _194 = bif:tuple_size _42

  %% Argument types:
  %%    _194 => 0..16777215
  %% Unique:
  %%    _194
  _195 = bif:'=:=' _194, `2`
  br _195, ^192, ^117

192:
  %% Argument types:
  %%    _42 => {any(), any()}
  %% Aliased:
  %%    _42
  _45 = get_tuple_element _42, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _191 = bif:'=:=' _45, `{badmatch,b}`
  br _191, ^347, ^117

347:
  br ^353

353:
  _121 = new_try_tag `'catch'`
  br _121, ^119, ^120

119:
  %% beam_jump_SUITE.erl:81
  %% Result type:
  %%    none()
  _65 = call (`ambiguous_catch_try_state_2`/0)

  %% Aliased:
  %%    _65
  _123 = succeeded:body _65
  br ^120

120:
  %% Unique:
  %%    _121
  _126 = landingpad `'catch'`, _121

  %% Aliased:
  %%    _126
  _124 = extract _126, `0`
  br ^118

118:
  %% Aliased:
  %%    _124
  %% Unique:
  %%    _121
  _8 = catch_end _121, _124

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _187 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _187, ^184, ^129

184:
  %% Argument types:
  %%    _8 => {''EXIT'', any()}
  %% Aliased:
  %%    _8
  _46 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _181 = bif:is_tuple _46
  br _181, ^181, ^129

181:
  %% Argument types:
  %%    _46 => {...}
  %% Aliased:
  %%    _46
  _182 = bif:tuple_size _46

  %% Argument types:
  %%    _182 => 0..16777215
  %% Unique:
  %%    _182
  _183 = bif:'=:=' _182, `2`
  br _183, ^180, ^129

180:
  %% Argument types:
  %%    _46 => {any(), any()}
  %% Aliased:
  %%    _46
  _49 = get_tuple_element _46, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _179 = bif:'=:=' _49, `{badmatch,0}`
  br _179, ^348, ^129

348:
  br ^354

354:
  _133 = new_try_tag `'catch'`
  br _133, ^131, ^132

131:
  %% beam_jump_SUITE.erl:82
  %% Result type:
  %%    none()
  _67 = call (`ambiguous_catch_try_state_3`/0)

  %% Aliased:
  %%    _67
  _135 = succeeded:body _67
  br ^132

132:
  %% Unique:
  %%    _133
  _138 = landingpad `'catch'`, _133

  %% Aliased:
  %%    _138
  _136 = extract _138, `0`
  br ^130

130:
  %% Aliased:
  %%    _136
  %% Unique:
  %%    _133
  _10 = catch_end _133, _136

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _175 = is_tagged_tuple _10, `2`, `'EXIT'`
  br _175, ^172, ^141

172:
  %% Argument types:
  %%    _10 => {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _50 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _169 = bif:is_tuple _50
  br _169, ^169, ^141

169:
  %% Argument types:
  %%    _50 => {...}
  %% Aliased:
  %%    _50
  _170 = bif:tuple_size _50

  %% Argument types:
  %%    _170 => 0..16777215
  %% Unique:
  %%    _170
  _171 = bif:'=:=' _170, `2`
  br _171, ^168, ^141

168:
  %% Argument types:
  %%    _50 => {any(), any()}
  %% Aliased:
  %%    _50
  _53 = get_tuple_element _50, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _167 = bif:'=:=' _53, `{badmatch,0}`
  br _167, ^349, ^141

349:
  br ^355

355:
  _145 = new_try_tag `'catch'`
  br _145, ^143, ^144

143:
  %% beam_jump_SUITE.erl:84
  %% Result type:
  %%    0.0
  _69 = call (`ambiguous_catch_try_state_4`/0)

  %% Unique:
  %%    _69
  _147 = succeeded:body _69
  br _147, ^147, ^144

147:
  br ^142

144:
  %% Unique:
  %%    _145
  _150 = landingpad `'catch'`, _145

  %% Aliased:
  %%    _150
  _148 = extract _150, `0`
  br ^142

142:
  _151 = phi { _148, ^144 }, { `0.0`, ^147 }

  %% Aliased:
  %%    _151
  %% Unique:
  %%    _145
  _12 = catch_end _145, _151

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _163 = is_tagged_tuple _12, `2`, `'EXIT'`
  br _163, ^160, ^153

160:
  %% Argument types:
  %%    _12 => {''EXIT'', any()}
  %% Aliased:
  %%    _12
  _54 = get_tuple_element _12, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _157 = is_tagged_tuple _54, `2`, `badarg`
  br _157, ^154, ^153

154:
  %% Result type:
  %%    'ok'
  ret `ok`

153:
  %% beam_jump_SUITE.erl:84
  %% Aliased:
  %%    _12
  _70 = match_fail `badmatch`, _12

  %% Unique:
  %%    _70
  _166 = succeeded:body _70
  br ^1

141:
  %% beam_jump_SUITE.erl:82
  %% Aliased:
  %%    _10
  _71 = match_fail `badmatch`, _10

  %% Unique:
  %%    _71
  _178 = succeeded:body _71
  br ^1

129:
  %% beam_jump_SUITE.erl:81
  %% Aliased:
  %%    _8
  _72 = match_fail `badmatch`, _8

  %% Unique:
  %%    _72
  _190 = succeeded:body _72
  br ^1

117:
  %% beam_jump_SUITE.erl:79
  %% Aliased:
  %%    _6
  _73 = match_fail `badmatch`, _6

  %% Unique:
  %%    _73
  _202 = succeeded:body _73
  br ^1

105:
  %% beam_jump_SUITE.erl:78
  %% Aliased:
  %%    _4
  _74 = match_fail `badmatch`, _4

  %% Unique:
  %%    _74
  _214 = succeeded:body _74
  br ^1

93:
  %% beam_jump_SUITE.erl:76
  %% Aliased:
  %%    _2
  _75 = match_fail `badmatch`, _2

  %% Unique:
  %%    _75
  _226 = succeeded:body _75
  br ^1

81:
  %% beam_jump_SUITE.erl:73
  %% Unique:
  %%    _23
  _76 = match_fail `badmatch`, _23

  %% Unique:
  %%    _76
  _253 = succeeded:body _76
  br ^1

1:
  _77 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _77
}

%% beam_jump_SUITE.erl:88
%% Counter = 4
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`river`() {
0:
  %% Result type:
  %%    'song'
  ret `song`
}

%% beam_jump_SUITE.erl:90
%% Counter = 71
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
function `beam_jump_SUITE`:`checks`(_0) {
0:
  br ^70

70:
  _23 = new_try_tag `'catch'`
  br _23, ^21, ^22

21:
  %% beam_jump_SUITE.erl:92
  %% Result type:
  %%    'song'
  _5 = call (`river`/0)

  %% Unique:
  %%    _5
  _25 = succeeded:body _5
  br _25, ^27, ^22

27:
  %% beam_jump_SUITE.erl:92
  _11 = match_fail `case_clause`, `song`

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br ^22

22:
  %% Unique:
  %%    _23
  _35 = landingpad `'catch'`, _23

  %% Aliased:
  %%    _35
  _33 = extract _35, `0`
  br ^20

20:
  %% Aliased:
  %%    _33
  %% Unique:
  %%    _23
  _4 = catch_end _23, _33
  _40 = new_try_tag `'catch'`
  br _40, ^38, ^39

38:
  %% beam_jump_SUITE.erl:92
  %% Result type:
  %%    'song'
  _6 = call (`river`/0)

  %% Unique:
  %%    _6
  _42 = succeeded:body _6
  br _42, ^44, ^39

44:
  %% beam_jump_SUITE.erl:92
  _16 = match_fail `case_clause`, `song`

  %% Unique:
  %%    _16
  _49 = succeeded:body _16
  br ^39

39:
  %% Unique:
  %%    _40
  _52 = landingpad `'catch'`, _40

  %% Aliased:
  %%    _52
  _50 = extract _52, `0`
  br ^37

37:
  %% Aliased:
  %%    _50
  %% Unique:
  %%    _40
  _2 = catch_end _40, _50

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _4
  _17 = put_tuple _4, _2
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _17
  ret _17
}

%% beam_jump_SUITE.erl:95
%% Counter = 103
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`unsafe_sharing`() {
0:
  br ^101

101:
  _41 = new_try_tag `'try'`
  br _41, ^100, ^38

100:
  br ^102

102:
  _46 = new_try_tag `'try'`
  br _46, ^45, ^43

45:
  %% beam_jump_SUITE.erl:95
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _29 = call (`id`/1), `42`

  %% Aliased:
  %%    _29
  _47 = succeeded:body _29
  br _47, ^47, ^43

47:
  %% Unique:
  %%    _46
  _60 = kill_try_tag _46

  %% Unique:
  %%    _41
  _68 = kill_try_tag _41

  %% beam_jump_SUITE.erl:95
  %% Aliased:
  %%    _29
  _34 = match_fail `try_clause`, _29

  %% Unique:
  %%    _34
  _65 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35

43:
  %% Unique:
  %%    _46
  _58 = landingpad `'try'`, _46

  %% Aliased:
  %%    _58
  _2 = extract _58, `1`

  %% Aliased:
  %%    _58
  _1 = extract _58, `2`

  %% Unique:
  %%    _46
  _59 = kill_try_tag _46
  br ^49

49:
  %% Aliased:
  %%    _1, 
  %%    _2
  _32 = resume _1, _2

  %% Unique:
  %%    _32
  _57 = succeeded:body _32
  br ^38

38:
  %% Unique:
  %%    _41
  _66 = landingpad `'try'`, _41

  %% Unique:
  %%    _41
  _67 = kill_try_tag _41
  %% Result type:
  %%    'name'
  ret `name`
}

%% beam_jump_SUITE.erl:97
%% Counter = 44
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`unsafe_move_elimination`(_0) {
0:
  %% beam_jump_SUITE.erl:98
  %% Result type:
  %%    {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  _10 = call (`unsafe_move_elimination_1`/3), `left`, `right`, `false`

  %% Unique:
  %%    _10
  _27 = succeeded:body _10
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _10 => {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  %% Unique:
  %%    _10
  _42 = bif:'=:=' _10, `{{left,right,false},false}`
  br _42, ^42, ^29

42:
  %% beam_jump_SUITE.erl:99
  %% Result type:
  %%    {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  _11 = call (`unsafe_move_elimination_1`/3), `false`, `right`, `true`

  %% Unique:
  %%    _11
  _30 = succeeded:body _11
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _11 => {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  %% Unique:
  %%    _11
  _40 = bif:'=:=' _11, `{{false,right,false},false}`
  br _40, ^40, ^32

40:
  %% beam_jump_SUITE.erl:100
  %% Result type:
  %%    {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  _12 = call (`unsafe_move_elimination_1`/3), `true`, `right`, `true`

  %% Unique:
  %%    _12
  _33 = succeeded:body _12
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _12 => {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  %% Unique:
  %%    _12
  _38 = bif:'=:=' _12, `{{true,right,right},right}`
  br _38, ^38, ^35

38:
  %% beam_jump_SUITE.erl:101
  _6 = call (`lists`:`seq`/2), `0`, `16`

  %% Aliased:
  %%    _6
  _36 = succeeded:body _6
  br _36, ^36, ^1

36:
  %% beam_jump_SUITE.erl:101
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _6
  _21 = call (`'-unsafe_move_elimination/1-lc$^0/1-0-'`/1), _6

  %% Unique:
  %%    _21
  _37 = succeeded:body _21
  br _37, ^37, ^1

37:
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  %% beam_jump_SUITE.erl:100
  %% Unique:
  %%    _12
  _22 = match_fail `badmatch`, _12

  %% Unique:
  %%    _22
  _39 = succeeded:body _22
  br ^1

32:
  %% beam_jump_SUITE.erl:99
  %% Unique:
  %%    _11
  _23 = match_fail `badmatch`, _11

  %% Unique:
  %%    _23
  _41 = succeeded:body _23
  br ^1

29:
  %% beam_jump_SUITE.erl:98
  %% Unique:
  %%    _10
  _24 = match_fail `badmatch`, _10

  %% Unique:
  %%    _24
  _43 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% beam_jump_SUITE.erl:104
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'left' | 'true'
%%    _1 =>
%%     'right'
%%    _2 =>
%%     'false' | 'true'
function `beam_jump_SUITE`:`unsafe_move_elimination_1`(_0, _1, _2) {
0:
  %% beam_jump_SUITE.erl:105
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _10 = call (`id`/1), `1`

  %% Aliased:
  %%    _10
  _18 = succeeded:body _10
  br _18, ^18, ^1

18:
  br _2, ^23, ^28

23:
  %% beam_jump_SUITE.erl:125
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  _11 = call (`id`/1), _0

  %% Aliased:
  %%    _11
  _21 = succeeded:body _11
  br _21, ^19, ^1

19:
  %% Argument types:
  %%    
  switch _11, ^26, [
    { `false`, ^28 },
    { `true`, ^29 }
  ]

29:
  %% beam_jump_SUITE.erl:131
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _13 = call (`id`/1), `right`

  %% Aliased:
  %%    _13
  _27 = succeeded:body _13
  br _27, ^27, ^1

27:
  br ^25

26:
  %% beam_jump_SUITE.erl:123
  %% Aliased:
  %%    _11
  _14 = match_fail `case_clause`, _11

  %% Unique:
  %%    _14
  _30 = succeeded:body _14
  br ^1

28:
  br ^25

25:
  _6 = phi { _13, ^27 }, { `false`, ^28 }

  %% Argument types:
  %%    _0 => 'false' | 'left' | 'true'
  %%    _6 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _0
  _9 = put_tuple _0, `right`, _6

  %% beam_jump_SUITE.erl:133
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Unique:
  %%    _9
  _8 = call (`id`/1), _9

  %% Aliased:
  %%    _8
  _31 = succeeded:body _8
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    _8 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %%    _6 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _6, 
  %%    _8
  _15 = put_tuple _8, _6
  %% Result type:
  %%    {atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other(), atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()}
  %% Unique:
  %%    _15
  ret _15

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_jump_SUITE.erl:135
%% Counter = 40
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`unsafe_move_elimination_2`(_0) {
0:
  %% beam_jump_SUITE.erl:148
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  TagInt = bif:'band' _0, `7`

  %% Unique:
  %%    TagInt
  _17 = succeeded:body TagInt
  br _17, ^17, ^1

17:
  %% Argument types:
  %%    
  switch TagInt, ^34, [
    { `0`, ^20 },
    { `1`, ^21 },
    { `2`, ^22 },
    { `3`, ^23 },
    { `4`, ^24 },
    { `5`, ^25 },
    { `6`, ^33 }
  ]

25:
  br ^18

24:
  br ^18

23:
  br ^18

22:
  br ^18

21:
  br ^18

20:
  br ^18

18:
  _3 = phi { `a`, ^20 }, { `b`, ^21 }, { `c`, ^22 }, { `d`, ^23 }, { `e`, ^24 }, { `f`, ^25 }
  %% Argument types:
  %%    
  switch _3, ^30, [
    { `g`, ^33 },
    { `h`, ^34 }
  ]

33:
  %% beam_jump_SUITE.erl:160
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    TagInt
  _13 = call (`expects_g`/2), TagInt, `g`

  %% Unique:
  %%    _13
  _31 = succeeded:body _13
  br _31, ^31, ^1

31:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _13
  ret _13

30:
  %% beam_jump_SUITE.erl:162
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _3
  _10 = call (`id`/1), _3

  %% Aliased:
  %%    _10
  _35 = succeeded:body _10
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    _10 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %%    _3 => atom()
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _3
  _38 = bif:'=:=' _10, _3
  br _38, ^38, ^37

38:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% beam_jump_SUITE.erl:162
  %% Aliased:
  %%    _10
  _14 = match_fail `badmatch`, _10

  %% Unique:
  %%    _14
  _39 = succeeded:body _14
  br ^1

34:
  %% beam_jump_SUITE.erl:161
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    TagInt
  _12 = call (`expects_h`/2), TagInt, `h`

  %% Unique:
  %%    _12
  _32 = succeeded:body _12
  br _32, ^32, ^1

32:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _12
  ret _12

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_jump_SUITE.erl:165
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..6
%%    _1 =>
%%     'g'
function `beam_jump_SUITE`:`expects_g`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 0..6
  %% Unique:
  %%    _0
  _18 = bif:'=:=' _0, `6`
  br _18, ^17, ^11

17:
  %% beam_jump_SUITE.erl:166
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _6 = call (`id`/1), `g`

  %% Aliased:
  %%    _6
  _12 = succeeded:body _6
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _6 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _6
  _15 = bif:'=:=' _6, `g`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_jump_SUITE.erl:166
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br ^1

11:
  %% beam_jump_SUITE.erl:165
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-expects_g/2-',2}}
  _8 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_jump_SUITE.erl:169
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..7
%%    _1 =>
%%     'h'
function `beam_jump_SUITE`:`expects_h`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 0..7
  %% Unique:
  %%    _0
  _18 = bif:'=:=' _0, `7`
  br _18, ^17, ^11

17:
  %% beam_jump_SUITE.erl:170
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _6 = call (`id`/1), `h`

  %% Aliased:
  %%    _6
  _12 = succeeded:body _6
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _6 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _6
  _15 = bif:'=:=' _6, `h`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_jump_SUITE.erl:170
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br ^1

11:
  %% beam_jump_SUITE.erl:169
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-expects_h/2-',2}}
  _8 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_jump_SUITE.erl:175
%% Counter = 187
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`ambiguous_catch_try_state_1`(_0) {
0:
  br ^183

183:
  _66 = new_try_tag `'try'`
  br _66, ^180, ^63

180:
  br ^184

184:
  _71 = new_try_tag `'try'`
  br _71, ^181, ^68

181:
  br ^185

185:
  _76 = new_try_tag `'try'`
  br _76, ^182, ^73

182:
  br ^186

186:
  _81 = new_try_tag `'try'`
  br _81, ^80, ^78

80:
  br ^40

40:
  _83 = wait_timeout `bad`

  %% Unique:
  %%    _83
  _84 = succeeded:body _83
  br _84, ^84, ^78

84:
  br _83, ^86, ^87

86:
  %% Unique:
  %%    _81
  _94 = kill_try_tag _81
  br ^79

87:
  br ^40

78:
  %% Unique:
  %%    _81
  _92 = landingpad `'try'`, _81

  %% Aliased:
  %%    _92
  _3 = extract _92, `1`

  %% Aliased:
  %%    _92
  _2 = extract _92, `2`

  %% Unique:
  %%    _81
  _93 = kill_try_tag _81

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _3
  _90 = bif:'=:=' _3, _0
  br _90, ^90, ^89

90:
  br ^79

79:
  _46 = phi { `timeout`, ^86 }, { `error`, ^90 }

  %% Unique:
  %%    _76
  _98 = kill_try_tag _76

  %% Unique:
  %%    _71
  _113 = kill_try_tag _71

  %% beam_jump_SUITE.erl:181
  %% Unique:
  %%    _46
  _54 = match_fail `try_clause`, _46

  %% Unique:
  %%    _54
  _103 = succeeded:body _54
  br ^63

89:
  %% Aliased:
  %%    _2, 
  %%    _3
  _51 = resume _2, _3

  %% Unique:
  %%    _51
  _91 = succeeded:body _51
  br ^73

73:
  %% Unique:
  %%    _76
  _96 = landingpad `'try'`, _76

  %% Aliased:
  %%    _96
  _8 = extract _96, `1`

  %% Aliased:
  %%    _96
  _7 = extract _96, `2`

  %% Unique:
  %%    _76
  _97 = kill_try_tag _76

  %% Aliased:
  %%    _7, 
  %%    _8
  _52 = resume _7, _8

  %% Unique:
  %%    _52
  _95 = succeeded:body _52
  br ^68

68:
  %% Unique:
  %%    _71
  _111 = landingpad `'try'`, _71

  %% Aliased:
  %%    _111
  _13 = extract _111, `1`

  %% Aliased:
  %%    _111
  _12 = extract _111, `2`

  %% Unique:
  %%    _71
  _112 = kill_try_tag _71
  br ^105

105:
  %% Aliased:
  %%    _12, 
  %%    _13
  _57 = resume _12, _13

  %% Unique:
  %%    _57
  _110 = succeeded:body _57
  br ^63

63:
  %% Unique:
  %%    _66
  _116 = landingpad `'try'`, _66

  %% Unique:
  %%    _66
  _117 = kill_try_tag _66

  %% beam_jump_SUITE.erl:181
  _59 = match_fail `badmatch`, `b`

  %% Unique:
  %%    _59
  _115 = succeeded:body _59
  br ^1

1:
  _60 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _60
}

%% beam_jump_SUITE.erl:202
%% Counter = 98
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`ambiguous_catch_try_state_2`() {
0:
  br ^96

96:
  _36 = new_try_tag `'try'`
  br _36, ^95, ^33

95:
  br ^97

97:
  _41 = new_try_tag `'try'`
  br _41, ^40, ^38

40:
  %% beam_jump_SUITE.erl:205
  _22 = match_fail `badmatch`, `0`

  %% Unique:
  %%    _22
  _42 = succeeded:body _22
  br ^38

38:
  %% Unique:
  %%    _41
  _52 = landingpad `'try'`, _41

  %% Aliased:
  %%    _52
  _5 = extract _52, `1`

  %% Aliased:
  %%    _52
  _4 = extract _52, `2`

  %% Unique:
  %%    _41
  _53 = kill_try_tag _41
  br ^44

44:
  %% Aliased:
  %%    _4, 
  %%    _5
  _26 = resume _4, _5

  %% Unique:
  %%    _26
  _51 = succeeded:body _26
  br ^33

33:
  %% Unique:
  %%    _36
  _56 = landingpad `'try'`, _36

  %% Aliased:
  %%    _56
  _10 = extract _56, `1`

  %% Aliased:
  %%    _56
  _9 = extract _56, `2`

  %% Unique:
  %%    _36
  _57 = kill_try_tag _36

  %% Aliased:
  %%    _9, 
  %%    _10
  _27 = resume _9, _10

  %% Unique:
  %%    _27
  _55 = succeeded:body _27
  br ^1

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% beam_jump_SUITE.erl:217
%% Counter = 100
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`ambiguous_catch_try_state_3`() {
0:
  br ^98

98:
  _38 = new_try_tag `'try'`
  br _38, ^97, ^35

97:
  br ^99

99:
  _43 = new_try_tag `'try'`
  br _43, ^42, ^40

42:
  %% beam_jump_SUITE.erl:220
  _24 = match_fail `badmatch`, `0`

  %% Unique:
  %%    _24
  _44 = succeeded:body _24
  br ^40

40:
  %% Unique:
  %%    _43
  _54 = landingpad `'try'`, _43

  %% Aliased:
  %%    _54
  _5 = extract _54, `1`

  %% Aliased:
  %%    _54
  _4 = extract _54, `2`

  %% Unique:
  %%    _43
  _55 = kill_try_tag _43
  br ^46

46:
  %% Aliased:
  %%    _4, 
  %%    _5
  _28 = resume _4, _5

  %% Unique:
  %%    _28
  _53 = succeeded:body _28
  br ^35

35:
  %% Unique:
  %%    _38
  _58 = landingpad `'try'`, _38

  %% Aliased:
  %%    _58
  _11 = extract _58, `1`

  %% Aliased:
  %%    _58
  _10 = extract _58, `2`

  %% Unique:
  %%    _38
  _59 = kill_try_tag _38

  %% Aliased:
  %%    _10, 
  %%    _11
  _29 = resume _10, _11

  %% Unique:
  %%    _29
  _57 = succeeded:body _29
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_jump_SUITE.erl:233
%% Counter = 71
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`ambiguous_catch_try_state_4`() {
0:
  br ^70

70:
  _28 = new_try_tag `'try'`
  br _28, ^27, ^25

27:
  %% beam_jump_SUITE.erl:234
  _12 = call (`erlang`:`garbage_collect`/0)

  %% Aliased:
  %%    _12
  _29 = succeeded:body _12
  br _29, ^29, ^25

29:
  switch _12, ^31, [
    { `false`, ^40 },
    { `true`, ^53 }
  ]

53:
  %% beam_jump_SUITE.erl:234
  _19 = call (`erlang`:`binary_to_float`/1), `true`

  %% Aliased:
  %%    _19
  _42 = succeeded:body _19
  br _42, ^42, ^25

42:
  %% Unique:
  %%    _28
  _46 = kill_try_tag _28

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _50 = bif:'=:=' _19, `0.0`
  br _50, ^49, ^48

49:
  %% Result type:
  %%    0.0
  ret `0.0`

48:
  %% beam_jump_SUITE.erl:234
  %% Aliased:
  %%    _19
  _21 = match_fail `badmatch`, _19

  %% Unique:
  %%    _21
  _51 = succeeded:body _21
  br ^1

40:
  %% beam_jump_SUITE.erl:234
  _2 = call (`erlang`:`tuple_to_list`/1), `ok`

  %% Aliased:
  %%    _2
  _32 = succeeded:body _2
  br ^25

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _13 = put_tuple `badarg`, _12

  %% beam_jump_SUITE.erl:234
  %% Unique:
  %%    _13
  _18 = call (`erlang`:`error`/1), _13

  %% Aliased:
  %%    _18
  _41 = succeeded:body _18
  br ^25

25:
  %% Unique:
  %%    _28
  _44 = landingpad `'try'`, _28

  %% Aliased:
  %%    _44
  _8 = extract _44, `1`

  %% Aliased:
  %%    _44
  _7 = extract _44, `2`

  %% Unique:
  %%    _28
  _45 = kill_try_tag _28

  %% Aliased:
  %%    _7, 
  %%    _8
  _20 = resume _7, _8

  %% Unique:
  %%    _20
  _43 = succeeded:body _20
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% beam_jump_SUITE.erl:242
%% Counter = 65
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`build_tuple`(_0) {
0:
  br ^64

64:
  _21 = new_try_tag `'catch'`
  br _21, ^19, ^20

19:
  %% beam_jump_SUITE.erl:244
  %% Result type:
  %%    none()
  _14 = call (`do_build_tuple`/1), `{message2,undefined,undefined}`
  _23 = succeeded:body _14
  br ^20

20:
  %% Unique:
  %%    _21
  _26 = landingpad `'catch'`, _21

  %% Aliased:
  %%    _26
  _24 = extract _26, `0`
  br ^18

18:
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _21
  _2 = catch_end _21, _24

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _44 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _44, ^41, ^29

41:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _7 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _38 = bif:is_tuple _7
  br _38, ^38, ^29

38:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _39 = bif:tuple_size _7

  %% Argument types:
  %%    _39 => 0..16777215
  %% Unique:
  %%    _39
  _40 = bif:'=:=' _39, `2`
  br _40, ^37, ^29

37:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _10 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _34 = is_tagged_tuple _10, `2`, `badrecord`
  br _34, ^31, ^29

31:
  %% Argument types:
  %%    _10 => {'badrecord', any()}
  %% Aliased:
  %%    _10
  _11 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _30 = bif:'=:=' _11, `{message2,undefined,undefined}`
  br _30, ^30, ^29

30:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% beam_jump_SUITE.erl:244
  %% Aliased:
  %%    _2
  _15 = match_fail `badmatch`, _2

  %% Unique:
  %%    _15
  _47 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_jump_SUITE.erl:247
%% Counter = 50
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'message2', 'undefined', 'undefined'}
function `beam_jump_SUITE`:`do_build_tuple`(_0) {
0:
  %% beam_jump_SUITE.erl:249
  _1 = call (`rand`:`uniform`/1), `100`

  %% Aliased:
  %%    _1
  _28 = succeeded:body _1
  br _28, ^30, ^1

30:
  %% beam_jump_SUITE.erl:250
  _14 = match_fail `badrecord`, `{message2,undefined,undefined}`

  %% Unique:
  %%    _14
  _37 = succeeded:body _14
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_jump_SUITE.erl:253
%% Counter = 92
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`coverage`(_0) {
0:
  %% beam_jump_SUITE.erl:254
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _11 = call (`coverage_1`/1), `ok`

  %% Aliased:
  %%    _11
  _33 = succeeded:body _11
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _11 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _11
  _90 = bif:'=:=' _11, `ok`
  br _90, ^89, ^35

89:
  %% beam_jump_SUITE.erl:255
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _12 = call (`coverage_1`/1), `{error,badarg}`

  %% Aliased:
  %%    _12
  _36 = succeeded:body _12
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _12 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _12
  _87 = bif:'=:=' _12, `{error,badarg}`
  br _87, ^87, ^38

87:
  %% beam_jump_SUITE.erl:257
  %% Result type:
  %%    'gt' | 'le'
  _13 = call (`coverage_2`/2), `100`, `42`

  %% Unique:
  %%    _13
  _39 = succeeded:body _13
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _13 => 'gt' | 'le'
  %% Unique:
  %%    _13
  _85 = bif:'=:=' _13, `gt`
  br _85, ^84, ^41

84:
  %% beam_jump_SUITE.erl:258
  %% Result type:
  %%    'gt' | 'le'
  _14 = call (`coverage_2`/2), `100`, `999`

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    _14 => 'gt' | 'le'
  %% Unique:
  %%    _14
  _82 = bif:'=:=' _14, `le`
  br _82, ^81, ^44

81:
  %% beam_jump_SUITE.erl:259
  %% Result type:
  %%    'gt' | 'le'
  _15 = call (`coverage_2`/2), `[]`, `[]`

  %% Unique:
  %%    _15
  _45 = succeeded:body _15
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _15 => 'gt' | 'le'
  %% Unique:
  %%    _15
  _79 = bif:'=:=' _15, `le`
  br _79, ^78, ^47

78:
  %% beam_jump_SUITE.erl:260
  %% Result type:
  %%    'gt' | 'le'
  _16 = call (`coverage_2`/2), `[]`, `xxx`

  %% Unique:
  %%    _16
  _48 = succeeded:body _16
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _16 => 'gt' | 'le'
  %% Unique:
  %%    _16
  _76 = bif:'=:=' _16, `gt`
  br _76, ^75, ^50

75:
  %% beam_jump_SUITE.erl:262
  %% Result type:
  %%    'error'
  _17 = call (`coverage_3`/1), `#{key => <<"child">>}`

  %% Unique:
  %%    _17
  _51 = succeeded:body _17
  br _51, ^72, ^1

72:
  %% beam_jump_SUITE.erl:263
  %% Result type:
  %%    'error'
  _18 = call (`coverage_3`/1), `#{}`

  %% Unique:
  %%    _18
  _54 = succeeded:body _18
  br _54, ^69, ^1

69:
  %% beam_jump_SUITE.erl:265
  %% Result type:
  %%    'ok'
  _19 = call (`coverage_4`/1), `whatever`

  %% Unique:
  %%    _19
  _57 = succeeded:body _19
  br _57, ^66, ^1

66:
  %% beam_jump_SUITE.erl:266
  %% Result type:
  %%    -0.5
  _20 = call (`coverage_4`/1), `any`

  %% Unique:
  %%    _20
  _60 = succeeded:body _20
  br _60, ^63, ^1

63:
  %% Result type:
  %%    'ok'
  ret `ok`

50:
  %% beam_jump_SUITE.erl:260
  _25 = match_fail `badmatch`, `le`

  %% Unique:
  %%    _25
  _77 = succeeded:body _25
  br ^1

47:
  %% beam_jump_SUITE.erl:259
  _26 = match_fail `badmatch`, `gt`

  %% Unique:
  %%    _26
  _80 = succeeded:body _26
  br ^1

44:
  %% beam_jump_SUITE.erl:258
  _27 = match_fail `badmatch`, `gt`

  %% Unique:
  %%    _27
  _83 = succeeded:body _27
  br ^1

41:
  %% beam_jump_SUITE.erl:257
  _28 = match_fail `badmatch`, `le`

  %% Unique:
  %%    _28
  _86 = succeeded:body _28
  br ^1

38:
  %% beam_jump_SUITE.erl:255
  %% Aliased:
  %%    _12
  _29 = match_fail `badmatch`, _12

  %% Unique:
  %%    _29
  _88 = succeeded:body _29
  br ^1

35:
  %% beam_jump_SUITE.erl:254
  %% Aliased:
  %%    _11
  _30 = match_fail `badmatch`, _11

  %% Unique:
  %%    _30
  _91 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_jump_SUITE.erl:270
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'ok' | {'error', 'badarg'}
function `beam_jump_SUITE`:`coverage_1`(_0) {
0:
  %% beam_jump_SUITE.erl:271
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Unique:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_jump_SUITE.erl:277
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil() | 100
%%    _1 =>
%%     'xxx' | nil() | 42..999
function `beam_jump_SUITE`:`coverage_2`(_0, _1) {
0:
  %% beam_jump_SUITE.erl:279
  %% Argument types:
  %%    _0 => nil() | 100
  %% Unique:
  %%    _0
  _6 = bif:'=:=' _0, `[]`
  br _6, ^14, ^21

14:
  %% beam_jump_SUITE.erl:283
  %% Argument types:
  %%    _1 => 'xxx' | nil() | 42..999
  %% Unique:
  %%    _1
  _8 = bif:'=:=' _1, `[]`
  br _8, ^21, ^20

20:
  %% Result type:
  %%    'gt'
  ret `gt`

21:
  %% beam_jump_SUITE.erl:289
  %% Argument types:
  %%    _0 => nil() | 100
  %%    _1 => 'xxx' | nil() | 42..999
  %% Unique:
  %%    _0, 
  %%    _1
  _7 = bif:'>' _0, _1
  br _7, ^18, ^19

18:
  %% Result type:
  %%    'gt'
  ret `gt`

19:
  %% Result type:
  %%    'le'
  ret `le`
}

%% beam_jump_SUITE.erl:297
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{'key'=>bitstring(8)}
function `beam_jump_SUITE`:`coverage_3`(_0) {
0:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_jump_SUITE.erl:303
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'any' | 'ok' | 'whatever'
function `beam_jump_SUITE`:`coverage_4`(_0) {
0:
  %% Argument types:
  %%    _0 => 'any' | 'ok' | 'whatever'
  %% Unique:
  %%    _0
  _17 = bif:'=:=' _0, `whatever`
  br _17, ^16, ^13

16:
  %% beam_jump_SUITE.erl:305
  %% Result type:
  %%    -0.5
  _10 = call (`coverage_4`/1), `ok`

  %% Unique:
  %%    _10
  _14 = succeeded:body _10
  br _14, ^14, ^1

14:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11

13:
  %% Result type:
  %%    -0.5
  ret `-0.5`
}

%% beam_jump_SUITE.erl:314
%% Counter = 146
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`call_sharing`(_0) {
0:
  %% beam_jump_SUITE.erl:318
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _3 = call (`id`/1), `{a,1}`

  %% Aliased:
  %%    _3
  _48 = succeeded:body _3
  br _48, ^48, ^1

48:
  %% beam_jump_SUITE.erl:318
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _3
  _28 = call (`cs_1`/1), _3

  %% Aliased:
  %%    _28
  _49 = succeeded:body _28
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _28 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _28
  _52 = bif:'=:=' _28, `{a,1}`
  br _52, ^52, ^51

52:
  %% beam_jump_SUITE.erl:319
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _5 = call (`id`/1), `{a,1,2}`

  %% Aliased:
  %%    _5
  _53 = succeeded:body _5
  br _53, ^53, ^1

53:
  %% beam_jump_SUITE.erl:319
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _5
  _29 = call (`cs_1`/1), _5

  %% Aliased:
  %%    _29
  _54 = succeeded:body _29
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    _29 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _29
  _57 = bif:'=:=' _29, `{a,1,2}`
  br _57, ^57, ^56

57:
  %% beam_jump_SUITE.erl:323
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _9 = call (`id`/1), `{b,1}`

  %% Aliased:
  %%    _9
  _58 = succeeded:body _9
  br _58, ^58, ^1

58:
  %% beam_jump_SUITE.erl:323
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _9
  _30 = call (`cs_1`/1), _9

  %% Aliased:
  %%    _30
  _59 = succeeded:body _30
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    _30 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _30
  _62 = bif:'=:=' _30, `{b,1}`
  br _62, ^62, ^61

62:
  %% beam_jump_SUITE.erl:324
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _11 = call (`id`/1), `{b,1,2}`

  %% Aliased:
  %%    _11
  _63 = succeeded:body _11
  br _63, ^63, ^1

63:
  %% beam_jump_SUITE.erl:324
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _11
  _31 = call (`cs_1`/1), _11

  %% Aliased:
  %%    _31
  _64 = succeeded:body _31
  br _64, ^64, ^1

64:
  %% Argument types:
  %%    _31 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _31
  _67 = bif:'=:=' _31, `{b,1,2}`
  br _67, ^142, ^66

142:
  br ^144

144:
  _71 = new_try_tag `'catch'`
  br _71, ^69, ^70

69:
  %% beam_jump_SUITE.erl:328
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _15 = call (`id`/1), `{c,1}`

  %% Aliased:
  %%    _15
  _73 = succeeded:body _15
  br _73, ^73, ^70

73:
  %% beam_jump_SUITE.erl:328
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _15
  _37 = call (`cs_1`/1), _15

  %% Aliased:
  %%    _37
  _74 = succeeded:body _37
  br _74, ^74, ^70

74:
  br ^68

70:
  %% Unique:
  %%    _71
  _77 = landingpad `'catch'`, _71

  %% Aliased:
  %%    _77
  _75 = extract _77, `0`
  br ^68

68:
  _78 = phi { _75, ^70 }, { _37, ^74 }

  %% Aliased:
  %%    _78
  %% Unique:
  %%    _71
  _16 = catch_end _71, _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _104 = is_tagged_tuple _16, `2`, `'EXIT'`
  br _104, ^143, ^80

143:
  br ^145

145:
  _84 = new_try_tag `'catch'`
  br _84, ^82, ^83

82:
  %% beam_jump_SUITE.erl:329
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _18 = call (`id`/1), `{c,1,2}`

  %% Aliased:
  %%    _18
  _86 = succeeded:body _18
  br _86, ^86, ^83

86:
  %% beam_jump_SUITE.erl:329
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _18
  _39 = call (`cs_1`/1), _18

  %% Aliased:
  %%    _39
  _87 = succeeded:body _39
  br _87, ^87, ^83

87:
  br ^81

83:
  %% Unique:
  %%    _84
  _90 = landingpad `'catch'`, _84

  %% Aliased:
  %%    _90
  _88 = extract _90, `0`
  br ^81

81:
  _91 = phi { _88, ^83 }, { _39, ^87 }

  %% Aliased:
  %%    _91
  %% Unique:
  %%    _84
  _19 = catch_end _84, _91

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _97 = is_tagged_tuple _19, `2`, `'EXIT'`
  br _97, ^94, ^93

94:
  %% Result type:
  %%    'ok'
  ret `ok`

93:
  %% beam_jump_SUITE.erl:329
  %% Aliased:
  %%    _19
  _40 = match_fail `badmatch`, _19

  %% Unique:
  %%    _40
  _100 = succeeded:body _40
  br ^1

80:
  %% beam_jump_SUITE.erl:328
  %% Aliased:
  %%    _16
  _41 = match_fail `badmatch`, _16

  %% Unique:
  %%    _41
  _107 = succeeded:body _41
  br ^1

66:
  %% beam_jump_SUITE.erl:324
  %% Aliased:
  %%    _31
  _42 = match_fail `badmatch`, _31

  %% Unique:
  %%    _42
  _108 = succeeded:body _42
  br ^1

61:
  %% beam_jump_SUITE.erl:323
  %% Aliased:
  %%    _30
  _43 = match_fail `badmatch`, _30

  %% Unique:
  %%    _43
  _109 = succeeded:body _43
  br ^1

56:
  %% beam_jump_SUITE.erl:319
  %% Aliased:
  %%    _29
  _44 = match_fail `badmatch`, _29

  %% Unique:
  %%    _44
  _110 = succeeded:body _44
  br ^1

51:
  %% beam_jump_SUITE.erl:318
  %% Aliased:
  %%    _28
  _45 = match_fail `badmatch`, _28

  %% Unique:
  %%    _45
  _111 = succeeded:body _45
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% beam_jump_SUITE.erl:333
%% Counter = 49
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
function `beam_jump_SUITE`:`cs_1`(_0) {
0:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  _36 = bif:is_tuple _0
  br _36, ^36, ^27

36:
  %% Argument types:
  %%    _0 => {atom(), 'badarg' | 'right' | 1, ...}
  %% Aliased:
  %%    _0
  _37 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _37, ^27, [
    { `2`, ^35 },
    { `3`, ^34 }
  ]

34:
  %% Argument types:
  %%    _0 => {atom(), 'badarg' | 'right' | 1, any()}
  %% Aliased:
  %%    _0
  _15 = get_tuple_element _0, `0`
  %% Argument types:
  %%    
  switch _15, ^27, [
    { `a`, ^29 },
    { `b`, ^29 }
  ]

29:
  %% beam_jump_SUITE.erl:336
  %% Result type:
  %%    {'a', 'badarg' | 'right' | 1} | {'b', 'badarg' | 'right' | 1} | {'a', 'badarg' | 'right' | 1, any()} | {'b', 'badarg' | 'right' | 1, any()}
  %% Aliased:
  %%    _0
  _21 = call (`cs_2`/1), _0

  %% Aliased:
  %%    _21
  _30 = succeeded:body _21
  br _30, ^30, ^1

30:
  br ^26

35:
  %% Argument types:
  %%    _0 => {atom(), 'badarg' | 'right' | 1}
  %% Aliased:
  %%    _0
  _18 = get_tuple_element _0, `0`
  %% Argument types:
  %%    
  switch _18, ^27, [
    { `a`, ^32 },
    { `b`, ^32 }
  ]

32:
  %% beam_jump_SUITE.erl:336
  %% Result type:
  %%    {'a', 'badarg' | 'right' | 1} | {'b', 'badarg' | 'right' | 1} | {'a', 'badarg' | 'right' | 1, any()} | {'b', 'badarg' | 'right' | 1, any()}
  %% Aliased:
  %%    _0
  _20 = call (`cs_2`/1), _0

  %% Aliased:
  %%    _20
  _33 = succeeded:body _20
  br _33, ^33, ^1

33:
  br ^26

26:
  _6 = phi { _21, ^30 }, { _20, ^33 }

  %% beam_jump_SUITE.erl:338
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _6
  _23 = call (`id`/1), _6

  %% Aliased:
  %%    _23
  _39 = succeeded:body _23
  br _39, ^39, ^1

39:
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _23
  ret _23

27:
  %% beam_jump_SUITE.erl:334
  %% Aliased:
  %%    _0
  _22 = match_fail `case_clause`, _0

  %% Unique:
  %%    _22
  _38 = succeeded:body _22
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_jump_SUITE.erl:340
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'badarg' | 'right' | 1} | {'b', 'badarg' | 'right' | 1} | {'a', 'badarg' | 'right' | 1, any()} | {'b', 'badarg' | 'right' | 1, any()}
function `beam_jump_SUITE`:`cs_2`(_0) {
0:
  %% Result type:
  %%    {'a', 'badarg' | 'right' | 1} | {'b', 'badarg' | 'right' | 1} | {'a', 'badarg' | 'right' | 1, any()} | {'b', 'badarg' | 'right' | 1, any()}
  %% Aliased:
  %%    _0
  ret _0
}

%% beam_jump_SUITE.erl:342
%% Counter = 371
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`undecided_allocation`(_0) {
0:
  br ^365

365:
  _86 = new_try_tag `'catch'`
  br _86, ^84, ^85

84:
  %% beam_jump_SUITE.erl:343
  %% Result type:
  %%    'ok'
  _58 = call (`undecided_allocation_1`/1), `<<0,0,10:5>>`

  %% Unique:
  %%    _58
  _88 = succeeded:body _58
  br _88, ^88, ^85

88:
  br ^83

85:
  %% Unique:
  %%    _86
  _91 = landingpad `'catch'`, _86

  %% Aliased:
  %%    _91
  _89 = extract _91, `0`
  br ^83

83:
  _92 = phi { _89, ^85 }, { `ok`, ^88 }

  %% Aliased:
  %%    _92
  %% Unique:
  %%    _86
  _3 = catch_end _86, _92

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _251 = bif:'=:=' _3, `ok`
  br _251, ^359, ^94

359:
  br ^366

366:
  _98 = new_try_tag `'catch'`
  br _98, ^96, ^97

96:
  %% beam_jump_SUITE.erl:344
  %% Result type:
  %%    none()
  _60 = call (`undecided_allocation_1`/1), `8`

  %% Aliased:
  %%    _60
  _100 = succeeded:body _60
  br ^97

97:
  %% Unique:
  %%    _98
  _103 = landingpad `'catch'`, _98

  %% Aliased:
  %%    _103
  _101 = extract _103, `0`
  br ^95

95:
  %% Aliased:
  %%    _101
  %% Unique:
  %%    _98
  _5 = catch_end _98, _101

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _246 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _246, ^243, ^106

243:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _36 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _240 = bif:is_tuple _36
  br _240, ^240, ^106

240:
  %% Argument types:
  %%    _36 => {...}
  %% Aliased:
  %%    _36
  _241 = bif:tuple_size _36

  %% Argument types:
  %%    _241 => 0..16777215
  %% Unique:
  %%    _241
  _242 = bif:'=:=' _241, `2`
  br _242, ^239, ^106

239:
  %% Argument types:
  %%    _36 => {any(), any()}
  %% Aliased:
  %%    _36
  _39 = get_tuple_element _36, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _238 = bif:'=:=' _39, `{badrecord,<<0>>}`
  br _238, ^238, ^106

238:
  %% beam_jump_SUITE.erl:346
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _7 = call (`id`/1), `<<"bar">>`

  %% Aliased:
  %%    _7
  _107 = succeeded:body _7
  br _107, ^107, ^1

107:
  %% beam_jump_SUITE.erl:346
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _7
  _40 = call (`undecided_allocation_2`/1), _7

  %% Unique:
  %%    _40
  _108 = succeeded:body _40
  br _108, ^108, ^1

108:
  %% Argument types:
  %%    _40 => {'bar', 1} | {'foo', 2}
  %% Unique:
  %%    _40
  _236 = bif:'=:=' _40, `{bar,1}`
  br _236, ^236, ^110

236:
  %% beam_jump_SUITE.erl:347
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _9 = call (`id`/1), `<<"foo">>`

  %% Aliased:
  %%    _9
  _111 = succeeded:body _9
  br _111, ^111, ^1

111:
  %% beam_jump_SUITE.erl:347
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _9
  _41 = call (`undecided_allocation_2`/1), _9

  %% Unique:
  %%    _41
  _112 = succeeded:body _41
  br _112, ^112, ^1

112:
  %% Argument types:
  %%    _41 => {'bar', 1} | {'foo', 2}
  %% Unique:
  %%    _41
  _234 = bif:'=:=' _41, `{foo,2}`
  br _234, ^360, ^114

360:
  br ^367

367:
  _118 = new_try_tag `'catch'`
  br _118, ^116, ^117

116:
  %% beam_jump_SUITE.erl:348
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _11 = call (`id`/1), `<<"foobar">>`

  %% Aliased:
  %%    _11
  _120 = succeeded:body _11
  br _120, ^120, ^117

120:
  %% beam_jump_SUITE.erl:348
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _11
  _62 = call (`undecided_allocation_2`/1), _11

  %% Unique:
  %%    _62
  _121 = succeeded:body _62
  br _121, ^121, ^117

121:
  br ^115

117:
  %% Unique:
  %%    _118
  _124 = landingpad `'catch'`, _118

  %% Aliased:
  %%    _124
  _122 = extract _124, `0`
  br ^115

115:
  _125 = phi { _122, ^117 }, { _62, ^121 }

  %% Aliased:
  %%    _125
  %% Unique:
  %%    _118
  _12 = catch_end _118, _125

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _230 = is_tagged_tuple _12, `2`, `'EXIT'`
  br _230, ^361, ^127

361:
  br ^368

368:
  _131 = new_try_tag `'catch'`
  br _131, ^129, ^130

129:
  %% beam_jump_SUITE.erl:349
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _14 = call (`id`/1), `"foo,bar"`

  %% Aliased:
  %%    _14
  _133 = succeeded:body _14
  br _133, ^133, ^130

133:
  %% beam_jump_SUITE.erl:349
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _14
  _64 = call (`undecided_allocation_2`/1), _14

  %% Unique:
  %%    _64
  _134 = succeeded:body _64
  br _134, ^134, ^130

134:
  br ^128

130:
  %% Unique:
  %%    _131
  _137 = landingpad `'catch'`, _131

  %% Aliased:
  %%    _137
  _135 = extract _137, `0`
  br ^128

128:
  _138 = phi { _135, ^130 }, { _64, ^134 }

  %% Aliased:
  %%    _138
  %% Unique:
  %%    _131
  _15 = catch_end _131, _138

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _223 = is_tagged_tuple _15, `2`, `'EXIT'`
  br _223, ^220, ^140

220:
  %% Argument types:
  %%    _15 => {''EXIT'', any()}
  %% Aliased:
  %%    _15
  _44 = get_tuple_element _15, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _217 = bif:is_tuple _44
  br _217, ^217, ^140

217:
  %% Argument types:
  %%    _44 => {...}
  %% Aliased:
  %%    _44
  _218 = bif:tuple_size _44

  %% Argument types:
  %%    _218 => 0..16777215
  %% Unique:
  %%    _218
  _219 = bif:'=:=' _218, `2`
  br _219, ^216, ^140

216:
  %% Argument types:
  %%    _44 => {any(), any()}
  %% Aliased:
  %%    _44
  _47 = get_tuple_element _44, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _215 = bif:'=:=' _47, `{badmatch,error}`
  br _215, ^362, ^140

362:
  br ^369

369:
  _144 = new_try_tag `'catch'`
  br _144, ^142, ^143

142:
  %% beam_jump_SUITE.erl:350
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _17 = call (`id`/1), `foobar`

  %% Aliased:
  %%    _17
  _146 = succeeded:body _17
  br _146, ^146, ^143

146:
  %% beam_jump_SUITE.erl:350
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _17
  _66 = call (`undecided_allocation_2`/1), _17

  %% Unique:
  %%    _66
  _147 = succeeded:body _66
  br _147, ^147, ^143

147:
  br ^141

143:
  %% Unique:
  %%    _144
  _150 = landingpad `'catch'`, _144

  %% Aliased:
  %%    _150
  _148 = extract _150, `0`
  br ^141

141:
  _151 = phi { _148, ^143 }, { _66, ^147 }

  %% Aliased:
  %%    _151
  %% Unique:
  %%    _144
  _18 = catch_end _144, _151

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _211 = is_tagged_tuple _18, `2`, `'EXIT'`
  br _211, ^208, ^153

208:
  %% beam_jump_SUITE.erl:351
  _20 = call (`erlang`:`make_ref`/0)
  _157 = new_try_tag `'catch'`
  br _157, ^159, ^156

159:
  %% beam_jump_SUITE.erl:351
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _20
  _21 = call (`id`/1), _20

  %% Aliased:
  %%    _21
  _160 = succeeded:body _21
  br _160, ^160, ^156

160:
  %% beam_jump_SUITE.erl:351
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Aliased:
  %%    _21
  _68 = call (`undecided_allocation_2`/1), _21

  %% Unique:
  %%    _68
  _161 = succeeded:body _68
  br _161, ^161, ^156

161:
  br ^154

156:
  %% Unique:
  %%    _157
  _164 = landingpad `'catch'`, _157

  %% Aliased:
  %%    _164
  _162 = extract _164, `0`
  br ^154

154:
  _165 = phi { _162, ^156 }, { _68, ^161 }

  %% Aliased:
  %%    _165
  %% Unique:
  %%    _157
  _22 = catch_end _157, _165

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _204 = is_tagged_tuple _22, `2`, `'EXIT'`
  br _204, ^201, ^167

201:
  %% beam_jump_SUITE.erl:353
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _24 = call (`id`/1), `<<0>>`

  %% Aliased:
  %%    _24
  _168 = succeeded:body _24
  br _168, ^168, ^1

168:
  %% beam_jump_SUITE.erl:353
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _24
  _52 = call (`undecided_allocation_3`/2), _24, `gurka`

  %% Unique:
  %%    _52
  _169 = succeeded:body _52
  br _169, ^364, ^1

364:
  br ^370

370:
  _175 = new_try_tag `'catch'`
  br _175, ^173, ^174

173:
  %% beam_jump_SUITE.erl:354
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  _26 = call (`id`/1), `<<>>`

  %% Aliased:
  %%    _26
  _177 = succeeded:body _26
  br _177, ^177, ^174

177:
  %% beam_jump_SUITE.erl:354
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _26
  _70 = call (`undecided_allocation_3`/2), _26, `gurka`

  %% Unique:
  %%    _70
  _178 = succeeded:body _70
  br _178, ^178, ^174

178:
  br ^172

174:
  %% Unique:
  %%    _175
  _181 = landingpad `'catch'`, _175

  %% Aliased:
  %%    _181
  _179 = extract _181, `0`
  br ^172

172:
  _182 = phi { _179, ^174 }, { `ok`, ^178 }

  %% Aliased:
  %%    _182
  %% Unique:
  %%    _175
  _27 = catch_end _175, _182

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _194 = is_tagged_tuple _27, `2`, `'EXIT'`
  br _194, ^191, ^184

191:
  %% Argument types:
  %%    _27 => {''EXIT'', any()}
  %% Aliased:
  %%    _27
  _53 = get_tuple_element _27, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _188 = is_tagged_tuple _53, `2`, `badarith`
  br _188, ^185, ^184

185:
  %% Result type:
  %%    'ok'
  ret `ok`

184:
  %% beam_jump_SUITE.erl:354
  %% Aliased:
  %%    _27
  _71 = match_fail `badmatch`, _27

  %% Unique:
  %%    _71
  _197 = succeeded:body _71
  br ^1

167:
  %% beam_jump_SUITE.erl:351
  %% Aliased:
  %%    _22
  _73 = match_fail `badmatch`, _22

  %% Unique:
  %%    _73
  _207 = succeeded:body _73
  br ^1

153:
  %% beam_jump_SUITE.erl:350
  %% Aliased:
  %%    _18
  _74 = match_fail `badmatch`, _18

  %% Unique:
  %%    _74
  _214 = succeeded:body _74
  br ^1

140:
  %% beam_jump_SUITE.erl:349
  %% Aliased:
  %%    _15
  _75 = match_fail `badmatch`, _15

  %% Unique:
  %%    _75
  _226 = succeeded:body _75
  br ^1

127:
  %% beam_jump_SUITE.erl:348
  %% Aliased:
  %%    _12
  _76 = match_fail `badmatch`, _12

  %% Unique:
  %%    _76
  _233 = succeeded:body _76
  br ^1

114:
  %% beam_jump_SUITE.erl:347
  _77 = match_fail `badmatch`, `{bar,1}`

  %% Unique:
  %%    _77
  _235 = succeeded:body _77
  br ^1

110:
  %% beam_jump_SUITE.erl:346
  _78 = match_fail `badmatch`, `{foo,2}`

  %% Unique:
  %%    _78
  _237 = succeeded:body _78
  br ^1

106:
  %% beam_jump_SUITE.erl:344
  %% Aliased:
  %%    _5
  _79 = match_fail `badmatch`, _5

  %% Unique:
  %%    _79
  _249 = succeeded:body _79
  br ^1

94:
  %% beam_jump_SUITE.erl:343
  %% Aliased:
  %%    _3
  _80 = match_fail `badmatch`, _3

  %% Unique:
  %%    _80
  _252 = succeeded:body _80
  br ^1

1:
  _81 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _81
}

%% beam_jump_SUITE.erl:359
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     8 | bitstring(1)
%%     accepts_match_context
function `beam_jump_SUITE`:`undecided_allocation_1`(_0) {
0:
  %% Argument types:
  %%    _0 => 8 | bitstring(1)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _29 = bs_start_match `new`, _0

  %% Aliased:
  %%    _29
  _43 = succeeded:guard _29
  br _43, ^43, ^50

43:
  _68 = bs_ensure _29, `21`, `1`
  _69 = succeeded:guard _68
  br _69, ^67, ^39

67:
  %% Argument types:
  %%    _68 => bs_context(1)
  %% Aliased:
  %%    _29
  %% Anno: #{ensured => true}
  _31 = bs_match `string`, _68, `<<0,0,10:5>>`

  %% Aliased:
  %%    _31
  _41 = succeeded:guard _31
  br _41, ^41, ^39

41:
  %% Aliased:
  %%    _31
  _42 = bs_test_tail _31, `0`
  br _42, ^42, ^39

42:
  %% Result type:
  %%    'ok'
  ret `ok`

39:
  %% beam_jump_SUITE.erl:371
  _1 = bs_init_writable `256`

  %% Aliased:
  %%    _29
  _64 = bs_get_tail _29

  %% beam_jump_SUITE.erl:371
  %% Result type:
  %%    bitstring(8,appendable)
  %% Aliased:
  %%    _64
  %% Unique:
  %%    _1
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,
                     {b_local,
                         {b_literal,'-undecided_allocation_1/1-lbc$^0/2-0-'},
                         3}}}
  _9 = call (`'-undecided_allocation_1/1-lbc$^0/2-0-'`/3), `<<0>>`, _1, _64

  %% Unique:
  %%    _9
  _44 = succeeded:body _9
  br _44, ^46, ^1

46:
  %% beam_jump_SUITE.erl:371
  %% Unique:
  %%    _9
  _35 = match_fail `badrecord`, _9

  %% Unique:
  %%    _35
  _48 = succeeded:body _35
  br ^1

50:
  %% beam_jump_SUITE.erl:371
  _55 = bs_init_writable `256`

  %% beam_jump_SUITE.erl:371
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _55
  _56 = call (`'-undecided_allocation_1/1-lbc$^0/2-0-'`/3), `<<0>>`, _55, `8`

  %% Unique:
  %%    _56
  _57 = succeeded:body _56
  br _57, ^52, ^1

52:
  %% beam_jump_SUITE.erl:371
  %% Unique:
  %%    _56
  _59 = match_fail `badrecord`, _56

  %% Unique:
  %%    _59
  _60 = succeeded:body _59
  br ^1

1:
  _63 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _63
}

%% beam_jump_SUITE.erl:376
%% Counter = 82
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
%%     accepts_match_context
function `beam_jump_SUITE`:`undecided_allocation_2`(_0) {
0:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _13 = bs_start_match `new`, _0

  %% Aliased:
  %%    _13
  _30 = succeeded:guard _13
  br _30, ^30, ^47

30:
  _80 = bs_ensure _13, `24`, `1`
  _81 = succeeded:guard _80
  br _81, ^79, ^24

79:
  %% beam_jump_SUITE.erl:379
  %% Argument types:
  %%    _80 => bs_context(1)
  %% Aliased:
  %%    _13
  %% Anno: #{ensured => true}
  _14 = bs_match `integer`, _80, `[unsigned,big]`, `24`, `1`

  %% Aliased:
  %%    _14
  _25 = succeeded:guard _14
  br _25, ^25, ^24

25:
  %% Aliased:
  %%    _14
  _15 = bs_extract _14
  %% Argument types:
  %%    
  switch _15, ^24, [
    { `6447474`, ^28 },
    { `6713199`, ^29 }
  ]

29:
  %% Aliased:
  %%    _14
  _27 = bs_test_tail _14, `0`
  br _27, ^27, ^24

27:
  br ^23

28:
  %% Aliased:
  %%    _14
  _26 = bs_test_tail _14, `0`
  br _26, ^26, ^24

26:
  br ^23

23:
  _5 = phi { `{bar,1}`, ^26 }, { `{foo,2}`, ^27 }
  %% Result type:
  %%    {'bar', 1} | {'foo', 2}
  %% Unique:
  %%    _5
  ret _5

24:
  %% beam_jump_SUITE.erl:384
  _11 = call (`string`:`split`/2), `"foo"`, `"o"`

  %% Aliased:
  %%    _11
  _31 = succeeded:body _11
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _34 = bif:'=:=' _11, `[]`
  br _34, ^41, ^33

33:
  %% Aliased:
  %%    _13
  _76 = bs_get_tail _13

  %% Argument types:
  %%    _76 => bitstring(1)
  %% Aliased:
  %%    _76
  _37 = bif:is_binary _76
  br _37, ^37, ^36

37:
  br ^35

36:
  %% beam_jump_SUITE.erl:401
  %% Aliased:
  %%    _76
  %% Anno: #{bsm_info =>
                 {remote_call,
                     {b_remote,{b_literal,string},{b_literal,split},2}}}
  _18 = call (`string`:`split`/2), _76, `","`

  %% Aliased:
  %%    _18
  _38 = succeeded:body _18
  br _38, ^38, ^1

38:
  br ^35

35:
  _2 = phi { _76, ^37 }, { _18, ^38 }

  %% beam_jump_SUITE.erl:398
  %% Aliased:
  %%    _2
  _19 = call (`lists`:`flatten`/1), _2

  %% Aliased:
  %%    _19
  _39 = succeeded:body _19
  br _39, ^41, ^1

41:
  %% beam_jump_SUITE.erl:377
  _20 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _20
  _46 = succeeded:body _20
  br ^1

47:
  %% beam_jump_SUITE.erl:384
  _60 = call (`string`:`split`/2), `"foo"`, `"o"`

  %% Aliased:
  %%    _60
  _61 = succeeded:body _60
  br _61, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _62 = bif:'=:=' _60, `[]`
  br _62, ^58, ^49

49:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  _63 = bif:is_binary _0
  br _63, ^50, ^51

50:
  br ^53

51:
  %% beam_jump_SUITE.erl:401
  %% Aliased:
  %%    _0
  _64 = call (`string`:`split`/2), _0, `","`

  %% Aliased:
  %%    _64
  _65 = succeeded:body _64
  br _65, ^52, ^1

52:
  br ^53

53:
  _66 = phi { _0, ^50 }, { _64, ^52 }

  %% beam_jump_SUITE.erl:398
  %% Aliased:
  %%    _66
  _67 = call (`lists`:`flatten`/1), _66

  %% Aliased:
  %%    _67
  _68 = succeeded:body _67
  br _68, ^58, ^1

58:
  %% beam_jump_SUITE.erl:377
  _73 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _73
  _74 = succeeded:body _73
  br ^1

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% beam_jump_SUITE.erl:410
%% Counter = 92
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
%%     accepts_match_context
%%    _1 =>
%%     'gurka'
function `beam_jump_SUITE`:`undecided_allocation_3`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _21 = bs_start_match `new`, _0

  %% Aliased:
  %%    _21
  _33 = succeeded:guard _21
  br _33, ^33, ^49

33:
  %% beam_jump_SUITE.erl:410
  %% Aliased:
  %%    _21
  _22 = bs_test_tail _21, `8`
  br _22, ^32, ^30

32:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% beam_jump_SUITE.erl:413
  _2 = call (`erlang`:`get_keys`/0)

  %% Aliased:
  %%    _2
  _34 = succeeded:body _2
  br _34, ^34, ^1

34:
  %% beam_jump_SUITE.erl:413
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _18 = bif:'+' _2, `0`

  %% Unique:
  %%    _18
  _35 = succeeded:body _18
  br _35, ^37, ^1

37:
  %% beam_jump_SUITE.erl:417
  %% Argument types:
  %%    
  _19 = bif:node
  %% Argument types:
  %%    
  switch _19, ^40, [
    { `false`, ^43 },
    { `true`, ^85 }
  ]

43:
  %% beam_jump_SUITE.erl:417
  _24 = call (`erlang`:`garbage_collect`/0)

  %% Aliased:
  %%    _24
  _41 = succeeded:body _24
  br _41, ^85, ^1

85:
  %% beam_jump_SUITE.erl:418
  _3 = bs_init_writable `256`

  %% beam_jump_SUITE.erl:418
  %% Unique:
  %%    _3
  _26 = match_fail `case_clause`, _3

  %% Unique:
  %%    _26
  _48 = succeeded:body _26
  br ^1

40:
  %% Argument types:
  %%    _19 => atom()
  %% Unique:
  %%    _19
  _20 = put_tuple `badarg`, _19

  %% beam_jump_SUITE.erl:417
  %% Unique:
  %%    _20
  _25 = call (`erlang`:`error`/1), _20

  %% Aliased:
  %%    _25
  _44 = succeeded:body _25
  br ^1

49:
  %% beam_jump_SUITE.erl:413
  _64 = call (`erlang`:`get_keys`/0)

  %% Aliased:
  %%    _64
  _65 = succeeded:body _64
  br _65, ^50, ^1

50:
  %% beam_jump_SUITE.erl:413
  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _66 = bif:'+' _64, `0`

  %% Unique:
  %%    _66
  _67 = succeeded:body _66
  br _67, ^51, ^1

51:
  %% Argument types:
  %%    _66 => number()
  %%    _0 => atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _66
  _68 = bif:'=:=' _66, _0
  br _68, ^52, ^53

52:
  %% Result type:
  %%    'ok'
  ret `ok`

53:
  %% beam_jump_SUITE.erl:417
  %% Argument types:
  %%    
  _69 = bif:node
  %% Argument types:
  %%    
  switch _69, ^57, [
    { `false`, ^55 },
    { `true`, ^87 }
  ]

55:
  %% beam_jump_SUITE.erl:417
  _70 = call (`erlang`:`garbage_collect`/0)

  %% Aliased:
  %%    _70
  _71 = succeeded:body _70
  br _71, ^87, ^1

87:
  %% beam_jump_SUITE.erl:418
  _76 = bs_init_writable `256`

  %% beam_jump_SUITE.erl:418
  %% Unique:
  %%    _76
  _78 = match_fail `case_clause`, _76

  %% Unique:
  %%    _78
  _79 = succeeded:body _78
  br ^1

57:
  %% Argument types:
  %%    _69 => atom()
  %% Unique:
  %%    _69
  _72 = put_tuple `badarg`, _69

  %% beam_jump_SUITE.erl:417
  %% Unique:
  %%    _72
  _73 = call (`erlang`:`error`/1), _72

  %% Aliased:
  %%    _73
  _74 = succeeded:body _73
  br ^1

1:
  _82 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _82
}

%% beam_jump_SUITE.erl:424
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
function `beam_jump_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    atom() | nonempty_list(44..114) | 1..42 | {atom(), 'badarg' | 'right' | 1, ...} | other()
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_jump_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_jump_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_jump_SUITE.erl:371
%% Counter = 61
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     8 | bitstring(1)
%%    _4 =>
%%     bitstring(8,appendable)
%%    _5 =>
%%     bs_matchable(1)
%%     accepts_match_context
function `beam_jump_SUITE`:`'-undecided_allocation_1/1-lbc$^0/2-0-'`(_5, _4, _0) {
0:
  %% Argument types:
  %%    _5 => bs_matchable(1)
  %% Aliased:
  %%    _5
  %% Anno: #{accepts_match_contexts => true}
  _20 = bs_start_match `new`, _5

  %% beam_jump_SUITE.erl:371
  %% Argument types:
  %%    _20 => bs_context(1)
  %%    _0 => 8 | bitstring(1)
  %% Aliased:
  %%    _0, 
  %%    _20
  _21 = bs_match `integer`, _20, `[unsigned,big]`, _0, `1`

  %% Aliased:
  %%    _21
  _39 = succeeded:guard _21
  br _39, ^39, ^48

39:
  %% Aliased:
  %%    _21
  _22 = bs_extract _21

  %% Argument types:
  %%    _22 => 0..255
  %% Unique:
  %%    _22
  _45 = bif:'=:=' _22, `0`
  br _45, ^41, ^58

41:
  %% beam_jump_SUITE.erl:372
  %% Result type:
  %%    bitstring(8,appendable)
  %% Argument types:
  %%    _4 => bitstring(8,appendable)
  %% Unique:
  %%    _4
  %% Anno: #{unit => 8}
  _14 = bs_create_bin `private_append`, `[1,{segment,1}]`, _4, `all`, `binary`, `[1]`, `<<0>>`, `all`

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br _42, ^42, ^1

42:
  %% beam_jump_SUITE.erl:372
  %% Result type:
  %%    bitstring(8,appendable)
  %% Aliased:
  %%    _0, 
  %%    _21
  %% Unique:
  %%    _14
  %% Anno: #{bsm_info => context_reused}
  _32 = call (`'-undecided_allocation_1/1-lbc$^0/2-0-'`/3), _21, _14, _0

  %% Unique:
  %%    _32
  _43 = succeeded:body _32
  br _43, ^43, ^1

43:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _32
  ret _32

58:
  %% beam_jump_SUITE.erl:372
  %% Result type:
  %%    bitstring(8,appendable)
  %% Aliased:
  %%    _0, 
  %%    _21
  %% Unique:
  %%    _4
  %% Anno: #{bsm_info => context_reused}
  _33 = call (`'-undecided_allocation_1/1-lbc$^0/2-0-'`/3), _21, _4, _0

  %% Unique:
  %%    _33
  _47 = succeeded:body _33
  br _47, ^47, ^1

47:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _33
  ret _33

1:
  _56 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _56

48:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _4
  ret _4
}

%% beam_jump_SUITE.erl:101
%% Counter = 37
%% bs_ensure_opt: true
function `beam_jump_SUITE`:`'-unsafe_move_elimination/1-lc$^0/1-0-'`(_7) {
0:
  %% Aliased:
  %%    _7
  _32 = is_nonempty_list _7
  br _32, ^32, ^24

32:
  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _16 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _15 = get_tl _7

  %% beam_jump_SUITE.erl:101
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _16
  _17 = call (`unsafe_move_elimination_2`/1), _16

  %% Unique:
  %%    _17
  _25 = succeeded:body _17
  br _25, ^29, ^1

29:
  %% beam_jump_SUITE.erl:101
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _15
  _18 = call (`'-unsafe_move_elimination/1-lc$^0/1-0-'`/1), _15

  %% Unique:
  %%    _18
  _28 = succeeded:body _18
  br _28, ^28, ^1

28:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _18
  ret _18

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _33 = bif:'=:=' _7, `[]`
  br _33, ^33, ^23

33:
  %% Result type:
  %%    nil()
  ret `[]`

23:
  %% Argument types:
  %%    _7 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _7
  _14 = put_tuple `bad_generator`, _7

  %% beam_jump_SUITE.erl:101
  %% Unique:
  %%    _14
  _20 = call (`erlang`:`error`/1), _14

  %% Aliased:
  %%    _20
  _34 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}
