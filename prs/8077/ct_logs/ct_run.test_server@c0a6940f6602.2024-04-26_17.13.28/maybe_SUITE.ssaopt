module maybe_SUITE.
exports [{all,0},
         {basic,1},
         {end_per_suite,1},
         {groups,0},
         {init_per_suite,1},
         {module_info,0},
         {module_info,1},
         {nested,1}].
attributes [].

%% maybe_SUITE.erl:25
%% Counter = 4
%% bs_ensure_opt: true
function `maybe_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% maybe_SUITE.erl:28
%% Counter = 4
%% bs_ensure_opt: true
function `maybe_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list('basic' | 'nested')})
  ret `[{p,[parallel],[basic,nested]}]`
}

%% maybe_SUITE.erl:32
%% Counter = 6
%% bs_ensure_opt: true
function `maybe_SUITE`:`init_per_suite`(_0) {
0:
  %% maybe_SUITE.erl:33
  _2 = call (`test_lib`:`recompile`/1), `maybe_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% maybe_SUITE.erl:36
%% Counter = 4
%% bs_ensure_opt: true
function `maybe_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% maybe_SUITE.erl:41
%% Counter = 500
%% bs_ensure_opt: true
function `maybe_SUITE`:`basic`(_0) {
0:
  %% maybe_SUITE.erl:42
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _86 = call (`basic_1`/2), `0`, `#{0 => {ok,42},42 => {ok,fish}}`

  %% Aliased:
  %%    _86
  _185 = succeeded:body _86
  br _185, ^185, ^1

185:
  %% Argument types:
  %%    _86 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _86
  _428 = bif:'=:=' _86, `{ok,42,fish}`
  br _428, ^428, ^187

428:
  %% maybe_SUITE.erl:43
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _87 = call (`basic_1`/2), `0`, `#{0 => {ok,42},42 => {error,whatever}}`

  %% Aliased:
  %%    _87
  _188 = succeeded:body _87
  br _188, ^188, ^1

188:
  %% Argument types:
  %%    _87 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _87
  _426 = bif:'=:=' _87, `error`
  br _426, ^425, ^190

425:
  %% maybe_SUITE.erl:44
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _88 = call (`basic_1`/2), `0`, `#{0 => {ok,42},42 => error}`

  %% Aliased:
  %%    _88
  _191 = succeeded:body _88
  br _191, ^191, ^1

191:
  %% Argument types:
  %%    _88 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _88
  _423 = bif:'=:=' _88, `error`
  br _423, ^422, ^193

422:
  %% maybe_SUITE.erl:45
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _89 = call (`basic_1`/2), `0`, `#{0 => error}`

  %% Aliased:
  %%    _89
  _194 = succeeded:body _89
  br _194, ^194, ^1

194:
  %% Argument types:
  %%    _89 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _89
  _420 = bif:'=:=' _89, `error`
  br _420, ^419, ^196

419:
  %% maybe_SUITE.erl:46
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _90 = call (`basic_1`/2), `0`, `#{0 => {error,whatever}}`

  %% Aliased:
  %%    _90
  _197 = succeeded:body _90
  br _197, ^197, ^1

197:
  %% Argument types:
  %%    _90 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _90
  _417 = bif:'=:=' _90, `error`
  br _417, ^416, ^199

416:
  %% maybe_SUITE.erl:47
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _91 = call (`basic_1`/2), `0`, `#{0 => {value,some_value}}`

  %% Aliased:
  %%    _91
  _200 = succeeded:body _91
  br _200, ^200, ^1

200:
  %% Argument types:
  %%    _91 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _91
  _414 = bif:'=:=' _91, `some_value`
  br _414, ^492, ^202

492:
  br ^496

496:
  _206 = new_try_tag `'catch'`
  br _206, ^204, ^205

204:
  %% maybe_SUITE.erl:48
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _145 = call (`basic_1`/2), `0`, `#{0 => something_wrong}`

  %% Aliased:
  %%    _145
  _208 = succeeded:body _145
  br _208, ^208, ^205

208:
  br ^203

205:
  %% Unique:
  %%    _206
  _211 = landingpad `'catch'`, _206

  %% Aliased:
  %%    _211
  _209 = extract _211, `0`
  br ^203

203:
  _212 = phi { _209, ^205 }, { _145, ^208 }

  %% Aliased:
  %%    _212
  %% Unique:
  %%    _206
  _7 = catch_end _206, _212

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _409 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _409, ^406, ^214

406:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _92 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _403 = bif:is_tuple _92
  br _403, ^403, ^214

403:
  %% Argument types:
  %%    _92 => {...}
  %% Aliased:
  %%    _92
  _404 = bif:tuple_size _92

  %% Argument types:
  %%    _404 => 0..16777215
  %% Unique:
  %%    _404
  _405 = bif:'=:=' _404, `2`
  br _405, ^402, ^214

402:
  %% Argument types:
  %%    _92 => {any(), any()}
  %% Aliased:
  %%    _92
  _95 = get_tuple_element _92, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _401 = bif:'=:=' _95, `{else_clause,something_wrong}`
  br _401, ^401, ^214

401:
  %% Argument types:
  %%    _92 => {{'else_clause', 'something_wrong'}, any()}
  %% Aliased:
  %%    _92
  _94 = get_tuple_element _92, `1`

  %% Aliased:
  %%    _94
  _400 = is_nonempty_list _94
  br _400, ^430, ^214

430:
  %% maybe_SUITE.erl:50
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _98 = call (`basic_2`/2), `0`, `#{0 => {ok,life},life => "universe","universe" => {ok,everything}}`

  %% Aliased:
  %%    _98
  _215 = succeeded:body _98
  br _215, ^215, ^1

215:
  %% Argument types:
  %%    _98 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _98
  _398 = bif:'=:=' _98, `{ok,life,"universe",everything}`
  br _398, ^398, ^217

398:
  %% maybe_SUITE.erl:53
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _99 = call (`basic_2`/2), `0`, `#{0 => {ok,life},life => "universe","universe" => error}`

  %% Aliased:
  %%    _99
  _218 = succeeded:body _99
  br _218, ^218, ^1

218:
  %% Argument types:
  %%    _99 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _99
  _396 = bif:'=:=' _99, `error`
  br _396, ^493, ^220

493:
  br ^497

497:
  _224 = new_try_tag `'catch'`
  br _224, ^222, ^223

222:
  %% maybe_SUITE.erl:56
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _147 = call (`basic_2`/2), `0`, `#{0 => {ok,life},life => not_a_list}`

  %% Aliased:
  %%    _147
  _226 = succeeded:body _147
  br _226, ^226, ^223

226:
  br ^221

223:
  %% Unique:
  %%    _224
  _229 = landingpad `'catch'`, _224

  %% Aliased:
  %%    _229
  _227 = extract _229, `0`
  br ^221

221:
  _230 = phi { _227, ^223 }, { _147, ^226 }

  %% Aliased:
  %%    _230
  %% Unique:
  %%    _224
  _11 = catch_end _224, _230

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _391 = is_tagged_tuple _11, `2`, `'EXIT'`
  br _391, ^388, ^232

388:
  %% Argument types:
  %%    _11 => {''EXIT'', any()}
  %% Aliased:
  %%    _11
  _100 = get_tuple_element _11, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _100
  _385 = bif:is_tuple _100
  br _385, ^385, ^232

385:
  %% Argument types:
  %%    _100 => {...}
  %% Aliased:
  %%    _100
  _386 = bif:tuple_size _100

  %% Argument types:
  %%    _386 => 0..16777215
  %% Unique:
  %%    _386
  _387 = bif:'=:=' _386, `2`
  br _387, ^384, ^232

384:
  %% Argument types:
  %%    _100 => {any(), any()}
  %% Aliased:
  %%    _100
  _103 = get_tuple_element _100, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _383 = bif:'=:=' _103, `{badmatch,not_a_list}`
  br _383, ^383, ^232

383:
  %% Argument types:
  %%    _100 => {{'badmatch', 'not_a_list'}, any()}
  %% Aliased:
  %%    _100
  _102 = get_tuple_element _100, `1`

  %% Aliased:
  %%    _102
  _382 = is_nonempty_list _102
  br _382, ^494, ^232

494:
  br ^498

498:
  _236 = new_try_tag `'catch'`
  br _236, ^234, ^235

234:
  %% maybe_SUITE.erl:58
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _149 = call (`basic_2`/2), `0`, `#{0 => {ok,life},life => "universe","universe" => not_ok}`

  %% Aliased:
  %%    _149
  _238 = succeeded:body _149
  br _238, ^238, ^235

238:
  br ^233

235:
  %% Unique:
  %%    _236
  _241 = landingpad `'catch'`, _236

  %% Aliased:
  %%    _241
  _239 = extract _241, `0`
  br ^233

233:
  _242 = phi { _239, ^235 }, { _149, ^238 }

  %% Aliased:
  %%    _242
  %% Unique:
  %%    _236
  _13 = catch_end _236, _242

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _378 = is_tagged_tuple _13, `2`, `'EXIT'`
  br _378, ^375, ^244

375:
  %% Argument types:
  %%    _13 => {''EXIT'', any()}
  %% Aliased:
  %%    _13
  _106 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _372 = bif:is_tuple _106
  br _372, ^372, ^244

372:
  %% Argument types:
  %%    _106 => {...}
  %% Aliased:
  %%    _106
  _373 = bif:tuple_size _106

  %% Argument types:
  %%    _373 => 0..16777215
  %% Unique:
  %%    _373
  _374 = bif:'=:=' _373, `2`
  br _374, ^371, ^244

371:
  %% Argument types:
  %%    _106 => {any(), any()}
  %% Aliased:
  %%    _106
  _109 = get_tuple_element _106, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _109
  _370 = bif:'=:=' _109, `{else_clause,not_ok}`
  br _370, ^370, ^244

370:
  %% Argument types:
  %%    _106 => {{'else_clause', 'not_ok'}, any()}
  %% Aliased:
  %%    _106
  _108 = get_tuple_element _106, `1`

  %% Aliased:
  %%    _108
  _369 = is_nonempty_list _108
  br _369, ^495, ^244

495:
  br ^499

499:
  _248 = new_try_tag `'catch'`
  br _248, ^246, ^247

246:
  %% maybe_SUITE.erl:61
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  _151 = call (`basic_2`/2), `0`, `#{0 => not_ok}`

  %% Aliased:
  %%    _151
  _250 = succeeded:body _151
  br _250, ^250, ^247

250:
  br ^245

247:
  %% Unique:
  %%    _248
  _253 = landingpad `'catch'`, _248

  %% Aliased:
  %%    _253
  _251 = extract _253, `0`
  br ^245

245:
  _254 = phi { _251, ^247 }, { _151, ^250 }

  %% Aliased:
  %%    _254
  %% Unique:
  %%    _248
  _15 = catch_end _248, _254

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _365 = is_tagged_tuple _15, `2`, `'EXIT'`
  br _365, ^362, ^256

362:
  %% Argument types:
  %%    _15 => {''EXIT'', any()}
  %% Aliased:
  %%    _15
  _112 = get_tuple_element _15, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _359 = bif:is_tuple _112
  br _359, ^359, ^256

359:
  %% Argument types:
  %%    _112 => {...}
  %% Aliased:
  %%    _112
  _360 = bif:tuple_size _112

  %% Argument types:
  %%    _360 => 0..16777215
  %% Unique:
  %%    _360
  _361 = bif:'=:=' _360, `2`
  br _361, ^358, ^256

358:
  %% Argument types:
  %%    _112 => {any(), any()}
  %% Aliased:
  %%    _112
  _115 = get_tuple_element _112, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _357 = bif:'=:=' _115, `{else_clause,not_ok}`
  br _357, ^357, ^256

357:
  %% Argument types:
  %%    _112 => {{'else_clause', 'not_ok'}, any()}
  %% Aliased:
  %%    _112
  _114 = get_tuple_element _112, `1`

  %% Aliased:
  %%    _114
  _356 = is_nonempty_list _114
  br _356, ^431, ^256

431:
  %% maybe_SUITE.erl:63
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  _118 = call (`basic_3`/2), `0`, `#{0 => {ok,42},42 => {ok,fish},fish => {ok,{value,dolphins}}}`

  %% Aliased:
  %%    _118
  _257 = succeeded:body _118
  br _257, ^257, ^1

257:
  %% Argument types:
  %%    _118 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _118
  _354 = bif:'=:=' _118, `{ok,42,fish,dolphins}`
  br _354, ^354, ^259

354:
  %% maybe_SUITE.erl:65
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  _119 = call (`basic_3`/2), `0`, `#{0 => {ok,42},42 => {error,whatever}}`

  %% Aliased:
  %%    _119
  _260 = succeeded:body _119
  br _260, ^260, ^1

260:
  %% Argument types:
  %%    _119 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _119
  _352 = bif:'=:=' _119, `{error,whatever}`
  br _352, ^352, ^262

352:
  %% maybe_SUITE.erl:66
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  _120 = call (`basic_3`/2), `0`, `#{0 => {ok,42},42 => failed}`

  %% Aliased:
  %%    _120
  _263 = succeeded:body _120
  br _263, ^263, ^1

263:
  %% Argument types:
  %%    _120 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _120
  _350 = bif:'=:=' _120, `failed`
  br _350, ^349, ^265

349:
  %% maybe_SUITE.erl:67
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  _121 = call (`basic_3`/2), `0`, `#{0 => failed_early}`

  %% Aliased:
  %%    _121
  _266 = succeeded:body _121
  br _266, ^266, ^1

266:
  %% Argument types:
  %%    _121 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _121
  _347 = bif:'=:=' _121, `failed_early`
  br _347, ^346, ^268

346:
  %% maybe_SUITE.erl:69
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _124 = call (`id`/1), `x`

  %% Aliased:
  %%    _124
  _269 = succeeded:body _124
  br _269, ^269, ^1

269:
  %% Argument types:
  %%    _124 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _124
  _274 = bif:'=:=' _124, `nomatch`
  br _274, ^276, ^343

276:
  %% maybe_SUITE.erl:69
  _166 = match_fail `badmatch`, `nomatch`

  %% Unique:
  %%    _166
  _345 = succeeded:body _166
  br ^1

343:
  %% maybe_SUITE.erl:70
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _127 = call (`id`/1), `x`

  %% Aliased:
  %%    _127
  _277 = succeeded:body _127
  br _277, ^277, ^1

277:
  %% Argument types:
  %%    _127 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _127
  _282 = bif:'=:=' _127, `nomatch`
  br _282, ^284, ^340

284:
  %% maybe_SUITE.erl:70
  _165 = match_fail `badmatch`, `nomatch`

  %% Unique:
  %%    _165
  _342 = succeeded:body _165
  br ^1

340:
  %% maybe_SUITE.erl:72
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _130 = call (`id`/1), `x`

  %% Aliased:
  %%    _130
  _285 = succeeded:body _130
  br _285, ^286, ^1

286:
  %% Argument types:
  %%    _130 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _130
  _338 = bif:'=:=' _130, `x`
  br _338, ^327, ^292

327:
  %% maybe_SUITE.erl:80
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _157 = call (`id`/1), `whatever`

  %% Aliased:
  %%    _157
  _315 = succeeded:body _157
  br _315, ^315, ^1

315:
  %% Argument types:
  %%    _157 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _157
  _325 = bif:'=:=' _157, `whatever`
  br _325, ^324, ^317

324:
  %% maybe_SUITE.erl:86
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _75 = call (`id`/1), `{<<0>>}`

  %% Aliased:
  %%    _75
  _318 = succeeded:body _75
  br _318, ^318, ^1

318:
  %% maybe_SUITE.erl:86
  %% Result type:
  %%    'error' | 'ok' | 'value' | bitstring(8)
  %% Aliased:
  %%    _75
  _143 = call (`basic_4`/1), _75

  %% Aliased:
  %%    _143
  _319 = succeeded:body _143
  br _319, ^319, ^1

319:
  %% Argument types:
  %%    _143 => 'error' | 'ok' | 'value' | bitstring(8)
  %% Aliased:
  %%    _143
  _322 = bif:'=:=' _143, `<<0>>`
  br _322, ^322, ^321

322:
  %% Result type:
  %%    'ok'
  ret `ok`

321:
  %% maybe_SUITE.erl:86
  %% Aliased:
  %%    _143
  _158 = match_fail `badmatch`, _143

  %% Unique:
  %%    _158
  _323 = succeeded:body _158
  br ^1

317:
  %% maybe_SUITE.erl:79
  %% Aliased:
  %%    _157
  _159 = match_fail `badmatch`, _157

  %% Unique:
  %%    _159
  _326 = succeeded:body _159
  br ^1

292:
  %% maybe_SUITE.erl:72
  %% Aliased:
  %%    _130
  _164 = match_fail `badmatch`, _130

  %% Unique:
  %%    _164
  _339 = succeeded:body _164
  br ^1

268:
  %% maybe_SUITE.erl:67
  %% Aliased:
  %%    _121
  _167 = match_fail `badmatch`, _121

  %% Unique:
  %%    _167
  _348 = succeeded:body _167
  br ^1

265:
  %% maybe_SUITE.erl:66
  %% Aliased:
  %%    _120
  _168 = match_fail `badmatch`, _120

  %% Unique:
  %%    _168
  _351 = succeeded:body _168
  br ^1

262:
  %% maybe_SUITE.erl:65
  %% Aliased:
  %%    _119
  _169 = match_fail `badmatch`, _119

  %% Unique:
  %%    _169
  _353 = succeeded:body _169
  br ^1

259:
  %% maybe_SUITE.erl:63
  %% Aliased:
  %%    _118
  _170 = match_fail `badmatch`, _118

  %% Unique:
  %%    _170
  _355 = succeeded:body _170
  br ^1

256:
  %% maybe_SUITE.erl:61
  %% Aliased:
  %%    _15
  _171 = match_fail `badmatch`, _15

  %% Unique:
  %%    _171
  _368 = succeeded:body _171
  br ^1

244:
  %% maybe_SUITE.erl:58
  %% Aliased:
  %%    _13
  _172 = match_fail `badmatch`, _13

  %% Unique:
  %%    _172
  _381 = succeeded:body _172
  br ^1

232:
  %% maybe_SUITE.erl:56
  %% Aliased:
  %%    _11
  _173 = match_fail `badmatch`, _11

  %% Unique:
  %%    _173
  _394 = succeeded:body _173
  br ^1

220:
  %% maybe_SUITE.erl:53
  %% Aliased:
  %%    _99
  _174 = match_fail `badmatch`, _99

  %% Unique:
  %%    _174
  _397 = succeeded:body _174
  br ^1

217:
  %% maybe_SUITE.erl:50
  %% Aliased:
  %%    _98
  _175 = match_fail `badmatch`, _98

  %% Unique:
  %%    _175
  _399 = succeeded:body _175
  br ^1

214:
  %% maybe_SUITE.erl:48
  %% Aliased:
  %%    _7
  _176 = match_fail `badmatch`, _7

  %% Unique:
  %%    _176
  _412 = succeeded:body _176
  br ^1

202:
  %% maybe_SUITE.erl:47
  %% Aliased:
  %%    _91
  _177 = match_fail `badmatch`, _91

  %% Unique:
  %%    _177
  _415 = succeeded:body _177
  br ^1

199:
  %% maybe_SUITE.erl:46
  %% Aliased:
  %%    _90
  _178 = match_fail `badmatch`, _90

  %% Unique:
  %%    _178
  _418 = succeeded:body _178
  br ^1

196:
  %% maybe_SUITE.erl:45
  %% Aliased:
  %%    _89
  _179 = match_fail `badmatch`, _89

  %% Unique:
  %%    _179
  _421 = succeeded:body _179
  br ^1

193:
  %% maybe_SUITE.erl:44
  %% Aliased:
  %%    _88
  _180 = match_fail `badmatch`, _88

  %% Unique:
  %%    _180
  _424 = succeeded:body _180
  br ^1

190:
  %% maybe_SUITE.erl:43
  %% Aliased:
  %%    _87
  _181 = match_fail `badmatch`, _87

  %% Unique:
  %%    _181
  _427 = succeeded:body _181
  br ^1

187:
  %% maybe_SUITE.erl:42
  %% Aliased:
  %%    _86
  _182 = match_fail `badmatch`, _86

  %% Unique:
  %%    _182
  _429 = succeeded:body _182
  br ^1

1:
  _183 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _183
}

%% maybe_SUITE.erl:90
%% Counter = 42
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{0..42=>'error' | 'something_wrong' | {'error', 'whatever'} | {'ok', 'fish' | 42} | {'value', 'some_value'}}
function `maybe_SUITE`:`basic_1`(_0, _1) {
0:
  %% maybe_SUITE.erl:91
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _1
  Res = call (`basic_1a`/2), _0, _1

  %% Aliased:
  %%    Res
  _19 = succeeded:body Res
  br _19, ^19, ^1

19:
  %% maybe_SUITE.erl:92
  %% Result type:
  %%    {'wrapped', 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Aliased:
  %%    _1
  _9 = call (`basic_1b`/2), `0`, _1

  %% Aliased:
  %%    _9
  _20 = succeeded:body _9
  br _20, ^35, ^1

35:
  %% Argument types:
  %%    _9 => {'wrapped', 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Aliased:
  %%    _9
  _10 = get_tuple_element _9, `1`

  %% Argument types:
  %%    _10 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %%    Res => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _10, 
  %%    Res
  _23 = bif:'=:=' _10, Res
  br _23, ^23, ^22

23:
  %% maybe_SUITE.erl:93
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error' | 'ok' | 'value', atom() | 42 | {'value', 'dolphins'}, ...}}
  %% Aliased:
  %%    _1
  _12 = call (`basic_1c`/2), `0`, _1

  %% Aliased:
  %%    _12
  _24 = succeeded:body _12
  br _24, ^28, ^1

28:
  %% Argument types:
  %%    _12 => {'wrapped', atom() | nonempty_list(101..118) | {'error' | 'ok' | 'value', atom() | 42 | {'value', 'dolphins'}, ...}}
  %% Aliased:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% Argument types:
  %%    _13 => atom() | nonempty_list(101..118) | {'error' | 'ok' | 'value', atom() | 42 | {'value', 'dolphins'}, ...}
  %%    Res => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _13, 
  %%    Res
  _27 = bif:'=:=' _13, Res
  br _27, ^27, ^26

27:
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    Res
  ret Res

26:
  %% maybe_SUITE.erl:93
  %% Aliased:
  %%    _12
  _15 = match_fail `badmatch`, _12

  %% Unique:
  %%    _15
  _34 = succeeded:body _15
  br ^1

22:
  %% maybe_SUITE.erl:92
  %% Aliased:
  %%    _9
  _16 = match_fail `badmatch`, _9

  %% Unique:
  %%    _16
  _41 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% maybe_SUITE.erl:96
%% Counter = 56
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{0..42=>'error' | 'something_wrong' | {'error', 'whatever'} | {'ok', 'fish' | 42} | {'value', 'some_value'}}
function `maybe_SUITE`:`basic_1a`(_0, _1) {
0:
  %% maybe_SUITE.erl:98
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _12 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _12
  _24 = succeeded:body _12
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _12 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _12
  _40 = is_tagged_tuple _12, `2`, `ok`
  br _40, ^37, ^27

37:
  %% Argument types:
  %%    _12 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% maybe_SUITE.erl:99
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _13
  _15 = call (`do_something`/2), _13, _1

  %% Aliased:
  %%    _15
  _28 = succeeded:body _15
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _15 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _15
  _34 = is_tagged_tuple _15, `2`, `ok`
  br _34, ^31, ^30

31:
  %% Argument types:
  %%    _15 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _15
  _16 = get_tuple_element _15, `1`

  %% Argument types:
  %%    _13 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _16 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _13, 
  %%    _16
  _20 = put_tuple `ok`, _13, _16
  %% Result type:
  %%    {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Unique:
  %%    _20
  ret _20

30:
  br ^10

27:
  br ^10

10:
  _11 = phi { _12, ^27 }, { _15, ^30 }

  %% Argument types:
  %%    _11 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _11
  _49 = bif:is_tuple _11
  br _49, ^48, ^45

48:
  %% Argument types:
  %%    _11 => {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _11
  _19 = get_tuple_element _11, `0`

  %% Aliased:
  %%    _19
  _55 = bif:'=:=' _19, `value`
  br _55, ^47, ^46

47:
  %% Result type:
  %%    'some_value'
  ret `some_value`

46:
  %% Result type:
  %%    'error'
  ret `error`

45:
  %% Argument types:
  %%    _11 => atom() | nonempty_list(101..118)
  %% Aliased:
  %%    _11
  _53 = bif:'=:=' _11, `error`
  br _53, ^52, ^44

52:
  %% Result type:
  %%    'error'
  ret `error`

44:
  %% maybe_SUITE.erl:97
  %% Aliased:
  %%    _11
  _21 = match_fail `else_clause`, _11

  %% Unique:
  %%    _21
  _54 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% maybe_SUITE.erl:110
%% Counter = 67
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{0..42=>'error' | 'something_wrong' | {'error', 'whatever'} | {'ok', 'fish' | 42} | {'value', 'some_value'}}
function `maybe_SUITE`:`basic_1b`(_0, _1) {
0:
  %% maybe_SUITE.erl:113
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _14 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _14
  _30 = succeeded:body _14
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _14 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _14
  _46 = is_tagged_tuple _14, `2`, `ok`
  br _46, ^43, ^33

43:
  %% Argument types:
  %%    _14 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% maybe_SUITE.erl:114
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _15
  _17 = call (`do_something`/2), _15, _1

  %% Aliased:
  %%    _17
  _34 = succeeded:body _17
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _17 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _17
  _40 = is_tagged_tuple _17, `2`, `ok`
  br _40, ^37, ^36

37:
  %% Argument types:
  %%    _17 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _17
  _18 = get_tuple_element _17, `1`

  %% Argument types:
  %%    _15 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _18 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _15, 
  %%    _18
  _24 = put_tuple `ok`, _15, _18

  %% Argument types:
  %%    _24 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Unique:
  %%    _24
  _61 = put_tuple `wrapped`, _24
  %% Result type:
  %%    {'wrapped', {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Unique:
  %%    _61
  ret _61

36:
  br ^12

33:
  br ^12

12:
  _13 = phi { _14, ^33 }, { _17, ^36 }

  %% Argument types:
  %%    _13 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _13
  _55 = bif:is_tuple _13
  br _55, ^54, ^51

54:
  %% Argument types:
  %%    _13 => {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _13
  _21 = get_tuple_element _13, `0`

  %% Aliased:
  %%    _21
  _66 = bif:'=:=' _21, `value`
  br _66, ^53, ^52

53:
  %% Result type:
  %%    {'wrapped', 'some_value'}
  ret `{wrapped,some_value}`

52:
  %% Result type:
  %%    {'wrapped', 'error'}
  ret `{wrapped,error}`

51:
  %% Argument types:
  %%    _13 => atom() | nonempty_list(101..118)
  %% Aliased:
  %%    _13
  _59 = bif:'=:=' _13, `error`
  br _59, ^58, ^50

58:
  %% Result type:
  %%    {'wrapped', 'error'}
  ret `{wrapped,error}`

50:
  %% maybe_SUITE.erl:112
  %% Aliased:
  %%    _13
  _26 = match_fail `else_clause`, _13

  %% Unique:
  %%    _26
  _60 = succeeded:body _26
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% maybe_SUITE.erl:126
%% Counter = 79
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{0..42=>'error' | 'something_wrong' | {'error', 'whatever'} | {'ok', 'fish' | 42} | {'value', 'some_value'}}
function `maybe_SUITE`:`basic_1c`(_0, _1) {
0:
  %% maybe_SUITE.erl:127
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  OK = call (`id`/1), `ok`

  %% Aliased:
  %%    OK
  _38 = succeeded:body OK
  br _38, ^38, ^1

38:
  %% maybe_SUITE.erl:128
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  Error = call (`id`/1), `error`

  %% Aliased:
  %%    Error
  _39 = succeeded:body Error
  br _39, ^39, ^1

39:
  %% maybe_SUITE.erl:131
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _20 = call (`do_something`/2), `0`, _1

  %% Aliased:
  %%    _20
  _40 = succeeded:body _20
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _20 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _54 = bif:is_tuple _20
  br _54, ^53, ^43

53:
  %% Argument types:
  %%    _20 => {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _22 = get_tuple_element _20, `0`

  %% Argument types:
  %%    _22 => 'error' | 'ok' | 'value'
  %%    OK => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _22
  _44 = bif:'=:=' _22, OK
  br _44, ^44, ^43

44:
  %% Argument types:
  %%    _20 => {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _21 = get_tuple_element _20, `1`

  %% maybe_SUITE.erl:132
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _21
  _23 = call (`do_something`/2), _21, _1

  %% Aliased:
  %%    _23
  _45 = succeeded:body _23
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _23 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _23
  _50 = bif:is_tuple _23
  br _50, ^49, ^47

49:
  %% Argument types:
  %%    _23 => {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _23
  _25 = get_tuple_element _23, `0`

  %% Argument types:
  %%    _25 => 'error' | 'ok' | 'value'
  %%    OK => 'error' | 'ok' | 'value'
  %% Unique:
  %%    _25, 
  %%    OK
  _48 = bif:'=:=' _25, OK
  br _48, ^48, ^47

48:
  %% Argument types:
  %%    _23 => {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _23
  _24 = get_tuple_element _23, `1`

  %% Argument types:
  %%    OK => 'error' | 'ok' | 'value'
  %%    _21 => atom() | 42 | {'value', 'dolphins'}
  %%    _24 => atom() | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _21, 
  %%    _24
  %% Unique:
  %%    OK
  _32 = put_tuple OK, _21, _24

  %% Argument types:
  %%    _32 => {'error' | 'ok' | 'value', atom() | 42 | {'value', 'dolphins'}, atom() | 42 | {'value', 'dolphins'}}
  %% Unique:
  %%    _32
  _74 = put_tuple `wrapped`, _32
  %% Result type:
  %%    {'wrapped', {'error' | 'ok' | 'value', atom() | 42 | {'value', 'dolphins'}, atom() | 42 | {'value', 'dolphins'}}}
  %% Unique:
  %%    _74
  ret _74

47:
  br ^18

43:
  br ^18

18:
  _19 = phi { _20, ^43 }, { _23, ^47 }

  %% Argument types:
  %%    _19 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _19
  _61 = bif:is_tuple _19
  br _61, ^60, ^58

60:
  %% Argument types:
  %%    _19 => {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _19
  _29 = get_tuple_element _19, `0`

  %% Argument types:
  %%    _29 => 'error' | 'ok' | 'value'
  %%    Error => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    Error
  %% Unique:
  %%    _29
  _59 = bif:'=:=' _29, Error
  br _59, ^59, ^58

59:
  %% Argument types:
  %%    Error => 'error' | 'ok' | 'value'
  %% Unique:
  %%    Error
  _75 = put_tuple `wrapped`, Error
  %% Result type:
  %%    {'wrapped', 'error' | 'ok' | 'value'}
  %% Unique:
  %%    _75
  ret _75

58:
  %% Argument types:
  %%    _19 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %%    Error => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _19, 
  %%    Error
  _65 = bif:'=:=' _19, Error
  br _65, ^65, ^64

65:
  %% Argument types:
  %%    Error => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    Error
  _76 = put_tuple `wrapped`, Error
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}}
  %% Unique:
  %%    _76
  ret _76

64:
  %% Argument types:
  %%    _19 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _19
  _70 = is_tagged_tuple _19, `2`, `value`
  br _70, ^67, ^66

67:
  %% Result type:
  %%    {'wrapped', 'some_value'}
  ret `{wrapped,some_value}`

66:
  %% maybe_SUITE.erl:130
  %% Aliased:
  %%    _19
  _34 = match_fail `else_clause`, _19

  %% Unique:
  %%    _34
  _73 = succeeded:body _34
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% maybe_SUITE.erl:144
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'life' | nonempty_list(101..118) | 0=>'error' | 'not_a_list' | 'not_ok' | nonempty_list(101..118) | {'ok', 'everything' | 'life'}}
function `maybe_SUITE`:`basic_2`(_0, _1) {
0:
  %% maybe_SUITE.erl:145
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _1
  Res = call (`basic_2a`/2), _0, _1

  %% Aliased:
  %%    Res
  _13 = succeeded:body Res
  br _13, ^13, ^1

13:
  %% maybe_SUITE.erl:146
  %% Result type:
  %%    {'wrapped', 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Aliased:
  %%    _1
  _7 = call (`basic_2b`/2), `0`, _1

  %% Unique:
  %%    _7
  _14 = succeeded:body _7
  br _14, ^18, ^1

18:
  %% Argument types:
  %%    _7 => {'wrapped', 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Unique:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    _8 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %%    Res => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    Res
  %% Unique:
  %%    _8
  _17 = bif:'=:=' _8, Res
  br _17, ^17, ^16

17:
  %% Result type:
  %%    'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    Res
  ret Res

16:
  %% maybe_SUITE.erl:146
  %% Unique:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _24 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% maybe_SUITE.erl:149
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'life' | nonempty_list(101..118) | 0=>'error' | 'not_a_list' | 'not_ok' | nonempty_list(101..118) | {'ok', 'everything' | 'life'}}
function `maybe_SUITE`:`basic_2a`(_0, _1) {
0:
  %% maybe_SUITE.erl:151
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _17 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _17 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _17
  _53 = is_tagged_tuple _17, `2`, `ok`
  br _53, ^50, ^35

50:
  %% Argument types:
  %%    _17 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _17
  _18 = get_tuple_element _17, `1`

  %% maybe_SUITE.erl:152
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _18
  _5 = call (`do_something`/2), _18, _1

  %% Aliased:
  %%    _5
  _36 = succeeded:body _5
  br _36, ^36, ^1

36:
  %% Aliased:
  %%    _5
  _48 = is_nonempty_list _5
  br _48, ^68, ^38

68:
  %% maybe_SUITE.erl:153
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _5
  _22 = call (`do_something`/2), _5, _1

  %% Aliased:
  %%    _22
  _39 = succeeded:body _22
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _22 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _22
  _45 = is_tagged_tuple _22, `2`, `ok`
  br _45, ^42, ^41

42:
  %% Argument types:
  %%    _22 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% Argument types:
  %%    _18 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _5 => nonempty_list(101..118)
  %%    _23 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _5, 
  %%    _18, 
  %%    _23
  _27 = put_tuple `ok`, _18, _5, _23
  %% Result type:
  %%    {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Unique:
  %%    _27
  ret _27

41:
  br ^15

38:
  %% maybe_SUITE.erl:152
  %% Aliased:
  %%    _5
  _28 = match_fail `badmatch`, _5

  %% Unique:
  %%    _28
  _49 = succeeded:body _28
  br ^1

35:
  br ^15

15:
  _16 = phi { _17, ^35 }, { _22, ^41 }

  %% Argument types:
  %%    _16 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _16
  _62 = bif:is_tuple _16
  br _62, ^61, ^58

61:
  %% Argument types:
  %%    _16 => {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _16
  _26 = get_tuple_element _16, `0`

  %% Aliased:
  %%    _26
  _69 = bif:'=:=' _26, `value`
  br _69, ^60, ^59

60:
  %% Result type:
  %%    'some_value'
  ret `some_value`

59:
  %% Result type:
  %%    'error'
  ret `error`

58:
  %% Argument types:
  %%    _16 => atom() | nonempty_list(101..118)
  %% Aliased:
  %%    _16
  _66 = bif:'=:=' _16, `error`
  br _66, ^65, ^57

65:
  %% Result type:
  %%    'error'
  ret `error`

57:
  %% maybe_SUITE.erl:150
  %% Aliased:
  %%    _16
  _29 = match_fail `else_clause`, _16

  %% Unique:
  %%    _29
  _67 = succeeded:body _29
  br ^1

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% maybe_SUITE.erl:164
%% Counter = 81
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'life' | nonempty_list(101..118) | 0=>'error' | 'not_a_list' | 'not_ok' | nonempty_list(101..118) | {'ok', 'everything' | 'life'}}
function `maybe_SUITE`:`basic_2b`(_0, _1) {
0:
  %% maybe_SUITE.erl:167
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _20 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _20
  _41 = succeeded:body _20
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    _20 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _62 = is_tagged_tuple _20, `2`, `ok`
  br _62, ^59, ^44

59:
  %% Argument types:
  %%    _20 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _20
  _21 = get_tuple_element _20, `1`

  %% maybe_SUITE.erl:168
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _21
  _5 = call (`do_something`/2), _21, _1

  %% Aliased:
  %%    _5
  _45 = succeeded:body _5
  br _45, ^45, ^1

45:
  %% Aliased:
  %%    _5
  _57 = is_nonempty_list _5
  br _57, ^78, ^47

78:
  %% maybe_SUITE.erl:169
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _5
  _25 = call (`do_something`/2), _5, _1

  %% Aliased:
  %%    _25
  _48 = succeeded:body _25
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _25 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _25
  _54 = is_tagged_tuple _25, `2`, `ok`
  br _54, ^51, ^50

51:
  %% Argument types:
  %%    _25 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _25
  _26 = get_tuple_element _25, `1`

  %% Argument types:
  %%    _21 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _5 => nonempty_list(101..118)
  %%    _26 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _5, 
  %%    _21, 
  %%    _26
  _33 = put_tuple `ok`, _21, _5, _26
  br ^42

50:
  br ^18

47:
  %% maybe_SUITE.erl:168
  %% Aliased:
  %%    _5
  _34 = match_fail `badmatch`, _5

  %% Unique:
  %%    _34
  _58 = succeeded:body _34
  br ^1

44:
  br ^18

18:
  _19 = phi { _20, ^44 }, { _25, ^50 }

  %% Argument types:
  %%    _19 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _19
  _71 = bif:is_tuple _19
  br _71, ^70, ^67

70:
  %% Argument types:
  %%    _19 => {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _19
  _29 = get_tuple_element _19, `0`

  %% Aliased:
  %%    _29
  _80 = bif:'=:=' _29, `value`
  br _80, ^69, ^68

69:
  br ^65

68:
  br ^65

67:
  %% Argument types:
  %%    _19 => atom() | nonempty_list(101..118)
  %% Aliased:
  %%    _19
  _75 = bif:'=:=' _19, `error`
  br _75, ^74, ^66

74:
  br ^65

65:
  _35 = phi { `error`, ^68 }, { `some_value`, ^69 }, { `error`, ^74 }
  br ^42

42:
  _10 = phi { _33, ^51 }, { _35, ^65 }

  %% maybe_SUITE.erl:179
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  _37 = call (`id`/1), `0`

  %% Aliased:
  %%    _37
  _77 = succeeded:body _37
  br _77, ^77, ^1

77:
  %% Argument types:
  %%    _10 => 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Unique:
  %%    _10
  _38 = put_tuple `wrapped`, _10
  %% Result type:
  %%    {'wrapped', 'error' | 'some_value' | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, nonempty_list(101..118), 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}}
  %% Unique:
  %%    _38
  ret _38

66:
  %% maybe_SUITE.erl:166
  %% Aliased:
  %%    _19
  _36 = match_fail `else_clause`, _19

  %% Unique:
  %%    _36
  _76 = succeeded:body _36
  br ^1

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% maybe_SUITE.erl:182
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'fish' | 0..42=>'failed' | 'failed_early' | {'error', 'whatever'} | {'ok', 'fish' | 42 | {'value', 'dolphins'}}}
function `maybe_SUITE`:`basic_3`(_0, _1) {
0:
  %% maybe_SUITE.erl:183
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _1
  Res = call (`basic_3a`/2), _0, _1

  %% Aliased:
  %%    Res
  _13 = succeeded:body Res
  br _13, ^13, ^1

13:
  %% maybe_SUITE.erl:184
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}}
  %% Aliased:
  %%    _1
  _7 = call (`basic_3b`/2), `0`, _1

  %% Aliased:
  %%    _7
  _14 = succeeded:body _7
  br _14, ^18, ^1

18:
  %% Argument types:
  %%    _7 => {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    _8 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %%    Res => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    _8, 
  %%    Res
  _17 = bif:'=:=' _8, Res
  br _17, ^17, ^16

17:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Aliased:
  %%    Res
  ret Res

16:
  %% maybe_SUITE.erl:184
  %% Aliased:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _24 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% maybe_SUITE.erl:187
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'fish' | 0..42=>'failed' | 'failed_early' | {'error', 'whatever'} | {'ok', 'fish' | 42 | {'value', 'dolphins'}}}
function `maybe_SUITE`:`basic_3a`(_0, _1) {
0:
  %% maybe_SUITE.erl:189
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _11 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _11
  _25 = succeeded:body _11
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _11 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _11
  _56 = is_tagged_tuple _11, `2`, `ok`
  br _56, ^53, ^28

53:
  %% Argument types:
  %%    _11 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _11
  _12 = get_tuple_element _11, `1`

  %% maybe_SUITE.erl:190
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _12
  _14 = call (`do_something`/2), _12, _1

  %% Aliased:
  %%    _14
  _29 = succeeded:body _14
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _14 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _14
  _50 = is_tagged_tuple _14, `2`, `ok`
  br _50, ^47, ^31

47:
  %% Argument types:
  %%    _14 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% maybe_SUITE.erl:191
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _15
  _17 = call (`do_something`/2), _15, _1

  %% Aliased:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _17 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _17
  _44 = is_tagged_tuple _17, `2`, `ok`
  br _44, ^41, ^34

41:
  %% Argument types:
  %%    _17 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _17
  _18 = get_tuple_element _17, `1`

  %% Argument types:
  %%    _18 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _18
  _38 = bif:is_tuple _18
  br _38, ^35, ^34

35:
  %% Argument types:
  %%    _12 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _15 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _12, 
  %%    _15
  _22 = put_tuple `ok`, _12, _15, `dolphins`
  %% Result type:
  %%    {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Unique:
  %%    _22
  ret _22

34:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _17
  ret _17

31:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _14
  ret _14

28:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _11
  ret _11

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% maybe_SUITE.erl:195
%% Counter = 68
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'fish' | 0..42=>'failed' | 'failed_early' | {'error', 'whatever'} | {'ok', 'fish' | 42 | {'value', 'dolphins'}}}
function `maybe_SUITE`:`basic_3b`(_0, _1) {
0:
  %% maybe_SUITE.erl:198
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _12 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _12
  _30 = succeeded:body _12
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _12 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _12
  _61 = is_tagged_tuple _12, `2`, `ok`
  br _61, ^58, ^33

58:
  %% Argument types:
  %%    _12 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% maybe_SUITE.erl:199
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _13
  _15 = call (`do_something`/2), _13, _1

  %% Aliased:
  %%    _15
  _34 = succeeded:body _15
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _15 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _15
  _55 = is_tagged_tuple _15, `2`, `ok`
  br _55, ^52, ^36

52:
  %% Argument types:
  %%    _15 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _15
  _16 = get_tuple_element _15, `1`

  %% maybe_SUITE.erl:200
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _16
  _18 = call (`do_something`/2), _16, _1

  %% Aliased:
  %%    _18
  _37 = succeeded:body _18
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    _18 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _18
  _49 = is_tagged_tuple _18, `2`, `ok`
  br _49, ^46, ^39

46:
  %% Argument types:
  %%    _18 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _18
  _19 = get_tuple_element _18, `1`

  %% Argument types:
  %%    _19 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _19
  _43 = bif:is_tuple _19
  br _43, ^40, ^39

40:
  %% Argument types:
  %%    _13 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _16 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %% Aliased:
  %%    _13, 
  %%    _16
  _26 = put_tuple `ok`, _13, _16, `dolphins`

  %% Argument types:
  %%    _26 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}
  %% Unique:
  %%    _26
  _67 = put_tuple `wrapped`, _26
  %% Result type:
  %%    {'wrapped', {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, 'dolphins'}}
  %% Unique:
  %%    _67
  ret _67

39:
  %% Argument types:
  %%    _18 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _18
  _66 = put_tuple `wrapped`, _18
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}}
  %% Unique:
  %%    _66
  ret _66

36:
  %% Argument types:
  %%    _15 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _15
  _65 = put_tuple `wrapped`, _15
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}}
  %% Unique:
  %%    _65
  ret _65

33:
  %% Argument types:
  %%    _12 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _12
  _64 = put_tuple `wrapped`, _12
  %% Result type:
  %%    {'wrapped', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}}
  %% Unique:
  %%    _64
  ret _64

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% maybe_SUITE.erl:205
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
function `maybe_SUITE`:`basic_4`(_0) {
0:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _0
  _17 = bif:is_tuple _0
  br _17, ^17, ^14

17:
  %% Argument types:
  %%    _0 => {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _0
  _18 = bif:tuple_size _0

  %% Argument types:
  %%    _18 => 1..16777215
  %% Unique:
  %%    _18
  _19 = bif:'=:=' _18, `1`
  br _19, ^16, ^14

16:
  %% Argument types:
  %%    _0 => {'error' | 'ok' | 'value' | bitstring(8)}
  %% Aliased:
  %%    _0
  _8 = get_tuple_element _0, `0`
  %% Result type:
  %%    'error' | 'ok' | 'value' | bitstring(8)
  %% Aliased:
  %%    _8
  ret _8

14:
  %% maybe_SUITE.erl:205
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-basic_4/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _20 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% maybe_SUITE.erl:210
%% Counter = 27
%% bs_ensure_opt: true
function `maybe_SUITE`:`nested`(_0) {
0:
  %% maybe_SUITE.erl:211
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  _4 = call (`nested_1`/2), `0`, `#{0 => not_ok}`

  %% Aliased:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _4 => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _4
  _25 = bif:'=:=' _4, `{outer_fail,not_ok}`
  br _25, ^25, ^14

25:
  %% maybe_SUITE.erl:212
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  _5 = call (`nested_1`/2), `0`, `#{0 => {ok,x},x => {error,inner}}`

  %% Aliased:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _5 => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _5
  _23 = bif:'=:=' _5, `{x,{error,inner}}`
  br _23, ^23, ^17

23:
  %% maybe_SUITE.erl:213
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  _6 = call (`nested_1`/2), `0`, `#{0 => {ok,x},x => not_error}`

  %% Aliased:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _6
  _21 = bif:'=:=' _6, `{outer_fail,{unexpected,not_error}}`
  br _21, ^21, ^20

21:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% maybe_SUITE.erl:213
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br ^1

17:
  %% maybe_SUITE.erl:212
  %% Aliased:
  %%    _5
  _8 = match_fail `badmatch`, _5

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br ^1

14:
  %% maybe_SUITE.erl:211
  %% Aliased:
  %%    _4
  _9 = match_fail `badmatch`, _4

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% maybe_SUITE.erl:216
%% Counter = 42
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'x' | 0=>'not_error' | 'not_ok' | {'error', 'inner'} | {'ok', 'x'}}
function `maybe_SUITE`:`nested_1`(_0, _1) {
0:
  %% maybe_SUITE.erl:217
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _1
  Res = call (`nested_1a`/2), _0, _1

  %% Aliased:
  %%    Res
  _19 = succeeded:body Res
  br _19, ^19, ^1

19:
  %% maybe_SUITE.erl:218
  %% Result type:
  %%    {'wrapped', {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Aliased:
  %%    _1
  _9 = call (`nested_1b`/2), `0`, _1

  %% Aliased:
  %%    _9
  _20 = succeeded:body _9
  br _20, ^35, ^1

35:
  %% Argument types:
  %%    _9 => {'wrapped', {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Aliased:
  %%    _9
  _10 = get_tuple_element _9, `1`

  %% Argument types:
  %%    _10 => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %%    Res => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _10, 
  %%    Res
  _23 = bif:'=:=' _10, Res
  br _23, ^23, ^22

23:
  %% maybe_SUITE.erl:219
  %% Result type:
  %%    {'wrapped', {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Aliased:
  %%    _1
  _12 = call (`nested_1c`/2), `0`, _1

  %% Aliased:
  %%    _12
  _24 = succeeded:body _12
  br _24, ^28, ^1

28:
  %% Argument types:
  %%    _12 => {'wrapped', {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Aliased:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% Argument types:
  %%    _13 => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %%    Res => {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _13, 
  %%    Res
  _27 = bif:'=:=' _13, Res
  br _27, ^27, ^26

27:
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'outer_fail' | 'x' | 42 | {'value', 'dolphins'}, atom() | nonempty_list(101..118) | {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Aliased:
  %%    Res
  ret Res

26:
  %% maybe_SUITE.erl:219
  %% Aliased:
  %%    _12
  _15 = match_fail `badmatch`, _12

  %% Unique:
  %%    _15
  _34 = succeeded:body _15
  br ^1

22:
  %% maybe_SUITE.erl:218
  %% Aliased:
  %%    _9
  _16 = match_fail `badmatch`, _9

  %% Unique:
  %%    _16
  _41 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% maybe_SUITE.erl:222
%% Counter = 67
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'x' | 0=>'not_error' | 'not_ok' | {'error', 'inner'} | {'ok', 'x'}}
function `maybe_SUITE`:`nested_1a`(_0, _1) {
0:
  %% maybe_SUITE.erl:224
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _20 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _20
  _36 = succeeded:body _20
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _20 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _62 = is_tagged_tuple _20, `2`, `ok`
  br _62, ^59, ^39

59:
  %% Argument types:
  %%    _20 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _20
  _21 = get_tuple_element _20, `1`

  %% maybe_SUITE.erl:227
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _21
  _9 = call (`do_something`/2), _21, _1

  %% Aliased:
  %%    _9
  _40 = succeeded:body _9
  br _40, ^40, ^1

40:
  %% maybe_SUITE.erl:227
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _9
  _25 = call (`id`/1), _9

  %% Aliased:
  %%    _25
  _41 = succeeded:body _25
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    _25 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _25
  _48 = is_tagged_tuple _25, `2`, `error`
  br _48, ^45, ^44

45:
  br ^42

44:
  %% Argument types:
  %%    _25 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _25
  _31 = put_tuple `unexpected`, _25
  br ^42

42:
  _11 = phi { _31, ^44 }, { _25, ^45 }

  %% Argument types:
  %%    _11 => {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}}
  %% Aliased:
  %%    _11
  _56 = is_tagged_tuple _11, `2`, `error`
  br _56, ^53, ^52

53:
  %% Argument types:
  %%    _21 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _11 => {'error', any()}
  %% Aliased:
  %%    _11, 
  %%    _21
  _32 = put_tuple _21, _11
  %% Result type:
  %%    {'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, {'error', any()}}
  %% Unique:
  %%    _32
  ret _32

52:
  %% Argument types:
  %%    _11 => {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}}
  %% Aliased:
  %%    _11
  _66 = put_tuple `outer_fail`, _11
  %% Result type:
  %%    {'outer_fail', {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}}}
  %% Unique:
  %%    _66
  ret _66

39:
  %% Argument types:
  %%    _20 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}
  %% Aliased:
  %%    _20
  _65 = put_tuple `outer_fail`, _20
  %% Result type:
  %%    {'outer_fail', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'value', 'some_value'}}
  %% Unique:
  %%    _65
  ret _65

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% maybe_SUITE.erl:236
%% Counter = 72
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'x' | 0=>'not_error' | 'not_ok' | {'error', 'inner'} | {'ok', 'x'}}
function `maybe_SUITE`:`nested_1b`(_0, _1) {
0:
  %% maybe_SUITE.erl:239
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _22 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _22
  _41 = succeeded:body _22
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    _22 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _22
  _67 = is_tagged_tuple _22, `2`, `ok`
  br _67, ^64, ^44

64:
  %% Argument types:
  %%    _22 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% maybe_SUITE.erl:242
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _23
  _9 = call (`do_something`/2), _23, _1

  %% Aliased:
  %%    _9
  _45 = succeeded:body _9
  br _45, ^45, ^1

45:
  %% maybe_SUITE.erl:242
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _9
  _27 = call (`id`/1), _9

  %% Aliased:
  %%    _27
  _46 = succeeded:body _27
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _27 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _27
  _53 = is_tagged_tuple _27, `2`, `error`
  br _53, ^50, ^49

50:
  br ^47

49:
  %% Argument types:
  %%    _27 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _27
  _34 = put_tuple `unexpected`, _27
  br ^47

47:
  _11 = phi { _34, ^49 }, { _27, ^50 }

  %% Argument types:
  %%    _11 => {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}}
  %% Aliased:
  %%    _11
  _61 = is_tagged_tuple _11, `2`, `error`
  br _61, ^58, ^57

58:
  %% Argument types:
  %%    _23 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _11 => {'error', any()}
  %% Aliased:
  %%    _11, 
  %%    _23
  _36 = put_tuple _23, _11

  %% Argument types:
  %%    _36 => {'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, {'error', any()}}
  %% Unique:
  %%    _36
  _71 = put_tuple `wrapped`, _36
  %% Result type:
  %%    {'wrapped', {'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, {'error', any()}}}
  %% Unique:
  %%    _71
  ret _71

57:
  br ^20

44:
  br ^20

20:
  _21 = phi { _22, ^44 }, { _11, ^57 }

  %% Argument types:
  %%    _21 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}
  %% Aliased:
  %%    _21
  _37 = put_tuple `outer_fail`, _21

  %% Argument types:
  %%    _37 => {'outer_fail', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Unique:
  %%    _37
  _70 = put_tuple `wrapped`, _37
  %% Result type:
  %%    {'wrapped', {'outer_fail', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Unique:
  %%    _70
  ret _70

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% maybe_SUITE.erl:252
%% Counter = 81
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     #{'x' | 0=>'not_error' | 'not_ok' | {'error', 'inner'} | {'ok', 'x'}}
function `maybe_SUITE`:`nested_1c`(_0, _1) {
0:
  %% maybe_SUITE.erl:256
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1
  _29 = call (`do_something`/2), _0, _1

  %% Aliased:
  %%    _29
  _49 = succeeded:body _29
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _29 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _29
  _76 = is_tagged_tuple _29, `2`, `ok`
  br _76, ^73, ^53

73:
  %% Argument types:
  %%    _29 => {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}}
  %% Aliased:
  %%    _29
  _30 = get_tuple_element _29, `1`

  %% maybe_SUITE.erl:259
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _1, 
  %%    _30
  _12 = call (`do_something`/2), _30, _1

  %% Aliased:
  %%    _12
  _54 = succeeded:body _12
  br _54, ^54, ^1

54:
  %% maybe_SUITE.erl:259
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _12
  _34 = call (`id`/1), _12

  %% Aliased:
  %%    _34
  _55 = succeeded:body _34
  br _55, ^55, ^1

55:
  %% Argument types:
  %%    _34 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _34
  _62 = is_tagged_tuple _34, `2`, `error`
  br _62, ^59, ^58

59:
  br ^56

58:
  %% Argument types:
  %%    _34 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _34
  _42 = put_tuple `unexpected`, _34
  br ^56

56:
  _14 = phi { _42, ^58 }, { _34, ^59 }

  %% Argument types:
  %%    _14 => {'error', any()} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}}
  %% Aliased:
  %%    _14
  _70 = is_tagged_tuple _14, `2`, `error`
  br _70, ^67, ^66

67:
  %% Argument types:
  %%    _30 => 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}
  %%    _14 => {'error', any()}
  %% Aliased:
  %%    _14, 
  %%    _30
  _44 = put_tuple _30, _14

  %% Argument types:
  %%    _44 => {'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, {'error', any()}}
  %% Unique:
  %%    _44
  _80 = put_tuple `wrapped`, _44
  %% Result type:
  %%    {'wrapped', {'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}, {'error', any()}}}
  %% Unique:
  %%    _80
  ret _80

66:
  br ^27

53:
  br ^27

27:
  _28 = phi { _29, ^53 }, { _14, ^66 }

  %% Argument types:
  %%    _28 => atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}
  %% Aliased:
  %%    _28
  _45 = put_tuple `outer_fail`, _28

  %% Argument types:
  %%    _45 => {'outer_fail', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}
  %% Unique:
  %%    _45
  _79 = put_tuple `wrapped`, _45
  %% Result type:
  %%    {'wrapped', {'outer_fail', atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'unexpected', atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}} | {'value', 'some_value'}}}
  %% Unique:
  %%    _79
  ret _79

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% maybe_SUITE.erl:275
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(101..118) | 0..42 | {'value', 'dolphins'}
%%    _1 =>
%%     #{'fish' | 'life' | 'x' | nonempty_list(101..118) | 0..42=>atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}}
function `maybe_SUITE`:`do_something`(_0, _1) {
0:
  %% maybe_SUITE.erl:276
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% maybe_SUITE.erl:276
  %% Argument types:
  %%    _2 => atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %%    _1 => #{'fish' | 'life' | 'x' | nonempty_list(101..118) | 0..42=>atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}}
  %% Aliased:
  %%    _1, 
  %%    _2
  _3 = bif:map_get _2, _1

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | {'error', 'inner' | 'whatever'} | {'ok', 'everything' | 'fish' | 'life' | 'x' | 42 | {'value', 'dolphins'}} | {'value', 'some_value'}
  %% Aliased:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% maybe_SUITE.erl:278
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
function `maybe_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    atom() | nonempty_list(101..118) | 0..42 | {'error' | 'ok' | 'value' | bitstring(8), ...}
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `maybe_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `maybe_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `maybe_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `maybe_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}
