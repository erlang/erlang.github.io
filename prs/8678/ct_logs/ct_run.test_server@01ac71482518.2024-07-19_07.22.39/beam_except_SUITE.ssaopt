module beam_except_SUITE.
exports [{all,0},
         {binary_construction_allocation,1},
         {bs_get_tail,1},
         {coverage,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {module_info,0},
         {module_info,1},
         {multiple_allocs,1},
         {suite,0},
         {unfold_literals,1}].
attributes [].

%% beam_except_SUITE.erl:27
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_except_SUITE.erl:29
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_except_SUITE.erl:32
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list('binary_construction_allocation' | 'bs_get_tail' | 'coverage' | 'multiple_allocs' | 'unfold_literals')})
  ret `[{p,[parallel],
     [multiple_allocs,bs_get_tail,coverage,binary_construction_allocation,
      unfold_literals]}]`
}

%% beam_except_SUITE.erl:40
%% Counter = 6
%% bs_ensure_opt: true
function `beam_except_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_except_SUITE.erl:41
  _2 = call (`test_lib`:`recompile`/1), `beam_except_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_except_SUITE.erl:47
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_except_SUITE.erl:50
%% Counter = 4
%% bs_ensure_opt: true
function `beam_except_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_except_SUITE.erl:53
%% Counter = 168
%% bs_ensure_opt: true
function `beam_except_SUITE`:`multiple_allocs`(_0) {
0:
  br ^165

165:
  _40 = new_try_tag `'catch'`
  br _40, ^38, ^39

38:
  %% beam_except_SUITE.erl:55
  %% Result type:
  %%    none()
  _27 = call (`could`/4), `pda`, `0.0`, `{false,true}`, `{p}`

  %% Aliased:
  %%    _27
  _42 = succeeded:body _27
  br ^39

39:
  %% Unique:
  %%    _40
  _45 = landingpad `'catch'`, _40

  %% Aliased:
  %%    _45
  _43 = extract _45, `0`
  br ^37

37:
  %% Aliased:
  %%    _43
  %% Unique:
  %%    _40
  _1 = catch_end _40, _43

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _113 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _113, ^110, ^48

110:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _11 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _107 = bif:is_tuple _11
  br _107, ^107, ^48

107:
  %% Argument types:
  %%    _11 => {...}
  %% Aliased:
  %%    _11
  _108 = bif:tuple_size _11

  %% Argument types:
  %%    _108 => 0..16777215
  %% Unique:
  %%    _108
  _109 = bif:'=:=' _108, `2`
  br _109, ^106, ^48

106:
  %% Argument types:
  %%    _11 => {any(), any()}
  %% Aliased:
  %%    _11
  _14 = get_tuple_element _11, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _103 = is_tagged_tuple _14, `2`, `badmatch`
  br _103, ^100, ^48

100:
  %% Argument types:
  %%    _14 => {'badmatch', any()}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _99 = bif:is_map _15
  br _99, ^99, ^48

99:
  %% Argument types:
  %%    _15 => map()
  %% Aliased:
  %%    _15
  _17 = get_map_element _15, `true`

  %% Aliased:
  %%    _17
  _49 = succeeded:guard _17
  br _49, ^49, ^48

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _98 = bif:'=:=' _17, `[p]`
  br _98, ^163, ^48

163:
  br ^166

166:
  _53 = new_try_tag `'catch'`
  br _53, ^51, ^52

51:
  %% beam_except_SUITE.erl:56
  %% Result type:
  %%    none()
  _29 = call (`place`/1), `lee`

  %% Aliased:
  %%    _29
  _55 = succeeded:body _29
  br ^52

52:
  %% Unique:
  %%    _53
  _58 = landingpad `'catch'`, _53

  %% Aliased:
  %%    _58
  _56 = extract _58, `0`
  br ^50

50:
  %% Aliased:
  %%    _56
  %% Unique:
  %%    _53
  _3 = catch_end _53, _56

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _94 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _94, ^91, ^61

91:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _18 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _88 = bif:is_tuple _18
  br _88, ^88, ^61

88:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _89 = bif:tuple_size _18

  %% Argument types:
  %%    _89 => 0..16777215
  %% Unique:
  %%    _89
  _90 = bif:'=:=' _89, `2`
  br _90, ^87, ^61

87:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _21 = get_tuple_element _18, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _86 = bif:'=:=' _21, `{bad_generator,0}`
  br _86, ^164, ^61

164:
  br ^167

167:
  _65 = new_try_tag `'catch'`
  br _65, ^63, ^64

63:
  %% beam_except_SUITE.erl:57
  %% Result type:
  %%    none()
  _31 = call (`conditions`/0)

  %% Aliased:
  %%    _31
  _67 = succeeded:body _31
  br ^64

64:
  %% Unique:
  %%    _65
  _70 = landingpad `'catch'`, _65

  %% Aliased:
  %%    _70
  _68 = extract _70, `0`
  br ^62

62:
  %% Aliased:
  %%    _68
  %% Unique:
  %%    _65
  _5 = catch_end _65, _68

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _82 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _82, ^79, ^73

79:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _22 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _76 = bif:is_tuple _22
  br _76, ^76, ^73

76:
  %% Argument types:
  %%    _22 => {...}
  %% Aliased:
  %%    _22
  _77 = bif:tuple_size _22

  %% Argument types:
  %%    _77 => 0..16777215
  %% Unique:
  %%    _77
  _78 = bif:'=:=' _77, `2`
  br _78, ^75, ^73

75:
  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _25 = get_tuple_element _22, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _74 = bif:'=:=' _25, `{badmatch,wanted}`
  br _74, ^74, ^73

74:
  %% Result type:
  %%    'ok'
  ret `ok`

73:
  %% beam_except_SUITE.erl:57
  %% Aliased:
  %%    _5
  _32 = match_fail `badmatch`, _5

  %% Unique:
  %%    _32
  _85 = succeeded:body _32
  br ^1

61:
  %% beam_except_SUITE.erl:56
  %% Aliased:
  %%    _3
  _33 = match_fail `badmatch`, _3

  %% Unique:
  %%    _33
  _97 = succeeded:body _33
  br ^1

48:
  %% beam_except_SUITE.erl:54
  %% Aliased:
  %%    _1
  _34 = match_fail `badmatch`, _1

  %% Unique:
  %%    _34
  _116 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% beam_except_SUITE.erl:61
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'pda'
%%    _1 =>
%%     0.0
%%    _2 =>
%%     {'false', 'true'}
%%    _3 =>
%%     {'p'}
function `beam_except_SUITE`:`could`(_0, _1, _2, _3) {
0:
  %% beam_except_SUITE.erl:62
  _5 = put_map `assoc`, `#{}`, `true`, `[p]`

  %% beam_except_SUITE.erl:62
  %% Unique:
  %%    _5
  _15 = match_fail `badmatch`, _5

  %% Unique:
  %%    _15
  _20 = succeeded:body _15
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_except_SUITE.erl:64
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'lee'
function `beam_except_SUITE`:`place`(_0) {
0:
  %% beam_except_SUITE.erl:65
  %% Result type:
  %%    none()
  _6 = call (`'-place/1-lc$^0/1-0-'`/1), `0`

  %% Aliased:
  %%    _6
  _23 = succeeded:body _6
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_except_SUITE.erl:67
%% Counter = 6
%% bs_ensure_opt: true
function `beam_except_SUITE`:`conditions`() {
0:
  %% beam_except_SUITE.erl:68
  _2 = match_fail `badmatch`, `wanted`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:70
%% Counter = 205
%% bs_ensure_opt: true
function `beam_except_SUITE`:`bs_get_tail`(_0) {
0:
  %% beam_except_SUITE.erl:71
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _1 = call (`id`/1), `<<0,0,0,0,97,98,99>>`

  %% Unique:
  %%    _1
  _63 = succeeded:body _1
  br _63, ^63, ^1

63:
  %% beam_except_SUITE.erl:71
  %% Result type:
  %%    {bitstring(8), 0, 0, any()}
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  _17 = call (`bs_get_tail_1`/4), _1, `0`, `0`, _0

  %% Unique:
  %%    _17
  _64 = succeeded:body _17
  br _64, ^166, ^1

166:
  %% Argument types:
  %%    _17 => {bitstring(8), 0, 0, any()}
  %% Unique:
  %%    _17
  _21 = get_tuple_element _17, `0`

  %% Argument types:
  %%    _21 => bitstring(8)
  %% Aliased:
  %%    _21
  _165 = bif:'=:=' _21, `<<"abc">>`
  br _165, ^161, ^66

161:
  %% Argument types:
  %%    _17 => {bitstring(8), 0, 0, any()}
  %% Unique:
  %%    _17
  _18 = get_tuple_element _17, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _18
  _67 = bif:'=:=' _18, _0
  br _67, ^201, ^66

201:
  br ^203

203:
  _71 = new_try_tag `'catch'`
  br _71, ^69, ^70

69:
  %% beam_except_SUITE.erl:75
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _3 = call (`id`/1), `<<>>`

  %% Unique:
  %%    _3
  _73 = succeeded:body _3
  br _73, ^73, ^70

73:
  %% beam_except_SUITE.erl:75
  %% Result type:
  %%    {bitstring(8), 0, 0, any()}
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _3
  _53 = call (`bs_get_tail_1`/4), _3, `0`, `0`, _0

  %% Unique:
  %%    _53
  _74 = succeeded:body _53
  br _74, ^74, ^70

74:
  br ^68

70:
  %% Unique:
  %%    _71
  _77 = landingpad `'catch'`, _71

  %% Aliased:
  %%    _77
  _75 = extract _77, `0`
  br ^68

68:
  _78 = phi { _75, ^70 }, { _53, ^74 }

  %% Aliased:
  %%    _78
  %% Unique:
  %%    _71
  _4 = catch_end _71, _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _157 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _157, ^154, ^80

154:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _22 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _151 = is_tagged_tuple _22, `2`, `function_clause`
  br _151, ^148, ^80

148:
  %% Argument types:
  %%    _22 => {'function_clause', any()}
  %% Aliased:
  %%    _22
  _24 = get_tuple_element _22, `1`

  %% Aliased:
  %%    _24
  _147 = is_nonempty_list _24
  br _147, ^147, ^80

147:
  %% Argument types:
  %%    _24 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _24
  _27 = get_hd _24

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _144 = is_tagged_tuple _27, `4`, `beam_except_SUITE`
  br _144, ^141, ^80

141:
  %% Argument types:
  %%    _27 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _27
  _30 = get_tuple_element _27, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _140 = bif:'=:=' _30, `bs_get_tail_1`
  br _140, ^139, ^80

139:
  %% Argument types:
  %%    _27 => {'beam_except_SUITE', 'bs_get_tail_1', any(), any()}
  %% Aliased:
  %%    _27
  _29 = get_tuple_element _27, `2`

  %% Aliased:
  %%    _29
  _138 = is_nonempty_list _29
  br _138, ^138, ^80

138:
  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _33 = get_hd _29

  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _32 = get_tl _29

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _137 = bif:'=:=' _33, `<<>>`
  br _137, ^137, ^80

137:
  %% Aliased:
  %%    _32
  _136 = is_nonempty_list _32
  br _136, ^136, ^80

136:
  %% Argument types:
  %%    _32 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _32
  _35 = get_hd _32

  %% Argument types:
  %%    _32 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _32
  _34 = get_tl _32

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _135 = bif:'=:=' _35, `0`
  br _135, ^134, ^80

134:
  %% Aliased:
  %%    _34
  _133 = is_nonempty_list _34
  br _133, ^133, ^80

133:
  %% Argument types:
  %%    _34 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _34
  _37 = get_hd _34

  %% Argument types:
  %%    _34 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _34
  _36 = get_tl _34

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _132 = bif:'=:=' _37, `0`
  br _132, ^131, ^80

131:
  %% Aliased:
  %%    _36
  _130 = is_nonempty_list _36
  br _130, ^130, ^80

130:
  %% Argument types:
  %%    _36 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _36
  _39 = get_hd _36

  %% Argument types:
  %%    _36 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _36
  _38 = get_tl _36

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _129 = bif:'=:=' _38, `[]`
  br _129, ^129, ^80

129:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _39
  _81 = bif:'=:=' _39, _0
  br _81, ^81, ^80

81:
  %% beam_except_SUITE.erl:77
  %% Result type:
  %%    'ok'
  _40 = call (`bs_get_tail_2`/3), `<<"W">>`, `<<"X">>`, `<<"Z">>`

  %% Unique:
  %%    _40
  _82 = succeeded:body _40
  br _82, ^126, ^1

126:
  %% beam_except_SUITE.erl:78
  %% Result type:
  %%    'ok'
  _41 = call (`bs_get_tail_2`/3), `<<"M">>`, `<<"X">>`, `<<"Z">>`

  %% Unique:
  %%    _41
  _85 = succeeded:body _41
  br _85, ^202, ^1

202:
  br ^204

204:
  _91 = new_try_tag `'catch'`
  br _91, ^89, ^90

89:
  %% beam_except_SUITE.erl:82
  %% Result type:
  %%    'ok'
  _55 = call (`bs_get_tail_2`/3), `<<"A">>`, `<<"B">>`, `<<"C">>`

  %% Unique:
  %%    _55
  _93 = succeeded:body _55
  br _93, ^93, ^90

93:
  br ^88

90:
  %% Unique:
  %%    _91
  _96 = landingpad `'catch'`, _91

  %% Aliased:
  %%    _96
  _94 = extract _96, `0`
  br ^88

88:
  _97 = phi { _94, ^90 }, { `ok`, ^93 }

  %% Aliased:
  %%    _97
  %% Unique:
  %%    _91
  _8 = catch_end _91, _97

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _119 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _119, ^116, ^99

116:
  %% Argument types:
  %%    _8 => {''EXIT'', any()}
  %% Aliased:
  %%    _8
  _42 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _113 = is_tagged_tuple _42, `2`, `function_clause`
  br _113, ^110, ^99

110:
  %% Argument types:
  %%    _42 => {'function_clause', any()}
  %% Aliased:
  %%    _42
  _44 = get_tuple_element _42, `1`

  %% Aliased:
  %%    _44
  _109 = is_nonempty_list _44
  br _109, ^109, ^99

109:
  %% Argument types:
  %%    _44 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _44
  _47 = get_hd _44

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _106 = is_tagged_tuple _47, `4`, `beam_except_SUITE`
  br _106, ^103, ^99

103:
  %% Argument types:
  %%    _47 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _47
  _50 = get_tuple_element _47, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _102 = bif:'=:=' _50, `do_get_bs_tail_2`
  br _102, ^101, ^99

101:
  %% Argument types:
  %%    _47 => {'beam_except_SUITE', 'do_get_bs_tail_2', any(), any()}
  %% Aliased:
  %%    _47
  _49 = get_tuple_element _47, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _100 = bif:'=:=' _49, `[<<"A">>,<<"B">>,[],<<"C">>]`
  br _100, ^100, ^99

100:
  %% Result type:
  %%    'ok'
  ret `ok`

99:
  %% beam_except_SUITE.erl:79
  %% Aliased:
  %%    _8
  _56 = match_fail `badmatch`, _8

  %% Unique:
  %%    _56
  _122 = succeeded:body _56
  br ^1

80:
  %% beam_except_SUITE.erl:72
  %% Aliased:
  %%    _4
  _59 = match_fail `badmatch`, _4

  %% Unique:
  %%    _59
  _160 = succeeded:body _59
  br ^1

66:
  %% beam_except_SUITE.erl:71
  %% Unique:
  %%    _17
  _60 = match_fail `badmatch`, _17

  %% Unique:
  %%    _60
  _170 = succeeded:body _60
  br ^1

1:
  _61 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _61
}

%% beam_except_SUITE.erl:86
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
%%     accepts_match_context
%%    _1 =>
%%     0
%%    _2 =>
%%     0
function `beam_except_SUITE`:`bs_get_tail_1`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _0 => 'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _9 = bs_start_match `new`, _0

  %% Aliased:
  %%    _9
  _21 = succeeded:guard _9
  br _21, ^21, ^23

21:
  _30 = bs_ensure _9, `32`, `1`
  _31 = succeeded:guard _30
  br _31, ^29, ^18

29:
  %% beam_except_SUITE.erl:86
  %% Aliased:
  %%    _9
  %% Anno: #{ensured => true}
  _10 = bs_match `skip`, _30, `integer`, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _10
  _19 = succeeded:guard _10
  br _19, ^19, ^18

19:
  %% beam_except_SUITE.erl:86
  %% Aliased:
  %%    _10
  _12 = bs_get_tail _10

  %% Argument types:
  %%    _12 => bitstring(8)
  %% Aliased:
  %%    _3, 
  %%    _12
  _14 = put_tuple _12, `0`, `0`, _3
  %% Result type:
  %%    {bitstring(8), 0, 0, any()}
  %% Unique:
  %%    _14
  ret _14

18:
  %% Aliased:
  %%    _9
  _28 = bs_get_tail _9

  %% beam_except_SUITE.erl:86
  %% Aliased:
  %%    _3, 
  %%    _28
  %% Anno: #{inlined => {'-inlined-bs_get_tail_1/4-',4}}
  _15 = match_fail `function_clause`, _28, _1, _2, _3

  %% Unique:
  %%    _15
  _22 = succeeded:body _15
  br ^1

23:
  %% beam_except_SUITE.erl:86
  %% Aliased:
  %%    _0, 
  %%    _3
  %% Anno: #{inlined => {'-inlined-bs_get_tail_1/4-',4}}
  _25 = match_fail `function_clause`, _0, _1, _2, _3

  %% Unique:
  %%    _25
  _26 = succeeded:body _25
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_except_SUITE.erl:89
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(8)
%%     accepts_match_context
%%    _1 =>
%%     bitstring(8)
%%    _2 =>
%%     bitstring(8)
function `beam_except_SUITE`:`bs_get_tail_2`(_0, _1, _2) {
0:
  %% beam_except_SUITE.erl:90
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _0, 
  %%    _1, 
  %%    _2
  _3 = call (`do_get_bs_tail_2`/4), _0, _1, `[]`, _2

  %% Unique:
  %%    _3
  _6 = succeeded:body _3
  br _6, ^6, ^1

6:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_except_SUITE.erl:92
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(8)
%%     accepts_match_context
%%    _1 =>
%%     bitstring(8)
%%    _2 =>
%%     nil()
%%    _3 =>
%%     bitstring(8)
function `beam_except_SUITE`:`do_get_bs_tail_2`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _0 => bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _10 = bs_start_match `new`, _0
  _35 = bs_ensure _10, `8`, `1`
  _36 = succeeded:guard _35
  br _36, ^34, ^16

34:
  %% beam_except_SUITE.erl:92
  %% Argument types:
  %%    _35 => bs_context(8)
  %% Aliased:
  %%    _10
  %% Anno: #{ensured => true}
  _11 = bs_match `integer`, _35, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _11
  _17 = succeeded:guard _11
  br _17, ^17, ^16

17:
  %% Aliased:
  %%    _11
  _12 = bs_extract _11
  %% Argument types:
  %%    
  switch _12, ^16, [
    { `77`, ^24 },
    { `87`, ^24 }
  ]

24:
  %% Aliased:
  %%    _11
  _20 = bs_test_tail _11, `0`
  br _20, ^20, ^16

20:
  %% Argument types:
  %%    _1 => bitstring(8)
  %% Unique:
  %%    _1
  _19 = bif:'=:=' _1, `<<"X">>`
  br _19, ^19, ^16

19:
  %% Argument types:
  %%    _3 => bitstring(8)
  %% Unique:
  %%    _3
  _18 = bif:'=:=' _3, `<<"Z">>`
  br _18, ^18, ^16

18:
  %% Result type:
  %%    'ok'
  ret `ok`

16:
  %% Aliased:
  %%    _10
  _33 = bs_get_tail _10

  %% beam_except_SUITE.erl:92
  %% Aliased:
  %%    _33
  %% Unique:
  %%    _1, 
  %%    _3
  %% Anno: #{inlined => {'-inlined-do_get_bs_tail_2/4-',4}}
  _13 = match_fail `function_clause`, _33, _1, _2, _3

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_except_SUITE.erl:95
%% Counter = 993
%% bs_ensure_opt: true
function `beam_except_SUITE`:`coverage`(_0) {
0:
  %% beam_except_SUITE.erl:97
  %% Result type:
  %%    'ok'
  _71 = call (`fc`/1), `a`

  %% Unique:
  %%    _71
  _262 = succeeded:body _71
  br _262, ^967, ^1

967:
  br ^980

980:
  _268 = new_try_tag `'catch'`
  br _268, ^266, ^267

266:
  %% beam_except_SUITE.erl:100
  %% Result type:
  %%    none()
  _217 = call (`fc`/1), `[x]`

  %% Aliased:
  %%    _217
  _270 = succeeded:body _217
  br ^267

267:
  %% Unique:
  %%    _268
  _273 = landingpad `'catch'`, _268

  %% Aliased:
  %%    _273
  _271 = extract _273, `0`
  br ^265

265:
  %% Aliased:
  %%    _271
  %% Unique:
  %%    _268
  _3 = catch_end _268, _271

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _761 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _761, ^758, ^276

758:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _72 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _755 = is_tagged_tuple _72, `2`, `function_clause`
  br _755, ^752, ^276

752:
  %% Argument types:
  %%    _72 => {'function_clause', any()}
  %% Aliased:
  %%    _72
  _74 = get_tuple_element _72, `1`

  %% Aliased:
  %%    _74
  _751 = is_nonempty_list _74
  br _751, ^751, ^276

751:
  %% Argument types:
  %%    _74 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _74
  _77 = get_hd _74

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _748 = is_tagged_tuple _77, `4`, `beam_except_SUITE`
  br _748, ^745, ^276

745:
  %% Argument types:
  %%    _77 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _77
  _80 = get_tuple_element _77, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _744 = bif:'=:=' _80, `fc`
  br _744, ^743, ^276

743:
  %% Argument types:
  %%    _77 => {'beam_except_SUITE', 'fc', any(), any()}
  %% Aliased:
  %%    _77
  _79 = get_tuple_element _77, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _742 = bif:'=:=' _79, `[[x]]`
  br _742, ^742, ^276

742:
  %% Argument types:
  %%    _77 => {'beam_except_SUITE', 'fc', nonempty_list(nonempty_list('x')), any()}
  %% Aliased:
  %%    _77
  _78 = get_tuple_element _77, `3`

  %% Aliased:
  %%    _78
  _741 = is_nonempty_list _78
  br _741, ^741, ^276

741:
  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _83 = get_hd _78

  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _82 = get_tl _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _82
  _740 = bif:'=:=' _82, `[{line,2}]`
  br _740, ^740, ^276

740:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _277 = bif:'=:=' _83, `{file,"fake.erl"}`
  br _277, ^968, ^276

968:
  br ^981

981:
  _281 = new_try_tag `'catch'`
  br _281, ^279, ^280

279:
  %% beam_except_SUITE.erl:103
  %% Result type:
  %%    none()
  _219 = call (`fc`/1), `y`

  %% Aliased:
  %%    _219
  _283 = succeeded:body _219
  br ^280

280:
  %% Unique:
  %%    _281
  _286 = landingpad `'catch'`, _281

  %% Aliased:
  %%    _286
  _284 = extract _286, `0`
  br ^278

278:
  %% Aliased:
  %%    _284
  %% Unique:
  %%    _281
  _5 = catch_end _281, _284

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _736 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _736, ^733, ^289

733:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _84 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _730 = is_tagged_tuple _84, `2`, `function_clause`
  br _730, ^727, ^289

727:
  %% Argument types:
  %%    _84 => {'function_clause', any()}
  %% Aliased:
  %%    _84
  _86 = get_tuple_element _84, `1`

  %% Aliased:
  %%    _86
  _726 = is_nonempty_list _86
  br _726, ^726, ^289

726:
  %% Argument types:
  %%    _86 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _86
  _89 = get_hd _86

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _723 = is_tagged_tuple _89, `4`, `beam_except_SUITE`
  br _723, ^720, ^289

720:
  %% Argument types:
  %%    _89 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _89
  _92 = get_tuple_element _89, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _719 = bif:'=:=' _92, `fc`
  br _719, ^718, ^289

718:
  %% Argument types:
  %%    _89 => {'beam_except_SUITE', 'fc', any(), any()}
  %% Aliased:
  %%    _89
  _91 = get_tuple_element _89, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _717 = bif:'=:=' _91, `[y]`
  br _717, ^717, ^289

717:
  %% Argument types:
  %%    _89 => {'beam_except_SUITE', 'fc', nonempty_list('y'), any()}
  %% Aliased:
  %%    _89
  _90 = get_tuple_element _89, `3`

  %% Aliased:
  %%    _90
  _716 = is_nonempty_list _90
  br _716, ^716, ^289

716:
  %% Argument types:
  %%    _90 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _90
  _95 = get_hd _90

  %% Argument types:
  %%    _90 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _90
  _94 = get_tl _90

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _715 = bif:'=:=' _94, `[{line,2}]`
  br _715, ^715, ^289

715:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _290 = bif:'=:=' _95, `{file,"fake.erl"}`
  br _290, ^969, ^289

969:
  br ^982

982:
  _294 = new_try_tag `'catch'`
  br _294, ^292, ^293

292:
  %% beam_except_SUITE.erl:112
  %% Result type:
  %%    none()
  _221 = call (`fc`/1), `[a,b,c]`

  %% Aliased:
  %%    _221
  _296 = succeeded:body _221
  br ^293

293:
  %% Unique:
  %%    _294
  _299 = landingpad `'catch'`, _294

  %% Aliased:
  %%    _299
  _297 = extract _299, `0`
  br ^291

291:
  %% Aliased:
  %%    _297
  %% Unique:
  %%    _294
  _7 = catch_end _294, _297

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _325 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _325, ^322, ^302

322:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _96 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _319 = is_tagged_tuple _96, `2`, `function_clause`
  br _319, ^316, ^302

316:
  %% Argument types:
  %%    _96 => {'function_clause', any()}
  %% Aliased:
  %%    _96
  _98 = get_tuple_element _96, `1`

  %% Aliased:
  %%    _98
  _315 = is_nonempty_list _98
  br _315, ^315, ^302

315:
  %% Argument types:
  %%    _98 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _98
  _101 = get_hd _98

  %% Argument types:
  %%    
  %% Aliased:
  %%    _101
  _312 = is_tagged_tuple _101, `4`, `beam_except_SUITE`
  br _312, ^309, ^302

309:
  %% Argument types:
  %%    _101 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _101
  _104 = get_tuple_element _101, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _104
  _308 = bif:'=:=' _104, `fc`
  br _308, ^307, ^302

307:
  %% Argument types:
  %%    _101 => {'beam_except_SUITE', 'fc', any(), any()}
  %% Aliased:
  %%    _101
  _103 = get_tuple_element _101, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _306 = bif:'=:=' _103, `[[a,b,c]]`
  br _306, ^306, ^302

306:
  %% Argument types:
  %%    _101 => {'beam_except_SUITE', 'fc', nonempty_list(nonempty_list('a' | 'b' | 'c')), any()}
  %% Aliased:
  %%    _101
  _102 = get_tuple_element _101, `3`

  %% Aliased:
  %%    _102
  _305 = is_nonempty_list _102
  br _305, ^305, ^302

305:
  %% Argument types:
  %%    _102 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _102
  _107 = get_hd _102

  %% Argument types:
  %%    _102 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _102
  _106 = get_tl _102

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _304 = bif:'=:=' _106, `[{line,6}]`
  br _304, ^304, ^302

304:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _107
  _303 = bif:'=:=' _107, `{file,"fake.erl"}`
  br _303, ^970, ^302

970:
  br ^983

983:
  _332 = new_try_tag `'catch'`
  br _332, ^330, ^331

330:
  %% beam_except_SUITE.erl:116
  _224 = call (`erlang`:`error`/4), `a`, `b`, `c`, `d`

  %% Aliased:
  %%    _224
  _334 = succeeded:body _224
  br _334, ^334, ^331

334:
  br ^329

331:
  %% Unique:
  %%    _332
  _337 = landingpad `'catch'`, _332

  %% Aliased:
  %%    _337
  _335 = extract _337, `0`
  br ^329

329:
  _338 = phi { _335, ^331 }, { _224, ^334 }

  %% Aliased:
  %%    _338
  %% Unique:
  %%    _332
  _10 = catch_end _332, _338

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _711 = is_tagged_tuple _10, `2`, `'EXIT'`
  br _711, ^708, ^340

708:
  %% Argument types:
  %%    _10 => {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _108 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _705 = is_tagged_tuple _108, `2`, `undef`
  br _705, ^702, ^340

702:
  %% Argument types:
  %%    _108 => {'undef', any()}
  %% Aliased:
  %%    _108
  _110 = get_tuple_element _108, `1`

  %% Aliased:
  %%    _110
  _701 = is_nonempty_list _110
  br _701, ^701, ^340

701:
  %% Argument types:
  %%    _110 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _110
  _113 = get_hd _110

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _698 = is_tagged_tuple _113, `4`, `erlang`
  br _698, ^695, ^340

695:
  %% Argument types:
  %%    _113 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _113
  _116 = get_tuple_element _113, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _116
  _694 = bif:'=:=' _116, `error`
  br _694, ^693, ^340

693:
  %% Argument types:
  %%    _113 => {'erlang', 'error', any(), any()}
  %% Aliased:
  %%    _113
  _115 = get_tuple_element _113, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _692 = bif:'=:=' _115, `[a,b,c,d]`
  br _692, ^971, ^340

971:
  br ^984

984:
  _344 = new_try_tag `'catch'`
  br _344, ^342, ^343

342:
  %% beam_except_SUITE.erl:120
  %% Result type:
  %%    none()
  _226 = call (`bar`/1), `x`

  %% Aliased:
  %%    _226
  _346 = succeeded:body _226
  br ^343

343:
  %% Unique:
  %%    _344
  _349 = landingpad `'catch'`, _344

  %% Aliased:
  %%    _349
  _347 = extract _349, `0`
  br ^341

341:
  %% Aliased:
  %%    _347
  %% Unique:
  %%    _344
  _12 = catch_end _344, _347

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _394 = is_tagged_tuple _12, `2`, `'EXIT'`
  br _394, ^391, ^352

391:
  %% Argument types:
  %%    _12 => {''EXIT'', any()}
  %% Aliased:
  %%    _12
  _118 = get_tuple_element _12, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _118
  _388 = is_tagged_tuple _118, `2`, `badarith`
  br _388, ^385, ^352

385:
  %% Argument types:
  %%    _118 => {'badarith', any()}
  %% Aliased:
  %%    _118
  _120 = get_tuple_element _118, `1`

  %% Aliased:
  %%    _120
  _384 = is_nonempty_list _120
  br _384, ^384, ^352

384:
  %% Argument types:
  %%    _120 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _120
  _123 = get_hd _120

  %% Argument types:
  %%    _120 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _120
  _122 = get_tl _120

  %% Argument types:
  %%    
  %% Aliased:
  %%    _123
  _381 = bif:is_tuple _123
  br _381, ^381, ^352

381:
  %% Argument types:
  %%    _123 => {...}
  %% Aliased:
  %%    _123
  _382 = bif:tuple_size _123

  %% Argument types:
  %%    _382 => 0..16777215
  %% Unique:
  %%    _382
  _383 = bif:'=:=' _382, `4`
  br _383, ^380, ^352

380:
  %% Argument types:
  %%    _123 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _123
  _127 = get_tuple_element _123, `0`

  %% Argument types:
  %%    _123 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _123
  _126 = get_tuple_element _123, `1`

  %% Argument types:
  %%    _123 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _123
  _125 = get_tuple_element _123, `2`

  %% Argument types:
  %%    _123 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _123
  _124 = get_tuple_element _123, `3`
  switch _127, ^352, [
    { `beam_except_SUITE`, ^379 },
    { `erlang`, ^378 }
  ]

378:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _370 = bif:'=:=' _126, `'+'`
  br _370, ^369, ^352

369:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _125
  _368 = bif:'=:=' _125, `[x,1]`
  br _368, ^368, ^352

368:
  %% Aliased:
  %%    _124
  _367 = is_nonempty_list _124
  br _367, ^367, ^352

367:
  %% Aliased:
  %%    _122
  _366 = is_nonempty_list _122
  br _366, ^366, ^352

366:
  %% Argument types:
  %%    _122 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _122
  _131 = get_hd _122

  %% Argument types:
  %%    
  %% Aliased:
  %%    _131
  _363 = is_tagged_tuple _131, `4`, `beam_except_SUITE`
  br _363, ^360, ^352

360:
  %% Argument types:
  %%    _131 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _131
  _134 = get_tuple_element _131, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _134
  _359 = bif:'=:=' _134, `bar`
  br _359, ^358, ^352

358:
  %% Argument types:
  %%    _131 => {'beam_except_SUITE', 'bar', any(), any()}
  %% Aliased:
  %%    _131
  _133 = get_tuple_element _131, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _357 = bif:'=:=' _133, `1`
  br _357, ^356, ^352

356:
  %% Argument types:
  %%    _131 => {'beam_except_SUITE', 'bar', 1, any()}
  %% Aliased:
  %%    _131
  _132 = get_tuple_element _131, `3`

  %% Aliased:
  %%    _132
  _355 = is_nonempty_list _132
  br _355, ^355, ^352

355:
  %% Argument types:
  %%    _132 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _132
  _137 = get_hd _132

  %% Argument types:
  %%    _132 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _132
  _136 = get_tl _132

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _354 = bif:'=:=' _136, `[{line,9}]`
  br _354, ^354, ^352

354:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _353 = bif:'=:=' _137, `{file,"fake.erl"}`
  br _353, ^972, ^352

379:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _377 = bif:'=:=' _126, `bar`
  br _377, ^376, ^352

376:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _125
  _375 = bif:'=:=' _125, `1`
  br _375, ^374, ^352

374:
  %% Aliased:
  %%    _124
  _373 = is_nonempty_list _124
  br _373, ^373, ^352

373:
  %% Argument types:
  %%    _124 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _124
  _139 = get_hd _124

  %% Argument types:
  %%    _124 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _124
  _138 = get_tl _124

  %% Argument types:
  %%    
  %% Aliased:
  %%    _138
  _372 = bif:'=:=' _138, `[{line,9}]`
  br _372, ^372, ^352

372:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _139
  _371 = bif:'=:=' _139, `{file,"fake.erl"}`
  br _371, ^972, ^352

972:
  br ^985

985:
  _401 = new_try_tag `'catch'`
  br _401, ^399, ^400

399:
  %% beam_except_SUITE.erl:129
  %% Result type:
  %%    none()
  _229 = call (`bar`/1), `0`

  %% Aliased:
  %%    _229
  _403 = succeeded:body _229
  br ^400

400:
  %% Unique:
  %%    _401
  _406 = landingpad `'catch'`, _401

  %% Aliased:
  %%    _406
  _404 = extract _406, `0`
  br ^398

398:
  %% Aliased:
  %%    _404
  %% Unique:
  %%    _401
  _14 = catch_end _401, _404

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _688 = is_tagged_tuple _14, `2`, `'EXIT'`
  br _688, ^685, ^409

685:
  %% Argument types:
  %%    _14 => {''EXIT'', any()}
  %% Aliased:
  %%    _14
  _140 = get_tuple_element _14, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _140
  _682 = bif:is_tuple _140
  br _682, ^682, ^409

682:
  %% Argument types:
  %%    _140 => {...}
  %% Aliased:
  %%    _140
  _683 = bif:tuple_size _140

  %% Argument types:
  %%    _683 => 0..16777215
  %% Unique:
  %%    _683
  _684 = bif:'=:=' _683, `2`
  br _684, ^681, ^409

681:
  %% Argument types:
  %%    _140 => {any(), any()}
  %% Aliased:
  %%    _140
  _143 = get_tuple_element _140, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _143
  _680 = bif:'=:=' _143, `{case_clause,{1}}`
  br _680, ^680, ^409

680:
  %% Argument types:
  %%    _140 => {{'case_clause', {1}}, any()}
  %% Aliased:
  %%    _140
  _142 = get_tuple_element _140, `1`

  %% Aliased:
  %%    _142
  _679 = is_nonempty_list _142
  br _679, ^679, ^409

679:
  %% Argument types:
  %%    _142 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _142
  _145 = get_hd _142

  %% Argument types:
  %%    
  %% Aliased:
  %%    _145
  _676 = is_tagged_tuple _145, `4`, `beam_except_SUITE`
  br _676, ^673, ^409

673:
  %% Argument types:
  %%    _145 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _145
  _148 = get_tuple_element _145, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _148
  _672 = bif:'=:=' _148, `bar`
  br _672, ^671, ^409

671:
  %% Argument types:
  %%    _145 => {'beam_except_SUITE', 'bar', any(), any()}
  %% Aliased:
  %%    _145
  _147 = get_tuple_element _145, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _147
  _670 = bif:'=:=' _147, `1`
  br _670, ^669, ^409

669:
  %% Argument types:
  %%    _145 => {'beam_except_SUITE', 'bar', 1, any()}
  %% Aliased:
  %%    _145
  _146 = get_tuple_element _145, `3`

  %% Aliased:
  %%    _146
  _668 = is_nonempty_list _146
  br _668, ^668, ^409

668:
  %% Argument types:
  %%    _146 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _146
  _151 = get_hd _146

  %% Argument types:
  %%    _146 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _146
  _150 = get_tl _146

  %% Argument types:
  %%    
  %% Aliased:
  %%    _150
  _667 = bif:'=:=' _150, `[{line,9}]`
  br _667, ^667, ^409

667:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _151
  _410 = bif:'=:=' _151, `{file,"fake.erl"}`
  br _410, ^410, ^409

410:
  %% beam_except_SUITE.erl:131
  %% Argument types:
  %%    
  Self = bif:self
  _414 = new_try_tag `'catch'`
  br _414, ^412, ^413

412:
  %% beam_except_SUITE.erl:133
  %% Result type:
  %%    none()
  _231 = call (`foo`/1), `any`

  %% Aliased:
  %%    _231
  _416 = succeeded:body _231
  br ^413

413:
  %% Unique:
  %%    _414
  _419 = landingpad `'catch'`, _414

  %% Aliased:
  %%    _419
  _417 = extract _419, `0`
  br ^411

411:
  %% Aliased:
  %%    _417
  %% Unique:
  %%    _414
  _17 = catch_end _414, _417

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _663 = is_tagged_tuple _17, `2`, `'EXIT'`
  br _663, ^660, ^422

660:
  %% Argument types:
  %%    _17 => {''EXIT'', any()}
  %% Aliased:
  %%    _17
  _152 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _152
  _657 = bif:is_tuple _152
  br _657, ^657, ^422

657:
  %% Argument types:
  %%    _152 => {...}
  %% Aliased:
  %%    _152
  _658 = bif:tuple_size _152

  %% Argument types:
  %%    _658 => 0..16777215
  %% Unique:
  %%    _658
  _659 = bif:'=:=' _658, `2`
  br _659, ^656, ^422

656:
  %% Argument types:
  %%    _152 => {any(), any()}
  %% Aliased:
  %%    _152
  _155 = get_tuple_element _152, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _155
  _653 = is_tagged_tuple _155, `2`, `strange`
  br _653, ^650, ^422

650:
  %% Argument types:
  %%    _152 => {any(), any()}
  %% Aliased:
  %%    _152
  _154 = get_tuple_element _152, `1`

  %% Aliased:
  %%    _154
  _649 = is_nonempty_list _154
  br _649, ^649, ^422

649:
  %% Argument types:
  %%    _154 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _154
  _159 = get_hd _154

  %% Argument types:
  %%    
  %% Aliased:
  %%    _159
  _646 = is_tagged_tuple _159, `4`, `beam_except_SUITE`
  br _646, ^643, ^422

643:
  %% Argument types:
  %%    _159 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _159
  _162 = get_tuple_element _159, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _642 = bif:'=:=' _162, `foo`
  br _642, ^641, ^422

641:
  %% Argument types:
  %%    _159 => {'beam_except_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _159
  _161 = get_tuple_element _159, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _161
  _640 = bif:'=:=' _161, `[any]`
  br _640, ^640, ^422

640:
  %% Argument types:
  %%    _159 => {'beam_except_SUITE', 'foo', nonempty_list('any'), any()}
  %% Aliased:
  %%    _159
  _160 = get_tuple_element _159, `3`

  %% Aliased:
  %%    _160
  _639 = is_nonempty_list _160
  br _639, ^639, ^422

639:
  %% Argument types:
  %%    _160 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _160
  _165 = get_hd _160

  %% Argument types:
  %%    _160 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _160
  _164 = get_tl _160

  %% Argument types:
  %%    
  %% Aliased:
  %%    _164
  _638 = bif:'=:=' _164, `[{line,14}]`
  br _638, ^638, ^422

638:
  %% Argument types:
  %%    _155 => {'strange', any()}
  %% Aliased:
  %%    _155
  _156 = get_tuple_element _155, `1`

  %% beam_except_SUITE.erl:132
  %% Argument types:
  %%    Self => pid()
  %% Aliased:
  %%    _156
  %% Unique:
  %%    Self
  _59 = bif:'=:=' _156, Self
  br _59, ^770, ^422

770:
  %% beam_except_SUITE.erl:132
  %% Argument types:
  %%    
  %% Aliased:
  %%    _165
  _60 = bif:'=:=' _165, `{file,"fake.erl"}`
  br _60, ^424, ^422

424:
  %% beam_except_SUITE.erl:135
  %% Result type:
  %%    {'ok', 'succeed', 1, 2}
  _167 = call (`foobar`/3), `succeed`, `1`, `2`

  %% Unique:
  %%    _167
  _425 = succeeded:body _167
  br _425, ^973, ^1

973:
  br ^986

986:
  _431 = new_try_tag `'catch'`
  br _431, ^429, ^430

429:
  %% beam_except_SUITE.erl:138
  %% Result type:
  %%    none()
  _233 = call (`foobar`/3), `[fail]`, `1`, `2`

  %% Aliased:
  %%    _233
  _433 = succeeded:body _233
  br ^430

430:
  %% Unique:
  %%    _431
  _436 = landingpad `'catch'`, _431

  %% Aliased:
  %%    _436
  _434 = extract _436, `0`
  br ^428

428:
  %% Aliased:
  %%    _434
  %% Unique:
  %%    _431
  _20 = catch_end _431, _434

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _632 = is_tagged_tuple _20, `2`, `'EXIT'`
  br _632, ^629, ^439

629:
  %% Argument types:
  %%    _20 => {''EXIT'', any()}
  %% Aliased:
  %%    _20
  _168 = get_tuple_element _20, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _168
  _626 = is_tagged_tuple _168, `2`, `function_clause`
  br _626, ^623, ^439

623:
  %% Argument types:
  %%    _168 => {'function_clause', any()}
  %% Aliased:
  %%    _168
  _170 = get_tuple_element _168, `1`

  %% Aliased:
  %%    _170
  _622 = is_nonempty_list _170
  br _622, ^622, ^439

622:
  %% Argument types:
  %%    _170 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _170
  _173 = get_hd _170

  %% Argument types:
  %%    
  %% Aliased:
  %%    _173
  _621 = bif:'=:=' _173, `{beam_except_SUITE,foobar,[[fail],1,2],[{file,"fake.erl"},{line,16}]}`
  br _621, ^974, ^439

974:
  br ^987

987:
  _443 = new_try_tag `'catch'`
  br _443, ^441, ^442

441:
  %% beam_except_SUITE.erl:141
  %% Result type:
  %%    none()
  _235 = call (`fake_function_clause1`/1), `{a,b}`

  %% Aliased:
  %%    _235
  _445 = succeeded:body _235
  br ^442

442:
  %% Unique:
  %%    _443
  _448 = landingpad `'catch'`, _443

  %% Aliased:
  %%    _448
  _446 = extract _448, `0`
  br ^440

440:
  %% Aliased:
  %%    _446
  %% Unique:
  %%    _443
  _22 = catch_end _443, _446

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _617 = is_tagged_tuple _22, `2`, `'EXIT'`
  br _617, ^614, ^451

614:
  %% Argument types:
  %%    _22 => {''EXIT'', any()}
  %% Aliased:
  %%    _22
  _174 = get_tuple_element _22, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _174
  _611 = is_tagged_tuple _174, `2`, `function_clause`
  br _611, ^608, ^451

608:
  %% Argument types:
  %%    _174 => {'function_clause', any()}
  %% Aliased:
  %%    _174
  _176 = get_tuple_element _174, `1`

  %% Aliased:
  %%    _176
  _607 = is_nonempty_list _176
  br _607, ^607, ^451

607:
  %% Argument types:
  %%    _176 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _176
  _179 = get_hd _176

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _604 = is_tagged_tuple _179, `4`, `beam_except_SUITE`
  br _604, ^601, ^451

601:
  %% Argument types:
  %%    _179 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _179
  _182 = get_tuple_element _179, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _182
  _600 = bif:'=:=' _182, `fake_function_clause1`
  br _600, ^599, ^451

599:
  %% Argument types:
  %%    _179 => {'beam_except_SUITE', 'fake_function_clause1', any(), any()}
  %% Aliased:
  %%    _179
  _181 = get_tuple_element _179, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _181
  _598 = bif:'=:=' _181, `[{a,b},42.0]`
  br _598, ^975, ^451

975:
  br ^988

988:
  _455 = new_try_tag `'catch'`
  br _455, ^453, ^454

453:
  %% beam_except_SUITE.erl:144
  %% Result type:
  %%    none()
  _237 = call (`fake_function_clause2`/2), `42`, `bad_tl`

  %% Aliased:
  %%    _237
  _457 = succeeded:body _237
  br ^454

454:
  %% Unique:
  %%    _455
  _460 = landingpad `'catch'`, _455

  %% Aliased:
  %%    _460
  _458 = extract _460, `0`
  br ^452

452:
  %% Aliased:
  %%    _458
  %% Unique:
  %%    _455
  _24 = catch_end _455, _458

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _594 = is_tagged_tuple _24, `2`, `'EXIT'`
  br _594, ^591, ^463

591:
  %% Argument types:
  %%    _24 => {''EXIT'', any()}
  %% Aliased:
  %%    _24
  _184 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _184
  _588 = is_tagged_tuple _184, `2`, `function_clause`
  br _588, ^585, ^463

585:
  %% Argument types:
  %%    _184 => {'function_clause', any()}
  %% Aliased:
  %%    _184
  _186 = get_tuple_element _184, `1`

  %% Aliased:
  %%    _186
  _584 = is_nonempty_list _186
  br _584, ^584, ^463

584:
  %% Argument types:
  %%    _186 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _186
  _189 = get_hd _186

  %% Argument types:
  %%    
  %% Aliased:
  %%    _189
  _581 = is_tagged_tuple _189, `4`, `beam_except_SUITE`
  br _581, ^578, ^463

578:
  %% Argument types:
  %%    _189 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _189
  _192 = get_tuple_element _189, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _192
  _577 = bif:'=:=' _192, `fake_function_clause2`
  br _577, ^576, ^463

576:
  %% Argument types:
  %%    _189 => {'beam_except_SUITE', 'fake_function_clause2', any(), any()}
  %% Aliased:
  %%    _189
  _191 = get_tuple_element _189, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _191
  _575 = bif:'=:=' _191, `[42|bad_tl]`
  br _575, ^976, ^463

976:
  br ^989

989:
  _467 = new_try_tag `'catch'`
  br _467, ^465, ^466

465:
  %% beam_except_SUITE.erl:147
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _26 = call (`id`/1), `[x,y]`

  %% Unique:
  %%    _26
  _469 = succeeded:body _26
  br _469, ^469, ^466

469:
  %% beam_except_SUITE.erl:147
  %% Result type:
  %%    none()
  %% Unique:
  %%    _26
  _239 = call (`fake_function_clause3`/2), `42`, _26

  %% Aliased:
  %%    _239
  _470 = succeeded:body _239
  br ^466

466:
  %% Unique:
  %%    _467
  _473 = landingpad `'catch'`, _467

  %% Aliased:
  %%    _473
  _471 = extract _473, `0`
  br ^464

464:
  %% Aliased:
  %%    _471
  %% Unique:
  %%    _467
  _27 = catch_end _467, _471

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _571 = is_tagged_tuple _27, `2`, `'EXIT'`
  br _571, ^568, ^476

568:
  %% Argument types:
  %%    _27 => {''EXIT'', any()}
  %% Aliased:
  %%    _27
  _194 = get_tuple_element _27, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _194
  _565 = is_tagged_tuple _194, `2`, `function_clause`
  br _565, ^562, ^476

562:
  %% Argument types:
  %%    _194 => {'function_clause', any()}
  %% Aliased:
  %%    _194
  _196 = get_tuple_element _194, `1`

  %% Aliased:
  %%    _196
  _561 = is_nonempty_list _196
  br _561, ^561, ^476

561:
  %% Argument types:
  %%    _196 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _196
  _199 = get_hd _196

  %% Argument types:
  %%    
  %% Aliased:
  %%    _199
  _558 = is_tagged_tuple _199, `4`, `beam_except_SUITE`
  br _558, ^555, ^476

555:
  %% Argument types:
  %%    _199 => {'beam_except_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _199
  _202 = get_tuple_element _199, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _202
  _554 = bif:'=:=' _202, `fake_function_clause3`
  br _554, ^553, ^476

553:
  %% Argument types:
  %%    _199 => {'beam_except_SUITE', 'fake_function_clause3', any(), any()}
  %% Aliased:
  %%    _199
  _201 = get_tuple_element _199, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _201
  _552 = bif:'=:=' _201, `[x,y]`
  br _552, ^977, ^476

977:
  br ^990

990:
  _480 = new_try_tag `'catch'`
  br _480, ^478, ^479

478:
  %% beam_except_SUITE.erl:149
  %% Result type:
  %%    none()
  _241 = call (`fake_function_clause4`/0)

  %% Aliased:
  %%    _241
  _482 = succeeded:body _241
  br ^479

479:
  %% Unique:
  %%    _480
  _485 = landingpad `'catch'`, _480

  %% Aliased:
  %%    _485
  _483 = extract _485, `0`
  br ^477

477:
  %% Aliased:
  %%    _483
  %% Unique:
  %%    _480
  _29 = catch_end _480, _483

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _548 = is_tagged_tuple _29, `2`, `'EXIT'`
  br _548, ^545, ^488

545:
  %% Argument types:
  %%    _29 => {''EXIT'', any()}
  %% Aliased:
  %%    _29
  _204 = get_tuple_element _29, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _204
  _542 = bif:is_tuple _204
  br _542, ^542, ^488

542:
  %% Argument types:
  %%    _204 => {...}
  %% Aliased:
  %%    _204
  _543 = bif:tuple_size _204

  %% Argument types:
  %%    _543 => 0..16777215
  %% Unique:
  %%    _543
  _544 = bif:'=:=' _543, `2`
  br _544, ^541, ^488

541:
  %% Argument types:
  %%    _204 => {any(), any()}
  %% Aliased:
  %%    _204
  _207 = get_tuple_element _204, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _207
  _540 = bif:'=:=' _207, `{function_clause,a,b,c}`
  br _540, ^978, ^488

978:
  br ^991

991:
  _492 = new_try_tag `'catch'`
  br _492, ^490, ^491

490:
  %% beam_except_SUITE.erl:151
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _31 = call (`id`/1), `42`

  %% Unique:
  %%    _31
  _494 = succeeded:body _31
  br _494, ^494, ^491

494:
  %% beam_except_SUITE.erl:151
  %% Result type:
  %%    none()
  %% Unique:
  %%    _31
  _243 = call (`coverage_1`/1), _31

  %% Aliased:
  %%    _243
  _495 = succeeded:body _243
  br ^491

491:
  %% Unique:
  %%    _492
  _498 = landingpad `'catch'`, _492

  %% Aliased:
  %%    _498
  _496 = extract _498, `0`
  br ^489

489:
  %% Aliased:
  %%    _496
  %% Unique:
  %%    _492
  _32 = catch_end _492, _496

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _536 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _536, ^533, ^501

533:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _208 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _208
  _530 = bif:is_tuple _208
  br _530, ^530, ^501

530:
  %% Argument types:
  %%    _208 => {...}
  %% Aliased:
  %%    _208
  _531 = bif:tuple_size _208

  %% Argument types:
  %%    _531 => 0..16777215
  %% Unique:
  %%    _531
  _532 = bif:'=:=' _531, `2`
  br _532, ^529, ^501

529:
  %% Argument types:
  %%    _208 => {any(), any()}
  %% Aliased:
  %%    _208
  _211 = get_tuple_element _208, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _211
  _528 = bif:'=:=' _211, `{badmatch,0.0}`
  br _528, ^979, ^501

979:
  br ^992

992:
  _505 = new_try_tag `'catch'`
  br _505, ^503, ^504

503:
  %% beam_except_SUITE.erl:152
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _34 = call (`id`/1), `a`

  %% Unique:
  %%    _34
  _507 = succeeded:body _34
  br _507, ^507, ^504

507:
  %% beam_except_SUITE.erl:152
  %% Result type:
  %%    none()
  %% Unique:
  %%    _34
  _245 = call (`coverage_1`/1), _34

  %% Aliased:
  %%    _245
  _508 = succeeded:body _245
  br ^504

504:
  %% Unique:
  %%    _505
  _511 = landingpad `'catch'`, _505

  %% Aliased:
  %%    _511
  _509 = extract _511, `0`
  br ^502

502:
  %% Aliased:
  %%    _509
  %% Unique:
  %%    _505
  _35 = catch_end _505, _509

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _524 = is_tagged_tuple _35, `2`, `'EXIT'`
  br _524, ^521, ^514

521:
  %% Argument types:
  %%    _35 => {''EXIT'', any()}
  %% Aliased:
  %%    _35
  _212 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _212
  _518 = is_tagged_tuple _212, `2`, `badarith`
  br _518, ^515, ^514

515:
  %% Result type:
  %%    'ok'
  ret `ok`

514:
  %% beam_except_SUITE.erl:152
  %% Aliased:
  %%    _35
  _246 = match_fail `badmatch`, _35

  %% Unique:
  %%    _246
  _527 = succeeded:body _246
  br ^1

501:
  %% beam_except_SUITE.erl:151
  %% Aliased:
  %%    _32
  _247 = match_fail `badmatch`, _32

  %% Unique:
  %%    _247
  _539 = succeeded:body _247
  br ^1

488:
  %% beam_except_SUITE.erl:149
  %% Aliased:
  %%    _29
  _248 = match_fail `badmatch`, _29

  %% Unique:
  %%    _248
  _551 = succeeded:body _248
  br ^1

476:
  %% beam_except_SUITE.erl:146
  %% Aliased:
  %%    _27
  _249 = match_fail `badmatch`, _27

  %% Unique:
  %%    _249
  _574 = succeeded:body _249
  br ^1

463:
  %% beam_except_SUITE.erl:143
  %% Aliased:
  %%    _24
  _250 = match_fail `badmatch`, _24

  %% Unique:
  %%    _250
  _597 = succeeded:body _250
  br ^1

451:
  %% beam_except_SUITE.erl:140
  %% Aliased:
  %%    _22
  _251 = match_fail `badmatch`, _22

  %% Unique:
  %%    _251
  _620 = succeeded:body _251
  br ^1

439:
  %% beam_except_SUITE.erl:136
  %% Aliased:
  %%    _20
  _252 = match_fail `badmatch`, _20

  %% Unique:
  %%    _252
  _635 = succeeded:body _252
  br ^1

422:
  %% beam_except_SUITE.erl:132
  %% Aliased:
  %%    _17
  _254 = match_fail `badmatch`, _17

  %% Unique:
  %%    _254
  _666 = succeeded:body _254
  br ^1

409:
  %% beam_except_SUITE.erl:128
  %% Aliased:
  %%    _14
  _255 = match_fail `badmatch`, _14

  %% Unique:
  %%    _255
  _691 = succeeded:body _255
  br ^1

352:
  %% beam_except_SUITE.erl:120
  %% Aliased:
  %%    _12
  _227 = match_fail `case_clause`, _12

  %% Unique:
  %%    _227
  _397 = succeeded:body _227
  br ^1

340:
  %% beam_except_SUITE.erl:115
  %% Aliased:
  %%    _10
  _256 = match_fail `badmatch`, _10

  %% Unique:
  %%    _256
  _714 = succeeded:body _256
  br ^1

302:
  %% beam_except_SUITE.erl:110
  %% Aliased:
  %%    _7
  _222 = match_fail `badmatch`, _7

  %% Unique:
  %%    _222
  _328 = succeeded:body _222
  br ^1

289:
  %% beam_except_SUITE.erl:101
  %% Aliased:
  %%    _5
  _257 = match_fail `badmatch`, _5

  %% Unique:
  %%    _257
  _739 = succeeded:body _257
  br ^1

276:
  %% beam_except_SUITE.erl:98
  %% Aliased:
  %%    _3
  _258 = match_fail `badmatch`, _3

  %% Unique:
  %%    _258
  _764 = succeeded:body _258
  br ^1

1:
  _260 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _260
}

%% beam_except_SUITE.erl:156
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
function `beam_except_SUITE`:`coverage_1`(_0) {
0:
  %% beam_except_SUITE.erl:158
  _13 = float:put `0.0`

  %% beam_except_SUITE.erl:158
  %% Argument types:
  %%    _0 => 'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  %% Unique:
  %%    _0
  _14 = float:convert _0

  %% Unique:
  %%    _14
  _19 = succeeded:body _14
  br _19, ^19, ^1

19:
  %% beam_except_SUITE.erl:158
  %% Unique:
  %%    _13, 
  %%    _14
  _15 = float:'/' _13, _14

  %% Unique:
  %%    _15
  _7 = succeeded:body _15
  br _7, ^16, ^1

16:
  %% Unique:
  %%    _15
  _3 = float:get _15

  %% beam_except_SUITE.erl:158
  %% Unique:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_except_SUITE.erl:160
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b'}
function `beam_except_SUITE`:`fake_function_clause1`(_0) {
0:
  %% beam_except_SUITE.erl:160
  _3 = call (`erlang`:`error`/2), `function_clause`, `[{a,b},42.0]`

  %% Aliased:
  %%    _3
  _6 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_except_SUITE.erl:162
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     'bad_tl'
function `beam_except_SUITE`:`fake_function_clause2`(_0, _1) {
0:
  %% beam_except_SUITE.erl:162
  _3 = call (`erlang`:`error`/2), `function_clause`, `[42|bad_tl]`

  %% Aliased:
  %%    _3
  _6 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_except_SUITE.erl:164
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
function `beam_except_SUITE`:`fake_function_clause3`(_0, _1) {
0:
  %% beam_except_SUITE.erl:164
  %% Unique:
  %%    _1
  _2 = call (`erlang`:`error`/2), `function_clause`, _1

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:166
%% Counter = 6
%% bs_ensure_opt: true
function `beam_except_SUITE`:`fake_function_clause4`() {
0:
  %% beam_except_SUITE.erl:166
  _2 = call (`erlang`:`error`/1), `{function_clause,a,b,c}`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:168
%% Counter = 13
%% bs_ensure_opt: true
function `beam_except_SUITE`:`binary_construction_allocation`(_0) {
0:
  %% beam_except_SUITE.erl:169
  %% Result type:
  %%    'ok'
  _2 = call (`do_binary_construction_allocation`/1), `"PUT"`

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^12, ^1

12:
  ret _2

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_except_SUITE.erl:172
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(80..85)
function `beam_except_SUITE`:`do_binary_construction_allocation`(_0) {
0:
  %% Argument types:
  %%    _0 => nonempty_list(80..85)
  %% Aliased:
  %%    _0
  _14 = bif:'=:=' _0, `"POST"`
  br _14, ^14, ^17

14:
  %% beam_except_SUITE.erl:177
  %% Argument types:
  %%    _0 => nonempty_list(80..84)
  %% Aliased:
  %%    _0
  %% Anno: #{unit => 8}
  _1 = bs_create_bin `binary`, `[1]`, `<<"BAD METHOD ">>`, `all`, `binary`, `[8,{segment,2}]`, _0, `all`

  %% Aliased:
  %%    _1
  _13 = succeeded:body _1
  br _13, ^13, ^1

13:
  %% Argument types:
  %%    _1 => bitstring(8)
  %%    _0 => nonempty_list(80..84)
  %% Aliased:
  %%    _0, 
  %%    _1
  _7 = put_tuple `error`, _1, _0

  %% beam_except_SUITE.erl:176
  %% Unique:
  %%    _7
  _8 = match_fail `badmatch`, _7

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9

17:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_except_SUITE.erl:181
%% Counter = 69
%% bs_ensure_opt: true
function `beam_except_SUITE`:`unfold_literals`(_0) {
0:
  %% beam_except_SUITE.erl:182
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _1 = call (`id`/1), `{a,b}`

  %% Unique:
  %%    _1
  _19 = succeeded:body _1
  br _19, ^19, ^1

19:
  %% beam_except_SUITE.erl:182
  %% Result type:
  %%    'a'
  %% Unique:
  %%    _1
  _8 = call (`do_unfold_literals`/2), `badarg`, _1

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^67, ^1

67:
  br ^68

68:
  _26 = new_try_tag `'catch'`
  br _26, ^24, ^25

24:
  %% beam_except_SUITE.erl:183
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  _3 = call (`id`/1), `a`

  %% Unique:
  %%    _3
  _28 = succeeded:body _3
  br _28, ^28, ^25

28:
  %% beam_except_SUITE.erl:183
  %% Result type:
  %%    'a'
  %% Unique:
  %%    _3
  _14 = call (`do_unfold_literals`/2), `badarg`, _3

  %% Unique:
  %%    _14
  _29 = succeeded:body _14
  br _29, ^29, ^25

29:
  br ^23

25:
  %% Unique:
  %%    _26
  _32 = landingpad `'catch'`, _26

  %% Aliased:
  %%    _32
  _30 = extract _32, `0`
  br ^23

23:
  _33 = phi { _30, ^25 }, { `a`, ^29 }

  %% Aliased:
  %%    _33
  %% Unique:
  %%    _26
  _4 = catch_end _26, _33

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _45 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _45, ^42, ^35

42:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _9 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _39 = is_tagged_tuple _9, `2`, `badarg`
  br _39, ^36, ^35

36:
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  %% beam_except_SUITE.erl:183
  %% Aliased:
  %%    _4
  _15 = match_fail `badmatch`, _4

  %% Unique:
  %%    _15
  _48 = succeeded:body _15
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_except_SUITE.erl:187
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'badarg'
%%    _1 =>
%%     'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
function `beam_except_SUITE`:`do_unfold_literals`(_0, _1) {
0:
  %% beam_except_SUITE.erl:192
  %% Argument types:
  %%    _1 => 'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  %% Unique:
  %%    _1
  _2 = bif:element `1`, _1

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'a'
  ret `a`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:194
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
function `beam_except_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    'a' | nonempty_list('x' | 'y') | 42 | {'a', 'b'} | bitstring(8)
  %% Unique:
  %%    _0
  ret _0
}

%% fake.erl:2
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 'y' | nonempty_list('a' | 'b' | 'c' | 'x')
function `beam_except_SUITE`:`fc`(_0) {
0:
  %% Argument types:
  %%    _0 => 'a' | 'y' | nonempty_list('a' | 'b' | 'c' | 'x')
  %% Unique:
  %%    _0
  _10 = bif:'=:=' _0, `a`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% fake.erl:4
  %% Argument types:
  %%    _0 => 'y' | nonempty_list('a' | 'b' | 'c' | 'x')
  %% Unique:
  %%    _0
  _1 = bif:length _0

  %% Unique:
  %%    _1
  _13 = succeeded:guard _1
  br _13, ^13, ^11

13:
  %% Argument types:
  %%    _1 => 0..288230376151711743
  %% Unique:
  %%    _1
  _14 = bif:'>' _1, `2`
  br _14, ^14, ^11

14:
  %% Argument types:
  %%    _0 => nonempty_list('a' | 'b' | 'c' | 'x')
  %% Unique:
  %%    _0
  _3 = put_list _0, `[]`

  %% fake.erl:6
  %% Unique:
  %%    _3
  _4 = call (`erlang`:`error`/2), `function_clause`, _3

  %% Aliased:
  %%    _4
  _15 = succeeded:body _4
  br ^1

11:
  %% fake.erl:2
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-fc/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% fake.erl:8
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'x' | 0
function `beam_except_SUITE`:`bar`(_0) {
0:
  %% fake.erl:9
  %% Argument types:
  %%    _0 => 'x' | 0
  %% Unique:
  %%    _0
  _1 = bif:'+' _0, `1`

  %% Unique:
  %%    _1
  _6 = succeeded:body _1
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    _1 => 1
  %% Unique:
  %%    _1
  _2 = put_tuple _1

  %% fake.erl:9
  %% Unique:
  %%    _2
  _3 = match_fail `case_clause`, _2

  %% Unique:
  %%    _3
  _7 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% fake.erl:13
%% Counter = 9
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'any'
function `beam_except_SUITE`:`foo`(_0) {
0:
  %% fake.erl:14
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _3 = put_tuple `strange`, _1

  %% fake.erl:14
  %% Unique:
  %%    _3
  _4 = call (`erlang`:`error`/2), _3, `[any]`

  %% Aliased:
  %%    _4
  _7 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% fake.erl:16
%% Counter = 13
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'succeed' | nonempty_list('fail')
%%    _1 =>
%%     1
%%    _2 =>
%%     2
function `beam_except_SUITE`:`foobar`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => 'succeed' | nonempty_list('fail')
  %% Unique:
  %%    _0
  _11 = bif:is_atom _0
  br _11, ^11, ^10

11:
  %% Result type:
  %%    {'ok', 'succeed', 1, 2}
  ret `{ok,succeed,1,2}`

10:
  %% fake.erl:16
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-foobar/3-',3}}
  _7 = match_fail `function_clause`, _0, _1, _2

  %% Unique:
  %%    _7
  _12 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_except_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_except_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_except_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_except_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_except_SUITE.erl:65
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     0
function `beam_except_SUITE`:`'-place/1-lc$^0/1-0-'`(_3) {
0:
  %% beam_except_SUITE.erl:65
  _17 = call (`erlang`:`error`/1), `{bad_generator,0}`

  %% Aliased:
  %%    _17
  _25 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}
