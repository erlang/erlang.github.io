module beam_validator_SUITE.
exports [{accessing_tags,1},
         {aliased_types,1},
         {all,0},
         {bad_bin_match,1},
         {bad_bin_unit,1},
         {bad_catch_try,1},
         {bad_dsetel,1},
         {bad_try_catch_nesting,1},
         {bad_tuples,1},
         {bif_inference,1},
         {branch_to_try_handler,1},
         {bs_saved_position_units,1},
         {call_last,1},
         {call_without_stack,1},
         {compiler_bug,1},
         {cons_guard,1},
         {container_performance,1},
         {cover_bin_opt,1},
         {dead_code,1},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {failing_gc_guard_bif,1},
         {freg_range,1},
         {freg_uninit,1},
         {groups,0},
         {illegal_instruction,1},
         {inert_update_type,1},
         {infer_dead_value,1},
         {infer_on_eq,1},
         {infer_on_ne,1},
         {infer_relops,1},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {map_field_lists,1},
         {merge_undefined,1},
         {missing_return_type,1},
         {module_info,0},
         {module_info,1},
         {no_exception_in_catch,1},
         {not_equal_inference,1},
         {overwrite_catchtag,1},
         {overwrite_trytag,1},
         {parent_container,1},
         {range_inference,1},
         {receive_marker,1},
         {receive_stacked,1},
         {safe_instructions,1},
         {singleton_inference,1},
         {stack,1},
         {state_after_fault_in_catch,1},
         {stupid_but_valid,1},
         {suite,0},
         {type_conflict,1},
         {undef_label,1},
         {uninit,1},
         {val_dsetel,1},
         {will_succeed,1},
         {xrange,1},
         {yrange,1}].
attributes [].

%% beam_validator_SUITE.erl:51
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% beam_validator_SUITE.erl:51
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% beam_validator_SUITE.erl:51
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    maybe_improper_list(any(), any())
  %% Aliased:
  %%    _1
  ret _1

10:
  %% beam_validator_SUITE.erl:51
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-init_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:54
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% beam_validator_SUITE.erl:54
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% beam_validator_SUITE.erl:54
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% beam_validator_SUITE.erl:54
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-end_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:57
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 10}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,10}}]`
}

%% beam_validator_SUITE.erl:61
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_validator_SUITE.erl:64
%% Counter = 7
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`groups`() {
0:
  %% beam_validator_SUITE.erl:65
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[compiler_bug,stupid_but_valid,xrange,yrange,stack,call_last,merge_undefined,
  uninit,dead_code,overwrite_catchtag,overwrite_trytag,accessing_tags,
  bad_catch_try,cons_guard,freg_range,freg_uninit,bad_bin_match,bad_dsetel,
  state_after_fault_in_catch,no_exception_in_catch,undef_label,
  illegal_instruction,failing_gc_guard_bif,map_field_lists,cover_bin_opt,
  val_dsetel,bad_tuples,bad_try_catch_nesting,receive_stacked,aliased_types,
  type_conflict,infer_on_eq,infer_dead_value,infer_on_ne,
  branch_to_try_handler,call_without_stack,receive_marker,safe_instructions,
  missing_return_type,will_succeed,bs_saved_position_units,parent_container,
  container_performance,infer_relops,not_equal_inference,bad_bin_unit,
  singleton_inference,inert_update_type,range_inference,bif_inference]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_validator_SUITE.erl:87
%% Counter = 6
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_validator_SUITE.erl:88
  _2 = call (`test_lib`:`recompile`/1), `beam_validator_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:91
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:94
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_validator_SUITE.erl:97
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_validator_SUITE.erl:100
%% Counter = 63
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`compiler_bug`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _27 = bif:is_list _0
  br _27, ^27, ^26

27:
  %% beam_validator_SUITE.erl:103
  %% Aliased:
  %%    _0
  Data = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    Data
  _28 = succeeded:body Data
  br _28, ^28, ^1

28:
  %% beam_validator_SUITE.erl:104
  %% Aliased:
  %%    Data
  File = call (`filename`:`join`/2), Data, `"compiler_bug"`

  %% Aliased:
  %%    File
  _29 = succeeded:body File
  br _29, ^29, ^1

29:
  %% beam_validator_SUITE.erl:105
  %% Aliased:
  %%    File
  _7 = call (`compile`:`file`/2), File, `[from_asm,report_errors,time]`

  %% Aliased:
  %%    _7
  _30 = succeeded:body _7
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _60 = bif:'=:=' _7, `error`
  br _60, ^59, ^32

59:
  %% beam_validator_SUITE.erl:112
  %% Aliased:
  %%    File
  _8 = call (`compile`:`file`/2), File, `[from_asm,return_errors,time]`

  %% Aliased:
  %%    _8
  _33 = succeeded:body _8
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _55 = is_tagged_tuple _8, `3`, `error`
  br _55, ^52, ^35

52:
  %% Argument types:
  %%    _8 => {'error', any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _10
  _51 = is_nonempty_list _10
  br _51, ^51, ^35

51:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _13 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _12 = get_tl _10

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _48 = bif:is_tuple _13
  br _48, ^48, ^35

48:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _49 = bif:tuple_size _13

  %% Argument types:
  %%    _49 => 0..16777215
  %% Unique:
  %%    _49
  _50 = bif:'=:=' _49, `2`
  br _50, ^47, ^35

47:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _46 = bif:'=:=' _15, `"compiler_bug"`
  br _46, ^46, ^35

46:
  %% Argument types:
  %%    _13 => {nonempty_list(95..117), any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Aliased:
  %%    _14
  _45 = is_nonempty_list _14
  br _45, ^45, ^35

45:
  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _17 = get_hd _14

  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _16 = get_tl _14

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _42 = bif:is_tuple _17
  br _42, ^42, ^35

42:
  %% Argument types:
  %%    _17 => {...}
  %% Aliased:
  %%    _17
  _43 = bif:tuple_size _17

  %% Argument types:
  %%    _43 => 0..16777215
  %% Unique:
  %%    _43
  _44 = bif:'=:=' _43, `3`
  br _44, ^41, ^35

41:
  %% Argument types:
  %%    _17 => {any(), any(), any()}
  %% Aliased:
  %%    _17
  _19 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _40 = bif:'=:=' _19, `beam_validator`
  br _40, ^39, ^35

39:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _38 = bif:'=:=' _16, `[]`
  br _38, ^38, ^35

38:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _37 = bif:'=:=' _12, `[]`
  br _37, ^37, ^35

37:
  %% Argument types:
  %%    _8 => {'error', any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _36 = bif:'=:=' _9, `[]`
  br _36, ^36, ^35

36:
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  %% beam_validator_SUITE.erl:109
  %% Aliased:
  %%    _8
  _21 = match_fail `badmatch`, _8

  %% Unique:
  %%    _21
  _58 = succeeded:body _21
  br ^1

32:
  %% beam_validator_SUITE.erl:105
  %% Aliased:
  %%    _7
  _22 = match_fail `badmatch`, _7

  %% Unique:
  %%    _22
  _61 = succeeded:body _22
  br ^1

26:
  %% beam_validator_SUITE.erl:100
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-compiler_bug/1-',1}}
  _23 = match_fail `function_clause`, _0

  %% Unique:
  %%    _23
  _62 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_validator_SUITE.erl:116
%% Counter = 61
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`stupid_but_valid`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _23 = bif:is_list _0
  br _23, ^59, ^22

59:
  br ^60

60:
  _28 = new_try_tag `'try'`
  br _28, ^27, ^25

27:
  %% beam_validator_SUITE.erl:118
  _2 = update_tuple `nisse`, `6`, `value`

  %% Unique:
  %%    _2
  _29 = succeeded:body _2
  br ^25

25:
  %% Unique:
  %%    _28
  _39 = landingpad `'try'`, _28

  %% Aliased:
  %%    _39
  _7 = extract _39, `0`

  %% Aliased:
  %%    _39
  _6 = extract _39, `1`

  %% Aliased:
  %%    _39
  _5 = extract _39, `2`

  %% Unique:
  %%    _28
  _40 = kill_try_tag _28

  %% Argument types:
  %%    _7 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _7
  _37 = bif:'=:=' _7, `error`
  br _37, ^36, ^33

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _35 = bif:'=:=' _6, `badarg`
  br _35, ^26, ^33

26:
  %% Result type:
  %%    'ok'
  ret `ok`

33:
  %% Aliased:
  %%    _5, 
  %%    _6
  _18 = resume _5, _6

  %% Unique:
  %%    _18
  _38 = succeeded:body _18
  br ^1

22:
  %% beam_validator_SUITE.erl:116
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-stupid_but_valid/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _42 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_validator_SUITE.erl:125
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`xrange`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:126
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `xrange`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,sum_1,2},{{bif,'+',{f,0},[{x,-1},{x,1}],{x,0}},4,{bad_register,{x,-1}}}},
  {{t,sum_2,2},{{bif,'+',{f,0},[{x,0},{x,1023}],{x,0}},4,limit}},
  {{t,sum_3,2},{{bif,'+',{f,0},[{x,0},{x,1}],{x,-1}},4,{bad_register,{x,-1}}}},
  {{t,sum_4,2},{{bif,'+',{f,0},[{x,0},{x,1}],{x,1023}},4,limit}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:127
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:125
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-xrange/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:139
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`yrange`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:140
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `yrange`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,sum_1,2},{{move,{x,1},{y,-1}},5,{bad_register,{y,-1}}}},
  {{t,sum_2,2},{{bif,'+',{f,0},[{x,0},{y,1024}],{x,0}},7,limit}},
  {{t,sum_3,2},{{move,{x,1},{y,1024}},5,limit}},
  {{t,sum_4,2},{{move,{x,1},{y,-1}},5,{bad_register,{y,-1}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:141
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:139
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-yrange/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:154
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`stack`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:155
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `stack`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,a,2},{return,9,{stack_frame,2}}},
  {{t,b,2},{{deallocate,2},4,{allocated,none}}},
  {{t,bad_1,0},{{allocate,2,10},4,{{x,9},not_live}}},
  {{t,bad_2,0},{{move,{y,0},{x,0}},6,{unassigned,{y,0}}}},
  {{t,c,2},{{deallocate,2},10,{allocated,none}}},
  {{t,d,2},{{allocate,2,2},5,{existing_stack_frame,{size,2}}}},
  {{t,e,2},{{deallocate,5},6,{allocated,2}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:156
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:154
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-stack/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:166
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`call_last`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:167
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `call_last`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,a,1},{{call_last,1,{f,8},2},9,{allocated,1}}},
  {{t,b,1},{{call_ext_last,2,{extfunc,lists,seq,2},2},10,{allocated,1}}},
  {{t,baz,2},{{call_ext_only,2,{extfunc,erlang,put,2}},5,{allocated,0}}},
  {{t,biz,2},{{call_only,2,{f,10}},5,{allocated,0}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:168
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:166
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-call_last/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:178
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`call_without_stack`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:179
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `call_without_stack`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,local,2},{{call,2,{f,2}},4,{allocated,none}}},
  {{t,remote,2},{{call_ext,2,{extfunc,lists,seq,2}},4,{allocated,none}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:180
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:178
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-call_without_stack/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:186
%% Counter = 56
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`merge_undefined`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:is_list _0
  br _22, ^22, ^21

22:
  %% beam_validator_SUITE.erl:187
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `merge_undefined`, _0

  %% Aliased:
  %%    _4
  _23 = succeeded:body _4
  br _23, ^23, ^1

23:
  %% Aliased:
  %%    _4
  _53 = is_nonempty_list _4
  br _53, ^53, ^25

53:
  %% Argument types:
  %%    _4 => nonempty_list(any())
  %% Aliased:
  %%    _4
  _6 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_list(any())
  %% Aliased:
  %%    _4
  _5 = get_tl _4

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _50 = bif:is_tuple _6
  br _50, ^50, ^25

50:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _51 = bif:tuple_size _6

  %% Argument types:
  %%    _51 => 0..16777215
  %% Unique:
  %%    _51
  _52 = bif:'=:=' _51, `2`
  br _52, ^49, ^25

49:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _8 = get_tuple_element _6, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _48 = bif:'=:=' _8, `{t,undecided,2}`
  br _48, ^48, ^25

48:
  %% Argument types:
  %%    _6 => {{'t', 'undecided', 2}, any()}
  %% Aliased:
  %%    _6
  _7 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _45 = bif:is_tuple _7
  br _45, ^45, ^25

45:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _46 = bif:tuple_size _7

  %% Argument types:
  %%    _46 => 0..16777215
  %% Unique:
  %%    _46
  _47 = bif:'=:=' _46, `3`
  br _47, ^44, ^25

44:
  %% Argument types:
  %%    _7 => {any(), any(), any()}
  %% Aliased:
  %%    _7
  _11 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _43 = bif:'=:=' _11, `{label,11}`
  br _43, ^43, ^25

43:
  %% Argument types:
  %%    _7 => {{'label', 11}, any(), any()}
  %% Aliased:
  %%    _7
  _10 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _42 = bif:'=:=' _10, `19`
  br _42, ^41, ^25

41:
  %% Argument types:
  %%    _7 => {{'label', 11}, 19, any()}
  %% Aliased:
  %%    _7
  _9 = get_tuple_element _7, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _38 = is_tagged_tuple _9, `3`, `unsafe_stack`
  br _38, ^35, ^25

35:
  %% Argument types:
  %%    _9 => {'unsafe_stack', any(), any()}
  %% Aliased:
  %%    _9
  _13 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _34 = bif:'=:=' _13, `{y,1}`
  br _34, ^34, ^25

34:
  %% Argument types:
  %%    _9 => {'unsafe_stack', {'y', 1}, any()}
  %% Aliased:
  %%    _9
  _12 = get_tuple_element _9, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _33 = bif:is_map _12
  br _33, ^33, ^25

33:
  %% Argument types:
  %%    _12 => map()
  %% Aliased:
  %%    _12
  _16 = get_map_element _12, `{y,0}`

  %% Aliased:
  %%    _16
  _26 = succeeded:guard _16
  br _26, ^26, ^25

26:
  %% Argument types:
  %%    _12 => map()
  %% Aliased:
  %%    _12
  _15 = get_map_element _12, `{y,1}`

  %% Aliased:
  %%    _15
  _27 = succeeded:guard _15
  br _27, ^27, ^25

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _32 = bif:'=:=' _16, `uninitialized`
  br _32, ^31, ^25

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _30 = bif:'=:=' _15, `uninitialized`
  br _30, ^29, ^25

29:
  %% Argument types:
  %%    _5 => list(any())
  %% Aliased:
  %%    _5
  _28 = bif:'=:=' _5, `[{{t,uninitialized,2},
   {{call_ext,2,{extfunc,io,format,2}},17,{uninitialized_reg,{y,1}}}}]`
  br _28, ^28, ^25

28:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% beam_validator_SUITE.erl:188
  %% Aliased:
  %%    _4
  _17 = match_fail `badmatch`, _4

  %% Unique:
  %%    _17
  _54 = succeeded:body _17
  br ^1

21:
  %% beam_validator_SUITE.erl:186
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-merge_undefined/1-',1}}
  _18 = match_fail `function_clause`, _0

  %% Unique:
  %%    _18
  _55 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_validator_SUITE.erl:200
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`uninit`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:201
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `uninit`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,sum_1,2},{{move,{y,0},{x,0}},5,{uninitialized_reg,{y,0}}}},
  {{t,sum_2,2},{{call,1,{f,8}},5,{uninitialized_reg,{y,0}}}},
  {{t,sum_3,2},{{bif,'+',{f,0},[{x,0},{y,0}],{x,0}},7,{unassigned,{y,0}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:202
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:200
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-uninit/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:212
%% Counter = 16
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`dead_code`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% beam_validator_SUITE.erl:213
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`do_val`/2), `dead_code`, _0

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _13 = bif:'=:=' _3, `[]`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_validator_SUITE.erl:213
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _14 = succeeded:body _4
  br ^1

8:
  %% beam_validator_SUITE.erl:212
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-dead_code/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:216
%% Counter = 46
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`overwrite_catchtag`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_list _0
  br _20, ^20, ^19

20:
  %% beam_validator_SUITE.erl:217
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _5 = call (`do_val`/2), `overwrite_catchtag`, _0

  %% Aliased:
  %%    _5
  _21 = succeeded:body _5
  br _21, ^21, ^1

21:
  %% Aliased:
  %%    _5
  _43 = is_nonempty_list _5
  br _43, ^43, ^23

43:
  %% Argument types:
  %%    _5 => nonempty_list(any())
  %% Aliased:
  %%    _5
  _7 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_list(any())
  %% Aliased:
  %%    _5
  _6 = get_tl _5

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _40 = bif:is_tuple _7
  br _40, ^40, ^23

40:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _41 = bif:tuple_size _7

  %% Argument types:
  %%    _41 => 0..16777215
  %% Unique:
  %%    _41
  _42 = bif:'=:=' _41, `2`
  br _42, ^39, ^23

39:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _9 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _38 = bif:'=:=' _9, `{overwrite_catchtag,foo,1}`
  br _38, ^38, ^23

38:
  %% Argument types:
  %%    _7 => {{'overwrite_catchtag', 'foo', 1}, any()}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _35 = bif:is_tuple _8
  br _35, ^35, ^23

35:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _36 = bif:tuple_size _8

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `3`
  br _37, ^34, ^23

34:
  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _12 = get_tuple_element _8, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _33 = bif:'=:=' _12, `{move,{x,0},{y,0}}`
  br _33, ^33, ^23

33:
  %% Argument types:
  %%    _8 => {{'move', {'x', 0}, {'y', 0}}, any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _32 = bif:'=:=' _11, `6`
  br _32, ^31, ^23

31:
  %% Argument types:
  %%    _8 => {{'move', {'x', 0}, {'y', 0}}, 6, any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _28 = is_tagged_tuple _10, `2`, `catchtag`
  br _28, ^25, ^23

25:
  %% Argument types:
  %%    _6 => list(any())
  %% Aliased:
  %%    _6
  _24 = bif:'=:=' _6, `[]`
  br _24, ^24, ^23

24:
  %% Result type:
  %%    'ok'
  ret `ok`

23:
  %% beam_validator_SUITE.erl:218
  %% Aliased:
  %%    _5
  _15 = match_fail `badmatch`, _5

  %% Unique:
  %%    _15
  _44 = succeeded:body _15
  br ^1

19:
  %% beam_validator_SUITE.erl:216
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-overwrite_catchtag/1-',1}}
  _16 = match_fail `function_clause`, _0

  %% Unique:
  %%    _16
  _45 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:222
%% Counter = 46
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`overwrite_trytag`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_list _0
  br _20, ^20, ^19

20:
  %% beam_validator_SUITE.erl:223
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _5 = call (`do_val`/2), `overwrite_trytag`, _0

  %% Aliased:
  %%    _5
  _21 = succeeded:body _5
  br _21, ^21, ^1

21:
  %% Aliased:
  %%    _5
  _43 = is_nonempty_list _5
  br _43, ^43, ^23

43:
  %% Argument types:
  %%    _5 => nonempty_list(any())
  %% Aliased:
  %%    _5
  _7 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_list(any())
  %% Aliased:
  %%    _5
  _6 = get_tl _5

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _40 = bif:is_tuple _7
  br _40, ^40, ^23

40:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _41 = bif:tuple_size _7

  %% Argument types:
  %%    _41 => 0..16777215
  %% Unique:
  %%    _41
  _42 = bif:'=:=' _41, `2`
  br _42, ^39, ^23

39:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _9 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _38 = bif:'=:=' _9, `{overwrite_trytag,foo,1}`
  br _38, ^38, ^23

38:
  %% Argument types:
  %%    _7 => {{'overwrite_trytag', 'foo', 1}, any()}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _35 = bif:is_tuple _8
  br _35, ^35, ^23

35:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _36 = bif:tuple_size _8

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `3`
  br _37, ^34, ^23

34:
  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _12 = get_tuple_element _8, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _33 = bif:'=:=' _12, `{init_yregs,{list,[{y,2}]}}`
  br _33, ^33, ^23

33:
  %% Argument types:
  %%    _8 => {{'init_yregs', {'list', nonempty_list({'y', 2})}}, any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _32 = bif:'=:=' _11, `9`
  br _32, ^31, ^23

31:
  %% Argument types:
  %%    _8 => {{'init_yregs', {'list', nonempty_list({'y', 2})}}, 9, any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _28 = is_tagged_tuple _10, `2`, `trytag`
  br _28, ^25, ^23

25:
  %% Argument types:
  %%    _6 => list(any())
  %% Aliased:
  %%    _6
  _24 = bif:'=:=' _6, `[]`
  br _24, ^24, ^23

24:
  %% Result type:
  %%    'ok'
  ret `ok`

23:
  %% beam_validator_SUITE.erl:224
  %% Aliased:
  %%    _5
  _15 = match_fail `badmatch`, _5

  %% Unique:
  %%    _15
  _44 = succeeded:body _15
  br ^1

19:
  %% beam_validator_SUITE.erl:222
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-overwrite_trytag/1-',1}}
  _16 = match_fail `function_clause`, _0

  %% Unique:
  %%    _16
  _45 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:228
%% Counter = 75
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`accessing_tags`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _30 = bif:is_list _0
  br _30, ^30, ^29

30:
  %% beam_validator_SUITE.erl:229
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _6 = call (`do_val`/2), `accessing_tags`, _0

  %% Aliased:
  %%    _6
  _31 = succeeded:body _6
  br _31, ^31, ^1

31:
  %% Aliased:
  %%    _6
  _72 = is_nonempty_list _6
  br _72, ^72, ^33

72:
  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _8 = get_hd _6

  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _7 = get_tl _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _69 = bif:is_tuple _8
  br _69, ^69, ^33

69:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _70 = bif:tuple_size _8

  %% Argument types:
  %%    _70 => 0..16777215
  %% Unique:
  %%    _70
  _71 = bif:'=:=' _70, `2`
  br _71, ^68, ^33

68:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _67 = bif:'=:=' _10, `{accessing_tags,bar,1}`
  br _67, ^67, ^33

67:
  %% Argument types:
  %%    _8 => {{'accessing_tags', 'bar', 1}, any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _64 = bif:is_tuple _9
  br _64, ^64, ^33

64:
  %% Argument types:
  %%    _9 => {...}
  %% Aliased:
  %%    _9
  _65 = bif:tuple_size _9

  %% Argument types:
  %%    _65 => 0..16777215
  %% Unique:
  %%    _65
  _66 = bif:'=:=' _65, `3`
  br _66, ^63, ^33

63:
  %% Argument types:
  %%    _9 => {any(), any(), any()}
  %% Aliased:
  %%    _9
  _13 = get_tuple_element _9, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _62 = bif:'=:=' _13, `{move,{y,0},{x,0}}`
  br _62, ^62, ^33

62:
  %% Argument types:
  %%    _9 => {{'move', {'y', 0}, {'x', 0}}, any(), any()}
  %% Aliased:
  %%    _9
  _12 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _61 = bif:'=:=' _12, `6`
  br _61, ^60, ^33

60:
  %% Argument types:
  %%    _9 => {{'move', {'y', 0}, {'x', 0}}, 6, any()}
  %% Aliased:
  %%    _9
  _11 = get_tuple_element _9, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _57 = is_tagged_tuple _11, `2`, `trytag`
  br _57, ^54, ^33

54:
  %% Aliased:
  %%    _7
  _53 = is_nonempty_list _7
  br _53, ^53, ^33

53:
  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _17 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _16 = get_tl _7

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _50 = bif:is_tuple _17
  br _50, ^50, ^33

50:
  %% Argument types:
  %%    _17 => {...}
  %% Aliased:
  %%    _17
  _51 = bif:tuple_size _17

  %% Argument types:
  %%    _51 => 0..16777215
  %% Unique:
  %%    _51
  _52 = bif:'=:=' _51, `2`
  br _52, ^49, ^33

49:
  %% Argument types:
  %%    _17 => {any(), any()}
  %% Aliased:
  %%    _17
  _19 = get_tuple_element _17, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _48 = bif:'=:=' _19, `{accessing_tags,foo,1}`
  br _48, ^48, ^33

48:
  %% Argument types:
  %%    _17 => {{'accessing_tags', 'foo', 1}, any()}
  %% Aliased:
  %%    _17
  _18 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _45 = bif:is_tuple _18
  br _45, ^45, ^33

45:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _46 = bif:tuple_size _18

  %% Argument types:
  %%    _46 => 0..16777215
  %% Unique:
  %%    _46
  _47 = bif:'=:=' _46, `3`
  br _47, ^44, ^33

44:
  %% Argument types:
  %%    _18 => {any(), any(), any()}
  %% Aliased:
  %%    _18
  _22 = get_tuple_element _18, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _43 = bif:'=:=' _22, `{move,{y,0},{x,0}}`
  br _43, ^43, ^33

43:
  %% Argument types:
  %%    _18 => {{'move', {'y', 0}, {'x', 0}}, any(), any()}
  %% Aliased:
  %%    _18
  _21 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _42 = bif:'=:=' _21, `6`
  br _42, ^41, ^33

41:
  %% Argument types:
  %%    _18 => {{'move', {'y', 0}, {'x', 0}}, 6, any()}
  %% Aliased:
  %%    _18
  _20 = get_tuple_element _18, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _38 = is_tagged_tuple _20, `2`, `catchtag`
  br _38, ^35, ^33

35:
  %% Argument types:
  %%    _16 => list(any())
  %% Aliased:
  %%    _16
  _34 = bif:'=:=' _16, `[]`
  br _34, ^34, ^33

34:
  %% Result type:
  %%    'ok'
  ret `ok`

33:
  %% beam_validator_SUITE.erl:230
  %% Aliased:
  %%    _6
  _25 = match_fail `badmatch`, _6

  %% Unique:
  %%    _25
  _73 = succeeded:body _25
  br ^1

29:
  %% beam_validator_SUITE.erl:228
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-accessing_tags/1-',1}}
  _26 = match_fail `function_clause`, _0

  %% Unique:
  %%    _26
  _74 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_validator_SUITE.erl:236
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_catch_try`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:237
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `bad_catch_try`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{bad_catch_try,bad_1,1},
   {{'catch',{x,0},{f,3}},5,{invalid_tag_register,{x,0}}}},
  {{bad_catch_try,bad_2,1},{{catch_end,{x,9}},8,{invalid_tag_register,{x,9}}}},
  {{bad_catch_try,bad_3,1},
   {{catch_end,{y,1}},9,{invalid_tag,{y,1},{t_atom,[kalle]}}}},
  {{bad_catch_try,bad_4,1},
   {{'try',{x,0},{f,15}},6,{invalid_tag_register,{x,0}}}},
  {{bad_catch_try,bad_5,1},{{try_case,{y,1}},13,{invalid_tag,{y,1},any}}},
  {{bad_catch_try,bad_6,1},
   {{move,{integer,1},{y,1}},8,{invalid_store,{y,1}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:238
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:236
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_catch_try/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:255
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`cons_guard`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:256
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `cons`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{cons,foo,1},
   {{get_list,{x,0},{x,1},{x,2}},
    5,
    {bad_type,{needed,{t_cons,any,any}},{actual,any}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:257
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:255
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cons_guard/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:263
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`freg_range`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:264
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `freg_range`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,sum_1,2},
   {{bif,fadd,{f,0},[{fr,-1},{fr,1}],{fr,0}},4,{bad_source,{fr,-1}}}},
  {{t,sum_2,2},
   {{bif,fadd,{f,0},[{fr,0},{fr,1024}],{fr,0}},
    5,
    {uninitialized_reg,{fr,1024}}}},
  {{t,sum_3,2},
   {{bif,fadd,{f,0},[{fr,0},{fr,1}],{fr,-1}},6,{bad_register,{fr,-1}}}},
  {{t,sum_4,2},{{bif,fadd,{f,0},[{fr,0},{fr,1}],{fr,1024}},6,limit}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:265
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:263
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-freg_range/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:283
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`freg_uninit`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:284
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `freg_uninit`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,sum_1,2},
   {{bif,fadd,{f,0},[{fr,0},{fr,1}],{fr,0}},5,{uninitialized_reg,{fr,1}}}},
  {{t,sum_2,2},
   {{bif,fadd,{f,0},[{fr,0},{fr,1}],{fr,0}},8,{uninitialized_reg,{fr,0}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:285
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:283
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-freg_uninit/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:295
%% Counter = 16
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_bin_match`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% beam_validator_SUITE.erl:297
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`do_val`/2), `bad_bin_match`, _0

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _13 = bif:'=:=' _3, `[{{t,t,1},{return,5,{match_context,{x,0}}}}]`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_validator_SUITE.erl:296
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _14 = succeeded:body _4
  br ^1

8:
  %% beam_validator_SUITE.erl:295
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_bin_match/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:300
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_dsetel`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:301
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `bad_dsetel`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{t,t,1},
   {{set_tuple_element,{x,1},{x,0},1},
    17,illegal_context_for_set_tuple_element}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:302
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:300
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_dsetel/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:308
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`state_after_fault_in_catch`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:309
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `state_after_fault_in_catch`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{state_after_fault_in_catch,badmatch,1},
   {{move,{x,1},{x,0}},9,{uninitialized_reg,{x,1}}}},
  {{state_after_fault_in_catch,case_end,1},
   {{move,{x,1},{x,0}},9,{uninitialized_reg,{x,1}}}},
  {{state_after_fault_in_catch,if_end,1},
   {{move,{x,1},{x,0}},9,{uninitialized_reg,{x,1}}}},
  {{t,foo,1},{{move,{x,1},{x,0}},10,{uninitialized_reg,{x,1}}}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:310
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:308
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-state_after_fault_in_catch/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:320
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`no_exception_in_catch`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:321
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `no_exception_in_catch`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[{{no_exception_in_catch,nested_of_1,4},
   {{try_case_end,{x,0}},152,ambiguous_catch_try_state}}]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:322
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:320
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_exception_in_catch/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:326
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`undef_label`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:is_list _0
  br _11, ^11, ^10

11:
  %% beam_validator_SUITE.erl:343
  %% Result type:
  %%    list(any())
  _5 = call (`beam_val`/1), `{undef_label,[{t,1}],
              [],
              [{function,t,1,2,
                         [{label,1},
                          {func_info,{atom,undef_label},{atom,t},1},
                          {label,2},
                          {test,is_eq_exact,{f,42},[{x,0},{atom,x}]},
                          {move,{atom,ok},{x,0}},
                          return]},
               {function,x,1,17,
                         [{label,3},
                          {func_info,{atom,undef_label},{atom,x},1},
                          {label,4},
                          return]}],
              5}`

  %% Aliased:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _5 => list(any())
  %% Aliased:
  %%    _5
  _15 = bif:'=:=' _5, `[{{undef_label,t,1},{undef_labels,"*"}},{{undef_label,x,1},no_entry_label}]`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_validator_SUITE.erl:344
  %% Aliased:
  %%    _5
  _6 = match_fail `badmatch`, _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

10:
  %% beam_validator_SUITE.erl:326
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-undef_label/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:348
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`illegal_instruction`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:is_list _0
  br _11, ^11, ^10

11:
  %% beam_validator_SUITE.erl:366
  %% Result type:
  %%    list(any())
  _5 = call (`beam_val`/1), `{illegal_instruction,
     [{t,1},{x,1},{y,0}],
     [],
     [{function,t,1,2,
          [{label,1},
           {func_info,{atom,illegal_instruction},{atom,t},1},
           {label,2},
           {my_illegal_instruction,{x,0}},
           return]},
      {function,x,1,4,
          [{label,3},
           bad_func_info,
           {label,4},
           {my_illegal_instruction,{x,0}},
           return]},
      {function,y,0,17,[]}],
     5}`

  %% Aliased:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _5 => list(any())
  %% Aliased:
  %%    _5
  _15 = bif:'=:=' _5, `[{{illegal_instruction,t,1},
   {{my_illegal_instruction,{x,0}},4,unknown_instruction}},
  {{illegal_instruction,x,1},invalid_function_header},
  {{illegal_instruction,y,0},invalid_function_header}]`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_validator_SUITE.erl:367
  %% Aliased:
  %%    _5
  _6 = match_fail `badmatch`, _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

10:
  %% beam_validator_SUITE.erl:348
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-illegal_instruction/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:380
%% Counter = 37
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`failing_gc_guard_bif`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _16 = bif:is_list _0
  br _16, ^16, ^15

16:
  %% beam_validator_SUITE.erl:381
  _1 = call (`lists`:`seq`/2), `1`, `36`

  %% Aliased:
  %%    _1
  _17 = succeeded:body _1
  br _17, ^17, ^1

17:
  %% beam_validator_SUITE.erl:381
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _1
  _6 = call (`process_request`/1), _1

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => 'error' | 'ok'
  %% Unique:
  %%    _6
  _34 = bif:'=:=' _6, `ok`
  br _34, ^33, ^20

33:
  %% beam_validator_SUITE.erl:382
  %% Result type:
  %%    'error' | 'ok'
  _7 = call (`process_request`/1), `[]`

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => 'error' | 'ok'
  %% Unique:
  %%    _7
  _31 = bif:'=:=' _7, `error`
  br _31, ^30, ^23

30:
  %% beam_validator_SUITE.erl:383
  %% Result type:
  %%    'error' | 'ok'
  _8 = call (`process_request`/1), `not_a_list`

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => 'error' | 'ok'
  %% Unique:
  %%    _8
  _28 = bif:'=:=' _8, `error`
  br _28, ^27, ^26

27:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% beam_validator_SUITE.erl:383
  _9 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br ^1

23:
  %% beam_validator_SUITE.erl:382
  _10 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _10
  _32 = succeeded:body _10
  br ^1

20:
  %% beam_validator_SUITE.erl:381
  _11 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br ^1

15:
  %% beam_validator_SUITE.erl:380
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-failing_gc_guard_bif/1-',1}}
  _12 = match_fail `function_clause`, _0

  %% Unique:
  %%    _12
  _36 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_validator_SUITE.erl:386
%% Counter = 32
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`process_request`(_0) {
0:
  %% beam_validator_SUITE.erl:387
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    _0
  _11 = call (`process_request_foo`/1), _0

  %% Unique:
  %%    _11
  _19 = succeeded:body _11
  br _19, ^27, ^1

27:
  %% beam_validator_SUITE.erl:390
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:length _0

  %% Unique:
  %%    _1
  _25 = succeeded:guard _1
  br _25, ^25, ^23

25:
  %% Argument types:
  %%    _1 => 0..288230376151711743
  %% Unique:
  %%    _1
  _26 = bif:'=:=' _1, `36`
  br _26, ^26, ^23

26:
  br ^22

23:
  br ^22

22:
  Response = phi { `error`, ^23 }, { `ok`, ^26 }

  %% beam_validator_SUITE.erl:396
  %% Argument types:
  %%    
  _5 = bif:self

  %% Argument types:
  %%    Response => 'error' | 'ok'
  %% Unique:
  %%    Response
  _13 = put_list Response, `[]`

  %% beam_validator_SUITE.erl:396
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _5, 
  %%    _13
  _16 = call (`process_request_bar`/2), _5, _13

  %% Unique:
  %%    _16
  _30 = succeeded:body _16
  br _30, ^30, ^1

30:
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _16
  ret _16

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:398
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`process_request_foo`(_0) {
0:
  %% Result type:
  %%    'false'
  ret `false`
}

%% beam_validator_SUITE.erl:401
%% Counter = 14
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
%%    _1 =>
%%     nonempty_list('error' | 'ok')
function `beam_validator_SUITE`:`process_request_bar`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => nonempty_list('error' | 'ok')
  %% Unique:
  %%    _1
  _5 = get_hd _1

  %% Argument types:
  %%    _1 => nonempty_list('error' | 'ok')
  %% Unique:
  %%    _1
  _4 = get_tl _1

  %% Argument types:
  %%    _4 => list('error' | 'ok')
  %% Unique:
  %%    _4
  _11 = bif:'=:=' _4, `[]`
  br _11, ^10, ^9

10:
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _5
  ret _5

9:
  %% beam_validator_SUITE.erl:401
  %% Unique:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-process_request_bar/2-',2}}
  _6 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _6
  _13 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:404
%% Counter = 11
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`map_field_lists`(_0) {
0:
  %% beam_validator_SUITE.erl:405
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  Errors = call (`do_val`/2), `map_field_lists`, _0

  %% Aliased:
  %%    Errors
  _6 = succeeded:body Errors
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    Errors => list(any())
  %% Aliased:
  %%    Errors
  _9 = bif:'=:=' Errors, `[{{map_field_lists,x,1},
   {{test,has_map_fields,{f,1},{x,0},{list,[{atom,a},{atom,a}]}},
    6,keys_not_unique}},
  {{map_field_lists,y,1},
   {{test,has_map_fields,{f,3},{x,0},{list,[]}},6,empty_field_list}}]`
  br _9, ^9, ^8

9:
  %% Result type:
  %%    nonempty_list({{'map_field_lists', 'x', 1}, {{'test', 'has_map_fields', {'f', 1}, {'x', 0}, {'list', nonempty_list({'atom', 'a'})}}, 6, 'keys_not_unique'}} | {{'map_field_lists', 'y', 1}, {{'test', 'has_map_fields', {'f', 3}, {'x', 0}, {'list', nil()}}, 6, 'empty_field_list'}})
  %% Aliased:
  %%    Errors
  ret Errors

8:
  %% beam_validator_SUITE.erl:406
  %% Aliased:
  %%    Errors
  _3 = match_fail `badmatch`, Errors

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_validator_SUITE.erl:417
%% Counter = 8
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`cover_bin_opt`(_0) {
0:
  %% Result type:
  %%    'error' | 'ok'
  _2 = make_fun (`try_bin_opt`/1)

  %% beam_validator_SUITE.erl:423
  %% Aliased:
  %%    _2
  _3 = call (`test_lib`:`p_run`/2), _2, `[beam_utils_SUITE,bs_match_SUITE,bs_bincomp_SUITE,bs_bit_binaries_SUITE,
  bs_utf_SUITE]`

  %% Aliased:
  %%    _3
  _6 = succeeded:body _3
  br _6, ^6, ^1

6:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_validator_SUITE.erl:426
%% Counter = 42
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`try_bin_opt`(_0) {
0:
  br ^41

41:
  _18 = new_try_tag `'try'`
  br _18, ^17, ^15

17:
  %% beam_validator_SUITE.erl:428
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _10 = call (`do_bin_opt`/1), _0

  %% Aliased:
  %%    _10
  _19 = succeeded:body _10
  br _19, ^14, ^15

14:
  %% Unique:
  %%    _18
  _23 = kill_try_tag _18
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _10
  ret _10

15:
  %% Aliased:
  %%    _18
  _21 = landingpad `'try'`, _18

  %% Aliased:
  %%    _21
  _4 = extract _21, `0`

  %% Aliased:
  %%    _21
  _3 = extract _21, `1`

  %% Aliased:
  %%    _21
  _2 = extract _21, `2`

  %% Aliased:
  %%    _18
  _22 = kill_try_tag _18

  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% Argument types:
  %%    
  %% Aliased:
  %%    Stk
  _5 = put_list Stk, `[]`

  %% Argument types:
  %%    _5 => nonempty_list(any())
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _5
  _6 = put_list _3, _5

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %%    _6 => nonempty_list(any())
  %% Unique:
  %%    _4, 
  %%    _6
  _7 = put_list _4, _6

  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _7
  _8 = put_list _0, _7
  br ^24

24:
  %% beam_validator_SUITE.erl:431
  %% Unique:
  %%    _8
  _11 = call (`io`:`format`/2), `"~p: ~p ~p\n~p\n"`, _8

  %% Aliased:
  %%    _11
  _20 = succeeded:body _11
  br _20, ^20, ^1

20:
  %% Result type:
  %%    'error'
  ret `error`

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_validator_SUITE.erl:436
%% Counter = 69
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`do_bin_opt`(_0) {
0:
  %% beam_validator_SUITE.erl:437
  %% Aliased:
  %%    _0
  Beam = call (`code`:`which`/1), _0

  %% Aliased:
  %%    Beam
  _27 = succeeded:body Beam
  br _27, ^27, ^1

27:
  %% beam_validator_SUITE.erl:440
  %% Aliased:
  %%    Beam
  _7 = call (`beam_lib`:`chunks`/2), Beam, `[abstract_code]`

  %% Aliased:
  %%    _7
  _28 = succeeded:body _7
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _65 = is_tagged_tuple _7, `2`, `ok`
  br _65, ^62, ^30

62:
  %% Argument types:
  %%    _7 => {'ok', any()}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _59 = bif:is_tuple _8
  br _59, ^59, ^30

59:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _60 = bif:tuple_size _8

  %% Argument types:
  %%    _60 => 0..16777215
  %% Unique:
  %%    _60
  _61 = bif:'=:=' _60, `2`
  br _61, ^58, ^30

58:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _10
  _57 = is_nonempty_list _10
  br _57, ^57, ^30

57:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _13 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _12 = get_tl _10

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _54 = is_tagged_tuple _13, `2`, `abstract_code`
  br _54, ^51, ^30

51:
  %% Argument types:
  %%    _13 => {'abstract_code', any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _48 = is_tagged_tuple _14, `2`, `raw_abstract_v1`
  br _48, ^45, ^30

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _44 = bif:'=:=' _12, `[]`
  br _44, ^44, ^30

44:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _11
  _31 = bif:'=:=' _11, _0
  br _31, ^31, ^30

31:
  %% Argument types:
  %%    _14 => {'raw_abstract_v1', any()}
  %% Aliased:
  %%    _14
  _16 = get_tuple_element _14, `1`

  %% beam_validator_SUITE.erl:441
  %% Aliased:
  %%    _16
  _18 = call (`compile`:`forms`/2), _16, `['S']`

  %% Aliased:
  %%    _18
  _32 = succeeded:body _18
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _40 = is_tagged_tuple _18, `3`, `ok`
  br _40, ^37, ^34

37:
  %% Argument types:
  %%    _18 => {'ok', any(), any()}
  %% Aliased:
  %%    _18
  _20 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _20
  _35 = bif:'=:=' _20, _0
  br _35, ^35, ^34

35:
  %% Argument types:
  %%    _18 => {'ok', any(), any()}
  %% Aliased:
  %%    _18
  _19 = get_tuple_element _18, `2`

  %% beam_validator_SUITE.erl:442
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _19
  _22 = call (`do_bin_opt`/2), _0, _19

  %% Unique:
  %%    _22
  _36 = succeeded:body _22
  br _36, ^36, ^1

36:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _22
  ret _22

34:
  %% beam_validator_SUITE.erl:441
  %% Aliased:
  %%    _18
  _23 = match_fail `badmatch`, _18

  %% Unique:
  %%    _23
  _43 = succeeded:body _23
  br ^1

30:
  %% beam_validator_SUITE.erl:438
  %% Aliased:
  %%    _7
  _24 = match_fail `badmatch`, _7

  %% Unique:
  %%    _24
  _68 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% beam_validator_SUITE.erl:444
%% Counter = 25
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`do_bin_opt`(_0, _1) {
0:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  _2 = make_fun (`enable_bin_opt`/1)

  %% beam_validator_SUITE.erl:445
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  _7 = call (`do_bin_opt`/3), _2, _0, _1

  %% Unique:
  %%    _7
  _14 = succeeded:body _7
  br _14, ^14, ^1

14:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  _3 = make_fun (`remove_bs_start_match`/1)

  %% beam_validator_SUITE.erl:446
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _3
  _8 = call (`do_bin_opt`/3), _3, _0, _1

  %% Unique:
  %%    _8
  _15 = succeeded:body _8
  br _15, ^15, ^1

15:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  _4 = make_fun (`remove_bs_save`/1)

  %% beam_validator_SUITE.erl:447
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _4
  _9 = call (`do_bin_opt`/3), _4, _0, _1

  %% Unique:
  %%    _9
  _16 = succeeded:body _9
  br _16, ^16, ^1

16:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  _5 = make_fun (`destroy_ctxt`/1)

  %% beam_validator_SUITE.erl:448
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _5
  _10 = call (`do_bin_opt`/3), _5, _0, _1

  %% Unique:
  %%    _10
  _17 = succeeded:body _10
  br _17, ^17, ^1

17:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  _6 = make_fun (`destroy_save_point`/1)

  %% beam_validator_SUITE.erl:449
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _6
  _11 = call (`do_bin_opt`/3), _6, _0, _1

  %% Unique:
  %%    _11
  _18 = succeeded:body _11
  br _18, ^24, ^1

24:
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_validator_SUITE.erl:452
%% Counter = 79
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> {any(), any(), any(), list({'function', any(), any(), any(), maybe_improper_list(any(), any())}), any()})
function `beam_validator_SUITE`:`do_bin_opt`(_0, _1, _2) {
0:
  %% beam_validator_SUITE.erl:453
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), maybe_improper_list(any(), any())}), any()}
  %% Argument types:
  %%    _0 => fun((_) -> {any(), any(), any(), list({'function', any(), any(), any(), maybe_improper_list(any(), any())}), any()})
  %% Aliased:
  %%    _0, 
  %%    _2
  Asm = call _0, _2

  %% Aliased:
  %%    Asm
  _48 = succeeded:body Asm
  br _48, ^48, ^1

48:
  %% beam_validator_SUITE.erl:454
  %% Aliased:
  %%    Asm
  _23 = call (`compile`:`forms`/2), Asm, `[from_asm,no_postopt,return]`

  %% Aliased:
  %%    _23
  _49 = succeeded:body _23
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _72 = bif:is_tuple _23
  br _72, ^72, ^51

72:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _73 = bif:tuple_size _23
  %% Argument types:
  %%    
  switch _73, ^51, [
    { `3`, ^71 },
    { `4`, ^70 }
  ]

70:
  %% Argument types:
  %%    _23 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _23
  _27 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _55 = bif:'=:=' _27, `ok`
  br _55, ^54, ^51

54:
  %% Argument types:
  %%    _23 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _23
  _26 = get_tuple_element _23, `1`

  %% beam_validator_SUITE.erl:455
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _26
  _19 = bif:'=:=' _26, _1
  br _19, ^77, ^51

77:
  %% Argument types:
  %%    _23 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _23
  _25 = get_tuple_element _23, `2`

  %% beam_validator_SUITE.erl:455
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _20 = bif:is_binary _25
  br _20, ^53, ^51

53:
  %% Result type:
  %%    'ok'
  ret `ok`

71:
  %% Argument types:
  %%    _23 => {any(), any(), any()}
  %% Aliased:
  %%    _23
  _31 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _69 = bif:'=:=' _31, `error`
  br _69, ^68, ^51

68:
  %% beam_validator_SUITE.erl:460
  %% Aliased:
  %%    _1
  ModString = call (`erlang`:`atom_to_list`/1), _1

  %% Aliased:
  %%    ModString
  _56 = succeeded:body ModString
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    _23 => {'error', any(), any()}
  %% Aliased:
  %%    _23
  _30 = get_tuple_element _23, `1`

  %% Aliased:
  %%    _30
  _66 = is_nonempty_list _30
  br _66, ^66, ^58

66:
  %% Argument types:
  %%    _30 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _30
  _33 = get_hd _30

  %% Argument types:
  %%    _30 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _30
  _32 = get_tl _30

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _63 = bif:is_tuple _33
  br _63, ^63, ^58

63:
  %% Argument types:
  %%    _33 => {...}
  %% Aliased:
  %%    _33
  _64 = bif:tuple_size _33

  %% Argument types:
  %%    _64 => 0..16777215
  %% Unique:
  %%    _64
  _65 = bif:'=:=' _64, `2`
  br _65, ^62, ^58

62:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _61 = bif:'=:=' _32, `[]`
  br _61, ^61, ^58

61:
  %% Argument types:
  %%    _33 => {any(), any()}
  %% Aliased:
  %%    _33
  _35 = get_tuple_element _33, `0`

  %% Argument types:
  %%    ModString => list(0..1114111)
  %% Aliased:
  %%    _35, 
  %%    ModString
  _59 = bif:'=:=' _35, ModString
  br _59, ^59, ^58

59:
  %% Argument types:
  %%    _33 => {list(0..1114111), any()}
  %% Aliased:
  %%    _33
  _34 = get_tuple_element _33, `1`

  %% beam_validator_SUITE.erl:462
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _34
  _43 = call (`'-do_bin_opt/3-lc$^0/1-0-'`/1), _34

  %% Unique:
  %%    _43
  _60 = succeeded:body _43
  br _60, ^60, ^1

60:
  %% Result type:
  %%    'ok'
  ret `ok`

58:
  %% beam_validator_SUITE.erl:461
  %% Aliased:
  %%    _30
  _44 = match_fail `badmatch`, _30

  %% Unique:
  %%    _44
  _67 = succeeded:body _44
  br ^1

51:
  %% beam_validator_SUITE.erl:454
  %% Aliased:
  %%    _23
  _45 = match_fail `case_clause`, _23

  %% Unique:
  %%    _45
  _74 = succeeded:body _45
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% beam_validator_SUITE.erl:466
%% Counter = 16
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`verify_bin_opt_error`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _12 = is_tagged_tuple _0, `2`, `beam_validator`
  br _12, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% beam_validator_SUITE.erl:466
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-verify_bin_opt_error/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:469
%% Counter = 7
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`enable_bin_opt`(_0) {
0:
  %% Result type:
  %%    list(any())
  _1 = make_fun (`enable_bin_opt_body`/1)

  %% beam_validator_SUITE.erl:470
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = call (`transform_is`/2), _1, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:472
%% Counter = 40
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`enable_bin_opt_body`(_0) {
0:
  %% Aliased:
  %%    _0
  _37 = is_nonempty_list _0
  br _37, ^37, ^20

37:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _6 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _5 = get_tl _0

  %% Aliased:
  %%    _5
  _35 = is_nonempty_list _5
  br _35, ^35, ^21

35:
  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _8 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _7 = get_tl _5

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _32 = is_tagged_tuple _8, `2`, `'%'`
  br _32, ^29, ^21

29:
  %% Argument types:
  %%    _8 => {''%'', any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _26 = is_tagged_tuple _9, `3`, `no_bin_opt`
  br _26, ^23, ^21

23:
  %% beam_validator_SUITE.erl:473
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _7
  _14 = call (`enable_bin_opt_body`/1), _7

  %% Aliased:
  %%    _14
  _22 = succeeded:body _14
  br _22, ^22, ^1

22:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _14
  ret _14

21:
  %% beam_validator_SUITE.erl:475
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _5
  _1 = call (`enable_bin_opt_body`/1), _5

  %% Aliased:
  %%    _1
  _36 = succeeded:body _1
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _1 => list(any())
  %% Aliased:
  %%    _1, 
  %%    _6
  _15 = put_list _6, _1
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _15
  ret _15

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _38 = bif:'=:=' _0, `[]`
  br _38, ^38, ^19

38:
  %% Result type:
  %%    nil()
  ret `[]`

19:
  %% beam_validator_SUITE.erl:472
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-enable_bin_opt_body/1-',1}}
  _16 = match_fail `function_clause`, _0

  %% Unique:
  %%    _16
  _39 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:479
%% Counter = 21
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`remove_bs_start_match`(_0) {
0:
  %% Result type:
  %%    'false' | 'true'
  _3 = make_fun (`'-remove_bs_start_match/1-fun-0-'`/1)

  %% beam_validator_SUITE.erl:480
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _0, 
  %%    _3
  _16 = call (`transform_remove`/2), _3, _0

  %% Aliased:
  %%    _16
  _19 = succeeded:body _16
  br _19, ^19, ^1

19:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _16
  ret _16

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:484
%% Counter = 16
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`remove_bs_save`(_0) {
0:
  %% Result type:
  %%    'false' | 'true'
  _3 = make_fun (`'-remove_bs_save/1-fun-0-'`/1)

  %% beam_validator_SUITE.erl:485
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _0, 
  %%    _3
  _11 = call (`transform_remove`/2), _3, _0

  %% Aliased:
  %%    _11
  _14 = succeeded:body _11
  br _14, ^14, ^1

14:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_validator_SUITE.erl:489
%% Counter = 7
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`destroy_save_point`(_0) {
0:
  _1 = make_fun (`do_destroy_save_point`/1)

  %% beam_validator_SUITE.erl:490
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = call (`transform_i`/2), _1, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:492
%% Counter = 22
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`do_destroy_save_point`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_tuple _0
  br _15, ^15, ^11

15:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _16 = bif:tuple_size _0

  %% Argument types:
  %%    _16 => 0..16777215
  %% Unique:
  %%    _16
  _17 = bif:'=:=' _16, `3`
  br _17, ^14, ^11

14:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _6 = get_tuple_element _0, `0`
  switch _6, ^11, [
    { `bs_restore2`, ^13 },
    { `bs_save2`, ^13 }
  ]

13:
  %% Argument types:
  %%    _0 => {'bs_restore2', any(), any()} | {'bs_save2', any(), any()}
  %% Aliased:
  %%    _0
  _5 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _6 => 'bs_restore2' | 'bs_save2'
  %% Aliased:
  %%    _5
  %% Unique:
  %%    _6
  _8 = put_tuple _6, _5, `42`
  %% Result type:
  %%    {'bs_restore2' | 'bs_save2', any(), 42}
  %% Unique:
  %%    _8
  ret _8

11:
  %% Aliased:
  %%    _0
  ret _0
}

%% beam_validator_SUITE.erl:498
%% Counter = 7
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`destroy_ctxt`(_0) {
0:
  _1 = make_fun (`do_destroy_ctxt`/1)

  %% beam_validator_SUITE.erl:499
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = call (`transform_i`/2), _1, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:501
%% Counter = 32
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`do_destroy_ctxt`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _30 = bif:is_tuple _0
  br _30, ^30, ^20

30:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _31 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _31, ^20, [
    { `2`, ^29 },
    { `3`, ^28 }
  ]

28:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _12 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _11 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _10 = get_tuple_element _0, `2`
  switch _12, ^20, [
    { `bs_restore2`, ^24 },
    { `bs_save2`, ^23 }
  ]

23:
  %% beam_validator_SUITE.erl:502
  %% Result type:
  %%    {any(), number()}
  %% Aliased:
  %%    _11
  _1 = call (`destroy_reg`/1), _11

  %% Aliased:
  %%    _1
  _21 = succeeded:body _1
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _1 => {any(), number()}
  %% Aliased:
  %%    _1, 
  %%    _10
  _17 = put_tuple `bs_save2`, _1, _10
  %% Result type:
  %%    {'bs_save2', {any(), number()}, any()}
  %% Unique:
  %%    _17
  ret _17

24:
  %% beam_validator_SUITE.erl:504
  %% Result type:
  %%    {any(), number()}
  %% Aliased:
  %%    _11
  _2 = call (`destroy_reg`/1), _11

  %% Aliased:
  %%    _2
  _22 = succeeded:body _2
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _2 => {any(), number()}
  %% Aliased:
  %%    _2, 
  %%    _10
  _16 = put_tuple `bs_restore2`, _2, _10
  %% Result type:
  %%    {'bs_restore2', {any(), number()}, any()}
  %% Unique:
  %%    _16
  ret _16

29:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _14 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _27 = bif:'=:=' _14, `bs_context_to_binary`
  br _27, ^26, ^20

26:
  %% Argument types:
  %%    _0 => {'bs_context_to_binary', any()}
  %% Aliased:
  %%    _0
  _13 = get_tuple_element _0, `1`

  %% beam_validator_SUITE.erl:506
  %% Result type:
  %%    {any(), number()}
  %% Aliased:
  %%    _13
  _3 = call (`destroy_reg`/1), _13

  %% Aliased:
  %%    _3
  _25 = succeeded:body _3
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _3 => {any(), number()}
  %% Aliased:
  %%    _3
  _15 = put_tuple `bs_context_to_binary`, _3
  %% Result type:
  %%    {'bs_context_to_binary', {any(), number()}}
  %% Unique:
  %%    _15
  ret _15

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18

20:
  %% Aliased:
  %%    _0
  ret _0
}

%% beam_validator_SUITE.erl:510
%% Counter = 27
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`destroy_reg`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:is_tuple _0
  br _22, ^22, ^14

22:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _23 = bif:tuple_size _0

  %% Argument types:
  %%    _23 => 0..16777215
  %% Unique:
  %%    _23
  _24 = bif:'=:=' _23, `2`
  br _24, ^26, ^14

26:
  %% beam_validator_SUITE.erl:511
  _8 = call (`rand`:`uniform`/0)

  %% Aliased:
  %%    _8
  _15 = succeeded:body _8
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _6 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _18 = bif:'<' _8, `0.6`
  br _18, ^18, ^17

18:
  %% beam_validator_SUITE.erl:513
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _1 = bif:'+' _6, `1`

  %% Unique:
  %%    _1
  _19 = succeeded:body _1
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _7 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _1 => number()
  %% Aliased:
  %%    _7
  %% Unique:
  %%    _1
  _9 = put_tuple _7, _1
  %% Result type:
  %%    {any(), number()}
  %% Unique:
  %%    _9
  ret _9

17:
  %% beam_validator_SUITE.erl:515
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _2 = bif:'+' _6, `1`

  %% Unique:
  %%    _2
  _20 = succeeded:body _2
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _2 => number()
  %% Unique:
  %%    _2
  _10 = put_tuple `y`, _2
  %% Result type:
  %%    {'y', number()}
  %% Unique:
  %%    _10
  ret _10

14:
  %% beam_validator_SUITE.erl:510
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-destroy_reg/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _25 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_validator_SUITE.erl:518
%% Counter = 12
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_tuples`(_0) {
0:
  %% beam_validator_SUITE.erl:519
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`do_val`/2), `bad_tuples`, _0

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _10 = bif:'=:=' _3, `[{{bad_tuples,heap_overflow,1},
   {{put_tuple2,{x,0},{list,[{atom,ok},{x,0}]}},
    6,
    {heap_overflow,{left,2},{wanted,3}}}}]`
  br _10, ^10, ^9

10:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% beam_validator_SUITE.erl:520
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_validator_SUITE.erl:526
%% Counter = 12
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_try_catch_nesting`(_0) {
0:
  %% beam_validator_SUITE.erl:527
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`do_val`/2), `bad_try_catch_nesting`, _0

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _10 = bif:'=:=' _3, `[{{bad_try_catch_nesting,main,2},
   {{'try',{y,2},{f,3}},
    9,
    {bad_try_catch_nesting,{y,2},[{{y,1},{trytag,[5]}}]}}}]`
  br _10, ^10, ^9

10:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% beam_validator_SUITE.erl:528
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_validator_SUITE.erl:534
%% Counter = 438
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`receive_stacked`(_0) {
0:
  %% beam_validator_SUITE.erl:536
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _22 = call (`do_val`/2), `receive_stacked`, _0

  %% Aliased:
  %%    _22
  _151 = succeeded:body _22
  br _151, ^151, ^1

151:
  %% Aliased:
  %%    _22
  _436 = is_nonempty_list _22
  br _436, ^436, ^153

436:
  %% Argument types:
  %%    _22 => nonempty_list(any())
  %% Aliased:
  %%    _22
  _24 = get_hd _22

  %% Argument types:
  %%    _22 => nonempty_list(any())
  %% Aliased:
  %%    _22
  _23 = get_tl _22

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _433 = bif:is_tuple _24
  br _433, ^433, ^153

433:
  %% Argument types:
  %%    _24 => {...}
  %% Aliased:
  %%    _24
  _434 = bif:tuple_size _24

  %% Argument types:
  %%    _434 => 0..16777215
  %% Unique:
  %%    _434
  _435 = bif:'=:=' _434, `2`
  br _435, ^432, ^153

432:
  %% Argument types:
  %%    _24 => {any(), any()}
  %% Aliased:
  %%    _24
  _26 = get_tuple_element _24, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _431 = bif:'=:=' _26, `{receive_stacked,f1,0}`
  br _431, ^431, ^153

431:
  %% Argument types:
  %%    _24 => {{'receive_stacked', 'f1', 0}, any()}
  %% Aliased:
  %%    _24
  _25 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _428 = bif:is_tuple _25
  br _428, ^428, ^153

428:
  %% Argument types:
  %%    _25 => {...}
  %% Aliased:
  %%    _25
  _429 = bif:tuple_size _25

  %% Argument types:
  %%    _429 => 0..16777215
  %% Unique:
  %%    _429
  _430 = bif:'=:=' _429, `3`
  br _430, ^427, ^153

427:
  %% Argument types:
  %%    _25 => {any(), any(), any()}
  %% Aliased:
  %%    _25
  _29 = get_tuple_element _25, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _426 = bif:'=:=' _29, `{loop_rec_end,{f,3}}`
  br _426, ^426, ^153

426:
  %% Argument types:
  %%    _25 => {{'loop_rec_end', {'f', 3}}, any(), any()}
  %% Aliased:
  %%    _25
  _28 = get_tuple_element _25, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _425 = bif:'=:=' _28, `19`
  br _425, ^424, ^153

424:
  %% Argument types:
  %%    _25 => {{'loop_rec_end', {'f', 3}}, 19, any()}
  %% Aliased:
  %%    _25
  _27 = get_tuple_element _25, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _421 = is_tagged_tuple _27, `2`, `fragile_message_reference`
  br _421, ^418, ^153

418:
  %% Argument types:
  %%    _27 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _27
  _30 = get_tuple_element _27, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _415 = is_tagged_tuple _30, `2`, `y`
  br _415, ^412, ^153

412:
  %% Aliased:
  %%    _23
  _411 = is_nonempty_list _23
  br _411, ^411, ^153

411:
  %% Argument types:
  %%    _23 => nonempty_list(any())
  %% Aliased:
  %%    _23
  _35 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_list(any())
  %% Aliased:
  %%    _23
  _34 = get_tl _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _408 = bif:is_tuple _35
  br _408, ^408, ^153

408:
  %% Argument types:
  %%    _35 => {...}
  %% Aliased:
  %%    _35
  _409 = bif:tuple_size _35

  %% Argument types:
  %%    _409 => 0..16777215
  %% Unique:
  %%    _409
  _410 = bif:'=:=' _409, `2`
  br _410, ^407, ^153

407:
  %% Argument types:
  %%    _35 => {any(), any()}
  %% Aliased:
  %%    _35
  _37 = get_tuple_element _35, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _406 = bif:'=:=' _37, `{receive_stacked,f2,0}`
  br _406, ^406, ^153

406:
  %% Argument types:
  %%    _35 => {{'receive_stacked', 'f2', 0}, any()}
  %% Aliased:
  %%    _35
  _36 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _403 = bif:is_tuple _36
  br _403, ^403, ^153

403:
  %% Argument types:
  %%    _36 => {...}
  %% Aliased:
  %%    _36
  _404 = bif:tuple_size _36

  %% Argument types:
  %%    _404 => 0..16777215
  %% Unique:
  %%    _404
  _405 = bif:'=:=' _404, `3`
  br _405, ^402, ^153

402:
  %% Argument types:
  %%    _36 => {any(), any(), any()}
  %% Aliased:
  %%    _36
  _40 = get_tuple_element _36, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _401 = bif:'=:=' _40, `{test_heap,3,0}`
  br _401, ^401, ^153

401:
  %% Argument types:
  %%    _36 => {{'test_heap', 3, 0}, any(), any()}
  %% Aliased:
  %%    _36
  _39 = get_tuple_element _36, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _400 = bif:'=:=' _39, `12`
  br _400, ^399, ^153

399:
  %% Argument types:
  %%    _36 => {{'test_heap', 3, 0}, 12, any()}
  %% Aliased:
  %%    _36
  _38 = get_tuple_element _36, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _396 = is_tagged_tuple _38, `2`, `fragile_message_reference`
  br _396, ^393, ^153

393:
  %% Argument types:
  %%    _38 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _38
  _41 = get_tuple_element _38, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _390 = is_tagged_tuple _41, `2`, `y`
  br _390, ^387, ^153

387:
  %% Aliased:
  %%    _34
  _386 = is_nonempty_list _34
  br _386, ^386, ^153

386:
  %% Argument types:
  %%    _34 => nonempty_list(any())
  %% Aliased:
  %%    _34
  _46 = get_hd _34

  %% Argument types:
  %%    _34 => nonempty_list(any())
  %% Aliased:
  %%    _34
  _45 = get_tl _34

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _383 = bif:is_tuple _46
  br _383, ^383, ^153

383:
  %% Argument types:
  %%    _46 => {...}
  %% Aliased:
  %%    _46
  _384 = bif:tuple_size _46

  %% Argument types:
  %%    _384 => 0..16777215
  %% Unique:
  %%    _384
  _385 = bif:'=:=' _384, `2`
  br _385, ^382, ^153

382:
  %% Argument types:
  %%    _46 => {any(), any()}
  %% Aliased:
  %%    _46
  _48 = get_tuple_element _46, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _381 = bif:'=:=' _48, `{receive_stacked,f3,0}`
  br _381, ^381, ^153

381:
  %% Argument types:
  %%    _46 => {{'receive_stacked', 'f3', 0}, any()}
  %% Aliased:
  %%    _46
  _47 = get_tuple_element _46, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _378 = bif:is_tuple _47
  br _378, ^378, ^153

378:
  %% Argument types:
  %%    _47 => {...}
  %% Aliased:
  %%    _47
  _379 = bif:tuple_size _47

  %% Argument types:
  %%    _379 => 0..16777215
  %% Unique:
  %%    _379
  _380 = bif:'=:=' _379, `3`
  br _380, ^377, ^153

377:
  %% Argument types:
  %%    _47 => {any(), any(), any()}
  %% Aliased:
  %%    _47
  _51 = get_tuple_element _47, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _376 = bif:'=:=' _51, `{test_heap,3,0}`
  br _376, ^376, ^153

376:
  %% Argument types:
  %%    _47 => {{'test_heap', 3, 0}, any(), any()}
  %% Aliased:
  %%    _47
  _50 = get_tuple_element _47, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _375 = bif:'=:=' _50, `12`
  br _375, ^374, ^153

374:
  %% Argument types:
  %%    _47 => {{'test_heap', 3, 0}, 12, any()}
  %% Aliased:
  %%    _47
  _49 = get_tuple_element _47, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _371 = is_tagged_tuple _49, `2`, `fragile_message_reference`
  br _371, ^368, ^153

368:
  %% Argument types:
  %%    _49 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _49
  _52 = get_tuple_element _49, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _365 = is_tagged_tuple _52, `2`, `y`
  br _365, ^362, ^153

362:
  %% Aliased:
  %%    _45
  _361 = is_nonempty_list _45
  br _361, ^361, ^153

361:
  %% Argument types:
  %%    _45 => nonempty_list(any())
  %% Aliased:
  %%    _45
  _57 = get_hd _45

  %% Argument types:
  %%    _45 => nonempty_list(any())
  %% Aliased:
  %%    _45
  _56 = get_tl _45

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57
  _358 = bif:is_tuple _57
  br _358, ^358, ^153

358:
  %% Argument types:
  %%    _57 => {...}
  %% Aliased:
  %%    _57
  _359 = bif:tuple_size _57

  %% Argument types:
  %%    _359 => 0..16777215
  %% Unique:
  %%    _359
  _360 = bif:'=:=' _359, `2`
  br _360, ^357, ^153

357:
  %% Argument types:
  %%    _57 => {any(), any()}
  %% Aliased:
  %%    _57
  _59 = get_tuple_element _57, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _356 = bif:'=:=' _59, `{receive_stacked,f4,0}`
  br _356, ^356, ^153

356:
  %% Argument types:
  %%    _57 => {{'receive_stacked', 'f4', 0}, any()}
  %% Aliased:
  %%    _57
  _58 = get_tuple_element _57, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _353 = bif:is_tuple _58
  br _353, ^353, ^153

353:
  %% Argument types:
  %%    _58 => {...}
  %% Aliased:
  %%    _58
  _354 = bif:tuple_size _58

  %% Argument types:
  %%    _354 => 0..16777215
  %% Unique:
  %%    _354
  _355 = bif:'=:=' _354, `3`
  br _355, ^352, ^153

352:
  %% Argument types:
  %%    _58 => {any(), any(), any()}
  %% Aliased:
  %%    _58
  _62 = get_tuple_element _58, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _351 = bif:'=:=' _62, `{test_heap,3,0}`
  br _351, ^351, ^153

351:
  %% Argument types:
  %%    _58 => {{'test_heap', 3, 0}, any(), any()}
  %% Aliased:
  %%    _58
  _61 = get_tuple_element _58, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _61
  _350 = bif:'=:=' _61, `12`
  br _350, ^349, ^153

349:
  %% Argument types:
  %%    _58 => {{'test_heap', 3, 0}, 12, any()}
  %% Aliased:
  %%    _58
  _60 = get_tuple_element _58, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _346 = is_tagged_tuple _60, `2`, `fragile_message_reference`
  br _346, ^343, ^153

343:
  %% Argument types:
  %%    _60 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _60
  _63 = get_tuple_element _60, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _340 = is_tagged_tuple _63, `2`, `y`
  br _340, ^337, ^153

337:
  %% Aliased:
  %%    _56
  _336 = is_nonempty_list _56
  br _336, ^336, ^153

336:
  %% Argument types:
  %%    _56 => nonempty_list(any())
  %% Aliased:
  %%    _56
  _68 = get_hd _56

  %% Argument types:
  %%    _56 => nonempty_list(any())
  %% Aliased:
  %%    _56
  _67 = get_tl _56

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _333 = bif:is_tuple _68
  br _333, ^333, ^153

333:
  %% Argument types:
  %%    _68 => {...}
  %% Aliased:
  %%    _68
  _334 = bif:tuple_size _68

  %% Argument types:
  %%    _334 => 0..16777215
  %% Unique:
  %%    _334
  _335 = bif:'=:=' _334, `2`
  br _335, ^332, ^153

332:
  %% Argument types:
  %%    _68 => {any(), any()}
  %% Aliased:
  %%    _68
  _70 = get_tuple_element _68, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _331 = bif:'=:=' _70, `{receive_stacked,f5,0}`
  br _331, ^331, ^153

331:
  %% Argument types:
  %%    _68 => {{'receive_stacked', 'f5', 0}, any()}
  %% Aliased:
  %%    _68
  _69 = get_tuple_element _68, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _328 = bif:is_tuple _69
  br _328, ^328, ^153

328:
  %% Argument types:
  %%    _69 => {...}
  %% Aliased:
  %%    _69
  _329 = bif:tuple_size _69

  %% Argument types:
  %%    _329 => 0..16777215
  %% Unique:
  %%    _329
  _330 = bif:'=:=' _329, `3`
  br _330, ^327, ^153

327:
  %% Argument types:
  %%    _69 => {any(), any(), any()}
  %% Aliased:
  %%    _69
  _73 = get_tuple_element _69, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _326 = bif:'=:=' _73, `{loop_rec_end,{f,23}}`
  br _326, ^326, ^153

326:
  %% Argument types:
  %%    _69 => {{'loop_rec_end', {'f', 23}}, any(), any()}
  %% Aliased:
  %%    _69
  _72 = get_tuple_element _69, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _325 = bif:'=:=' _72, `23`
  br _325, ^324, ^153

324:
  %% Argument types:
  %%    _69 => {{'loop_rec_end', {'f', 23}}, 23, any()}
  %% Aliased:
  %%    _69
  _71 = get_tuple_element _69, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _321 = is_tagged_tuple _71, `2`, `fragile_message_reference`
  br _321, ^318, ^153

318:
  %% Argument types:
  %%    _71 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _71
  _74 = get_tuple_element _71, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _74
  _315 = is_tagged_tuple _74, `2`, `y`
  br _315, ^312, ^153

312:
  %% Aliased:
  %%    _67
  _311 = is_nonempty_list _67
  br _311, ^311, ^153

311:
  %% Argument types:
  %%    _67 => nonempty_list(any())
  %% Aliased:
  %%    _67
  _79 = get_hd _67

  %% Argument types:
  %%    _67 => nonempty_list(any())
  %% Aliased:
  %%    _67
  _78 = get_tl _67

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _308 = bif:is_tuple _79
  br _308, ^308, ^153

308:
  %% Argument types:
  %%    _79 => {...}
  %% Aliased:
  %%    _79
  _309 = bif:tuple_size _79

  %% Argument types:
  %%    _309 => 0..16777215
  %% Unique:
  %%    _309
  _310 = bif:'=:=' _309, `2`
  br _310, ^307, ^153

307:
  %% Argument types:
  %%    _79 => {any(), any()}
  %% Aliased:
  %%    _79
  _81 = get_tuple_element _79, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _81
  _306 = bif:'=:=' _81, `{receive_stacked,f6,0}`
  br _306, ^306, ^153

306:
  %% Argument types:
  %%    _79 => {{'receive_stacked', 'f6', 0}, any()}
  %% Aliased:
  %%    _79
  _80 = get_tuple_element _79, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _303 = bif:is_tuple _80
  br _303, ^303, ^153

303:
  %% Argument types:
  %%    _80 => {...}
  %% Aliased:
  %%    _80
  _304 = bif:tuple_size _80

  %% Argument types:
  %%    _304 => 0..16777215
  %% Unique:
  %%    _304
  _305 = bif:'=:=' _304, `3`
  br _305, ^302, ^153

302:
  %% Argument types:
  %%    _80 => {any(), any(), any()}
  %% Aliased:
  %%    _80
  _84 = get_tuple_element _80, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _299 = is_tagged_tuple _84, `6`, `gc_bif`
  br _299, ^296, ^153

296:
  %% Argument types:
  %%    _84 => {'gc_bif', any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _84
  _89 = get_tuple_element _84, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _295 = bif:'=:=' _89, `byte_size`
  br _295, ^294, ^153

294:
  %% Argument types:
  %%    _84 => {'gc_bif', 'byte_size', any(), any(), any(), any()}
  %% Aliased:
  %%    _84
  _88 = get_tuple_element _84, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _88
  _293 = bif:'=:=' _88, `{f,29}`
  br _293, ^293, ^153

293:
  %% Argument types:
  %%    _84 => {'gc_bif', 'byte_size', {'f', 29}, any(), any(), any()}
  %% Aliased:
  %%    _84
  _87 = get_tuple_element _84, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _292 = bif:'=:=' _87, `0`
  br _292, ^291, ^153

291:
  %% Argument types:
  %%    _84 => {'gc_bif', 'byte_size', {'f', 29}, 0, any(), any()}
  %% Aliased:
  %%    _84
  _86 = get_tuple_element _84, `4`

  %% Aliased:
  %%    _86
  _290 = is_nonempty_list _86
  br _290, ^290, ^153

290:
  %% Argument types:
  %%    _86 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _86
  _92 = get_hd _86

  %% Argument types:
  %%    _86 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _86
  _91 = get_tl _86

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _287 = is_tagged_tuple _92, `2`, `y`
  br _287, ^284, ^153

284:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _283 = bif:'=:=' _91, `[]`
  br _283, ^283, ^153

283:
  %% Argument types:
  %%    _84 => {'gc_bif', 'byte_size', {'f', 29}, 0, any(), any()}
  %% Aliased:
  %%    _84
  _85 = get_tuple_element _84, `5`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _282 = bif:'=:=' _85, `{x,0}`
  br _282, ^282, ^153

282:
  %% Argument types:
  %%    _80 => {any(), any(), any()}
  %% Aliased:
  %%    _80
  _83 = get_tuple_element _80, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _281 = bif:'=:=' _83, `14`
  br _281, ^280, ^153

280:
  %% Argument types:
  %%    _80 => {any(), 14, any()}
  %% Aliased:
  %%    _80
  _82 = get_tuple_element _80, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _82
  _277 = is_tagged_tuple _82, `2`, `fragile_message_reference`
  br _277, ^274, ^153

274:
  %% Argument types:
  %%    _82 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _82
  _95 = get_tuple_element _82, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _271 = is_tagged_tuple _95, `2`, `y`
  br _271, ^268, ^153

268:
  %% Aliased:
  %%    _78
  _267 = is_nonempty_list _78
  br _267, ^267, ^153

267:
  %% Argument types:
  %%    _78 => nonempty_list(any())
  %% Aliased:
  %%    _78
  _100 = get_hd _78

  %% Argument types:
  %%    _78 => nonempty_list(any())
  %% Aliased:
  %%    _78
  _99 = get_tl _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _100
  _264 = bif:is_tuple _100
  br _264, ^264, ^153

264:
  %% Argument types:
  %%    _100 => {...}
  %% Aliased:
  %%    _100
  _265 = bif:tuple_size _100

  %% Argument types:
  %%    _265 => 0..16777215
  %% Unique:
  %%    _265
  _266 = bif:'=:=' _265, `2`
  br _266, ^263, ^153

263:
  %% Argument types:
  %%    _100 => {any(), any()}
  %% Aliased:
  %%    _100
  _102 = get_tuple_element _100, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _262 = bif:'=:=' _102, `{receive_stacked,f7,0}`
  br _262, ^262, ^153

262:
  %% Argument types:
  %%    _100 => {{'receive_stacked', 'f7', 0}, any()}
  %% Aliased:
  %%    _100
  _101 = get_tuple_element _100, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _101
  _259 = bif:is_tuple _101
  br _259, ^259, ^153

259:
  %% Argument types:
  %%    _101 => {...}
  %% Aliased:
  %%    _101
  _260 = bif:tuple_size _101

  %% Argument types:
  %%    _260 => 0..16777215
  %% Unique:
  %%    _260
  _261 = bif:'=:=' _260, `3`
  br _261, ^258, ^153

258:
  %% Argument types:
  %%    _101 => {any(), any(), any()}
  %% Aliased:
  %%    _101
  _105 = get_tuple_element _101, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _105
  _257 = bif:'=:=' _105, `{loop_rec_end,{f,33}}`
  br _257, ^257, ^153

257:
  %% Argument types:
  %%    _101 => {{'loop_rec_end', {'f', 33}}, any(), any()}
  %% Aliased:
  %%    _101
  _104 = get_tuple_element _101, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _104
  _256 = bif:'=:=' _104, `22`
  br _256, ^255, ^153

255:
  %% Argument types:
  %%    _101 => {{'loop_rec_end', {'f', 33}}, 22, any()}
  %% Aliased:
  %%    _101
  _103 = get_tuple_element _101, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _252 = is_tagged_tuple _103, `2`, `fragile_message_reference`
  br _252, ^249, ^153

249:
  %% Argument types:
  %%    _103 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _103
  _106 = get_tuple_element _103, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _246 = is_tagged_tuple _106, `2`, `y`
  br _246, ^243, ^153

243:
  %% Aliased:
  %%    _99
  _242 = is_nonempty_list _99
  br _242, ^242, ^153

242:
  %% Argument types:
  %%    _99 => nonempty_list(any())
  %% Aliased:
  %%    _99
  _111 = get_hd _99

  %% Argument types:
  %%    _99 => nonempty_list(any())
  %% Aliased:
  %%    _99
  _110 = get_tl _99

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _239 = bif:is_tuple _111
  br _239, ^239, ^153

239:
  %% Argument types:
  %%    _111 => {...}
  %% Aliased:
  %%    _111
  _240 = bif:tuple_size _111

  %% Argument types:
  %%    _240 => 0..16777215
  %% Unique:
  %%    _240
  _241 = bif:'=:=' _240, `2`
  br _241, ^238, ^153

238:
  %% Argument types:
  %%    _111 => {any(), any()}
  %% Aliased:
  %%    _111
  _113 = get_tuple_element _111, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _237 = bif:'=:=' _113, `{receive_stacked,f8,0}`
  br _237, ^237, ^153

237:
  %% Argument types:
  %%    _111 => {{'receive_stacked', 'f8', 0}, any()}
  %% Aliased:
  %%    _111
  _112 = get_tuple_element _111, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _234 = bif:is_tuple _112
  br _234, ^234, ^153

234:
  %% Argument types:
  %%    _112 => {...}
  %% Aliased:
  %%    _112
  _235 = bif:tuple_size _112

  %% Argument types:
  %%    _235 => 0..16777215
  %% Unique:
  %%    _235
  _236 = bif:'=:=' _235, `3`
  br _236, ^233, ^153

233:
  %% Argument types:
  %%    _112 => {any(), any(), any()}
  %% Aliased:
  %%    _112
  _116 = get_tuple_element _112, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _116
  _232 = bif:'=:=' _116, `{loop_rec_end,{f,38}}`
  br _232, ^232, ^153

232:
  %% Argument types:
  %%    _112 => {{'loop_rec_end', {'f', 38}}, any(), any()}
  %% Aliased:
  %%    _112
  _115 = get_tuple_element _112, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _231 = bif:'=:=' _115, `22`
  br _231, ^230, ^153

230:
  %% Argument types:
  %%    _112 => {{'loop_rec_end', {'f', 38}}, 22, any()}
  %% Aliased:
  %%    _112
  _114 = get_tuple_element _112, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _114
  _227 = is_tagged_tuple _114, `2`, `fragile_message_reference`
  br _227, ^224, ^153

224:
  %% Argument types:
  %%    _114 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _114
  _117 = get_tuple_element _114, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _117
  _221 = is_tagged_tuple _117, `2`, `y`
  br _221, ^218, ^153

218:
  %% Aliased:
  %%    _110
  _217 = is_nonempty_list _110
  br _217, ^217, ^153

217:
  %% Argument types:
  %%    _110 => nonempty_list(any())
  %% Aliased:
  %%    _110
  _122 = get_hd _110

  %% Argument types:
  %%    _110 => nonempty_list(any())
  %% Aliased:
  %%    _110
  _121 = get_tl _110

  %% Argument types:
  %%    
  %% Aliased:
  %%    _122
  _214 = bif:is_tuple _122
  br _214, ^214, ^153

214:
  %% Argument types:
  %%    _122 => {...}
  %% Aliased:
  %%    _122
  _215 = bif:tuple_size _122

  %% Argument types:
  %%    _215 => 0..16777215
  %% Unique:
  %%    _215
  _216 = bif:'=:=' _215, `2`
  br _216, ^213, ^153

213:
  %% Argument types:
  %%    _122 => {any(), any()}
  %% Aliased:
  %%    _122
  _124 = get_tuple_element _122, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _124
  _212 = bif:'=:=' _124, `{receive_stacked,m1,0}`
  br _212, ^212, ^153

212:
  %% Argument types:
  %%    _122 => {{'receive_stacked', 'm1', 0}, any()}
  %% Aliased:
  %%    _122
  _123 = get_tuple_element _122, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _123
  _209 = bif:is_tuple _123
  br _209, ^209, ^153

209:
  %% Argument types:
  %%    _123 => {...}
  %% Aliased:
  %%    _123
  _210 = bif:tuple_size _123

  %% Argument types:
  %%    _210 => 0..16777215
  %% Unique:
  %%    _210
  _211 = bif:'=:=' _210, `3`
  br _211, ^208, ^153

208:
  %% Argument types:
  %%    _123 => {any(), any(), any()}
  %% Aliased:
  %%    _123
  _127 = get_tuple_element _123, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _127
  _207 = bif:'=:=' _127, `{loop_rec_end,{f,43}}`
  br _207, ^207, ^153

207:
  %% Argument types:
  %%    _123 => {{'loop_rec_end', {'f', 43}}, any(), any()}
  %% Aliased:
  %%    _123
  _126 = get_tuple_element _123, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _206 = bif:'=:=' _126, `21`
  br _206, ^205, ^153

205:
  %% Argument types:
  %%    _123 => {{'loop_rec_end', {'f', 43}}, 21, any()}
  %% Aliased:
  %%    _123
  _125 = get_tuple_element _123, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _125
  _202 = is_tagged_tuple _125, `2`, `fragile_message_reference`
  br _202, ^199, ^153

199:
  %% Argument types:
  %%    _125 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _125
  _128 = get_tuple_element _125, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _196 = is_tagged_tuple _128, `2`, `y`
  br _196, ^193, ^153

193:
  %% Aliased:
  %%    _121
  _192 = is_nonempty_list _121
  br _192, ^192, ^153

192:
  %% Argument types:
  %%    _121 => nonempty_list(any())
  %% Aliased:
  %%    _121
  _133 = get_hd _121

  %% Argument types:
  %%    _121 => nonempty_list(any())
  %% Aliased:
  %%    _121
  _132 = get_tl _121

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _189 = bif:is_tuple _133
  br _189, ^189, ^153

189:
  %% Argument types:
  %%    _133 => {...}
  %% Aliased:
  %%    _133
  _190 = bif:tuple_size _133

  %% Argument types:
  %%    _190 => 0..16777215
  %% Unique:
  %%    _190
  _191 = bif:'=:=' _190, `2`
  br _191, ^188, ^153

188:
  %% Argument types:
  %%    _133 => {any(), any()}
  %% Aliased:
  %%    _133
  _135 = get_tuple_element _133, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _135
  _187 = bif:'=:=' _135, `{receive_stacked,m2,0}`
  br _187, ^187, ^153

187:
  %% Argument types:
  %%    _133 => {{'receive_stacked', 'm2', 0}, any()}
  %% Aliased:
  %%    _133
  _134 = get_tuple_element _133, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _134
  _184 = bif:is_tuple _134
  br _184, ^184, ^153

184:
  %% Argument types:
  %%    _134 => {...}
  %% Aliased:
  %%    _134
  _185 = bif:tuple_size _134

  %% Argument types:
  %%    _185 => 0..16777215
  %% Unique:
  %%    _185
  _186 = bif:'=:=' _185, `3`
  br _186, ^183, ^153

183:
  %% Argument types:
  %%    _134 => {any(), any(), any()}
  %% Aliased:
  %%    _134
  _138 = get_tuple_element _134, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _138
  _182 = bif:'=:=' _138, `{loop_rec_end,{f,48}}`
  br _182, ^182, ^153

182:
  %% Argument types:
  %%    _134 => {{'loop_rec_end', {'f', 48}}, any(), any()}
  %% Aliased:
  %%    _134
  _137 = get_tuple_element _134, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _181 = bif:'=:=' _137, `32`
  br _181, ^180, ^153

180:
  %% Argument types:
  %%    _134 => {{'loop_rec_end', {'f', 48}}, 32, any()}
  %% Aliased:
  %%    _134
  _136 = get_tuple_element _134, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _177 = is_tagged_tuple _136, `2`, `fragile_message_reference`
  br _177, ^174, ^153

174:
  %% Argument types:
  %%    _136 => {'fragile_message_reference', any()}
  %% Aliased:
  %%    _136
  _139 = get_tuple_element _136, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _139
  _171 = is_tagged_tuple _139, `2`, `y`
  br _171, ^168, ^153

168:
  %% Argument types:
  %%    _132 => list(any())
  %% Aliased:
  %%    _132
  _167 = bif:'=:=' _132, `[]`
  br _167, ^167, ^153

167:
  %% beam_validator_SUITE.erl:573
  %% Aliased:
  %%    _0
  Data = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    Data
  _154 = succeeded:body Data
  br _154, ^154, ^1

154:
  %% beam_validator_SUITE.erl:575
  %% Aliased:
  %%    Data
  File = call (`filename`:`join`/2), Data, `"receive_stacked"`

  %% Aliased:
  %%    File
  _155 = succeeded:body File
  br _155, ^155, ^1

155:
  %% beam_validator_SUITE.erl:576
  %% Aliased:
  %%    File
  _143 = call (`compile`:`file`/2), File, `[binary]`

  %% Aliased:
  %%    _143
  _156 = succeeded:body _143
  br _156, ^156, ^1

156:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _143
  _163 = is_tagged_tuple _143, `3`, `ok`
  br _163, ^160, ^158

160:
  %% Argument types:
  %%    _143 => {'ok', any(), any()}
  %% Aliased:
  %%    _143
  _145 = get_tuple_element _143, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _145
  _159 = bif:'=:=' _145, `receive_stacked`
  br _159, ^159, ^158

159:
  %% Result type:
  %%    'ok'
  ret `ok`

158:
  %% beam_validator_SUITE.erl:576
  %% Aliased:
  %%    _143
  _147 = match_fail `badmatch`, _143

  %% Unique:
  %%    _147
  _166 = succeeded:body _147
  br ^1

153:
  %% beam_validator_SUITE.erl:537
  %% Aliased:
  %%    _22
  _148 = match_fail `badmatch`, _22

  %% Unique:
  %%    _148
  _437 = succeeded:body _148
  br ^1

1:
  _149 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _149
}

%% beam_validator_SUITE.erl:580
%% Counter = 48
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`aliased_types`(_0) {
0:
  %% beam_validator_SUITE.erl:581
  Seq = call (`lists`:`seq`/2), `1`, `5`

  %% Aliased:
  %%    Seq
  _19 = succeeded:body Seq
  br _19, ^19, ^1

19:
  %% beam_validator_SUITE.erl:582
  %% Aliased:
  %%    _0, 
  %%    Seq
  _7 = call (`aliased_types_1`/2), Seq, _0

  %% Aliased:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _46 = bif:'=:=' _7, `1`
  br _46, ^45, ^22

45:
  %% beam_validator_SUITE.erl:584
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    Seq
  _8 = call (`aliased_types_2`/1), Seq

  %% Aliased:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _43 = bif:'=:=' _8, `{1,1}`
  br _43, ^43, ^25

43:
  %% beam_validator_SUITE.erl:585
  %% Result type:
  %%    {any(), 'none'}
  _9 = call (`aliased_types_2`/1), `[]`

  %% Aliased:
  %%    _9
  _26 = succeeded:body _9
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _9 => {any(), 'none'}
  %% Aliased:
  %%    _9
  _41 = bif:'=:=' _9, `{42,none}`
  br _41, ^41, ^28

41:
  %% beam_validator_SUITE.erl:587
  %% Result type:
  %%    'gaffel' | 'gurka'
  _10 = call (`aliased_types_3`/1), `[gurka]`

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _10 => 'gaffel' | 'gurka'
  %% Unique:
  %%    _10
  _39 = bif:'=:=' _10, `gurka`
  br _39, ^38, ^31

38:
  %% beam_validator_SUITE.erl:588
  %% Result type:
  %%    'gaffel' | 'gurka'
  _11 = call (`aliased_types_3`/1), `[gaffel]`

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _11 => 'gaffel' | 'gurka'
  %% Unique:
  %%    _11
  _36 = bif:'=:=' _11, `gaffel`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% beam_validator_SUITE.erl:588
  _12 = match_fail `badmatch`, `gurka`

  %% Unique:
  %%    _12
  _37 = succeeded:body _12
  br ^1

31:
  %% beam_validator_SUITE.erl:587
  _13 = match_fail `badmatch`, `gaffel`

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br ^1

28:
  %% beam_validator_SUITE.erl:585
  %% Aliased:
  %%    _9
  _14 = match_fail `badmatch`, _9

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br ^1

25:
  %% beam_validator_SUITE.erl:584
  %% Aliased:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _44 = succeeded:body _15
  br ^1

22:
  %% beam_validator_SUITE.erl:582
  %% Aliased:
  %%    _7
  _16 = match_fail `badmatch`, _7

  %% Unique:
  %%    _16
  _47 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:599
%% Counter = 14
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`aliased_types_1`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _9 = bif:'=:=' _1, `[gurka,gaffel]`
  br _9, ^8, ^9

8:
  %% beam_validator_SUITE.erl:600
  _5 = match_fail `if_clause`

  %% Unique:
  %%    _5
  _13 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:602
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:hd _0

  %% Aliased:
  %%    _2
  _10 = succeeded:body _2
  br _10, ^10, ^1

10:
  %% beam_validator_SUITE.erl:603
  _3 = call (`lists`:`seq`/2), `1`, `5`

  %% Aliased:
  %%    _3
  _11 = succeeded:body _3
  br _11, ^11, ^1

11:
  %% beam_validator_SUITE.erl:604
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _4 = get_hd _0
  %% Aliased:
  %%    _4
  ret _4

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:608
%% Counter = 26
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`aliased_types_2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _18 = bif:'=:=' _0, `[]`
  br _18, ^18, ^16

18:
  %% beam_validator_SUITE.erl:610
  _9 = call (`id`/1), `42`

  %% Aliased:
  %%    _9
  _17 = succeeded:body _9
  br _17, ^17, ^1

17:
  br ^15

16:
  %% beam_validator_SUITE.erl:611
  %% Argument types:
  %%    _0 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _0
  _10 = bif:hd _0

  %% Aliased:
  %%    _10
  _19 = succeeded:body _10
  br _19, ^19, ^1

19:
  br ^15

15:
  _2 = phi { _9, ^17 }, { _10, ^19 }

  %% Argument types:
  %%    _0 => maybe_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _22 = bif:'=:=' _0, `[]`
  br _22, ^22, ^21

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _24 = put_tuple _2, `none`
  %% Result type:
  %%    {any(), 'none'}
  %% Unique:
  %%    _24
  ret _24

21:
  %% beam_validator_SUITE.erl:615
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _11 = get_hd _0

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _11
  _25 = put_tuple _2, _11
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _25
  ret _25

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_validator_SUITE.erl:620
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('gaffel' | 'gurka')
function `beam_validator_SUITE`:`aliased_types_3`(_0) {
0:
  %% beam_validator_SUITE.erl:621
  %% Result type:
  %%    nonempty_list('gaffel' | 'gurka')
  %% Unique:
  %%    _0
  _6 = call (`'-aliased_types_3/1-lc$^0/1-0-'`/1), _0

  %% Unique:
  %%    _6
  _22 = succeeded:body _6
  br _22, ^26, ^1

26:
  %% beam_validator_SUITE.erl:629
  %% Argument types:
  %%    _6 => nonempty_list('gaffel' | 'gurka')
  %% Unique:
  %%    _6
  _19 = get_hd _6
  %% Result type:
  %%    'gaffel' | 'gurka'
  %% Unique:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_validator_SUITE.erl:638
%% Counter = 16
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`type_conflict`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% beam_validator_SUITE.erl:639
  %% Result type:
  %%    {'e1', any()}
  _3 = call (`type_conflict_1`/1), `{r,e1,e2}`

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => {'e1', any()}
  %% Aliased:
  %%    _3
  _13 = bif:'=:=' _3, `{e1,e2}`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_validator_SUITE.erl:639
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _14 = succeeded:body _4
  br ^1

8:
  %% beam_validator_SUITE.erl:638
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-type_conflict/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:642
%% Counter = 91
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'r', 'e1', 'e2'}
function `beam_validator_SUITE`:`type_conflict_1`(_0) {
0:
  %% beam_validator_SUITE.erl:643
  Src = call (`id`/1), `e2`

  %% Aliased:
  %%    Src
  _48 = succeeded:body Src
  br _48, ^89, ^1

89:
  br ^90

90:
  _53 = new_try_tag `'try'`
  br _53, ^52, ^50

52:
  %% beam_validator_SUITE.erl:644
  %% Aliased:
  %%    Src
  _32 = call (`id`/1), Src

  %% Aliased:
  %%    _32
  _54 = succeeded:body _32
  br _54, ^54, ^50

54:
  %% Unique:
  %%    _53
  _61 = kill_try_tag _53

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _72 = put_tuple `e1`, _32
  %% Result type:
  %%    {'e1', any()}
  %% Unique:
  %%    _72
  ret _72

50:
  %% Unique:
  %%    _53
  _59 = landingpad `'try'`, _53

  %% Aliased:
  %%    _59
  _7 = extract _59, `1`

  %% Aliased:
  %%    _59
  _6 = extract _59, `2`

  %% Unique:
  %%    _53
  _60 = kill_try_tag _53
  br ^56

56:
  %% Aliased:
  %%    _6, 
  %%    _7
  _34 = resume _6, _7

  %% Unique:
  %%    _34
  _58 = succeeded:body _34
  br ^1

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37
}

%% beam_validator_SUITE.erl:655
%% Counter = 48
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_eq`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:is_list _0
  br _22, ^22, ^21

22:
  %% beam_validator_SUITE.erl:656
  _1 = call (`id`/1), `{gurka}`

  %% Aliased:
  %%    _1
  _23 = succeeded:body _1
  br _23, ^23, ^1

23:
  %% beam_validator_SUITE.erl:656
  %% Result type:
  %%    {'ok', any()}
  %% Aliased:
  %%    _1
  _10 = call (`infer_on_eq_1`/1), _1

  %% Aliased:
  %%    _10
  _24 = succeeded:body _10
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _10 => {'ok', any()}
  %% Aliased:
  %%    _10
  _45 = bif:'=:=' _10, `{ok,gurka}`
  br _45, ^45, ^26

45:
  %% beam_validator_SUITE.erl:657
  _3 = call (`id`/1), `{gaffel}`

  %% Aliased:
  %%    _3
  _27 = succeeded:body _3
  br _27, ^27, ^1

27:
  %% beam_validator_SUITE.erl:657
  %% Result type:
  %%    {'ok', any()}
  %% Aliased:
  %%    _3
  _11 = call (`infer_on_eq_2`/1), _3

  %% Aliased:
  %%    _11
  _28 = succeeded:body _11
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _11 => {'ok', any()}
  %% Aliased:
  %%    _11
  _43 = bif:'=:=' _11, `{ok,gaffel}`
  br _43, ^43, ^30

43:
  %% beam_validator_SUITE.erl:658
  _5 = call (`id`/1), `{elefant}`

  %% Aliased:
  %%    _5
  _31 = succeeded:body _5
  br _31, ^31, ^1

31:
  %% beam_validator_SUITE.erl:658
  %% Result type:
  %%    {'ok', any()}
  %% Aliased:
  %%    _5
  _12 = call (`infer_on_eq_3`/1), _5

  %% Aliased:
  %%    _12
  _32 = succeeded:body _12
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _12 => {'ok', any()}
  %% Aliased:
  %%    _12
  _41 = bif:'=:=' _12, `{ok,elefant}`
  br _41, ^41, ^34

41:
  %% beam_validator_SUITE.erl:659
  _7 = call (`id`/1), `{myra}`

  %% Aliased:
  %%    _7
  _35 = succeeded:body _7
  br _35, ^35, ^1

35:
  %% beam_validator_SUITE.erl:659
  %% Result type:
  %%    {'ok', any()}
  %% Aliased:
  %%    _7
  _13 = call (`infer_on_eq_4`/1), _7

  %% Aliased:
  %%    _13
  _36 = succeeded:body _13
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _13 => {'ok', any()}
  %% Aliased:
  %%    _13
  _39 = bif:'=:=' _13, `{ok,myra}`
  br _39, ^39, ^38

39:
  %% Result type:
  %%    'ok'
  ret `ok`

38:
  %% beam_validator_SUITE.erl:659
  %% Aliased:
  %%    _13
  _14 = match_fail `badmatch`, _13

  %% Unique:
  %%    _14
  _40 = succeeded:body _14
  br ^1

34:
  %% beam_validator_SUITE.erl:658
  %% Aliased:
  %%    _12
  _15 = match_fail `badmatch`, _12

  %% Unique:
  %%    _15
  _42 = succeeded:body _15
  br ^1

30:
  %% beam_validator_SUITE.erl:657
  %% Aliased:
  %%    _11
  _16 = match_fail `badmatch`, _11

  %% Unique:
  %%    _16
  _44 = succeeded:body _16
  br ^1

26:
  %% beam_validator_SUITE.erl:656
  %% Aliased:
  %%    _10
  _17 = match_fail `badmatch`, _10

  %% Unique:
  %%    _17
  _46 = succeeded:body _17
  br ^1

21:
  %% beam_validator_SUITE.erl:655
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-infer_on_eq/1-',1}}
  _18 = match_fail `function_clause`, _0

  %% Unique:
  %%    _18
  _47 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_validator_SUITE.erl:662
%% Counter = 15
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_eq_1`(_0) {
0:
  %% beam_validator_SUITE.erl:663
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _3 = bif:tuple_size _0

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    _3 => 0..16777215
  %% Unique:
  %%    _3
  _13 = bif:'=:=' _3, `1`
  br _13, ^11, ^10

11:
  %% beam_validator_SUITE.erl:664
  %% Argument types:
  %%    _0 => {any()}
  %% Aliased:
  %%    _0
  _2 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _4 = put_tuple `ok`, _2
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _4
  ret _4

10:
  %% beam_validator_SUITE.erl:663
  %% Unique:
  %%    _3
  _5 = match_fail `badmatch`, _3

  %% Unique:
  %%    _5
  _14 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:666
%% Counter = 14
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_eq_2`(_0) {
0:
  %% beam_validator_SUITE.erl:667
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  Size = bif:tuple_size _0

  %% Unique:
  %%    Size
  _8 = succeeded:body Size
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    Size => 0..16777215
  %% Unique:
  %%    Size
  _11 = bif:'=:=' Size, `1`
  br _11, ^12, ^10

12:
  %% beam_validator_SUITE.erl:669
  %% Argument types:
  %%    _0 => {any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _4 = put_tuple `ok`, _3
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _4
  ret _4

10:
  %% beam_validator_SUITE.erl:668
  _5 = match_fail `badmatch`, `1`

  %% Unique:
  %%    _5
  _13 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:671
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_eq_3`(_0) {
0:
  %% beam_validator_SUITE.erl:672
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:tuple_size _0

  %% Unique:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% beam_validator_SUITE.erl:672
  %% Argument types:
  %%    _1 => 0..16777215
  %% Unique:
  %%    _1
  _4 = bif:'=:=' _1, `1`
  br _4, ^12, ^11

12:
  %% beam_validator_SUITE.erl:673
  %% Argument types:
  %%    _0 => {any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _5 = put_tuple `ok`, _3
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _5
  ret _5

11:
  %% beam_validator_SUITE.erl:672
  _6 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:675
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_eq_4`(_0) {
0:
  %% beam_validator_SUITE.erl:676
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:tuple_size _0

  %% Unique:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% beam_validator_SUITE.erl:676
  %% Argument types:
  %%    _1 => 0..16777215
  %% Unique:
  %%    _1
  _4 = bif:'=:=' _1, `1`
  br _4, ^12, ^11

12:
  %% beam_validator_SUITE.erl:677
  %% Argument types:
  %%    _0 => {any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _5 = put_tuple `ok`, _3
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _5
  ret _5

11:
  %% beam_validator_SUITE.erl:676
  _6 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:683
%% Counter = 56
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_dead_value`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:is_list _0
  br _22, ^22, ^21

22:
  %% beam_validator_SUITE.erl:684
  %% Result type:
  %%    'a' | 'c' | 'error'
  _8 = call (`idv_1`/2), `{a,b,c,d,e,f,g}`, `{0,0,0,0,0,0,0}`

  %% Unique:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => 'a' | 'c' | 'error'
  %% Unique:
  %%    _8
  _52 = bif:'=:=' _8, `a`
  br _52, ^51, ^25

51:
  %% beam_validator_SUITE.erl:685
  %% Result type:
  %%    'b' | 'error'
  _9 = call (`idv_1`/2), `{a,b,c,d,0,0,0}`, `{a,b,c,d,0,0,0}`

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _9 => 'b' | 'error'
  %% Unique:
  %%    _9
  _49 = bif:'=:=' _9, `b`
  br _49, ^48, ^28

48:
  %% beam_validator_SUITE.erl:686
  %% Result type:
  %%    'c' | 'error'
  _10 = call (`idv_1`/2), `{0,0,0,0,0,f,g}`, `{0,0,0,0,0,f,g}`

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _10 => 'c' | 'error'
  %% Unique:
  %%    _10
  _46 = bif:'=:=' _10, `c`
  br _46, ^45, ^31

45:
  %% beam_validator_SUITE.erl:687
  %% Result type:
  %%    'error'
  _11 = call (`idv_1`/2), `gurka`, `gaffel`

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^42, ^1

42:
  %% beam_validator_SUITE.erl:689
  _5 = call (`id`/1), `{idv,undefined}`

  %% Aliased:
  %%    _5
  _35 = succeeded:body _5
  br _35, ^35, ^1

35:
  %% beam_validator_SUITE.erl:689
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  _12 = call (`idv_2`/1), _5

  %% Unique:
  %%    _12
  _36 = succeeded:body _12
  br _36, ^55, ^1

55:
  ret _12

31:
  %% beam_validator_SUITE.erl:686
  _15 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _15
  _47 = succeeded:body _15
  br ^1

28:
  %% beam_validator_SUITE.erl:685
  _16 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _16
  _50 = succeeded:body _16
  br ^1

25:
  %% beam_validator_SUITE.erl:684
  %% Unique:
  %%    _8
  _17 = match_fail `badmatch`, _8

  %% Unique:
  %%    _17
  _53 = succeeded:body _17
  br ^1

21:
  %% beam_validator_SUITE.erl:683
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-infer_dead_value/1-',1}}
  _18 = match_fail `function_clause`, _0

  %% Unique:
  %%    _18
  _54 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_validator_SUITE.erl:693
%% Counter = 105
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'gurka' | {'a', 'b', 'c', 'd', 'e' | 0, 'f' | 0, 'g' | 0} | {0, 0, 0, 0, 0, 'f', 'g'}
%%    _1 =>
%%     'gaffel' | {'a', 'b', 'c', 'd', 0, 0, 0} | {0, 0, 0, 0, 0, 'f' | 0, 'g' | 0}
function `beam_validator_SUITE`:`idv_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 'gurka' | {'a', 'b', 'c', 'd', 'e' | 0, 'f' | 0, 'g' | 0} | {0, 0, 0, 0, 0, 'f', 'g'}
  %% Unique:
  %%    _0
  _90 = bif:is_tuple _0
  br _90, ^89, ^46

89:
  %% Argument types:
  %%    _1 => 'gaffel' | {'a', 'b', 'c', 'd', 0, 0, 0} | {0, 0, 0, 0, 0, 'f' | 0, 'g' | 0}
  %% Unique:
  %%    _1
  _86 = bif:is_tuple _1
  br _86, ^85, ^46

85:
  %% Argument types:
  %%    _1 => {'a', 'b', 'c', 'd', 0, 0, 0} | {0, 0, 0, 0, 0, 'f' | 0, 'g' | 0}
  %% Unique:
  %%    _1
  _41 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {'a', 'b', 'c', 'd', 0, 0, 0} | {0, 0, 0, 0, 0, 'f' | 0, 'g' | 0}
  %% Unique:
  %%    _1
  _36 = get_tuple_element _1, `5`

  %% Argument types:
  %%    _1 => {'a', 'b', 'c', 'd', 0, 0, 0} | {0, 0, 0, 0, 0, 'f' | 0, 'g' | 0}
  %% Unique:
  %%    _1
  _35 = get_tuple_element _1, `6`

  %% Argument types:
  %%    _41 => 'a' | 0
  %% Aliased:
  %%    _41
  _61 = bif:'=:=' _41, `0`
  br _61, ^52, ^67

52:
  %% Argument types:
  %%    _36 => 'f' | 0
  %% Aliased:
  %%    _36
  _51 = bif:'=:=' _36, `0`
  br _51, ^50, ^62

50:
  %% Argument types:
  %%    _35 => 'g' | 0
  %% Aliased:
  %%    _35
  _49 = bif:'=:=' _35, `0`
  br _49, ^48, ^62

48:
  %% Result type:
  %%    'a'
  ret `a`

67:
  %% Argument types:
  %%    _0 => {'a', 'b', 'c', 'd', 'e' | 0, 'f' | 0, 'g' | 0} | {0, 0, 0, 0, 0, 'f', 'g'}
  %% Unique:
  %%    _0
  _34 = get_tuple_element _0, `0`

  %% beam_validator_SUITE.erl:697
  %% Argument types:
  %%    _34 => 'a' | 0
  %% Aliased:
  %%    _34
  _12 = bif:'=:=' _34, `a`
  br _12, ^66, ^62

66:
  %% Result type:
  %%    'b'
  ret `b`

62:
  %% Argument types:
  %%    _41 => 'a' | 0
  %% Aliased:
  %%    _41
  _84 = bif:'=:=' _41, `0`
  br _84, ^75, ^46

75:
  %% Argument types:
  %%    _0 => {'a', 'b', 'c', 'd', 'e' | 0, 'f' | 0, 'g' | 0} | {0, 0, 0, 0, 0, 'f', 'g'}
  %% Unique:
  %%    _0
  _29 = get_tuple_element _0, `5`

  %% beam_validator_SUITE.erl:700
  %% Argument types:
  %%    _36 => 'f' | 0
  %%    _29 => 'f' | 0
  %% Aliased:
  %%    _29, 
  %%    _36
  _16 = bif:'=:=' _36, _29
  br _16, ^95, ^46

95:
  %% Argument types:
  %%    _0 => {'a', 'b', 'c', 'd', 'e' | 0, 'f' | 0, 'g' | 0} | {0, 0, 0, 0, 0, 'f', 'g'}
  %% Unique:
  %%    _0
  _28 = get_tuple_element _0, `6`

  %% beam_validator_SUITE.erl:700
  %% Argument types:
  %%    _35 => 'g' | 0
  %%    _28 => 'g' | 0
  %% Aliased:
  %%    _28, 
  %%    _35
  _17 = bif:'=:=' _35, _28
  br _17, ^74, ^46

74:
  %% Result type:
  %%    'c'
  ret `c`

46:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_validator_SUITE.erl:711
%% Counter = 28
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_on_ne`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _14 = bif:is_list _0
  br _14, ^14, ^13

14:
  %% beam_validator_SUITE.erl:712
  _1 = call (`id`/1), `open`

  %% Aliased:
  %%    _1
  _15 = succeeded:body _1
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _5 = put_tuple `ion`, _1

  %% beam_validator_SUITE.erl:712
  %% Result type:
  %%    'ok' | {'ion', 'closing'}
  %% Unique:
  %%    _5
  _6 = call (`ion_1`/1), _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _6 => 'ok' | {'ion', 'closing'}
  %% Unique:
  %%    _6
  _24 = bif:'=:=' _6, `{ion,closing}`
  br _24, ^24, ^18

24:
  %% beam_validator_SUITE.erl:713
  %% Result type:
  %%    {'ion', 'closing'}
  _7 = call (`ion_close`/1), `{ion,open}`

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^22, ^1

22:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% beam_validator_SUITE.erl:712
  _9 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br ^1

13:
  %% beam_validator_SUITE.erl:711
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-infer_on_ne/1-',1}}
  _10 = match_fail `function_clause`, _0

  %% Unique:
  %%    _10
  _26 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_validator_SUITE.erl:716
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'ion', any()}
function `beam_validator_SUITE`:`ion_1`(_0) {
0:
  %% Argument types:
  %%    _0 => {'ion', any()}
  %% Unique:
  %%    _0
  _3 = get_tuple_element _0, `1`
  switch _3, ^10, [
    { `closing`, ^14 },
    { `open`, ^14 }
  ]

14:
  %% beam_validator_SUITE.erl:717
  %% Result type:
  %%    'ok' | {'ion', 'closing'}
  %% Unique:
  %%    _0
  _5 = call (`ion_2`/1), _0

  %% Unique:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Result type:
  %%    'ok' | {'ion', 'closing'}
  %% Unique:
  %%    _5
  ret _5

10:
  %% beam_validator_SUITE.erl:716
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-ion_1/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:719
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'ion', 'closing' | 'open'}
function `beam_validator_SUITE`:`ion_2`(_0) {
0:
  %% Argument types:
  %%    _0 => {'ion', 'closing' | 'open'}
  %% Unique:
  %%    _0
  _2 = get_tuple_element _0, `1`

  %% Unique:
  %%    _2
  _19 = bif:'=:=' _2, `open`
  br _19, ^11, ^10

11:
  %% beam_validator_SUITE.erl:719
  %% Result type:
  %%    {'ion', 'closing'}
  _4 = call (`ion_close`/1), `{ion,open}`

  %% Unique:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^9, ^1

9:
  %% Result type:
  %%    {'ion', 'closing'}
  %% Unique:
  %%    _4
  ret _4

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6

10:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:722
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'ion', 'open'}
function `beam_validator_SUITE`:`ion_close`(_0) {
0:
  %% Result type:
  %%    {'ion', 'closing'}
  ret `{ion,closing}`
}

%% beam_validator_SUITE.erl:728
%% Counter = 42
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`idv_2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _24 = is_tagged_tuple _0, `2`, `idv`
  br _24, ^19, ^20

19:
  %% Argument types:
  %%    _0 => {'idv', any()}
  %% Aliased:
  %%    _0
  _9 = get_tuple_element _0, `1`

  %% beam_validator_SUITE.erl:729
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  Flag = bif:'=:=' _9, `undefined`

  %% beam_validator_SUITE.erl:730
  _11 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _11
  _28 = succeeded:body _11
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _33 = bif:is_tuple _11
  br _33, ^33, ^29

33:
  %% Argument types:
  %%    _11 => {...}
  %% Aliased:
  %%    _11
  _34 = bif:tuple_size _11

  %% Argument types:
  %%    _34 => 0..16777215
  %% Unique:
  %%    _34
  _35 = bif:'=:=' _34, `1`
  br _35, ^32, ^29

32:
  %% Argument types:
  %%    Flag => 'false' | 'true'
  %% Unique:
  %%    Flag
  _13 = put_list Flag, `[]`

  %% beam_validator_SUITE.erl:731
  %% Unique:
  %%    _13
  _15 = call (`id`/1), _13

  %% Aliased:
  %%    _15
  _31 = succeeded:body _15
  br _31, ^29, ^1

29:
  br Flag, ^38, ^37

38:
  %% beam_validator_SUITE.erl:735
  %% Result type:
  %%    'ok'
  _16 = call (`idv_called_once`/1), `{idv,undefined}`

  %% Unique:
  %%    _16
  _39 = succeeded:body _16
  br _39, ^39, ^1

39:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _16
  ret _16

37:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% beam_validator_SUITE.erl:729
  %% Aliased:
  %%    _0
  _14 = match_fail `badrecord`, _0

  %% Unique:
  %%    _14
  _27 = succeeded:body _14
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:739
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'idv', 'undefined'}
function `beam_validator_SUITE`:`idv_called_once`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:744
%% Counter = 12
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`branch_to_try_handler`(_0) {
0:
  %% beam_validator_SUITE.erl:745
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _3 = call (`do_val`/2), `branch_to_try_handler`, _0

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _10 = bif:'=:=' _3, `[{{branch_to_try_handler,main,1},
   {{bif,tuple_size,{f,3},[{y,0}],{x,0}},13,{illegal_branch,try_handler,3}}}]`
  br _10, ^10, ^9

10:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% beam_validator_SUITE.erl:746
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_validator_SUITE.erl:752
%% Counter = 79
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`receive_marker`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _34 = bif:is_list _0
  br _34, ^34, ^33

34:
  %% beam_validator_SUITE.erl:753
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _7 = call (`do_val`/2), `receive_marker`, _0

  %% Aliased:
  %%    _7
  _35 = succeeded:body _7
  br _35, ^35, ^1

35:
  %% Aliased:
  %%    _7
  _76 = is_nonempty_list _7
  br _76, ^76, ^37

76:
  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _9 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _8 = get_tl _7

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _73 = bif:is_tuple _9
  br _73, ^73, ^37

73:
  %% Argument types:
  %%    _9 => {...}
  %% Aliased:
  %%    _9
  _74 = bif:tuple_size _9

  %% Argument types:
  %%    _74 => 0..16777215
  %% Unique:
  %%    _74
  _75 = bif:'=:=' _74, `2`
  br _75, ^72, ^37

72:
  %% Argument types:
  %%    _9 => {any(), any()}
  %% Aliased:
  %%    _9
  _11 = get_tuple_element _9, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _71 = bif:'=:=' _11, `{receive_marker,t1,1}`
  br _71, ^71, ^37

71:
  %% Argument types:
  %%    _9 => {{'receive_marker', 't1', 1}, any()}
  %% Aliased:
  %%    _9
  _10 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _68 = is_tagged_tuple _10, `3`, `return`
  br _68, ^65, ^37

65:
  %% Argument types:
  %%    _10 => {'return', any(), any()}
  %% Aliased:
  %%    _10
  _12 = get_tuple_element _10, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _64 = bif:'=:=' _12, `{return_in_receive,entered_loop}`
  br _64, ^64, ^37

64:
  %% Aliased:
  %%    _8
  _63 = is_nonempty_list _8
  br _63, ^63, ^37

63:
  %% Argument types:
  %%    _8 => nonempty_list(any())
  %% Aliased:
  %%    _8
  _16 = get_hd _8

  %% Argument types:
  %%    _8 => nonempty_list(any())
  %% Aliased:
  %%    _8
  _15 = get_tl _8

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _60 = bif:is_tuple _16
  br _60, ^60, ^37

60:
  %% Argument types:
  %%    _16 => {...}
  %% Aliased:
  %%    _16
  _61 = bif:tuple_size _16

  %% Argument types:
  %%    _61 => 0..16777215
  %% Unique:
  %%    _61
  _62 = bif:'=:=' _61, `2`
  br _62, ^59, ^37

59:
  %% Argument types:
  %%    _16 => {any(), any()}
  %% Aliased:
  %%    _16
  _18 = get_tuple_element _16, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _58 = bif:'=:=' _18, `{receive_marker,t2,1}`
  br _58, ^58, ^37

58:
  %% Argument types:
  %%    _16 => {{'receive_marker', 't2', 1}, any()}
  %% Aliased:
  %%    _16
  _17 = get_tuple_element _16, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _55 = bif:is_tuple _17
  br _55, ^55, ^37

55:
  %% Argument types:
  %%    _17 => {...}
  %% Aliased:
  %%    _17
  _56 = bif:tuple_size _17

  %% Argument types:
  %%    _56 => 0..16777215
  %% Unique:
  %%    _56
  _57 = bif:'=:=' _56, `3`
  br _57, ^54, ^37

54:
  %% Argument types:
  %%    _17 => {any(), any(), any()}
  %% Aliased:
  %%    _17
  _21 = get_tuple_element _17, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _53 = bif:'=:=' _21, `{call_last,1,{f,2},1}`
  br _53, ^53, ^37

53:
  %% Argument types:
  %%    _17 => {{'call_last', 1, {'f', 2}, 1}, any(), any()}
  %% Aliased:
  %%    _17
  _19 = get_tuple_element _17, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _52 = bif:'=:=' _19, `{return_in_receive,entered_loop}`
  br _52, ^52, ^37

52:
  %% Aliased:
  %%    _15
  _51 = is_nonempty_list _15
  br _51, ^51, ^37

51:
  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    _15
  _23 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    _15
  _22 = get_tl _15

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _48 = bif:is_tuple _23
  br _48, ^48, ^37

48:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _49 = bif:tuple_size _23

  %% Argument types:
  %%    _49 => 0..16777215
  %% Unique:
  %%    _49
  _50 = bif:'=:=' _49, `2`
  br _50, ^47, ^37

47:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Aliased:
  %%    _23
  _25 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _46 = bif:'=:=' _25, `{receive_marker,t3,1}`
  br _46, ^46, ^37

46:
  %% Argument types:
  %%    _23 => {{'receive_marker', 't3', 1}, any()}
  %% Aliased:
  %%    _23
  _24 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _43 = is_tagged_tuple _24, `3`, `return`
  br _43, ^40, ^37

40:
  %% Argument types:
  %%    _24 => {'return', any(), any()}
  %% Aliased:
  %%    _24
  _26 = get_tuple_element _24, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _39 = bif:'=:=' _26, `{return_in_receive,entered_loop}`
  br _39, ^39, ^37

39:
  %% Argument types:
  %%    _22 => list(any())
  %% Aliased:
  %%    _22
  _38 = bif:'=:=' _22, `[]`
  br _38, ^38, ^37

38:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% beam_validator_SUITE.erl:755
  %% Aliased:
  %%    _7
  _29 = match_fail `badmatch`, _7

  %% Unique:
  %%    _29
  _77 = succeeded:body _29
  br ^1

33:
  %% beam_validator_SUITE.erl:752
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-receive_marker/1-',1}}
  _30 = match_fail `function_clause`, _0

  %% Unique:
  %%    _30
  _78 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_validator_SUITE.erl:769
%% Counter = 17
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`safe_instructions`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_validator_SUITE.erl:770
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _4 = call (`do_val`/2), `safe_instructions`, _0

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    _4 => list(any())
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% beam_validator_SUITE.erl:772
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% beam_validator_SUITE.erl:769
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-safe_instructions/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_validator_SUITE.erl:776
%% Counter = 53
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`missing_return_type`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _23 = bif:is_list _0
  br _23, ^23, ^22

23:
  %% beam_validator_SUITE.erl:780
  %% Result type:
  %%    'false' | 'true'
  _11 = call (`mrt_1`/1), `true`

  %% Unique:
  %%    _11
  _24 = succeeded:body _11
  br _24, ^24, ^1

24:
  br _11, ^49, ^26

49:
  %% beam_validator_SUITE.erl:781
  %% Result type:
  %%    'false' | 'true'
  _12 = call (`mrt_1`/1), `false`

  %% Unique:
  %%    _12
  _27 = succeeded:body _12
  br _27, ^27, ^1

27:
  br _12, ^29, ^46

29:
  %% beam_validator_SUITE.erl:781
  _17 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _17
  _48 = succeeded:body _17
  br ^1

46:
  %% beam_validator_SUITE.erl:782
  _4 = call (`id`/1), `hello`

  %% Aliased:
  %%    _4
  _30 = succeeded:body _4
  br _30, ^30, ^1

30:
  %% beam_validator_SUITE.erl:782
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _5 = has_map_field `#{hello => there}`, _4

  %% beam_validator_SUITE.erl:782
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _5
  _13 = call (`mrt_1`/1), _5

  %% Unique:
  %%    _13
  _32 = succeeded:body _13
  br _32, ^32, ^1

32:
  br _13, ^43, ^34

43:
  %% beam_validator_SUITE.erl:783
  _7 = call (`id`/1), `there`

  %% Aliased:
  %%    _7
  _35 = succeeded:body _7
  br _35, ^35, ^1

35:
  %% beam_validator_SUITE.erl:783
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _8 = has_map_field `#{hello => there}`, _7

  %% beam_validator_SUITE.erl:783
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _8
  _14 = call (`mrt_1`/1), _8

  %% Unique:
  %%    _14
  _37 = succeeded:body _14
  br _37, ^37, ^1

37:
  br _14, ^39, ^40

39:
  %% beam_validator_SUITE.erl:783
  _15 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _15
  _42 = succeeded:body _15
  br ^1

40:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% beam_validator_SUITE.erl:782
  _16 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _16
  _45 = succeeded:body _16
  br ^1

26:
  %% beam_validator_SUITE.erl:780
  _18 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _18
  _51 = succeeded:body _18
  br ^1

22:
  %% beam_validator_SUITE.erl:776
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-missing_return_type/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _52 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_validator_SUITE.erl:787
%% Counter = 13
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
function `beam_validator_SUITE`:`mrt_1`(_0) {
0:
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _0
  ret _0
}

%% beam_validator_SUITE.erl:792
%% Counter = 18
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bs_saved_position_units`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:is_list _0
  br _11, ^11, ^10

11:
  %% beam_validator_SUITE.erl:858
  %% Result type:
  %%    list(any())
  _5 = call (`beam_val`/1), `{bs_saved_position_units,
     [{no_errors,1},{some_errors,1}],
     [],
     [{function,ctx_test_8,1,2,
          [{label,1},
           {func_info,{atom,bs_saved_position_units},{atom,ctx_test_8},1},
           {label,2},
           {'%',
               {var_info,
                   {x,0},
                   [{type,{t_bs_context,8}},accepts_match_context]}},
           {move,nil,{x,0}},
           return]},
      {function,no_errors,1,4,
          [{label,3},
           {func_info,{atom,bs_saved_position_units},{atom,no_errors},1},
           {label,4},
           {'%',{var_info,{x,0},[accepts_match_context]}},
           {test,bs_start_match3,{f,3},1,[{x,0}],{x,1}},
           {bs_get_position,{x,1},{x,0},2},
           {test,bs_test_unit,{f,5},[{x,1},8]},
           {bs_set_position,{x,1},{x,0}},
           {test,bs_get_binary2,
               {f,5},
               2,
               [{x,1},{atom,all},1,{field_flags,[unsigned,big]}],
               {x,2}},
           {bs_set_position,{x,1},{x,0}},
           {bs_get_tail,{x,1},{x,0},3},
           {test,is_eq_exact,{f,5},[{x,2},{x,0}]},
           {move,{x,1},{x,0}},
           {call_only,1,{f,2}},
           {label,5},
           {bs_get_tail,{x,1},{x,0},2},
           {jump,{f,3}}]},
      {function,some_errors,1,7,
          [{label,6},
           {func_info,{atom,bs_saved_position_units},{atom,some_errors},1},
           {label,7},
           {'%',{var_info,{x,0},[accepts_match_context]}},
           {test,bs_start_match3,{f,6},1,[{x,0}],{x,1}},
           {bs_get_position,{x,1},{x,0},2},
           {test,bs_get_binary2,
               {f,8},
               2,
               [{x,1},{atom,all},4,{field_flags,[unsigned,big]}],
               {x,2}},
           {bs_set_position,{x,1},{x,0}},
           {test,bs_test_unit,{f,9},[{x,1},3]},
           {bs_set_position,{x,1},{x,0}},
           {bs_get_tail,{x,1},{x,0},3},
           {test,is_eq_exact,{f,8},[{x,2},{x,0}]},
           {move,{x,1},{x,0}},
           {call_only,1,{f,2}},
           {label,8},
           {bs_get_tail,{x,1},{x,0},2},
           {jump,{f,6}},
           {label,9},
           {move,nil,{x,0}},
           return]}],
     10}`

  %% Aliased:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _5 => list(any())
  %% Aliased:
  %%    _5
  _15 = bif:'=:=' _5, `[{{bs_saved_position_units,some_errors,1},
   {{call_only,1,{f,2}},
    14,
    {bad_arg_type,{x,0},{t_bs_context,12},{t_bs_context,8}}}}]`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_validator_SUITE.erl:860
  %% Aliased:
  %%    _5
  _6 = match_fail `badmatch`, _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

10:
  %% beam_validator_SUITE.erl:792
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bs_saved_position_units/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:871
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> 'false' | 'true')
function `beam_validator_SUITE`:`transform_remove`(_0, _1) {
0:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _11 = make_fun (`'-transform_remove/2-fun-1-'`/2), _0

  %% beam_validator_SUITE.erl:872
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _1, 
  %%    _11
  _22 = call (`transform_is`/2), _11, _1

  %% Aliased:
  %%    _22
  _25 = succeeded:body _22
  br _25, ^25, ^1

25:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _22
  ret _22

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% beam_validator_SUITE.erl:874
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `beam_validator_SUITE`:`transform_i`(_0, _1) {
0:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0
  _10 = make_fun (`'-transform_i/2-fun-1-'`/2), _0

  %% beam_validator_SUITE.erl:875
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _1, 
  %%    _10
  _18 = call (`transform_is`/2), _10, _1

  %% Aliased:
  %%    _18
  _21 = succeeded:body _18
  br _21, ^21, ^1

21:
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Aliased:
  %%    _18
  ret _18

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_validator_SUITE.erl:877
%% Counter = 35
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> list(any()))
function `beam_validator_SUITE`:`transform_is`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _30 = bif:is_tuple _1
  br _30, ^30, ^27

30:
  %% Argument types:
  %%    _1 => {...}
  %% Aliased:
  %%    _1
  _31 = bif:tuple_size _1

  %% Argument types:
  %%    _31 => 0..16777215
  %% Unique:
  %%    _31
  _32 = bif:'=:=' _31, `5`
  br _32, ^34, ^27

34:
  %% Argument types:
  %%    _1 => {any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _13 = get_tuple_element _1, `3`

  %% beam_validator_SUITE.erl:878
  %% Result type:
  %%    list({'function', any(), any(), any(), list(any())})
  %% Aliased:
  %%    _0, 
  %%    _13
  _8 = call (`'-transform_is/2-lc$^0/1-0-'`/2), _13, _0

  %% Aliased:
  %%    _8
  _28 = succeeded:body _8
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _1 => {any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _16 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _15 = get_tuple_element _1, `1`

  %% Argument types:
  %%    _1 => {any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _14 = get_tuple_element _1, `2`

  %% Argument types:
  %%    _1 => {any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _12 = get_tuple_element _1, `4`

  %% Argument types:
  %%    _8 => list({'function', any(), any(), any(), list(any())})
  %% Aliased:
  %%    _8, 
  %%    _12, 
  %%    _14, 
  %%    _15, 
  %%    _16
  _23 = put_tuple _16, _15, _14, _8, _12
  %% Result type:
  %%    {any(), any(), any(), list({'function', any(), any(), any(), list(any())}), any()}
  %% Unique:
  %%    _23
  ret _23

27:
  %% beam_validator_SUITE.erl:877
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-transform_is/2-',2}}
  _24 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _24
  _33 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% beam_validator_SUITE.erl:881
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> list(any()))
function `beam_validator_SUITE`:`transform_is_1`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _19 = is_tagged_tuple _1, `5`, `function`
  br _19, ^16, ^14

16:
  %% Argument types:
  %%    _1 => {'function', any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _5 = get_tuple_element _1, `4`

  %% beam_validator_SUITE.erl:882
  %% Result type:
  %%    list(any())
  %% Argument types:
  %%    _0 => fun((_) -> list(any()))
  %% Aliased:
  %%    _0, 
  %%    _5
  Is = call _0, _5

  %% Aliased:
  %%    Is
  _15 = succeeded:body Is
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _1 => {'function', any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _8 = get_tuple_element _1, `1`

  %% Argument types:
  %%    _1 => {'function', any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _7 = get_tuple_element _1, `2`

  %% Argument types:
  %%    _1 => {'function', any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _6 = get_tuple_element _1, `3`

  %% Argument types:
  %%    Is => list(any())
  %% Aliased:
  %%    _6, 
  %%    _7, 
  %%    _8, 
  %%    Is
  _10 = put_tuple `function`, _8, _7, _6, Is
  %% Result type:
  %%    {'function', any(), any(), any(), list(any())}
  %% Unique:
  %%    _10
  ret _10

14:
  %% beam_validator_SUITE.erl:881
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-transform_is_1/2-',2}}
  _11 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _11
  _22 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_validator_SUITE.erl:885
%% Counter = 89
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
function `beam_validator_SUITE`:`do_val`(_0, _1) {
0:
  %% beam_validator_SUITE.erl:886
  %% Aliased:
  %%    _1
  Data = call (`proplists`:`get_value`/2), `data_dir`, _1

  %% Aliased:
  %%    Data
  _60 = succeeded:body Data
  br _60, ^60, ^1

60:
  %% beam_validator_SUITE.erl:887
  %% Aliased:
  %%    _0
  Base = call (`erlang`:`atom_to_list`/1), _0

  %% Aliased:
  %%    Base
  _61 = succeeded:body Base
  br _61, ^61, ^1

61:
  %% beam_validator_SUITE.erl:888
  %% Aliased:
  %%    Base, 
  %%    Data
  File = call (`filename`:`join`/2), Data, Base

  %% Aliased:
  %%    File
  _62 = succeeded:body File
  br _62, ^62, ^1

62:
  %% beam_validator_SUITE.erl:889
  %% Aliased:
  %%    File
  _27 = call (`compile`:`file`/2), File, `[from_asm,no_postopt,return_errors]`

  %% Aliased:
  %%    _27
  _63 = succeeded:body _27
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _86 = bif:is_tuple _27
  br _86, ^86, ^65

86:
  %% Argument types:
  %%    _27 => {...}
  %% Aliased:
  %%    _27
  _87 = bif:tuple_size _27
  %% Argument types:
  %%    
  switch _87, ^65, [
    { `2`, ^85 },
    { `3`, ^84 }
  ]

84:
  %% Argument types:
  %%    _27 => {any(), any(), any()}
  %% Aliased:
  %%    _27
  _30 = get_tuple_element _27, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _80 = bif:'=:=' _30, `error`
  br _80, ^79, ^65

79:
  %% Argument types:
  %%    _27 => {'error', any(), any()}
  %% Aliased:
  %%    _27
  _28 = get_tuple_element _27, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _78 = bif:'=:=' _28, `[]`
  br _78, ^78, ^65

78:
  %% Argument types:
  %%    _27 => {'error', any(), nil()}
  %% Aliased:
  %%    _27
  _29 = get_tuple_element _27, `1`

  %% Aliased:
  %%    _29
  _76 = is_nonempty_list _29
  br _76, ^76, ^67

76:
  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _32 = get_hd _29

  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _31 = get_tl _29

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _73 = bif:is_tuple _32
  br _73, ^73, ^67

73:
  %% Argument types:
  %%    _32 => {...}
  %% Aliased:
  %%    _32
  _74 = bif:tuple_size _32

  %% Argument types:
  %%    _74 => 0..16777215
  %% Unique:
  %%    _74
  _75 = bif:'=:=' _74, `2`
  br _75, ^72, ^67

72:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _71 = bif:'=:=' _31, `[]`
  br _71, ^71, ^67

71:
  %% Argument types:
  %%    _32 => {any(), any()}
  %% Aliased:
  %%    _32
  _34 = get_tuple_element _32, `0`

  %% Argument types:
  %%    Base => list(0..1114111)
  %% Aliased:
  %%    _34, 
  %%    Base
  _68 = bif:'=:=' _34, Base
  br _68, ^68, ^67

68:
  %% Argument types:
  %%    _32 => {list(0..1114111), any()}
  %% Aliased:
  %%    _32
  _33 = get_tuple_element _32, `1`

  %% beam_validator_SUITE.erl:892
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _33
  _11 = call (`'-do_val/2-lc$^0/1-0-'`/1), _33

  %% Aliased:
  %%    _11
  _69 = succeeded:body _11
  br _69, ^69, ^1

69:
  %% beam_validator_SUITE.erl:894
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _11
  _55 = call (`'-do_val/2-lc$^1/1-1-'`/1), _11

  %% Unique:
  %%    _55
  _70 = succeeded:body _55
  br _70, ^70, ^1

70:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11
  ret _11

67:
  %% beam_validator_SUITE.erl:891
  %% Aliased:
  %%    _29
  _56 = match_fail `badmatch`, _29

  %% Unique:
  %%    _56
  _77 = succeeded:body _56
  br ^1

85:
  %% Argument types:
  %%    _27 => {any(), any()}
  %% Aliased:
  %%    _27
  _48 = get_tuple_element _27, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _83 = bif:'=:=' _48, `ok`
  br _83, ^82, ^65

82:
  %% Argument types:
  %%    _27 => {'ok', any()}
  %% Aliased:
  %%    _27
  _47 = get_tuple_element _27, `1`

  %% Argument types:
  %%    _0 => atom()
  %% Aliased:
  %%    _47
  %% Unique:
  %%    _0
  _81 = bif:'=:=' _47, _0
  br _81, ^81, ^65

81:
  %% Result type:
  %%    nil()
  ret `[]`

65:
  %% beam_validator_SUITE.erl:889
  %% Aliased:
  %%    _27
  _57 = match_fail `case_clause`, _27

  %% Unique:
  %%    _57
  _88 = succeeded:body _57
  br ^1

1:
  _58 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _58
}

%% beam_validator_SUITE.erl:900
%% Counter = 72
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'bs_saved_position_units', nonempty_list({'no_errors', 1} | {'some_errors', 1}), nil(), nonempty_list({'function', 'ctx_test_8' | 'no_errors' | 'some_errors', 1, 2..7, nonempty_list('return' | {any(), any(), ...})}), 10} | {'illegal_instruction', nonempty_list({'t', 1} | {'x', 1} | {'y', 0}), nil(), nonempty_list({'function', 't' | 'x' | 'y', 0..1, 2..17, list('bad_func_info' | 'return' | {any(), any(), ...})}), 5} | {'undef_label', nonempty_list({'t', 1}), nil(), nonempty_list({'function', 't' | 'x', 1, 2..17, nonempty_list('return' | {any(), any(), ...})}), 5}
function `beam_validator_SUITE`:`beam_val`(_0) {
0:
  %% beam_validator_SUITE.erl:901
  %% Argument types:
  %%    _0 => {'bs_saved_position_units', nonempty_list({'no_errors', 1} | {'some_errors', 1}), nil(), nonempty_list({'function', 'ctx_test_8' | 'no_errors' | 'some_errors', 1, 2..7, nonempty_list('return' | {any(), any(), ...})}), 10} | {'illegal_instruction', nonempty_list({'t', 1} | {'x', 1} | {'y', 0}), nil(), nonempty_list({'function', 't' | 'x' | 'y', 0..1, 2..17, list('bad_func_info' | 'return' | {any(), any(), ...})}), 5} | {'undef_label', nonempty_list({'t', 1}), nil(), nonempty_list({'function', 't' | 'x', 1, 2..17, nonempty_list('return' | {any(), any(), ...})}), 5}
  %% Unique:
  %%    _0
  _1 = get_tuple_element _0, `0`

  %% beam_validator_SUITE.erl:901
  %% Unique:
  %%    _1
  Name = call (`erlang`:`atom_to_list`/1), _1

  %% Aliased:
  %%    Name
  _52 = succeeded:body Name
  br _52, ^52, ^1

52:
  %% beam_validator_SUITE.erl:902
  %% Unique:
  %%    _0
  _22 = call (`beam_validator`:`validate`/2), _0, `strong`

  %% Aliased:
  %%    _22
  _53 = succeeded:body _22
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _68 = is_tagged_tuple _22, `2`, `error`
  br _68, ^65, ^55

65:
  %% Argument types:
  %%    _22 => {'error', any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% Aliased:
  %%    _23
  _64 = is_nonempty_list _23
  br _64, ^64, ^55

64:
  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _26 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _25 = get_tl _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _61 = bif:is_tuple _26
  br _61, ^61, ^55

61:
  %% Argument types:
  %%    _26 => {...}
  %% Aliased:
  %%    _26
  _62 = bif:tuple_size _26

  %% Argument types:
  %%    _62 => 0..16777215
  %% Unique:
  %%    _62
  _63 = bif:'=:=' _62, `2`
  br _63, ^60, ^55

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _59 = bif:'=:=' _25, `[]`
  br _59, ^59, ^55

59:
  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _28 = get_tuple_element _26, `0`

  %% Argument types:
  %%    Name => list(0..1114111)
  %% Aliased:
  %%    _28, 
  %%    Name
  _56 = bif:'=:=' _28, Name
  br _56, ^56, ^55

56:
  %% Argument types:
  %%    _26 => {list(0..1114111), any()}
  %% Aliased:
  %%    _26
  _27 = get_tuple_element _26, `1`

  %% beam_validator_SUITE.erl:903
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _27
  _9 = call (`'-beam_val/1-lc$^0/1-0-'`/1), _27

  %% Aliased:
  %%    _9
  _57 = succeeded:body _9
  br _57, ^57, ^1

57:
  %% beam_validator_SUITE.erl:905
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9
  _47 = call (`'-beam_val/1-lc$^1/1-1-'`/1), _9

  %% Unique:
  %%    _47
  _58 = succeeded:body _47
  br _58, ^58, ^1

58:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _9
  ret _9

55:
  %% beam_validator_SUITE.erl:902
  %% Aliased:
  %%    _22
  _48 = match_fail `badmatch`, _22

  %% Unique:
  %%    _48
  _71 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% beam_validator_SUITE.erl:910
%% Counter = 59
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`val_dsetel`(_0) {
0:
  %% beam_validator_SUITE.erl:911
  %% Argument types:
  %%    
  _1 = bif:self

  %% beam_validator_SUITE.erl:911
  %% Unique:
  %%    _1
  _10 = call (`erlang`:`'!'`/2), _1, `13`

  %% Aliased:
  %%    _10
  _16 = succeeded:body _10
  br _16, ^57, ^1

57:
  br ^58

58:
  _20 = new_try_tag `'catch'`
  br _20, ^18, ^19

18:
  %% beam_validator_SUITE.erl:912
  %% Result type:
  %%    none()
  _12 = call (`night`/1), `0`

  %% Aliased:
  %%    _12
  _22 = succeeded:body _12
  br ^19

19:
  %% Unique:
  %%    _20
  _25 = landingpad `'catch'`, _20

  %% Aliased:
  %%    _25
  _23 = extract _25, `0`
  br ^17

17:
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _20
  _2 = catch_end _20, _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _37 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _37, ^34, ^28

34:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _6 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _31 = bif:is_tuple _6
  br _31, ^31, ^28

31:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _32 = bif:tuple_size _6

  %% Argument types:
  %%    _32 => 0..16777215
  %% Unique:
  %%    _32
  _33 = bif:'=:=' _32, `2`
  br _33, ^30, ^28

30:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _9 = get_tuple_element _6, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _29 = bif:'=:=' _9, `{try_clause,participating}`
  br _29, ^29, ^28

29:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% beam_validator_SUITE.erl:912
  %% Aliased:
  %%    _2
  _13 = match_fail `badmatch`, _2

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_validator_SUITE.erl:915
%% Counter = 57
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
function `beam_validator_SUITE`:`night`(_0) {
0:
  br ^19

19:
  %% beam_validator_SUITE.erl:916
  _16 = peek_message `none`

  %% Aliased:
  %%    _16
  _51 = succeeded:guard _16
  br _51, ^49, ^50

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _43 = bif:'=:=' _16, `13`
  br _43, ^42, ^31

42:
  _20 = remove_message
  _36 = new_try_tag `'try'`
  br _36, ^35, ^33

35:
  %% beam_validator_SUITE.erl:918
  _22 = match_fail `try_clause`, `participating`

  %% Unique:
  %%    _22
  _37 = succeeded:body _22
  br ^33

33:
  %% Unique:
  %%    _36
  _39 = landingpad `'try'`, _36

  %% Aliased:
  %%    _39
  _9 = extract _39, `1`

  %% Aliased:
  %%    _39
  _8 = extract _39, `2`

  %% Unique:
  %%    _36
  _40 = kill_try_tag _36

  %% Aliased:
  %%    _8, 
  %%    _9
  _23 = resume _8, _9

  %% Unique:
  %%    _23
  _38 = succeeded:body _23
  br ^1

31:
  _24 = recv_next
  br ^19

50:
  _44 = wait_timeout `infinity`

  %% Unique:
  %%    _44
  _45 = succeeded:body _44
  br _45, ^48, ^1

48:
  br ^19

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_validator_SUITE.erl:928
%% Counter = 38
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`will_succeed`(_0) {
0:
  %% beam_validator_SUITE.erl:929
  %% Result type:
  %%    'ok'
  _6 = call (`will_succeed_1`/1), `body`

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^33, ^1

33:
  %% beam_validator_SUITE.erl:931
  %% Argument types:
  %%    
  _2 = bif:self

  %% beam_validator_SUITE.erl:931
  %% Unique:
  %%    _2
  _9 = call (`erlang`:`'!'`/2), _2, `whatever`

  %% Aliased:
  %%    _9
  _19 = succeeded:body _9
  br _19, ^19, ^1

19:
  %% beam_validator_SUITE.erl:932
  %% Result type:
  %%    'error'
  _7 = call (`will_succeed_2`/0)

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^30, ^1

30:
  %% beam_validator_SUITE.erl:934
  %% Argument types:
  %%    
  _4 = bif:self

  %% beam_validator_SUITE.erl:934
  %% Unique:
  %%    _4
  _10 = call (`erlang`:`'!'`/2), _4, `whatever`

  %% Aliased:
  %%    _10
  _23 = succeeded:body _10
  br _23, ^23, ^1

23:
  %% beam_validator_SUITE.erl:935
  %% Result type:
  %%    'error'
  _8 = call (`will_succeed_3`/0)

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^27, ^1

27:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_validator_SUITE.erl:944
%% Counter = 35
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'body'
function `beam_validator_SUITE`:`will_succeed_1`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:957
%% Counter = 56
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`will_succeed_2`() {
0:
  br ^55

55:
  _24 = new_try_tag `'try'`
  br _24, ^23, ^21

23:
  br ^12

12:
  %% beam_validator_SUITE.erl:959
  _9 = peek_message `none`

  %% Aliased:
  %%    _9
  _34 = succeeded:guard _9
  br _34, ^32, ^33

32:
  _16 = remove_message

  %% beam_validator_SUITE.erl:959
  _17 = call (`42`:`name`/0)

  %% Aliased:
  %%    _17
  _35 = succeeded:body _17
  br ^21

33:
  _27 = wait_timeout `infinity`

  %% Unique:
  %%    _27
  _28 = succeeded:body _27
  br _28, ^31, ^21

31:
  br ^12

21:
  %% Unique:
  %%    _24
  _36 = landingpad `'try'`, _24

  %% Unique:
  %%    _24
  _37 = kill_try_tag _24
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_validator_SUITE.erl:968
%% Counter = 56
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`will_succeed_3`() {
0:
  br ^55

55:
  _24 = new_try_tag `'try'`
  br _24, ^23, ^21

23:
  br ^12

12:
  %% beam_validator_SUITE.erl:970
  _9 = peek_message `none`

  %% Aliased:
  %%    _9
  _34 = succeeded:guard _9
  br _34, ^32, ^33

32:
  _16 = remove_message

  %% beam_validator_SUITE.erl:970
  _17 = call (`42`:`name`/2), `a`, `b`

  %% Aliased:
  %%    _17
  _35 = succeeded:body _17
  br ^21

33:
  _27 = wait_timeout `infinity`

  %% Unique:
  %%    _27
  _28 = succeeded:body _27
  br _28, ^31, ^21

31:
  br ^12

21:
  %% Unique:
  %%    _24
  _36 = landingpad `'try'`, _24

  %% Unique:
  %%    _24
  _37 = kill_try_tag _24
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_validator_SUITE.erl:984
%% Counter = 15
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`parent_container`(_0) {
0:
  %% beam_validator_SUITE.erl:985
  _1 = call (`id`/1), `{pc,true}`

  %% Aliased:
  %%    _1
  _8 = succeeded:body _1
  br _8, ^8, ^1

8:
  %% beam_validator_SUITE.erl:985
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _1
  _4 = call (`pc_1`/1), _1

  %% Unique:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^12, ^1

12:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _4
  ret _4

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:987
%% Counter = 31
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`pc_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _26 = is_tagged_tuple _0, `2`, `pc`
  br _26, ^23, ^12

23:
  %% Argument types:
  %%    _0 => {'pc', any()}
  %% Aliased:
  %%    _0
  _5 = get_tuple_element _0, `1`

  %% Aliased:
  %%    _5
  _30 = bif:is_boolean _5
  br _30, ^13, ^14

13:
  %% beam_validator_SUITE.erl:992
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _4 = call (`pc_2`/1), _0

  %% Unique:
  %%    _4
  _17 = succeeded:body _4
  br _17, ^20, ^1

20:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _4
  ret _4

14:
  %% beam_validator_SUITE.erl:988
  %% Aliased:
  %%    _5
  _7 = match_fail `case_clause`, _5

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br ^1

12:
  %% beam_validator_SUITE.erl:987
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pc_1/1-',1}}
  _9 = match_fail `function_clause`, _0

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_validator_SUITE.erl:994
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'pc', 'false' | 'true'}
function `beam_validator_SUITE`:`pc_2`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:998
%% Counter = 269
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`container_performance`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _266 = bif:is_tuple _0
  br _266, ^266, ^94

266:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _267 = bif:tuple_size _0

  %% Argument types:
  %%    _267 => 0..16777215
  %% Unique:
  %%    _267
  _268 = bif:'=:=' _267, `2`
  br _268, ^265, ^94

265:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _35 = get_tuple_element _0, `0`
  switch _35, ^94, [
    { `a`, ^264 },
    { `b`, ^263 }
  ]

263:
  %% Result type:
  %%    {'k1'}
  ret `{k1}`

264:
  %% Argument types:
  %%    _0 => {'a', any()}
  %% Aliased:
  %%    _0
  _34 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _260 = bif:is_tuple _34
  br _260, ^260, ^94

260:
  %% Argument types:
  %%    _34 => {...}
  %% Aliased:
  %%    _34
  _261 = bif:tuple_size _34

  %% Argument types:
  %%    _261 => 0..16777215
  %% Unique:
  %%    _261
  _262 = bif:'=:=' _261, `2`
  br _262, ^259, ^94

259:
  %% Argument types:
  %%    _34 => {any(), any()}
  %% Aliased:
  %%    _34
  _37 = get_tuple_element _34, `0`
  switch _37, ^94, [
    { `a`, ^258 },
    { `b`, ^257 }
  ]

257:
  %% Result type:
  %%    {'k2'}
  ret `{k2}`

258:
  %% Argument types:
  %%    _34 => {'a', any()}
  %% Aliased:
  %%    _34
  _36 = get_tuple_element _34, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _254 = bif:is_tuple _36
  br _254, ^254, ^94

254:
  %% Argument types:
  %%    _36 => {...}
  %% Aliased:
  %%    _36
  _255 = bif:tuple_size _36

  %% Argument types:
  %%    _255 => 0..16777215
  %% Unique:
  %%    _255
  _256 = bif:'=:=' _255, `2`
  br _256, ^253, ^94

253:
  %% Argument types:
  %%    _36 => {any(), any()}
  %% Aliased:
  %%    _36
  _39 = get_tuple_element _36, `0`
  switch _39, ^94, [
    { `a`, ^252 },
    { `b`, ^251 }
  ]

251:
  %% Result type:
  %%    {'k3'}
  ret `{k3}`

252:
  %% Argument types:
  %%    _36 => {'a', any()}
  %% Aliased:
  %%    _36
  _38 = get_tuple_element _36, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _248 = bif:is_tuple _38
  br _248, ^248, ^94

248:
  %% Argument types:
  %%    _38 => {...}
  %% Aliased:
  %%    _38
  _249 = bif:tuple_size _38

  %% Argument types:
  %%    _249 => 0..16777215
  %% Unique:
  %%    _249
  _250 = bif:'=:=' _249, `2`
  br _250, ^247, ^94

247:
  %% Argument types:
  %%    _38 => {any(), any()}
  %% Aliased:
  %%    _38
  _41 = get_tuple_element _38, `0`
  switch _41, ^94, [
    { `a`, ^246 },
    { `b`, ^245 }
  ]

245:
  %% Result type:
  %%    {'k4'}
  ret `{k4}`

246:
  %% Argument types:
  %%    _38 => {'a', any()}
  %% Aliased:
  %%    _38
  _40 = get_tuple_element _38, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _242 = bif:is_tuple _40
  br _242, ^242, ^94

242:
  %% Argument types:
  %%    _40 => {...}
  %% Aliased:
  %%    _40
  _243 = bif:tuple_size _40

  %% Argument types:
  %%    _243 => 0..16777215
  %% Unique:
  %%    _243
  _244 = bif:'=:=' _243, `2`
  br _244, ^241, ^94

241:
  %% Argument types:
  %%    _40 => {any(), any()}
  %% Aliased:
  %%    _40
  _43 = get_tuple_element _40, `0`
  switch _43, ^94, [
    { `a`, ^240 },
    { `b`, ^239 }
  ]

239:
  %% Result type:
  %%    {'k5'}
  ret `{k5}`

240:
  %% Argument types:
  %%    _40 => {'a', any()}
  %% Aliased:
  %%    _40
  _42 = get_tuple_element _40, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _236 = bif:is_tuple _42
  br _236, ^236, ^94

236:
  %% Argument types:
  %%    _42 => {...}
  %% Aliased:
  %%    _42
  _237 = bif:tuple_size _42

  %% Argument types:
  %%    _237 => 0..16777215
  %% Unique:
  %%    _237
  _238 = bif:'=:=' _237, `2`
  br _238, ^235, ^94

235:
  %% Argument types:
  %%    _42 => {any(), any()}
  %% Aliased:
  %%    _42
  _45 = get_tuple_element _42, `0`
  switch _45, ^94, [
    { `a`, ^234 },
    { `b`, ^233 }
  ]

233:
  %% Result type:
  %%    {'k6'}
  ret `{k6}`

234:
  %% Argument types:
  %%    _42 => {'a', any()}
  %% Aliased:
  %%    _42
  _44 = get_tuple_element _42, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _230 = bif:is_tuple _44
  br _230, ^230, ^94

230:
  %% Argument types:
  %%    _44 => {...}
  %% Aliased:
  %%    _44
  _231 = bif:tuple_size _44

  %% Argument types:
  %%    _231 => 0..16777215
  %% Unique:
  %%    _231
  _232 = bif:'=:=' _231, `2`
  br _232, ^229, ^94

229:
  %% Argument types:
  %%    _44 => {any(), any()}
  %% Aliased:
  %%    _44
  _47 = get_tuple_element _44, `0`
  switch _47, ^94, [
    { `a`, ^228 },
    { `b`, ^227 }
  ]

227:
  %% Result type:
  %%    {'k7'}
  ret `{k7}`

228:
  %% Argument types:
  %%    _44 => {'a', any()}
  %% Aliased:
  %%    _44
  _46 = get_tuple_element _44, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _224 = bif:is_tuple _46
  br _224, ^224, ^94

224:
  %% Argument types:
  %%    _46 => {...}
  %% Aliased:
  %%    _46
  _225 = bif:tuple_size _46

  %% Argument types:
  %%    _225 => 0..16777215
  %% Unique:
  %%    _225
  _226 = bif:'=:=' _225, `2`
  br _226, ^223, ^94

223:
  %% Argument types:
  %%    _46 => {any(), any()}
  %% Aliased:
  %%    _46
  _49 = get_tuple_element _46, `0`
  switch _49, ^94, [
    { `a`, ^222 },
    { `b`, ^221 }
  ]

221:
  %% Result type:
  %%    {'k8'}
  ret `{k8}`

222:
  %% Argument types:
  %%    _46 => {'a', any()}
  %% Aliased:
  %%    _46
  _48 = get_tuple_element _46, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _218 = bif:is_tuple _48
  br _218, ^218, ^94

218:
  %% Argument types:
  %%    _48 => {...}
  %% Aliased:
  %%    _48
  _219 = bif:tuple_size _48

  %% Argument types:
  %%    _219 => 0..16777215
  %% Unique:
  %%    _219
  _220 = bif:'=:=' _219, `2`
  br _220, ^217, ^94

217:
  %% Argument types:
  %%    _48 => {any(), any()}
  %% Aliased:
  %%    _48
  _51 = get_tuple_element _48, `0`
  switch _51, ^94, [
    { `a`, ^216 },
    { `b`, ^215 }
  ]

215:
  %% Result type:
  %%    {'k9'}
  ret `{k9}`

216:
  %% Argument types:
  %%    _48 => {'a', any()}
  %% Aliased:
  %%    _48
  _50 = get_tuple_element _48, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _212 = bif:is_tuple _50
  br _212, ^212, ^94

212:
  %% Argument types:
  %%    _50 => {...}
  %% Aliased:
  %%    _50
  _213 = bif:tuple_size _50

  %% Argument types:
  %%    _213 => 0..16777215
  %% Unique:
  %%    _213
  _214 = bif:'=:=' _213, `2`
  br _214, ^211, ^94

211:
  %% Argument types:
  %%    _50 => {any(), any()}
  %% Aliased:
  %%    _50
  _53 = get_tuple_element _50, `0`
  switch _53, ^94, [
    { `a`, ^210 },
    { `b`, ^209 }
  ]

209:
  %% Result type:
  %%    {'k10'}
  ret `{k10}`

210:
  %% Argument types:
  %%    _50 => {'a', any()}
  %% Aliased:
  %%    _50
  _52 = get_tuple_element _50, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _206 = bif:is_tuple _52
  br _206, ^206, ^94

206:
  %% Argument types:
  %%    _52 => {...}
  %% Aliased:
  %%    _52
  _207 = bif:tuple_size _52

  %% Argument types:
  %%    _207 => 0..16777215
  %% Unique:
  %%    _207
  _208 = bif:'=:=' _207, `2`
  br _208, ^205, ^94

205:
  %% Argument types:
  %%    _52 => {any(), any()}
  %% Aliased:
  %%    _52
  _55 = get_tuple_element _52, `0`
  switch _55, ^94, [
    { `a`, ^204 },
    { `b`, ^203 }
  ]

203:
  %% Result type:
  %%    {'k11'}
  ret `{k11}`

204:
  %% Argument types:
  %%    _52 => {'a', any()}
  %% Aliased:
  %%    _52
  _54 = get_tuple_element _52, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _200 = bif:is_tuple _54
  br _200, ^200, ^94

200:
  %% Argument types:
  %%    _54 => {...}
  %% Aliased:
  %%    _54
  _201 = bif:tuple_size _54

  %% Argument types:
  %%    _201 => 0..16777215
  %% Unique:
  %%    _201
  _202 = bif:'=:=' _201, `2`
  br _202, ^199, ^94

199:
  %% Argument types:
  %%    _54 => {any(), any()}
  %% Aliased:
  %%    _54
  _57 = get_tuple_element _54, `0`
  switch _57, ^94, [
    { `a`, ^198 },
    { `b`, ^197 }
  ]

197:
  %% Result type:
  %%    {'k12'}
  ret `{k12}`

198:
  %% Argument types:
  %%    _54 => {'a', any()}
  %% Aliased:
  %%    _54
  _56 = get_tuple_element _54, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _194 = bif:is_tuple _56
  br _194, ^194, ^94

194:
  %% Argument types:
  %%    _56 => {...}
  %% Aliased:
  %%    _56
  _195 = bif:tuple_size _56

  %% Argument types:
  %%    _195 => 0..16777215
  %% Unique:
  %%    _195
  _196 = bif:'=:=' _195, `2`
  br _196, ^193, ^94

193:
  %% Argument types:
  %%    _56 => {any(), any()}
  %% Aliased:
  %%    _56
  _59 = get_tuple_element _56, `0`
  switch _59, ^94, [
    { `a`, ^192 },
    { `b`, ^191 }
  ]

191:
  %% Result type:
  %%    {'k13'}
  ret `{k13}`

192:
  %% Argument types:
  %%    _56 => {'a', any()}
  %% Aliased:
  %%    _56
  _58 = get_tuple_element _56, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _188 = bif:is_tuple _58
  br _188, ^188, ^94

188:
  %% Argument types:
  %%    _58 => {...}
  %% Aliased:
  %%    _58
  _189 = bif:tuple_size _58

  %% Argument types:
  %%    _189 => 0..16777215
  %% Unique:
  %%    _189
  _190 = bif:'=:=' _189, `2`
  br _190, ^187, ^94

187:
  %% Argument types:
  %%    _58 => {any(), any()}
  %% Aliased:
  %%    _58
  _61 = get_tuple_element _58, `0`
  switch _61, ^94, [
    { `a`, ^186 },
    { `b`, ^185 }
  ]

185:
  %% Result type:
  %%    {'k14'}
  ret `{k14}`

186:
  %% Argument types:
  %%    _58 => {'a', any()}
  %% Aliased:
  %%    _58
  _60 = get_tuple_element _58, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _182 = bif:is_tuple _60
  br _182, ^182, ^94

182:
  %% Argument types:
  %%    _60 => {...}
  %% Aliased:
  %%    _60
  _183 = bif:tuple_size _60

  %% Argument types:
  %%    _183 => 0..16777215
  %% Unique:
  %%    _183
  _184 = bif:'=:=' _183, `2`
  br _184, ^181, ^94

181:
  %% Argument types:
  %%    _60 => {any(), any()}
  %% Aliased:
  %%    _60
  _63 = get_tuple_element _60, `0`
  switch _63, ^94, [
    { `a`, ^180 },
    { `b`, ^179 }
  ]

179:
  %% Result type:
  %%    {'k15'}
  ret `{k15}`

180:
  %% Argument types:
  %%    _60 => {'a', any()}
  %% Aliased:
  %%    _60
  _62 = get_tuple_element _60, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _176 = bif:is_tuple _62
  br _176, ^176, ^94

176:
  %% Argument types:
  %%    _62 => {...}
  %% Aliased:
  %%    _62
  _177 = bif:tuple_size _62

  %% Argument types:
  %%    _177 => 0..16777215
  %% Unique:
  %%    _177
  _178 = bif:'=:=' _177, `2`
  br _178, ^175, ^94

175:
  %% Argument types:
  %%    _62 => {any(), any()}
  %% Aliased:
  %%    _62
  _65 = get_tuple_element _62, `0`
  switch _65, ^94, [
    { `a`, ^174 },
    { `b`, ^173 }
  ]

173:
  %% Result type:
  %%    {'k16'}
  ret `{k16}`

174:
  %% Argument types:
  %%    _62 => {'a', any()}
  %% Aliased:
  %%    _62
  _64 = get_tuple_element _62, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _170 = bif:is_tuple _64
  br _170, ^170, ^94

170:
  %% Argument types:
  %%    _64 => {...}
  %% Aliased:
  %%    _64
  _171 = bif:tuple_size _64

  %% Argument types:
  %%    _171 => 0..16777215
  %% Unique:
  %%    _171
  _172 = bif:'=:=' _171, `2`
  br _172, ^169, ^94

169:
  %% Argument types:
  %%    _64 => {any(), any()}
  %% Aliased:
  %%    _64
  _67 = get_tuple_element _64, `0`
  switch _67, ^94, [
    { `a`, ^168 },
    { `b`, ^167 }
  ]

167:
  %% Result type:
  %%    {'k17'}
  ret `{k17}`

168:
  %% Argument types:
  %%    _64 => {'a', any()}
  %% Aliased:
  %%    _64
  _66 = get_tuple_element _64, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _164 = bif:is_tuple _66
  br _164, ^164, ^94

164:
  %% Argument types:
  %%    _66 => {...}
  %% Aliased:
  %%    _66
  _165 = bif:tuple_size _66

  %% Argument types:
  %%    _165 => 0..16777215
  %% Unique:
  %%    _165
  _166 = bif:'=:=' _165, `2`
  br _166, ^163, ^94

163:
  %% Argument types:
  %%    _66 => {any(), any()}
  %% Aliased:
  %%    _66
  _69 = get_tuple_element _66, `0`
  switch _69, ^94, [
    { `a`, ^162 },
    { `b`, ^161 }
  ]

161:
  %% Result type:
  %%    {'k18'}
  ret `{k18}`

162:
  %% Argument types:
  %%    _66 => {'a', any()}
  %% Aliased:
  %%    _66
  _68 = get_tuple_element _66, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _158 = bif:is_tuple _68
  br _158, ^158, ^94

158:
  %% Argument types:
  %%    _68 => {...}
  %% Aliased:
  %%    _68
  _159 = bif:tuple_size _68

  %% Argument types:
  %%    _159 => 0..16777215
  %% Unique:
  %%    _159
  _160 = bif:'=:=' _159, `2`
  br _160, ^157, ^94

157:
  %% Argument types:
  %%    _68 => {any(), any()}
  %% Aliased:
  %%    _68
  _71 = get_tuple_element _68, `0`
  switch _71, ^94, [
    { `a`, ^156 },
    { `b`, ^155 }
  ]

155:
  %% Result type:
  %%    {'k19'}
  ret `{k19}`

156:
  %% Argument types:
  %%    _68 => {'a', any()}
  %% Aliased:
  %%    _68
  _70 = get_tuple_element _68, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _152 = bif:is_tuple _70
  br _152, ^152, ^94

152:
  %% Argument types:
  %%    _70 => {...}
  %% Aliased:
  %%    _70
  _153 = bif:tuple_size _70

  %% Argument types:
  %%    _153 => 0..16777215
  %% Unique:
  %%    _153
  _154 = bif:'=:=' _153, `2`
  br _154, ^151, ^94

151:
  %% Argument types:
  %%    _70 => {any(), any()}
  %% Aliased:
  %%    _70
  _73 = get_tuple_element _70, `0`
  switch _73, ^94, [
    { `a`, ^150 },
    { `b`, ^149 }
  ]

149:
  %% Result type:
  %%    {'k20'}
  ret `{k20}`

150:
  %% Argument types:
  %%    _70 => {'a', any()}
  %% Aliased:
  %%    _70
  _72 = get_tuple_element _70, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _146 = bif:is_tuple _72
  br _146, ^146, ^94

146:
  %% Argument types:
  %%    _72 => {...}
  %% Aliased:
  %%    _72
  _147 = bif:tuple_size _72

  %% Argument types:
  %%    _147 => 0..16777215
  %% Unique:
  %%    _147
  _148 = bif:'=:=' _147, `2`
  br _148, ^145, ^94

145:
  %% Argument types:
  %%    _72 => {any(), any()}
  %% Aliased:
  %%    _72
  _75 = get_tuple_element _72, `0`
  switch _75, ^94, [
    { `a`, ^144 },
    { `b`, ^143 }
  ]

143:
  %% Result type:
  %%    {'k21'}
  ret `{k21}`

144:
  %% Argument types:
  %%    _72 => {'a', any()}
  %% Aliased:
  %%    _72
  _74 = get_tuple_element _72, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _74
  _140 = bif:is_tuple _74
  br _140, ^140, ^94

140:
  %% Argument types:
  %%    _74 => {...}
  %% Aliased:
  %%    _74
  _141 = bif:tuple_size _74

  %% Argument types:
  %%    _141 => 0..16777215
  %% Unique:
  %%    _141
  _142 = bif:'=:=' _141, `2`
  br _142, ^139, ^94

139:
  %% Argument types:
  %%    _74 => {any(), any()}
  %% Aliased:
  %%    _74
  _77 = get_tuple_element _74, `0`
  switch _77, ^94, [
    { `a`, ^138 },
    { `b`, ^137 }
  ]

137:
  %% Result type:
  %%    {'k22'}
  ret `{k22}`

138:
  %% Argument types:
  %%    _74 => {'a', any()}
  %% Aliased:
  %%    _74
  _76 = get_tuple_element _74, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _76
  _134 = bif:is_tuple _76
  br _134, ^134, ^94

134:
  %% Argument types:
  %%    _76 => {...}
  %% Aliased:
  %%    _76
  _135 = bif:tuple_size _76

  %% Argument types:
  %%    _135 => 0..16777215
  %% Unique:
  %%    _135
  _136 = bif:'=:=' _135, `2`
  br _136, ^133, ^94

133:
  %% Argument types:
  %%    _76 => {any(), any()}
  %% Aliased:
  %%    _76
  _79 = get_tuple_element _76, `0`
  switch _79, ^94, [
    { `a`, ^132 },
    { `b`, ^131 }
  ]

131:
  %% Result type:
  %%    {'k23'}
  ret `{k23}`

132:
  %% Argument types:
  %%    _76 => {'a', any()}
  %% Aliased:
  %%    _76
  _78 = get_tuple_element _76, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _78
  _128 = bif:is_tuple _78
  br _128, ^128, ^94

128:
  %% Argument types:
  %%    _78 => {...}
  %% Aliased:
  %%    _78
  _129 = bif:tuple_size _78

  %% Argument types:
  %%    _129 => 0..16777215
  %% Unique:
  %%    _129
  _130 = bif:'=:=' _129, `2`
  br _130, ^127, ^94

127:
  %% Argument types:
  %%    _78 => {any(), any()}
  %% Aliased:
  %%    _78
  _81 = get_tuple_element _78, `0`
  switch _81, ^94, [
    { `a`, ^126 },
    { `b`, ^125 }
  ]

125:
  %% Result type:
  %%    {'k24'}
  ret `{k24}`

126:
  %% Argument types:
  %%    _78 => {'a', any()}
  %% Aliased:
  %%    _78
  _80 = get_tuple_element _78, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _122 = bif:is_tuple _80
  br _122, ^122, ^94

122:
  %% Argument types:
  %%    _80 => {...}
  %% Aliased:
  %%    _80
  _123 = bif:tuple_size _80

  %% Argument types:
  %%    _123 => 0..16777215
  %% Unique:
  %%    _123
  _124 = bif:'=:=' _123, `2`
  br _124, ^121, ^94

121:
  %% Argument types:
  %%    _80 => {any(), any()}
  %% Aliased:
  %%    _80
  _83 = get_tuple_element _80, `0`
  switch _83, ^94, [
    { `a`, ^120 },
    { `b`, ^119 }
  ]

119:
  %% Result type:
  %%    {'k25'}
  ret `{k25}`

120:
  %% Argument types:
  %%    _80 => {'a', any()}
  %% Aliased:
  %%    _80
  _82 = get_tuple_element _80, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _82
  _116 = bif:is_tuple _82
  br _116, ^116, ^94

116:
  %% Argument types:
  %%    _82 => {...}
  %% Aliased:
  %%    _82
  _117 = bif:tuple_size _82

  %% Argument types:
  %%    _117 => 0..16777215
  %% Unique:
  %%    _117
  _118 = bif:'=:=' _117, `2`
  br _118, ^115, ^94

115:
  %% Argument types:
  %%    _82 => {any(), any()}
  %% Aliased:
  %%    _82
  _85 = get_tuple_element _82, `0`
  switch _85, ^94, [
    { `a`, ^114 },
    { `b`, ^113 }
  ]

113:
  %% Result type:
  %%    {'k26'}
  ret `{k26}`

114:
  %% Argument types:
  %%    _82 => {'a', any()}
  %% Aliased:
  %%    _82
  _84 = get_tuple_element _82, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _110 = bif:is_tuple _84
  br _110, ^110, ^94

110:
  %% Argument types:
  %%    _84 => {...}
  %% Aliased:
  %%    _84
  _111 = bif:tuple_size _84

  %% Argument types:
  %%    _111 => 0..16777215
  %% Unique:
  %%    _111
  _112 = bif:'=:=' _111, `2`
  br _112, ^109, ^94

109:
  %% Argument types:
  %%    _84 => {any(), any()}
  %% Aliased:
  %%    _84
  _87 = get_tuple_element _84, `0`
  switch _87, ^94, [
    { `a`, ^108 },
    { `b`, ^107 }
  ]

107:
  %% Result type:
  %%    {'k27'}
  ret `{k27}`

108:
  %% Argument types:
  %%    _84 => {'a', any()}
  %% Aliased:
  %%    _84
  _86 = get_tuple_element _84, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _104 = bif:is_tuple _86
  br _104, ^104, ^94

104:
  %% Argument types:
  %%    _86 => {...}
  %% Aliased:
  %%    _86
  _105 = bif:tuple_size _86

  %% Argument types:
  %%    _105 => 0..16777215
  %% Unique:
  %%    _105
  _106 = bif:'=:=' _105, `2`
  br _106, ^103, ^94

103:
  %% Argument types:
  %%    _86 => {any(), any()}
  %% Aliased:
  %%    _86
  _89 = get_tuple_element _86, `0`
  switch _89, ^94, [
    { `a`, ^102 },
    { `b`, ^101 }
  ]

101:
  %% Result type:
  %%    {'k28'}
  ret `{k28}`

102:
  %% Argument types:
  %%    _86 => {'a', any()}
  %% Aliased:
  %%    _86
  _88 = get_tuple_element _86, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _88
  _98 = bif:is_tuple _88
  br _98, ^98, ^94

98:
  %% Argument types:
  %%    _88 => {...}
  %% Aliased:
  %%    _88
  _99 = bif:tuple_size _88

  %% Argument types:
  %%    _99 => 0..16777215
  %% Unique:
  %%    _99
  _100 = bif:'=:=' _99, `2`
  br _100, ^97, ^94

97:
  %% Argument types:
  %%    _88 => {any(), any()}
  %% Aliased:
  %%    _88
  _91 = get_tuple_element _88, `0`
  switch _91, ^94, [
    { `a`, ^96 },
    { `b`, ^95 }
  ]

95:
  %% Result type:
  %%    {'k29'}
  ret `{k29}`

96:
  %% Result type:
  %%    {'k30'}
  ret `{k30}`

94:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:1035
%% Counter = 40
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_relops`(_0) {
0:
  %% beam_validator_SUITE.erl:1036
  _3 = call (`lists`:`seq`/2), `0`, `3`

  %% Aliased:
  %%    _3
  _36 = succeeded:body _3
  br _36, ^36, ^1

36:
  %% beam_validator_SUITE.erl:1036
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _3
  _29 = call (`'-infer_relops/1-lc$^0/1-0-'`/1), _3

  %% Unique:
  %%    _29
  _37 = succeeded:body _29
  br _37, ^37, ^1

37:
  %% beam_validator_SUITE.erl:1037
  _11 = call (`lists`:`seq`/2), `4`, `7`

  %% Aliased:
  %%    _11
  _38 = succeeded:body _11
  br _38, ^38, ^1

38:
  %% beam_validator_SUITE.erl:1037
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _11
  _33 = call (`'-infer_relops/1-lc$^1/1-1-'`/1), _11

  %% Unique:
  %%    _33
  _39 = succeeded:body _33
  br _39, ^39, ^1

39:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% beam_validator_SUITE.erl:1040
%% Counter = 28
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`infer_relops_1`(_0) {
0:
  %% beam_validator_SUITE.erl:1041
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _4 = bif:'>=' _0, `0`
  br _4, ^22, ^13

22:
  %% beam_validator_SUITE.erl:1042
  %% Argument types:
  %%    _0 => atom() | maybe_improper_list(any(), any()) | number(0, '+inf') | {...} | other()
  %% Aliased:
  %%    _0
  Below4 = bif:'<' _0, `4`

  %% beam_validator_SUITE.erl:1043
  %% Aliased:
  %%    _0
  _5 = call (`id`/1), _0

  %% Aliased:
  %%    _5
  _14 = succeeded:body _5
  br _14, ^14, ^1

14:
  br Below4, ^19, ^20

19:
  %% beam_validator_SUITE.erl:1045
  %% Result type:
  %%    'lt'
  %% Aliased:
  %%    _0
  _7 = call (`infer_relops_true`/2), `true`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br _17, ^17, ^1

17:
  %% Result type:
  %%    'lt'
  %% Unique:
  %%    _7
  ret _7

20:
  %% beam_validator_SUITE.erl:1046
  %% Result type:
  %%    'ge'
  %% Aliased:
  %%    _0
  _6 = call (`infer_relops_false`/2), `false`, _0

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Result type:
  %%    'ge'
  %% Unique:
  %%    _6
  ret _6

13:
  %% beam_validator_SUITE.erl:1041
  _9 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _9
  _24 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_validator_SUITE.erl:1049
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'true'
%%    _1 =>
%%     number(0, 4)
function `beam_validator_SUITE`:`infer_relops_true`(_0, _1) {
0:
  %% Result type:
  %%    'lt'
  ret `lt`
}

%% beam_validator_SUITE.erl:1050
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false'
%%    _1 =>
%%     atom() | maybe_improper_list(any(), any()) | number(4, '+inf') | {...} | other()
function `beam_validator_SUITE`:`infer_relops_false`(_0, _1) {
0:
  %% Result type:
  %%    'ge'
  ret `ge`
}

%% beam_validator_SUITE.erl:1053
%% Counter = 58
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`not_equal_inference`(_0) {
0:
  br ^57

57:
  _18 = new_try_tag `'catch'`
  br _18, ^16, ^17

16:
  %% beam_validator_SUITE.erl:1054
  _1 = call (`id`/1), `[0]`

  %% Aliased:
  %%    _1
  _20 = succeeded:body _1
  br _20, ^20, ^17

20:
  %% beam_validator_SUITE.erl:1054
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _1
  _11 = call (`not_equal_inference_1`/1), _1

  %% Aliased:
  %%    _11
  _21 = succeeded:body _11
  br ^17

17:
  %% Unique:
  %%    _18
  _24 = landingpad `'catch'`, _18

  %% Aliased:
  %%    _24
  _22 = extract _24, `0`
  br ^15

15:
  %% Aliased:
  %%    _22
  %% Unique:
  %%    _18
  _2 = catch_end _18, _22

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _37 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _37, ^34, ^27

34:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _6 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _31 = is_tagged_tuple _6, `2`, `function_clause`
  br _31, ^28, ^27

28:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  %% beam_validator_SUITE.erl:1054
  %% Aliased:
  %%    _2
  _12 = match_fail `badmatch`, _2

  %% Unique:
  %%    _12
  _40 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_validator_SUITE.erl:1057
%% Counter = 27
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`not_equal_inference_1`(_0) {
0:
  %% beam_validator_SUITE.erl:1057
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-not_equal_inference_1/1-',1}}
  _18 = match_fail `function_clause`, _0

  %% Unique:
  %%    _18
  _26 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_validator_SUITE.erl:1060
%% Counter = 64
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_bin_unit`(_0) {
0:
  br ^63

63:
  _20 = new_try_tag `'catch'`
  br _20, ^18, ^19

18:
  %% beam_validator_SUITE.erl:1061
  %% Result type:
  %%    none()
  _12 = call (`bad_bin_unit_1`/1), `<<1:1>>`

  %% Aliased:
  %%    _12
  _22 = succeeded:body _12
  br ^19

19:
  %% Unique:
  %%    _20
  _25 = landingpad `'catch'`, _20

  %% Aliased:
  %%    _25
  _23 = extract _25, `0`
  br ^17

17:
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _20
  _1 = catch_end _20, _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _43 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _43, ^40, ^28

40:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _6 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _37 = is_tagged_tuple _6, `2`, `function_clause`
  br _37, ^34, ^28

34:
  %% beam_validator_SUITE.erl:1062
  %% Result type:
  %%    nil()
  _10 = call (`bad_bin_unit_2`/0)

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^32, ^1

32:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% beam_validator_SUITE.erl:1061
  %% Aliased:
  %%    _1
  _14 = match_fail `badmatch`, _1

  %% Unique:
  %%    _14
  _46 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_validator_SUITE.erl:1065
%% Counter = 115
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(1)
%%     accepts_match_context
function `beam_validator_SUITE`:`bad_bin_unit_1`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(1)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _41 = bs_start_match `new`, _0

  %% beam_validator_SUITE.erl:1065
  %% Argument types:
  %%    
  %% Anno: #{unit => 8}
  _5 = bs_create_bin `integer`, `[1,{segment,1}]`, `ok`, `8`

  %% Aliased:
  %%    _5
  _67 = succeeded:guard _5
  br _67, ^67, ^66

67:
  %% Argument types:
  %%    _5 => bitstring(8)
  %% Aliased:
  %%    _5
  _44 = put_tuple _5

  %% beam_validator_SUITE.erl:1065
  %% Argument types:
  %%    _44 => {bitstring(8)}
  %% Unique:
  %%    _44
  _45 = bif:'>' `ok`, _44
  br _45, ^70, ^69

70:
  br ^65

69:
  br ^65

66:
  br ^65

65:
  _46 = phi { `bad_size`, ^66 }, { `1`, ^69 }, { `true`, ^70 }

  %% beam_validator_SUITE.erl:1065
  %% Argument types:
  %%    _41 => bs_context(1)
  %%    _46 => 'bad_size' | 'true' | 1
  %% Aliased:
  %%    _41, 
  %%    _46
  _48 = bs_match `integer`, _41, `[unsigned,big]`, _46, `1`

  %% Aliased:
  %%    _48
  _73 = succeeded:guard _48
  br _73, ^73, ^40

73:
  %% Aliased:
  %%    _48
  _49 = bs_extract _48

  %% Aliased:
  %%    _48
  _86 = bs_test_tail _48, `0`
  br _86, ^113, ^40

113:
  br ^114

114:
  _78 = new_try_tag `'try'`
  br _78, ^77, ^75

77:
  %% beam_validator_SUITE.erl:1067
  %% Result type:
  %%    'ok'
  _54 = call (`bad_bin_unit_1_a`/0)

  %% Unique:
  %%    _54
  _79 = succeeded:body _54
  br _79, ^79, ^75

79:
  %% Unique:
  %%    _78
  _85 = kill_try_tag _78

  %% beam_validator_SUITE.erl:1066
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _49
  _55 = call (`'-bad_bin_unit_1/1-after$^0/0-0-'`/1), _49

  %% Aliased:
  %%    _55
  _80 = succeeded:body _55
  br ^1

75:
  %% Unique:
  %%    _78
  _83 = landingpad `'try'`, _78

  %% Unique:
  %%    _78
  _84 = kill_try_tag _78
  br ^97

97:
  %% beam_validator_SUITE.erl:1066
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _49
  _56 = call (`'-bad_bin_unit_1/1-after$^0/0-0-'`/1), _49

  %% Aliased:
  %%    _56
  _81 = succeeded:body _56
  br ^1

40:
  %% Aliased:
  %%    _41
  _95 = bs_get_tail _41

  %% beam_validator_SUITE.erl:1065
  %% Aliased:
  %%    _95
  %% Anno: #{inlined => {'-inlined-bad_bin_unit_1/1-',1}}
  _58 = match_fail `function_clause`, _95

  %% Unique:
  %%    _58
  _89 = succeeded:body _58
  br ^1

1:
  _94 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _94
}

%% beam_validator_SUITE.erl:1088
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_bin_unit_1_a`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_validator_SUITE.erl:1091
%% Counter = 78
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bad_bin_unit_2`() {
0:
  %% beam_validator_SUITE.erl:1094
  %% Result type:
  %%    nil()
  _74 = call (`'-bad_bin_unit_2/0-lc$^0/1-0-'`/1), `<<>>`

  %% Unique:
  %%    _74
  _77 = succeeded:body _74
  br _77, ^77, ^1

77:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _74
  ret _74

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% beam_validator_SUITE.erl:1100
%% Counter = 35
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`singleton_inference`(_0) {
0:
  %% beam_validator_SUITE.erl:1103
  %% Aliased:
  %%    _0
  Data = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    Data
  _16 = succeeded:body Data
  br _16, ^16, ^1

16:
  %% beam_validator_SUITE.erl:1104
  %% Aliased:
  %%    Data
  File = call (`filename`:`join`/2), Data, `"singleton_inference.erl"`

  %% Aliased:
  %%    File
  _17 = succeeded:body File
  br _17, ^17, ^1

17:
  %% beam_validator_SUITE.erl:1106
  %% Aliased:
  %%    File
  _8 = call (`compile`:`file`/2), File, `[no_copt,no_bool_opt,no_ssa_opt]`

  %% Aliased:
  %%    _8
  _18 = succeeded:body _8
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _31 = is_tagged_tuple _8, `2`, `ok`
  br _31, ^28, ^20

28:
  %% Argument types:
  %%    _8 => {'ok', any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _21 = bif:'=:=' _9, `singleton_inference`
  br _21, ^21, ^20

21:
  %% beam_validator_SUITE.erl:1108
  _11 = call (`singleton_inference`:`test`/0)

  %% Aliased:
  %%    _11
  _22 = succeeded:body _11
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _26 = bif:'=:=' _11, `ok`
  br _26, ^25, ^24

25:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% beam_validator_SUITE.erl:1108
  %% Aliased:
  %%    _11
  _12 = match_fail `badmatch`, _11

  %% Unique:
  %%    _12
  _27 = succeeded:body _12
  br ^1

20:
  %% beam_validator_SUITE.erl:1106
  %% Aliased:
  %%    _8
  _13 = match_fail `badmatch`, _8

  %% Unique:
  %%    _13
  _34 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_validator_SUITE.erl:1114
%% Counter = 7
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`inert_update_type`(_0) {
0:
  %% beam_validator_SUITE.erl:1115
  _1 = call (`id`/1), `42`

  %% Aliased:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% beam_validator_SUITE.erl:1115
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Aliased:
  %%    _1
  _2 = call (`hello`/2), `<<"string">>`, _1

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:1117
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(16)
function `beam_validator_SUITE`:`hello`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => bitstring(16)
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  _2 = put_tuple _0, _1

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = put_tuple `some_atom`, _1

  %% Argument types:
  %%    _3 => {'some_atom', any()}
  %% Unique:
  %%    _3
  _4 = put_list _3, `[]`

  %% Argument types:
  %%    _2 => {bitstring(16), any()}
  %% Unique:
  %%    _2
  _5 = put_tuple `sys_period`, _2

  %% Argument types:
  %%    _5 => {'sys_period', {bitstring(16), any()}}
  %%    _4 => nonempty_list({'some_atom', any()})
  %% Unique:
  %%    _4, 
  %%    _5
  _6 = put_list _5, _4

  %% beam_validator_SUITE.erl:1118
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Unique:
  %%    _6
  _7 = call (`mike`/1), _6

  %% Aliased:
  %%    _7
  _10 = succeeded:body _7
  br _10, ^10, ^1

10:
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Aliased:
  %%    _7
  ret _7

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:1120
%% Counter = 13
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list({'some_atom', any()} | {'sys_period', {bitstring(16), any()}})
function `beam_validator_SUITE`:`mike`(_0) {
0:
  %% Argument types:
  %%    _0 => nonempty_list({'some_atom', any()} | {'sys_period', {bitstring(16), any()}})
  %% Unique:
  %%    _0
  _3 = get_hd _0

  %% beam_validator_SUITE.erl:1120
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Unique:
  %%    _3
  _4 = call (`joe`/1), _3

  %% Aliased:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^9, ^1

9:
  %% Result type:
  %%    'some_atom' | {41, 42, bitstring(16)}
  %% Aliased:
  %%    _4
  ret _4

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_validator_SUITE.erl:1122
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'some_atom', any()} | {'sys_period', {bitstring(16), any()}}
function `beam_validator_SUITE`:`joe`(_0) {
0:
  %% Argument types:
  %%    _0 => {'some_atom', any()} | {'sys_period', {bitstring(16), any()}}
  %% Unique:
  %%    _0
  _2 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _13 = bif:'=:=' _2, `42`
  br _13, ^12, ^11

12:
  %% Result type:
  %%    'some_atom'
  ret `some_atom`

11:
  %% Argument types:
  %%    _0 => {'some_atom', any()} | {'sys_period', {bitstring(16), any()}}
  %% Unique:
  %%    _0
  _3 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _3 => 'some_atom' | 'sys_period'
  %% Unique:
  %%    _3
  _19 = bif:'=:=' _3, `sys_period`
  br _19, ^14, ^10

14:
  %% Argument types:
  %%    _2 => {bitstring(16), any()}
  %% Aliased:
  %%    _2
  _5 = get_tuple_element _2, `0`

  %% Argument types:
  %%    _5 => bitstring(16)
  %% Aliased:
  %%    _5
  _6 = put_tuple `41`, `42`, _5
  %% Result type:
  %%    {41, 42, bitstring(16)}
  %% Unique:
  %%    _6
  ret _6

10:
  %% beam_validator_SUITE.erl:1122
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-joe/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _24 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_validator_SUITE.erl:1125
%% Counter = 37
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`range_inference`(_0) {
0:
  %% beam_validator_SUITE.erl:1126
  _1 = call (`id`/1), `<<"a">>`

  %% Aliased:
  %%    _1
  _15 = succeeded:body _1
  br _15, ^15, ^1

15:
  %% beam_validator_SUITE.erl:1126
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _1
  _7 = call (`range_inference_1`/1), _1

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^33, ^1

33:
  %% beam_validator_SUITE.erl:1127
  _3 = call (`id`/1), `<<0>>`

  %% Aliased:
  %%    _3
  _19 = succeeded:body _3
  br _19, ^19, ^1

19:
  %% beam_validator_SUITE.erl:1127
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  _8 = call (`range_inference_1`/1), _3

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^30, ^1

30:
  %% beam_validator_SUITE.erl:1128
  _5 = call (`id`/1), `<<244,143,191,191>>`

  %% Aliased:
  %%    _5
  _23 = succeeded:body _5
  br _23, ^23, ^1

23:
  %% beam_validator_SUITE.erl:1128
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  _9 = call (`range_inference_1`/1), _5

  %% Unique:
  %%    _9
  _24 = succeeded:body _9
  br _24, ^36, ^1

36:
  ret _9

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_validator_SUITE.erl:1132
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     
%%     accepts_match_context
function `beam_validator_SUITE`:`range_inference_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _4 = bs_start_match `new`, _0

  %% Aliased:
  %%    _4
  _23 = succeeded:guard _4
  br _23, ^23, ^25

23:
  %% beam_validator_SUITE.erl:1132
  %% Argument types:
  %%    _4 => bs_context(1)
  %% Aliased:
  %%    _4
  _5 = bs_match `utf8`, _4, `[unsigned,big]`

  %% Aliased:
  %%    _5
  _13 = succeeded:guard _5
  br _13, ^13, ^12

13:
  %% Aliased:
  %%    _5
  _6 = bs_extract _5

  %% Aliased:
  %%    _5
  _22 = bs_test_tail _5, `0`
  br _22, ^22, ^12

22:
  %% beam_validator_SUITE.erl:1133
  %% Argument types:
  %%    _6 => 0..1114111
  %% Unique:
  %%    _6
  _1 = bif:abs _6

  %% Unique:
  %%    _1
  _14 = succeeded:body _1
  br _14, ^14, ^1

14:
  %% beam_validator_SUITE.erl:1133
  %% Argument types:
  %%    _1 => 0..1114111
  %% Unique:
  %%    _1
  _7 = bif:'-' `9223372036854775807`, _1

  %% Argument types:
  %%    _6 => 0..1114111
  %%    _7 => 9223372036853661696..9223372036854775807
  %% Unique:
  %%    _6, 
  %%    _7
  _18 = bif:'<' _6, _7
  br _18, ^18, ^17

18:
  %% Result type:
  %%    'ok'
  ret `ok`

17:
  %% Argument types:
  %%    _7 => 9223372036853661696..9223372036854775807
  %% Unique:
  %%    _7
  _31 = bif:'=:=' _7, `-2147483648`
  br _31, ^20, ^19

20:
  %% Result type:
  %%    'ok'
  ret `ok`

19:
  %% beam_validator_SUITE.erl:1133
  %% Unique:
  %%    _7
  _8 = match_fail `case_clause`, _7

  %% Unique:
  %%    _8
  _21 = succeeded:body _8
  br ^1

12:
  %% Aliased:
  %%    _4
  _30 = bs_get_tail _4

  %% beam_validator_SUITE.erl:1132
  %% Aliased:
  %%    _30
  %% Anno: #{inlined => {'-inlined-range_inference_1/1-',1}}
  _9 = match_fail `function_clause`, _30

  %% Unique:
  %%    _9
  _24 = succeeded:body _9
  br ^1

25:
  %% beam_validator_SUITE.erl:1132
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-range_inference_1/1-',1}}
  _27 = match_fail `function_clause`, _0

  %% Unique:
  %%    _27
  _28 = succeeded:body _27
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_validator_SUITE.erl:1142
%% Counter = 77
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bif_inference`(_0) {
0:
  %% beam_validator_SUITE.erl:1143
  _2 = call (`id`/1), `<<>>`

  %% Aliased:
  %%    _2
  _31 = succeeded:body _2
  br _31, ^31, ^1

31:
  %% beam_validator_SUITE.erl:1143
  _1 = call (`id`/1), `<<>>`

  %% Aliased:
  %%    _1
  _32 = succeeded:body _1
  br _32, ^32, ^1

32:
  %% beam_validator_SUITE.erl:1143
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _1, 
  %%    _2
  _17 = call (`bif_inference_is_bitstring`/2), _2, _1

  %% Unique:
  %%    _17
  _33 = succeeded:body _17
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _17 => 'error' | 'ok'
  %% Unique:
  %%    _17
  _72 = bif:'=:=' _17, `ok`
  br _72, ^71, ^35

71:
  %% beam_validator_SUITE.erl:1144
  _5 = call (`id`/1), `a`

  %% Aliased:
  %%    _5
  _36 = succeeded:body _5
  br _36, ^36, ^1

36:
  %% beam_validator_SUITE.erl:1144
  _4 = call (`id`/1), `a`

  %% Aliased:
  %%    _4
  _37 = succeeded:body _4
  br _37, ^37, ^1

37:
  %% beam_validator_SUITE.erl:1144
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _4, 
  %%    _5
  _18 = call (`bif_inference_is_bitstring`/2), _5, _4

  %% Unique:
  %%    _18
  _38 = succeeded:body _18
  br _38, ^38, ^1

38:
  %% Argument types:
  %%    _18 => 'error' | 'ok'
  %% Unique:
  %%    _18
  _69 = bif:'=:=' _18, `error`
  br _69, ^68, ^40

68:
  _9 = make_fun (`id`/1)

  %% beam_validator_SUITE.erl:1146
  %% Aliased:
  %%    _9
  _10 = call (`id`/1), _9

  %% Aliased:
  %%    _10
  _41 = succeeded:body _10
  br _41, ^41, ^1

41:
  _7 = make_fun (`id`/1)

  %% beam_validator_SUITE.erl:1146
  %% Aliased:
  %%    _7
  _8 = call (`id`/1), _7

  %% Aliased:
  %%    _8
  _42 = succeeded:body _8
  br _42, ^42, ^1

42:
  %% beam_validator_SUITE.erl:1146
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _8, 
  %%    _10
  _19 = call (`bif_inference_is_function`/2), _10, _8

  %% Unique:
  %%    _19
  _43 = succeeded:body _19
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _19 => 'error' | 'ok'
  %% Unique:
  %%    _19
  _66 = bif:'=:=' _19, `ok`
  br _66, ^65, ^45

65:
  %% beam_validator_SUITE.erl:1147
  %% Result type:
  %%    'error' | 'ok'
  _20 = call (`bif_inference_is_function`/2), `true`, `true`

  %% Unique:
  %%    _20
  _46 = succeeded:body _20
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _20 => 'error' | 'ok'
  %% Unique:
  %%    _20
  _63 = bif:'=:=' _20, `ok`
  br _63, ^62, ^48

62:
  _13 = make_fun (`id`/1)

  %% beam_validator_SUITE.erl:1148
  %% Aliased:
  %%    _13
  _14 = call (`id`/1), _13

  %% Aliased:
  %%    _14
  _49 = succeeded:body _14
  br _49, ^49, ^1

49:
  %% beam_validator_SUITE.erl:1148
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _14
  _21 = call (`bif_inference_is_function`/2), _14, `a`

  %% Unique:
  %%    _21
  _50 = succeeded:body _21
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    _21 => 'error' | 'ok'
  %% Unique:
  %%    _21
  _60 = bif:'=:=' _21, `error`
  br _60, ^59, ^52

59:
  %% beam_validator_SUITE.erl:1149
  %% Result type:
  %%    'error' | 'ok'
  _22 = call (`bif_inference_is_function`/2), `a`, `a`

  %% Unique:
  %%    _22
  _53 = succeeded:body _22
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    _22 => 'error' | 'ok'
  %% Unique:
  %%    _22
  _57 = bif:'=:=' _22, `error`
  br _57, ^56, ^55

56:
  %% Result type:
  %%    'ok'
  ret `ok`

55:
  %% beam_validator_SUITE.erl:1149
  _23 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _23
  _58 = succeeded:body _23
  br ^1

52:
  %% beam_validator_SUITE.erl:1148
  _24 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _24
  _61 = succeeded:body _24
  br ^1

48:
  %% beam_validator_SUITE.erl:1147
  _25 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _25
  _64 = succeeded:body _25
  br ^1

45:
  %% beam_validator_SUITE.erl:1146
  _26 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _26
  _67 = succeeded:body _26
  br ^1

40:
  %% beam_validator_SUITE.erl:1144
  _27 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _27
  _70 = succeeded:body _27
  br ^1

35:
  %% beam_validator_SUITE.erl:1143
  _28 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _28
  _73 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_validator_SUITE.erl:1153
%% Counter = 31
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bif_inference_is_bitstring`(_0, _1) {
0:
  %% beam_validator_SUITE.erl:1153
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _10 = bif:'=:=' _1, _0

  %% beam_validator_SUITE.erl:1153
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _6 = bif:is_bitstring _0

  %% Argument types:
  %%    _10 => 'false' | 'true'
  %%    _6 => 'false' | 'true'
  %% Unique:
  %%    _6, 
  %%    _10
  _15 = bif:'and' _10, _6
  br _15, ^30, ^21

30:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_validator_SUITE.erl:1158
%% Counter = 31
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`bif_inference_is_function`(_0, _1) {
0:
  %% beam_validator_SUITE.erl:1158
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _10 = bif:'=:=' _1, _0
  switch _0, ^25, [
    { `false`, ^26 },
    { `true`, ^27 }
  ]

27:
  br ^24

26:
  br ^24

24:
  _4 = phi { `ok`, ^26 }, { `true`, ^27 }

  %% Argument types:
  %%    _4 => 'ok' | 'true'
  %% Unique:
  %%    _4
  _18 = bif:'=:=' _4, `true`
  br ^22

25:
  br ^22

22:
  %% Anno: #{boolean_phi => true}
  _5 = phi { `false`, ^25 }, { _18, ^24 }

  %% beam_validator_SUITE.erl:1158
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _6 = bif:is_function _0

  %% beam_validator_SUITE.erl:1158
  %% Argument types:
  %%    _5 => 'false' | 'true'
  %%    _6 => 'false' | 'true'
  %% Unique:
  %%    _5, 
  %%    _6
  _11 = bif:'or' _5, _6

  %% Argument types:
  %%    _10 => 'false' | 'true'
  %%    _11 => 'false' | 'true'
  %% Unique:
  %%    _10, 
  %%    _11
  _15 = bif:'and' _10, _11
  br _15, ^30, ^21

30:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_validator_SUITE.erl:1163
%% Counter = 4
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_validator_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_validator_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_validator_SUITE.erl:1094
%% Counter = 167
%% bs_ensure_opt: true
%% Parameters
%%    _8 =>
%%     bs_matchable(1)
%%     accepts_match_context
function `beam_validator_SUITE`:`'-bad_bin_unit_2/0-lc$^0/1-0-'`(_8) {
0:
  %% Argument types:
  %%    _8 => bs_matchable(1)
  %% Aliased:
  %%    _8
  %% Anno: #{accepts_match_contexts => true}
  _30 = bs_start_match `new`, _8

  %% beam_validator_SUITE.erl:1094
  %% Argument types:
  %%    
  %% Anno: #{unit => 8}
  _3 = bs_create_bin `integer`, `[1,{segment,1}]`, `<<0>>`, `8`

  %% Aliased:
  %%    _3
  _83 = succeeded:guard _3
  br _83, ^85, ^82

85:
  br ^81

82:
  br ^81

81:
  _34 = phi { `bad_size`, ^82 }, { `1`, ^85 }

  %% beam_validator_SUITE.erl:1092
  %% Argument types:
  %%    _30 => bs_context(1)
  %%    _34 => 'bad_size' | 1
  %% Aliased:
  %%    _30, 
  %%    _34
  _36 = bs_match `integer`, _30, `[unsigned,big]`, _34, `1`

  %% Aliased:
  %%    _36
  _89 = succeeded:guard _36
  br _89, ^89, ^96

89:
  %% Aliased:
  %%    _36
  _37 = bs_extract _36

  %% beam_validator_SUITE.erl:1092
  %% Aliased:
  %%    _36
  _38 = bs_get_tail _36

  %% beam_validator_SUITE.erl:1095
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _37, 
  %%    _38
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,
                     {b_local,{b_literal,'-bad_bin_unit_2/0-lc$^1/1-1-'},3}}}
  _69 = call (`'-bad_bin_unit_2/0-lc$^1/1-1-'`/3), `ok`, _37, _38

  %% Aliased:
  %%    _69
  _91 = succeeded:body _69
  br ^1

96:
  %% beam_validator_SUITE.erl:1094
  %% Argument types:
  %%    
  %% Anno: #{unit => 8}
  _48 = bs_create_bin `integer`, `[1,{segment,1}]`, `<<0>>`, `8`

  %% Aliased:
  %%    _48
  _99 = succeeded:guard _48
  br _99, ^101, ^98

101:
  br ^97

98:
  br ^97

97:
  _50 = phi { `bad_size`, ^98 }, { `1`, ^101 }

  %% beam_validator_SUITE.erl:1092
  %% Aliased:
  %%    _30, 
  %%    _50
  _54 = bs_match `skip`, _30, `integer`, `[unsigned,big]`, _50, `1`

  %% Aliased:
  %%    _54
  _105 = succeeded:guard _54
  br _105, ^163, ^112

163:
  %% beam_validator_SUITE.erl:1094
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _54
  %% Anno: #{bsm_info => context_reused}
  _72 = call (`'-bad_bin_unit_2/0-lc$^0/1-0-'`/1), _54

  %% Unique:
  %%    _72
  _107 = succeeded:body _72
  br _107, ^107, ^1

107:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _72
  ret _72

1:
  _159 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _159

112:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_validator_SUITE.erl:1095
%% Counter = 83
%% bs_ensure_opt: true
%% Parameters
%%    _10 =>
%%     'ok'
%%    _37 =>
%%     0..1
%%    _39 =>
%%     bitstring(1)
function `beam_validator_SUITE`:`'-bad_bin_unit_2/0-lc$^1/1-1-'`(_10, _37, _39) {
0:
  %% beam_validator_SUITE.erl:1095
  _68 = call (`erlang`:`error`/1), `{bad_generator,ok}`

  %% Aliased:
  %%    _68
  _81 = succeeded:body _68
  br ^1

1:
  _69 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _69
}

%% beam_validator_SUITE.erl:1066
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _49 =>
%%     0..1
function `beam_validator_SUITE`:`'-bad_bin_unit_1/1-after$^0/0-0-'`(_49) {
0:
  %% beam_validator_SUITE.erl:1069
  %% Argument types:
  %%    
  _7 = bif:'not' `ok`

  %% Unique:
  %%    _7
  _55 = succeeded:body _7
  br ^1

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% beam_validator_SUITE.erl:1037
%% Counter = 49
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-infer_relops/1-lc$^1/1-1-'`(_12) {
0:
  %% Aliased:
  %%    _12
  _44 = is_nonempty_list _12
  br _44, ^44, ^36

44:
  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _24 = get_hd _12

  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _12
  _23 = get_tl _12

  %% beam_validator_SUITE.erl:1037
  %% Result type:
  %%    'ge' | 'lt'
  %% Aliased:
  %%    _24
  _25 = call (`infer_relops_1`/1), _24

  %% Unique:
  %%    _25
  _37 = succeeded:body _25
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    _25 => 'ge' | 'lt'
  %% Unique:
  %%    _25
  _42 = bif:'=:=' _25, `ge`
  br _42, ^41, ^39

41:
  %% beam_validator_SUITE.erl:1037
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _23
  _30 = call (`'-infer_relops/1-lc$^1/1-1-'`/1), _23

  %% Unique:
  %%    _30
  _40 = succeeded:body _30
  br _40, ^40, ^1

40:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _30
  ret _30

39:
  %% beam_validator_SUITE.erl:1037
  _31 = match_fail `badmatch`, `lt`

  %% Unique:
  %%    _31
  _43 = succeeded:body _31
  br ^1

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _45 = bif:'=:=' _12, `[]`
  br _45, ^45, ^35

45:
  %% Result type:
  %%    nil()
  ret `[]`

35:
  %% Argument types:
  %%    _12 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _12
  _22 = put_tuple `bad_generator`, _12

  %% beam_validator_SUITE.erl:1037
  %% Unique:
  %%    _22
  _32 = call (`erlang`:`error`/1), _22

  %% Aliased:
  %%    _32
  _46 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% beam_validator_SUITE.erl:1036
%% Counter = 45
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-infer_relops/1-lc$^0/1-0-'`(_4) {
0:
  %% Aliased:
  %%    _4
  _40 = is_nonempty_list _4
  br _40, ^40, ^32

40:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _18 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _17 = get_tl _4

  %% beam_validator_SUITE.erl:1036
  %% Result type:
  %%    'ge' | 'lt'
  %% Aliased:
  %%    _18
  _19 = call (`infer_relops_1`/1), _18

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _19 => 'ge' | 'lt'
  %% Unique:
  %%    _19
  _38 = bif:'=:=' _19, `lt`
  br _38, ^37, ^35

37:
  %% beam_validator_SUITE.erl:1036
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _17
  _26 = call (`'-infer_relops/1-lc$^0/1-0-'`/1), _17

  %% Unique:
  %%    _26
  _36 = succeeded:body _26
  br _36, ^36, ^1

36:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _26
  ret _26

35:
  %% beam_validator_SUITE.erl:1036
  _27 = match_fail `badmatch`, `ge`

  %% Unique:
  %%    _27
  _39 = succeeded:body _27
  br ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _41 = bif:'=:=' _4, `[]`
  br _41, ^41, ^31

41:
  %% Result type:
  %%    nil()
  ret `[]`

31:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _16 = put_tuple `bad_generator`, _4

  %% beam_validator_SUITE.erl:1036
  %% Unique:
  %%    _16
  _28 = call (`erlang`:`error`/1), _16

  %% Aliased:
  %%    _28
  _42 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_validator_SUITE.erl:905
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _13 =>
%%     list(any())
function `beam_validator_SUITE`:`'-beam_val/1-lc$^1/1-1-'`(_13) {
0:
  %% Aliased:
  %%    _13
  _54 = is_nonempty_list _13
  br _54, ^54, ^55

54:
  %% Argument types:
  %%    _13 => nonempty_list(any())
  %% Aliased:
  %%    _13
  _40 = get_hd _13

  %% Argument types:
  %%    _13 => nonempty_list(any())
  %% Aliased:
  %%    _13
  _39 = get_tl _13

  %% beam_validator_SUITE.erl:904
  %% Aliased:
  %%    _40
  _15 = call (`beam_validator`:`format_error`/1), _40

  %% Aliased:
  %%    _15
  _51 = succeeded:body _15
  br _51, ^51, ^1

51:
  %% beam_validator_SUITE.erl:904
  %% Aliased:
  %%    _15
  _44 = call (`io`:`put_chars`/1), _15

  %% Aliased:
  %%    _44
  _52 = succeeded:body _44
  br _52, ^52, ^1

52:
  %% beam_validator_SUITE.erl:905
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _39
  _45 = call (`'-beam_val/1-lc$^1/1-1-'`/1), _39

  %% Unique:
  %%    _45
  _53 = succeeded:body _45
  br _53, ^53, ^1

53:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _45
  ret _45

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47

55:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_validator_SUITE.erl:903
%% Counter = 61
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-beam_val/1-lc$^0/1-0-'`(_6) {
0:
  %% Aliased:
  %%    _6
  _57 = is_nonempty_list _6
  br _57, ^57, ^47

57:
  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _32 = get_hd _6

  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _31 = get_tl _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _53 = bif:is_tuple _32
  br _53, ^53, ^48

53:
  %% Argument types:
  %%    _32 => {...}
  %% Aliased:
  %%    _32
  _54 = bif:tuple_size _32

  %% Argument types:
  %%    _54 => 0..16777215
  %% Unique:
  %%    _54
  _55 = bif:'=:=' _54, `3`
  br _55, ^52, ^48

52:
  %% Argument types:
  %%    _32 => {any(), any(), any()}
  %% Aliased:
  %%    _32
  _34 = get_tuple_element _32, `1`

  %% Argument types:
  %%    _32 => {any(), any(), any()}
  %% Aliased:
  %%    _32
  _33 = get_tuple_element _32, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _51 = bif:'=:=' _34, `beam_validator`
  br _51, ^50, ^48

50:
  %% beam_validator_SUITE.erl:903
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _31
  _8 = call (`'-beam_val/1-lc$^0/1-0-'`/1), _31

  %% Aliased:
  %%    _8
  _49 = succeeded:body _8
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _8 => list(any())
  %% Aliased:
  %%    _8, 
  %%    _33
  _41 = put_list _33, _8
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _41
  ret _41

48:
  %% beam_validator_SUITE.erl:903
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _31
  _42 = call (`'-beam_val/1-lc$^0/1-0-'`/1), _31

  %% Aliased:
  %%    _42
  _56 = succeeded:body _42
  br _56, ^56, ^1

56:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _42
  ret _42

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _58 = bif:'=:=' _6, `[]`
  br _58, ^58, ^46

58:
  %% Result type:
  %%    nil()
  ret `[]`

46:
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _30 = put_tuple `bad_generator`, _6

  %% beam_validator_SUITE.erl:903
  %% Unique:
  %%    _30
  _43 = call (`erlang`:`error`/1), _30

  %% Aliased:
  %%    _43
  _59 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_validator_SUITE.erl:894
%% Counter = 67
%% bs_ensure_opt: true
%% Parameters
%%    _15 =>
%%     list(any())
function `beam_validator_SUITE`:`'-do_val/2-lc$^1/1-1-'`(_15) {
0:
  %% Aliased:
  %%    _15
  _62 = is_nonempty_list _15
  br _62, ^62, ^63

62:
  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    _15
  _46 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    _15
  _45 = get_tl _15

  %% beam_validator_SUITE.erl:893
  %% Aliased:
  %%    _46
  _17 = call (`beam_validator`:`format_error`/1), _46

  %% Aliased:
  %%    _17
  _59 = succeeded:body _17
  br _59, ^59, ^1

59:
  %% beam_validator_SUITE.erl:893
  %% Aliased:
  %%    _17
  _52 = call (`io`:`put_chars`/1), _17

  %% Aliased:
  %%    _52
  _60 = succeeded:body _52
  br _60, ^60, ^1

60:
  %% beam_validator_SUITE.erl:894
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _45
  _53 = call (`'-do_val/2-lc$^1/1-1-'`/1), _45

  %% Unique:
  %%    _53
  _61 = succeeded:body _53
  br _61, ^61, ^1

61:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _53
  ret _53

1:
  _55 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _55

63:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_validator_SUITE.erl:892
%% Counter = 69
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-do_val/2-lc$^0/1-0-'`(_8) {
0:
  %% Aliased:
  %%    _8
  _65 = is_nonempty_list _8
  br _65, ^65, ^55

65:
  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _38 = get_hd _8

  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _37 = get_tl _8

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _61 = bif:is_tuple _38
  br _61, ^61, ^56

61:
  %% Argument types:
  %%    _38 => {...}
  %% Aliased:
  %%    _38
  _62 = bif:tuple_size _38

  %% Argument types:
  %%    _62 => 0..16777215
  %% Unique:
  %%    _62
  _63 = bif:'=:=' _62, `3`
  br _63, ^60, ^56

60:
  %% Argument types:
  %%    _38 => {any(), any(), any()}
  %% Aliased:
  %%    _38
  _40 = get_tuple_element _38, `1`

  %% Argument types:
  %%    _38 => {any(), any(), any()}
  %% Aliased:
  %%    _38
  _39 = get_tuple_element _38, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _59 = bif:'=:=' _40, `beam_validator`
  br _59, ^58, ^56

58:
  %% beam_validator_SUITE.erl:892
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _37
  _10 = call (`'-do_val/2-lc$^0/1-0-'`/1), _37

  %% Aliased:
  %%    _10
  _57 = succeeded:body _10
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    _10 => list(any())
  %% Aliased:
  %%    _10, 
  %%    _39
  _49 = put_list _39, _10
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _49
  ret _49

56:
  %% beam_validator_SUITE.erl:892
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _37
  _50 = call (`'-do_val/2-lc$^0/1-0-'`/1), _37

  %% Aliased:
  %%    _50
  _64 = succeeded:body _50
  br _64, ^64, ^1

64:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _50
  ret _50

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _66 = bif:'=:=' _8, `[]`
  br _66, ^66, ^54

66:
  %% Result type:
  %%    nil()
  ret `[]`

54:
  %% Argument types:
  %%    _8 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _8
  _36 = put_tuple `bad_generator`, _8

  %% beam_validator_SUITE.erl:892
  %% Unique:
  %%    _36
  _51 = call (`erlang`:`error`/1), _36

  %% Aliased:
  %%    _51
  _67 = succeeded:body _51
  br ^1

1:
  _52 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _52
}

%% beam_validator_SUITE.erl:878
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> list(any()))
function `beam_validator_SUITE`:`'-transform_is/2-lc$^0/1-0-'`(_4, _0) {
0:
  %% Aliased:
  %%    _4
  _29 = is_nonempty_list _4
  br _29, ^29, ^26

29:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _20 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _19 = get_tl _4

  %% beam_validator_SUITE.erl:878
  %% Result type:
  %%    {'function', any(), any(), any(), list(any())}
  %% Aliased:
  %%    _0, 
  %%    _20
  _6 = call (`transform_is_1`/2), _0, _20

  %% Aliased:
  %%    _6
  _27 = succeeded:body _6
  br _27, ^27, ^1

27:
  %% beam_validator_SUITE.erl:878
  %% Result type:
  %%    list({'function', any(), any(), any(), list(any())})
  %% Aliased:
  %%    _0, 
  %%    _19
  _7 = call (`'-transform_is/2-lc$^0/1-0-'`/2), _19, _0

  %% Aliased:
  %%    _7
  _28 = succeeded:body _7
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _6 => {'function', any(), any(), any(), list(any())}
  %%    _7 => list({'function', any(), any(), any(), list(any())})
  %% Aliased:
  %%    _6, 
  %%    _7
  _21 = put_list _6, _7
  %% Result type:
  %%    nonempty_list({'function', any(), any(), any(), list(any())})
  %% Unique:
  %%    _21
  ret _21

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _30 = bif:'=:=' _4, `[]`
  br _30, ^30, ^25

30:
  %% Result type:
  %%    nil()
  ret `[]`

25:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _18 = put_tuple `bad_generator`, _4

  %% beam_validator_SUITE.erl:878
  %% Unique:
  %%    _18
  _22 = call (`erlang`:`error`/1), _18

  %% Aliased:
  %%    _22
  _31 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% beam_validator_SUITE.erl:875
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `beam_validator_SUITE`:`'-transform_i/2-fun-1-'`(_8, _0) {
0:
  %% beam_validator_SUITE.erl:875
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _8
  _17 = call (`'-transform_i/2-lc$^0/1-0-'`/2), _8, _0

  %% Aliased:
  %%    _17
  _20 = succeeded:body _17
  br _20, ^20, ^1

20:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _17
  ret _17

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% beam_validator_SUITE.erl:875
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `beam_validator_SUITE`:`'-transform_i/2-lc$^0/1-0-'`(_4, _0) {
0:
  %% Aliased:
  %%    _4
  _23 = is_nonempty_list _4
  br _23, ^23, ^20

23:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _14 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _13 = get_tl _4

  %% beam_validator_SUITE.erl:875
  %% Argument types:
  %%    _0 => fun((_))
  %% Aliased:
  %%    _0, 
  %%    _14
  _6 = call _0, _14

  %% Aliased:
  %%    _6
  _21 = succeeded:body _6
  br _21, ^21, ^1

21:
  %% beam_validator_SUITE.erl:875
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _13
  _7 = call (`'-transform_i/2-lc$^0/1-0-'`/2), _13, _0

  %% Aliased:
  %%    _7
  _22 = succeeded:body _7
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _7 => list(any())
  %% Aliased:
  %%    _6, 
  %%    _7
  _15 = put_list _6, _7
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _15
  ret _15

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _24 = bif:'=:=' _4, `[]`
  br _24, ^24, ^19

24:
  %% Result type:
  %%    nil()
  ret `[]`

19:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _12 = put_tuple `bad_generator`, _4

  %% beam_validator_SUITE.erl:875
  %% Unique:
  %%    _12
  _16 = call (`erlang`:`error`/1), _12

  %% Aliased:
  %%    _16
  _25 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_validator_SUITE.erl:872
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> 'false' | 'true')
function `beam_validator_SUITE`:`'-transform_remove/2-fun-1-'`(_9, _0) {
0:
  %% beam_validator_SUITE.erl:872
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _9
  _21 = call (`'-transform_remove/2-lc$^0/1-0-'`/2), _9, _0

  %% Aliased:
  %%    _21
  _24 = succeeded:body _21
  br _24, ^24, ^1

24:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _21
  ret _21

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% beam_validator_SUITE.erl:872
%% Counter = 38
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_) -> 'false' | 'true')
function `beam_validator_SUITE`:`'-transform_remove/2-lc$^0/1-0-'`(_5, _0) {
0:
  %% Aliased:
  %%    _5
  _33 = is_nonempty_list _5
  br _33, ^33, ^24

33:
  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _15 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _14 = get_tl _5

  %% beam_validator_SUITE.erl:872
  %% Result type:
  %%    'false' | 'true'
  %% Argument types:
  %%    _0 => fun((_) -> 'false' | 'true')
  %% Aliased:
  %%    _0, 
  %%    _15
  _16 = call _0, _15

  %% Aliased:
  %%    _16
  _25 = succeeded:body _16
  br _25, ^25, ^1

25:
  br _16, ^31, ^30

31:
  %% beam_validator_SUITE.erl:872
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _14
  _18 = call (`'-transform_remove/2-lc$^0/1-0-'`/2), _14, _0

  %% Aliased:
  %%    _18
  _28 = succeeded:body _18
  br _28, ^28, ^1

28:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _18
  ret _18

30:
  %% beam_validator_SUITE.erl:872
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _14
  _7 = call (`'-transform_remove/2-lc$^0/1-0-'`/2), _14, _0

  %% Aliased:
  %%    _7
  _29 = succeeded:body _7
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _7 => list(any())
  %% Aliased:
  %%    _7, 
  %%    _15
  _17 = put_list _15, _7
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _17
  ret _17

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _34 = bif:'=:=' _5, `[]`
  br _34, ^34, ^23

34:
  %% Result type:
  %%    nil()
  ret `[]`

23:
  %% Argument types:
  %%    _5 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _5
  _13 = put_tuple `bad_generator`, _5

  %% beam_validator_SUITE.erl:872
  %% Unique:
  %%    _13
  _20 = call (`erlang`:`error`/1), _13

  %% Aliased:
  %%    _20
  _35 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_validator_SUITE.erl:621
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     list('gaffel' | 'gurka')
function `beam_validator_SUITE`:`'-aliased_types_3/1-lc$^0/1-0-'`(_3) {
0:
  %% Unique:
  %%    _3
  _23 = is_nonempty_list _3
  br _23, ^23, ^24

23:
  %% Argument types:
  %%    _3 => nonempty_list('gaffel' | 'gurka')
  %% Unique:
  %%    _3
  _15 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_list('gaffel' | 'gurka')
  %% Unique:
  %%    _3
  _14 = get_tl _3

  %% beam_validator_SUITE.erl:621
  %% Result type:
  %%    list('gaffel' | 'gurka')
  %% Unique:
  %%    _14
  _5 = call (`'-aliased_types_3/1-lc$^0/1-0-'`/1), _14

  %% Unique:
  %%    _5
  _22 = succeeded:body _5
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _15 => 'gaffel' | 'gurka'
  %%    _5 => list('gaffel' | 'gurka')
  %% Unique:
  %%    _5, 
  %%    _15
  _16 = put_list _15, _5
  %% Result type:
  %%    nonempty_list('gaffel' | 'gurka')
  %% Unique:
  %%    _16
  ret _16

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18

24:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_validator_SUITE.erl:485
%% Counter = 20
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-remove_bs_save/1-fun-0-'`(_1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _17 = is_tagged_tuple _1, `3`, `bs_save2`
  br _17, ^14, ^13

14:
  %% Result type:
  %%    'true'
  ret `true`

13:
  %% Result type:
  %%    'false'
  ret `false`
}

%% beam_validator_SUITE.erl:480
%% Counter = 27
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-remove_bs_start_match/1-fun-0-'`(_1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _24 = is_tagged_tuple _1, `6`, `test`
  br _24, ^21, ^18

21:
  %% Argument types:
  %%    _1 => {'test', any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _1
  _14 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _20 = bif:'=:=' _14, `bs_start_match2`
  ret _20

18:
  %% Result type:
  %%    'false'
  ret `false`
}

%% beam_validator_SUITE.erl:462
%% Counter = 54
%% bs_ensure_opt: true
function `beam_validator_SUITE`:`'-do_bin_opt/3-lc$^0/1-0-'`(_8) {
0:
  %% Aliased:
  %%    _8
  _49 = is_nonempty_list _8
  br _49, ^49, ^46

49:
  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _39 = get_hd _8

  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _38 = get_tl _8

  %% beam_validator_SUITE.erl:462
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _39
  _40 = call (`verify_bin_opt_error`/1), _39

  %% Unique:
  %%    _40
  _47 = succeeded:body _40
  br _47, ^47, ^1

47:
  %% beam_validator_SUITE.erl:462
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _38
  _41 = call (`'-do_bin_opt/3-lc$^0/1-0-'`/1), _38

  %% Unique:
  %%    _41
  _48 = succeeded:body _41
  br _48, ^48, ^1

48:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _41
  ret _41

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _50 = bif:'=:=' _8, `[]`
  br _50, ^50, ^45

50:
  %% Result type:
  %%    nil()
  ret `[]`

45:
  %% Argument types:
  %%    _8 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _8
  _37 = put_tuple `bad_generator`, _8

  %% beam_validator_SUITE.erl:462
  %% Unique:
  %%    _37
  _42 = call (`erlang`:`error`/1), _37

  %% Aliased:
  %%    _42
  _51 = succeeded:body _42
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}
