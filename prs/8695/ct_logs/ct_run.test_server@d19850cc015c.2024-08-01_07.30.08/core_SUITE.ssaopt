module core_SUITE.
exports [{all,0},
         {bad_boolean_guard,1},
         {bs_shadowed_size_var,1},
         {core_lint,1},
         {cover_v3_kernel_1,1},
         {cover_v3_kernel_2,1},
         {cover_v3_kernel_3,1},
         {cover_v3_kernel_4,1},
         {cover_v3_kernel_5,1},
         {dehydrated_itracer,1},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {eval_case,1},
         {eval_is_boolean,1},
         {fun_letrec_effect,1},
         {get_map_element,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {make_effect_seq,1},
         {map_core_test,1},
         {module_info,0},
         {module_info,1},
         {name_capture,1},
         {nested_tries,1},
         {nif,1},
         {no_load_nif,1},
         {no_nif,1},
         {nomatch_shadow,1},
         {non_variable_apply,1},
         {receive_tests,1},
         {reversed_annos,1},
         {seq_in_guard,1},
         {suite,0},
         {unsafe_case,1}].
attributes [].

%% core_SUITE.erl:41
%% Counter = 18
%% bs_ensure_opt: true
function `core_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% core_SUITE.erl:41
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% core_SUITE.erl:41
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    maybe_improper_list(any(), any())
  %% Aliased:
  %%    _1
  ret _1

10:
  %% core_SUITE.erl:41
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-init_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% core_SUITE.erl:44
%% Counter = 18
%% bs_ensure_opt: true
function `core_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% core_SUITE.erl:44
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% core_SUITE.erl:44
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% core_SUITE.erl:44
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-end_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% core_SUITE.erl:47
%% Counter = 4
%% bs_ensure_opt: true
function `core_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 5}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,5}}]`
}

%% core_SUITE.erl:51
%% Counter = 4
%% bs_ensure_opt: true
function `core_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% core_SUITE.erl:54
%% Counter = 7
%% bs_ensure_opt: true
function `core_SUITE`:`groups`() {
0:
  %% core_SUITE.erl:55
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[dehydrated_itracer,nested_tries,seq_in_guard,make_effect_seq,
  eval_is_boolean,unsafe_case,nomatch_shadow,reversed_annos,map_core_test,
  eval_case,bad_boolean_guard,bs_shadowed_size_var,cover_v3_kernel_1,
  cover_v3_kernel_2,cover_v3_kernel_3,cover_v3_kernel_4,cover_v3_kernel_5,
  non_variable_apply,name_capture,fun_letrec_effect,get_map_element,
  receive_tests,core_lint,nif,no_nif,no_load_nif]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:68
%% Counter = 6
%% bs_ensure_opt: true
function `core_SUITE`:`init_per_suite`(_0) {
0:
  %% core_SUITE.erl:69
  _2 = call (`test_lib`:`recompile`/1), `core_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_SUITE.erl:72
%% Counter = 4
%% bs_ensure_opt: true
function `core_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_SUITE.erl:75
%% Counter = 4
%% bs_ensure_opt: true
function `core_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% core_SUITE.erl:78
%% Counter = 4
%% bs_ensure_opt: true
function `core_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% core_SUITE.erl:82
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`dehydrated_itracer`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:82
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `dehydrated_itracer`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:82
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-dehydrated_itracer/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:83
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`nested_tries`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:83
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `nested_tries`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:83
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_tries/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:84
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`seq_in_guard`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:84
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `seq_in_guard`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:84
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-seq_in_guard/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:85
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`make_effect_seq`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:85
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `make_effect_seq`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:85
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-make_effect_seq/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:86
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`eval_is_boolean`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:86
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `eval_is_boolean`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:86
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-eval_is_boolean/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:87
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`unsafe_case`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:87
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `unsafe_case`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:87
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-unsafe_case/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:88
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`nomatch_shadow`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:88
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `nomatch_shadow`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:88
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nomatch_shadow/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:89
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`reversed_annos`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:89
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `reversed_annos`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:89
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-reversed_annos/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:90
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`map_core_test`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:90
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `map_core_test`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:90
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-map_core_test/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:91
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`eval_case`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:91
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `eval_case`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:91
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-eval_case/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:92
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`bad_boolean_guard`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:92
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `bad_boolean_guard`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:92
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_boolean_guard/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:93
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`bs_shadowed_size_var`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:93
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `bs_shadowed_size_var`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:93
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bs_shadowed_size_var/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:94
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`cover_v3_kernel_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:94
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `cover_v3_kernel_1`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:94
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cover_v3_kernel_1/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:95
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`cover_v3_kernel_2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:95
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `cover_v3_kernel_2`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:95
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cover_v3_kernel_2/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:96
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`cover_v3_kernel_3`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:96
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `cover_v3_kernel_3`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:96
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cover_v3_kernel_3/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:97
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`cover_v3_kernel_4`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:97
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `cover_v3_kernel_4`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:97
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cover_v3_kernel_4/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:98
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`cover_v3_kernel_5`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:98
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `cover_v3_kernel_5`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:98
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cover_v3_kernel_5/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:99
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`non_variable_apply`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:99
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `non_variable_apply`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:99
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-non_variable_apply/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:100
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`name_capture`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:100
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `name_capture`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:100
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-name_capture/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:101
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`fun_letrec_effect`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:101
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `fun_letrec_effect`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:101
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-fun_letrec_effect/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:102
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`get_map_element`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:102
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `get_map_element`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:102
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-get_map_element/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:103
%% Counter = 10
%% bs_ensure_opt: true
function `core_SUITE`:`receive_tests`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% core_SUITE.erl:103
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _2 = call (`try_it`/2), `receive_tests`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _2
  ret _2

6:
  %% core_SUITE.erl:103
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-receive_tests/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:105
%% Counter = 13
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     maybe_improper_list(any(), any())
function `core_SUITE`:`try_it`(_0, _1) {
0:
  %% core_SUITE.erl:106
  %% Aliased:
  %%    _1
  _3 = call (`proplists`:`get_value`/2), `data_dir`, _1

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% core_SUITE.erl:107
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`atom_to_list`/1), _0

  %% Aliased:
  %%    _2
  _9 = succeeded:body _2
  br _9, ^9, ^1

9:
  %% core_SUITE.erl:106
  %% Aliased:
  %%    _2, 
  %%    _3
  Src = call (`filename`:`join`/2), _3, _2

  %% Aliased:
  %%    Src
  _10 = succeeded:body Src
  br _10, ^10, ^1

10:
  %% core_SUITE.erl:108
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    Src
  _4 = call (`compile_and_load`/2), Src, `[]`

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% core_SUITE.erl:109
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    Src
  _5 = call (`compile_and_load`/2), Src, `[no_copt]`

  %% Unique:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% core_SUITE.erl:111
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     list('no_copt')
function `core_SUITE`:`compile_and_load`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => list('no_copt')
  %% Unique:
  %%    _1
  _10 = put_list `binary`, _1

  %% Argument types:
  %%    _10 => nonempty_list('binary' | 'no_copt')
  %% Unique:
  %%    _10
  _11 = put_list `time`, _10

  %% Argument types:
  %%    _11 => nonempty_list('binary' | 'no_copt' | 'time')
  %% Unique:
  %%    _11
  _12 = put_list `report`, _11

  %% Argument types:
  %%    _12 => nonempty_list('binary' | 'no_copt' | 'report' | 'time')
  %% Unique:
  %%    _12
  _13 = put_list `from_core`, _12

  %% core_SUITE.erl:112
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _13
  _14 = call (`compile`:`file`/2), _0, _13

  %% Aliased:
  %%    _14
  _29 = succeeded:body _14
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _54 = is_tagged_tuple _14, `3`, `ok`
  br _54, ^51, ^31

51:
  %% Argument types:
  %%    _14 => {'ok', any(), any()}
  %% Aliased:
  %%    _14
  _16 = get_tuple_element _14, `1`

  %% Argument types:
  %%    _14 => {'ok', any(), any()}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `2`

  %% core_SUITE.erl:113
  %% Aliased:
  %%    _15, 
  %%    _16
  _18 = call (`code`:`load_binary`/3), _16, _16, _15

  %% Aliased:
  %%    _18
  _32 = succeeded:body _18
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _47 = is_tagged_tuple _18, `2`, `module`
  br _47, ^44, ^34

44:
  %% Argument types:
  %%    _18 => {'module', any()}
  %% Aliased:
  %%    _18
  _19 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16, 
  %%    _19
  _35 = bif:'=:=' _19, _16
  br _35, ^35, ^34

35:
  %% core_SUITE.erl:114
  _21 = call (_16:_16/0)

  %% Aliased:
  %%    _21
  _36 = succeeded:body _21
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _42 = bif:'=:=' _21, `ok`
  br _42, ^41, ^38

41:
  %% core_SUITE.erl:115
  %% Aliased:
  %%    _16
  _22 = call (`code`:`delete`/1), _16

  %% Aliased:
  %%    _22
  _39 = succeeded:body _22
  br _39, ^39, ^1

39:
  %% core_SUITE.erl:116
  %% Aliased:
  %%    _16
  _23 = call (`code`:`purge`/1), _16

  %% Aliased:
  %%    _23
  _40 = succeeded:body _23
  br _40, ^40, ^1

40:
  %% Result type:
  %%    'ok'
  ret `ok`

38:
  %% core_SUITE.erl:114
  %% Aliased:
  %%    _21
  _24 = match_fail `badmatch`, _21

  %% Unique:
  %%    _24
  _43 = succeeded:body _24
  br ^1

34:
  %% core_SUITE.erl:113
  %% Aliased:
  %%    _18
  _25 = match_fail `badmatch`, _18

  %% Unique:
  %%    _25
  _50 = succeeded:body _25
  br ^1

31:
  %% core_SUITE.erl:112
  %% Aliased:
  %%    _14
  _26 = match_fail `badmatch`, _14

  %% Unique:
  %%    _26
  _57 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% core_SUITE.erl:119
%% Counter = 148
%% bs_ensure_opt: true
function `core_SUITE`:`core_lint`(_0) {
0:
  %% core_SUITE.erl:120
  OK = call (`cerl`:`c_atom`/1), `ok`

  %% Aliased:
  %%    OK
  _79 = succeeded:body OK
  br _79, ^79, ^1

79:
  %% core_SUITE.erl:121
  %% Result type:
  %%    'error'
  _64 = call (`core_lint_function`/1), `illegal`

  %% Aliased:
  %%    _64
  _80 = succeeded:body _64
  br _80, ^80, ^1

80:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _37 = put_list OK, `[]`

  %% core_SUITE.erl:122
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _37
  _2 = call (`cerl`:`c_let`/3), _37, OK, OK

  %% Aliased:
  %%    _2
  _81 = succeeded:body _2
  br _81, ^81, ^1

81:
  %% core_SUITE.erl:122
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _2
  _65 = call (`core_lint_function`/1), _2

  %% Aliased:
  %%    _65
  _82 = succeeded:body _65
  br _82, ^82, ^1

82:
  %% core_SUITE.erl:123
  _4 = call (`cerl`:`c_var`/1), `var`

  %% Aliased:
  %%    _4
  _83 = succeeded:body _4
  br _83, ^83, ^1

83:
  %% core_SUITE.erl:123
  _3 = call (`cerl`:`c_var`/1), `999`

  %% Aliased:
  %%    _3
  _84 = succeeded:body _3
  br _84, ^84, ^1

84:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _38 = put_list _4, `[]`

  %% core_SUITE.erl:123
  %% Aliased:
  %%    _3, 
  %%    OK
  %% Unique:
  %%    _38
  _5 = call (`cerl`:`c_let`/3), _38, _3, OK

  %% Aliased:
  %%    _5
  _85 = succeeded:body _5
  br _85, ^85, ^1

85:
  %% core_SUITE.erl:123
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _5
  _66 = call (`core_lint_function`/1), _5

  %% Aliased:
  %%    _66
  _86 = succeeded:body _66
  br _86, ^86, ^1

86:
  %% core_SUITE.erl:124
  _7 = call (`cerl`:`c_var`/1), `var`

  %% Aliased:
  %%    _7
  _87 = succeeded:body _7
  br _87, ^87, ^1

87:
  %% core_SUITE.erl:124
  _6 = call (`cerl`:`c_var`/1), `unknown`

  %% Aliased:
  %%    _6
  _88 = succeeded:body _6
  br _88, ^88, ^1

88:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _39 = put_list _7, `[]`

  %% core_SUITE.erl:124
  %% Aliased:
  %%    _6, 
  %%    OK
  %% Unique:
  %%    _39
  _8 = call (`cerl`:`c_let`/3), _39, _6, OK

  %% Aliased:
  %%    _8
  _89 = succeeded:body _8
  br _89, ^89, ^1

89:
  %% core_SUITE.erl:124
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _8
  _67 = call (`core_lint_function`/1), _8

  %% Aliased:
  %%    _67
  _90 = succeeded:body _67
  br _90, ^90, ^1

90:
  %% core_SUITE.erl:125
  %% Aliased:
  %%    OK
  _9 = call (`cerl`:`c_try`/5), OK, `[]`, OK, `[]`, `handler`

  %% Aliased:
  %%    _9
  _91 = succeeded:body _9
  br _91, ^91, ^1

91:
  %% core_SUITE.erl:125
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _9
  _68 = call (`core_lint_function`/1), _9

  %% Aliased:
  %%    _68
  _92 = succeeded:body _68
  br _92, ^92, ^1

92:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _40 = put_tuple OK, `0`

  %% core_SUITE.erl:126
  %% Unique:
  %%    _40
  _10 = call (`cerl`:`c_var`/1), _40

  %% Aliased:
  %%    _10
  _93 = succeeded:body _10
  br _93, ^93, ^1

93:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _41 = put_list OK, `[]`

  %% core_SUITE.erl:126
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _41
  _11 = call (`cerl`:`c_apply`/2), _10, _41

  %% Aliased:
  %%    _11
  _94 = succeeded:body _11
  br _94, ^94, ^1

94:
  %% core_SUITE.erl:126
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _11
  _69 = call (`core_lint_function`/1), _11

  %% Aliased:
  %%    _69
  _95 = succeeded:body _69
  br _95, ^95, ^1

95:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _42 = put_list OK, `[]`

  %% core_SUITE.erl:128
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _42
  _70 = call (`core_lint_function`/3), `[]`, _42, OK

  %% Aliased:
  %%    _70
  _96 = succeeded:body _70
  br _96, ^96, ^1

96:
  %% core_SUITE.erl:129
  _12 = call (`cerl`:`c_char`/1), `42`

  %% Aliased:
  %%    _12
  _97 = succeeded:body _12
  br _97, ^97, ^1

97:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12, 
  %%    OK
  _43 = put_tuple _12, OK

  %% core_SUITE.erl:129
  %% Unique:
  %%    _43
  _13 = call (`cerl`:`c_var`/1), _43

  %% Aliased:
  %%    _13
  _98 = succeeded:body _13
  br _98, ^98, ^1

98:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _44 = put_list _13, `[]`

  %% core_SUITE.erl:129
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _44
  _71 = call (`core_lint_function`/3), _44, `[]`, OK

  %% Aliased:
  %%    _71
  _99 = succeeded:body _71
  br _99, ^99, ^1

99:
  %% core_SUITE.erl:131
  _15 = call (`cerl`:`c_var`/1), `99`

  %% Aliased:
  %%    _15
  _100 = succeeded:body _15
  br _100, ^100, ^1

100:
  %% core_SUITE.erl:131
  _14 = call (`cerl`:`c_var`/1), `99`

  %% Aliased:
  %%    _14
  _101 = succeeded:body _14
  br _101, ^101, ^1

101:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _45 = put_list _14, `[]`

  %% Argument types:
  %%    _45 => nonempty_list(any())
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _45
  _46 = put_list _15, _45

  %% core_SUITE.erl:131
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _46
  _72 = call (`core_lint_pattern`/1), _46

  %% Aliased:
  %%    _72
  _102 = succeeded:body _72
  br _102, ^102, ^1

102:
  %% core_SUITE.erl:132
  _16 = call (`cerl`:`c_var`/1), `var`

  %% Aliased:
  %%    _16
  _103 = succeeded:body _16
  br _103, ^103, ^1

103:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _47 = put_list _16, `[]`

  %% core_SUITE.erl:132
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _47
  _17 = call (`cerl`:`c_let`/3), _47, OK, OK

  %% Aliased:
  %%    _17
  _104 = succeeded:body _17
  br _104, ^104, ^1

104:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _48 = put_list _17, `[]`

  %% core_SUITE.erl:132
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _48
  _73 = call (`core_lint_pattern`/1), _48

  %% Aliased:
  %%    _73
  _105 = succeeded:body _73
  br _105, ^105, ^1

105:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _49 = put_list OK, `[]`

  %% core_SUITE.erl:133
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _49
  _74 = call (`core_lint_bs_pattern`/1), _49

  %% Aliased:
  %%    _74
  _106 = succeeded:body _74
  br _106, ^106, ^1

106:
  %% core_SUITE.erl:134
  Flags = call (`cerl`:`make_list`/1), `[big,unsigned]`

  %% Aliased:
  %%    Flags
  _107 = succeeded:body Flags
  br _107, ^107, ^1

107:
  %% core_SUITE.erl:135
  _23 = call (`cerl`:`c_var`/1), `tail`

  %% Aliased:
  %%    _23
  _108 = succeeded:body _23
  br _108, ^108, ^1

108:
  %% core_SUITE.erl:135
  _22 = call (`cerl`:`c_atom`/1), `binary`

  %% Aliased:
  %%    _22
  _109 = succeeded:body _22
  br _109, ^109, ^1

109:
  %% core_SUITE.erl:135
  %% Aliased:
  %%    _22, 
  %%    _23, 
  %%    Flags
  _24 = call (`cerl`:`c_bitstr`/3), _23, _22, Flags

  %% Aliased:
  %%    _24
  _110 = succeeded:body _24
  br _110, ^110, ^1

110:
  %% core_SUITE.erl:136
  _20 = call (`cerl`:`c_var`/1), `value`

  %% Aliased:
  %%    _20
  _111 = succeeded:body _20
  br _111, ^111, ^1

111:
  %% core_SUITE.erl:136
  _19 = call (`cerl`:`c_atom`/1), `binary`

  %% Aliased:
  %%    _19
  _112 = succeeded:body _19
  br _112, ^112, ^1

112:
  %% core_SUITE.erl:136
  %% Aliased:
  %%    _19, 
  %%    _20, 
  %%    Flags
  _21 = call (`cerl`:`c_bitstr`/3), _20, _19, Flags

  %% Aliased:
  %%    _21
  _113 = succeeded:body _21
  br _113, ^113, ^1

113:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _50 = put_list _21, `[]`

  %% Argument types:
  %%    _50 => nonempty_list(any())
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _50
  _51 = put_list _24, _50

  %% core_SUITE.erl:135
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _51
  _75 = call (`core_lint_bs_pattern`/1), _51

  %% Aliased:
  %%    _75
  _114 = succeeded:body _75
  br _114, ^114, ^1

114:
  %% core_SUITE.erl:138
  %% Aliased:
  %%    OK
  BadGuard1 = call (`cerl`:`c_call`/3), OK, OK, `[]`

  %% Aliased:
  %%    BadGuard1
  _115 = succeeded:body BadGuard1
  br _115, ^115, ^1

115:
  %% core_SUITE.erl:139
  _26 = call (`cerl`:`c_atom`/1), `erlang`

  %% Aliased:
  %%    _26
  _116 = succeeded:body _26
  br _116, ^116, ^1

116:
  %% core_SUITE.erl:139
  %% Aliased:
  %%    _26, 
  %%    OK
  BadGuard2 = call (`cerl`:`c_call`/3), _26, OK, `[]`

  %% Aliased:
  %%    BadGuard2
  _117 = succeeded:body BadGuard2
  br _117, ^117, ^1

117:
  %% core_SUITE.erl:140
  _29 = call (`cerl`:`c_atom`/1), `erlang`

  %% Aliased:
  %%    _29
  _118 = succeeded:body _29
  br _118, ^118, ^1

118:
  %% core_SUITE.erl:140
  _28 = call (`cerl`:`c_atom`/1), `is_record`

  %% Aliased:
  %%    _28
  _119 = succeeded:body _28
  br _119, ^119, ^1

119:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _52 = put_list OK, `[]`

  %% Argument types:
  %%    _52 => nonempty_list(any())
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _52
  _53 = put_list OK, _52

  %% Argument types:
  %%    _53 => nonempty_list(any())
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _53
  _54 = put_list OK, _53

  %% core_SUITE.erl:140
  %% Aliased:
  %%    _28, 
  %%    _29
  %% Unique:
  %%    _54
  BadGuard3 = call (`cerl`:`c_call`/3), _29, _28, _54

  %% Aliased:
  %%    BadGuard3
  _120 = succeeded:body BadGuard3
  br _120, ^120, ^1

120:
  %% core_SUITE.erl:141
  _36 = call (`cerl`:`c_nil`/0)

  %% Aliased:
  %%    _36
  _121 = succeeded:body _36
  br _121, ^121, ^1

121:
  %% core_SUITE.erl:142
  %% Aliased:
  %%    OK
  _35 = call (`cerl`:`c_clause`/2), `[]`, OK

  %% Aliased:
  %%    _35
  _122 = succeeded:body _35
  br _122, ^122, ^1

122:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _55 = put_list OK, `[]`

  %% core_SUITE.erl:143
  %% Aliased:
  %%    OK
  %% Unique:
  %%    _55
  _34 = call (`cerl`:`c_clause`/2), _55, OK

  %% Aliased:
  %%    _34
  _123 = succeeded:body _34
  br _123, ^123, ^1

123:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _56 = put_list OK, `[]`

  %% core_SUITE.erl:144
  %% Aliased:
  %%    BadGuard1, 
  %%    OK
  %% Unique:
  %%    _56
  _33 = call (`cerl`:`c_clause`/3), _56, BadGuard1, OK

  %% Aliased:
  %%    _33
  _124 = succeeded:body _33
  br _124, ^124, ^1

124:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _57 = put_list OK, `[]`

  %% core_SUITE.erl:145
  %% Aliased:
  %%    BadGuard2, 
  %%    OK
  %% Unique:
  %%    _57
  _32 = call (`cerl`:`c_clause`/3), _57, BadGuard2, OK

  %% Aliased:
  %%    _32
  _125 = succeeded:body _32
  br _125, ^125, ^1

125:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OK
  _58 = put_list OK, `[]`

  %% core_SUITE.erl:146
  %% Aliased:
  %%    BadGuard3, 
  %%    OK
  %% Unique:
  %%    _58
  _31 = call (`cerl`:`c_clause`/3), _58, BadGuard3, OK

  %% Aliased:
  %%    _31
  _126 = succeeded:body _31
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _59 = put_list _31, `[]`

  %% Argument types:
  %%    _59 => nonempty_list(any())
  %% Aliased:
  %%    _32
  %% Unique:
  %%    _59
  _60 = put_list _32, _59

  %% Argument types:
  %%    _60 => nonempty_list(any())
  %% Aliased:
  %%    _33
  %% Unique:
  %%    _60
  _61 = put_list _33, _60

  %% Argument types:
  %%    _61 => nonempty_list(any())
  %% Aliased:
  %%    _34
  %% Unique:
  %%    _61
  _62 = put_list _34, _61

  %% Argument types:
  %%    _62 => nonempty_list(any())
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _62
  _63 = put_list _35, _62

  %% core_SUITE.erl:141
  %% Aliased:
  %%    _36
  %% Unique:
  %%    _63
  PatMismatch = call (`cerl`:`c_case`/2), _36, _63

  %% Aliased:
  %%    PatMismatch
  _127 = succeeded:body PatMismatch
  br _127, ^127, ^1

127:
  %% core_SUITE.erl:147
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    PatMismatch
  _76 = call (`core_lint_function`/1), PatMismatch

  %% Aliased:
  %%    _76
  _128 = succeeded:body _76
  br _128, ^128, ^1

128:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _77 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _77
}

%% core_SUITE.erl:151
%% Counter = 9
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(any())
function `core_SUITE`:`core_lint_bs_pattern`(_0) {
0:
  %% core_SUITE.erl:152
  %% Unique:
  %%    _0
  _1 = call (`cerl`:`c_binary`/1), _0

  %% Aliased:
  %%    _1
  _6 = succeeded:body _1
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = put_list _1, `[]`

  %% core_SUITE.erl:152
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _2
  _3 = call (`core_lint_pattern`/1), _2

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_SUITE.erl:154
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(any())
function `core_SUITE`:`core_lint_pattern`(_0) {
0:
  %% core_SUITE.erl:155
  _1 = call (`cerl`:`c_float`/1), `42`

  %% Aliased:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% core_SUITE.erl:155
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  _2 = call (`cerl`:`c_clause`/2), _0, _1

  %% Aliased:
  %%    _2
  _10 = succeeded:body _2
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  Cs = put_list _2, `[]`

  %% core_SUITE.erl:156
  _4 = call (`cerl`:`c_nil`/0)

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% core_SUITE.erl:156
  %% Aliased:
  %%    _4
  %% Unique:
  %%    Cs
  _5 = call (`cerl`:`c_case`/2), _4, Cs

  %% Aliased:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% core_SUITE.erl:156
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _5
  _6 = call (`core_lint_function`/1), _5

  %% Aliased:
  %%    _6
  _13 = succeeded:body _6
  br _13, ^13, ^1

13:
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _6
  ret _6

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% core_SUITE.erl:158
%% Counter = 6
%% bs_ensure_opt: true
function `core_SUITE`:`core_lint_function`(_0) {
0:
  %% core_SUITE.erl:159
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _0
  _2 = call (`core_lint_function`/3), `[]`, `[]`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_SUITE.erl:161
%% Counter = 77
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(any())
%%    _1 =>
%%     list(any())
function `core_SUITE`:`core_lint_function`(_0, _1, _2) {
0:
  %% core_SUITE.erl:162
  ModName = call (`cerl`:`c_atom`/1), `core_lint_test`

  %% Aliased:
  %%    ModName
  _40 = succeeded:body ModName
  br _40, ^40, ^1

40:
  %% core_SUITE.erl:163
  %% Aliased:
  %%    _2
  MainFun = call (`cerl`:`c_fun`/2), `[]`, _2

  %% Aliased:
  %%    MainFun
  _41 = succeeded:body MainFun
  br _41, ^41, ^1

41:
  %% core_SUITE.erl:164
  MainVar = call (`cerl`:`c_var`/1), `{main,0}`

  %% Aliased:
  %%    MainVar
  _42 = succeeded:body MainVar
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    MainFun, 
  %%    MainVar
  _19 = put_tuple MainVar, MainFun

  %% Argument types:
  %%    _19 => {any(), any()}
  %% Unique:
  %%    _19
  _20 = put_list _19, `[]`

  %% core_SUITE.erl:165
  %% Aliased:
  %%    ModName
  %% Unique:
  %%    _0, 
  %%    _1, 
  %%    _20
  Mod = call (`cerl`:`c_module`/4), ModName, _0, _1, _20

  %% Aliased:
  %%    Mod
  _43 = succeeded:body Mod
  br _43, ^43, ^1

43:
  %% core_SUITE.erl:167
  %% Aliased:
  %%    Mod
  _21 = call (`compile`:`forms`/2), Mod, `[from_core,clint0,return]`

  %% Aliased:
  %%    _21
  _44 = succeeded:body _21
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _70 = is_tagged_tuple _21, `3`, `error`
  br _70, ^67, ^46

67:
  %% Argument types:
  %%    _21 => {'error', any(), any()}
  %% Aliased:
  %%    _21
  _23 = get_tuple_element _21, `1`

  %% Aliased:
  %%    _23
  _66 = is_nonempty_list _23
  br _66, ^66, ^46

66:
  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _26 = get_hd _23

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _23
  _25 = get_tl _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _63 = bif:is_tuple _26
  br _63, ^63, ^46

63:
  %% Argument types:
  %%    _26 => {...}
  %% Aliased:
  %%    _26
  _64 = bif:tuple_size _26

  %% Argument types:
  %%    _64 => 0..16777215
  %% Unique:
  %%    _64
  _65 = bif:'=:=' _64, `2`
  br _65, ^62, ^46

62:
  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _28 = get_tuple_element _26, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _61 = bif:'=:=' _28, `"core_lint_test"`
  br _61, ^61, ^46

61:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _60 = bif:'=:=' _25, `[]`
  br _60, ^60, ^46

60:
  %% Argument types:
  %%    _21 => {'error', any(), any()}
  %% Aliased:
  %%    _21
  _22 = get_tuple_element _21, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _59 = bif:'=:=' _22, `[]`
  br _59, ^59, ^46

59:
  %% Argument types:
  %%    _26 => {nonempty_list(95..116), any()}
  %% Aliased:
  %%    _26
  _27 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _29 = put_list _27, `[]`

  %% core_SUITE.erl:168
  %% Unique:
  %%    _29
  _34 = call (`io`:`format`/2), `"~p\n"`, _29

  %% Aliased:
  %%    _34
  _47 = succeeded:body _34
  br _47, ^47, ^1

47:
  %% Result type:
  %%    'false' | 'true'
  _10 = make_fun (`'-core_lint_function/3-fun-0-'`/1)

  %% core_SUITE.erl:169
  %% Aliased:
  %%    _10, 
  %%    _27
  _33 = call (`lists`:`filter`/2), _10, _27

  %% Aliased:
  %%    _33
  _48 = succeeded:body _33
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _33 => list(any())
  %% Aliased:
  %%    _33
  _57 = bif:'=:=' _33, `[]`
  br _57, ^57, ^50

57:
  %% core_SUITE.erl:172
  %% Aliased:
  %%    Mod
  _18 = call (`compile`:`forms`/2), Mod, `[from_core,clint0,report]`

  %% Aliased:
  %%    _18
  _51 = succeeded:body _18
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _55 = bif:'=:=' _18, `error`
  br _55, ^54, ^53

54:
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _18
  ret _18

53:
  %% core_SUITE.erl:172
  %% Aliased:
  %%    _18
  _35 = match_fail `badmatch`, _18

  %% Unique:
  %%    _35
  _56 = succeeded:body _35
  br ^1

50:
  %% core_SUITE.erl:169
  %% Aliased:
  %%    _33
  _36 = match_fail `badmatch`, _33

  %% Unique:
  %%    _36
  _58 = succeeded:body _36
  br ^1

46:
  %% core_SUITE.erl:166
  %% Aliased:
  %%    _21
  _37 = match_fail `badmatch`, _21

  %% Unique:
  %%    _37
  _73 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% core_SUITE.erl:174
%% Counter = 50
%% bs_ensure_opt: true
function `core_SUITE`:`nif`(_0) {
0:
  %% core_SUITE.erl:177
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    _0
  Funs = call (`nif_compile_to_cerl`/2), _0, `[{d,'WITH_ATTRIBUTE'},{d,'WITH_LOAD_NIF'}]`

  %% Aliased:
  %%    Funs
  _19 = succeeded:body Funs
  br _19, ^19, ^1

19:
  %% core_SUITE.erl:178
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _7 = call (`nif_first_instruction_is_nif_start`/3), `init`, `1`, Funs

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _7 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _7
  _48 = bif:'=:=' _7, `false`
  br _48, ^47, ^22

47:
  %% core_SUITE.erl:179
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _8 = call (`nif_first_instruction_is_nif_start`/3), `start`, `1`, Funs

  %% Unique:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _8
  _45 = bif:'=:=' _8, `true`
  br _45, ^44, ^25

44:
  %% core_SUITE.erl:180
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _9 = call (`nif_first_instruction_is_nif_start`/3), `bug0`, `1`, Funs

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _9 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _9
  _42 = bif:'=:=' _9, `false`
  br _42, ^41, ^28

41:
  %% core_SUITE.erl:181
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _10 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `0`, Funs

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _10 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _10
  _39 = bif:'=:=' _10, `false`
  br _39, ^38, ^31

38:
  %% core_SUITE.erl:182
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _11 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `1`, Funs

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _11 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _11
  _36 = bif:'=:=' _11, `false`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% core_SUITE.erl:182
  %% Unique:
  %%    _11
  _12 = match_fail `badmatch`, _11

  %% Unique:
  %%    _12
  _37 = succeeded:body _12
  br ^1

31:
  %% core_SUITE.erl:181
  %% Unique:
  %%    _10
  _13 = match_fail `badmatch`, _10

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br ^1

28:
  %% core_SUITE.erl:180
  %% Unique:
  %%    _9
  _14 = match_fail `badmatch`, _9

  %% Unique:
  %%    _14
  _43 = succeeded:body _14
  br ^1

25:
  %% core_SUITE.erl:179
  %% Unique:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _46 = succeeded:body _15
  br ^1

22:
  %% core_SUITE.erl:178
  %% Unique:
  %%    _7
  _16 = match_fail `badmatch`, _7

  %% Unique:
  %%    _16
  _49 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_SUITE.erl:185
%% Counter = 50
%% bs_ensure_opt: true
function `core_SUITE`:`no_nif`(_0) {
0:
  %% core_SUITE.erl:187
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    _0
  Funs = call (`nif_compile_to_cerl`/2), _0, `[{d,'WITH_LOAD_NIF'}]`

  %% Aliased:
  %%    Funs
  _19 = succeeded:body Funs
  br _19, ^19, ^1

19:
  %% core_SUITE.erl:188
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _7 = call (`nif_first_instruction_is_nif_start`/3), `init`, `1`, Funs

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _7 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _7
  _48 = bif:'=:=' _7, `true`
  br _48, ^47, ^22

47:
  %% core_SUITE.erl:189
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _8 = call (`nif_first_instruction_is_nif_start`/3), `start`, `1`, Funs

  %% Unique:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _8
  _45 = bif:'=:=' _8, `true`
  br _45, ^44, ^25

44:
  %% core_SUITE.erl:190
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _9 = call (`nif_first_instruction_is_nif_start`/3), `bug0`, `1`, Funs

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _9 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _9
  _42 = bif:'=:=' _9, `true`
  br _42, ^41, ^28

41:
  %% core_SUITE.erl:191
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _10 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `0`, Funs

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _10 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _10
  _39 = bif:'=:=' _10, `true`
  br _39, ^38, ^31

38:
  %% core_SUITE.erl:192
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _11 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `1`, Funs

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _11 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _11
  _36 = bif:'=:=' _11, `true`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% core_SUITE.erl:192
  %% Unique:
  %%    _11
  _12 = match_fail `badmatch`, _11

  %% Unique:
  %%    _12
  _37 = succeeded:body _12
  br ^1

31:
  %% core_SUITE.erl:191
  %% Unique:
  %%    _10
  _13 = match_fail `badmatch`, _10

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br ^1

28:
  %% core_SUITE.erl:190
  %% Unique:
  %%    _9
  _14 = match_fail `badmatch`, _9

  %% Unique:
  %%    _14
  _43 = succeeded:body _14
  br ^1

25:
  %% core_SUITE.erl:189
  %% Unique:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _46 = succeeded:body _15
  br ^1

22:
  %% core_SUITE.erl:188
  %% Unique:
  %%    _7
  _16 = match_fail `badmatch`, _7

  %% Unique:
  %%    _16
  _49 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_SUITE.erl:195
%% Counter = 50
%% bs_ensure_opt: true
function `core_SUITE`:`no_load_nif`(_0) {
0:
  %% core_SUITE.erl:197
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    _0
  Funs = call (`nif_compile_to_cerl`/2), _0, `[]`

  %% Aliased:
  %%    Funs
  _19 = succeeded:body Funs
  br _19, ^19, ^1

19:
  %% core_SUITE.erl:198
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _7 = call (`nif_first_instruction_is_nif_start`/3), `init`, `1`, Funs

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _7 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _7
  _48 = bif:'=:=' _7, `false`
  br _48, ^47, ^22

47:
  %% core_SUITE.erl:199
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _8 = call (`nif_first_instruction_is_nif_start`/3), `start`, `1`, Funs

  %% Unique:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _8
  _45 = bif:'=:=' _8, `false`
  br _45, ^44, ^25

44:
  %% core_SUITE.erl:200
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _9 = call (`nif_first_instruction_is_nif_start`/3), `bug0`, `1`, Funs

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _9 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _9
  _42 = bif:'=:=' _9, `false`
  br _42, ^41, ^28

41:
  %% core_SUITE.erl:201
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _10 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `0`, Funs

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _10 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _10
  _39 = bif:'=:=' _10, `false`
  br _39, ^38, ^31

38:
  %% core_SUITE.erl:202
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    Funs
  _11 = call (`nif_first_instruction_is_nif_start`/3), `module_info`, `1`, Funs

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _11 => 'false' | 'not_found' | 'true'
  %% Unique:
  %%    _11
  _36 = bif:'=:=' _11, `false`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% core_SUITE.erl:202
  %% Unique:
  %%    _11
  _12 = match_fail `badmatch`, _11

  %% Unique:
  %%    _12
  _37 = succeeded:body _12
  br ^1

31:
  %% core_SUITE.erl:201
  %% Unique:
  %%    _10
  _13 = match_fail `badmatch`, _10

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br ^1

28:
  %% core_SUITE.erl:200
  %% Unique:
  %%    _9
  _14 = match_fail `badmatch`, _9

  %% Unique:
  %%    _14
  _43 = succeeded:body _14
  br ^1

25:
  %% core_SUITE.erl:199
  %% Unique:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _46 = succeeded:body _15
  br ^1

22:
  %% core_SUITE.erl:198
  %% Unique:
  %%    _7
  _16 = match_fail `badmatch`, _7

  %% Unique:
  %%    _16
  _49 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_SUITE.erl:205
%% Counter = 52
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     list({'d', ''WITH_ATTRIBUTE'' | ''WITH_LOAD_NIF''})
function `core_SUITE`:`nif_compile_to_cerl`(_0, _1) {
0:
  %% core_SUITE.erl:206
  %% Aliased:
  %%    _0
  _2 = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    _2
  _37 = succeeded:body _2
  br _37, ^37, ^1

37:
  %% core_SUITE.erl:206
  %% Aliased:
  %%    _2
  Src = call (`filename`:`join`/2), _2, `"nif.erl"`

  %% Aliased:
  %%    Src
  _38 = succeeded:body Src
  br _38, ^38, ^1

38:
  %% Argument types:
  %%    _1 => list({'d', ''WITH_ATTRIBUTE'' | ''WITH_LOAD_NIF''})
  %% Unique:
  %%    _1
  _17 = put_list `deterministic`, _1

  %% Argument types:
  %%    _17 => nonempty_list('deterministic' | {'d', ''WITH_ATTRIBUTE'' | ''WITH_LOAD_NIF''})
  %% Unique:
  %%    _17
  _18 = put_list `binary`, _17

  %% Argument types:
  %%    _18 => nonempty_list('binary' | 'deterministic' | {'d', ''WITH_ATTRIBUTE'' | ''WITH_LOAD_NIF''})
  %% Unique:
  %%    _18
  _4 = put_list `to_core`, _18

  %% core_SUITE.erl:207
  %% Aliased:
  %%    Src
  %% Unique:
  %%    _4
  _19 = call (`compile`:`file`/2), Src, _4

  %% Aliased:
  %%    _19
  _39 = succeeded:body _19
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _47 = is_tagged_tuple _19, `3`, `ok`
  br _47, ^44, ^41

44:
  %% Argument types:
  %%    _19 => {'ok', any(), any()}
  %% Aliased:
  %%    _19
  _20 = get_tuple_element _19, `2`

  %% core_SUITE.erl:208
  %% Aliased:
  %%    _20
  Defs = call (`cerl`:`module_defs`/1), _20

  %% Aliased:
  %%    Defs
  _42 = succeeded:body Defs
  br _42, ^42, ^1

42:
  %% core_SUITE.erl:209
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    Defs
  _33 = call (`'-nif_compile_to_cerl/2-lc$^0/1-0-'`/1), Defs

  %% Unique:
  %%    _33
  _43 = succeeded:body _33
  br _43, ^43, ^1

43:
  %% Result type:
  %%    list({any(), any()})
  %% Unique:
  %%    _33
  ret _33

41:
  %% core_SUITE.erl:207
  %% Aliased:
  %%    _19
  _34 = match_fail `badmatch`, _19

  %% Unique:
  %%    _34
  _50 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% core_SUITE.erl:211
%% Counter = 91
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'bug0' | 'init' | 'module_info' | 'start'
%%    _1 =>
%%     0..1
%%    _2 =>
%%     list({any(), any()})
function `core_SUITE`:`nif_first_instruction_is_nif_start`(_0, _1, _2) {
0:
  %% Aliased:
  %%    _2
  _67 = is_nonempty_list _2
  br _67, ^67, ^68

67:
  %% Argument types:
  %%    _2 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  _26 = get_hd _2

  %% Argument types:
  %%    _2 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _2
  _25 = get_tl _2

  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _28 = get_tuple_element _26, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _59 = bif:is_tuple _28
  br _59, ^59, ^41

59:
  %% Argument types:
  %%    _28 => {...}
  %% Aliased:
  %%    _28
  _60 = bif:tuple_size _28

  %% Argument types:
  %%    _60 => 0..16777215
  %% Unique:
  %%    _60
  _61 = bif:'=:=' _60, `2`
  br _61, ^58, ^41

58:
  %% Argument types:
  %%    _28 => {any(), any()}
  %% Aliased:
  %%    _28
  _30 = get_tuple_element _28, `0`

  %% core_SUITE.erl:211
  %% Argument types:
  %%    _0 => 'bug0' | 'init' | 'module_info' | 'start'
  %% Aliased:
  %%    _30
  %% Unique:
  %%    _0
  _13 = bif:'=:=' _30, _0
  br _13, ^72, ^41

72:
  %% Argument types:
  %%    _28 => {'bug0' | 'init' | 'module_info' | 'start', any()}
  %% Aliased:
  %%    _28
  _29 = get_tuple_element _28, `1`

  %% core_SUITE.erl:211
  %% Argument types:
  %%    _1 => 0..1
  %% Aliased:
  %%    _29
  %% Unique:
  %%    _1
  _14 = bif:'=:=' _29, _1
  br _14, ^88, ^41

88:
  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _27 = get_tuple_element _26, `1`
  br ^90

90:
  _48 = new_try_tag `'try'`
  br _48, ^47, ^45

47:
  %% core_SUITE.erl:213
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    _27
  _33 = call (`assert_body_starts_with_nif_start`/1), _27

  %% Unique:
  %%    _33
  _49 = succeeded:body _33
  br _49, ^49, ^45

49:
  %% Unique:
  %%    _48
  _57 = kill_try_tag _48
  %% Result type:
  %%    'true'
  %% Unique:
  %%    _33
  ret _33

45:
  %% Unique:
  %%    _48
  _55 = landingpad `'try'`, _48

  %% Aliased:
  %%    _55
  _6 = extract _55, `0`

  %% Aliased:
  %%    _55
  _5 = extract _55, `1`

  %% Aliased:
  %%    _55
  _4 = extract _55, `2`

  %% Unique:
  %%    _48
  _56 = kill_try_tag _48

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _53 = bif:'=:=' _6, `error`
  br _53, ^52, ^51

52:
  %% Result type:
  %%    'false'
  ret `false`

51:
  %% Aliased:
  %%    _4, 
  %%    _5
  _34 = resume _4, _5

  %% Unique:
  %%    _34
  _54 = succeeded:body _34
  br ^1

41:
  %% core_SUITE.erl:219
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Aliased:
  %%    _25
  %% Unique:
  %%    _0, 
  %%    _1
  _35 = call (`nif_first_instruction_is_nif_start`/3), _0, _1, _25

  %% Unique:
  %%    _35
  _66 = succeeded:body _35
  br _66, ^66, ^1

66:
  %% Result type:
  %%    'false' | 'not_found' | 'true'
  %% Unique:
  %%    _35
  ret _35

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37

68:
  %% Result type:
  %%    'not_found'
  ret `not_found`
}

%% core_SUITE.erl:225
%% Counter = 54
%% bs_ensure_opt: true
function `core_SUITE`:`assert_body_starts_with_nif_start`(_0) {
0:
  %% core_SUITE.erl:226
  %% Aliased:
  %%    _0
  _15 = call (`cerl`:`is_c_letrec`/1), _0

  %% Aliased:
  %%    _15
  _29 = succeeded:body _15
  br _29, ^29, ^1

29:
  switch _15, ^31, [
    { `false`, ^35 },
    { `true`, ^36 }
  ]

36:
  %% Result type:
  %%    'true'
  _5 = make_fun (`'-assert_body_starts_with_nif_start/1-fun-0-'`/1)

  %% core_SUITE.erl:235
  %% Aliased:
  %%    _0
  _1 = call (`cerl`:`letrec_defs`/1), _0

  %% Aliased:
  %%    _1
  _32 = succeeded:body _1
  br _32, ^32, ^1

32:
  %% core_SUITE.erl:232
  %% Aliased:
  %%    _1, 
  %%    _5
  _22 = call (`lists`:`foreach`/2), _5, _1

  %% Aliased:
  %%    _22
  _33 = succeeded:body _22
  br _33, ^33, ^1

33:
  %% core_SUITE.erl:237
  %% Aliased:
  %%    _0
  _23 = call (`cerl`:`letrec_body`/1), _0

  %% Aliased:
  %%    _23
  _34 = succeeded:body _23
  br _34, ^34, ^1

34:
  br ^30

35:
  br ^30

30:
  _7 = phi { _23, ^34 }, { _0, ^35 }

  %% core_SUITE.erl:241
  %% Aliased:
  %%    _7
  Primop = call (`cerl`:`seq_arg`/1), _7

  %% Aliased:
  %%    Primop
  _38 = succeeded:body Primop
  br _38, ^38, ^1

38:
  %% core_SUITE.erl:242
  %% Aliased:
  %%    Primop
  Name = call (`cerl`:`primop_name`/1), Primop

  %% Aliased:
  %%    Name
  _39 = succeeded:body Name
  br _39, ^39, ^1

39:
  %% core_SUITE.erl:243
  %% Aliased:
  %%    Primop
  _18 = call (`cerl`:`primop_arity`/1), Primop

  %% Aliased:
  %%    _18
  _40 = succeeded:body _18
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _50 = bif:'=:=' _18, `0`
  br _50, ^49, ^42

49:
  %% core_SUITE.erl:244
  %% Aliased:
  %%    Name
  _19 = call (`cerl`:`atom_val`/1), Name

  %% Aliased:
  %%    _19
  _43 = succeeded:body _19
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _47 = bif:'=:=' _19, `nif_start`
  br _47, ^46, ^45

46:
  %% Result type:
  %%    'true'
  ret `true`

45:
  %% core_SUITE.erl:244
  %% Aliased:
  %%    _19
  _25 = match_fail `badmatch`, _19

  %% Unique:
  %%    _25
  _48 = succeeded:body _25
  br ^1

42:
  %% core_SUITE.erl:243
  %% Aliased:
  %%    _18
  _26 = match_fail `badmatch`, _18

  %% Unique:
  %%    _26
  _51 = succeeded:body _26
  br ^1

31:
  %% core_SUITE.erl:226
  %% Aliased:
  %%    _15
  _24 = match_fail `case_clause`, _15

  %% Unique:
  %%    _24
  _37 = succeeded:body _24
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% Counter = 6
%% bs_ensure_opt: true
function `core_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `core_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `core_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `core_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_SUITE.erl:232
%% Counter = 33
%% bs_ensure_opt: true
function `core_SUITE`:`'-assert_body_starts_with_nif_start/1-fun-0-'`(_3) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _28 = bif:is_tuple _3
  br _28, ^28, ^24

28:
  %% Argument types:
  %%    _3 => {...}
  %% Aliased:
  %%    _3
  _29 = bif:tuple_size _3

  %% Argument types:
  %%    _29 => 0..16777215
  %% Unique:
  %%    _29
  _30 = bif:'=:=' _29, `2`
  br _30, ^32, ^24

32:
  %% Argument types:
  %%    _3 => {any(), any()}
  %% Aliased:
  %%    _3
  _16 = get_tuple_element _3, `1`

  %% core_SUITE.erl:234
  %% Aliased:
  %%    _16
  _2 = call (`cerl`:`fun_body`/1), _16

  %% Aliased:
  %%    _2
  _25 = succeeded:body _2
  br _25, ^25, ^1

25:
  %% core_SUITE.erl:233
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    _2
  _20 = call (`assert_body_starts_with_nif_start`/1), _2

  %% Unique:
  %%    _20
  _26 = succeeded:body _20
  br _26, ^26, ^1

26:
  %% Result type:
  %%    'true'
  %% Unique:
  %%    _20
  ret _20

24:
  %% core_SUITE.erl:232
  %% Aliased:
  %%    _3
  %% Anno: #{inlined => {'-assert_body_starts_with_nif_start/1-inlined-0-',1}}
  _21 = match_fail `function_clause`, _3

  %% Unique:
  %%    _21
  _31 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% core_SUITE.erl:209
%% Counter = 51
%% bs_ensure_opt: true
function `core_SUITE`:`'-nif_compile_to_cerl/2-lc$^0/1-0-'`(_9) {
0:
  %% Aliased:
  %%    _9
  _46 = is_nonempty_list _9
  br _46, ^46, ^36

46:
  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _26 = get_hd _9

  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _25 = get_tl _9

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _42 = bif:is_tuple _26
  br _42, ^42, ^37

42:
  %% Argument types:
  %%    _26 => {...}
  %% Aliased:
  %%    _26
  _43 = bif:tuple_size _26

  %% Argument types:
  %%    _43 => 0..16777215
  %% Unique:
  %%    _43
  _44 = bif:'=:=' _43, `2`
  br _44, ^41, ^37

41:
  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _28 = get_tuple_element _26, `0`

  %% Argument types:
  %%    _26 => {any(), any()}
  %% Aliased:
  %%    _26
  _27 = get_tuple_element _26, `1`

  %% core_SUITE.erl:209
  %% Aliased:
  %%    _28
  _12 = call (`cerl`:`var_name`/1), _28

  %% Aliased:
  %%    _12
  _38 = succeeded:body _12
  br _38, ^38, ^1

38:
  %% core_SUITE.erl:209
  %% Aliased:
  %%    _27
  _11 = call (`cerl`:`fun_body`/1), _27

  %% Aliased:
  %%    _11
  _39 = succeeded:body _11
  br _39, ^39, ^1

39:
  %% core_SUITE.erl:209
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    _25
  _13 = call (`'-nif_compile_to_cerl/2-lc$^0/1-0-'`/1), _25

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11, 
  %%    _12
  _29 = put_tuple _12, _11

  %% Argument types:
  %%    _29 => {any(), any()}
  %%    _13 => list({any(), any()})
  %% Unique:
  %%    _13, 
  %%    _29
  _30 = put_list _29, _13
  %% Result type:
  %%    nonempty_list({any(), any()})
  %% Unique:
  %%    _30
  ret _30

37:
  %% core_SUITE.erl:209
  %% Result type:
  %%    list({any(), any()})
  %% Aliased:
  %%    _25
  _31 = call (`'-nif_compile_to_cerl/2-lc$^0/1-0-'`/1), _25

  %% Unique:
  %%    _31
  _45 = succeeded:body _31
  br _45, ^45, ^1

45:
  %% Result type:
  %%    list({any(), any()})
  %% Unique:
  %%    _31
  ret _31

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _47 = bif:'=:=' _9, `[]`
  br _47, ^47, ^35

47:
  %% Result type:
  %%    nil()
  ret `[]`

35:
  %% Argument types:
  %%    _9 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _9
  _24 = put_tuple `bad_generator`, _9

  %% core_SUITE.erl:209
  %% Unique:
  %%    _24
  _32 = call (`erlang`:`error`/1), _24

  %% Aliased:
  %%    _32
  _48 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% core_SUITE.erl:169
%% Counter = 46
%% bs_ensure_opt: true
function `core_SUITE`:`'-core_lint_function/3-fun-0-'`(_8) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _43 = is_tagged_tuple _8, `3`, `none`
  br _43, ^40, ^37

40:
  %% Argument types:
  %%    _8 => {'none', any(), any()}
  %% Aliased:
  %%    _8
  _31 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _39 = bif:'=:=' _31, `core_lint`
  br _39, ^38, ^37

38:
  %% Result type:
  %%    'false'
  ret `false`

37:
  %% Result type:
  %%    'true'
  ret `true`
}
