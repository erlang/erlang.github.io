module lc_SUITE.
exports [{all,0},
         {basic,1},
         {deeply_nested,1},
         {effect,1},
         {empty_generator,1},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {module_info,0},
         {module_info,1},
         {no_export,1},
         {no_generator,1},
         {shadow,1},
         {suite,0}].
attributes [].

%% lc_SUITE.erl:31
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 1}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,1}}]`
}

%% lc_SUITE.erl:35
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% lc_SUITE.erl:38
%% Counter = 7
%% bs_ensure_opt: true
function `lc_SUITE`:`groups`() {
0:
  %% lc_SUITE.erl:39
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[basic,deeply_nested,no_generator,empty_generator,no_export,shadow,effect]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% lc_SUITE.erl:49
%% Counter = 6
%% bs_ensure_opt: true
function `lc_SUITE`:`init_per_suite`(_0) {
0:
  %% lc_SUITE.erl:50
  _2 = call (`test_lib`:`recompile`/1), `lc_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% lc_SUITE.erl:53
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% lc_SUITE.erl:56
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% lc_SUITE.erl:59
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% lc_SUITE.erl:63
%% Counter = 18
%% bs_ensure_opt: true
function `lc_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% lc_SUITE.erl:63
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% lc_SUITE.erl:63
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    maybe_improper_list(any(), any())
  %% Aliased:
  %%    _1
  ret _1

10:
  %% lc_SUITE.erl:63
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-init_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% lc_SUITE.erl:66
%% Counter = 18
%% bs_ensure_opt: true
function `lc_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% lc_SUITE.erl:66
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_atom _0
  br _2, ^16, ^10

16:
  %% lc_SUITE.erl:66
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_list _1
  br _3, ^12, ^10

12:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% lc_SUITE.erl:66
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-end_per_testcase/2-',2}}
  _7 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _7
  _13 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% lc_SUITE.erl:69
%% Counter = 1011
%% bs_ensure_opt: true
function `lc_SUITE`:`basic`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _548 = bif:is_list _0
  br _548, ^548, ^547

548:
  %% lc_SUITE.erl:70
  L0 = call (`lists`:`seq`/2), `1`, `10`

  %% Aliased:
  %%    L0
  _549 = succeeded:body L0
  br _549, ^549, ^1

549:
  %% Result type:
  %%    {'x', any()}
  _4 = make_fun (`'-basic/1-fun-0-'`/1)

  %% lc_SUITE.erl:71
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _4, 
  %%    L0
  L1 = call (`my_map`/2), _4, L0

  %% Aliased:
  %%    L1
  _550 = succeeded:body L1
  br _550, ^550, ^1

550:
  %% lc_SUITE.erl:72
  %% Result type:
  %%    list({'x', any()})
  %% Aliased:
  %%    L0
  _11 = call (`'-basic/1-lc$^1/1-0-'`/1), L0

  %% Unique:
  %%    _11
  _551 = succeeded:body _11
  br _551, ^551, ^1

551:
  %% Argument types:
  %%    _11 => list({'x', any()})
  %%    L1 => list(any())
  %% Aliased:
  %%    L1
  %% Unique:
  %%    _11
  _554 = bif:'=:=' _11, L1
  br _554, ^554, ^553

554:
  _15 = make_fun (`'-basic/1-fun-2-'`/1)

  %% lc_SUITE.erl:73
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _15, 
  %%    L1
  _238 = call (`my_map`/2), _15, L1

  %% Unique:
  %%    _238
  _555 = succeeded:body _238
  br _555, ^555, ^1

555:
  %% Argument types:
  %%    _238 => list(any())
  %% Aliased:
  %%    L0
  %% Unique:
  %%    _238
  _558 = bif:'=:=' _238, L0
  br _558, ^558, ^557

558:
  %% lc_SUITE.erl:74
  %% Result type:
  %%    list(number('-inf', 6))
  %% Aliased:
  %%    L0
  _22 = call (`'-basic/1-lc$^3/1-2-'`/1), L0

  %% Unique:
  %%    _22
  _559 = succeeded:body _22
  br _559, ^559, ^1

559:
  %% Argument types:
  %%    _22 => list(number('-inf', 6))
  %% Unique:
  %%    _22
  _868 = bif:'=:=' _22, `[1,2,3,4,5]`
  br _868, ^868, ^561

868:
  %% lc_SUITE.erl:75
  %% Result type:
  %%    list(number(3, 7))
  %% Aliased:
  %%    L0
  _31 = call (`'-basic/1-lc$^4/1-3-'`/1), L0

  %% Unique:
  %%    _31
  _562 = succeeded:body _31
  br _562, ^562, ^1

562:
  %% Argument types:
  %%    _31 => list(number(3, 7))
  %% Unique:
  %%    _31
  _866 = bif:'=:=' _31, `[4,5,6]`
  br _866, ^866, ^564

866:
  %% lc_SUITE.erl:76
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    L0
  _40 = call (`'-basic/1-lc$^5/1-4-'`/1), L0

  %% Unique:
  %%    _40
  _565 = succeeded:body _40
  br _565, ^864, ^1

864:
  %% lc_SUITE.erl:77
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  _48 = call (`'-basic/1-lc$^6/1-5-'`/1), L0

  %% Unique:
  %%    _48
  _568 = succeeded:body _48
  br _568, ^568, ^1

568:
  %% Argument types:
  %%    _48 => list(any())
  %% Unique:
  %%    _48
  _862 = bif:'=:=' _48, `[1,3,5,7,9]`
  br _862, ^862, ^570

862:
  %% lc_SUITE.erl:78
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  _57 = call (`'-basic/1-lc$^7/1-6-'`/1), L0

  %% Unique:
  %%    _57
  _571 = succeeded:body _57
  br _571, ^571, ^1

571:
  %% Argument types:
  %%    _57 => list(any())
  %% Unique:
  %%    _57
  _860 = bif:'=:=' _57, `[2,4,6,8,10]`
  br _860, ^860, ^573

860:
  %% lc_SUITE.erl:79
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  _65 = call (`'-basic/1-lc$^8/1-7-'`/1), L0

  %% Unique:
  %%    _65
  _574 = succeeded:body _65
  br _574, ^574, ^1

574:
  %% Argument types:
  %%    _65 => list(any())
  %% Unique:
  %%    _65
  _858 = bif:'=:=' _65, `[1,3,5,9]`
  br _858, ^858, ^576

858:
  %% lc_SUITE.erl:80
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  _74 = call (`'-basic/1-lc$^9/1-8-'`/1), L0

  %% Unique:
  %%    _74
  _577 = succeeded:body _74
  br _577, ^577, ^1

577:
  %% Argument types:
  %%    _74 => list(any())
  %% Unique:
  %%    _74
  _856 = bif:'=:=' _74, `[2,4,8,10]`
  br _856, ^856, ^579

856:
  %% lc_SUITE.erl:84
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  _83 = call (`'-basic/1-lc$^10/1-9-'`/1), L0

  %% Unique:
  %%    _83
  _580 = succeeded:body _83
  br _580, ^580, ^1

580:
  %% lc_SUITE.erl:83
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    L0
  %% Unique:
  %%    _83
  _90 = call (`'-basic/1-lc$^11/1-10-'`/2), L0, _83

  %% Unique:
  %%    _90
  _581 = succeeded:body _90
  br _581, ^581, ^1

581:
  %% Argument types:
  %%    _90 => list(any())
  %% Unique:
  %%    _90
  _854 = bif:'=:=' _90, `[1,3,5,9,2,4,8,10]`
  br _854, ^854, ^583

854:
  %% lc_SUITE.erl:87
  %% Result type:
  %%    nonempty_list('glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  _95 = call (`tuple_list`/0)

  %% Unique:
  %%    _95
  _584 = succeeded:body _95
  br _584, ^584, ^1

584:
  %% lc_SUITE.erl:87
  %% Result type:
  %%    list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _95
  _99 = call (`'-basic/1-lc$^12/1-11-'`/1), _95

  %% Unique:
  %%    _99
  _585 = succeeded:body _99
  br _585, ^585, ^1

585:
  %% Argument types:
  %%    _99 => list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _99
  _852 = bif:'=:=' _99, `[{a,b,true},{x,y,true,true}]`
  br _852, ^852, ^587

852:
  %% lc_SUITE.erl:90
  %% Result type:
  %%    list(46..99)
  _299 = call (`alphanum`/1), `"?abc123.;"`

  %% Unique:
  %%    _299
  _588 = succeeded:body _299
  br _588, ^588, ^1

588:
  %% Argument types:
  %%    _299 => list(46..99)
  %% Unique:
  %%    _299
  _850 = bif:'=:=' _299, `"abc123"`
  br _850, ^850, ^590

850:
  %% lc_SUITE.erl:93
  %% Result type:
  %%    nil()
  _107 = call (`'-basic/1-lc$^13/1-12-'`/1), `[]`

  %% Unique:
  %%    _107
  _591 = succeeded:body _107
  br _591, ^848, ^1

848:
  %% lc_SUITE.erl:94
  %% Result type:
  %%    nil()
  _114 = call (`'-basic/1-lc$^14/1-13-'`/1), `[]`

  %% Unique:
  %%    _114
  _594 = succeeded:body _114
  br _594, ^846, ^1

846:
  %% lc_SUITE.erl:95
  %% Result type:
  %%    list('t')
  _121 = call (`'-basic/1-lc$^15/1-14-'`/1), `["ab"]`

  %% Unique:
  %%    _121
  _597 = succeeded:body _121
  br _597, ^597, ^1

597:
  %% Argument types:
  %%    _121 => list('t')
  %% Unique:
  %%    _121
  _844 = bif:'=:=' _121, `[t]`
  br _844, ^844, ^599

844:
  %% lc_SUITE.erl:98
  %% Result type:
  %%    nil()
  _130 = call (`'-basic/1-lc$^16/1-15-'`/1), `[]`

  %% Unique:
  %%    _130
  _600 = succeeded:body _130
  br _600, ^842, ^1

842:
  %% lc_SUITE.erl:99
  %% Result type:
  %%    nonempty_list({'a', 'a'})
  _139 = call (`'-basic/1-lc$^17/1-16-'`/1), `[{a}]`

  %% Unique:
  %%    _139
  _603 = succeeded:body _139
  br _603, ^603, ^1

603:
  %% Argument types:
  %%    _139 => nonempty_list({'a', 'a'})
  %% Unique:
  %%    _139
  _840 = bif:'=:=' _139, `[{a,a}]`
  br _840, ^840, ^605

840:
  %% lc_SUITE.erl:102
  %% Result type:
  %%    nil()
  _146 = call (`'-basic/1-lc$^18/1-17-'`/1), `[]`

  %% Unique:
  %%    _146
  _606 = succeeded:body _146
  br _606, ^838, ^1

838:
  %% lc_SUITE.erl:105
  %% Result type:
  %%    list({'xx', {any(), any(), ...}})
  %% Aliased:
  %%    L0
  _154 = call (`'-basic/1-lc$^19/1-18-'`/1), L0

  %% Unique:
  %%    _154
  _609 = succeeded:body _154
  br _609, ^609, ^1

609:
  %% Argument types:
  %%    _154 => list({'xx', {any(), any(), ...}})
  %% Unique:
  %%    _154
  _836 = bif:'=:=' _154, `[]`
  br _836, ^995, ^611

995:
  br ^1003

1003:
  _615 = new_try_tag `'catch'`
  br _615, ^613, ^614

613:
  %% lc_SUITE.erl:106
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    L1
  _488 = call (`'-basic/1-lc$^20/1-19-'`/1), L1

  %% Unique:
  %%    _488
  _617 = succeeded:body _488
  br _617, ^617, ^614

617:
  br ^612

614:
  %% Unique:
  %%    _615
  _620 = landingpad `'catch'`, _615

  %% Aliased:
  %%    _620
  _618 = extract _620, `0`
  br ^612

612:
  _621 = phi { _618, ^614 }, { `[]`, ^617 }

  %% Aliased:
  %%    _621
  %% Unique:
  %%    _615
  _163 = catch_end _615, _621

  %% Argument types:
  %%    
  %% Aliased:
  %%    _163
  _832 = is_tagged_tuple _163, `2`, `'EXIT'`
  br _832, ^829, ^623

829:
  %% lc_SUITE.erl:107
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    L1
  _171 = call (`'-basic/1-lc$^21/1-20-'`/1), L1

  %% Unique:
  %%    _171
  _624 = succeeded:body _171
  br _624, ^996, ^1

996:
  br ^1004

1004:
  _630 = new_try_tag `'catch'`
  br _630, ^628, ^629

628:
  %% lc_SUITE.erl:108
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    L1
  _497 = call (`'-basic/1-lc$^22/1-21-'`/1), L1

  %% Unique:
  %%    _497
  _632 = succeeded:body _497
  br _632, ^632, ^629

632:
  br ^627

629:
  %% Unique:
  %%    _630
  _635 = landingpad `'catch'`, _630

  %% Aliased:
  %%    _635
  _633 = extract _635, `0`
  br ^627

627:
  _636 = phi { _633, ^629 }, { `[]`, ^632 }

  %% Aliased:
  %%    _636
  %% Unique:
  %%    _630
  _179 = catch_end _630, _636

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _823 = is_tagged_tuple _179, `2`, `'EXIT'`
  br _823, ^997, ^638

997:
  br ^1005

1005:
  _642 = new_try_tag `'catch'`
  br _642, ^640, ^641

640:
  %% lc_SUITE.erl:109
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  _183 = call (`id`/1), `x`

  %% Aliased:
  %%    _183
  _644 = succeeded:body _183
  br _644, ^644, ^641

644:
  %% lc_SUITE.erl:109
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _183
  _501 = call (`'-basic/1-lc$^23/1-22-'`/1), _183

  %% Unique:
  %%    _501
  _645 = succeeded:body _501
  br _645, ^645, ^641

645:
  br ^639

641:
  %% Unique:
  %%    _642
  _648 = landingpad `'catch'`, _642

  %% Aliased:
  %%    _648
  _646 = extract _648, `0`
  br ^639

639:
  _649 = phi { _646, ^641 }, { _501, ^645 }

  %% Aliased:
  %%    _649
  %% Unique:
  %%    _642
  _187 = catch_end _642, _649

  %% Argument types:
  %%    
  %% Aliased:
  %%    _187
  _816 = is_tagged_tuple _187, `2`, `'EXIT'`
  br _816, ^813, ^651

813:
  %% Argument types:
  %%    _187 => {''EXIT'', any()}
  %% Aliased:
  %%    _187
  _366 = get_tuple_element _187, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _366
  _810 = bif:is_tuple _366
  br _810, ^810, ^651

810:
  %% Argument types:
  %%    _366 => {...}
  %% Aliased:
  %%    _366
  _811 = bif:tuple_size _366

  %% Argument types:
  %%    _811 => 0..16777215
  %% Unique:
  %%    _811
  _812 = bif:'=:=' _811, `2`
  br _812, ^809, ^651

809:
  %% Argument types:
  %%    _366 => {any(), any()}
  %% Aliased:
  %%    _366
  _369 = get_tuple_element _366, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _369
  _808 = bif:'=:=' _369, `{bad_generator,x}`
  br _808, ^998, ^651

998:
  br ^1006

1006:
  _655 = new_try_tag `'catch'`
  br _655, ^653, ^654

653:
  %% lc_SUITE.erl:110
  %% Result type:
  %%    none()
  _507 = call (`'-basic/1-lc$^24/1-23-'`/1), `[1,2]`

  %% Aliased:
  %%    _507
  _657 = succeeded:body _507
  br ^654

654:
  %% Unique:
  %%    _655
  _660 = landingpad `'catch'`, _655

  %% Aliased:
  %%    _660
  _658 = extract _660, `0`
  br ^652

652:
  %% Aliased:
  %%    _658
  %% Unique:
  %%    _655
  _195 = catch_end _655, _658

  %% Argument types:
  %%    
  %% Aliased:
  %%    _195
  _804 = is_tagged_tuple _195, `2`, `'EXIT'`
  br _804, ^801, ^663

801:
  %% Argument types:
  %%    _195 => {''EXIT'', any()}
  %% Aliased:
  %%    _195
  _376 = get_tuple_element _195, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _376
  _798 = bif:is_tuple _376
  br _798, ^798, ^663

798:
  %% Argument types:
  %%    _376 => {...}
  %% Aliased:
  %%    _376
  _799 = bif:tuple_size _376

  %% Argument types:
  %%    _799 => 0..16777215
  %% Unique:
  %%    _799
  _800 = bif:'=:=' _799, `2`
  br _800, ^797, ^663

797:
  %% Argument types:
  %%    _376 => {any(), any()}
  %% Aliased:
  %%    _376
  _379 = get_tuple_element _376, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _379
  _796 = bif:'=:=' _379, `{bad_filter,not_bool}`
  br _796, ^999, ^663

999:
  br ^1007

1007:
  _667 = new_try_tag `'catch'`
  br _667, ^665, ^666

665:
  %% lc_SUITE.erl:120
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  _197 = call (`bad_generator`/1), `a`

  %% Unique:
  %%    _197
  _669 = succeeded:body _197
  br _669, ^669, ^666

669:
  %% lc_SUITE.erl:120
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Unique:
  %%    _197
  _509 = call (`id`/1), _197

  %% Aliased:
  %%    _509
  _670 = succeeded:body _509
  br _670, ^670, ^666

670:
  br ^664

666:
  %% Unique:
  %%    _667
  _673 = landingpad `'catch'`, _667

  %% Aliased:
  %%    _673
  _671 = extract _673, `0`
  br ^664

664:
  _674 = phi { _671, ^666 }, { _509, ^670 }

  %% Aliased:
  %%    _674
  %% Unique:
  %%    _667
  _198 = catch_end _667, _674

  %% Argument types:
  %%    
  %% Aliased:
  %%    _198
  _792 = is_tagged_tuple _198, `2`, `'EXIT'`
  br _792, ^789, ^676

789:
  %% Argument types:
  %%    _198 => {''EXIT'', any()}
  %% Aliased:
  %%    _198
  _380 = get_tuple_element _198, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _380
  _786 = bif:is_tuple _380
  br _786, ^786, ^676

786:
  %% Argument types:
  %%    _380 => {...}
  %% Aliased:
  %%    _380
  _787 = bif:tuple_size _380

  %% Argument types:
  %%    _787 => 0..16777215
  %% Unique:
  %%    _787
  _788 = bif:'=:=' _787, `2`
  br _788, ^785, ^676

785:
  %% Argument types:
  %%    _380 => {any(), any()}
  %% Aliased:
  %%    _380
  _383 = get_tuple_element _380, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _383
  _784 = bif:'=:=' _383, `{bad_generator,a}`
  br _784, ^784, ^676

784:
  %% Argument types:
  %%    _380 => {{'bad_generator', 'a'}, any()}
  %% Aliased:
  %%    _380
  _382 = get_tuple_element _380, `1`

  %% Aliased:
  %%    _382
  _783 = is_nonempty_list _382
  br _783, ^783, ^676

783:
  %% Argument types:
  %%    _382 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _382
  _385 = get_hd _382

  %% Argument types:
  %%    
  %% Aliased:
  %%    _385
  _780 = is_tagged_tuple _385, `4`, `lc_SUITE`
  br _780, ^777, ^676

777:
  %% Argument types:
  %%    _385 => {'lc_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _385
  _386 = get_tuple_element _385, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _386
  _776 = bif:'=:=' _386, `[{file,"bad_lc.erl"},{line,4}]`
  br _776, ^1000, ^676

1000:
  br ^1008

1008:
  _680 = new_try_tag `'catch'`
  br _680, ^678, ^679

678:
  %% lc_SUITE.erl:125
  %% Result type:
  %%    none()
  _200 = call (`bad_generator_bc`/1), `a`

  %% Aliased:
  %%    _200
  _682 = succeeded:body _200
  br ^679

679:
  %% Unique:
  %%    _680
  _686 = landingpad `'catch'`, _680

  %% Aliased:
  %%    _686
  _684 = extract _686, `0`
  br ^677

677:
  %% Aliased:
  %%    _684
  %% Unique:
  %%    _680
  _201 = catch_end _680, _684

  %% Argument types:
  %%    
  %% Aliased:
  %%    _201
  _772 = is_tagged_tuple _201, `2`, `'EXIT'`
  br _772, ^769, ^689

769:
  %% Argument types:
  %%    _201 => {''EXIT'', any()}
  %% Aliased:
  %%    _201
  _390 = get_tuple_element _201, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _390
  _766 = bif:is_tuple _390
  br _766, ^766, ^689

766:
  %% Argument types:
  %%    _390 => {...}
  %% Aliased:
  %%    _390
  _767 = bif:tuple_size _390

  %% Argument types:
  %%    _767 => 0..16777215
  %% Unique:
  %%    _767
  _768 = bif:'=:=' _767, `2`
  br _768, ^765, ^689

765:
  %% Argument types:
  %%    _390 => {any(), any()}
  %% Aliased:
  %%    _390
  _393 = get_tuple_element _390, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _393
  _764 = bif:'=:=' _393, `{bad_generator,a}`
  br _764, ^764, ^689

764:
  %% Argument types:
  %%    _390 => {{'bad_generator', 'a'}, any()}
  %% Aliased:
  %%    _390
  _392 = get_tuple_element _390, `1`

  %% Aliased:
  %%    _392
  _763 = is_nonempty_list _392
  br _763, ^763, ^689

763:
  %% Argument types:
  %%    _392 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _392
  _395 = get_hd _392

  %% Argument types:
  %%    
  %% Aliased:
  %%    _395
  _760 = is_tagged_tuple _395, `4`, `lc_SUITE`
  br _760, ^757, ^689

757:
  %% Argument types:
  %%    _395 => {'lc_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _395
  _396 = get_tuple_element _395, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _396
  _756 = bif:'=:=' _396, `[{file,"bad_lc.erl"},{line,7}]`
  br _756, ^1001, ^689

1001:
  br ^1009

1009:
  _693 = new_try_tag `'catch'`
  br _693, ^691, ^692

691:
  %% lc_SUITE.erl:130
  %% Result type:
  %%    none()
  _203 = call (`bad_generator_mc`/1), `a`

  %% Aliased:
  %%    _203
  _695 = succeeded:body _203
  br ^692

692:
  %% Unique:
  %%    _693
  _699 = landingpad `'catch'`, _693

  %% Aliased:
  %%    _699
  _697 = extract _699, `0`
  br ^690

690:
  %% Aliased:
  %%    _697
  %% Unique:
  %%    _693
  _204 = catch_end _693, _697

  %% Argument types:
  %%    
  %% Aliased:
  %%    _204
  _752 = is_tagged_tuple _204, `2`, `'EXIT'`
  br _752, ^749, ^702

749:
  %% Argument types:
  %%    _204 => {''EXIT'', any()}
  %% Aliased:
  %%    _204
  _400 = get_tuple_element _204, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _400
  _746 = bif:is_tuple _400
  br _746, ^746, ^702

746:
  %% Argument types:
  %%    _400 => {...}
  %% Aliased:
  %%    _400
  _747 = bif:tuple_size _400

  %% Argument types:
  %%    _747 => 0..16777215
  %% Unique:
  %%    _747
  _748 = bif:'=:=' _747, `2`
  br _748, ^745, ^702

745:
  %% Argument types:
  %%    _400 => {any(), any()}
  %% Aliased:
  %%    _400
  _403 = get_tuple_element _400, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _403
  _744 = bif:'=:=' _403, `{bad_generator,a}`
  br _744, ^744, ^702

744:
  %% Argument types:
  %%    _400 => {{'bad_generator', 'a'}, any()}
  %% Aliased:
  %%    _400
  _402 = get_tuple_element _400, `1`

  %% Aliased:
  %%    _402
  _743 = is_nonempty_list _402
  br _743, ^743, ^702

743:
  %% Argument types:
  %%    _402 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _402
  _405 = get_hd _402

  %% Argument types:
  %%    
  %% Aliased:
  %%    _405
  _740 = is_tagged_tuple _405, `4`, `lc_SUITE`
  br _740, ^737, ^702

737:
  %% Argument types:
  %%    _405 => {'lc_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _405
  _406 = get_tuple_element _405, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _406
  _736 = bif:'=:=' _406, `[{file,"bad_lc.erl"},{line,10}]`
  br _736, ^1002, ^702

1002:
  br ^1010

1010:
  _706 = new_try_tag `'catch'`
  br _706, ^704, ^705

704:
  %% lc_SUITE.erl:136
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  _206 = call (`id`/1), `[a,b,c|d]`

  %% Aliased:
  %%    _206
  _708 = succeeded:body _206
  br _708, ^708, ^705

708:
  %% lc_SUITE.erl:136
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _206
  _515 = call (`bad_generator`/1), _206

  %% Unique:
  %%    _515
  _709 = succeeded:body _515
  br _709, ^709, ^705

709:
  br ^703

705:
  %% Unique:
  %%    _706
  _712 = landingpad `'catch'`, _706

  %% Aliased:
  %%    _712
  _710 = extract _712, `0`
  br ^703

703:
  _713 = phi { _710, ^705 }, { _515, ^709 }

  %% Aliased:
  %%    _713
  %% Unique:
  %%    _706
  _207 = catch_end _706, _713

  %% Argument types:
  %%    
  %% Aliased:
  %%    _207
  _732 = is_tagged_tuple _207, `2`, `'EXIT'`
  br _732, ^729, ^715

729:
  %% Argument types:
  %%    _207 => {''EXIT'', any()}
  %% Aliased:
  %%    _207
  _410 = get_tuple_element _207, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _410
  _726 = bif:is_tuple _410
  br _726, ^726, ^715

726:
  %% Argument types:
  %%    _410 => {...}
  %% Aliased:
  %%    _410
  _727 = bif:tuple_size _410

  %% Argument types:
  %%    _727 => 0..16777215
  %% Unique:
  %%    _727
  _728 = bif:'=:=' _727, `2`
  br _728, ^725, ^715

725:
  %% Argument types:
  %%    _410 => {any(), any()}
  %% Aliased:
  %%    _410
  _413 = get_tuple_element _410, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _413
  _724 = bif:'=:=' _413, `{bad_generator,d}`
  br _724, ^724, ^715

724:
  %% Argument types:
  %%    _410 => {{'bad_generator', 'd'}, any()}
  %% Aliased:
  %%    _410
  _412 = get_tuple_element _410, `1`

  %% Aliased:
  %%    _412
  _723 = is_nonempty_list _412
  br _723, ^723, ^715

723:
  %% Argument types:
  %%    _412 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _412
  _415 = get_hd _412

  %% Argument types:
  %%    
  %% Aliased:
  %%    _415
  _720 = is_tagged_tuple _415, `4`, `lc_SUITE`
  br _720, ^717, ^715

717:
  %% Argument types:
  %%    _415 => {'lc_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _415
  _416 = get_tuple_element _415, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _416
  _716 = bif:'=:=' _416, `[{file,"bad_lc.erl"},{line,4}]`
  br _716, ^675, ^715

675:
  %% Result type:
  %%    'ok'
  ret `ok`

715:
  %% lc_SUITE.erl:133
  %% Aliased:
  %%    _207
  _516 = match_fail `badmatch`, _207

  %% Unique:
  %%    _516
  _735 = succeeded:body _516
  br ^1

702:
  %% lc_SUITE.erl:127
  %% Aliased:
  %%    _204
  _517 = match_fail `badmatch`, _204

  %% Unique:
  %%    _517
  _755 = succeeded:body _517
  br ^1

689:
  %% lc_SUITE.erl:122
  %% Aliased:
  %%    _201
  _518 = match_fail `badmatch`, _201

  %% Unique:
  %%    _518
  _775 = succeeded:body _518
  br ^1

676:
  %% lc_SUITE.erl:117
  %% Aliased:
  %%    _198
  _519 = match_fail `badmatch`, _198

  %% Unique:
  %%    _519
  _795 = succeeded:body _519
  br ^1

663:
  %% lc_SUITE.erl:110
  %% Aliased:
  %%    _195
  _520 = match_fail `badmatch`, _195

  %% Unique:
  %%    _520
  _807 = succeeded:body _520
  br ^1

651:
  %% lc_SUITE.erl:109
  %% Aliased:
  %%    _187
  _521 = match_fail `badmatch`, _187

  %% Unique:
  %%    _521
  _819 = succeeded:body _521
  br ^1

638:
  %% lc_SUITE.erl:108
  %% Aliased:
  %%    _179
  _522 = match_fail `badmatch`, _179

  %% Unique:
  %%    _522
  _826 = succeeded:body _522
  br ^1

623:
  %% lc_SUITE.erl:106
  %% Aliased:
  %%    _163
  _524 = match_fail `badmatch`, _163

  %% Unique:
  %%    _524
  _835 = succeeded:body _524
  br ^1

611:
  %% lc_SUITE.erl:105
  %% Unique:
  %%    _154
  _525 = match_fail `badmatch`, _154

  %% Unique:
  %%    _525
  _837 = succeeded:body _525
  br ^1

605:
  %% lc_SUITE.erl:99
  %% Unique:
  %%    _139
  _527 = match_fail `badmatch`, _139

  %% Unique:
  %%    _527
  _841 = succeeded:body _527
  br ^1

599:
  %% lc_SUITE.erl:95
  %% Unique:
  %%    _121
  _529 = match_fail `badmatch`, _121

  %% Unique:
  %%    _529
  _845 = succeeded:body _529
  br ^1

590:
  %% lc_SUITE.erl:90
  %% Unique:
  %%    _299
  _532 = match_fail `badmatch`, _299

  %% Unique:
  %%    _532
  _851 = succeeded:body _532
  br ^1

587:
  %% lc_SUITE.erl:87
  %% Unique:
  %%    _99
  _533 = match_fail `badmatch`, _99

  %% Unique:
  %%    _533
  _853 = succeeded:body _533
  br ^1

583:
  %% lc_SUITE.erl:83
  %% Unique:
  %%    _90
  _534 = match_fail `badmatch`, _90

  %% Unique:
  %%    _534
  _855 = succeeded:body _534
  br ^1

579:
  %% lc_SUITE.erl:80
  %% Unique:
  %%    _74
  _535 = match_fail `badmatch`, _74

  %% Unique:
  %%    _535
  _857 = succeeded:body _535
  br ^1

576:
  %% lc_SUITE.erl:79
  %% Unique:
  %%    _65
  _536 = match_fail `badmatch`, _65

  %% Unique:
  %%    _536
  _859 = succeeded:body _536
  br ^1

573:
  %% lc_SUITE.erl:78
  %% Unique:
  %%    _57
  _537 = match_fail `badmatch`, _57

  %% Unique:
  %%    _537
  _861 = succeeded:body _537
  br ^1

570:
  %% lc_SUITE.erl:77
  %% Unique:
  %%    _48
  _538 = match_fail `badmatch`, _48

  %% Unique:
  %%    _538
  _863 = succeeded:body _538
  br ^1

564:
  %% lc_SUITE.erl:75
  %% Unique:
  %%    _31
  _540 = match_fail `badmatch`, _31

  %% Unique:
  %%    _540
  _867 = succeeded:body _540
  br ^1

561:
  %% lc_SUITE.erl:74
  %% Unique:
  %%    _22
  _541 = match_fail `badmatch`, _22

  %% Unique:
  %%    _541
  _869 = succeeded:body _541
  br ^1

557:
  %% lc_SUITE.erl:73
  %% Unique:
  %%    _238
  _542 = match_fail `badmatch`, _238

  %% Unique:
  %%    _542
  _870 = succeeded:body _542
  br ^1

553:
  %% lc_SUITE.erl:72
  %% Unique:
  %%    _11
  _543 = match_fail `badmatch`, _11

  %% Unique:
  %%    _543
  _871 = succeeded:body _543
  br ^1

547:
  %% lc_SUITE.erl:69
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-basic/1-',1}}
  _544 = match_fail `function_clause`, _0

  %% Unique:
  %%    _544
  _872 = succeeded:body _544
  br ^1

1:
  _545 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _545
}

%% lc_SUITE.erl:141
%% Counter = 4
%% bs_ensure_opt: true
function `lc_SUITE`:`tuple_list`() {
0:
  %% Result type:
  %%    nonempty_list('glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  ret `[{a,b,true},[a,b,c],glurf,{a,b,false,xx},{a,b},{x,y,true,true},{a,b,d,ddd}]`
}

%% lc_SUITE.erl:144
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `lc_SUITE`:`my_map`(_0, _1) {
0:
  %% lc_SUITE.erl:145
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _1
  _14 = call (`'-my_map/2-lc$^0/1-0-'`/2), _1, _0

  %% Unique:
  %%    _14
  _17 = succeeded:body _14
  br _17, ^17, ^1

17:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _14
  ret _14

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% lc_SUITE.erl:147
%% Counter = 6
%% bs_ensure_opt: true
function `lc_SUITE`:`odd`(_0) {
0:
  %% lc_SUITE.erl:148
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:'rem' _0, `2`

  %% Unique:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% lc_SUITE.erl:148
  %% Argument types:
  %%    _1 => -1..1
  %% Unique:
  %%    _1
  _2 = bif:'=:=' _1, `1`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% lc_SUITE.erl:150
%% Counter = 48
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(46..99)
function `lc_SUITE`:`alphanum`(_0) {
0:
  %% lc_SUITE.erl:151
  %% Result type:
  %%    list(46..99)
  %% Unique:
  %%    _0
  _44 = call (`'-alphanum/1-lc$^0/1-0-'`/1), _0

  %% Unique:
  %%    _44
  _47 = succeeded:body _44
  br _47, ^47, ^1

47:
  %% Result type:
  %%    list(46..99)
  %% Unique:
  %%    _44
  ret _44

1:
  _45 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _45
}

%% lc_SUITE.erl:155
%% Counter = 16
%% bs_ensure_opt: true
function `lc_SUITE`:`deeply_nested`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% lc_SUITE.erl:156
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _3 = call (`deeply_nested_1`/0)

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _3
  _13 = bif:'=:=' _3, `[[99,98,97,96,42,17,1764,12,11,10,9,8,7,6,5,4,3,7,2,1]]`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% lc_SUITE.erl:156
  %% Unique:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _14 = succeeded:body _4
  br ^1

8:
  %% lc_SUITE.erl:155
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-deeply_nested/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% lc_SUITE.erl:159
%% Counter = 252
%% bs_ensure_opt: true
function `lc_SUITE`:`deeply_nested_1`() {
0:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _248 = call (`'-deeply_nested_1/0-lc$^2/1-0-'`/1), `"c"`

  %% Unique:
  %%    _248
  _251 = succeeded:body _248
  br _251, ^251, ^1

251:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _248
  ret _248

1:
  _249 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _249
}

%% lc_SUITE.erl:167
%% Counter = 42
%% bs_ensure_opt: true
function `lc_SUITE`:`no_generator`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _38 = bif:is_list _0
  br _38, ^38, ^37

38:
  %% lc_SUITE.erl:168
  Seq = call (`lists`:`seq`/2), `-10`, `17`

  %% Aliased:
  %%    Seq
  _39 = succeeded:body Seq
  br _39, ^39, ^1

39:
  %% lc_SUITE.erl:169
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    Seq
  _33 = call (`'-no_generator/1-lc$^0/1-0-'`/2), Seq, Seq

  %% Unique:
  %%    _33
  _40 = succeeded:body _33
  br _40, ^40, ^1

40:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% lc_SUITE.erl:167
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_generator/1-',1}}
  _34 = match_fail `function_clause`, _0

  %% Unique:
  %%    _34
  _41 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% lc_SUITE.erl:176
%% Counter = 145
%% bs_ensure_opt: true
function `lc_SUITE`:`no_gen`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _68 = bif:'=:=' _1, `9`
  br _68, ^68, ^67

68:
  br ^66

67:
  br ^66

66:
  _2 = phi { `[]`, ^67 }, { `"\t"`, ^68 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _71 = bif:'=:=' _1, `8`
  br _71, ^71, ^70

71:
  %% Argument types:
  %%    _2 => list(9)
  %% Unique:
  %%    _2
  _41 = put_list `8`, _2
  br ^69

70:
  br ^69

69:
  _3 = phi { _2, ^70 }, { _41, ^71 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _74 = bif:'=:=' _1, `7`
  br _74, ^74, ^73

74:
  %% Argument types:
  %%    _3 => list(8..9)
  %% Unique:
  %%    _3
  _42 = put_list `7`, _3
  br ^72

73:
  br ^72

72:
  _4 = phi { _3, ^73 }, { _42, ^74 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _77 = bif:'=:=' _1, `6`
  br _77, ^77, ^76

77:
  %% Argument types:
  %%    _4 => list(7..9)
  %% Unique:
  %%    _4
  _43 = put_list `6`, _4
  br ^75

76:
  br ^75

75:
  _5 = phi { _4, ^76 }, { _43, ^77 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _80 = bif:'=:=' _1, `5`
  br _80, ^80, ^79

80:
  %% Argument types:
  %%    _5 => list(6..9)
  %% Unique:
  %%    _5
  _44 = put_list `5`, _5
  br ^78

79:
  br ^78

78:
  _6 = phi { _5, ^79 }, { _44, ^80 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _83 = bif:'=:=' _1, `4`
  br _83, ^83, ^82

83:
  %% Argument types:
  %%    _6 => list(5..9)
  %% Unique:
  %%    _6
  _45 = put_list `4`, _6
  br ^81

82:
  br ^81

81:
  _7 = phi { _6, ^82 }, { _45, ^83 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _86 = bif:'=:=' _1, `3`
  br _86, ^86, ^85

86:
  %% Argument types:
  %%    _7 => list(4..9)
  %% Unique:
  %%    _7
  _46 = put_list `3`, _7
  br ^84

85:
  br ^84

84:
  _8 = phi { _7, ^85 }, { _46, ^86 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _89 = bif:'=:=' _1, `2`
  br _89, ^89, ^88

89:
  %% Argument types:
  %%    _8 => list(3..9)
  %% Unique:
  %%    _8
  _47 = put_list `2`, _8
  br ^87

88:
  br ^87

87:
  _9 = phi { _8, ^88 }, { _47, ^89 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _92 = bif:'=:=' _1, `1`
  br _92, ^92, ^91

92:
  %% Argument types:
  %%    _9 => list(2..9)
  %% Unique:
  %%    _9
  _48 = put_list `1`, _9
  br ^90

91:
  br ^90

90:
  _10 = phi { _9, ^91 }, { _48, ^92 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _95 = bif:'=:=' _0, `9`
  br _95, ^95, ^94

95:
  %% Argument types:
  %%    _10 => list(1..9)
  %% Unique:
  %%    _10
  _49 = put_list `9`, _10
  br ^93

94:
  br ^93

93:
  _11 = phi { _10, ^94 }, { _49, ^95 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _98 = bif:'=:=' _0, `8`
  br _98, ^98, ^97

98:
  %% Argument types:
  %%    _11 => list(1..9)
  %% Unique:
  %%    _11
  _50 = put_list `8`, _11
  br ^96

97:
  br ^96

96:
  _12 = phi { _11, ^97 }, { _50, ^98 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _101 = bif:'=:=' _0, `7`
  br _101, ^101, ^100

101:
  %% Argument types:
  %%    _12 => list(1..9)
  %% Unique:
  %%    _12
  _51 = put_list `7`, _12
  br ^99

100:
  br ^99

99:
  _13 = phi { _12, ^100 }, { _51, ^101 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _104 = bif:'=:=' _0, `6`
  br _104, ^104, ^103

104:
  %% Argument types:
  %%    _13 => list(1..9)
  %% Unique:
  %%    _13
  _52 = put_list `6`, _13
  br ^102

103:
  br ^102

102:
  _14 = phi { _13, ^103 }, { _52, ^104 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _107 = bif:'=:=' _0, `5`
  br _107, ^107, ^106

107:
  %% Argument types:
  %%    _14 => list(1..9)
  %% Unique:
  %%    _14
  _53 = put_list `5`, _14
  br ^105

106:
  br ^105

105:
  _15 = phi { _14, ^106 }, { _53, ^107 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _110 = bif:'=:=' _0, `4`
  br _110, ^110, ^109

110:
  %% Argument types:
  %%    _15 => list(1..9)
  %% Unique:
  %%    _15
  _54 = put_list `4`, _15
  br ^108

109:
  br ^108

108:
  _16 = phi { _15, ^109 }, { _54, ^110 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _113 = bif:'=:=' _0, `3`
  br _113, ^113, ^112

113:
  %% Argument types:
  %%    _16 => list(1..9)
  %% Unique:
  %%    _16
  _55 = put_list `3`, _16
  br ^111

112:
  br ^111

111:
  _17 = phi { _16, ^112 }, { _55, ^113 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _116 = bif:'=:=' _0, `2`
  br _116, ^116, ^115

116:
  %% Argument types:
  %%    _17 => list(1..9)
  %% Unique:
  %%    _17
  _56 = put_list `2`, _17
  br ^114

115:
  br ^114

114:
  _18 = phi { _17, ^115 }, { _56, ^116 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _119 = bif:'=:=' _0, `1`
  br _119, ^119, ^118

119:
  %% Argument types:
  %%    _18 => list(1..9)
  %% Unique:
  %%    _18
  _57 = put_list `1`, _18
  br ^117

118:
  br ^117

117:
  _19 = phi { _18, ^118 }, { _57, ^119 }

  %% lc_SUITE.erl:181
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _0, 
  %%    _1
  _28 = call (`no_gen_one_more`/2), _0, _1

  %% Unique:
  %%    _28
  _120 = succeeded:body _28
  br _120, ^120, ^1

120:
  br _28, ^124, ^123

124:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _29 = put_tuple `one_more`, _0, _1

  %% Argument types:
  %%    _29 => {'one_more', any(), any()}
  %%    _19 => list(1..9)
  %% Unique:
  %%    _19, 
  %%    _29
  _58 = put_list _29, _19
  br ^121

123:
  br ^121

121:
  _21 = phi { _19, ^123 }, { _58, ^124 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _128 = bif:'=:=' _0, _1
  br _128, ^128, ^127

128:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _30 = put_tuple _0, _1

  %% Argument types:
  %%    _30 => {any(), any()}
  %%    _21 => list(1..9 | {'one_more', any(), any()})
  %% Unique:
  %%    _21, 
  %%    _30
  _60 = put_list _30, _21
  br ^126

127:
  br ^126

126:
  _22 = phi { _21, ^127 }, { _60, ^128 }

  %% lc_SUITE.erl:179
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _23 = bif:'rem' _0, _1

  %% Unique:
  %%    _23
  _132 = succeeded:guard _23
  br _132, ^132, ^130

132:
  %% Argument types:
  %%    _23 => integer()
  %% Unique:
  %%    _23
  _133 = bif:'=:=' _23, `3`
  br _133, ^133, ^130

133:
  %% Argument types:
  %%    _0 => integer()
  %%    _1 => integer()
  %% Unique:
  %%    _0, 
  %%    _1
  _31 = put_tuple _0, _1

  %% Argument types:
  %%    _31 => {integer(), integer()}
  %%    _22 => list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _22, 
  %%    _31
  _61 = put_list _31, _22
  br ^129

130:
  br ^129

129:
  _24 = phi { _22, ^130 }, { _61, ^133 }

  %% lc_SUITE.erl:178
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _25 = bif:'*' _0, _1

  %% Unique:
  %%    _25
  _137 = succeeded:guard _25
  br _137, ^137, ^135

137:
  %% Argument types:
  %%    _25 => number()
  %% Unique:
  %%    _25
  _138 = bif:'=:=' _25, `0`
  br _138, ^138, ^135

138:
  %% Argument types:
  %%    _0 => number()
  %%    _1 => number()
  %% Unique:
  %%    _0, 
  %%    _1
  _35 = put_tuple _0, _1

  %% Argument types:
  %%    _35 => {number(), number()}
  %%    _24 => list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _24, 
  %%    _35
  _62 = put_list _35, _24
  br ^134

135:
  br ^134

134:
  _26 = phi { _24, ^135 }, { _62, ^138 }

  %% lc_SUITE.erl:177
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _27 = bif:'+' _0, _1

  %% Unique:
  %%    _27
  _142 = succeeded:guard _27
  br _142, ^142, ^140

142:
  %% Argument types:
  %%    _27 => number()
  %% Unique:
  %%    _27
  _143 = bif:'=:=' _27, `0`
  br _143, ^143, ^140

143:
  %% Argument types:
  %%    _0 => number()
  %%    _1 => number()
  %% Unique:
  %%    _0, 
  %%    _1
  _39 = put_tuple _0, _1

  %% Argument types:
  %%    _39 => {number(), number()}
  %%    _26 => list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _26, 
  %%    _39
  _63 = put_list _39, _26
  %% Result type:
  %%    nonempty_list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _63
  ret _63

140:
  %% Result type:
  %%    list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _26
  ret _26

1:
  _64 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _64
}

%% lc_SUITE.erl:201
%% Counter = 86
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(1..9 | {any(), any(), ...})
function `lc_SUITE`:`no_gen_verify`(_0, _1, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  Pair = put_tuple _1, _2

  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  _31 = make_fun (`'-no_gen_verify/3-fun-6-'`/2), _1, _2

  %% lc_SUITE.erl:203
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _31, 
  %%    Pair
  _32 = call (`no_gen_eval`/2), _31, Pair

  %% Unique:
  %%    _32
  _59 = succeeded:body _32
  br _59, ^59, ^1

59:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  _27 = make_fun (`'-no_gen_verify/3-fun-5-'`/2), _1, _2

  %% lc_SUITE.erl:204
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _27, 
  %%    Pair
  _28 = call (`no_gen_eval`/2), _27, Pair

  %% Unique:
  %%    _28
  _60 = succeeded:body _28
  br _60, ^60, ^1

60:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  _23 = make_fun (`'-no_gen_verify/3-fun-4-'`/2), _1, _2

  %% lc_SUITE.erl:205
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _23, 
  %%    Pair
  _24 = call (`no_gen_eval`/2), _23, Pair

  %% Unique:
  %%    _24
  _61 = succeeded:body _24
  br _61, ^61, ^1

61:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  _17 = make_fun (`'-no_gen_verify/3-fun-3-'`/2), _1, _2

  %% lc_SUITE.erl:206
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _17, 
  %%    Pair
  _18 = call (`no_gen_eval`/2), _17, Pair

  %% Unique:
  %%    _18
  _62 = succeeded:body _18
  br _62, ^62, ^1

62:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1, 
  %%    _2
  _14 = make_fun (`'-no_gen_verify/3-fun-2-'`/2), _1, _2

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _41 = put_tuple `one_more`, _1, _2

  %% lc_SUITE.erl:207
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _14
  %% Unique:
  %%    _41
  _15 = call (`no_gen_eval`/2), _14, _41

  %% Unique:
  %%    _15
  _63 = succeeded:body _15
  br _63, ^63, ^1

63:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1
  _10 = make_fun (`'-no_gen_verify/3-fun-1-'`/1), _1

  %% lc_SUITE.erl:208
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _1, 
  %%    _10
  _11 = call (`no_gen_eval`/2), _10, _1

  %% Unique:
  %%    _11
  _64 = succeeded:body _11
  br _64, ^64, ^1

64:
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _2
  _6 = make_fun (`'-no_gen_verify/3-fun-0-'`/1), _2

  %% lc_SUITE.erl:209
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _2, 
  %%    _6
  _7 = call (`no_gen_eval`/2), _6, _2

  %% Unique:
  %%    _7
  _65 = succeeded:body _7
  br _65, ^65, ^1

65:
  %% lc_SUITE.erl:208
  %% Unique:
  %%    _7, 
  %%    _11
  _12 = call (`erlang`:`'++'`/2), _11, _7

  %% lc_SUITE.erl:207
  %% Aliased:
  %%    _12
  %% Unique:
  %%    _15
  _16 = call (`erlang`:`'++'`/2), _15, _12

  %% lc_SUITE.erl:206
  %% Aliased:
  %%    _16
  %% Unique:
  %%    _18
  _19 = call (`erlang`:`'++'`/2), _18, _16

  %% lc_SUITE.erl:205
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _24
  _25 = call (`erlang`:`'++'`/2), _24, _19

  %% lc_SUITE.erl:204
  %% Aliased:
  %%    _25
  %% Unique:
  %%    _28
  _29 = call (`erlang`:`'++'`/2), _28, _25

  %% lc_SUITE.erl:203
  %% Aliased:
  %%    _29
  %% Unique:
  %%    _32
  ShouldBe = call (`erlang`:`'++'`/2), _32, _29

  %% Argument types:
  %%    _0 => list(1..9 | {any(), any(), ...})
  %%    ShouldBe => list(any())
  %% Aliased:
  %%    ShouldBe
  %% Unique:
  %%    _0
  _74 = bif:'=:=' _0, ShouldBe
  br _74, ^74, ^73

74:
  %% Result type:
  %%    'ok'
  ret `ok`

73:
  %% Argument types:
  %%    _0 => list(1..9 | {any(), any(), ...})
  %% Unique:
  %%    _0
  _44 = put_list _0, `[]`

  %% Argument types:
  %%    ShouldBe => list(any())
  %%    _44 => nonempty_list(list(1..9 | {any(), any(), ...}))
  %% Aliased:
  %%    ShouldBe
  %% Unique:
  %%    _44
  _45 = put_list ShouldBe, _44

  %% Argument types:
  %%    _45 => nonempty_list(list(any()))
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _45
  _46 = put_list _2, _45

  %% Argument types:
  %%    _46 => nonempty_list(any())
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _46
  _47 = put_list _1, _46

  %% lc_SUITE.erl:213
  %% Unique:
  %%    _47
  _55 = call (`io`:`format`/2), `"A = ~p; B = ~p; Expected = ~p, actual = ~p"`, _47

  %% Aliased:
  %%    _55
  _75 = succeeded:body _55
  br _75, ^75, ^1

75:
  %% lc_SUITE.erl:214
  _56 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _56
  _76 = succeeded:body _56
  br _76, ^76, ^1

76:
  %% Aliased:
  %%    _56
  ret _56

1:
  _57 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _57
}

%% lc_SUITE.erl:217
%% Counter = 14
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> 'false' | 'true')
function `lc_SUITE`:`no_gen_eval`(_0, _1) {
0:
  %% lc_SUITE.erl:218
  %% Result type:
  %%    'false' | 'true'
  %% Argument types:
  %%    _0 => fun(() -> 'false' | 'true')
  %% Aliased:
  %%    _0
  _3 = call _0

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  br _3, ^12, ^11

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _4 = put_list _1, `[]`
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _4
  ret _4

11:
  %% Result type:
  %%    nil()
  ret `[]`

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% lc_SUITE.erl:223
%% Counter = 7
%% bs_ensure_opt: true
function `lc_SUITE`:`no_gen_one_more`(_0, _1) {
0:
  %% lc_SUITE.erl:223
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:'+' _0, `1`

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% lc_SUITE.erl:223
  %% Argument types:
  %%    _2 => number()
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _2
  _3 = bif:'=:=' _2, _1
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% lc_SUITE.erl:225
%% Counter = 32
%% bs_ensure_opt: true
function `lc_SUITE`:`empty_generator`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _25 = bif:is_list _0
  br _25, ^25, ^24

25:
  %% lc_SUITE.erl:226
  %% Result type:
  %%    nil()
  _8 = call (`'-empty_generator/1-lc$^0/1-0-'`/1), `[]`

  %% Unique:
  %%    _8
  _26 = succeeded:body _8
  br _26, ^29, ^1

29:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% lc_SUITE.erl:225
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-empty_generator/1-',1}}
  _21 = match_fail `function_clause`, _0

  %% Unique:
  %%    _21
  _31 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% lc_SUITE.erl:229
%% Counter = 15
%% bs_ensure_opt: true
function `lc_SUITE`:`no_export`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _13 = bif:is_list _0
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% lc_SUITE.erl:229
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_export/1-',1}}
  _9 = match_fail `function_clause`, _0

  %% Unique:
  %%    _9
  _14 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% lc_SUITE.erl:236
%% Counter = 67
%% bs_ensure_opt: true
function `lc_SUITE`:`shadow`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _50 = bif:is_list _0
  br _50, ^50, ^49

50:
  %% lc_SUITE.erl:238
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  _38 = call (`id`/1), `nomatch`

  %% Aliased:
  %%    _38
  _51 = succeeded:body _38
  br _51, ^51, ^1

51:
  %% lc_SUITE.erl:239
  _5 = call (`lists`:`seq`/2), `7`, `9`

  %% Aliased:
  %%    _5
  _52 = succeeded:body _5
  br _52, ^52, ^1

52:
  %% lc_SUITE.erl:239
  %% Result type:
  %%    list({number(), number()})
  %% Aliased:
  %%    _5
  _10 = call (`'-shadow/1-lc$^0/1-0-'`/1), _5

  %% Aliased:
  %%    _10
  _53 = succeeded:body _10
  br _53, ^53, ^1

53:
  %% lc_SUITE.erl:240
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _10
  _30 = call (`id`/1), _10

  %% Aliased:
  %%    _30
  _54 = succeeded:body _30
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    _30 => 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _30
  _64 = bif:'=:=' _30, `[{7,8},{8,9},{9,10}]`
  br _64, ^64, ^56

64:
  %% lc_SUITE.erl:241
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _10
  _15 = call (`id`/1), _10

  %% Aliased:
  %%    _15
  _57 = succeeded:body _15
  br _57, ^57, ^1

57:
  %% lc_SUITE.erl:241
  %% Result type:
  %%    list(number('-inf', 10))
  %% Aliased:
  %%    _15
  _19 = call (`'-shadow/1-lc$^1/1-1-'`/1), _15

  %% Unique:
  %%    _19
  _58 = succeeded:body _19
  br _58, ^58, ^1

58:
  %% lc_SUITE.erl:241
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Unique:
  %%    _19
  _37 = call (`id`/1), _19

  %% Aliased:
  %%    _37
  _59 = succeeded:body _37
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    _37 => 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _37
  _62 = bif:'=:=' _37, `"\b\t"`
  br _62, ^62, ^61

62:
  %% Result type:
  %%    'ok'
  ret `ok`

61:
  %% lc_SUITE.erl:241
  %% Aliased:
  %%    _37
  _44 = match_fail `badmatch`, _37

  %% Unique:
  %%    _44
  _63 = succeeded:body _44
  br ^1

56:
  %% lc_SUITE.erl:240
  %% Aliased:
  %%    _30
  _45 = match_fail `badmatch`, _30

  %% Unique:
  %%    _45
  _65 = succeeded:body _45
  br ^1

49:
  %% lc_SUITE.erl:236
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-shadow/1-',1}}
  _46 = match_fail `function_clause`, _0

  %% Unique:
  %%    _46
  _66 = succeeded:body _46
  br ^1

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% lc_SUITE.erl:245
%% Counter = 119
%% bs_ensure_opt: true
function `lc_SUITE`:`effect`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _105 = bif:is_list _0
  br _105, ^105, ^104

105:
  %% lc_SUITE.erl:246
  _84 = call (`ct`:`timetrap`/1), `{minutes,10}`

  %% Aliased:
  %%    _84
  _106 = succeeded:body _84
  br _106, ^106, ^1

106:
  %% Result type:
  %%    'ok'
  _15 = make_fun (`'-effect/1-fun-1-'`/2)

  %% lc_SUITE.erl:252
  %% Argument types:
  %%    
  %% Anno: #{unit => 4}
  _1 = bs_create_bin `integer`, `[1,{segment,1}]`, `0`, `492`, `binary`, `[1]`, `<<1>>`, `all`

  %% Aliased:
  %%    _1
  _107 = succeeded:body _1
  br _107, ^107, ^1

107:
  %% lc_SUITE.erl:252
  %% Argument types:
  %%    
  %% Anno: #{unit => 1}
  _2 = bs_create_bin `integer`, `[1,{segment,1}]`, `0`, `293`, `binary`, `[1]`, `<<2>>`, `all`

  %% Aliased:
  %%    _2
  _108 = succeeded:body _2
  br _108, ^108, ^1

108:
  %% lc_SUITE.erl:252
  %% Aliased:
  %%    _1
  _71 = put_map `assoc`, `#{}`, _1, `42`

  %% lc_SUITE.erl:252
  %% Aliased:
  %%    _2, 
  %%    _71
  _3 = put_map `assoc`, _71, _2, `{a,b,c}`

  %% Argument types:
  %%    _3 => #{bitstring(1)=>42 | {'a', 'b', 'c'}}
  %% Aliased:
  %%    _3
  _72 = put_list _3, `[]`

  %% Argument types:
  %%    _72 => nonempty_list(#{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Unique:
  %%    _72
  _73 = put_list `x`, _72

  %% Argument types:
  %%    _73 => nonempty_list('x' | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Unique:
  %%    _73
  _74 = put_list `#{}`, _73

  %% lc_SUITE.erl:252
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Unique:
  %%    _74
  _4 = call (`id`/1), _74

  %% Aliased:
  %%    _4
  _109 = succeeded:body _4
  br _109, ^109, ^1

109:
  %% lc_SUITE.erl:248
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _4, 
  %%    _15
  _75 = call (`do_effect`/2), _15, _4

  %% Aliased:
  %%    _75
  _110 = succeeded:body _75
  br _110, ^110, ^1

110:
  %% Argument types:
  %%    _75 => list(any())
  %% Aliased:
  %%    _75
  _115 = bif:'=:=' _75, `[{42,{a,b,c}}]`
  br _115, ^115, ^112

115:
  %% lc_SUITE.erl:259
  _19 = call (`lists`:`seq`/2), `267452416`, `268435455`

  %% Aliased:
  %%    _19
  _113 = succeeded:body _19
  br _113, ^113, ^1

113:
  %% lc_SUITE.erl:259
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _19
  _99 = call (`'-effect/1-lc$^2/1-1-'`/1), _19

  %% Unique:
  %%    _99
  _114 = succeeded:body _99
  br _114, ^114, ^1

114:
  %% Result type:
  %%    'ok'
  ret `ok`

112:
  %% lc_SUITE.erl:247
  %% Aliased:
  %%    _75
  _100 = match_fail `badmatch`, _75

  %% Unique:
  %%    _100
  _116 = succeeded:body _100
  br ^1

104:
  %% lc_SUITE.erl:245
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-effect/1-',1}}
  _101 = match_fail `function_clause`, _0

  %% Unique:
  %%    _101
  _117 = succeeded:body _101
  br ^1

1:
  _102 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _102
}

%% lc_SUITE.erl:266
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_, _) -> 'ok')
%%    _1 =>
%%     'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`do_effect`(_0, _1) {
0:
  %% lc_SUITE.erl:267
  _10 = call (`erlang`:`put`/2), `lc_SUITE`, `[]`

  %% Aliased:
  %%    _10
  _16 = succeeded:body _10
  br _16, ^16, ^1

16:
  F = make_fun (`'-do_effect/2-fun-0-'`/1)

  %% lc_SUITE.erl:269
  %% Result type:
  %%    'ok'
  %% Argument types:
  %%    (`'-effect/1-fun-1-'`/2) => fun((_, _) -> 'ok')
  %%    F => fun((_))
  %%    _1 => 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _1, 
  %%    F
  _9 = call (`'-effect/1-fun-1-'`/2), F, _1

  %% Unique:
  %%    _9
  _17 = succeeded:body _9
  br _17, ^22, ^1

22:
  %% lc_SUITE.erl:270
  _7 = call (`erlang`:`erase`/1), `lc_SUITE`

  %% Aliased:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% lc_SUITE.erl:270
  %% Aliased:
  %%    _7
  _12 = call (`lists`:`reverse`/1), _7

  %% Aliased:
  %%    _12
  _21 = succeeded:body _12
  br _21, ^21, ^1

21:
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _12
  ret _12

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% lc_SUITE.erl:272
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _0
  ret _0
}

%% bad_lc.erl:2
%% Counter = 16
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`bad_generator`(_0) {
0:
  %% bad_lc.erl:4
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _0
  _12 = call (`'-bad_generator/1-lc$^0/1-0-'`/1), _0

  %% Unique:
  %%    _12
  _15 = succeeded:body _12
  br _15, ^15, ^1

15:
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Unique:
  %%    _12
  ret _12

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% bad_lc.erl:5
%% Counter = 40
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
function `lc_SUITE`:`bad_generator_bc`(_0) {
0:
  %% bad_lc.erl:6
  _1 = bs_init_writable `256`

  %% bad_lc.erl:6
  %% Result type:
  %%    none()
  %% Unique:
  %%    _1
  _19 = call (`'-bad_generator_bc/1-lbc$^0/2-0-'`/2), `a`, _1
  _22 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% bad_lc.erl:8
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
function `lc_SUITE`:`bad_generator_mc`(_0) {
0:
  %% bad_lc.erl:10
  %% Result type:
  %%    none()
  _6 = call (`'-bad_generator_mc/1-lc$^0/1-0-'`/1), _0
  _17 = succeeded:body _6
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% Counter = 6
%% bs_ensure_opt: true
function `lc_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `lc_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `lc_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `lc_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% bad_lc.erl:10
%% Counter = 24
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     'a'
function `lc_SUITE`:`'-bad_generator_mc/1-lc$^0/1-0-'`(_3) {
0:
  %% bad_lc.erl:10
  _13 = call (`erlang`:`error`/1), `{bad_generator,a}`

  %% Aliased:
  %%    _13
  _21 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% bad_lc.erl:6
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _4 =>
%%     bitstring(256,appendable)
%%    _5 =>
%%     'a'
function `lc_SUITE`:`'-bad_generator_bc/1-lbc$^0/2-0-'`(_5, _4) {
0:
  %% bad_lc.erl:7
  _18 = call (`erlang`:`error`/1), `{bad_generator,a}`

  %% Aliased:
  %%    _18
  _27 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% bad_lc.erl:4
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     'a' | 'd' | 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`'-bad_generator/1-lc$^0/1-0-'`(_3) {
0:
  %% Aliased:
  %%    _3
  _17 = is_nonempty_list _3
  br _17, ^17, ^15

17:
  %% Argument types:
  %%    _3 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _3
  _9 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _3
  _8 = get_tl _3

  %% bad_lc.erl:4
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _8
  _5 = call (`'-bad_generator/1-lc$^0/1-0-'`/1), _8

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _9 => 'a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}
  %%    _5 => list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _5
  _10 = put_list _9, _5
  %% Result type:
  %%    nonempty_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Unique:
  %%    _10
  ret _10

15:
  %% Argument types:
  %%    _3 => 'a' | 'd' | 'nomatch' | 'not_bool' | 'x' | nil()
  %% Aliased:
  %%    _3
  _18 = bif:'=:=' _3, `[]`
  br _18, ^18, ^14

18:
  %% Result type:
  %%    nil()
  ret `[]`

14:
  %% Argument types:
  %%    _3 => 'a' | 'd' | 'nomatch' | 'not_bool' | 'x'
  %% Unique:
  %%    _3
  _7 = put_tuple `bad_generator`, _3

  %% bad_lc.erl:4
  %% Unique:
  %%    _7
  _11 = call (`erlang`:`error`/1), _7

  %% Aliased:
  %%    _11
  _19 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% lc_SUITE.erl:268
%% Counter = 16
%% bs_ensure_opt: true
function `lc_SUITE`:`'-do_effect/2-fun-0-'`(_3) {
0:
  %% lc_SUITE.erl:268
  %% Argument types:
  %%    
  _2 = bif:get `lc_SUITE`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _3
  _8 = put_list _3, _2

  %% lc_SUITE.erl:268
  %% Unique:
  %%    _8
  _11 = call (`erlang`:`put`/2), `lc_SUITE`, _8

  %% Aliased:
  %%    _11
  _14 = succeeded:body _11
  br _14, ^14, ^1

14:
  %% Aliased:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% lc_SUITE.erl:259
%% Counter = 134
%% bs_ensure_opt: true
function `lc_SUITE`:`'-effect/1-lc$^2/1-1-'`(_20) {
0:
  %% Aliased:
  %%    _20
  _130 = is_nonempty_list _20
  br _130, ^130, ^102

130:
  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _79 = get_hd _20

  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _78 = get_tl _20
  _106 = new_try_tag `'catch'`
  br _106, ^104, ^105

104:
  %% lc_SUITE.erl:258
  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  %% Anno: #{unit => 8}
  _22 = bs_create_bin `utf8`, `[0,{segment,1}]`, _79, `undefined`

  %% Aliased:
  %%    _22
  _108 = succeeded:body _22
  br _108, ^108, ^105

108:
  %% lc_SUITE.erl:258
  %% Aliased:
  %%    _22
  _95 = call (`erlang`:`binary_to_atom`/2), _22, `utf8`

  %% Aliased:
  %%    _95
  _109 = succeeded:body _95
  br _109, ^109, ^105

109:
  br ^103

105:
  %% Unique:
  %%    _106
  _112 = landingpad `'catch'`, _106

  %% Aliased:
  %%    _112
  _110 = extract _112, `0`
  br ^103

103:
  _113 = phi { _110, ^105 }, { _95, ^109 }

  %% Aliased:
  %%    _113
  %% Unique:
  %%    _106
  _23 = catch_end _106, _113

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _126 = is_tagged_tuple _23, `2`, `'EXIT'`
  br _126, ^123, ^115

123:
  %% Argument types:
  %%    _23 => {''EXIT'', any()}
  %% Aliased:
  %%    _23
  _80 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _120 = is_tagged_tuple _80, `2`, `badarg`
  br _120, ^117, ^115

117:
  %% lc_SUITE.erl:259
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _78
  _96 = call (`'-effect/1-lc$^2/1-1-'`/1), _78

  %% Unique:
  %%    _96
  _116 = succeeded:body _96
  br _116, ^116, ^1

116:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _96
  ret _96

115:
  %% lc_SUITE.erl:257
  %% Aliased:
  %%    _23
  _97 = match_fail `badmatch`, _23

  %% Unique:
  %%    _97
  _129 = succeeded:body _97
  br ^1

102:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _131 = bif:'=:=' _20, `[]`
  br _131, ^131, ^101

131:
  %% Result type:
  %%    nil()
  ret `[]`

101:
  %% Argument types:
  %%    _20 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _20
  _77 = put_tuple `bad_generator`, _20

  %% lc_SUITE.erl:259
  %% Unique:
  %%    _77
  _98 = call (`erlang`:`error`/1), _77

  %% Aliased:
  %%    _98
  _132 = succeeded:body _98
  br ^1

1:
  _99 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _99
}

%% lc_SUITE.erl:248
%% Counter = 97
%% bs_ensure_opt: true
function `lc_SUITE`:`'-effect/1-fun-1-'`(_12, _11) {
0:
  %% lc_SUITE.erl:250
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _11, 
  %%    _12
  _93 = call (`'-effect/1-lc$^0/1-0-'`/2), _11, _12

  %% Unique:
  %%    _93
  _96 = succeeded:body _93
  br _96, ^96, ^1

96:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _94 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _94
}

%% lc_SUITE.erl:250
%% Counter = 139
%% bs_ensure_opt: true
function `lc_SUITE`:`'-effect/1-lc$^0/1-0-'`(_7, _12) {
0:
  %% Aliased:
  %%    _7
  _128 = is_nonempty_list _7
  br _128, ^128, ^131

128:
  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _60 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _59 = get_tl _7

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _127 = bif:is_map _60
  br _127, ^127, ^137

127:
  %% lc_SUITE.erl:250
  %% Argument types:
  %%    
  %% Anno: #{unit => 4}
  _86 = bs_create_bin `integer`, `[1,{segment,1}]`, `0`, `492`, `binary`, `[1]`, `<<1>>`, `all`

  %% Aliased:
  %%    _86
  _102 = succeeded:guard _86
  br _102, ^124, ^137

124:
  %% Argument types:
  %%    _60 => map()
  %%    _86 => bitstring(4)
  %% Aliased:
  %%    _60, 
  %%    _86
  _63 = get_map_element _60, _86

  %% Aliased:
  %%    _63
  _110 = succeeded:guard _63
  br _110, ^110, ^137

110:
  %% lc_SUITE.erl:250
  %% Argument types:
  %%    
  %% Anno: #{unit => 1}
  _88 = bs_create_bin `integer`, `[1,{segment,1}]`, `0`, `293`, `binary`, `[1]`, `<<2>>`, `all`

  %% Aliased:
  %%    _88
  _113 = succeeded:guard _88
  br _113, ^121, ^137

121:
  %% Argument types:
  %%    _60 => map()
  %%    _88 => bitstring(1)
  %% Aliased:
  %%    _60, 
  %%    _88
  _65 = get_map_element _60, _88

  %% Aliased:
  %%    _65
  _118 = succeeded:guard _65
  br _118, ^118, ^137

118:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _63, 
  %%    _65
  _66 = put_tuple _63, _65

  %% lc_SUITE.erl:249
  %% Argument types:
  %%    _66 => {any(), any()}
  %% Aliased:
  %%    _12
  %% Unique:
  %%    _66
  _89 = call _12, _66

  %% Aliased:
  %%    _89
  _119 = succeeded:body _89
  br _119, ^119, ^1

119:
  %% lc_SUITE.erl:250
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _12, 
  %%    _59
  _90 = call (`'-effect/1-lc$^0/1-0-'`/2), _59, _12

  %% Unique:
  %%    _90
  _120 = succeeded:body _90
  br _120, ^120, ^1

120:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _90
  ret _90

137:
  %% lc_SUITE.erl:250
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _12, 
  %%    _59
  _91 = call (`'-effect/1-lc$^0/1-0-'`/2), _59, _12

  %% Unique:
  %%    _91
  _132 = succeeded:body _91
  br _132, ^132, ^1

132:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _91
  ret _91

131:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _134 = bif:'=:=' _7, `[]`
  br _134, ^134, ^130

134:
  %% Result type:
  %%    nil()
  ret `[]`

130:
  %% Argument types:
  %%    _7 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _7
  _68 = put_tuple `bad_generator`, _7

  %% lc_SUITE.erl:250
  %% Unique:
  %%    _68
  _92 = call (`erlang`:`error`/1), _68

  %% Aliased:
  %%    _92
  _135 = succeeded:body _92
  br ^1

1:
  _93 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _93
}

%% lc_SUITE.erl:241
%% Counter = 60
%% bs_ensure_opt: true
%% Parameters
%%    _16 =>
%%     'd' | 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`'-shadow/1-lc$^1/1-1-'`(_16) {
0:
  %% Aliased:
  %%    _16
  _56 = is_nonempty_list _16
  br _56, ^56, ^47

56:
  %% Argument types:
  %%    _16 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _16
  _34 = get_hd _16

  %% Argument types:
  %%    _16 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _16
  _33 = get_tl _16

  %% Argument types:
  %%    _34 => 'a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}
  %% Aliased:
  %%    _34
  _52 = bif:is_tuple _34
  br _52, ^51, ^48

51:
  %% Argument types:
  %%    _34 => {number(), number()}
  %% Aliased:
  %%    _34
  _35 = get_tuple_element _34, `1`

  %% Argument types:
  %%    _35 => number()
  %% Unique:
  %%    _35
  _49 = bif:'<' _35, `10`
  br _49, ^49, ^48

49:
  %% lc_SUITE.erl:241
  %% Result type:
  %%    list(number('-inf', 10))
  %% Aliased:
  %%    _33
  _18 = call (`'-shadow/1-lc$^1/1-1-'`/1), _33

  %% Unique:
  %%    _18
  _50 = succeeded:body _18
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    _35 => number('-inf', 10)
  %%    _18 => list(number('-inf', 10))
  %% Unique:
  %%    _18, 
  %%    _35
  _41 = put_list _35, _18
  %% Result type:
  %%    nonempty_list(number('-inf', 10))
  %% Unique:
  %%    _41
  ret _41

48:
  %% lc_SUITE.erl:241
  %% Result type:
  %%    list(number('-inf', 10))
  %% Aliased:
  %%    _33
  _42 = call (`'-shadow/1-lc$^1/1-1-'`/1), _33

  %% Unique:
  %%    _42
  _55 = succeeded:body _42
  br _55, ^55, ^1

55:
  %% Result type:
  %%    list(number('-inf', 10))
  %% Unique:
  %%    _42
  ret _42

47:
  %% Argument types:
  %%    _16 => 'd' | 'nomatch' | 'not_bool' | 'x' | nil()
  %% Aliased:
  %%    _16
  _57 = bif:'=:=' _16, `[]`
  br _57, ^57, ^46

57:
  %% Result type:
  %%    nil()
  ret `[]`

46:
  %% Argument types:
  %%    _16 => 'd' | 'nomatch' | 'not_bool' | 'x'
  %% Unique:
  %%    _16
  _32 = put_tuple `bad_generator`, _16

  %% lc_SUITE.erl:241
  %% Unique:
  %%    _32
  _43 = call (`erlang`:`error`/1), _32

  %% Aliased:
  %%    _43
  _58 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% lc_SUITE.erl:239
%% Counter = 51
%% bs_ensure_opt: true
function `lc_SUITE`:`'-shadow/1-lc$^0/1-0-'`(_6) {
0:
  %% Aliased:
  %%    _6
  _47 = is_nonempty_list _6
  br _47, ^47, ^44

47:
  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _28 = get_hd _6

  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _27 = get_tl _6

  %% lc_SUITE.erl:239
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _8 = bif:'+' _28, `1`

  %% Unique:
  %%    _8
  _45 = succeeded:body _8
  br _45, ^45, ^1

45:
  %% lc_SUITE.erl:239
  %% Result type:
  %%    list({number(), number()})
  %% Aliased:
  %%    _27
  _9 = call (`'-shadow/1-lc$^0/1-0-'`/1), _27

  %% Unique:
  %%    _9
  _46 = succeeded:body _9
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _28 => number()
  %%    _8 => number()
  %% Unique:
  %%    _8, 
  %%    _28
  _29 = put_tuple _28, _8

  %% Argument types:
  %%    _29 => {number(), number()}
  %%    _9 => list({number(), number()})
  %% Unique:
  %%    _9, 
  %%    _29
  _39 = put_list _29, _9
  %% Result type:
  %%    nonempty_list({number(), number()})
  %% Unique:
  %%    _39
  ret _39

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _48 = bif:'=:=' _6, `[]`
  br _48, ^48, ^43

48:
  %% Result type:
  %%    nil()
  ret `[]`

43:
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _26 = put_tuple `bad_generator`, _6

  %% lc_SUITE.erl:239
  %% Unique:
  %%    _26
  _40 = call (`erlang`:`error`/1), _26

  %% Aliased:
  %%    _40
  _49 = succeeded:body _40
  br ^1

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41
}

%% lc_SUITE.erl:226
%% Counter = 41
%% bs_ensure_opt: true
%% Parameters
%%    _5 =>
%%     nil()
function `lc_SUITE`:`'-empty_generator/1-lc$^0/1-0-'`(_5) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:209
%% Counter = 60
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-0-'`(_2) {
0:
  %% lc_SUITE.erl:209
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _43 = bif:'=<' `1`, _2
  br _43, ^59, ^58

59:
  %% lc_SUITE.erl:209
  %% Argument types:
  %%    _2 => atom() | maybe_improper_list(any(), any()) | number(1, '+inf') | {...} | other()
  %% Aliased:
  %%    _2
  _54 = bif:'=<' _2, `9`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _54
  ret _54

58:
  %% Result type:
  %%    'false'
  ret `false`
}

%% lc_SUITE.erl:208
%% Counter = 59
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-1-'`(_1) {
0:
  %% lc_SUITE.erl:208
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _42 = bif:'=<' `1`, _1
  br _42, ^58, ^57

58:
  %% lc_SUITE.erl:208
  %% Argument types:
  %%    _1 => atom() | maybe_improper_list(any(), any()) | number(1, '+inf') | {...} | other()
  %% Aliased:
  %%    _1
  _53 = bif:'=<' _1, `9`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _53
  ret _53

57:
  %% Result type:
  %%    'false'
  ret `false`
}

%% lc_SUITE.erl:207
%% Counter = 56
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-2-'`(_1, _2) {
0:
  %% lc_SUITE.erl:207
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _13 = bif:'+' _1, `1`

  %% Unique:
  %%    _13
  _55 = succeeded:body _13
  br _55, ^55, ^1

55:
  %% lc_SUITE.erl:207
  %% Argument types:
  %%    _13 => number()
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _13
  _52 = bif:'=:=' _13, _2
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _52
  ret _52

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% lc_SUITE.erl:206
%% Counter = 54
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-3-'`(_1, _2) {
0:
  %% lc_SUITE.erl:206
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _51 = bif:'=:=' _1, _2
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _51
  ret _51
}

%% lc_SUITE.erl:205
%% Counter = 57
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-4-'`(_1, _2) {
0:
  %% lc_SUITE.erl:205
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _40 = bif:'=:=' _2, `0`
  br _40, ^55, ^56

55:
  %% Result type:
  %%    'false'
  ret `false`

56:
  %% lc_SUITE.erl:205
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _21 = bif:'rem' _1, _2

  %% Unique:
  %%    _21
  _54 = succeeded:body _21
  br _54, ^54, ^1

54:
  %% lc_SUITE.erl:205
  %% Argument types:
  %%    _21 => integer()
  %% Unique:
  %%    _21
  _50 = bif:'=:=' _21, `3`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _50
  ret _50

1:
  _51 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _51
}

%% lc_SUITE.erl:204
%% Counter = 53
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-5-'`(_1, _2) {
0:
  %% lc_SUITE.erl:204
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _26 = bif:'*' _1, _2

  %% Unique:
  %%    _26
  _52 = succeeded:body _26
  br _52, ^52, ^1

52:
  %% lc_SUITE.erl:204
  %% Argument types:
  %%    _26 => number()
  %% Unique:
  %%    _26
  _49 = bif:'=:=' _26, `0`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _49
  ret _49

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% lc_SUITE.erl:203
%% Counter = 52
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_gen_verify/3-fun-6-'`(_1, _2) {
0:
  %% lc_SUITE.erl:203
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _30 = bif:'+' _1, _2

  %% Unique:
  %%    _30
  _51 = succeeded:body _30
  br _51, ^51, ^1

51:
  %% lc_SUITE.erl:203
  %% Argument types:
  %%    _30 => number()
  %% Unique:
  %%    _30
  _48 = bif:'=:=' _30, `0`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _48
  ret _48

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% lc_SUITE.erl:169
%% Counter = 43
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_generator/1-lc$^0/1-0-'`(_7, Seq) {
0:
  %% Aliased:
  %%    _7
  _38 = is_nonempty_list _7
  br _38, ^38, ^36

38:
  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _22 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _21 = get_tl _7

  %% lc_SUITE.erl:169
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21, 
  %%    _22, 
  %%    Seq
  _31 = call (`'-no_generator/1-lc$^1/1-1-'`/4), Seq, _21, _22, Seq

  %% Unique:
  %%    _31
  _37 = succeeded:body _31
  br _37, ^37, ^1

37:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _31
  ret _31

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _39 = bif:'=:=' _7, `[]`
  br _39, ^39, ^35

39:
  %% Result type:
  %%    nil()
  ret `[]`

35:
  %% Argument types:
  %%    _7 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _7
  _20 = put_tuple `bad_generator`, _7

  %% lc_SUITE.erl:169
  %% Unique:
  %%    _20
  _32 = call (`erlang`:`error`/1), _20

  %% Aliased:
  %%    _32
  _40 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% lc_SUITE.erl:169
%% Counter = 44
%% bs_ensure_opt: true
function `lc_SUITE`:`'-no_generator/1-lc$^1/1-1-'`(_9, _21, _22, Seq) {
0:
  %% Aliased:
  %%    _9
  _38 = is_nonempty_list _9
  br _38, ^38, ^34

38:
  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _26 = get_hd _9

  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _25 = get_tl _9

  %% lc_SUITE.erl:169
  %% Result type:
  %%    list(1..9 | {any(), any(), ...})
  %% Aliased:
  %%    _22, 
  %%    _26
  _11 = call (`no_gen`/2), _22, _26

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br _35, ^35, ^1

35:
  %% lc_SUITE.erl:169
  %% Aliased:
  %%    _22, 
  %%    _26
  %% Unique:
  %%    _11
  _28 = call (`no_gen_verify`/3), _11, _22, _26

  %% Aliased:
  %%    _28
  _36 = succeeded:body _28
  br _36, ^36, ^1

36:
  %% lc_SUITE.erl:169
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21, 
  %%    _22, 
  %%    _25, 
  %%    Seq
  _29 = call (`'-no_generator/1-lc$^1/1-1-'`/4), _25, _21, _22, Seq

  %% Unique:
  %%    _29
  _37 = succeeded:body _29
  br _37, ^37, ^1

37:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _29
  ret _29

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _40 = bif:'=:=' _9, `[]`
  br _40, ^40, ^33

40:
  %% lc_SUITE.erl:169
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21, 
  %%    Seq
  _27 = call (`'-no_generator/1-lc$^0/1-0-'`/2), _21, Seq

  %% Unique:
  %%    _27
  _39 = succeeded:body _27
  br _39, ^39, ^1

39:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _27
  ret _27

33:
  %% Argument types:
  %%    _9 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _9
  _24 = put_tuple `bad_generator`, _9

  %% lc_SUITE.erl:169
  %% Unique:
  %%    _24
  _30 = call (`erlang`:`error`/1), _24

  %% Aliased:
  %%    _30
  _41 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% lc_SUITE.erl:162
%% Counter = 258
%% bs_ensure_opt: true
%% Parameters
%%    _42 =>
%%     list(99)
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^2/1-0-'`(_42) {
0:
  %% Unique:
  %%    _42
  _253 = is_nonempty_list _42
  br _253, ^253, ^254

253:
  %% Argument types:
  %%    _42 => nonempty_list(99)
  %% Unique:
  %%    _42
  _87 = get_tl _42

  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _246 = call (`'-deeply_nested_1/0-lc$^3/1-1-'`/3), `"b"`, _87, `99`

  %% Unique:
  %%    _246
  _252 = succeeded:body _246
  br _252, ^252, ^1

252:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _246
  ret _246

1:
  _248 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _248

254:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:162
%% Counter = 257
%% bs_ensure_opt: true
%% Parameters
%%    _44 =>
%%     list(98)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^3/1-1-'`(_44, _87, _88) {
0:
  %% Unique:
  %%    _44
  _251 = is_nonempty_list _44
  br _251, ^251, ^253

251:
  %% Argument types:
  %%    _44 => nonempty_list(98)
  %% Unique:
  %%    _44
  _91 = get_tl _44

  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _244 = call (`'-deeply_nested_1/0-lc$^4/1-2-'`/5), `"a"`, _87, _88, _91, `98`

  %% Unique:
  %%    _244
  _250 = succeeded:body _244
  br _250, ^250, ^1

250:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _244
  ret _244

253:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _187 = call (`'-deeply_nested_1/0-lc$^2/1-0-'`/1), _87

  %% Unique:
  %%    _187
  _252 = succeeded:body _187
  br _252, ^252, ^1

252:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _187
  ret _187

1:
  _246 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _246
}

%% lc_SUITE.erl:162
%% Counter = 255
%% bs_ensure_opt: true
%% Parameters
%%    _46 =>
%%     list(97)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^4/1-2-'`(_46, _87, _88, _91, _92) {
0:
  %% Unique:
  %%    _46
  _249 = is_nonempty_list _46
  br _249, ^249, ^251

249:
  %% Argument types:
  %%    _46 => nonempty_list(97)
  %% Unique:
  %%    _46
  _95 = get_tl _46

  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _242 = call (`'-deeply_nested_1/0-lc$^5/1-3-'`/7), `"`"`, _87, _88, _91, _92, _95, `97`

  %% Unique:
  %%    _242
  _248 = succeeded:body _242
  br _248, ^248, ^1

248:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _242
  ret _242

251:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _188 = call (`'-deeply_nested_1/0-lc$^3/1-1-'`/3), _91, _87, _88

  %% Unique:
  %%    _188
  _250 = succeeded:body _188
  br _250, ^250, ^1

250:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _188
  ret _188

1:
  _244 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _244
}

%% lc_SUITE.erl:162
%% Counter = 253
%% bs_ensure_opt: true
%% Parameters
%%    _48 =>
%%     list(96)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^5/1-3-'`(_48, _87, _88, _91, _92, _95, _96) {
0:
  %% Unique:
  %%    _48
  _247 = is_nonempty_list _48
  br _247, ^247, ^249

247:
  %% Argument types:
  %%    _48 => nonempty_list(96)
  %% Unique:
  %%    _48
  _99 = get_tl _48

  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _240 = call (`'-deeply_nested_1/0-lc$^6/1-4-'`/9), `"*"`, _87, _88, _91, _92, _95, _96, _99, `96`

  %% Unique:
  %%    _240
  _246 = succeeded:body _240
  br _246, ^246, ^1

246:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _240
  ret _240

249:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _189 = call (`'-deeply_nested_1/0-lc$^4/1-2-'`/5), _95, _87, _88, _91, _92

  %% Unique:
  %%    _189
  _248 = succeeded:body _189
  br _248, ^248, ^1

248:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _189
  ret _189

1:
  _242 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _242
}

%% lc_SUITE.erl:162
%% Counter = 251
%% bs_ensure_opt: true
%% Parameters
%%    _50 =>
%%     list(42)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^6/1-4-'`(_50, _87, _88, _91, _92, _95, _96, _99, _100) {
0:
  %% Unique:
  %%    _50
  _245 = is_nonempty_list _50
  br _245, ^245, ^247

245:
  %% Argument types:
  %%    _50 => nonempty_list(42)
  %% Unique:
  %%    _50
  _103 = get_tl _50

  %% lc_SUITE.erl:162
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  _238 = call (`'-deeply_nested_1/0-lc$^7/1-5-'`/11), `[17]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, `42`

  %% Unique:
  %%    _238
  _244 = succeeded:body _238
  br _244, ^244, ^1

244:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _238
  ret _238

247:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _190 = call (`'-deeply_nested_1/0-lc$^5/1-3-'`/7), _99, _87, _88, _91, _92, _95, _96

  %% Unique:
  %%    _190
  _246 = succeeded:body _190
  br _246, ^246, ^1

246:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _190
  ret _190

1:
  _240 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _240
}

%% lc_SUITE.erl:162
%% Counter = 250
%% bs_ensure_opt: true
%% Parameters
%%    _52 =>
%%     list(17)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^7/1-5-'`(_52, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104) {
0:
  %% Unique:
  %%    _52
  _243 = is_nonempty_list _52
  br _243, ^243, ^245

243:
  %% Argument types:
  %%    _52 => nonempty_list(17)
  %% Unique:
  %%    _52
  _107 = get_tl _52

  %% Result type:
  %%    1764
  _14 = make_fun (`'-deeply_nested_1/0-fun-0-'`/1), `42`

  %% Argument types:
  %%    _14 => fun(() -> 1764)
  %% Aliased:
  %%    _14
  _186 = put_list _14, `[]`

  %% lc_SUITE.erl:163
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _186
  _236 = call (`'-deeply_nested_1/0-lc$^8/1-6-'`/13), _186, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, `17`

  %% Unique:
  %%    _236
  _242 = succeeded:body _236
  br _242, ^242, ^1

242:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _236
  ret _236

245:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _191 = call (`'-deeply_nested_1/0-lc$^6/1-4-'`/9), _103, _87, _88, _91, _92, _95, _96, _99, _100

  %% Unique:
  %%    _191
  _244 = succeeded:body _191
  br _244, ^244, ^1

244:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _191
  ret _191

1:
  _238 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _238
}

%% lc_SUITE.erl:163
%% Counter = 239
%% bs_ensure_opt: true
%% Parameters
%%    _104 =>
%%     42
function `lc_SUITE`:`'-deeply_nested_1/0-fun-0-'`(_104) {
0:
  %% Result type:
  %%    1764
  ret `1764`
}

%% lc_SUITE.erl:163
%% Counter = 246
%% bs_ensure_opt: true
%% Parameters
%%    _54 =>
%%     list(fun(() -> 1764))
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^8/1-6-'`(_54, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108) {
0:
  %% Unique:
  %%    _54
  _240 = is_nonempty_list _54
  br _240, ^240, ^242

240:
  %% Argument types:
  %%    _54 => nonempty_list(fun(() -> 1764))
  %% Unique:
  %%    _54
  _112 = get_hd _54

  %% Argument types:
  %%    _54 => nonempty_list(fun(() -> 1764))
  %% Unique:
  %%    _54
  _111 = get_tl _54

  %% lc_SUITE.erl:163
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _233 = call (`'-deeply_nested_1/0-lc$^9/1-7-'`/15), `"\f"`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112

  %% Unique:
  %%    _233
  _239 = succeeded:body _233
  br _239, ^239, ^1

239:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _233
  ret _233

242:
  %% lc_SUITE.erl:162
  %% Result type:
  %%    list(nonempty_list(1..1764))
  _192 = call (`'-deeply_nested_1/0-lc$^7/1-5-'`/11), _107, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104

  %% Unique:
  %%    _192
  _241 = succeeded:body _192
  br _241, ^241, ^1

241:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _192
  ret _192

1:
  _235 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _235
}

%% lc_SUITE.erl:163
%% Counter = 244
%% bs_ensure_opt: true
%% Parameters
%%    _56 =>
%%     list(12)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^9/1-7-'`(_56, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112) {
0:
  %% Unique:
  %%    _56
  _238 = is_nonempty_list _56
  br _238, ^238, ^240

238:
  %% Argument types:
  %%    _56 => nonempty_list(12)
  %% Unique:
  %%    _56
  _115 = get_tl _56

  %% lc_SUITE.erl:163
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _231 = call (`'-deeply_nested_1/0-lc$^10/1-8-'`/17), `"\v"`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, `12`

  %% Unique:
  %%    _231
  _237 = succeeded:body _231
  br _237, ^237, ^1

237:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _231
  ret _231

240:
  %% lc_SUITE.erl:163
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _111
  _193 = call (`'-deeply_nested_1/0-lc$^8/1-6-'`/13), _111, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108

  %% Unique:
  %%    _193
  _239 = succeeded:body _193
  br _239, ^239, ^1

239:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _193
  ret _193

1:
  _233 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _233
}

%% lc_SUITE.erl:163
%% Counter = 242
%% bs_ensure_opt: true
%% Parameters
%%    _58 =>
%%     list(11)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^10/1-8-'`(_58, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116) {
0:
  %% Unique:
  %%    _58
  _236 = is_nonempty_list _58
  br _236, ^236, ^238

236:
  %% Argument types:
  %%    _58 => nonempty_list(11)
  %% Unique:
  %%    _58
  _119 = get_tl _58

  %% lc_SUITE.erl:163
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _229 = call (`'-deeply_nested_1/0-lc$^11/1-9-'`/19), `"\n"`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, `11`

  %% Unique:
  %%    _229
  _235 = succeeded:body _229
  br _235, ^235, ^1

235:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _229
  ret _229

238:
  %% lc_SUITE.erl:163
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _194 = call (`'-deeply_nested_1/0-lc$^9/1-7-'`/15), _115, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112

  %% Unique:
  %%    _194
  _237 = succeeded:body _194
  br _237, ^237, ^1

237:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _194
  ret _194

1:
  _231 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _231
}

%% lc_SUITE.erl:163
%% Counter = 240
%% bs_ensure_opt: true
%% Parameters
%%    _60 =>
%%     list(10)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^11/1-9-'`(_60, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120) {
0:
  %% Unique:
  %%    _60
  _234 = is_nonempty_list _60
  br _234, ^234, ^236

234:
  %% Argument types:
  %%    _60 => nonempty_list(10)
  %% Unique:
  %%    _60
  _123 = get_tl _60

  %% lc_SUITE.erl:164
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _227 = call (`'-deeply_nested_1/0-lc$^12/1-10-'`/21), `"\t"`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, `10`

  %% Unique:
  %%    _227
  _233 = succeeded:body _227
  br _233, ^233, ^1

233:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _227
  ret _227

236:
  %% lc_SUITE.erl:163
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _195 = call (`'-deeply_nested_1/0-lc$^10/1-8-'`/17), _119, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116

  %% Unique:
  %%    _195
  _235 = succeeded:body _195
  br _235, ^235, ^1

235:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _195
  ret _195

1:
  _229 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _229
}

%% lc_SUITE.erl:164
%% Counter = 238
%% bs_ensure_opt: true
%% Parameters
%%    _62 =>
%%     list(9)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^12/1-10-'`(_62, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124) {
0:
  %% Unique:
  %%    _62
  _232 = is_nonempty_list _62
  br _232, ^232, ^234

232:
  %% Argument types:
  %%    _62 => nonempty_list(9)
  %% Unique:
  %%    _62
  _127 = get_tl _62

  %% lc_SUITE.erl:164
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _225 = call (`'-deeply_nested_1/0-lc$^13/1-11-'`/23), `"\b"`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, `9`

  %% Unique:
  %%    _225
  _231 = succeeded:body _225
  br _231, ^231, ^1

231:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _225
  ret _225

234:
  %% lc_SUITE.erl:163
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _196 = call (`'-deeply_nested_1/0-lc$^11/1-9-'`/19), _123, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120

  %% Unique:
  %%    _196
  _233 = succeeded:body _196
  br _233, ^233, ^1

233:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _196
  ret _196

1:
  _227 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _227
}

%% lc_SUITE.erl:164
%% Counter = 236
%% bs_ensure_opt: true
%% Parameters
%%    _64 =>
%%     list(8)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^13/1-11-'`(_64, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128) {
0:
  %% Unique:
  %%    _64
  _230 = is_nonempty_list _64
  br _230, ^230, ^232

230:
  %% Argument types:
  %%    _64 => nonempty_list(8)
  %% Unique:
  %%    _64
  _131 = get_tl _64

  %% lc_SUITE.erl:164
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _223 = call (`'-deeply_nested_1/0-lc$^14/1-12-'`/25), `[7]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, `8`

  %% Unique:
  %%    _223
  _229 = succeeded:body _223
  br _229, ^229, ^1

229:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _223
  ret _223

232:
  %% lc_SUITE.erl:164
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _197 = call (`'-deeply_nested_1/0-lc$^12/1-10-'`/21), _127, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124

  %% Unique:
  %%    _197
  _231 = succeeded:body _197
  br _231, ^231, ^1

231:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _197
  ret _197

1:
  _225 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _225
}

%% lc_SUITE.erl:164
%% Counter = 234
%% bs_ensure_opt: true
%% Parameters
%%    _66 =>
%%     list(7)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^14/1-12-'`(_66, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132) {
0:
  %% Unique:
  %%    _66
  _228 = is_nonempty_list _66
  br _228, ^228, ^230

228:
  %% Argument types:
  %%    _66 => nonempty_list(7)
  %% Unique:
  %%    _66
  _135 = get_tl _66

  %% lc_SUITE.erl:164
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _221 = call (`'-deeply_nested_1/0-lc$^15/1-13-'`/27), `[6]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, `7`

  %% Unique:
  %%    _221
  _227 = succeeded:body _221
  br _227, ^227, ^1

227:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _221
  ret _221

230:
  %% lc_SUITE.erl:164
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _198 = call (`'-deeply_nested_1/0-lc$^13/1-11-'`/23), _131, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128

  %% Unique:
  %%    _198
  _229 = succeeded:body _198
  br _229, ^229, ^1

229:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _198
  ret _198

1:
  _223 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _223
}

%% lc_SUITE.erl:164
%% Counter = 232
%% bs_ensure_opt: true
%% Parameters
%%    _68 =>
%%     list(6)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^15/1-13-'`(_68, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136) {
0:
  %% Unique:
  %%    _68
  _226 = is_nonempty_list _68
  br _226, ^226, ^228

226:
  %% Argument types:
  %%    _68 => nonempty_list(6)
  %% Unique:
  %%    _68
  _139 = get_tl _68

  %% lc_SUITE.erl:164
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _219 = call (`'-deeply_nested_1/0-lc$^16/1-14-'`/29), `[5]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, `6`

  %% Unique:
  %%    _219
  _225 = succeeded:body _219
  br _225, ^225, ^1

225:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _219
  ret _219

228:
  %% lc_SUITE.erl:164
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _199 = call (`'-deeply_nested_1/0-lc$^14/1-12-'`/25), _135, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132

  %% Unique:
  %%    _199
  _227 = succeeded:body _199
  br _227, ^227, ^1

227:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _199
  ret _199

1:
  _221 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _221
}

%% lc_SUITE.erl:164
%% Counter = 230
%% bs_ensure_opt: true
%% Parameters
%%    _70 =>
%%     list(5)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^16/1-14-'`(_70, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140) {
0:
  %% Unique:
  %%    _70
  _224 = is_nonempty_list _70
  br _224, ^224, ^226

224:
  %% Argument types:
  %%    _70 => nonempty_list(5)
  %% Unique:
  %%    _70
  _143 = get_tl _70

  %% lc_SUITE.erl:165
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _217 = call (`'-deeply_nested_1/0-lc$^17/1-15-'`/31), `[4]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, `5`

  %% Unique:
  %%    _217
  _223 = succeeded:body _217
  br _223, ^223, ^1

223:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _217
  ret _217

226:
  %% lc_SUITE.erl:164
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _200 = call (`'-deeply_nested_1/0-lc$^15/1-13-'`/27), _139, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136

  %% Unique:
  %%    _200
  _225 = succeeded:body _200
  br _225, ^225, ^1

225:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _200
  ret _200

1:
  _219 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _219
}

%% lc_SUITE.erl:165
%% Counter = 228
%% bs_ensure_opt: true
%% Parameters
%%    _72 =>
%%     list(4)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
%%    _143 =>
%%     list(5)
%%    _144 =>
%%     5
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^17/1-15-'`(_72, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144) {
0:
  %% Unique:
  %%    _72
  _222 = is_nonempty_list _72
  br _222, ^222, ^224

222:
  %% Argument types:
  %%    _72 => nonempty_list(4)
  %% Unique:
  %%    _72
  _147 = get_tl _72

  %% lc_SUITE.erl:165
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _215 = call (`'-deeply_nested_1/0-lc$^18/1-16-'`/33), `[3]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, `4`

  %% Unique:
  %%    _215
  _221 = succeeded:body _215
  br _221, ^221, ^1

221:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _215
  ret _215

224:
  %% lc_SUITE.erl:164
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _201 = call (`'-deeply_nested_1/0-lc$^16/1-14-'`/29), _143, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140

  %% Unique:
  %%    _201
  _223 = succeeded:body _201
  br _223, ^223, ^1

223:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _201
  ret _201

1:
  _217 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _217
}

%% lc_SUITE.erl:165
%% Counter = 227
%% bs_ensure_opt: true
%% Parameters
%%    _74 =>
%%     list(3)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
%%    _143 =>
%%     list(5)
%%    _144 =>
%%     5
%%    _147 =>
%%     list(4)
%%    _148 =>
%%     4
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^18/1-16-'`(_74, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148) {
0:
  %% Unique:
  %%    _74
  _220 = is_nonempty_list _74
  br _220, ^220, ^222

220:
  %% Argument types:
  %%    _74 => nonempty_list(3)
  %% Unique:
  %%    _74
  _151 = get_tl _74

  %% Result type:
  %%    7
  _37 = make_fun (`'-deeply_nested_1/0-fun-1-'`/2), `4`, `3`

  %% Argument types:
  %%    _37 => fun(() -> 7)
  %% Aliased:
  %%    _37
  _185 = put_list _37, `[]`

  %% lc_SUITE.erl:165
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111, 
  %%    _185
  _213 = call (`'-deeply_nested_1/0-lc$^19/1-17-'`/35), _185, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, `3`

  %% Unique:
  %%    _213
  _219 = succeeded:body _213
  br _219, ^219, ^1

219:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _213
  ret _213

222:
  %% lc_SUITE.erl:165
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _202 = call (`'-deeply_nested_1/0-lc$^17/1-15-'`/31), _147, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144

  %% Unique:
  %%    _202
  _221 = succeeded:body _202
  br _221, ^221, ^1

221:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _202
  ret _202

1:
  _215 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _215
}

%% lc_SUITE.erl:165
%% Counter = 216
%% bs_ensure_opt: true
%% Parameters
%%    _148 =>
%%     4
%%    _152 =>
%%     3
function `lc_SUITE`:`'-deeply_nested_1/0-fun-1-'`(_148, _152) {
0:
  %% Result type:
  %%    7
  ret `7`
}

%% lc_SUITE.erl:165
%% Counter = 223
%% bs_ensure_opt: true
%% Parameters
%%    _76 =>
%%     list(fun(() -> 7))
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
%%    _143 =>
%%     list(5)
%%    _144 =>
%%     5
%%    _147 =>
%%     list(4)
%%    _148 =>
%%     4
%%    _151 =>
%%     list(3)
%%    _152 =>
%%     3
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^19/1-17-'`(_76, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152) {
0:
  %% Unique:
  %%    _76
  _217 = is_nonempty_list _76
  br _217, ^217, ^219

217:
  %% Argument types:
  %%    _76 => nonempty_list(fun(() -> 7))
  %% Unique:
  %%    _76
  _156 = get_hd _76

  %% Argument types:
  %%    _76 => nonempty_list(fun(() -> 7))
  %% Unique:
  %%    _76
  _155 = get_tl _76

  %% lc_SUITE.erl:165
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112, 
  %%    _156
  %% Unique:
  %%    _111, 
  %%    _155
  _210 = call (`'-deeply_nested_1/0-lc$^20/1-18-'`/37), `[2]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152, _155, _156

  %% Unique:
  %%    _210
  _216 = succeeded:body _210
  br _216, ^216, ^1

216:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _210
  ret _210

219:
  %% lc_SUITE.erl:165
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111
  _203 = call (`'-deeply_nested_1/0-lc$^18/1-16-'`/33), _151, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148

  %% Unique:
  %%    _203
  _218 = succeeded:body _203
  br _218, ^218, ^1

218:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _203
  ret _203

1:
  _212 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _212
}

%% lc_SUITE.erl:165
%% Counter = 221
%% bs_ensure_opt: true
%% Parameters
%%    _78 =>
%%     list(2)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
%%    _143 =>
%%     list(5)
%%    _144 =>
%%     5
%%    _147 =>
%%     list(4)
%%    _148 =>
%%     4
%%    _151 =>
%%     list(3)
%%    _152 =>
%%     3
%%    _155 =>
%%     list(fun(() -> 7))
%%    _156 =>
%%     fun(() -> 7)
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^20/1-18-'`(_78, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152, _155, _156) {
0:
  %% Unique:
  %%    _78
  _215 = is_nonempty_list _78
  br _215, ^215, ^217

215:
  %% Argument types:
  %%    _78 => nonempty_list(2)
  %% Unique:
  %%    _78
  _159 = get_tl _78

  %% lc_SUITE.erl:165
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112, 
  %%    _156
  %% Unique:
  %%    _111, 
  %%    _155
  _208 = call (`'-deeply_nested_1/0-lc$^21/1-19-'`/39), `[1]`, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152, _155, _156, _159, `2`

  %% Unique:
  %%    _208
  _214 = succeeded:body _208
  br _214, ^214, ^1

214:
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _208
  ret _208

217:
  %% lc_SUITE.erl:165
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112
  %% Unique:
  %%    _111, 
  %%    _155
  _204 = call (`'-deeply_nested_1/0-lc$^19/1-17-'`/35), _155, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152

  %% Unique:
  %%    _204
  _216 = succeeded:body _204
  br _216, ^216, ^1

216:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _204
  ret _204

1:
  _210 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _210
}

%% lc_SUITE.erl:165
%% Counter = 221
%% bs_ensure_opt: true
%% Parameters
%%    _80 =>
%%     list(1)
%%    _87 =>
%%     list(99)
%%    _88 =>
%%     99
%%    _91 =>
%%     list(98)
%%    _92 =>
%%     98
%%    _95 =>
%%     list(97)
%%    _96 =>
%%     97
%%    _99 =>
%%     list(96)
%%    _100 =>
%%     96
%%    _103 =>
%%     list(42)
%%    _104 =>
%%     42
%%    _107 =>
%%     list(17)
%%    _108 =>
%%     17
%%    _111 =>
%%     list(fun(() -> 1764))
%%    _112 =>
%%     fun(() -> 1764)
%%    _115 =>
%%     list(12)
%%    _116 =>
%%     12
%%    _119 =>
%%     list(11)
%%    _120 =>
%%     11
%%    _123 =>
%%     list(10)
%%    _124 =>
%%     10
%%    _127 =>
%%     list(9)
%%    _128 =>
%%     9
%%    _131 =>
%%     list(8)
%%    _132 =>
%%     8
%%    _135 =>
%%     list(7)
%%    _136 =>
%%     7
%%    _139 =>
%%     list(6)
%%    _140 =>
%%     6
%%    _143 =>
%%     list(5)
%%    _144 =>
%%     5
%%    _147 =>
%%     list(4)
%%    _148 =>
%%     4
%%    _151 =>
%%     list(3)
%%    _152 =>
%%     3
%%    _155 =>
%%     list(fun(() -> 7))
%%    _156 =>
%%     fun(() -> 7)
%%    _159 =>
%%     list(2)
%%    _160 =>
%%     2
function `lc_SUITE`:`'-deeply_nested_1/0-lc$^21/1-19-'`(_80, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152, _155, _156, _159, _160) {
0:
  %% Unique:
  %%    _80
  _215 = is_nonempty_list _80
  br _215, ^215, ^217

215:
  %% Argument types:
  %%    _80 => nonempty_list(1)
  %% Unique:
  %%    _80
  _163 = get_tl _80

  %% lc_SUITE.erl:161
  %% Result type:
  %%    1764
  %% Argument types:
  %%    _112 => fun(() -> 1764)
  %% Aliased:
  %%    _112
  _83 = call _112

  %% Aliased:
  %%    _83
  _212 = succeeded:body _83
  br _212, ^212, ^1

212:
  %% lc_SUITE.erl:161
  %% Result type:
  %%    7
  %% Argument types:
  %%    _156 => fun(() -> 7)
  %% Aliased:
  %%    _156
  _82 = call _156

  %% Aliased:
  %%    _82
  _213 = succeeded:body _82
  br _213, ^213, ^1

213:
  %% lc_SUITE.erl:165
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112, 
  %%    _156
  %% Unique:
  %%    _111, 
  %%    _155
  _84 = call (`'-deeply_nested_1/0-lc$^21/1-19-'`/39), _163, _87, `99`, _91, `98`, _95, `97`, _99, `96`, _103, `42`, _107, `17`, _111, _112, _115, `12`, _119, `11`, _123, `10`, _127, `9`, _131, `8`, _135, `7`, _139, `6`, _143, `5`, _147, `4`, _151, `3`, _155, _156, _159, `2`

  %% Unique:
  %%    _84
  _214 = succeeded:body _84
  br _214, ^214, ^1

214:
  %% Argument types:
  %%    _84 => list(nonempty_list(1..1764))
  %% Unique:
  %%    _84
  _206 = put_list `[99,98,97,96,42,17,1764,12,11,10,9,8,7,6,5,4,3,7,2,1]`, _84
  %% Result type:
  %%    nonempty_list(nonempty_list(1..1764))
  %% Unique:
  %%    _206
  ret _206

217:
  %% lc_SUITE.erl:165
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Aliased:
  %%    _112, 
  %%    _156
  %% Unique:
  %%    _111, 
  %%    _155
  _205 = call (`'-deeply_nested_1/0-lc$^20/1-18-'`/37), _159, _87, _88, _91, _92, _95, _96, _99, _100, _103, _104, _107, _108, _111, _112, _115, _116, _119, _120, _123, _124, _127, _128, _131, _132, _135, _136, _139, _140, _143, _144, _147, _148, _151, _152, _155, _156

  %% Unique:
  %%    _205
  _216 = succeeded:body _205
  br _216, ^216, ^1

216:
  %% Result type:
  %%    list(nonempty_list(1..1764))
  %% Unique:
  %%    _205
  ret _205

1:
  _208 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _208
}

%% lc_SUITE.erl:151
%% Counter = 91
%% bs_ensure_opt: true
%% Parameters
%%    _16 =>
%%     list(46..99)
function `lc_SUITE`:`'-alphanum/1-lc$^0/1-0-'`(_16) {
0:
  %% Unique:
  %%    _16
  _73 = is_nonempty_list _16
  br _73, ^73, ^74

73:
  %% Argument types:
  %%    _16 => nonempty_list(46..99)
  %% Unique:
  %%    _16
  _22 = get_hd _16

  %% Argument types:
  %%    _16 => nonempty_list(46..99)
  %% Unique:
  %%    _16
  _21 = get_tl _16

  %% lc_SUITE.erl:151
  %% Argument types:
  %%    _22 => 46..99
  %% Unique:
  %%    _22
  _23 = bif:'>=' _22, `48`
  br _23, ^53, ^48

53:
  %% lc_SUITE.erl:151
  %% Argument types:
  %%    _22 => 48..99
  %% Unique:
  %%    _22
  _31 = bif:'=<' _22, `57`
  br _31, ^70, ^85

85:
  %% lc_SUITE.erl:152
  %% Argument types:
  %%    _22 => 58..99
  %% Unique:
  %%    _22
  _26 = bif:'>=' _22, `97`
  br _26, ^70, ^79

79:
  %% lc_SUITE.erl:153
  %% Argument types:
  %%    _22 => 58..96
  %% Unique:
  %%    _22
  _29 = bif:'>=' _22, `65`
  br _29, ^76, ^48

76:
  %% lc_SUITE.erl:153
  %% Argument types:
  %%    _22 => 65..96
  %% Unique:
  %%    _22
  _37 = bif:'=<' _22, `90`
  br _37, ^70, ^48

70:
  %% lc_SUITE.erl:151
  %% Result type:
  %%    list(46..99)
  %% Unique:
  %%    _21
  _18 = call (`'-alphanum/1-lc$^0/1-0-'`/1), _21

  %% Unique:
  %%    _18
  _71 = succeeded:body _18
  br _71, ^71, ^1

71:
  %% Argument types:
  %%    _22 => 48..99
  %%    _18 => list(46..99)
  %% Unique:
  %%    _18, 
  %%    _22
  _41 = put_list _22, _18
  %% Result type:
  %%    nonempty_list(46..99)
  %% Unique:
  %%    _41
  ret _41

48:
  %% lc_SUITE.erl:151
  %% Result type:
  %%    list(46..99)
  %% Unique:
  %%    _21
  _42 = call (`'-alphanum/1-lc$^0/1-0-'`/1), _21

  %% Unique:
  %%    _42
  _72 = succeeded:body _42
  br _72, ^72, ^1

72:
  %% Result type:
  %%    list(46..99)
  %% Unique:
  %%    _42
  ret _42

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44

74:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:145
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `lc_SUITE`:`'-my_map/2-lc$^0/1-0-'`(_4, _0) {
0:
  %% Aliased:
  %%    _4
  _20 = is_nonempty_list _4
  br _20, ^20, ^17

20:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _11 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _10 = get_tl _4

  %% lc_SUITE.erl:145
  %% Argument types:
  %%    _0 => fun((_))
  %% Aliased:
  %%    _0, 
  %%    _11
  _6 = call _0, _11

  %% Aliased:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% lc_SUITE.erl:145
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _0, 
  %%    _10
  _7 = call (`'-my_map/2-lc$^0/1-0-'`/2), _10, _0

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _7 => list(any())
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _7
  _12 = put_list _6, _7
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _12
  ret _12

17:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _21 = bif:'=:=' _4, `[]`
  br _21, ^21, ^16

21:
  %% Result type:
  %%    nil()
  ret `[]`

16:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _9 = put_tuple `bad_generator`, _4

  %% lc_SUITE.erl:145
  %% Unique:
  %%    _9
  _13 = call (`erlang`:`error`/1), _9

  %% Aliased:
  %%    _13
  _22 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% lc_SUITE.erl:110
%% Counter = 524
%% bs_ensure_opt: true
%% Parameters
%%    _191 =>
%%     nonempty_list(1..2)
function `lc_SUITE`:`'-basic/1-lc$^24/1-23-'`(_191) {
0:
  %% lc_SUITE.erl:110
  %% Result type:
  %%    'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  _375 = call (`id`/1), `not_bool`

  %% Aliased:
  %%    _375
  _511 = succeeded:body _375
  br _511, ^513, ^1

513:
  %% lc_SUITE.erl:110
  %% Aliased:
  %%    _375
  _505 = match_fail `bad_filter`, _375

  %% Unique:
  %%    _505
  _518 = succeeded:body _505
  br ^1

1:
  _507 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _507
}

%% lc_SUITE.erl:109
%% Counter = 511
%% bs_ensure_opt: true
%% Parameters
%%    _184 =>
%%     'd' | 'nomatch' | 'not_bool' | 'x' | maybe_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
function `lc_SUITE`:`'-basic/1-lc$^23/1-22-'`(_184) {
0:
  %% Aliased:
  %%    _184
  _506 = is_nonempty_list _184
  br _506, ^506, ^504

506:
  %% Argument types:
  %%    _184 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _184
  _365 = get_hd _184

  %% Argument types:
  %%    _184 => nonempty_improper_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}, 'd' | nil())
  %% Aliased:
  %%    _184
  _364 = get_tl _184

  %% lc_SUITE.erl:109
  %% Result type:
  %%    list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _364
  _186 = call (`'-basic/1-lc$^23/1-22-'`/1), _364

  %% Unique:
  %%    _186
  _505 = succeeded:body _186
  br _505, ^505, ^1

505:
  %% Argument types:
  %%    _365 => 'a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}}
  %%    _186 => list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Aliased:
  %%    _365
  %% Unique:
  %%    _186
  _499 = put_list _365, _186
  %% Result type:
  %%    nonempty_list('a' | 'b' | 'c' | 'x' | number('-inf', 10) | {number(), number()} | #{bitstring(1)=>42 | {'a', 'b', 'c'}})
  %% Unique:
  %%    _499
  ret _499

504:
  %% Argument types:
  %%    _184 => 'd' | 'nomatch' | 'not_bool' | 'x' | nil()
  %% Aliased:
  %%    _184
  _507 = bif:'=:=' _184, `[]`
  br _507, ^507, ^503

507:
  %% Result type:
  %%    nil()
  ret `[]`

503:
  %% Argument types:
  %%    _184 => 'd' | 'nomatch' | 'not_bool' | 'x'
  %% Unique:
  %%    _184
  _363 = put_tuple `bad_generator`, _184

  %% lc_SUITE.erl:109
  %% Unique:
  %%    _363
  _500 = call (`erlang`:`error`/1), _363

  %% Aliased:
  %%    _500
  _508 = succeeded:body _500
  br ^1

1:
  _501 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _501
}

%% lc_SUITE.erl:108
%% Counter = 514
%% bs_ensure_opt: true
%% Parameters
%%    _175 =>
%%     list({'x', any()})
function `lc_SUITE`:`'-basic/1-lc$^22/1-21-'`(_175) {
0:
  %% Aliased:
  %%    _175
  _509 = is_nonempty_list _175
  br _509, ^509, ^510

509:
  %% Argument types:
  %%    _175 => nonempty_list({'x', any()})
  %% Aliased:
  %%    _175
  _358 = get_hd _175

  %% lc_SUITE.erl:108
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _358
  _359 = call (`odd`/1), _358

  %% Aliased:
  %%    _359
  _501 = succeeded:body _359
  br ^1

1:
  _497 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _497

510:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:107
%% Counter = 506
%% bs_ensure_opt: true
%% Parameters
%%    _168 =>
%%     list({'x', any()})
function `lc_SUITE`:`'-basic/1-lc$^21/1-20-'`(_168) {
0:
  %% Aliased:
  %%    _168
  _502 = is_nonempty_list _168
  br _502, ^502, ^503

502:
  %% Argument types:
  %%    _168 => nonempty_list({'x', any()})
  %% Aliased:
  %%    _168
  _349 = get_tl _168

  %% lc_SUITE.erl:107
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _349
  _490 = call (`'-basic/1-lc$^21/1-20-'`/1), _349

  %% Unique:
  %%    _490
  _501 = succeeded:body _490
  br _501, ^501, ^1

501:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _490
  ret _490

1:
  _492 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _492

503:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:106
%% Counter = 503
%% bs_ensure_opt: true
%% Parameters
%%    _159 =>
%%     list({'x', any()})
function `lc_SUITE`:`'-basic/1-lc$^20/1-19-'`(_159) {
0:
  %% Aliased:
  %%    _159
  _498 = is_nonempty_list _159
  br _498, ^498, ^499

498:
  %% Argument types:
  %%    _159 => nonempty_list({'x', any()})
  %% Aliased:
  %%    _159
  _342 = get_hd _159

  %% lc_SUITE.erl:106
  %% Aliased:
  %%    _342
  _158 = call (`erlang`:`list_to_atom`/1), _342

  %% Aliased:
  %%    _158
  _492 = succeeded:body _158
  br ^1

1:
  _488 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _488

499:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:105
%% Counter = 499
%% bs_ensure_opt: true
%% Parameters
%%    _151 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^19/1-18-'`(_151) {
0:
  %% Aliased:
  %%    _151
  _494 = is_nonempty_list _151
  br _494, ^494, ^495

494:
  %% Argument types:
  %%    _151 => nonempty_list(any())
  %% Aliased:
  %%    _151
  _333 = get_hd _151

  %% Argument types:
  %%    _151 => nonempty_list(any())
  %% Aliased:
  %%    _151
  _332 = get_tl _151

  %% lc_SUITE.erl:105
  %% Argument types:
  %%    
  %% Aliased:
  %%    _333
  _150 = bif:element `2`, _333

  %% Aliased:
  %%    _150
  _490 = succeeded:guard _150
  br _490, ^490, ^488

490:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _150
  _491 = bif:'=:=' _150, `no_no_no`
  br _491, ^491, ^488

491:
  %% lc_SUITE.erl:105
  %% Result type:
  %%    list({'xx', {any(), any(), ...}})
  %% Aliased:
  %%    _332
  _153 = call (`'-basic/1-lc$^19/1-18-'`/1), _332

  %% Unique:
  %%    _153
  _492 = succeeded:body _153
  br _492, ^492, ^1

492:
  %% Argument types:
  %%    _333 => {any(), any(), ...}
  %% Aliased:
  %%    _333
  _337 = put_tuple `xx`, _333

  %% Argument types:
  %%    _337 => {'xx', {any(), any(), ...}}
  %%    _153 => list({'xx', {any(), any(), ...}})
  %% Unique:
  %%    _153, 
  %%    _337
  _481 = put_list _337, _153
  %% Result type:
  %%    nonempty_list({'xx', {any(), any(), ...}})
  %% Unique:
  %%    _481
  ret _481

488:
  %% lc_SUITE.erl:105
  %% Result type:
  %%    list({'xx', {any(), any(), ...}})
  %% Aliased:
  %%    _332
  _482 = call (`'-basic/1-lc$^19/1-18-'`/1), _332

  %% Unique:
  %%    _482
  _493 = succeeded:body _482
  br _493, ^493, ^1

493:
  %% Result type:
  %%    list({'xx', {any(), any(), ...}})
  %% Unique:
  %%    _482
  ret _482

1:
  _484 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _484

495:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:102
%% Counter = 491
%% bs_ensure_opt: true
%% Parameters
%%    _143 =>
%%     nil()
function `lc_SUITE`:`'-basic/1-lc$^18/1-17-'`(_143) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:99
%% Counter = 498
%% bs_ensure_opt: true
%% Parameters
%%    _135 =>
%%     list({'a'})
function `lc_SUITE`:`'-basic/1-lc$^17/1-16-'`(_135) {
0:
  %% Unique:
  %%    _135
  _494 = is_nonempty_list _135
  br _494, ^494, ^495

494:
  %% Argument types:
  %%    _135 => nonempty_list({'a'})
  %% Unique:
  %%    _135
  _321 = get_tl _135

  %% lc_SUITE.erl:99
  %% Result type:
  %%    list({'a', 'a'})
  _137 = call (`'-basic/1-lc$^17/1-16-'`/1), _321

  %% Unique:
  %%    _137
  _486 = succeeded:body _137
  br _486, ^486, ^1

486:
  %% Argument types:
  %%    _137 => list({'a', 'a'})
  %% Unique:
  %%    _137
  _475 = put_list `{a,a}`, _137
  %% Result type:
  %%    nonempty_list({'a', 'a'})
  %% Unique:
  %%    _475
  ret _475

1:
  _479 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _479

495:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:98
%% Counter = 494
%% bs_ensure_opt: true
%% Parameters
%%    _126 =>
%%     nil()
function `lc_SUITE`:`'-basic/1-lc$^16/1-15-'`(_126) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:95
%% Counter = 483
%% bs_ensure_opt: true
%% Parameters
%%    _118 =>
%%     list(nonempty_list(97..98))
function `lc_SUITE`:`'-basic/1-lc$^15/1-14-'`(_118) {
0:
  %% Unique:
  %%    _118
  _479 = is_nonempty_list _118
  br _479, ^479, ^480

479:
  %% Argument types:
  %%    _118 => nonempty_list(nonempty_list(97..98))
  %% Unique:
  %%    _118
  _309 = get_hd _118

  %% Argument types:
  %%    _118 => nonempty_list(nonempty_list(97..98))
  %% Unique:
  %%    _118
  _308 = get_tl _118

  %% Argument types:
  %%    _309 => nonempty_list(97..98)
  %% Unique:
  %%    _309
  _477 = bif:'=:=' _309, `"ab"`
  br _477, ^477, ^475

477:
  %% lc_SUITE.erl:95
  %% Result type:
  %%    list('t')
  _120 = call (`'-basic/1-lc$^15/1-14-'`/1), _308

  %% Unique:
  %%    _120
  _476 = succeeded:body _120
  br _476, ^476, ^1

476:
  %% Argument types:
  %%    _120 => list('t')
  %% Unique:
  %%    _120
  _468 = put_list `t`, _120
  %% Result type:
  %%    nonempty_list('t')
  %% Unique:
  %%    _468
  ret _468

475:
  %% lc_SUITE.erl:95
  %% Result type:
  %%    list('t')
  _469 = call (`'-basic/1-lc$^15/1-14-'`/1), _308

  %% Unique:
  %%    _469
  _478 = succeeded:body _469
  br _478, ^478, ^1

478:
  %% Result type:
  %%    list('t')
  %% Unique:
  %%    _469
  ret _469

1:
  _471 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _471

480:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:94
%% Counter = 478
%% bs_ensure_opt: true
%% Parameters
%%    _111 =>
%%     nil()
function `lc_SUITE`:`'-basic/1-lc$^14/1-13-'`(_111) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:93
%% Counter = 476
%% bs_ensure_opt: true
%% Parameters
%%    _104 =>
%%     nil()
function `lc_SUITE`:`'-basic/1-lc$^13/1-12-'`(_104) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:87
%% Counter = 479
%% bs_ensure_opt: true
%% Parameters
%%    _96 =>
%%     list('glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
function `lc_SUITE`:`'-basic/1-lc$^12/1-11-'`(_96) {
0:
  %% Unique:
  %%    _96
  _474 = is_nonempty_list _96
  br _474, ^474, ^475

474:
  %% Argument types:
  %%    _96 => nonempty_list('glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _96
  _298 = get_hd _96

  %% Argument types:
  %%    _96 => nonempty_list('glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _96
  _297 = get_tl _96

  %% lc_SUITE.erl:87
  %% Argument types:
  %%    _298 => 'glurf' | nonempty_list('a' | 'b' | 'c') | {'a', 'b'} | {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'}
  %% Unique:
  %%    _298
  _94 = bif:element `3`, _298

  %% Unique:
  %%    _94
  _470 = succeeded:guard _94
  br _470, ^470, ^468

470:
  %% Argument types:
  %%    _94 => 'd' | 'false' | 'true'
  %% Unique:
  %%    _94
  _471 = bif:'=:=' _94, `true`
  br _471, ^471, ^468

471:
  %% lc_SUITE.erl:87
  %% Result type:
  %%    list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _297
  _98 = call (`'-basic/1-lc$^12/1-11-'`/1), _297

  %% Unique:
  %%    _98
  _472 = succeeded:body _98
  br _472, ^472, ^1

472:
  %% Argument types:
  %%    _298 => {'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'}
  %%    _98 => list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _98, 
  %%    _298
  _461 = put_list _298, _98
  %% Result type:
  %%    nonempty_list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _461
  ret _461

468:
  %% lc_SUITE.erl:87
  %% Result type:
  %%    list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _297
  _462 = call (`'-basic/1-lc$^12/1-11-'`/1), _297

  %% Unique:
  %%    _462
  _473 = succeeded:body _462
  br _473, ^473, ^1

473:
  %% Result type:
  %%    list({'a', 'b', 'true'} | {'a', 'b', 'd' | 'false', 'ddd' | 'xx'} | {'x', 'y', 'true', 'true'})
  %% Unique:
  %%    _462
  ret _462

1:
  _464 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _464

475:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:83
%% Counter = 482
%% bs_ensure_opt: true
%% Parameters
%%    _83 =>
%%     list(any())
%%    _86 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^11/1-10-'`(_86, _83) {
0:
  %% Aliased:
  %%    _86
  _477 = is_nonempty_list _86
  br _477, ^477, ^478

477:
  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Aliased:
  %%    _86
  _292 = get_hd _86

  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Aliased:
  %%    _86
  _291 = get_tl _86

  %% lc_SUITE.erl:83
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _292
  _293 = call (`odd`/1), _292

  %% Unique:
  %%    _293
  _465 = succeeded:body _293
  br _465, ^465, ^1

465:
  br _293, ^474, ^475

474:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _292
  _471 = bif:'=:=' _292, `7`
  br _471, ^470, ^471

470:
  %% lc_SUITE.erl:83
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _291
  %% Unique:
  %%    _83
  _457 = call (`'-basic/1-lc$^11/1-10-'`/2), _291, _83

  %% Unique:
  %%    _457
  _473 = succeeded:body _457
  br _473, ^473, ^1

473:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _457
  ret _457

471:
  %% lc_SUITE.erl:83
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _291
  %% Unique:
  %%    _83
  _88 = call (`'-basic/1-lc$^11/1-10-'`/2), _291, _83

  %% Unique:
  %%    _88
  _472 = succeeded:body _88
  br _472, ^472, ^1

472:
  %% Argument types:
  %%    _88 => list(any())
  %% Aliased:
  %%    _292
  %% Unique:
  %%    _88
  _456 = put_list _292, _88
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _456
  ret _456

475:
  %% lc_SUITE.erl:83
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _291
  %% Unique:
  %%    _83
  _458 = call (`'-basic/1-lc$^11/1-10-'`/2), _291, _83

  %% Unique:
  %%    _458
  _468 = succeeded:body _458
  br _468, ^468, ^1

468:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _458
  ret _458

1:
  _461 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _461

478:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _83
  ret _83
}

%% lc_SUITE.erl:84
%% Counter = 477
%% bs_ensure_opt: true
%% Parameters
%%    _79 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^10/1-9-'`(_79) {
0:
  %% Aliased:
  %%    _79
  _472 = is_nonempty_list _79
  br _472, ^472, ^473

472:
  %% Argument types:
  %%    _79 => nonempty_list(any())
  %% Aliased:
  %%    _79
  _285 = get_hd _79

  %% Argument types:
  %%    _79 => nonempty_list(any())
  %% Aliased:
  %%    _79
  _284 = get_tl _79

  %% lc_SUITE.erl:84
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _285
  _286 = call (`odd`/1), _285

  %% Unique:
  %%    _286
  _460 = succeeded:body _286
  br _460, ^460, ^1

460:
  br _286, ^470, ^469

470:
  %% lc_SUITE.erl:84
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _284
  _453 = call (`'-basic/1-lc$^10/1-9-'`/1), _284

  %% Unique:
  %%    _453
  _463 = succeeded:body _453
  br _463, ^463, ^1

463:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _453
  ret _453

469:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _285
  _466 = bif:'=:=' _285, `6`
  br _466, ^465, ^466

465:
  %% lc_SUITE.erl:84
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _284
  _452 = call (`'-basic/1-lc$^10/1-9-'`/1), _284

  %% Unique:
  %%    _452
  _468 = succeeded:body _452
  br _468, ^468, ^1

468:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _452
  ret _452

466:
  %% lc_SUITE.erl:84
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _284
  _81 = call (`'-basic/1-lc$^10/1-9-'`/1), _284

  %% Unique:
  %%    _81
  _467 = succeeded:body _81
  br _467, ^467, ^1

467:
  %% Argument types:
  %%    _81 => list(any())
  %% Aliased:
  %%    _285
  %% Unique:
  %%    _81
  _451 = put_list _285, _81
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _451
  ret _451

1:
  _456 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _456

473:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:80
%% Counter = 472
%% bs_ensure_opt: true
%% Parameters
%%    _70 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^9/1-8-'`(_70) {
0:
  %% Aliased:
  %%    _70
  _467 = is_nonempty_list _70
  br _467, ^467, ^468

467:
  %% Argument types:
  %%    _70 => nonempty_list(any())
  %% Aliased:
  %%    _70
  _278 = get_hd _70

  %% Argument types:
  %%    _70 => nonempty_list(any())
  %% Aliased:
  %%    _70
  _277 = get_tl _70

  %% lc_SUITE.erl:80
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _278
  _279 = call (`odd`/1), _278

  %% Unique:
  %%    _279
  _455 = succeeded:body _279
  br _455, ^455, ^1

455:
  br _279, ^465, ^464

465:
  %% lc_SUITE.erl:80
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _277
  _448 = call (`'-basic/1-lc$^9/1-8-'`/1), _277

  %% Unique:
  %%    _448
  _458 = succeeded:body _448
  br _458, ^458, ^1

458:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _448
  ret _448

464:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _278
  _461 = bif:'=:=' _278, `6`
  br _461, ^460, ^461

460:
  %% lc_SUITE.erl:80
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _277
  _447 = call (`'-basic/1-lc$^9/1-8-'`/1), _277

  %% Unique:
  %%    _447
  _463 = succeeded:body _447
  br _463, ^463, ^1

463:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _447
  ret _447

461:
  %% lc_SUITE.erl:80
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _277
  _72 = call (`'-basic/1-lc$^9/1-8-'`/1), _277

  %% Unique:
  %%    _72
  _462 = succeeded:body _72
  br _462, ^462, ^1

462:
  %% Argument types:
  %%    _72 => list(any())
  %% Aliased:
  %%    _278
  %% Unique:
  %%    _72
  _446 = put_list _278, _72
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _446
  ret _446

1:
  _451 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _451

468:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:79
%% Counter = 467
%% bs_ensure_opt: true
%% Parameters
%%    _61 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^8/1-7-'`(_61) {
0:
  %% Aliased:
  %%    _61
  _462 = is_nonempty_list _61
  br _462, ^462, ^463

462:
  %% Argument types:
  %%    _61 => nonempty_list(any())
  %% Aliased:
  %%    _61
  _272 = get_hd _61

  %% Argument types:
  %%    _61 => nonempty_list(any())
  %% Aliased:
  %%    _61
  _271 = get_tl _61

  %% lc_SUITE.erl:79
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _272
  _273 = call (`odd`/1), _272

  %% Unique:
  %%    _273
  _450 = succeeded:body _273
  br _450, ^450, ^1

450:
  br _273, ^459, ^460

459:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _272
  _456 = bif:'=:=' _272, `7`
  br _456, ^455, ^456

455:
  %% lc_SUITE.erl:79
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _271
  _442 = call (`'-basic/1-lc$^8/1-7-'`/1), _271

  %% Unique:
  %%    _442
  _458 = succeeded:body _442
  br _458, ^458, ^1

458:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _442
  ret _442

456:
  %% lc_SUITE.erl:79
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _271
  _63 = call (`'-basic/1-lc$^8/1-7-'`/1), _271

  %% Unique:
  %%    _63
  _457 = succeeded:body _63
  br _457, ^457, ^1

457:
  %% Argument types:
  %%    _63 => list(any())
  %% Aliased:
  %%    _272
  %% Unique:
  %%    _63
  _441 = put_list _272, _63
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _441
  ret _441

460:
  %% lc_SUITE.erl:79
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _271
  _443 = call (`'-basic/1-lc$^8/1-7-'`/1), _271

  %% Unique:
  %%    _443
  _453 = succeeded:body _443
  br _453, ^453, ^1

453:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _443
  ret _443

1:
  _446 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _446

463:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:78
%% Counter = 458
%% bs_ensure_opt: true
%% Parameters
%%    _53 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^7/1-6-'`(_53) {
0:
  %% Aliased:
  %%    _53
  _453 = is_nonempty_list _53
  br _453, ^453, ^454

453:
  %% Argument types:
  %%    _53 => nonempty_list(any())
  %% Aliased:
  %%    _53
  _266 = get_hd _53

  %% Argument types:
  %%    _53 => nonempty_list(any())
  %% Aliased:
  %%    _53
  _265 = get_tl _53

  %% lc_SUITE.erl:78
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _266
  _267 = call (`odd`/1), _266

  %% Unique:
  %%    _267
  _445 = succeeded:body _267
  br _445, ^445, ^1

445:
  br _267, ^451, ^450

451:
  %% lc_SUITE.erl:78
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _265
  _438 = call (`'-basic/1-lc$^7/1-6-'`/1), _265

  %% Unique:
  %%    _438
  _448 = succeeded:body _438
  br _448, ^448, ^1

448:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _438
  ret _438

450:
  %% lc_SUITE.erl:78
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _265
  _55 = call (`'-basic/1-lc$^7/1-6-'`/1), _265

  %% Unique:
  %%    _55
  _449 = succeeded:body _55
  br _449, ^449, ^1

449:
  %% Argument types:
  %%    _55 => list(any())
  %% Aliased:
  %%    _266
  %% Unique:
  %%    _55
  _437 = put_list _266, _55
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _437
  ret _437

1:
  _441 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _441

454:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:77
%% Counter = 454
%% bs_ensure_opt: true
%% Parameters
%%    _44 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^6/1-5-'`(_44) {
0:
  %% Aliased:
  %%    _44
  _449 = is_nonempty_list _44
  br _449, ^449, ^450

449:
  %% Argument types:
  %%    _44 => nonempty_list(any())
  %% Aliased:
  %%    _44
  _260 = get_hd _44

  %% Argument types:
  %%    _44 => nonempty_list(any())
  %% Aliased:
  %%    _44
  _259 = get_tl _44

  %% lc_SUITE.erl:77
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _260
  _261 = call (`odd`/1), _260

  %% Unique:
  %%    _261
  _441 = succeeded:body _261
  br _441, ^441, ^1

441:
  br _261, ^446, ^447

446:
  %% lc_SUITE.erl:77
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _259
  _46 = call (`'-basic/1-lc$^6/1-5-'`/1), _259

  %% Unique:
  %%    _46
  _445 = succeeded:body _46
  br _445, ^445, ^1

445:
  %% Argument types:
  %%    _46 => list(any())
  %% Aliased:
  %%    _260
  %% Unique:
  %%    _46
  _433 = put_list _260, _46
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _433
  ret _433

447:
  %% lc_SUITE.erl:77
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _259
  _434 = call (`'-basic/1-lc$^6/1-5-'`/1), _259

  %% Unique:
  %%    _434
  _444 = succeeded:body _434
  br _444, ^444, ^1

444:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _434
  ret _434

1:
  _437 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _437

450:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:76
%% Counter = 450
%% bs_ensure_opt: true
%% Parameters
%%    _37 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^5/1-4-'`(_37) {
0:
  %% Aliased:
  %%    _37
  _442 = is_nonempty_list _37
  br _442, ^442, ^443

442:
  %% Argument types:
  %%    _37 => nonempty_list(any())
  %% Aliased:
  %%    _37
  _253 = get_tl _37

  %% lc_SUITE.erl:76
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _253
  _431 = call (`'-basic/1-lc$^5/1-4-'`/1), _253

  %% Unique:
  %%    _431
  _441 = succeeded:body _431
  br _441, ^441, ^1

441:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _431
  ret _431

1:
  _433 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _433

443:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:75
%% Counter = 447
%% bs_ensure_opt: true
%% Parameters
%%    _28 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^4/1-3-'`(_28) {
0:
  %% Aliased:
  %%    _28
  _439 = is_nonempty_list _28
  br _439, ^439, ^440

439:
  %% Argument types:
  %%    _28 => nonempty_list(any())
  %% Aliased:
  %%    _28
  _248 = get_hd _28

  %% Argument types:
  %%    _28 => nonempty_list(any())
  %% Aliased:
  %%    _28
  _247 = get_tl _28

  %% lc_SUITE.erl:75
  %% Argument types:
  %%    
  %% Aliased:
  %%    _248
  _26 = bif:'>' _248, `3`
  br _26, ^444, ^434

444:
  %% lc_SUITE.erl:75
  %% Argument types:
  %%    _248 => atom() | maybe_improper_list(any(), any()) | number(3, '+inf') | {...} | other()
  %% Aliased:
  %%    _248
  _27 = bif:'<' _248, `7`
  br _27, ^436, ^434

436:
  %% lc_SUITE.erl:75
  %% Result type:
  %%    list(number(3, 7))
  %% Aliased:
  %%    _247
  _30 = call (`'-basic/1-lc$^4/1-3-'`/1), _247

  %% Unique:
  %%    _30
  _437 = succeeded:body _30
  br _437, ^437, ^1

437:
  %% Argument types:
  %%    _248 => number(3, 7)
  %%    _30 => list(number(3, 7))
  %% Unique:
  %%    _30, 
  %%    _248
  _427 = put_list _248, _30
  %% Result type:
  %%    nonempty_list(number(3, 7))
  %% Unique:
  %%    _427
  ret _427

434:
  %% lc_SUITE.erl:75
  %% Result type:
  %%    list(number(3, 7))
  %% Aliased:
  %%    _247
  _428 = call (`'-basic/1-lc$^4/1-3-'`/1), _247

  %% Unique:
  %%    _428
  _438 = succeeded:body _428
  br _438, ^438, ^1

438:
  %% Result type:
  %%    list(number(3, 7))
  %% Unique:
  %%    _428
  ret _428

1:
  _430 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _430

440:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:74
%% Counter = 439
%% bs_ensure_opt: true
%% Parameters
%%    _19 =>
%%     list(any())
function `lc_SUITE`:`'-basic/1-lc$^3/1-2-'`(_19) {
0:
  %% Aliased:
  %%    _19
  _435 = is_nonempty_list _19
  br _435, ^435, ^436

435:
  %% Argument types:
  %%    _19 => nonempty_list(any())
  %% Aliased:
  %%    _19
  _243 = get_hd _19

  %% Argument types:
  %%    _19 => nonempty_list(any())
  %% Aliased:
  %%    _19
  _242 = get_tl _19

  %% Argument types:
  %%    
  %% Aliased:
  %%    _243
  _432 = bif:'<' _243, `6`
  br _432, ^432, ^431

432:
  %% lc_SUITE.erl:74
  %% Result type:
  %%    list(number('-inf', 6))
  %% Aliased:
  %%    _242
  _21 = call (`'-basic/1-lc$^3/1-2-'`/1), _242

  %% Unique:
  %%    _21
  _433 = succeeded:body _21
  br _433, ^433, ^1

433:
  %% Argument types:
  %%    _243 => number('-inf', 6)
  %%    _21 => list(number('-inf', 6))
  %% Unique:
  %%    _21, 
  %%    _243
  _424 = put_list _243, _21
  %% Result type:
  %%    nonempty_list(number('-inf', 6))
  %% Unique:
  %%    _424
  ret _424

431:
  %% lc_SUITE.erl:74
  %% Result type:
  %%    list(number('-inf', 6))
  %% Aliased:
  %%    _242
  _425 = call (`'-basic/1-lc$^3/1-2-'`/1), _242

  %% Unique:
  %%    _425
  _434 = succeeded:body _425
  br _434, ^434, ^1

434:
  %% Result type:
  %%    list(number('-inf', 6))
  %% Unique:
  %%    _425
  ret _425

1:
  _427 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _427

436:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% lc_SUITE.erl:73
%% Counter = 434
%% bs_ensure_opt: true
function `lc_SUITE`:`'-basic/1-fun-2-'`(_13) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _430 = is_tagged_tuple _13, `2`, `x`
  br _430, ^427, ^426

427:
  %% Argument types:
  %%    _13 => {'x', any()}
  %% Aliased:
  %%    _13
  _236 = get_tuple_element _13, `1`
  %% Aliased:
  %%    _236
  ret _236

426:
  %% lc_SUITE.erl:73
  %% Aliased:
  %%    _13
  %% Anno: #{inlined => {'-basic/1-inlined-1-',1}}
  _423 = match_fail `function_clause`, _13

  %% Unique:
  %%    _423
  _433 = succeeded:body _423
  br ^1

1:
  _424 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _424
}

%% lc_SUITE.erl:72
%% Counter = 433
%% bs_ensure_opt: true
function `lc_SUITE`:`'-basic/1-lc$^1/1-0-'`(_8) {
0:
  %% Aliased:
  %%    _8
  _428 = is_nonempty_list _8
  br _428, ^428, ^426

428:
  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _233 = get_hd _8

  %% Argument types:
  %%    _8 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _8
  _232 = get_tl _8

  %% lc_SUITE.erl:72
  %% Result type:
  %%    list({'x', any()})
  %% Aliased:
  %%    _232
  _10 = call (`'-basic/1-lc$^1/1-0-'`/1), _232

  %% Unique:
  %%    _10
  _427 = succeeded:body _10
  br _427, ^427, ^1

427:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _233
  _234 = put_tuple `x`, _233

  %% Argument types:
  %%    _234 => {'x', any()}
  %%    _10 => list({'x', any()})
  %% Unique:
  %%    _10, 
  %%    _234
  _421 = put_list _234, _10
  %% Result type:
  %%    nonempty_list({'x', any()})
  %% Unique:
  %%    _421
  ret _421

426:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _429 = bif:'=:=' _8, `[]`
  br _429, ^429, ^425

429:
  %% Result type:
  %%    nil()
  ret `[]`

425:
  %% Argument types:
  %%    _8 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _8
  _231 = put_tuple `bad_generator`, _8

  %% lc_SUITE.erl:72
  %% Unique:
  %%    _231
  _422 = call (`erlang`:`error`/1), _231

  %% Aliased:
  %%    _422
  _430 = succeeded:body _422
  br ^1

1:
  _423 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _423
}

%% lc_SUITE.erl:71
%% Counter = 423
%% bs_ensure_opt: true
function `lc_SUITE`:`'-basic/1-fun-0-'`(_2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _420 = put_tuple `x`, _2
  %% Result type:
  %%    {'x', any()}
  %% Unique:
  %%    _420
  ret _420
}
