module beam_type_SUITE.
exports [{all,0},
         {arity_checks,1},
         {bad_binary_unit,1},
         {binary_float,1},
         {binary_unit,1},
         {booleans,1},
         {connected_tuple_elements,1},
         {cons,1},
         {container_subtraction,1},
         {cover_convert_ext,1},
         {cover_lists_functions,1},
         {cover_maps_functions,1},
         {coverage,1},
         {elixir_binaries,1},
         {end_per_group,2},
         {end_per_suite,1},
         {failures,1},
         {find_best,1},
         {float_compare,1},
         {float_confusion,1},
         {float_overflow,1},
         {funs,1},
         {groups,0},
         {id,1},
         {infer_relops,1},
         {init_per_group,2},
         {init_per_suite,1},
         {integers,1},
         {is_list_opt,1},
         {list_append,1},
         {min_max_mixed_types,1},
         {module_info,0},
         {module_info,1},
         {none_argument,1},
         {not_equal,1},
         {numbers,1},
         {premature_concretization,1},
         {record_float,1},
         {setelement,1},
         {success_type_oscillation,1},
         {suite,0},
         {switch_fail_inference,1},
         {test_size,1},
         {tuple,1},
         {type_subtraction,1},
         {will_succeed,1}].
attributes [].

%% beam_type_SUITE.erl:40
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_type_SUITE.erl:42
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_type_SUITE.erl:45
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [integers,numbers,coverage,booleans,setelement,cons,tuple,record_float,
      binary_float,float_compare,float_overflow,arity_checks,elixir_binaries,
      find_best,test_size,cover_lists_functions,list_append,bad_binary_unit,
      none_argument,success_type_oscillation,type_subtraction,
      container_subtraction,is_list_opt,connected_tuple_elements,
      switch_fail_inference,failures,cover_maps_functions,min_max_mixed_types,
      not_equal,infer_relops,binary_unit,premature_concretization,funs,
      will_succeed,float_confusion,cover_convert_ext]}]`
}

%% beam_type_SUITE.erl:85
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_type_SUITE.erl:86
  _2 = call (`test_lib`:`recompile`/1), `beam_type_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:89
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:92
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_type_SUITE.erl:95
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_type_SUITE.erl:98
%% Counter = 714
%% bs_ensure_opt: true
function `beam_type_SUITE`:`integers`(_0) {
0:
  %% beam_type_SUITE.erl:99
  %% Result type:
  %%    'a' | 'b'
  _56 = call (`do_integers_1`/1), `24`

  %% Unique:
  %%    _56
  _165 = succeeded:body _56
  br _165, ^165, ^1

165:
  %% Argument types:
  %%    _56 => 'a' | 'b'
  %% Unique:
  %%    _56
  _525 = bif:'=:=' _56, `a`
  br _525, ^524, ^167

524:
  %% beam_type_SUITE.erl:100
  %% Result type:
  %%    'a' | 'b'
  _57 = call (`do_integers_1`/1), `25`

  %% Unique:
  %%    _57
  _168 = succeeded:body _57
  br _168, ^168, ^1

168:
  %% Argument types:
  %%    _57 => 'a' | 'b'
  %% Unique:
  %%    _57
  _522 = bif:'=:=' _57, `b`
  br _522, ^521, ^170

521:
  %% beam_type_SUITE.erl:102
  %% Result type:
  %%    'a'
  _58 = call (`do_integers_2`/1), `<<0:1>>`

  %% Unique:
  %%    _58
  _171 = succeeded:body _58
  br _171, ^692, ^1

692:
  br ^703

703:
  _177 = new_try_tag `'catch'`
  br _177, ^175, ^176

175:
  %% beam_type_SUITE.erl:103
  %% Result type:
  %%    'a'
  _116 = call (`do_integers_2`/1), `<<1:1>>`

  %% Unique:
  %%    _116
  _179 = succeeded:body _116
  br _179, ^179, ^176

179:
  br ^174

176:
  %% Unique:
  %%    _177
  _182 = landingpad `'catch'`, _177

  %% Aliased:
  %%    _182
  _180 = extract _182, `0`
  br ^174

174:
  _183 = phi { _180, ^176 }, { `a`, ^179 }

  %% Aliased:
  %%    _183
  %% Unique:
  %%    _177
  _4 = catch_end _177, _183

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _514 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _514, ^511, ^185

511:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _59 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _508 = bif:is_tuple _59
  br _508, ^508, ^185

508:
  %% Argument types:
  %%    _59 => {...}
  %% Aliased:
  %%    _59
  _509 = bif:tuple_size _59

  %% Argument types:
  %%    _509 => 0..16777215
  %% Unique:
  %%    _509
  _510 = bif:'=:=' _509, `2`
  br _510, ^507, ^185

507:
  %% Argument types:
  %%    _59 => {any(), any()}
  %% Aliased:
  %%    _59
  _62 = get_tuple_element _59, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _506 = bif:'=:=' _62, `{case_clause,-1}`
  br _506, ^506, ^185

506:
  %% beam_type_SUITE.erl:105
  %% Result type:
  %%    'college'
  _63 = call (`do_integers_3`/0)

  %% Unique:
  %%    _63
  _186 = succeeded:body _63
  br _186, ^503, ^1

503:
  %% beam_type_SUITE.erl:107
  %% Result type:
  %%    'one' | 'other' | 'zero'
  _64 = call (`do_integers_4`/2), `<<0:1>>`, `0`

  %% Unique:
  %%    _64
  _189 = succeeded:body _64
  br _189, ^189, ^1

189:
  %% Argument types:
  %%    _64 => 'one' | 'other' | 'zero'
  %% Unique:
  %%    _64
  _501 = bif:'=:=' _64, `zero`
  br _501, ^500, ^191

500:
  %% beam_type_SUITE.erl:108
  %% Result type:
  %%    'one' | 'other' | 'zero'
  _65 = call (`do_integers_4`/2), `<<1:1>>`, `0`

  %% Unique:
  %%    _65
  _192 = succeeded:body _65
  br _192, ^192, ^1

192:
  %% Argument types:
  %%    _65 => 'one' | 'other' | 'zero'
  %% Unique:
  %%    _65
  _498 = bif:'=:=' _65, `one`
  br _498, ^497, ^194

497:
  %% beam_type_SUITE.erl:109
  %% Result type:
  %%    'one' | 'other' | 'zero'
  _66 = call (`do_integers_4`/2), `<<1:1>>`, `2`

  %% Unique:
  %%    _66
  _195 = succeeded:body _66
  br _195, ^195, ^1

195:
  %% Argument types:
  %%    _66 => 'one' | 'other' | 'zero'
  %% Unique:
  %%    _66
  _495 = bif:'=:=' _66, `other`
  br _495, ^494, ^197

494:
  %% beam_type_SUITE.erl:111
  %% Result type:
  %%    'zero'
  _67 = call (`do_integers_5`/2), `0`, `0`

  %% Unique:
  %%    _67
  _198 = succeeded:body _67
  br _198, ^491, ^1

491:
  %% beam_type_SUITE.erl:112
  %% Result type:
  %%    'one'
  _68 = call (`do_integers_5`/2), `0`, `1`

  %% Unique:
  %%    _68
  _201 = succeeded:body _68
  br _201, ^488, ^1

488:
  %% beam_type_SUITE.erl:113
  %% Result type:
  %%    'two'
  _69 = call (`do_integers_5`/2), `0`, `2`

  %% Unique:
  %%    _69
  _204 = succeeded:body _69
  br _204, ^485, ^1

485:
  %% beam_type_SUITE.erl:114
  %% Result type:
  %%    'three'
  _70 = call (`do_integers_5`/2), `0`, `3`

  %% Unique:
  %%    _70
  _207 = succeeded:body _70
  br _207, ^693, ^1

693:
  br ^704

704:
  _213 = new_try_tag `'catch'`
  br _213, ^211, ^212

211:
  %% beam_type_SUITE.erl:116
  %% Result type:
  %%    none()
  _118 = call (`do_integers_6`/0)

  %% Aliased:
  %%    _118
  _215 = succeeded:body _118
  br ^212

212:
  %% Unique:
  %%    _213
  _218 = landingpad `'catch'`, _213

  %% Aliased:
  %%    _218
  _216 = extract _218, `0`
  br ^210

210:
  %% Aliased:
  %%    _216
  %% Unique:
  %%    _213
  _14 = catch_end _213, _216

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _478 = is_tagged_tuple _14, `2`, `'EXIT'`
  br _478, ^475, ^221

475:
  %% Argument types:
  %%    _14 => {''EXIT'', any()}
  %% Aliased:
  %%    _14
  _71 = get_tuple_element _14, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _472 = is_tagged_tuple _71, `2`, `badarith`
  br _472, ^469, ^221

469:
  %% beam_type_SUITE.erl:118
  %% Result type:
  %%    'house'
  _75 = call (`do_integers_7`/0)

  %% Unique:
  %%    _75
  _222 = succeeded:body _75
  br _222, ^694, ^1

694:
  br ^705

705:
  _228 = new_try_tag `'catch'`
  br _228, ^226, ^227

226:
  %% beam_type_SUITE.erl:120
  %% Result type:
  %%    0
  _120 = call (`do_integers_8`/0)

  %% Unique:
  %%    _120
  _230 = succeeded:body _120
  br _230, ^230, ^227

230:
  br ^225

227:
  %% Unique:
  %%    _228
  _233 = landingpad `'catch'`, _228

  %% Aliased:
  %%    _233
  _231 = extract _233, `0`
  br ^225

225:
  _234 = phi { _231, ^227 }, { `0`, ^230 }

  %% Aliased:
  %%    _234
  %% Unique:
  %%    _228
  _17 = catch_end _228, _234

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _462 = is_tagged_tuple _17, `2`, `'EXIT'`
  br _462, ^459, ^236

459:
  %% Argument types:
  %%    _17 => {''EXIT'', any()}
  %% Aliased:
  %%    _17
  _76 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _76
  _456 = is_tagged_tuple _76, `2`, `badarith`
  br _456, ^453, ^236

453:
  %% beam_type_SUITE.erl:122
  _20 = call (`id`/1), `7`

  %% Aliased:
  %%    _20
  _237 = succeeded:body _20
  br _237, ^237, ^1

237:
  %% beam_type_SUITE.erl:122
  _19 = call (`id`/1), `1`

  %% Aliased:
  %%    _19
  _238 = succeeded:body _19
  br _238, ^238, ^1

238:
  %% beam_type_SUITE.erl:122
  %% Result type:
  %%    number()
  %% Aliased:
  %%    _19, 
  %%    _20
  _80 = call (`do_integers_9`/2), _20, _19

  %% Unique:
  %%    _80
  _239 = succeeded:body _80
  br _239, ^239, ^1

239:
  %% Argument types:
  %%    _80 => number()
  %% Unique:
  %%    _80
  _451 = bif:'=:=' _80, `-693`
  br _451, ^450, ^241

450:
  %% beam_type_SUITE.erl:124
  %% Result type:
  %%    integer()
  _81 = call (`do_integers_10`/2), `1`, `2`

  %% Unique:
  %%    _81
  _242 = succeeded:body _81
  br _242, ^242, ^1

242:
  %% Argument types:
  %%    _81 => integer()
  %% Unique:
  %%    _81
  _448 = bif:'=:=' _81, `3`
  br _448, ^447, ^244

447:
  %% beam_type_SUITE.erl:125
  %% Result type:
  %%    integer()
  _82 = call (`do_integers_10`/2), `-2`, `-5`

  %% Unique:
  %%    _82
  _245 = succeeded:body _82
  br _245, ^245, ^1

245:
  %% Argument types:
  %%    _82 => integer()
  %% Unique:
  %%    _82
  _445 = bif:'=:=' _82, `10`
  br _445, ^695, ^247

695:
  br ^706

706:
  _251 = new_try_tag `'catch'`
  br _251, ^249, ^250

249:
  %% beam_type_SUITE.erl:127
  %% Result type:
  %%    none()
  _122 = call (`do_integers_11`/1), `42`

  %% Aliased:
  %%    _122
  _253 = succeeded:body _122
  br ^250

250:
  %% Unique:
  %%    _251
  _256 = landingpad `'catch'`, _251

  %% Aliased:
  %%    _256
  _254 = extract _256, `0`
  br ^248

248:
  %% Aliased:
  %%    _254
  %% Unique:
  %%    _251
  _26 = catch_end _251, _254

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _440 = is_tagged_tuple _26, `2`, `'EXIT'`
  br _440, ^437, ^259

437:
  %% Argument types:
  %%    _26 => {''EXIT'', any()}
  %% Aliased:
  %%    _26
  _83 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _434 = is_tagged_tuple _83, `2`, `badarith`
  br _434, ^696, ^259

696:
  br ^707

707:
  _263 = new_try_tag `'catch'`
  br _263, ^261, ^262

261:
  %% beam_type_SUITE.erl:128
  %% Result type:
  %%    none()
  _124 = call (`do_integers_11`/1), `{a,b}`

  %% Aliased:
  %%    _124
  _265 = succeeded:body _124
  br ^262

262:
  %% Unique:
  %%    _263
  _268 = landingpad `'catch'`, _263

  %% Aliased:
  %%    _268
  _266 = extract _268, `0`
  br ^260

260:
  %% Aliased:
  %%    _266
  %% Unique:
  %%    _263
  _28 = catch_end _263, _266

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _427 = is_tagged_tuple _28, `2`, `'EXIT'`
  br _427, ^424, ^271

424:
  %% Argument types:
  %%    _28 => {''EXIT'', any()}
  %% Aliased:
  %%    _28
  _87 = get_tuple_element _28, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _421 = is_tagged_tuple _87, `2`, `badarith`
  br _421, ^697, ^271

697:
  br ^708

708:
  _275 = new_try_tag `'catch'`
  br _275, ^273, ^274

273:
  %% beam_type_SUITE.erl:130
  %% Result type:
  %%    42..'+inf'
  _126 = call (`do_integers_12`/1), `42`

  %% Unique:
  %%    _126
  _277 = succeeded:body _126
  br _277, ^277, ^274

277:
  br ^272

274:
  %% Unique:
  %%    _275
  _280 = landingpad `'catch'`, _275

  %% Aliased:
  %%    _280
  _278 = extract _280, `0`
  br ^272

272:
  _281 = phi { _278, ^274 }, { _126, ^277 }

  %% Aliased:
  %%    _281
  %% Unique:
  %%    _275
  _30 = catch_end _275, _281

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _414 = is_tagged_tuple _30, `2`, `'EXIT'`
  br _414, ^411, ^283

411:
  %% Argument types:
  %%    _30 => {''EXIT'', any()}
  %% Aliased:
  %%    _30
  _91 = get_tuple_element _30, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _408 = is_tagged_tuple _91, `2`, `system_limit`
  br _408, ^698, ^283

698:
  br ^709

709:
  _287 = new_try_tag `'catch'`
  br _287, ^285, ^286

285:
  %% beam_type_SUITE.erl:131
  %% Result type:
  %%    none()
  _128 = call (`do_integers_12`/1), `[]`

  %% Aliased:
  %%    _128
  _289 = succeeded:body _128
  br ^286

286:
  %% Unique:
  %%    _287
  _292 = landingpad `'catch'`, _287

  %% Aliased:
  %%    _292
  _290 = extract _292, `0`
  br ^284

284:
  %% Aliased:
  %%    _290
  %% Unique:
  %%    _287
  _32 = catch_end _287, _290

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _401 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _401, ^398, ^295

398:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _95 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _395 = is_tagged_tuple _95, `2`, `system_limit`
  br _395, ^699, ^295

699:
  br ^710

710:
  _299 = new_try_tag `'catch'`
  br _299, ^297, ^298

297:
  %% beam_type_SUITE.erl:133
  %% Result type:
  %%    none()
  _130 = call (`do_integers_13`/1), `-43`

  %% Aliased:
  %%    _130
  _301 = succeeded:body _130
  br ^298

298:
  %% Unique:
  %%    _299
  _304 = landingpad `'catch'`, _299

  %% Aliased:
  %%    _304
  _302 = extract _304, `0`
  br ^296

296:
  %% Aliased:
  %%    _302
  %% Unique:
  %%    _299
  _35 = catch_end _299, _302

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _388 = is_tagged_tuple _35, `2`, `'EXIT'`
  br _388, ^385, ^307

385:
  %% Argument types:
  %%    _35 => {''EXIT'', any()}
  %% Aliased:
  %%    _35
  _99 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _99
  _382 = bif:is_tuple _99
  br _382, ^382, ^307

382:
  %% Argument types:
  %%    _99 => {...}
  %% Aliased:
  %%    _99
  _383 = bif:tuple_size _99

  %% Argument types:
  %%    _383 => 0..16777215
  %% Unique:
  %%    _383
  _384 = bif:'=:=' _383, `2`
  br _384, ^381, ^307

381:
  %% Argument types:
  %%    _99 => {any(), any()}
  %% Aliased:
  %%    _99
  _102 = get_tuple_element _99, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _380 = bif:'=:=' _102, `{badmatch,42}`
  br _380, ^700, ^307

700:
  br ^711

711:
  _311 = new_try_tag `'catch'`
  br _311, ^309, ^310

309:
  %% beam_type_SUITE.erl:134
  %% Result type:
  %%    none()
  _132 = call (`do_integers_13`/1), `-1`

  %% Aliased:
  %%    _132
  _313 = succeeded:body _132
  br ^310

310:
  %% Unique:
  %%    _311
  _316 = landingpad `'catch'`, _311

  %% Aliased:
  %%    _316
  _314 = extract _316, `0`
  br ^308

308:
  %% Aliased:
  %%    _314
  %% Unique:
  %%    _311
  _38 = catch_end _311, _314

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _376 = is_tagged_tuple _38, `2`, `'EXIT'`
  br _376, ^373, ^319

373:
  %% Argument types:
  %%    _38 => {''EXIT'', any()}
  %% Aliased:
  %%    _38
  _103 = get_tuple_element _38, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _370 = bif:is_tuple _103
  br _370, ^370, ^319

370:
  %% Argument types:
  %%    _103 => {...}
  %% Aliased:
  %%    _103
  _371 = bif:tuple_size _103

  %% Argument types:
  %%    _371 => 0..16777215
  %% Unique:
  %%    _371
  _372 = bif:'=:=' _371, `2`
  br _372, ^369, ^319

369:
  %% Argument types:
  %%    _103 => {any(), any()}
  %% Aliased:
  %%    _103
  _106 = get_tuple_element _103, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _368 = bif:'=:=' _106, `{badmatch,0}`
  br _368, ^701, ^319

701:
  br ^712

712:
  _323 = new_try_tag `'catch'`
  br _323, ^321, ^322

321:
  %% beam_type_SUITE.erl:135
  %% Result type:
  %%    none()
  _134 = call (`do_integers_13`/1), `0`

  %% Aliased:
  %%    _134
  _325 = succeeded:body _134
  br ^322

322:
  %% Unique:
  %%    _323
  _328 = landingpad `'catch'`, _323

  %% Aliased:
  %%    _328
  _326 = extract _328, `0`
  br ^320

320:
  %% Aliased:
  %%    _326
  %% Unique:
  %%    _323
  _40 = catch_end _323, _326

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _364 = is_tagged_tuple _40, `2`, `'EXIT'`
  br _364, ^361, ^331

361:
  %% Argument types:
  %%    _40 => {''EXIT'', any()}
  %% Aliased:
  %%    _40
  _107 = get_tuple_element _40, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _107
  _358 = bif:is_tuple _107
  br _358, ^358, ^331

358:
  %% Argument types:
  %%    _107 => {...}
  %% Aliased:
  %%    _107
  _359 = bif:tuple_size _107

  %% Argument types:
  %%    _359 => 0..16777215
  %% Unique:
  %%    _359
  _360 = bif:'=:=' _359, `2`
  br _360, ^357, ^331

357:
  %% Argument types:
  %%    _107 => {any(), any()}
  %% Aliased:
  %%    _107
  _110 = get_tuple_element _107, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _110
  _356 = bif:'=:=' _110, `{badmatch,-1}`
  br _356, ^702, ^331

702:
  br ^713

713:
  _335 = new_try_tag `'catch'`
  br _335, ^333, ^334

333:
  %% beam_type_SUITE.erl:136
  %% Result type:
  %%    none()
  _136 = call (`do_integers_13`/1), `17`

  %% Aliased:
  %%    _136
  _337 = succeeded:body _136
  br ^334

334:
  %% Unique:
  %%    _335
  _340 = landingpad `'catch'`, _335

  %% Aliased:
  %%    _340
  _338 = extract _340, `0`
  br ^332

332:
  %% Aliased:
  %%    _338
  %% Unique:
  %%    _335
  _42 = catch_end _335, _338

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _352 = is_tagged_tuple _42, `2`, `'EXIT'`
  br _352, ^349, ^343

349:
  %% Argument types:
  %%    _42 => {''EXIT'', any()}
  %% Aliased:
  %%    _42
  _111 = get_tuple_element _42, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _346 = bif:is_tuple _111
  br _346, ^346, ^343

346:
  %% Argument types:
  %%    _111 => {...}
  %% Aliased:
  %%    _111
  _347 = bif:tuple_size _111

  %% Argument types:
  %%    _347 => 0..16777215
  %% Unique:
  %%    _347
  _348 = bif:'=:=' _347, `2`
  br _348, ^345, ^343

345:
  %% Argument types:
  %%    _111 => {any(), any()}
  %% Aliased:
  %%    _111
  _114 = get_tuple_element _111, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _114
  _344 = bif:'=:=' _114, `{badmatch,-18}`
  br _344, ^344, ^343

344:
  %% Result type:
  %%    'ok'
  ret `ok`

343:
  %% beam_type_SUITE.erl:136
  %% Aliased:
  %%    _42
  _137 = match_fail `badmatch`, _42

  %% Unique:
  %%    _137
  _355 = succeeded:body _137
  br ^1

331:
  %% beam_type_SUITE.erl:135
  %% Aliased:
  %%    _40
  _138 = match_fail `badmatch`, _40

  %% Unique:
  %%    _138
  _367 = succeeded:body _138
  br ^1

319:
  %% beam_type_SUITE.erl:134
  %% Aliased:
  %%    _38
  _139 = match_fail `badmatch`, _38

  %% Unique:
  %%    _139
  _379 = succeeded:body _139
  br ^1

307:
  %% beam_type_SUITE.erl:133
  %% Aliased:
  %%    _35
  _140 = match_fail `badmatch`, _35

  %% Unique:
  %%    _140
  _391 = succeeded:body _140
  br ^1

295:
  %% beam_type_SUITE.erl:131
  %% Aliased:
  %%    _32
  _141 = match_fail `badmatch`, _32

  %% Unique:
  %%    _141
  _404 = succeeded:body _141
  br ^1

283:
  %% beam_type_SUITE.erl:130
  %% Aliased:
  %%    _30
  _142 = match_fail `badmatch`, _30

  %% Unique:
  %%    _142
  _417 = succeeded:body _142
  br ^1

271:
  %% beam_type_SUITE.erl:128
  %% Aliased:
  %%    _28
  _143 = match_fail `badmatch`, _28

  %% Unique:
  %%    _143
  _430 = succeeded:body _143
  br ^1

259:
  %% beam_type_SUITE.erl:127
  %% Aliased:
  %%    _26
  _144 = match_fail `badmatch`, _26

  %% Unique:
  %%    _144
  _443 = succeeded:body _144
  br ^1

247:
  %% beam_type_SUITE.erl:125
  %% Unique:
  %%    _82
  _145 = match_fail `badmatch`, _82

  %% Unique:
  %%    _145
  _446 = succeeded:body _145
  br ^1

244:
  %% beam_type_SUITE.erl:124
  %% Unique:
  %%    _81
  _146 = match_fail `badmatch`, _81

  %% Unique:
  %%    _146
  _449 = succeeded:body _146
  br ^1

241:
  %% beam_type_SUITE.erl:122
  %% Unique:
  %%    _80
  _147 = match_fail `badmatch`, _80

  %% Unique:
  %%    _147
  _452 = succeeded:body _147
  br ^1

236:
  %% beam_type_SUITE.erl:120
  %% Aliased:
  %%    _17
  _148 = match_fail `badmatch`, _17

  %% Unique:
  %%    _148
  _465 = succeeded:body _148
  br ^1

221:
  %% beam_type_SUITE.erl:116
  %% Aliased:
  %%    _14
  _150 = match_fail `badmatch`, _14

  %% Unique:
  %%    _150
  _481 = succeeded:body _150
  br ^1

197:
  %% beam_type_SUITE.erl:109
  %% Unique:
  %%    _66
  _155 = match_fail `badmatch`, _66

  %% Unique:
  %%    _155
  _496 = succeeded:body _155
  br ^1

194:
  %% beam_type_SUITE.erl:108
  %% Unique:
  %%    _65
  _156 = match_fail `badmatch`, _65

  %% Unique:
  %%    _156
  _499 = succeeded:body _156
  br ^1

191:
  %% beam_type_SUITE.erl:107
  %% Unique:
  %%    _64
  _157 = match_fail `badmatch`, _64

  %% Unique:
  %%    _157
  _502 = succeeded:body _157
  br ^1

185:
  %% beam_type_SUITE.erl:103
  %% Aliased:
  %%    _4
  _159 = match_fail `badmatch`, _4

  %% Unique:
  %%    _159
  _517 = succeeded:body _159
  br ^1

170:
  %% beam_type_SUITE.erl:100
  _161 = match_fail `badmatch`, `a`

  %% Unique:
  %%    _161
  _523 = succeeded:body _161
  br ^1

167:
  %% beam_type_SUITE.erl:99
  _162 = match_fail `badmatch`, `b`

  %% Unique:
  %%    _162
  _526 = succeeded:body _162
  br ^1

1:
  _163 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _163
}

%% beam_type_SUITE.erl:140
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     24..25
function `beam_type_SUITE`:`do_integers_1`(_0) {
0:
  %% beam_type_SUITE.erl:141
  %% Argument types:
  %%    _0 => 24..25
  %% Unique:
  %%    _0
  B = bif:'band' _0, `1`

  %% Argument types:
  %%    B => 0..1
  %% Unique:
  %%    B
  _14 = bif:'=:=' B, `0`
  br _14, ^11, ^12

11:
  %% Result type:
  %%    'a'
  ret `a`

12:
  %% Result type:
  %%    'b'
  ret `b`
}

%% beam_type_SUITE.erl:147
%% Counter = 30
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(1)
%%     accepts_match_context
function `beam_type_SUITE`:`do_integers_2`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(1)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _3 = bs_start_match `new`, _0
  _28 = bs_ensure _3, `1`, `1`
  _29 = succeeded:guard _28
  br _29, ^27, ^10

27:
  %% beam_type_SUITE.erl:148
  %% Argument types:
  %%    _28 => bs_context(1)
  %% Aliased:
  %%    _3
  %% Anno: #{ensured => true}
  _4 = bs_match `integer`, _28, `[signed,big]`, `1`, `1`

  %% Aliased:
  %%    _4
  _11 = succeeded:guard _4
  br _11, ^11, ^10

11:
  %% Aliased:
  %%    _4
  _5 = bs_extract _4

  %% Aliased:
  %%    _4
  _17 = bs_test_tail _4, `0`
  br _17, ^17, ^10

17:
  %% Aliased:
  %%    _5
  _26 = bif:'=:=' _5, `0`
  br _26, ^14, ^13

14:
  %% Result type:
  %%    'a'
  ret `a`

13:
  %% beam_type_SUITE.erl:149
  _6 = match_fail `case_clause`, `-1`

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

10:
  %% Aliased:
  %%    _3
  _25 = bs_get_tail _3

  %% beam_type_SUITE.erl:148
  %% Aliased:
  %%    _25
  _7 = match_fail `badmatch`, _25

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_type_SUITE.erl:154
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_integers_3`() {
0:
  %% Result type:
  %%    'college'
  ret `college`
}

%% beam_type_SUITE.erl:160
%% Counter = 40
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(1)
%%     accepts_match_context
%%    _1 =>
%%     0..2
function `beam_type_SUITE`:`do_integers_4`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => bitstring(1)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _6 = bs_start_match `new`, _0
  _38 = bs_ensure _6, `1`, `1`
  _39 = succeeded:guard _38
  br _39, ^37, ^18

37:
  %% beam_type_SUITE.erl:160
  %% Argument types:
  %%    _38 => bs_context(1)
  %% Aliased:
  %%    _6
  %% Anno: #{ensured => true}
  _7 = bs_match `integer`, _38, `[unsigned,big]`, `1`, `1`

  %% Aliased:
  %%    _7
  _19 = succeeded:guard _7
  br _19, ^19, ^18

19:
  %% Aliased:
  %%    _7
  _8 = bs_extract _7

  %% beam_type_SUITE.erl:160
  %% Aliased:
  %%    _7
  _9 = bs_get_tail _7

  %% beam_type_SUITE.erl:164
  %% Argument types:
  %%    _8 => 0..1
  %%    _1 => 0..2
  %% Unique:
  %%    _1, 
  %%    _8
  _11 = bif:'bor' _8, _1
  %% Argument types:
  %%    
  switch _11, ^23, [
    { `0`, ^26 },
    { `1`, ^27 }
  ]

27:
  %% beam_type_SUITE.erl:166
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _1
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,{b_local,{b_literal,do_integers_4},3}}}
  _12 = call (`do_integers_4`/3), _9, _1, `one`

  %% Unique:
  %%    _12
  _25 = succeeded:body _12
  br _25, ^25, ^1

25:
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Unique:
  %%    _12
  ret _12

26:
  %% beam_type_SUITE.erl:165
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _1
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,{b_local,{b_literal,do_integers_4},3}}}
  _13 = call (`do_integers_4`/3), _9, _1, `zero`

  %% Unique:
  %%    _13
  _24 = succeeded:body _13
  br _24, ^24, ^1

24:
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Unique:
  %%    _13
  ret _13

23:
  %% beam_type_SUITE.erl:167
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _1
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,{b_local,{b_literal,do_integers_4},3}}}
  _14 = call (`do_integers_4`/3), _9, _1, `other`

  %% Unique:
  %%    _14
  _28 = succeeded:body _14
  br _28, ^28, ^1

28:
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Unique:
  %%    _14
  ret _14

18:
  %% Aliased:
  %%    _6
  _36 = bs_get_tail _6

  %% beam_type_SUITE.erl:160
  %% Aliased:
  %%    _36
  %% Unique:
  %%    _1
  %% Anno: #{inlined => {'-inlined-do_integers_4/2-',2}}
  _15 = match_fail `function_clause`, _36, _1

  %% Unique:
  %%    _15
  _30 = succeeded:body _15
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% beam_type_SUITE.erl:170
%% Counter = 5
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(1)
%%    _1 =>
%%     0..2
%%    _2 =>
%%     'one' | 'other' | 'zero'
function `beam_type_SUITE`:`do_integers_4`(_0, _1, _2) {
0:
  %% Result type:
  %%    'one' | 'other' | 'zero'
  %% Unique:
  %%    _2
  ret _2
}

%% beam_type_SUITE.erl:173
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0
%%    _1 =>
%%     0..3
function `beam_type_SUITE`:`do_integers_5`(_0, _1) {
0:
  %% Argument types:
  %%    
  switch _1, ^15, [
    { `0`, ^17 },
    { `1`, ^14 },
    { `2`, ^16 }
  ]

16:
  %% Result type:
  %%    'two'
  ret `two`

14:
  %% Result type:
  %%    'one'
  ret `one`

17:
  %% Result type:
  %%    'zero'
  ret `zero`

15:
  %% Result type:
  %%    'three'
  ret `three`
}

%% beam_type_SUITE.erl:184
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_integers_6`() {
0:
  %% beam_type_SUITE.erl:185
  %% Argument types:
  %%    
  _2 = bif:'band' `b`, `0`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:187
%% Counter = 82
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_integers_7`() {
0:
  br ^80

80:
  _29 = new_try_tag `'try'`
  br _29, ^79, ^26

79:
  br ^81

81:
  _34 = new_try_tag `'try'`
  br _34, ^33, ^31

33:
  %% beam_type_SUITE.erl:192
  _19 = call (`erlang`:`apply`/3), `0`, `any`, `[]`

  %% Aliased:
  %%    _19
  _35 = succeeded:body _19
  br _35, ^35, ^31

35:
  %% Unique:
  %%    _34
  _43 = kill_try_tag _34

  %% beam_type_SUITE.erl:190
  %% Argument types:
  %%    
  _22 = bif:'band' `ok`, `0`

  %% Unique:
  %%    _22
  _44 = succeeded:body _22
  br ^26

31:
  %% Unique:
  %%    _34
  _41 = landingpad `'try'`, _34

  %% Aliased:
  %%    _41
  _2 = extract _41, `1`

  %% Aliased:
  %%    _41
  _1 = extract _41, `2`

  %% Unique:
  %%    _34
  _42 = kill_try_tag _34
  br ^37

37:
  %% Aliased:
  %%    _1, 
  %%    _2
  _21 = resume _1, _2

  %% Unique:
  %%    _21
  _40 = succeeded:body _21
  br ^26

26:
  %% Unique:
  %%    _29
  _45 = landingpad `'try'`, _29

  %% Unique:
  %%    _29
  _46 = kill_try_tag _29
  %% Result type:
  %%    'house'
  ret `house`
}

%% beam_type_SUITE.erl:203
%% Counter = 8
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_integers_8`() {
0:
  %% beam_type_SUITE.erl:204
  %% Argument types:
  %%    
  _0 = bif:'div' `0`, `0`

  %% Unique:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^7, ^1

7:
  %% Result type:
  %%    0
  ret `0`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:206
%% Counter = 11
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_integers_9`(_0, _1) {
0:
  %% beam_type_SUITE.erl:207
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = bif:'band' _1, `1`

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:207
  %% Argument types:
  %%    _2 => 0..1
  %% Unique:
  %%    _2
  _4 = bif:'bor' _2, `-100`

  %% beam_type_SUITE.erl:207
  %% Argument types:
  %%    _4 => '-inf'..-99
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _4
  _5 = bif:'*' _0, _4

  %% Unique:
  %%    _5
  _10 = succeeded:body _5
  br _10, ^10, ^1

10:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:209
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -2..1
%%    _1 =>
%%     -5..2
function `beam_type_SUITE`:`do_integers_10`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => -2..1
  %%    _1 => -5..2
  %% Unique:
  %%    _0, 
  %%    _1
  _24 = bif:'<' _0, _1
  br _24, ^24, ^23

24:
  %% beam_type_SUITE.erl:211
  %% Argument types:
  %%    _0 => -2..1
  %%    _1 => -1..2
  %% Unique:
  %%    _0, 
  %%    _1
  _11 = bif:'+' _0, _1
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _11
  ret _11

23:
  %% beam_type_SUITE.erl:212
  %% Argument types:
  %%    _0 => -2..1
  %%    _1 => -5..1
  %% Unique:
  %%    _0, 
  %%    _1
  _12 = bif:'*' _0, _1
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _12
  ret _12
}

%% beam_type_SUITE.erl:215
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42 | {'a', 'b'}
function `beam_type_SUITE`:`do_integers_11`(_0) {
0:
  %% beam_type_SUITE.erl:216
  %% Argument types:
  %%    _0 => 42 | {'a', 'b'}
  %% Unique:
  %%    _0
  _1 = bif:'-' `true`, _0

  %% Unique:
  %%    _1
  _5 = succeeded:body _1
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:218
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil() | 42
function `beam_type_SUITE`:`do_integers_12`(_0) {
0:
  %% beam_type_SUITE.erl:219
  %% Argument types:
  %%    
  _2 = bif:'bsl' `1`, `1267650600228229401496703205376`

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% beam_type_SUITE.erl:219
  %% Argument types:
  %%    _2 => 0..'+inf'
  %%    _0 => nil() | 42
  %% Unique:
  %%    _0, 
  %%    _2
  _3 = bif:'+' _2, _0

  %% Unique:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Result type:
  %%    42..'+inf'
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_type_SUITE.erl:222
%% Counter = 144
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -43..17
function `beam_type_SUITE`:`do_integers_13`(_0) {
0:
  br ^142

142:
  _61 = new_try_tag `'try'`
  br _61, ^60, ^58

60:
  %% beam_type_SUITE.erl:223
  %% Argument types:
  %%    _0 => -43..17
  %% Unique:
  %%    _0
  %% Anno: #{unit => 8}
  _1 = bs_create_bin `integer`, `[1,{segment,1}]`, _0, `8`

  %% Aliased:
  %%    _1
  _62 = succeeded:body _1
  br _62, ^62, ^58

62:
  %% beam_type_SUITE.erl:223
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _1
  _44 = call (`do_integers_13_1`/1), _1

  %% Aliased:
  %%    _44
  _63 = succeeded:body _44
  br _63, ^63, ^58

63:
  %% Unique:
  %%    _61
  _98 = kill_try_tag _61

  %% beam_type_SUITE.erl:224
  _45 = call (`erlang`:`error`/1), `should_fail`

  %% Aliased:
  %%    _45
  _64 = succeeded:body _45
  br ^1

58:
  %% Unique:
  %%    _61
  _96 = landingpad `'try'`, _61

  %% Aliased:
  %%    _96
  _6 = extract _96, `0`

  %% Aliased:
  %%    _96
  _5 = extract _96, `1`

  %% Unique:
  %%    _61
  _97 = kill_try_tag _61
  _69 = new_try_tag `'try'`
  br _69, ^68, ^66

68:
  %% beam_type_SUITE.erl:227
  %% Result type:
  %%    -42..'+inf'
  %% Aliased:
  %%    _0
  _47 = call (`do_integers_13_2`/1), _0

  %% Unique:
  %%    _47
  _70 = succeeded:body _47
  br _70, ^70, ^66

70:
  %% Unique:
  %%    _69
  _95 = kill_try_tag _69

  %% beam_type_SUITE.erl:228
  _48 = call (`erlang`:`error`/1), `should_fail`

  %% Aliased:
  %%    _48
  _71 = succeeded:body _48
  br ^1

66:
  %% Unique:
  %%    _69
  _93 = landingpad `'try'`, _69

  %% Aliased:
  %%    _93
  _11 = extract _93, `0`

  %% Aliased:
  %%    _93
  _10 = extract _93, `1`

  %% Aliased:
  %%    _93
  _9 = extract _93, `2`

  %% Unique:
  %%    _69
  _94 = kill_try_tag _69
  br ^104

104:
  %% beam_type_SUITE.erl:230
  %% Argument types:
  %%    _11 => 'error' | 'exit' | 'throw'
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6, 
  %%    _11
  _24 = bif:'=:=' _11, _6
  br _24, ^105, ^73

105:
  %% beam_type_SUITE.erl:230
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _10
  _25 = bif:'=:=' _10, _5
  br _25, ^141, ^73

141:
  br ^143

143:
  _80 = new_try_tag `'try'`
  br _80, ^79, ^77

79:
  %% beam_type_SUITE.erl:231
  %% Result type:
  %%    -42..'+inf'
  %% Aliased:
  %%    _0
  _50 = call (`do_integers_13_3`/1), _0

  %% Unique:
  %%    _50
  _81 = succeeded:body _50
  br _81, ^81, ^77

81:
  %% Unique:
  %%    _80
  _91 = kill_try_tag _80

  %% beam_type_SUITE.erl:232
  _51 = call (`erlang`:`error`/1), `should_fail`

  %% Aliased:
  %%    _51
  _82 = succeeded:body _51
  br ^1

77:
  %% Unique:
  %%    _80
  _89 = landingpad `'try'`, _80

  %% Aliased:
  %%    _89
  _16 = extract _89, `0`

  %% Aliased:
  %%    _89
  _15 = extract _89, `1`

  %% Aliased:
  %%    _89
  _14 = extract _89, `2`

  %% Unique:
  %%    _80
  _90 = kill_try_tag _80
  br ^100

100:
  %% beam_type_SUITE.erl:234
  %% Argument types:
  %%    _16 => 'error' | 'exit' | 'throw'
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6, 
  %%    _16
  _29 = bif:'=:=' _16, _6
  br _29, ^101, ^84

101:
  %% beam_type_SUITE.erl:234
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _15
  _30 = bif:'=:=' _15, _5
  br _30, ^86, ^84

86:
  %% Aliased:
  %%    _5, 
  %%    _6, 
  %%    _14
  _52 = raw_raise _6, _5, _14

  %% Unique:
  %%    _52
  _87 = succeeded:body _52
  br ^1

84:
  %% Aliased:
  %%    _14, 
  %%    _15
  _53 = resume _14, _15

  %% Unique:
  %%    _53
  _88 = succeeded:body _53
  br ^1

73:
  %% Aliased:
  %%    _9, 
  %%    _10
  _54 = resume _9, _10

  %% Unique:
  %%    _54
  _92 = succeeded:body _54
  br ^1

1:
  _55 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _55
}

%% beam_type_SUITE.erl:240
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(8)
%%     accepts_match_context
function `beam_type_SUITE`:`do_integers_13_1`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _5 = bs_start_match `new`, _0
  _31 = bs_ensure _5, `8`, `1`
  _32 = succeeded:guard _31
  br _32, ^30, ^13

30:
  %% beam_type_SUITE.erl:240
  %% Argument types:
  %%    _31 => bs_context(8)
  %% Aliased:
  %%    _5
  %% Anno: #{ensured => true}
  _6 = bs_match `integer`, _31, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _6
  _14 = succeeded:guard _6
  br _14, ^14, ^13

14:
  %% Aliased:
  %%    _6
  _7 = bs_extract _6

  %% Aliased:
  %%    _6
  _21 = bs_test_tail _6, `0`
  br _21, ^21, ^13

21:
  %% beam_type_SUITE.erl:241
  %% Argument types:
  %%    _7 => 0..255
  %% Unique:
  %%    _7
  _2 = bif:'bnot' _7

  %% Unique:
  %%    _2
  _15 = succeeded:body _2
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _2 => -256..-1
  %%    _7 => 0..255
  %% Unique:
  %%    _2, 
  %%    _7
  _18 = bif:'=:=' _2, _7
  br _18, ^18, ^17

18:
  %% beam_type_SUITE.erl:241
  %% Argument types:
  %%    _2 => 0..255
  %% Unique:
  %%    _2
  %% Anno: #{unit => 8}
  _8 = bs_create_bin `integer`, `[1,{segment,1}]`, _2, `8`

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _8
  ret _8

17:
  %% beam_type_SUITE.erl:241
  %% Unique:
  %%    _2
  _9 = match_fail `badmatch`, _2

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

13:
  %% Aliased:
  %%    _5
  _29 = bs_get_tail _5

  %% beam_type_SUITE.erl:240
  %% Aliased:
  %%    _29
  %% Anno: #{inlined => {'-inlined-do_integers_13_1/1-',1}}
  _10 = match_fail `function_clause`, _29

  %% Unique:
  %%    _10
  _23 = succeeded:body _10
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% beam_type_SUITE.erl:243
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -43..17
function `beam_type_SUITE`:`do_integers_13_2`(_0) {
0:
  %% beam_type_SUITE.erl:244
  %% Argument types:
  %%    _0 => -43..17
  %% Unique:
  %%    _0
  _7 = bif:'bnot' _0

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => -18..42
  %%    _0 => -43..17
  %% Unique:
  %%    _0, 
  %%    _7
  _24 = bif:'=:=' _7, _0
  br _24, ^24, ^23

24:
  %% beam_type_SUITE.erl:244
  %% Argument types:
  %%    _7 => -18..17
  %% Unique:
  %%    _7
  _11 = bif:'+' _7, `1`
  %% Result type:
  %%    -42..'+inf'
  %% Unique:
  %%    _11
  ret _11

23:
  %% beam_type_SUITE.erl:244
  %% Unique:
  %%    _7
  _12 = match_fail `badmatch`, _7

  %% Unique:
  %%    _12
  _26 = succeeded:body _12
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_type_SUITE.erl:246
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -43..17
function `beam_type_SUITE`:`do_integers_13_3`(_0) {
0:
  %% beam_type_SUITE.erl:247
  %% Argument types:
  %%    _0 => -43..17
  %% Unique:
  %%    _0
  _10 = bif:'bnot' _0

  %% Unique:
  %%    _10
  _21 = succeeded:body _10
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _10 => -18..42
  %%    _0 => -43..17
  %% Unique:
  %%    _0, 
  %%    _10
  _24 = bif:'=:=' _10, _0
  br _24, ^24, ^23

24:
  %% beam_type_SUITE.erl:248
  %% Argument types:
  %%    _0 => -43..17
  %% Unique:
  %%    _0
  _11 = bif:'+' _0, `1`
  %% Result type:
  %%    -42..'+inf'
  %% Unique:
  %%    _11
  ret _11

23:
  %% beam_type_SUITE.erl:247
  %% Unique:
  %%    _10
  _12 = match_fail `badmatch`, _10

  %% Unique:
  %%    _12
  _26 = succeeded:body _12
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_type_SUITE.erl:250
%% Counter = 319
%% bs_ensure_opt: true
function `beam_type_SUITE`:`numbers`(_0) {
0:
  %% beam_type_SUITE.erl:251
  Int = call (`id`/1), `42`

  %% Aliased:
  %%    Int
  _109 = succeeded:body Int
  br _109, ^109, ^1

109:
  %% beam_type_SUITE.erl:252
  %% Argument types:
  %%    
  %% Aliased:
  %%    Int
  _49 = bif:is_integer Int
  br _49, ^260, ^111

260:
  %% beam_type_SUITE.erl:256
  Float = call (`id`/1), `42.0`

  %% Aliased:
  %%    Float
  _116 = succeeded:body Float
  br _116, ^116, ^1

116:
  %% beam_type_SUITE.erl:257
  %% Argument types:
  %%    
  %% Aliased:
  %%    Float
  _52 = bif:is_float Float
  br _52, ^251, ^118

251:
  %% beam_type_SUITE.erl:261
  _10 = call (`id`/1), `1`

  %% Aliased:
  %%    _10
  _123 = succeeded:body _10
  br _123, ^123, ^1

123:
  %% beam_type_SUITE.erl:261
  _9 = call (`id`/1), `2`

  %% Aliased:
  %%    _9
  _124 = succeeded:body _9
  br _124, ^124, ^1

124:
  %% beam_type_SUITE.erl:261
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9, 
  %%    _10
  Number = bif:'+' _10, _9

  %% Unique:
  %%    Number
  _125 = succeeded:body Number
  br _125, ^248, ^1

248:
  %% beam_type_SUITE.erl:263
  %% Argument types:
  %%    Number => number()
  %% Unique:
  %%    Number
  _56 = bif:is_integer Number
  br _56, ^242, ^129

242:
  %% beam_type_SUITE.erl:266
  _16 = call (`id`/1), `99.0`

  %% Aliased:
  %%    _16
  _132 = succeeded:body _16
  br _132, ^132, ^1

132:
  %% beam_type_SUITE.erl:266
  _15 = call (`id`/1), `1`

  %% Aliased:
  %%    _15
  _133 = succeeded:body _15
  br _133, ^133, ^1

133:
  %% beam_type_SUITE.erl:266
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15, 
  %%    _16
  AnotherNumber = bif:'+' _16, _15

  %% Unique:
  %%    AnotherNumber
  _134 = succeeded:body AnotherNumber
  br _134, ^134, ^1

134:
  %% beam_type_SUITE.erl:267
  %% Argument types:
  %%    AnotherNumber => number()
  %% Unique:
  %%    AnotherNumber
  _58 = bif:is_float AnotherNumber
  br _58, ^233, ^136

233:
  %% beam_type_SUITE.erl:271
  NotNumber = call (`id`/1), `atom`

  %% Aliased:
  %%    NotNumber
  _141 = succeeded:body NotNumber
  br _141, ^141, ^1

141:
  %% beam_type_SUITE.erl:272
  %% Argument types:
  %%    
  %% Aliased:
  %%    NotNumber
  _61 = bif:is_atom NotNumber
  br _61, ^209, ^143

209:
  %% beam_type_SUITE.erl:284
  _69 = call (`id`/1), `a`

  %% Aliased:
  %%    _69
  _158 = succeeded:body _69
  br _158, ^158, ^1

158:
  switch _69, ^160, [
    { `a`, ^166 },
    { `b`, ^167 }
  ]

167:
  %% beam_type_SUITE.erl:286
  _32 = call (`id`/1), `5`

  %% Aliased:
  %%    _32
  _163 = succeeded:body _32
  br _163, ^163, ^1

163:
  %% beam_type_SUITE.erl:286
  _31 = call (`id`/1), `2`

  %% Aliased:
  %%    _31
  _164 = succeeded:body _31
  br _164, ^164, ^1

164:
  %% beam_type_SUITE.erl:286
  %% Aliased:
  %%    _32
  _299 = float:convert _32

  %% Unique:
  %%    _299
  _305 = succeeded:body _299
  br _305, ^304, ^1

304:
  %% beam_type_SUITE.erl:286
  %% Aliased:
  %%    _31
  _300 = float:convert _31

  %% Unique:
  %%    _300
  _306 = succeeded:body _300
  br _306, ^305, ^1

305:
  %% beam_type_SUITE.erl:286
  %% Unique:
  %%    _299, 
  %%    _300
  _301 = float:'/' _299, _300

  %% Unique:
  %%    _301
  _165 = succeeded:body _301
  br _165, ^302, ^1

302:
  %% Unique:
  %%    _301
  _76 = float:get _301
  br ^159

166:
  %% beam_type_SUITE.erl:285
  _30 = call (`id`/1), `7`

  %% Aliased:
  %%    _30
  _161 = succeeded:body _30
  br _161, ^161, ^1

161:
  %% beam_type_SUITE.erl:285
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _77 = bif:'+' _30, `3`

  %% Unique:
  %%    _77
  _162 = succeeded:body _77
  br _162, ^162, ^1

162:
  br ^159

159:
  _34 = phi { _77, ^162 }, { _76, ^302 }

  %% beam_type_SUITE.erl:288
  %% Argument types:
  %%    _34 => number()
  %% Unique:
  %%    _34
  _70 = bif:is_integer _34
  br _70, ^206, ^170

206:
  %% beam_type_SUITE.erl:290
  _71 = call (`id`/1), `a`

  %% Aliased:
  %%    _71
  _171 = succeeded:body _71
  br _171, ^171, ^1

171:
  switch _71, ^173, [
    { `a`, ^178 },
    { `b`, ^179 }
  ]

179:
  %% beam_type_SUITE.erl:292
  _38 = call (`id`/1), `7`

  %% Aliased:
  %%    _38
  _176 = succeeded:body _38
  br _176, ^176, ^1

176:
  %% beam_type_SUITE.erl:292
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _79 = bif:'+' _38, `3`

  %% Unique:
  %%    _79
  _177 = succeeded:body _79
  br _177, ^177, ^1

177:
  br ^172

178:
  %% beam_type_SUITE.erl:291
  _37 = call (`id`/1), `5`

  %% Aliased:
  %%    _37
  _174 = succeeded:body _37
  br _174, ^174, ^1

174:
  %% beam_type_SUITE.erl:291
  %% Aliased:
  %%    _37
  _307 = float:convert _37

  %% Unique:
  %%    _307
  _312 = succeeded:body _307
  br _312, ^312, ^1

312:
  %% beam_type_SUITE.erl:291
  _308 = float:put `2.0`

  %% beam_type_SUITE.erl:291
  %% Unique:
  %%    _307, 
  %%    _308
  _309 = float:'/' _307, _308

  %% Unique:
  %%    _309
  _175 = succeeded:body _309
  br _175, ^310, ^1

310:
  %% Unique:
  %%    _309
  _80 = float:get _309
  br ^172

172:
  _40 = phi { _80, ^310 }, { _79, ^177 }

  %% beam_type_SUITE.erl:294
  %% Argument types:
  %%    _40 => number()
  %% Unique:
  %%    _40
  _72 = bif:is_float _40
  br _72, ^203, ^182

203:
  %% beam_type_SUITE.erl:298
  _44 = call (`id`/1), `0`

  %% Aliased:
  %%    _44
  _183 = succeeded:body _44
  br _183, ^183, ^1

183:
  %% beam_type_SUITE.erl:298
  %% Aliased:
  %%    _44
  _313 = float:convert _44

  %% Unique:
  %%    _313
  _318 = succeeded:body _313
  br _318, ^318, ^1

318:
  %% beam_type_SUITE.erl:298
  _314 = float:put `-10.0`

  %% beam_type_SUITE.erl:298
  %% Unique:
  %%    _313, 
  %%    _314
  _315 = float:'+' _313, _314

  %% Unique:
  %%    _315
  _184 = succeeded:body _315
  br _184, ^316, ^1

316:
  %% Unique:
  %%    _315
  Meet1 = float:get _315

  %% beam_type_SUITE.erl:299
  %% Argument types:
  %%    Meet1 => float()
  %% Unique:
  %%    Meet1
  _73 = bif:abs Meet1

  %% Unique:
  %%    _73
  _185 = succeeded:body _73
  br _185, ^185, ^1

185:
  %% Argument types:
  %%    _73 => float()
  %% Unique:
  %%    _73
  _201 = bif:'=:=' _73, `10.0`
  br _201, ^200, ^187

200:
  %% beam_type_SUITE.erl:302
  %% Result type:
  %%    'error' | 'ok'
  _74 = call (`fcmp`/2), `0.0`, `1.0`

  %% Unique:
  %%    _74
  _188 = succeeded:body _74
  br _188, ^188, ^1

188:
  %% Argument types:
  %%    _74 => 'error' | 'ok'
  %% Unique:
  %%    _74
  _198 = bif:'=:=' _74, `ok`
  br _198, ^197, ^190

197:
  %% beam_type_SUITE.erl:303
  %% Result type:
  %%    'error' | 'ok'
  _75 = call (`fcmp`/2), `1.0`, `0.0`

  %% Unique:
  %%    _75
  _191 = succeeded:body _75
  br _191, ^191, ^1

191:
  %% Argument types:
  %%    _75 => 'error' | 'ok'
  %% Unique:
  %%    _75
  _195 = bif:'=:=' _75, `error`
  br _195, ^194, ^193

194:
  %% Result type:
  %%    'ok'
  ret `ok`

193:
  %% beam_type_SUITE.erl:303
  _82 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _82
  _196 = succeeded:body _82
  br ^1

190:
  %% beam_type_SUITE.erl:302
  _83 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _83
  _199 = succeeded:body _83
  br ^1

187:
  %% beam_type_SUITE.erl:299
  %% Unique:
  %%    _73
  _84 = match_fail `badmatch`, _73

  %% Unique:
  %%    _84
  _202 = succeeded:body _84
  br ^1

182:
  %% beam_type_SUITE.erl:294
  _85 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _85
  _205 = succeeded:body _85
  br ^1

173:
  %% beam_type_SUITE.erl:290
  %% Aliased:
  %%    _71
  _81 = match_fail `case_clause`, _71

  %% Unique:
  %%    _81
  _180 = succeeded:body _81
  br ^1

170:
  %% beam_type_SUITE.erl:288
  _86 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _86
  _208 = succeeded:body _86
  br ^1

160:
  %% beam_type_SUITE.erl:284
  %% Aliased:
  %%    _69
  _78 = match_fail `case_clause`, _69

  %% Unique:
  %%    _78
  _168 = succeeded:body _78
  br ^1

143:
  %% beam_type_SUITE.erl:272
  _94 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _94
  _232 = succeeded:body _94
  br ^1

136:
  %% beam_type_SUITE.erl:267
  _97 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _97
  _241 = succeeded:body _97
  br ^1

129:
  %% beam_type_SUITE.erl:263
  _99 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _99
  _247 = succeeded:body _99
  br ^1

118:
  %% beam_type_SUITE.erl:257
  _103 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _103
  _259 = succeeded:body _103
  br ^1

111:
  %% beam_type_SUITE.erl:252
  _106 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _106
  _268 = succeeded:body _106
  br ^1

1:
  _107 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _107
}

%% beam_type_SUITE.erl:307
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0.0..1.0
%%    _1 =>
%%     0.0..1.0
function `beam_type_SUITE`:`fcmp`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 0.0..1.0
  %% Unique:
  %%    _0
  _14 = bif:'=:=' _0, `0.0`
  br _14, ^13, ^10

13:
  %% Argument types:
  %%    _1 => 0.0..1.0
  %% Unique:
  %%    _1
  _12 = bif:'=:=' _1, `0.0`
  br _12, ^11, ^10

11:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% beam_type_SUITE.erl:308
  %% Argument types:
  %%    _0 => 0.0..1.0
  %%    _1 => 0.0..1.0
  %% Unique:
  %%    _0, 
  %%    _1
  %% Anno: #{float_op => [float,float]}
  _2 = bif:'-' _0, _1

  %% Unique:
  %%    _2
  _17 = succeeded:guard _2
  br _17, ^17, ^15

17:
  %% beam_type_SUITE.erl:308
  %% Argument types:
  %%    _2 => float()
  %%    _1 => 0.0..1.0
  %% Unique:
  %%    _1, 
  %%    _2
  %% Anno: #{float_op => [float,float]}
  _3 = bif:'/' _2, _1

  %% Unique:
  %%    _3
  _18 = succeeded:guard _3
  br _18, ^18, ^15

18:
  %% Argument types:
  %%    _3 => float()
  %% Unique:
  %%    _3
  _19 = bif:'<' _3, `1.0e-7`
  br _19, ^19, ^15

19:
  %% Result type:
  %%    'ok'
  ret `ok`

15:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_type_SUITE.erl:311
%% Counter = 1073
%% bs_ensure_opt: true
function `beam_type_SUITE`:`coverage`(_0) {
0:
  br ^1057

1057:
  _256 = new_try_tag `'catch'`
  br _256, ^254, ^255

254:
  %% beam_type_SUITE.erl:312
  _1 = call (`id`/1), `1`

  %% Aliased:
  %%    _1
  _258 = succeeded:body _1
  br _258, ^258, ^255

258:
  %% beam_type_SUITE.erl:312
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _187 = bif:'bsl' _1, `0.5`

  %% Unique:
  %%    _187
  _259 = succeeded:body _187
  br ^255

255:
  %% Unique:
  %%    _256
  _262 = landingpad `'catch'`, _256

  %% Aliased:
  %%    _262
  _260 = extract _262, `0`
  br ^253

253:
  %% Aliased:
  %%    _260
  %% Unique:
  %%    _256
  _2 = catch_end _256, _260

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _761 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _761, ^758, ^265

758:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _108 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _755 = is_tagged_tuple _108, `2`, `badarith`
  br _755, ^1026, ^265

1026:
  br ^1058

1058:
  _269 = new_try_tag `'catch'`
  br _269, ^267, ^268

267:
  %% beam_type_SUITE.erl:313
  _4 = call (`id`/1), `2.0`

  %% Aliased:
  %%    _4
  _271 = succeeded:body _4
  br _271, ^271, ^268

271:
  %% beam_type_SUITE.erl:313
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _189 = bif:'bsl' _4, `2`

  %% Unique:
  %%    _189
  _272 = succeeded:body _189
  br _272, ^272, ^268

272:
  br ^266

268:
  %% Unique:
  %%    _269
  _275 = landingpad `'catch'`, _269

  %% Aliased:
  %%    _275
  _273 = extract _275, `0`
  br ^266

266:
  _276 = phi { _273, ^268 }, { _189, ^272 }

  %% Aliased:
  %%    _276
  %% Unique:
  %%    _269
  _5 = catch_end _269, _276

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _748 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _748, ^745, ^278

745:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _112 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _742 = is_tagged_tuple _112, `2`, `badarith`
  br _742, ^1027, ^278

1027:
  br ^1059

1059:
  _282 = new_try_tag `'catch'`
  br _282, ^280, ^281

280:
  %% beam_type_SUITE.erl:314
  %% Argument types:
  %%    
  %% Anno: #{float_op => [convert,float]}
  _191 = bif:'+' `a`, `0.5`

  %% Unique:
  %%    _191
  _284 = succeeded:body _191
  br ^281

281:
  %% Unique:
  %%    _282
  _287 = landingpad `'catch'`, _282

  %% Aliased:
  %%    _287
  _285 = extract _287, `0`
  br ^279

279:
  %% Aliased:
  %%    _285
  %% Unique:
  %%    _282
  _7 = catch_end _282, _285

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _735 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _735, ^732, ^290

732:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _116 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _116
  _729 = is_tagged_tuple _116, `2`, `badarith`
  br _729, ^1028, ^290

1028:
  br ^1060

1060:
  _294 = new_try_tag `'catch'`
  br _294, ^292, ^293

292:
  %% beam_type_SUITE.erl:315
  %% Argument types:
  %%    
  %% Anno: #{float_op => [float,convert]}
  _193 = bif:'*' `2.0`, `b`

  %% Unique:
  %%    _193
  _296 = succeeded:body _193
  br ^293

293:
  %% Unique:
  %%    _294
  _299 = landingpad `'catch'`, _294

  %% Aliased:
  %%    _299
  _297 = extract _299, `0`
  br ^291

291:
  %% Aliased:
  %%    _297
  %% Unique:
  %%    _294
  _9 = catch_end _294, _297

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _722 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _722, ^719, ^302

719:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _120 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _120
  _716 = is_tagged_tuple _120, `2`, `badarith`
  br _716, ^1029, ^302

1029:
  br ^1061

1061:
  _306 = new_try_tag `'catch'`
  br _306, ^304, ^305

304:
  %% beam_type_SUITE.erl:317
  _12 = call (`id`/1), `42.0`

  %% Aliased:
  %%    _12
  _308 = succeeded:body _12
  br _308, ^308, ^305

308:
  %% beam_type_SUITE.erl:317
  %% Aliased:
  %%    _12
  _1041 = float:convert _12

  %% Unique:
  %%    _1041
  _1047 = succeeded:body _1041
  br _1047, ^1046, ^305

1046:
  %% beam_type_SUITE.erl:317
  _1042 = float:convert ``

  %% Unique:
  %%    _1042
  _1048 = succeeded:body _1042
  br _1048, ^1047, ^305

1047:
  %% beam_type_SUITE.erl:317
  %% Unique:
  %%    _1041, 
  %%    _1042
  _1043 = float:'/' _1041, _1042

  %% Unique:
  %%    _1043
  _309 = succeeded:body _1043
  br _309, ^1044, ^305

1044:
  %% Unique:
  %%    _1043
  _195 = float:get _1043
  br ^303

305:
  %% Unique:
  %%    _306
  _312 = landingpad `'catch'`, _306

  %% Aliased:
  %%    _312
  _310 = extract _312, `0`
  br ^303

303:
  _313 = phi { _310, ^305 }, { _195, ^1044 }

  %% Aliased:
  %%    _313
  %% Unique:
  %%    _306
  _13 = catch_end _306, _313

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _709 = is_tagged_tuple _13, `2`, `'EXIT'`
  br _709, ^706, ^315

706:
  %% Argument types:
  %%    _13 => {''EXIT'', any()}
  %% Aliased:
  %%    _13
  _124 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _124
  _703 = is_tagged_tuple _124, `2`, `badarith`
  br _703, ^700, ^315

700:
  %% beam_type_SUITE.erl:319
  _15 = call (`id`/1), `42`

  %% Aliased:
  %%    _15
  _316 = succeeded:body _15
  br _316, ^316, ^1

316:
  %% beam_type_SUITE.erl:319
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _16 = bif:'band' _15, `387439739874298734983787934283479243879`

  %% Unique:
  %%    _16
  _317 = succeeded:body _16
  br _317, ^317, ^1

317:
  %% beam_type_SUITE.erl:319
  %% Unique:
  %%    _16
  _196 = call (`id`/1), _16

  %% Aliased:
  %%    _196
  _318 = succeeded:body _196
  br _318, ^318, ^1

318:
  %% beam_type_SUITE.erl:320
  _17 = call (`id`/1), `13`

  %% Aliased:
  %%    _17
  _319 = succeeded:body _17
  br _319, ^319, ^1

319:
  %% beam_type_SUITE.erl:320
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _19 = bif:'band' _17, `-1`

  %% Unique:
  %%    _19
  _320 = succeeded:body _19
  br _320, ^320, ^1

320:
  %% beam_type_SUITE.erl:320
  %% Unique:
  %%    _19
  _197 = call (`id`/1), _19

  %% Aliased:
  %%    _197
  _321 = succeeded:body _197
  br _321, ^688, ^1

688:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _132 = bs_start_match `new`, _0

  %% Aliased:
  %%    _132
  _352 = succeeded:guard _132
  br _352, ^352, ^348

352:
  %% beam_type_SUITE.erl:340
  %% Aliased:
  %%    _132
  _133 = bs_test_tail _132, `8`
  br _133, ^351, ^347

351:
  %% Argument types:
  %%    _0 => bs_matchable(1)
  %% Aliased:
  %%    _0
  _350 = bif:is_binary _0
  br _350, ^356, ^347

356:
  %% beam_type_SUITE.erl:339
  _241 = match_fail `badmatch`, `impossible`

  %% Unique:
  %%    _241
  _687 = succeeded:body _241
  br ^1

348:
  %% Aliased:
  %%    _0
  _353 = is_nonempty_list _0
  br _353, ^1030, ^347

1030:
  br ^1062

1062:
  _360 = new_try_tag `'catch'`
  br _360, ^358, ^359

358:
  %% beam_type_SUITE.erl:347
  _40 = call (`id`/1), `2`

  %% Aliased:
  %%    _40
  _362 = succeeded:body _40
  br _362, ^362, ^359

362:
  %% beam_type_SUITE.erl:347
  _39 = call (`id`/1), `1`

  %% Aliased:
  %%    _39
  _363 = succeeded:body _39
  br _363, ^363, ^359

363:
  %% beam_type_SUITE.erl:347
  %% Aliased:
  %%    _40
  _1049 = float:convert _40

  %% Unique:
  %%    _1049
  _1055 = succeeded:body _1049
  br _1055, ^1054, ^359

1054:
  %% beam_type_SUITE.erl:347
  %% Aliased:
  %%    _39
  _1050 = float:convert _39

  %% Unique:
  %%    _1050
  _1056 = succeeded:body _1050
  br _1056, ^1055, ^359

1055:
  %% beam_type_SUITE.erl:347
  %% Unique:
  %%    _1049, 
  %%    _1050
  _1051 = float:'/' _1049, _1050

  %% Unique:
  %%    _1051
  _364 = succeeded:body _1051
  br _364, ^1052, ^359

1052:
  %% Unique:
  %%    _1051
  _41 = float:get _1051

  %% beam_type_SUITE.erl:347
  %% Argument types:
  %%    _41 => float()
  %% Unique:
  %%    _41
  _200 = bif:'band' _41, `255`

  %% Unique:
  %%    _200
  _365 = succeeded:body _200
  br ^359

359:
  %% Unique:
  %%    _360
  _368 = landingpad `'catch'`, _360

  %% Aliased:
  %%    _368
  _366 = extract _368, `0`
  br ^357

357:
  %% Aliased:
  %%    _366
  %% Unique:
  %%    _360
  _42 = catch_end _360, _366

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _681 = is_tagged_tuple _42, `2`, `'EXIT'`
  br _681, ^678, ^371

678:
  %% Argument types:
  %%    _42 => {''EXIT'', any()}
  %% Aliased:
  %%    _42
  _137 = get_tuple_element _42, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _675 = is_tagged_tuple _137, `2`, `badarith`
  br _675, ^1031, ^371

1031:
  br ^1063

1063:
  _375 = new_try_tag `'catch'`
  br _375, ^373, ^374

373:
  %% beam_type_SUITE.erl:351
  %% Result type:
  %%    none()
  _202 = call (`coverage_1`/0)

  %% Aliased:
  %%    _202
  _377 = succeeded:body _202
  br ^374

374:
  %% Unique:
  %%    _375
  _380 = landingpad `'catch'`, _375

  %% Aliased:
  %%    _380
  _378 = extract _380, `0`
  br ^372

372:
  %% Aliased:
  %%    _378
  %% Unique:
  %%    _375
  _46 = catch_end _375, _378

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _668 = is_tagged_tuple _46, `2`, `'EXIT'`
  br _668, ^665, ^383

665:
  %% Argument types:
  %%    _46 => {''EXIT'', any()}
  %% Aliased:
  %%    _46
  _141 = get_tuple_element _46, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _141
  _662 = is_tagged_tuple _141, `2`, `badarith`
  br _662, ^1032, ^383

1032:
  br ^1064

1064:
  _387 = new_try_tag `'catch'`
  br _387, ^385, ^386

385:
  %% beam_type_SUITE.erl:353
  %% Result type:
  %%    none()
  _204 = call (`coverage_2`/0)

  %% Aliased:
  %%    _204
  _389 = succeeded:body _204
  br ^386

386:
  %% Unique:
  %%    _387
  _392 = landingpad `'catch'`, _387

  %% Aliased:
  %%    _392
  _390 = extract _392, `0`
  br ^384

384:
  %% Aliased:
  %%    _390
  %% Unique:
  %%    _387
  _48 = catch_end _387, _390

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _655 = is_tagged_tuple _48, `2`, `'EXIT'`
  br _655, ^652, ^395

652:
  %% Argument types:
  %%    _48 => {''EXIT'', any()}
  %% Aliased:
  %%    _48
  _145 = get_tuple_element _48, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _145
  _649 = is_tagged_tuple _145, `2`, `badarith`
  br _649, ^1033, ^395

1033:
  br ^1065

1065:
  _399 = new_try_tag `'catch'`
  br _399, ^397, ^398

397:
  %% beam_type_SUITE.erl:355
  %% Result type:
  %%    none()
  _206 = call (`coverage_3`/1), `"a"`

  %% Aliased:
  %%    _206
  _401 = succeeded:body _206
  br ^398

398:
  %% Unique:
  %%    _399
  _404 = landingpad `'catch'`, _399

  %% Aliased:
  %%    _404
  _402 = extract _404, `0`
  br ^396

396:
  %% Aliased:
  %%    _402
  %% Unique:
  %%    _399
  _50 = catch_end _399, _402

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _642 = is_tagged_tuple _50, `2`, `'EXIT'`
  br _642, ^639, ^407

639:
  %% Argument types:
  %%    _50 => {''EXIT'', any()}
  %% Aliased:
  %%    _50
  _149 = get_tuple_element _50, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _149
  _636 = is_tagged_tuple _149, `2`, `function_clause`
  br _636, ^1034, ^407

1034:
  br ^1066

1066:
  _411 = new_try_tag `'catch'`
  br _411, ^409, ^410

409:
  %% beam_type_SUITE.erl:356
  %% Result type:
  %%    none()
  _208 = call (`coverage_3`/1), `"b"`

  %% Aliased:
  %%    _208
  _413 = succeeded:body _208
  br ^410

410:
  %% Unique:
  %%    _411
  _416 = landingpad `'catch'`, _411

  %% Aliased:
  %%    _416
  _414 = extract _416, `0`
  br ^408

408:
  %% Aliased:
  %%    _414
  %% Unique:
  %%    _411
  _52 = catch_end _411, _414

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _629 = is_tagged_tuple _52, `2`, `'EXIT'`
  br _629, ^626, ^419

626:
  %% Argument types:
  %%    _52 => {''EXIT'', any()}
  %% Aliased:
  %%    _52
  _153 = get_tuple_element _52, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _153
  _623 = is_tagged_tuple _153, `2`, `function_clause`
  br _623, ^620, ^419

620:
  %% beam_type_SUITE.erl:358
  Number = call (`id`/1), `1`

  %% Aliased:
  %%    Number
  _420 = succeeded:body Number
  br _420, ^420, ^1

420:
  %% beam_type_SUITE.erl:360
  %% Argument types:
  %%    
  %% Aliased:
  %%    Number
  _55 = bif:'=<' `0`, Number
  br _55, ^767, ^422

767:
  %% beam_type_SUITE.erl:360
  %% Argument types:
  %%    Number => atom() | maybe_improper_list(any(), any()) | number(0, '+inf') | {...} | other()
  %% Aliased:
  %%    Number
  _56 = bif:'<' Number, `10`
  br _56, ^424, ^422

424:
  %% beam_type_SUITE.erl:361
  %% Result type:
  %%    number()
  %% Aliased:
  %%    Number
  _158 = call (`coverage_4`/2), `-1`, Number

  %% Unique:
  %%    _158
  _425 = succeeded:body _158
  br _425, ^425, ^1

425:
  %% Argument types:
  %%    _158 => number()
  %% Unique:
  %%    _158
  _447 = bif:'=:=' _158, `0`
  br _447, ^446, ^427

446:
  %% beam_type_SUITE.erl:362
  %% Result type:
  %%    number()
  %% Aliased:
  %%    Number
  _159 = call (`coverage_4`/2), `0`, Number

  %% Unique:
  %%    _159
  _428 = succeeded:body _159
  br _428, ^428, ^1

428:
  %% Argument types:
  %%    _159 => number()
  %% Unique:
  %%    _159
  _444 = bif:'=:=' _159, `10`
  br _444, ^443, ^430

443:
  %% beam_type_SUITE.erl:363
  %% Result type:
  %%    number()
  %% Aliased:
  %%    Number
  _160 = call (`coverage_4`/2), `1`, Number

  %% Unique:
  %%    _160
  _431 = succeeded:body _160
  br _431, ^431, ^1

431:
  %% Argument types:
  %%    _160 => number()
  %% Unique:
  %%    _160
  _441 = bif:'=:=' _160, `20`
  br _441, ^440, ^433

440:
  %% beam_type_SUITE.erl:364
  %% Result type:
  %%    number()
  %% Aliased:
  %%    Number
  _161 = call (`coverage_4`/2), `2`, Number

  %% Unique:
  %%    _161
  _434 = succeeded:body _161
  br _434, ^434, ^1

434:
  %% Argument types:
  %%    _161 => number()
  %% Unique:
  %%    _161
  _438 = bif:'=:=' _161, `30`
  br _438, ^1035, ^436

1035:
  br ^1067

1067:
  _453 = new_try_tag `'catch'`
  br _453, ^451, ^452

451:
  %% beam_type_SUITE.erl:367
  _215 = call (`erlang`:`'++'`/2), `false`, `true`

  %% Aliased:
  %%    _215
  _455 = succeeded:body _215
  br ^452

452:
  %% Unique:
  %%    _453
  _458 = landingpad `'catch'`, _453

  %% Aliased:
  %%    _458
  _456 = extract _458, `0`
  br ^450

450:
  %% Aliased:
  %%    _456
  %% Unique:
  %%    _453
  _62 = catch_end _453, _456

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _616 = is_tagged_tuple _62, `2`, `'EXIT'`
  br _616, ^613, ^461

613:
  %% Argument types:
  %%    _62 => {''EXIT'', any()}
  %% Aliased:
  %%    _62
  _162 = get_tuple_element _62, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _610 = is_tagged_tuple _162, `2`, `badarg`
  br _610, ^1036, ^461

1036:
  br ^1068

1068:
  _465 = new_try_tag `'catch'`
  br _465, ^463, ^464

463:
  %% beam_type_SUITE.erl:368
  _217 = call (`erlang`:`'--'`/2), `false`, `true`

  %% Aliased:
  %%    _217
  _467 = succeeded:body _217
  br ^464

464:
  %% Unique:
  %%    _465
  _470 = landingpad `'catch'`, _465

  %% Aliased:
  %%    _470
  _468 = extract _470, `0`
  br ^462

462:
  %% Aliased:
  %%    _468
  %% Unique:
  %%    _465
  _64 = catch_end _465, _468

  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _603 = is_tagged_tuple _64, `2`, `'EXIT'`
  br _603, ^600, ^473

600:
  %% Argument types:
  %%    _64 => {''EXIT'', any()}
  %% Aliased:
  %%    _64
  _166 = get_tuple_element _64, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _166
  _597 = is_tagged_tuple _166, `2`, `badarg`
  br _597, ^594, ^473

594:
  %% beam_type_SUITE.erl:370
  _66 = call (`id`/1), `0`

  %% Aliased:
  %%    _66
  _474 = succeeded:body _66
  br _474, ^474, ^1

474:
  %% beam_type_SUITE.erl:370
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _66
  _170 = call (`coverage_5`/1), _66

  %% Unique:
  %%    _170
  _475 = succeeded:body _170
  br _475, ^1037, ^1

1037:
  br ^1069

1069:
  _481 = new_try_tag `'catch'`
  br _481, ^479, ^480

479:
  %% beam_type_SUITE.erl:371
  _68 = call (`id`/1), `0.0`

  %% Aliased:
  %%    _68
  _483 = succeeded:body _68
  br _483, ^483, ^480

483:
  %% beam_type_SUITE.erl:371
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _68
  _219 = call (`coverage_5`/1), _68

  %% Unique:
  %%    _219
  _484 = succeeded:body _219
  br _484, ^484, ^480

484:
  br ^478

480:
  %% Unique:
  %%    _481
  _487 = landingpad `'catch'`, _481

  %% Aliased:
  %%    _487
  _485 = extract _487, `0`
  br ^478

478:
  _488 = phi { _485, ^480 }, { `ok`, ^484 }

  %% Aliased:
  %%    _488
  %% Unique:
  %%    _481
  _69 = catch_end _481, _488

  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _587 = is_tagged_tuple _69, `2`, `'EXIT'`
  br _587, ^584, ^490

584:
  %% Argument types:
  %%    _69 => {''EXIT'', any()}
  %% Aliased:
  %%    _69
  _171 = get_tuple_element _69, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _171
  _581 = is_tagged_tuple _171, `2`, `function_clause`
  br _581, ^578, ^490

578:
  %% beam_type_SUITE.erl:372
  _71 = call (`id`/1), `16`

  %% Aliased:
  %%    _71
  _491 = succeeded:body _71
  br _491, ^491, ^1

491:
  %% beam_type_SUITE.erl:372
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _71
  _175 = call (`coverage_5`/1), _71

  %% Unique:
  %%    _175
  _492 = succeeded:body _175
  br _492, ^1038, ^1

1038:
  br ^1070

1070:
  _498 = new_try_tag `'catch'`
  br _498, ^496, ^497

496:
  %% beam_type_SUITE.erl:373
  _74 = call (`id`/1), `-1`

  %% Aliased:
  %%    _74
  _500 = succeeded:body _74
  br _500, ^500, ^497

500:
  %% beam_type_SUITE.erl:373
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _74
  _221 = call (`coverage_5`/1), _74

  %% Unique:
  %%    _221
  _501 = succeeded:body _221
  br _501, ^501, ^497

501:
  br ^495

497:
  %% Unique:
  %%    _498
  _504 = landingpad `'catch'`, _498

  %% Aliased:
  %%    _504
  _502 = extract _504, `0`
  br ^495

495:
  _505 = phi { _502, ^497 }, { `ok`, ^501 }

  %% Aliased:
  %%    _505
  %% Unique:
  %%    _498
  _75 = catch_end _498, _505

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _571 = is_tagged_tuple _75, `2`, `'EXIT'`
  br _571, ^568, ^507

568:
  %% Argument types:
  %%    _75 => {''EXIT'', any()}
  %% Aliased:
  %%    _75
  _176 = get_tuple_element _75, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _176
  _565 = bif:is_tuple _176
  br _565, ^565, ^507

565:
  %% Argument types:
  %%    _176 => {...}
  %% Aliased:
  %%    _176
  _566 = bif:tuple_size _176

  %% Argument types:
  %%    _566 => 0..16777215
  %% Unique:
  %%    _566
  _567 = bif:'=:=' _566, `2`
  br _567, ^564, ^507

564:
  %% Argument types:
  %%    _176 => {any(), any()}
  %% Aliased:
  %%    _176
  _179 = get_tuple_element _176, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _563 = bif:'=:=' _179, `{case_clause,false}`
  br _563, ^563, ^507

563:
  %% beam_type_SUITE.erl:375
  _77 = call (`id`/1), `0`

  %% Aliased:
  %%    _77
  _508 = succeeded:body _77
  br _508, ^508, ^1

508:
  %% beam_type_SUITE.erl:375
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _77
  _180 = call (`coverage_6`/1), _77

  %% Unique:
  %%    _180
  _509 = succeeded:body _180
  br _509, ^1039, ^1

1039:
  br ^1071

1071:
  _515 = new_try_tag `'catch'`
  br _515, ^513, ^514

513:
  %% beam_type_SUITE.erl:376
  _79 = call (`id`/1), `0.0`

  %% Aliased:
  %%    _79
  _517 = succeeded:body _79
  br _517, ^517, ^514

517:
  %% beam_type_SUITE.erl:376
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _79
  _223 = call (`coverage_6`/1), _79

  %% Unique:
  %%    _223
  _518 = succeeded:body _223
  br _518, ^518, ^514

518:
  br ^512

514:
  %% Unique:
  %%    _515
  _521 = landingpad `'catch'`, _515

  %% Aliased:
  %%    _521
  _519 = extract _521, `0`
  br ^512

512:
  _522 = phi { _519, ^514 }, { `ok`, ^518 }

  %% Aliased:
  %%    _522
  %% Unique:
  %%    _515
  _80 = catch_end _515, _522

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _558 = bif:'=:=' _80, `ok`
  br _558, ^557, ^524

557:
  %% beam_type_SUITE.erl:377
  _82 = call (`id`/1), `16`

  %% Aliased:
  %%    _82
  _525 = succeeded:body _82
  br _525, ^525, ^1

525:
  %% beam_type_SUITE.erl:377
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _82
  _181 = call (`coverage_6`/1), _82

  %% Unique:
  %%    _181
  _526 = succeeded:body _181
  br _526, ^1040, ^1

1040:
  br ^1072

1072:
  _532 = new_try_tag `'catch'`
  br _532, ^530, ^531

530:
  %% beam_type_SUITE.erl:378
  _85 = call (`id`/1), `-1`

  %% Aliased:
  %%    _85
  _534 = succeeded:body _85
  br _534, ^534, ^531

534:
  %% beam_type_SUITE.erl:378
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _85
  _225 = call (`coverage_6`/1), _85

  %% Unique:
  %%    _225
  _535 = succeeded:body _225
  br _535, ^535, ^531

535:
  br ^529

531:
  %% Unique:
  %%    _532
  _538 = landingpad `'catch'`, _532

  %% Aliased:
  %%    _538
  _536 = extract _538, `0`
  br ^529

529:
  _539 = phi { _536, ^531 }, { `ok`, ^535 }

  %% Aliased:
  %%    _539
  %% Unique:
  %%    _532
  _86 = catch_end _532, _539

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _550 = is_tagged_tuple _86, `2`, `'EXIT'`
  br _550, ^547, ^541

547:
  %% Argument types:
  %%    _86 => {''EXIT'', any()}
  %% Aliased:
  %%    _86
  _182 = get_tuple_element _86, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _182
  _544 = bif:is_tuple _182
  br _544, ^544, ^541

544:
  %% Argument types:
  %%    _182 => {...}
  %% Aliased:
  %%    _182
  _545 = bif:tuple_size _182

  %% Argument types:
  %%    _545 => 0..16777215
  %% Unique:
  %%    _545
  _546 = bif:'=:=' _545, `2`
  br _546, ^543, ^541

543:
  %% Argument types:
  %%    _182 => {any(), any()}
  %% Aliased:
  %%    _182
  _185 = get_tuple_element _182, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _185
  _542 = bif:'=:=' _185, `{case_clause,false}`
  br _542, ^542, ^541

542:
  %% Result type:
  %%    'ok'
  ret `ok`

541:
  %% beam_type_SUITE.erl:378
  %% Aliased:
  %%    _86
  _226 = match_fail `badmatch`, _86

  %% Unique:
  %%    _226
  _553 = succeeded:body _226
  br ^1

524:
  %% beam_type_SUITE.erl:376
  %% Aliased:
  %%    _80
  _228 = match_fail `badmatch`, _80

  %% Unique:
  %%    _228
  _559 = succeeded:body _228
  br ^1

507:
  %% beam_type_SUITE.erl:373
  %% Aliased:
  %%    _75
  _230 = match_fail `badmatch`, _75

  %% Unique:
  %%    _230
  _574 = succeeded:body _230
  br ^1

490:
  %% beam_type_SUITE.erl:371
  %% Aliased:
  %%    _69
  _232 = match_fail `badmatch`, _69

  %% Unique:
  %%    _232
  _590 = succeeded:body _232
  br ^1

473:
  %% beam_type_SUITE.erl:368
  %% Aliased:
  %%    _64
  _234 = match_fail `badmatch`, _64

  %% Unique:
  %%    _234
  _606 = succeeded:body _234
  br ^1

461:
  %% beam_type_SUITE.erl:367
  %% Aliased:
  %%    _62
  _235 = match_fail `badmatch`, _62

  %% Unique:
  %%    _235
  _619 = succeeded:body _235
  br ^1

436:
  %% beam_type_SUITE.erl:364
  %% Unique:
  %%    _161
  _209 = match_fail `badmatch`, _161

  %% Unique:
  %%    _209
  _439 = succeeded:body _209
  br ^1

433:
  %% beam_type_SUITE.erl:363
  %% Unique:
  %%    _160
  _210 = match_fail `badmatch`, _160

  %% Unique:
  %%    _210
  _442 = succeeded:body _210
  br ^1

430:
  %% beam_type_SUITE.erl:362
  %% Unique:
  %%    _159
  _211 = match_fail `badmatch`, _159

  %% Unique:
  %%    _211
  _445 = succeeded:body _211
  br ^1

427:
  %% beam_type_SUITE.erl:361
  %% Unique:
  %%    _158
  _212 = match_fail `badmatch`, _158

  %% Unique:
  %%    _212
  _448 = succeeded:body _212
  br ^1

422:
  %% beam_type_SUITE.erl:359
  _213 = match_fail `if_clause`

  %% Unique:
  %%    _213
  _449 = succeeded:body _213
  br ^1

419:
  %% beam_type_SUITE.erl:356
  %% Aliased:
  %%    _52
  _236 = match_fail `badmatch`, _52

  %% Unique:
  %%    _236
  _632 = succeeded:body _236
  br ^1

407:
  %% beam_type_SUITE.erl:355
  %% Aliased:
  %%    _50
  _237 = match_fail `badmatch`, _50

  %% Unique:
  %%    _237
  _645 = succeeded:body _237
  br ^1

395:
  %% beam_type_SUITE.erl:353
  %% Aliased:
  %%    _48
  _238 = match_fail `badmatch`, _48

  %% Unique:
  %%    _238
  _658 = succeeded:body _238
  br ^1

383:
  %% beam_type_SUITE.erl:351
  %% Aliased:
  %%    _46
  _239 = match_fail `badmatch`, _46

  %% Unique:
  %%    _239
  _671 = succeeded:body _239
  br ^1

371:
  %% beam_type_SUITE.erl:347
  %% Aliased:
  %%    _42
  _240 = match_fail `badmatch`, _42

  %% Unique:
  %%    _240
  _684 = succeeded:body _240
  br ^1

347:
  %% beam_type_SUITE.erl:339
  %% Aliased:
  %%    _0
  _198 = match_fail `case_clause`, _0

  %% Unique:
  %%    _198
  _354 = succeeded:body _198
  br ^1

315:
  %% beam_type_SUITE.erl:317
  %% Aliased:
  %%    _13
  _246 = match_fail `badmatch`, _13

  %% Unique:
  %%    _246
  _712 = succeeded:body _246
  br ^1

302:
  %% beam_type_SUITE.erl:315
  %% Aliased:
  %%    _9
  _247 = match_fail `badmatch`, _9

  %% Unique:
  %%    _247
  _725 = succeeded:body _247
  br ^1

290:
  %% beam_type_SUITE.erl:314
  %% Aliased:
  %%    _7
  _248 = match_fail `badmatch`, _7

  %% Unique:
  %%    _248
  _738 = succeeded:body _248
  br ^1

278:
  %% beam_type_SUITE.erl:313
  %% Aliased:
  %%    _5
  _249 = match_fail `badmatch`, _5

  %% Unique:
  %%    _249
  _751 = succeeded:body _249
  br ^1

265:
  %% beam_type_SUITE.erl:312
  %% Aliased:
  %%    _2
  _250 = match_fail `badmatch`, _2

  %% Unique:
  %%    _250
  _764 = succeeded:body _250
  br ^1

1:
  _251 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _251
}

%% beam_type_SUITE.erl:382
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`coverage_1`() {
0:
  %% beam_type_SUITE.erl:389
  %% Argument types:
  %%    
  _2 = bif:'*' `[]`, `[]`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:392
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`coverage_2`() {
0:
  %% beam_type_SUITE.erl:393
  %% Argument types:
  %%    
  _2 = bif:'bsr' `"bc"`, `[]`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:396
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(97..98)
function `beam_type_SUITE`:`coverage_3`(_0) {
0:
  %% beam_type_SUITE.erl:396
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-coverage_3/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_type_SUITE.erl:399
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -1..2
%%    _1 =>
%%     number(0, 10)
function `beam_type_SUITE`:`coverage_4`(_0, _1) {
0:
  %% beam_type_SUITE.erl:400
  %% Argument types:
  %%    _0 => -1..2
  %%    _1 => number(0, 10)
  %% Unique:
  %%    _0, 
  %%    _1
  _2 = bif:'+' _0, _1

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% beam_type_SUITE.erl:400
  %% Argument types:
  %%    _2 => number(-1, 12)
  %% Unique:
  %%    _2
  _3 = bif:'*' _2, `10`

  %% Unique:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_type_SUITE.erl:402
%% Counter = 19
%% bs_ensure_opt: true
function `beam_type_SUITE`:`coverage_5`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_integer _0
  br _10, ^10, ^9

10:
  %% Argument types:
  %%    _0 => integer()
  %% Unique:
  %%    _0
  _13 = bif:'=<' `0`, _0
  br _13, ^13, ^14

13:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_type_SUITE.erl:403
  _5 = match_fail `case_clause`, `false`

  %% Unique:
  %%    _5
  _17 = succeeded:body _5
  br ^1

9:
  %% beam_type_SUITE.erl:402
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-coverage_5/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:410
%% Counter = 15
%% bs_ensure_opt: true
function `beam_type_SUITE`:`coverage_6`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:'=<' `0`, _0
  br _10, ^10, ^11

10:
  %% Result type:
  %%    'ok'
  ret `ok`

11:
  %% beam_type_SUITE.erl:411
  _5 = match_fail `case_clause`, `false`

  %% Unique:
  %%    _5
  _14 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:419
%% Counter = 638
%% bs_ensure_opt: true
function `beam_type_SUITE`:`booleans`(_0) {
0:
  br ^629

629:
  _163 = new_try_tag `'catch'`
  br _163, ^161, ^162

161:
  %% beam_type_SUITE.erl:420
  %% Result type:
  %%    none()
  _119 = call (`do_booleans_1`/1), `42`

  %% Aliased:
  %%    _119
  _165 = succeeded:body _119
  br ^162

162:
  %% Unique:
  %%    _163
  _168 = landingpad `'catch'`, _163

  %% Aliased:
  %%    _168
  _166 = extract _168, `0`
  br ^160

160:
  %% Aliased:
  %%    _166
  %% Unique:
  %%    _163
  _1 = catch_end _163, _166

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _479 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _479, ^476, ^171

476:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _65 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _473 = bif:is_tuple _65
  br _473, ^473, ^171

473:
  %% Argument types:
  %%    _65 => {...}
  %% Aliased:
  %%    _65
  _474 = bif:tuple_size _65

  %% Argument types:
  %%    _474 => 0..16777215
  %% Unique:
  %%    _474
  _475 = bif:'=:=' _474, `2`
  br _475, ^472, ^171

472:
  %% Argument types:
  %%    _65 => {any(), any()}
  %% Aliased:
  %%    _65
  _68 = get_tuple_element _65, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _469 = is_tagged_tuple _68, `2`, `case_clause`
  br _469, ^466, ^171

466:
  %% beam_type_SUITE.erl:422
  %% Result type:
  %%    'error' | 'ok'
  _71 = call (`do_booleans_2`/2), `42`, `41`

  %% Unique:
  %%    _71
  _172 = succeeded:body _71
  br _172, ^172, ^1

172:
  %% Argument types:
  %%    _71 => 'error' | 'ok'
  %% Unique:
  %%    _71
  _464 = bif:'=:=' _71, `ok`
  br _464, ^463, ^174

463:
  %% beam_type_SUITE.erl:423
  %% Result type:
  %%    'error' | 'ok'
  _72 = call (`do_booleans_2`/2), `42`, `42`

  %% Unique:
  %%    _72
  _175 = succeeded:body _72
  br _175, ^175, ^1

175:
  %% Argument types:
  %%    _72 => 'error' | 'ok'
  %% Unique:
  %%    _72
  _461 = bif:'=:=' _72, `error`
  br _461, ^460, ^177

460:
  %% beam_type_SUITE.erl:425
  _6 = call (`id`/1), `[]`

  %% Aliased:
  %%    _6
  _178 = succeeded:body _6
  br _178, ^178, ^1

178:
  %% beam_type_SUITE.erl:425
  _5 = call (`id`/1), `false`

  %% Aliased:
  %%    _5
  _179 = succeeded:body _5
  br _179, ^179, ^1

179:
  %% beam_type_SUITE.erl:425
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _5, 
  %%    _6
  _73 = call (`do_booleans_3`/2), _6, _5

  %% Unique:
  %%    _73
  _180 = succeeded:body _73
  br _180, ^180, ^1

180:
  %% Argument types:
  %%    _73 => 'error' | 'ok'
  %% Unique:
  %%    _73
  _458 = bif:'=:=' _73, `ok`
  br _458, ^457, ^182

457:
  %% beam_type_SUITE.erl:426
  _9 = call (`id`/1), `[]`

  %% Aliased:
  %%    _9
  _183 = succeeded:body _9
  br _183, ^183, ^1

183:
  %% beam_type_SUITE.erl:426
  _8 = call (`id`/1), `true`

  %% Aliased:
  %%    _8
  _184 = succeeded:body _8
  br _184, ^184, ^1

184:
  %% beam_type_SUITE.erl:426
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _8, 
  %%    _9
  _74 = call (`do_booleans_3`/2), _9, _8

  %% Unique:
  %%    _74
  _185 = succeeded:body _74
  br _185, ^185, ^1

185:
  %% Argument types:
  %%    _74 => 'error' | 'ok'
  %% Unique:
  %%    _74
  _455 = bif:'=:=' _74, `error`
  br _455, ^454, ^187

454:
  %% beam_type_SUITE.erl:427
  _12 = call (`id`/1), `[a]`

  %% Aliased:
  %%    _12
  _188 = succeeded:body _12
  br _188, ^188, ^1

188:
  %% beam_type_SUITE.erl:427
  _11 = call (`id`/1), `false`

  %% Aliased:
  %%    _11
  _189 = succeeded:body _11
  br _189, ^189, ^1

189:
  %% beam_type_SUITE.erl:427
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _11, 
  %%    _12
  _75 = call (`do_booleans_3`/2), _12, _11

  %% Unique:
  %%    _75
  _190 = succeeded:body _75
  br _190, ^190, ^1

190:
  %% Argument types:
  %%    _75 => 'error' | 'ok'
  %% Unique:
  %%    _75
  _452 = bif:'=:=' _75, `error`
  br _452, ^451, ^192

451:
  %% beam_type_SUITE.erl:428
  _15 = call (`id`/1), `[a]`

  %% Aliased:
  %%    _15
  _193 = succeeded:body _15
  br _193, ^193, ^1

193:
  %% beam_type_SUITE.erl:428
  _14 = call (`id`/1), `true`

  %% Aliased:
  %%    _14
  _194 = succeeded:body _14
  br _194, ^194, ^1

194:
  %% beam_type_SUITE.erl:428
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _14, 
  %%    _15
  _76 = call (`do_booleans_3`/2), _15, _14

  %% Unique:
  %%    _76
  _195 = succeeded:body _76
  br _195, ^195, ^1

195:
  %% Argument types:
  %%    _76 => 'error' | 'ok'
  %% Unique:
  %%    _76
  _449 = bif:'=:=' _76, `error`
  br _449, ^448, ^197

448:
  %% beam_type_SUITE.erl:430
  AnyAtom = call (`id`/1), `atom`

  %% Aliased:
  %%    AnyAtom
  _198 = succeeded:body AnyAtom
  br _198, ^198, ^1

198:
  %% beam_type_SUITE.erl:431
  %% Argument types:
  %%    
  %% Aliased:
  %%    AnyAtom
  _77 = bif:is_atom AnyAtom
  br _77, ^445, ^200

445:
  %% beam_type_SUITE.erl:432
  %% Argument types:
  %%    AnyAtom => atom()
  %% Unique:
  %%    AnyAtom
  _78 = bif:is_boolean AnyAtom
  br _78, ^202, ^442

202:
  %% beam_type_SUITE.erl:432
  _149 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _149
  _444 = succeeded:body _149
  br ^1

442:
  %% beam_type_SUITE.erl:434
  MaybeBool = call (`id`/1), `'maybe'`

  %% Aliased:
  %%    MaybeBool
  _203 = succeeded:body MaybeBool
  br _203, ^203, ^1

203:
  switch MaybeBool, ^205, [
    { `false`, ^209 },
    { `'maybe'`, ^439 },
    { `true`, ^209 }
  ]

439:
  %% beam_type_SUITE.erl:442
  NotBool = call (`id`/1), `a`

  %% Aliased:
  %%    NotBool
  _210 = succeeded:body NotBool
  br _210, ^210, ^1

210:
  switch NotBool, ^212, [
    { `a`, ^621 },
    { `b`, ^621 },
    { `c`, ^621 }
  ]

621:
  br ^630

630:
  _220 = new_try_tag `'catch'`
  br _220, ^218, ^219

218:
  %% beam_type_SUITE.erl:450
  %% Result type:
  %%    none()
  _123 = call (`do_booleans_4`/1), `42`

  %% Aliased:
  %%    _123
  _222 = succeeded:body _123
  br ^219

219:
  %% Unique:
  %%    _220
  _225 = landingpad `'catch'`, _220

  %% Aliased:
  %%    _225
  _223 = extract _225, `0`
  br ^217

217:
  %% Aliased:
  %%    _223
  %% Unique:
  %%    _220
  _26 = catch_end _220, _223

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _432 = is_tagged_tuple _26, `2`, `'EXIT'`
  br _432, ^429, ^228

429:
  %% Argument types:
  %%    _26 => {''EXIT'', any()}
  %% Aliased:
  %%    _26
  _81 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _81
  _426 = bif:is_tuple _81
  br _426, ^426, ^228

426:
  %% Argument types:
  %%    _81 => {...}
  %% Aliased:
  %%    _81
  _427 = bif:tuple_size _81

  %% Argument types:
  %%    _427 => 0..16777215
  %% Unique:
  %%    _427
  _428 = bif:'=:=' _427, `2`
  br _428, ^425, ^228

425:
  %% Argument types:
  %%    _81 => {any(), any()}
  %% Aliased:
  %%    _81
  _84 = get_tuple_element _81, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _424 = bif:'=:=' _84, `{case_clause,false}`
  br _424, ^622, ^228

622:
  br ^631

631:
  _232 = new_try_tag `'catch'`
  br _232, ^230, ^231

230:
  %% beam_type_SUITE.erl:451
  %% Result type:
  %%    none()
  _125 = call (`do_booleans_4`/1), `a`

  %% Aliased:
  %%    _125
  _234 = succeeded:body _125
  br ^231

231:
  %% Unique:
  %%    _232
  _237 = landingpad `'catch'`, _232

  %% Aliased:
  %%    _237
  _235 = extract _237, `0`
  br ^229

229:
  %% Aliased:
  %%    _235
  %% Unique:
  %%    _232
  _28 = catch_end _232, _235

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _420 = is_tagged_tuple _28, `2`, `'EXIT'`
  br _420, ^417, ^240

417:
  %% Argument types:
  %%    _28 => {''EXIT'', any()}
  %% Aliased:
  %%    _28
  _85 = get_tuple_element _28, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _414 = bif:is_tuple _85
  br _414, ^414, ^240

414:
  %% Argument types:
  %%    _85 => {...}
  %% Aliased:
  %%    _85
  _415 = bif:tuple_size _85

  %% Argument types:
  %%    _415 => 0..16777215
  %% Unique:
  %%    _415
  _416 = bif:'=:=' _415, `2`
  br _416, ^413, ^240

413:
  %% Argument types:
  %%    _85 => {any(), any()}
  %% Aliased:
  %%    _85
  _88 = get_tuple_element _85, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _88
  _412 = bif:'=:=' _88, `{case_clause,true}`
  br _412, ^623, ^240

623:
  br ^632

632:
  _244 = new_try_tag `'catch'`
  br _244, ^242, ^243

242:
  %% beam_type_SUITE.erl:452
  %% Result type:
  %%    none()
  _127 = call (`do_booleans_4`/1), `false`

  %% Aliased:
  %%    _127
  _246 = succeeded:body _127
  br ^243

243:
  %% Unique:
  %%    _244
  _249 = landingpad `'catch'`, _244

  %% Aliased:
  %%    _249
  _247 = extract _249, `0`
  br ^241

241:
  %% Aliased:
  %%    _247
  %% Unique:
  %%    _244
  _30 = catch_end _244, _247

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _408 = is_tagged_tuple _30, `2`, `'EXIT'`
  br _408, ^405, ^252

405:
  %% Argument types:
  %%    _30 => {''EXIT'', any()}
  %% Aliased:
  %%    _30
  _89 = get_tuple_element _30, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _402 = bif:is_tuple _89
  br _402, ^402, ^252

402:
  %% Argument types:
  %%    _89 => {...}
  %% Aliased:
  %%    _89
  _403 = bif:tuple_size _89

  %% Argument types:
  %%    _403 => 0..16777215
  %% Unique:
  %%    _403
  _404 = bif:'=:=' _403, `2`
  br _404, ^401, ^252

401:
  %% Argument types:
  %%    _89 => {any(), any()}
  %% Aliased:
  %%    _89
  _92 = get_tuple_element _89, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _400 = bif:'=:=' _92, `{case_clause,true}`
  br _400, ^624, ^252

624:
  br ^633

633:
  _256 = new_try_tag `'catch'`
  br _256, ^254, ^255

254:
  %% beam_type_SUITE.erl:453
  %% Result type:
  %%    none()
  _129 = call (`do_booleans_4`/1), `true`

  %% Aliased:
  %%    _129
  _258 = succeeded:body _129
  br ^255

255:
  %% Unique:
  %%    _256
  _261 = landingpad `'catch'`, _256

  %% Aliased:
  %%    _261
  _259 = extract _261, `0`
  br ^253

253:
  %% Aliased:
  %%    _259
  %% Unique:
  %%    _256
  _32 = catch_end _256, _259

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _396 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _396, ^393, ^264

393:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _93 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _93
  _390 = bif:is_tuple _93
  br _390, ^390, ^264

390:
  %% Argument types:
  %%    _93 => {...}
  %% Aliased:
  %%    _93
  _391 = bif:tuple_size _93

  %% Argument types:
  %%    _391 => 0..16777215
  %% Unique:
  %%    _391
  _392 = bif:'=:=' _391, `2`
  br _392, ^389, ^264

389:
  %% Argument types:
  %%    _93 => {any(), any()}
  %% Aliased:
  %%    _93
  _96 = get_tuple_element _93, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _388 = bif:'=:=' _96, `{badmatch,true}`
  br _388, ^388, ^264

388:
  %% beam_type_SUITE.erl:455
  _36 = call (`id`/1), `0`

  %% Aliased:
  %%    _36
  _265 = succeeded:body _36
  br _265, ^265, ^1

265:
  %% beam_type_SUITE.erl:455
  _35 = call (`id`/1), `<<0>>`

  %% Aliased:
  %%    _35
  _266 = succeeded:body _35
  br _266, ^266, ^1

266:
  %% beam_type_SUITE.erl:455
  _34 = call (`id`/1), `0`

  %% Aliased:
  %%    _34
  _267 = succeeded:body _34
  br _267, ^267, ^1

267:
  %% beam_type_SUITE.erl:455
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    _34, 
  %%    _35, 
  %%    _36
  _97 = call (`do_booleans_5`/3), _36, _35, _34

  %% Unique:
  %%    _97
  _268 = succeeded:body _97
  br _268, ^625, ^1

625:
  br ^634

634:
  _274 = new_try_tag `'catch'`
  br _274, ^272, ^273

272:
  %% beam_type_SUITE.erl:456
  _40 = call (`id`/1), `0`

  %% Aliased:
  %%    _40
  _276 = succeeded:body _40
  br _276, ^276, ^273

276:
  %% beam_type_SUITE.erl:456
  _39 = call (`id`/1), `0`

  %% Aliased:
  %%    _39
  _277 = succeeded:body _39
  br _277, ^277, ^273

277:
  %% beam_type_SUITE.erl:456
  _38 = call (`id`/1), `0`

  %% Aliased:
  %%    _38
  _278 = succeeded:body _38
  br _278, ^278, ^273

278:
  %% beam_type_SUITE.erl:456
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _38, 
  %%    _39, 
  %%    _40
  _131 = call (`do_booleans_6`/3), _40, _39, _38

  %% Aliased:
  %%    _131
  _279 = succeeded:body _131
  br ^273

273:
  %% Unique:
  %%    _274
  _282 = landingpad `'catch'`, _274

  %% Aliased:
  %%    _282
  _280 = extract _282, `0`
  br ^271

271:
  %% Aliased:
  %%    _280
  %% Unique:
  %%    _274
  _41 = catch_end _274, _280

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _381 = is_tagged_tuple _41, `2`, `'EXIT'`
  br _381, ^378, ^285

378:
  %% Argument types:
  %%    _41 => {''EXIT'', any()}
  %% Aliased:
  %%    _41
  _98 = get_tuple_element _41, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _98
  _375 = is_tagged_tuple _98, `2`, `function_clause`
  br _375, ^626, ^285

626:
  br ^635

635:
  _289 = new_try_tag `'catch'`
  br _289, ^287, ^288

287:
  %% beam_type_SUITE.erl:458
  _43 = call (`id`/1), `0`

  %% Aliased:
  %%    _43
  _291 = succeeded:body _43
  br _291, ^291, ^288

291:
  %% beam_type_SUITE.erl:458
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _43
  _133 = call (`do_booleans_7`/1), _43

  %% Unique:
  %%    _133
  _292 = succeeded:body _133
  br _292, ^292, ^288

292:
  br ^286

288:
  %% Unique:
  %%    _289
  _295 = landingpad `'catch'`, _289

  %% Aliased:
  %%    _295
  _293 = extract _295, `0`
  br ^286

286:
  _296 = phi { _293, ^288 }, { `[]`, ^292 }

  %% Aliased:
  %%    _296
  %% Unique:
  %%    _289
  _44 = catch_end _289, _296

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _368 = is_tagged_tuple _44, `2`, `'EXIT'`
  br _368, ^365, ^298

365:
  %% Argument types:
  %%    _44 => {''EXIT'', any()}
  %% Aliased:
  %%    _44
  _102 = get_tuple_element _44, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _362 = bif:is_tuple _102
  br _362, ^362, ^298

362:
  %% Argument types:
  %%    _102 => {...}
  %% Aliased:
  %%    _102
  _363 = bif:tuple_size _102

  %% Argument types:
  %%    _363 => 0..16777215
  %% Unique:
  %%    _363
  _364 = bif:'=:=' _363, `2`
  br _364, ^361, ^298

361:
  %% Argument types:
  %%    _102 => {any(), any()}
  %% Aliased:
  %%    _102
  _105 = get_tuple_element _102, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _105
  _358 = is_tagged_tuple _105, `2`, `bad_filter`
  br _358, ^627, ^298

627:
  br ^636

636:
  _302 = new_try_tag `'catch'`
  br _302, ^300, ^301

300:
  %% beam_type_SUITE.erl:459
  _46 = call (`id`/1), `0`

  %% Aliased:
  %%    _46
  _304 = succeeded:body _46
  br _304, ^304, ^301

304:
  %% beam_type_SUITE.erl:459
  %% Result type:
  %%    'false' | 'true' | 0..'+inf'
  %% Aliased:
  %%    _46
  _135 = call (`do_booleans_8`/1), _46

  %% Aliased:
  %%    _135
  _305 = succeeded:body _135
  br _305, ^305, ^301

305:
  br ^299

301:
  %% Unique:
  %%    _302
  _308 = landingpad `'catch'`, _302

  %% Aliased:
  %%    _308
  _306 = extract _308, `0`
  br ^299

299:
  _309 = phi { _306, ^301 }, { _135, ^305 }

  %% Aliased:
  %%    _309
  %% Unique:
  %%    _302
  _47 = catch_end _302, _309

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _351 = is_tagged_tuple _47, `2`, `'EXIT'`
  br _351, ^348, ^311

348:
  %% Argument types:
  %%    _47 => {''EXIT'', any()}
  %% Aliased:
  %%    _47
  _108 = get_tuple_element _47, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _345 = is_tagged_tuple _108, `2`, `function_clause`
  br _345, ^628, ^311

628:
  br ^637

637:
  _315 = new_try_tag `'catch'`
  br _315, ^313, ^314

313:
  %% beam_type_SUITE.erl:460
  _49 = call (`id`/1), `0`

  %% Aliased:
  %%    _49
  _317 = succeeded:body _49
  br _317, ^317, ^314

317:
  %% beam_type_SUITE.erl:460
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _49
  _137 = call (`do_booleans_9`/1), _49

  %% Unique:
  %%    _137
  _318 = succeeded:body _137
  br _318, ^318, ^314

318:
  br ^312

314:
  %% Unique:
  %%    _315
  _321 = landingpad `'catch'`, _315

  %% Aliased:
  %%    _321
  _319 = extract _321, `0`
  br ^312

312:
  _322 = phi { _319, ^314 }, { _137, ^318 }

  %% Aliased:
  %%    _322
  %% Unique:
  %%    _315
  _50 = catch_end _315, _322

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _338 = is_tagged_tuple _50, `2`, `'EXIT'`
  br _338, ^335, ^324

335:
  %% Argument types:
  %%    _50 => {''EXIT'', any()}
  %% Aliased:
  %%    _50
  _112 = get_tuple_element _50, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _332 = bif:is_tuple _112
  br _332, ^332, ^324

332:
  %% Argument types:
  %%    _112 => {...}
  %% Aliased:
  %%    _112
  _333 = bif:tuple_size _112

  %% Argument types:
  %%    _333 => 0..16777215
  %% Unique:
  %%    _333
  _334 = bif:'=:=' _333, `2`
  br _334, ^331, ^324

331:
  %% Argument types:
  %%    _112 => {any(), any()}
  %% Aliased:
  %%    _112
  _115 = get_tuple_element _112, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _328 = is_tagged_tuple _115, `2`, `try_clause`
  br _328, ^325, ^324

325:
  %% Result type:
  %%    'ok'
  ret `ok`

324:
  %% beam_type_SUITE.erl:460
  %% Aliased:
  %%    _50
  _138 = match_fail `badmatch`, _50

  %% Unique:
  %%    _138
  _341 = succeeded:body _138
  br ^1

311:
  %% beam_type_SUITE.erl:459
  %% Aliased:
  %%    _47
  _139 = match_fail `badmatch`, _47

  %% Unique:
  %%    _139
  _354 = succeeded:body _139
  br ^1

298:
  %% beam_type_SUITE.erl:458
  %% Aliased:
  %%    _44
  _140 = match_fail `badmatch`, _44

  %% Unique:
  %%    _140
  _371 = succeeded:body _140
  br ^1

285:
  %% beam_type_SUITE.erl:456
  %% Aliased:
  %%    _41
  _141 = match_fail `badmatch`, _41

  %% Unique:
  %%    _141
  _384 = succeeded:body _141
  br ^1

264:
  %% beam_type_SUITE.erl:453
  %% Aliased:
  %%    _32
  _143 = match_fail `badmatch`, _32

  %% Unique:
  %%    _143
  _399 = succeeded:body _143
  br ^1

252:
  %% beam_type_SUITE.erl:452
  %% Aliased:
  %%    _30
  _144 = match_fail `badmatch`, _30

  %% Unique:
  %%    _144
  _411 = succeeded:body _144
  br ^1

240:
  %% beam_type_SUITE.erl:451
  %% Aliased:
  %%    _28
  _145 = match_fail `badmatch`, _28

  %% Unique:
  %%    _145
  _423 = succeeded:body _145
  br ^1

228:
  %% beam_type_SUITE.erl:450
  %% Aliased:
  %%    _26
  _146 = match_fail `badmatch`, _26

  %% Unique:
  %%    _146
  _435 = succeeded:body _146
  br ^1

212:
  %% beam_type_SUITE.erl:443
  %% Aliased:
  %%    NotBool
  _121 = match_fail `case_clause`, NotBool

  %% Unique:
  %%    _121
  _214 = succeeded:body _121
  br ^1

209:
  %% beam_type_SUITE.erl:440
  _148 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _148
  _441 = succeeded:body _148
  br ^1

205:
  %% beam_type_SUITE.erl:435
  %% Aliased:
  %%    MaybeBool
  _120 = match_fail `case_clause`, MaybeBool

  %% Unique:
  %%    _120
  _207 = succeeded:body _120
  br ^1

200:
  %% beam_type_SUITE.erl:431
  _150 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _150
  _447 = succeeded:body _150
  br ^1

197:
  %% beam_type_SUITE.erl:428
  _151 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _151
  _450 = succeeded:body _151
  br ^1

192:
  %% beam_type_SUITE.erl:427
  _152 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _152
  _453 = succeeded:body _152
  br ^1

187:
  %% beam_type_SUITE.erl:426
  _153 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _153
  _456 = succeeded:body _153
  br ^1

182:
  %% beam_type_SUITE.erl:425
  _154 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _154
  _459 = succeeded:body _154
  br ^1

177:
  %% beam_type_SUITE.erl:423
  _155 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _155
  _462 = succeeded:body _155
  br ^1

174:
  %% beam_type_SUITE.erl:422
  _156 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _156
  _465 = succeeded:body _156
  br ^1

171:
  %% beam_type_SUITE.erl:420
  %% Aliased:
  %%    _1
  _157 = match_fail `badmatch`, _1

  %% Unique:
  %%    _157
  _482 = succeeded:body _157
  br ^1

1:
  _158 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _158
}

%% beam_type_SUITE.erl:464
%% Counter = 11
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
function `beam_type_SUITE`:`do_booleans_1`(_0) {
0:
  %% beam_type_SUITE.erl:465
  _3 = match_fail `case_clause`, `true`

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_type_SUITE.erl:470
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     41..42
function `beam_type_SUITE`:`do_booleans_2`(_0, _1) {
0:
  %% beam_type_SUITE.erl:471
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _1
  _2 = call (`do_booleans_cmp`/2), _0, _1

  %% Unique:
  %%    _2
  _10 = succeeded:body _2
  br _10, ^11, ^1

11:
  br _2, ^19, ^16

19:
  %% Result type:
  %%    'ok'
  ret `ok`

16:
  %% Result type:
  %%    'error'
  ret `error`

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_type_SUITE.erl:481
%% Counter = 5
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     41..42
function `beam_type_SUITE`:`do_booleans_cmp`(_0, _1) {
0:
  %% beam_type_SUITE.erl:481
  %% Argument types:
  %%    _1 => 41..42
  %% Unique:
  %%    _1
  _2 = bif:'>' `42`, _1
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _2
  ret _2
}

%% beam_type_SUITE.erl:483
%% Counter = 20
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_3`(_0, _1) {
0:
  %% beam_type_SUITE.erl:484
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _5 = bif:'=:=' _0, `[]`
  br _5, ^17, ^11

17:
  %% Aliased:
  %%    _1
  _19 = bif:'=:=' _1, `false`
  br _19, ^18, ^11

18:
  %% Result type:
  %%    'ok'
  ret `ok`

11:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_type_SUITE.erl:490
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 'false' | 'true' | 42
function `beam_type_SUITE`:`do_booleans_4`(_0) {
0:
  %% beam_type_SUITE.erl:491
  %% Argument types:
  %%    _0 => 'a' | 'false' | 'true' | 42
  %% Unique:
  %%    _0
  _3 = bif:is_atom _0

  %% Argument types:
  %%    _0 => 'a' | 'false' | 'true' | 42
  %% Unique:
  %%    _0
  _10 = bif:'=:=' _0, `true`
  br _10, ^12, ^9

12:
  %% beam_type_SUITE.erl:493
  _4 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _4
  _15 = succeeded:body _4
  br ^1

9:
  %% beam_type_SUITE.erl:491
  %% Unique:
  %%    _3
  _5 = match_fail `case_clause`, _3

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:497
%% Counter = 72
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     
%%     accepts_match_context
function `beam_type_SUITE`:`do_booleans_5`(_0, _1, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  %% Anno: #{accepts_match_contexts => true}
  _23 = bs_start_match `new`, _1

  %% Aliased:
  %%    _23
  _54 = succeeded:guard _23
  br _54, ^54, ^63

54:
  _70 = bs_ensure _23, `8`, `1`
  _71 = succeeded:guard _70
  br _71, ^69, ^40

69:
  %% beam_type_SUITE.erl:497
  %% Argument types:
  %%    _70 => bs_context(1)
  %% Aliased:
  %%    _23
  %% Anno: #{ensured => true}
  _24 = bs_match `integer`, _70, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _24
  _41 = succeeded:guard _24
  br _41, ^41, ^40

41:
  %% Aliased:
  %%    _24
  _25 = bs_extract _24

  %% Aliased:
  %%    _24
  _53 = bs_test_tail _24, `0`
  br _53, ^53, ^40

53:
  %% beam_type_SUITE.erl:497
  %% Argument types:
  %%    _25 => 0..255
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _25
  _20 = bif:'=:=' _25, _0
  br _20, ^62, ^40

62:
  %% beam_type_SUITE.erl:497
  %% Argument types:
  %%    _0 => 0..255
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _0
  _18 = bif:'=:=' _2, _0
  br _18, ^51, ^40

51:
  %% Result type:
  %%    'true'
  ret `true`

40:
  %% Aliased:
  %%    _23
  _68 = bs_get_tail _23

  %% beam_type_SUITE.erl:497
  %% Aliased:
  %%    _0, 
  %%    _2, 
  %%    _68
  %% Anno: #{inlined => {'-inlined-do_booleans_5/3-',3}}
  _37 = match_fail `function_clause`, _0, _68, _2

  %% Unique:
  %%    _37
  _55 = succeeded:body _37
  br ^1

63:
  %% beam_type_SUITE.erl:497
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  %% Anno: #{inlined => {'-inlined-do_booleans_5/3-',3}}
  _65 = match_fail `function_clause`, _0, _1, _2

  %% Unique:
  %%    _65
  _66 = succeeded:body _65
  br ^1

1:
  _67 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _67
}

%% beam_type_SUITE.erl:500
%% Counter = 52
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_6`(_0, _1, _2) {
0:
  %% Aliased:
  %%    _2
  _49 = is_nonempty_list _2
  br _49, ^49, ^40

49:
  %% Argument types:
  %%    _2 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _2
  _24 = get_tl _2

  %% beam_type_SUITE.erl:500
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _21 = bif:'=:=' _1, _0

  %% beam_type_SUITE.erl:500
  %% Argument types:
  %%    _2 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0, 
  %%    _2
  _19 = bif:'=:=' _2, _0

  %% beam_type_SUITE.erl:500
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _24
  _17 = bif:'=:=' _24, _0

  %% Argument types:
  %%    _19 => 'false' | 'true'
  %%    _17 => 'false' | 'true'
  %% Unique:
  %%    _17, 
  %%    _19
  _22 = bif:'and' _19, _17

  %% Argument types:
  %%    _21 => 'false' | 'true'
  %%    _22 => 'false' | 'true'
  %% Unique:
  %%    _21, 
  %%    _22
  _26 = bif:'and' _21, _22
  br _26, ^47, ^40

47:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _31 = put_tuple _0

  %% beam_type_SUITE.erl:501
  %% Result type:
  %%    none()
  %% Unique:
  %%    _31
  _36 = call (`'-do_booleans_6/3-lc$^0/1-0-'`/1), _31

  %% Aliased:
  %%    _36
  _48 = succeeded:body _36
  br ^1

40:
  %% beam_type_SUITE.erl:500
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  %% Anno: #{inlined => {'-inlined-do_booleans_6/3-',3}}
  _37 = match_fail `function_clause`, _0, _1, _2

  %% Unique:
  %%    _37
  _50 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% beam_type_SUITE.erl:506
%% Counter = 81
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_7`(_0) {
0:
  br ^80

80:
  _36 = new_try_tag `'try'`
  br _36, ^35, ^33

35:
  %% beam_type_SUITE.erl:508
  _1 = call (`beam_type_SUITE`:`id`/1), `[]`

  %% Aliased:
  %%    _1
  _37 = succeeded:body _1
  br _37, ^37, ^33

37:
  %% beam_type_SUITE.erl:508
  %% Aliased:
  %%    _1
  _2 = call (`erlang`:`'++'`/2), _1, `[]`

  %% Aliased:
  %%    _2
  _38 = succeeded:body _2
  br _38, ^38, ^33

38:
  %% beam_type_SUITE.erl:508
  %% Aliased:
  %%    _2
  _3 = call (`erlang`:`'--'`/2), _2, `[]`

  %% beam_type_SUITE.erl:508
  %% Argument types:
  %%    _3 => list(any())
  %% Aliased:
  %%    _3
  _4 = bif:'=/=' _3, `ok`

  %% beam_type_SUITE.erl:508
  %% Argument types:
  %%    _4 => 'false' | 'true'
  %% Unique:
  %%    _4
  _20 = bif:'xor' _4, `true`
  br _20, ^43, ^42

43:
  br ^41

42:
  br ^41

41:
  _23 = phi { `[]`, ^42 }, { `[0]`, ^43 }

  %% Unique:
  %%    _36
  _59 = kill_try_tag _36

  %% beam_type_SUITE.erl:510
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _23
  _21 = call (`do_booleans_7_a`/1), _23

  %% Unique:
  %%    _21
  _44 = succeeded:body _21
  br _44, ^46, ^1

46:
  %% beam_type_SUITE.erl:510
  _26 = match_fail `bad_filter`, `[]`

  %% Unique:
  %%    _26
  _50 = succeeded:body _26
  br ^1

33:
  %% Unique:
  %%    _36
  _57 = landingpad `'try'`, _36

  %% Aliased:
  %%    _57
  _12 = extract _57, `0`

  %% Aliased:
  %%    _57
  _11 = extract _57, `1`

  %% Aliased:
  %%    _57
  _10 = extract _57, `2`

  %% Unique:
  %%    _36
  _58 = kill_try_tag _36

  %% Argument types:
  %%    _12 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _12
  _55 = bif:'=:=' _12, `throw`
  br _55, ^54, ^52

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _53 = bif:'=:=' _11, `[]`
  br _53, ^63, ^52

63:
  %% beam_type_SUITE.erl:507
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0
  _29 = call (`do_booleans_7_a`/1), _0

  %% Unique:
  %%    _29
  _60 = succeeded:body _29
  br _60, ^60, ^1

60:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _29
  ret _29

52:
  %% Aliased:
  %%    _10, 
  %%    _11
  _28 = resume _10, _11

  %% Unique:
  %%    _28
  _56 = succeeded:body _28
  br ^1

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% beam_type_SUITE.erl:517
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_7_a`(_0) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:520
%% Counter = 86
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_8`(_0) {
0:
  %% Aliased:
  %%    _0
  _67 = is_nonempty_list _0
  br _67, ^67, ^38

67:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _20 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _19 = get_tl _0
  _43 = new_try_tag `'try'`
  br _43, ^42, ^40

42:
  %% beam_type_SUITE.erl:522
  %% Result type:
  %%    list('ok')
  %% Aliased:
  %%    _19
  _7 = call (`'-do_booleans_8/1-lc$^0/1-0-'`/1), _19

  %% Unique:
  %%    _7
  _44 = succeeded:body _7
  br _44, ^84, ^40

84:
  br ^85

85:
  _48 = new_try_tag `'catch'`
  br _48, ^46, ^47

46:
  %% beam_type_SUITE.erl:522
  _32 = call (`erlang`:`error`/1), `badarg`

  %% Aliased:
  %%    _32
  _50 = succeeded:body _32
  br ^47

47:
  %% Unique:
  %%    _48
  _53 = landingpad `'catch'`, _48

  %% Aliased:
  %%    _53
  _51 = extract _53, `0`
  br ^45

45:
  %% Aliased:
  %%    _51
  %% Unique:
  %%    _48
  _1 = catch_end _48, _51

  %% beam_type_SUITE.erl:522
  %% Argument types:
  %%    _7 => list('ok')
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _7
  _8 = bif:'>' _7, _1

  %% beam_type_SUITE.erl:522
  %% Argument types:
  %%    _8 => 'false' | 'true'
  %% Unique:
  %%    _8
  _33 = bif:'xor' _8, `false`

  %% Unique:
  %%    _43
  _66 = kill_try_tag _43
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _33
  ret _33

40:
  %% Unique:
  %%    _43
  _64 = landingpad `'try'`, _43

  %% Aliased:
  %%    _64
  _12 = extract _64, `0`

  %% Aliased:
  %%    _64
  _11 = extract _64, `1`

  %% Aliased:
  %%    _64
  _10 = extract _64, `2`

  %% Unique:
  %%    _43
  _65 = kill_try_tag _43

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _25 = bs_start_match `new`, _11

  %% Aliased:
  %%    _25
  _62 = succeeded:guard _25
  br _62, ^62, ^57

62:
  %% beam_type_SUITE.erl:524
  %% Argument types:
  %%    _25 => bs_context(1)
  %% Aliased:
  %%    _20, 
  %%    _25
  _26 = bs_match `integer`, _25, `[unsigned,big]`, _20, `1`

  %% Aliased:
  %%    _26
  _58 = succeeded:guard _26
  br _58, ^58, ^57

58:
  %% Aliased:
  %%    _26
  _27 = bs_extract _26

  %% Aliased:
  %%    _26
  _61 = bs_test_tail _26, `0`
  br _61, ^61, ^57

61:
  %% Argument types:
  %%    _12 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _12
  _60 = bif:'=:=' _12, `throw`
  br _60, ^59, ^57

59:
  %% Result type:
  %%    0..'+inf'
  %% Aliased:
  %%    _27
  ret _27

57:
  %% Aliased:
  %%    _10, 
  %%    _11
  _34 = resume _10, _11

  %% Unique:
  %%    _34
  _63 = succeeded:body _34
  br ^1

38:
  %% beam_type_SUITE.erl:520
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-do_booleans_8/1-',1}}
  _35 = match_fail `function_clause`, _0

  %% Unique:
  %%    _35
  _68 = succeeded:body _35
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% beam_type_SUITE.erl:528
%% Counter = 99
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_booleans_9`(_0) {
0:
  br ^97

97:
  _32 = new_try_tag `'try'`
  br _32, ^31, ^29

31:
  %% beam_type_SUITE.erl:530
  _3 = call (`erlang`:`garbage_collect`/0)

  %% Aliased:
  %%    _3
  _33 = succeeded:body _3
  br _33, ^33, ^29

33:
  %% beam_type_SUITE.erl:530
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _4 = bif:'or' _3, `true`

  %% Unique:
  %%    _4
  _34 = succeeded:body _4
  br _34, ^92, ^29

92:
  %% beam_type_SUITE.erl:531
  _93 = float:put `1.0`

  %% beam_type_SUITE.erl:531
  _94 = float:put `0.0`
  br ^98

98:
  _38 = new_try_tag `'catch'`
  br _38, ^36, ^37

36:
  %% beam_type_SUITE.erl:531
  %% Unique:
  %%    _93, 
  %%    _94
  _95 = float:'/' _93, _94

  %% Unique:
  %%    _95
  _40 = succeeded:body _95
  br _40, ^96, ^37

96:
  %% Unique:
  %%    _95
  _19 = float:get _95
  br ^35

37:
  %% Unique:
  %%    _38
  _43 = landingpad `'catch'`, _38

  %% Aliased:
  %%    _43
  _41 = extract _43, `0`
  br ^35

35:
  _44 = phi { _41, ^37 }, { _19, ^96 }

  %% Aliased:
  %%    _44
  %% Unique:
  %%    _38
  _1 = catch_end _38, _44

  %% beam_type_SUITE.erl:531
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = bif:is_tuple _1

  %% beam_type_SUITE.erl:530
  %% Argument types:
  %%    _4 => 'false' | 'true'
  %%    _2 => 'false' | 'true'
  %% Unique:
  %%    _2, 
  %%    _4
  _20 = bif:'xor' _4, _2

  %% Unique:
  %%    _32
  _57 = kill_try_tag _32

  %% beam_type_SUITE.erl:529
  %% Unique:
  %%    _20
  _22 = match_fail `try_clause`, _20

  %% Unique:
  %%    _22
  _49 = succeeded:body _22
  br ^1

29:
  %% Unique:
  %%    _32
  _55 = landingpad `'try'`, _32

  %% Aliased:
  %%    _55
  _9 = extract _55, `0`

  %% Aliased:
  %%    _55
  _8 = extract _55, `1`

  %% Aliased:
  %%    _55
  _7 = extract _55, `2`

  %% Unique:
  %%    _32
  _56 = kill_try_tag _32

  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _9
  _53 = bif:'=:=' _9, `throw`
  br _53, ^50, ^51

50:
  %% beam_type_SUITE.erl:538
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _60 = bif:'<' `ok`, _0
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _60
  ret _60

51:
  %% Aliased:
  %%    _7, 
  %%    _8
  _24 = resume _7, _8

  %% Unique:
  %%    _24
  _54 = succeeded:body _24
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_type_SUITE.erl:543
%% Counter = 855
%% bs_ensure_opt: true
function `beam_type_SUITE`:`setelement`(_0) {
0:
  %% beam_type_SUITE.erl:544
  T0 = call (`id`/1), `{a,42}`

  %% Aliased:
  %%    T0
  _228 = succeeded:body T0
  br _228, ^228, ^1

228:
  %% Argument types:
  %%    
  %% Aliased:
  %%    T0
  _663 = is_tagged_tuple T0, `2`, `a`
  br _663, ^653, ^230

653:
  %% beam_type_SUITE.erl:547
  _4 = call (`id`/1), `1`

  %% Aliased:
  %%    _4
  _234 = succeeded:body _4
  br _234, ^234, ^1

234:
  %% beam_type_SUITE.erl:547
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  %% Anno: #{unit => 32}
  _5 = bs_create_bin `integer`, `[1,{segment,1}]`, _4, `32`

  %% Aliased:
  %%    _5
  _235 = succeeded:body _5
  br _235, ^235, ^1

235:
  %% beam_type_SUITE.erl:547
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _5
  _96 = call (`do_setelement_1`/3), _5, `{a,b}`, `z`

  %% Aliased:
  %%    _96
  _236 = succeeded:body _96
  br _236, ^236, ^1

236:
  %% Argument types:
  %%    _96 => {any(), any()}
  %% Aliased:
  %%    _96
  _651 = bif:'=:=' _96, `{z,b}`
  br _651, ^651, ^238

651:
  %% beam_type_SUITE.erl:548
  _7 = call (`id`/1), `1`

  %% Aliased:
  %%    _7
  _239 = succeeded:body _7
  br _239, ^239, ^1

239:
  %% beam_type_SUITE.erl:548
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  %% Anno: #{unit => 1}
  _8 = bs_create_bin `integer`, `[1,{segment,1}]`, _7, `1`

  %% Aliased:
  %%    _8
  _240 = succeeded:body _8
  br _240, ^240, ^1

240:
  %% beam_type_SUITE.erl:548
  %% Result type:
  %%    {'new', 'two'}
  %% Aliased:
  %%    _8
  _97 = call (`do_setelement_2`/3), _8, `{one,two}`, `new`

  %% Aliased:
  %%    _97
  _241 = succeeded:body _97
  br _241, ^649, ^1

649:
  %% beam_type_SUITE.erl:549
  _11 = call (`id`/1), `1`

  %% Aliased:
  %%    _11
  _244 = succeeded:body _11
  br _244, ^244, ^1

244:
  %% beam_type_SUITE.erl:549
  _10 = call (`id`/1), `{a,b}`

  %% Aliased:
  %%    _10
  _245 = succeeded:body _10
  br _245, ^245, ^1

245:
  %% beam_type_SUITE.erl:549
  %% Aliased:
  %%    _10, 
  %%    _11
  _98 = call (`erlang`:`setelement`/3), _11, _10, `x`

  %% Aliased:
  %%    _98
  _246 = succeeded:body _98
  br _246, ^246, ^1

246:
  %% Argument types:
  %%    _98 => {any(), ...}
  %% Aliased:
  %%    _98
  _647 = bif:'=:=' _98, `{x,b}`
  br _647, ^647, ^248

647:
  %% beam_type_SUITE.erl:551
  _99 = call (`id`/1), `1`

  %% Aliased:
  %%    _99
  _249 = succeeded:body _99
  br _249, ^249, ^1

249:
  switch _99, ^251, [
    { `0`, ^252 },
    { `1`, ^253 }
  ]

253:
  br ^250

252:
  br ^250

250:
  _14 = phi { `1`, ^252 }, { `2`, ^253 }

  %% beam_type_SUITE.erl:555
  %% Unique:
  %%    _14
  _100 = call (`erlang`:`setelement`/3), _14, `{a,b,c}`, `x`

  %% Argument types:
  %%    _100 => {any(), any(), any()}
  %% Aliased:
  %%    _100
  _645 = bif:'=:=' _100, `{a,x,c}`
  br _645, ^645, ^257

645:
  %% beam_type_SUITE.erl:557
  _101 = call (`id`/1), `1`

  %% Aliased:
  %%    _101
  _258 = succeeded:body _101
  br _258, ^258, ^1

258:
  switch _101, ^260, [
    { `0`, ^261 },
    { `1`, ^262 }
  ]

262:
  br ^259

261:
  br ^259

259:
  _18 = phi { `4`, ^261 }, { `5`, ^262 }
  _267 = new_try_tag `'catch'`
  br _267, ^265, ^266

265:
  %% beam_type_SUITE.erl:561
  %% Unique:
  %%    _18
  _178 = call (`erlang`:`setelement`/3), _18, `{a,b,c}`, `y`

  %% Aliased:
  %%    _178
  _269 = succeeded:body _178
  br ^266

266:
  %% Unique:
  %%    _267
  _272 = landingpad `'catch'`, _267

  %% Aliased:
  %%    _272
  _270 = extract _272, `0`
  br ^264

264:
  %% Aliased:
  %%    _270
  %% Unique:
  %%    _267
  _20 = catch_end _267, _270

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _641 = is_tagged_tuple _20, `2`, `'EXIT'`
  br _641, ^638, ^275

638:
  %% Argument types:
  %%    _20 => {''EXIT'', any()}
  %% Aliased:
  %%    _20
  _102 = get_tuple_element _20, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _635 = is_tagged_tuple _102, `2`, `badarg`
  br _635, ^632, ^275

632:
  %% beam_type_SUITE.erl:565
  %% Result type:
  %%    integer() | {any()}
  _22 = call (`tuple_or_integer`/1), `0`

  %% Aliased:
  %%    _22
  _276 = succeeded:body _22
  br _276, ^276, ^1

276:
  %% beam_type_SUITE.erl:565
  %% Aliased:
  %%    _22
  _106 = update_tuple _22, `1`, `y`

  %% Aliased:
  %%    _106
  _277 = succeeded:body _106
  br _277, ^630, ^1

630:
  %% beam_type_SUITE.erl:566
  %% Result type:
  %%    integer() | {'tuple'}
  _24 = call (`record_or_integer`/1), `0`

  %% Aliased:
  %%    _24
  _280 = succeeded:body _24
  br _280, ^280, ^1

280:
  %% beam_type_SUITE.erl:566
  %% Aliased:
  %%    _24
  _107 = update_tuple _24, `1`, `y`

  %% Aliased:
  %%    _107
  _281 = succeeded:body _107
  br _281, ^833, ^1

833:
  br ^844

844:
  _287 = new_try_tag `'catch'`
  br _287, ^285, ^286

285:
  %% beam_type_SUITE.erl:567
  _26 = call (`id`/1), `0`

  %% Aliased:
  %%    _26
  _289 = succeeded:body _26
  br _289, ^289, ^286

289:
  %% beam_type_SUITE.erl:567
  %% Result type:
  %%    integer() | {any()}
  %% Aliased:
  %%    _26
  _27 = call (`tuple_or_integer`/1), _26

  %% Aliased:
  %%    _27
  _290 = succeeded:body _27
  br _290, ^290, ^286

290:
  %% beam_type_SUITE.erl:567
  %% Aliased:
  %%    _27
  _180 = update_tuple _27, `2`, `y`

  %% Aliased:
  %%    _180
  _291 = succeeded:body _180
  br ^286

286:
  %% Unique:
  %%    _287
  _294 = landingpad `'catch'`, _287

  %% Aliased:
  %%    _294
  _292 = extract _294, `0`
  br ^284

284:
  %% Aliased:
  %%    _292
  %% Unique:
  %%    _287
  _28 = catch_end _287, _292

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _624 = is_tagged_tuple _28, `2`, `'EXIT'`
  br _624, ^621, ^297

621:
  %% Argument types:
  %%    _28 => {''EXIT'', any()}
  %% Aliased:
  %%    _28
  _108 = get_tuple_element _28, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _618 = is_tagged_tuple _108, `2`, `badarg`
  br _618, ^834, ^297

834:
  br ^845

845:
  _301 = new_try_tag `'catch'`
  br _301, ^299, ^300

299:
  %% beam_type_SUITE.erl:568
  _30 = call (`id`/1), `1`

  %% Aliased:
  %%    _30
  _303 = succeeded:body _30
  br _303, ^303, ^300

303:
  %% beam_type_SUITE.erl:568
  %% Result type:
  %%    integer() | {any()}
  %% Aliased:
  %%    _30
  _31 = call (`tuple_or_integer`/1), _30

  %% Aliased:
  %%    _31
  _304 = succeeded:body _31
  br _304, ^304, ^300

304:
  %% beam_type_SUITE.erl:568
  %% Aliased:
  %%    _31
  _182 = update_tuple _31, `2`, `y`

  %% Aliased:
  %%    _182
  _305 = succeeded:body _182
  br ^300

300:
  %% Unique:
  %%    _301
  _308 = landingpad `'catch'`, _301

  %% Aliased:
  %%    _308
  _306 = extract _308, `0`
  br ^298

298:
  %% Aliased:
  %%    _306
  %% Unique:
  %%    _301
  _32 = catch_end _301, _306

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _611 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _611, ^608, ^311

608:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _112 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _112
  _605 = is_tagged_tuple _112, `2`, `badarg`
  br _605, ^835, ^311

835:
  br ^846

846:
  _315 = new_try_tag `'catch'`
  br _315, ^313, ^314

313:
  %% beam_type_SUITE.erl:569
  _34 = call (`id`/1), `0`

  %% Aliased:
  %%    _34
  _317 = succeeded:body _34
  br _317, ^317, ^314

317:
  %% beam_type_SUITE.erl:569
  %% Result type:
  %%    integer() | {'tuple'}
  %% Aliased:
  %%    _34
  _35 = call (`record_or_integer`/1), _34

  %% Aliased:
  %%    _35
  _318 = succeeded:body _35
  br _318, ^318, ^314

318:
  %% beam_type_SUITE.erl:569
  %% Aliased:
  %%    _35
  _184 = update_tuple _35, `2`, `y`

  %% Aliased:
  %%    _184
  _319 = succeeded:body _184
  br ^314

314:
  %% Unique:
  %%    _315
  _322 = landingpad `'catch'`, _315

  %% Aliased:
  %%    _322
  _320 = extract _322, `0`
  br ^312

312:
  %% Aliased:
  %%    _320
  %% Unique:
  %%    _315
  _36 = catch_end _315, _320

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _598 = is_tagged_tuple _36, `2`, `'EXIT'`
  br _598, ^595, ^325

595:
  %% Argument types:
  %%    _36 => {''EXIT'', any()}
  %% Aliased:
  %%    _36
  _116 = get_tuple_element _36, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _116
  _592 = is_tagged_tuple _116, `2`, `badarg`
  br _592, ^836, ^325

836:
  br ^847

847:
  _329 = new_try_tag `'catch'`
  br _329, ^327, ^328

327:
  %% beam_type_SUITE.erl:570
  _38 = call (`id`/1), `1`

  %% Aliased:
  %%    _38
  _331 = succeeded:body _38
  br _331, ^331, ^328

331:
  %% beam_type_SUITE.erl:570
  %% Result type:
  %%    integer() | {'tuple'}
  %% Aliased:
  %%    _38
  _39 = call (`record_or_integer`/1), _38

  %% Aliased:
  %%    _39
  _332 = succeeded:body _39
  br _332, ^332, ^328

332:
  %% beam_type_SUITE.erl:570
  %% Aliased:
  %%    _39
  _186 = update_tuple _39, `2`, `y`

  %% Aliased:
  %%    _186
  _333 = succeeded:body _186
  br ^328

328:
  %% Unique:
  %%    _329
  _336 = landingpad `'catch'`, _329

  %% Aliased:
  %%    _336
  _334 = extract _336, `0`
  br ^326

326:
  %% Aliased:
  %%    _334
  %% Unique:
  %%    _329
  _40 = catch_end _329, _334

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _585 = is_tagged_tuple _40, `2`, `'EXIT'`
  br _585, ^582, ^339

582:
  %% Argument types:
  %%    _40 => {''EXIT'', any()}
  %% Aliased:
  %%    _40
  _120 = get_tuple_element _40, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _120
  _579 = is_tagged_tuple _120, `2`, `badarg`
  br _579, ^837, ^339

837:
  br ^848

848:
  _343 = new_try_tag `'catch'`
  br _343, ^341, ^342

341:
  %% beam_type_SUITE.erl:571
  _42 = call (`id`/1), `2`

  %% Aliased:
  %%    _42
  _345 = succeeded:body _42
  br _345, ^345, ^342

345:
  %% beam_type_SUITE.erl:571
  %% Aliased:
  %%    _42
  _188 = call (`erlang`:`setelement`/3), _42, `not_a_tuple`, `y`

  %% Aliased:
  %%    _188
  _346 = succeeded:body _188
  br ^342

342:
  %% Unique:
  %%    _343
  _349 = landingpad `'catch'`, _343

  %% Aliased:
  %%    _349
  _347 = extract _349, `0`
  br ^340

340:
  %% Aliased:
  %%    _347
  %% Unique:
  %%    _343
  _43 = catch_end _343, _347

  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _572 = is_tagged_tuple _43, `2`, `'EXIT'`
  br _572, ^569, ^352

569:
  %% Argument types:
  %%    _43 => {''EXIT'', any()}
  %% Aliased:
  %%    _43
  _124 = get_tuple_element _43, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _124
  _566 = is_tagged_tuple _124, `2`, `badarg`
  br _566, ^838, ^352

838:
  br ^849

849:
  _356 = new_try_tag `'catch'`
  br _356, ^354, ^355

354:
  %% beam_type_SUITE.erl:574
  _190 = update_tuple `not_a_tuple`, `2`, `y`

  %% Unique:
  %%    _190
  _358 = succeeded:body _190
  br ^355

355:
  %% Unique:
  %%    _356
  _361 = landingpad `'catch'`, _356

  %% Aliased:
  %%    _361
  _359 = extract _361, `0`
  br ^353

353:
  %% Aliased:
  %%    _359
  %% Unique:
  %%    _356
  _45 = catch_end _356, _359

  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _559 = is_tagged_tuple _45, `2`, `'EXIT'`
  br _559, ^556, ^364

556:
  %% Argument types:
  %%    _45 => {''EXIT'', any()}
  %% Aliased:
  %%    _45
  _128 = get_tuple_element _45, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _553 = is_tagged_tuple _128, `2`, `badarg`
  br _553, ^839, ^364

839:
  br ^850

850:
  _368 = new_try_tag `'catch'`
  br _368, ^366, ^367

366:
  %% beam_type_SUITE.erl:575
  _192 = call (`erlang`:`setelement`/3), `not_an_index`, `{a,b,c}`, `y`

  %% Aliased:
  %%    _192
  _370 = succeeded:body _192
  br ^367

367:
  %% Unique:
  %%    _368
  _373 = landingpad `'catch'`, _368

  %% Aliased:
  %%    _373
  _371 = extract _373, `0`
  br ^365

365:
  %% Aliased:
  %%    _371
  %% Unique:
  %%    _368
  _47 = catch_end _368, _371

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _546 = is_tagged_tuple _47, `2`, `'EXIT'`
  br _546, ^543, ^376

543:
  %% Argument types:
  %%    _47 => {''EXIT'', any()}
  %% Aliased:
  %%    _47
  _132 = get_tuple_element _47, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _132
  _540 = is_tagged_tuple _132, `2`, `badarg`
  br _540, ^840, ^376

840:
  br ^851

851:
  _380 = new_try_tag `'catch'`
  br _380, ^378, ^379

378:
  %% beam_type_SUITE.erl:576
  _194 = update_tuple `{out_of_range}`, `8`, `y`

  %% Unique:
  %%    _194
  _382 = succeeded:body _194
  br ^379

379:
  %% Unique:
  %%    _380
  _385 = landingpad `'catch'`, _380

  %% Aliased:
  %%    _385
  _383 = extract _385, `0`
  br ^377

377:
  %% Aliased:
  %%    _383
  %% Unique:
  %%    _380
  _49 = catch_end _380, _383

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _533 = is_tagged_tuple _49, `2`, `'EXIT'`
  br _533, ^530, ^388

530:
  %% Argument types:
  %%    _49 => {''EXIT'', any()}
  %% Aliased:
  %%    _49
  _136 = get_tuple_element _49, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _527 = is_tagged_tuple _136, `2`, `badarg`
  br _527, ^524, ^388

524:
  %% beam_type_SUITE.erl:577
  %% Result type:
  %%    {'y', 'undefined', 'undefined', ...}
  _140 = call (`update_tuple_1`/2), `{update_tuple_a,undefined,undefined}`, `y`

  %% Unique:
  %%    _140
  _389 = succeeded:body _140
  br _389, ^389, ^1

389:
  %% Argument types:
  %%    _140 => {'y', 'undefined', 'undefined', ...}
  %% Unique:
  %%    _140
  _520 = is_tagged_tuple _140, `3`, `y`
  br _520, ^517, ^391

517:
  %% beam_type_SUITE.erl:578
  %% Result type:
  %%    {'y', 'undefined', 'undefined', ...}
  _144 = call (`update_tuple_1`/2), `{update_tuple_b,undefined,undefined,undefined}`, `y`

  %% Unique:
  %%    _144
  _392 = succeeded:body _144
  br _392, ^392, ^1

392:
  %% Argument types:
  %%    _144 => {'y', 'undefined', 'undefined', ...}
  %% Unique:
  %%    _144
  _513 = is_tagged_tuple _144, `4`, `y`
  br _513, ^510, ^394

510:
  %% beam_type_SUITE.erl:579
  %% Result type:
  %%    {'update_tuple_a', 'y', 'undefined'} | {'update_tuple_b', 'y', 'undefined', 'undefined'}
  _149 = call (`update_tuple_2`/2), `{update_tuple_a,undefined,undefined}`, `y`

  %% Unique:
  %%    _149
  _395 = succeeded:body _149
  br _395, ^395, ^1

395:
  %% Argument types:
  %%    _149 => {'update_tuple_a', 'y', 'undefined'} | {'update_tuple_b', 'y', 'undefined', 'undefined'}
  %% Unique:
  %%    _149
  %% Anno: #{constraints => arity}
  _506 = is_tagged_tuple _149, `3`, `update_tuple_a`
  br _506, ^501, ^397

501:
  %% beam_type_SUITE.erl:580
  %% Result type:
  %%    {'update_tuple_a', 'y', 'undefined'} | {'update_tuple_b', 'y', 'undefined', 'undefined'}
  _153 = call (`update_tuple_2`/2), `{update_tuple_b,undefined,undefined,undefined}`, `y`

  %% Unique:
  %%    _153
  _398 = succeeded:body _153
  br _398, ^398, ^1

398:
  %% Argument types:
  %%    _153 => {'update_tuple_a', 'y', 'undefined'} | {'update_tuple_b', 'y', 'undefined', 'undefined'}
  %% Unique:
  %%    _153
  %% Anno: #{constraints => arity}
  _497 = is_tagged_tuple _153, `4`, `update_tuple_b`
  br _497, ^841, ^400

841:
  br ^852

852:
  _404 = new_try_tag `'catch'`
  br _404, ^402, ^403

402:
  %% beam_type_SUITE.erl:581
  _55 = call (`id`/1), `{update_tuple_a,undefined,undefined}`

  %% Aliased:
  %%    _55
  _406 = succeeded:body _55
  br _406, ^406, ^403

406:
  %% beam_type_SUITE.erl:581
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _55
  _196 = call (`update_tuple_3`/2), _55, `y`

  %% Aliased:
  %%    _196
  _407 = succeeded:body _196
  br ^403

403:
  %% Unique:
  %%    _404
  _410 = landingpad `'catch'`, _404

  %% Aliased:
  %%    _410
  _408 = extract _410, `0`
  br ^401

401:
  %% Aliased:
  %%    _408
  %% Unique:
  %%    _404
  _56 = catch_end _404, _408

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _488 = is_tagged_tuple _56, `2`, `'EXIT'`
  br _488, ^485, ^413

485:
  %% Argument types:
  %%    _56 => {''EXIT'', any()}
  %% Aliased:
  %%    _56
  _158 = get_tuple_element _56, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158
  _482 = is_tagged_tuple _158, `2`, `badarg`
  br _482, ^842, ^413

842:
  br ^853

853:
  _417 = new_try_tag `'catch'`
  br _417, ^415, ^416

415:
  %% beam_type_SUITE.erl:582
  _58 = call (`id`/1), `{update_tuple_b,undefined,undefined,undefined}`

  %% Aliased:
  %%    _58
  _419 = succeeded:body _58
  br _419, ^419, ^416

419:
  %% beam_type_SUITE.erl:582
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _58
  _198 = call (`update_tuple_3`/2), _58, `y`

  %% Aliased:
  %%    _198
  _420 = succeeded:body _198
  br ^416

416:
  %% Unique:
  %%    _417
  _423 = landingpad `'catch'`, _417

  %% Aliased:
  %%    _423
  _421 = extract _423, `0`
  br ^414

414:
  %% Aliased:
  %%    _421
  %% Unique:
  %%    _417
  _59 = catch_end _417, _421

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _475 = is_tagged_tuple _59, `2`, `'EXIT'`
  br _475, ^472, ^426

472:
  %% Argument types:
  %%    _59 => {''EXIT'', any()}
  %% Aliased:
  %%    _59
  _162 = get_tuple_element _59, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _469 = is_tagged_tuple _162, `2`, `badarg`
  br _469, ^843, ^426

843:
  br ^854

854:
  _430 = new_try_tag `'catch'`
  br _430, ^428, ^429

428:
  %% beam_type_SUITE.erl:583
  _61 = call (`id`/1), `{update_tuple_a,undefined,undefined}`

  %% Aliased:
  %%    _61
  _432 = succeeded:body _61
  br _432, ^432, ^429

432:
  %% beam_type_SUITE.erl:583
  %% Result type:
  %%    {'update_tuple_b', any(), any(), 'y'}
  %% Aliased:
  %%    _61
  _200 = call (`update_tuple_4`/2), _61, `y`

  %% Aliased:
  %%    _200
  _433 = succeeded:body _200
  br _433, ^433, ^429

433:
  br ^427

429:
  %% Unique:
  %%    _430
  _436 = landingpad `'catch'`, _430

  %% Aliased:
  %%    _436
  _434 = extract _436, `0`
  br ^427

427:
  _437 = phi { _434, ^429 }, { _200, ^433 }

  %% Aliased:
  %%    _437
  %% Unique:
  %%    _430
  _62 = catch_end _430, _437

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _462 = is_tagged_tuple _62, `2`, `'EXIT'`
  br _462, ^459, ^439

459:
  %% Argument types:
  %%    _62 => {''EXIT'', any()}
  %% Aliased:
  %%    _62
  _166 = get_tuple_element _62, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _166
  _456 = is_tagged_tuple _166, `2`, `badarg`
  br _456, ^453, ^439

453:
  %% beam_type_SUITE.erl:584
  _64 = call (`id`/1), `{update_tuple_b,undefined,undefined,undefined}`

  %% Aliased:
  %%    _64
  _440 = succeeded:body _64
  br _440, ^440, ^1

440:
  %% beam_type_SUITE.erl:584
  %% Result type:
  %%    {'update_tuple_b', any(), any(), 'y'}
  %% Aliased:
  %%    _64
  _170 = call (`update_tuple_4`/2), _64, `y`

  %% Aliased:
  %%    _170
  _441 = succeeded:body _170
  br _441, ^444, ^1

444:
  %% Result type:
  %%    'ok'
  ret `ok`

439:
  %% beam_type_SUITE.erl:583
  %% Aliased:
  %%    _62
  _202 = match_fail `badmatch`, _62

  %% Unique:
  %%    _202
  _465 = succeeded:body _202
  br ^1

426:
  %% beam_type_SUITE.erl:582
  %% Aliased:
  %%    _59
  _203 = match_fail `badmatch`, _59

  %% Unique:
  %%    _203
  _478 = succeeded:body _203
  br ^1

413:
  %% beam_type_SUITE.erl:581
  %% Aliased:
  %%    _56
  _204 = match_fail `badmatch`, _56

  %% Unique:
  %%    _204
  _491 = succeeded:body _204
  br ^1

400:
  %% beam_type_SUITE.erl:580
  _205 = match_fail `badmatch`, `{update_tuple_a,y,undefined}`

  %% Unique:
  %%    _205
  _500 = succeeded:body _205
  br ^1

397:
  %% beam_type_SUITE.erl:579
  _206 = match_fail `badmatch`, `{update_tuple_b,y,undefined,undefined}`

  %% Unique:
  %%    _206
  _509 = succeeded:body _206
  br ^1

394:
  %% beam_type_SUITE.erl:578
  %% Unique:
  %%    _144
  _207 = match_fail `badmatch`, _144

  %% Unique:
  %%    _207
  _516 = succeeded:body _207
  br ^1

391:
  %% beam_type_SUITE.erl:577
  %% Unique:
  %%    _140
  _208 = match_fail `badmatch`, _140

  %% Unique:
  %%    _208
  _523 = succeeded:body _208
  br ^1

388:
  %% beam_type_SUITE.erl:576
  %% Aliased:
  %%    _49
  _209 = match_fail `badmatch`, _49

  %% Unique:
  %%    _209
  _536 = succeeded:body _209
  br ^1

376:
  %% beam_type_SUITE.erl:575
  %% Aliased:
  %%    _47
  _210 = match_fail `badmatch`, _47

  %% Unique:
  %%    _210
  _549 = succeeded:body _210
  br ^1

364:
  %% beam_type_SUITE.erl:574
  %% Aliased:
  %%    _45
  _211 = match_fail `badmatch`, _45

  %% Unique:
  %%    _211
  _562 = succeeded:body _211
  br ^1

352:
  %% beam_type_SUITE.erl:571
  %% Aliased:
  %%    _43
  _212 = match_fail `badmatch`, _43

  %% Unique:
  %%    _212
  _575 = succeeded:body _212
  br ^1

339:
  %% beam_type_SUITE.erl:570
  %% Aliased:
  %%    _40
  _213 = match_fail `badmatch`, _40

  %% Unique:
  %%    _213
  _588 = succeeded:body _213
  br ^1

325:
  %% beam_type_SUITE.erl:569
  %% Aliased:
  %%    _36
  _214 = match_fail `badmatch`, _36

  %% Unique:
  %%    _214
  _601 = succeeded:body _214
  br ^1

311:
  %% beam_type_SUITE.erl:568
  %% Aliased:
  %%    _32
  _215 = match_fail `badmatch`, _32

  %% Unique:
  %%    _215
  _614 = succeeded:body _215
  br ^1

297:
  %% beam_type_SUITE.erl:567
  %% Aliased:
  %%    _28
  _216 = match_fail `badmatch`, _28

  %% Unique:
  %%    _216
  _627 = succeeded:body _216
  br ^1

275:
  %% beam_type_SUITE.erl:561
  %% Aliased:
  %%    _20
  _219 = match_fail `badmatch`, _20

  %% Unique:
  %%    _219
  _644 = succeeded:body _219
  br ^1

260:
  %% beam_type_SUITE.erl:557
  %% Aliased:
  %%    _101
  _176 = match_fail `case_clause`, _101

  %% Unique:
  %%    _176
  _263 = succeeded:body _176
  br ^1

257:
  %% beam_type_SUITE.erl:555
  %% Aliased:
  %%    _100
  _220 = match_fail `badmatch`, _100

  %% Unique:
  %%    _220
  _646 = succeeded:body _220
  br ^1

251:
  %% beam_type_SUITE.erl:551
  %% Aliased:
  %%    _99
  _175 = match_fail `case_clause`, _99

  %% Unique:
  %%    _175
  _254 = succeeded:body _175
  br ^1

248:
  %% beam_type_SUITE.erl:549
  %% Aliased:
  %%    _98
  _221 = match_fail `badmatch`, _98

  %% Unique:
  %%    _221
  _648 = succeeded:body _221
  br ^1

238:
  %% beam_type_SUITE.erl:547
  %% Aliased:
  %%    _96
  _223 = match_fail `badmatch`, _96

  %% Unique:
  %%    _223
  _652 = succeeded:body _223
  br ^1

230:
  %% beam_type_SUITE.erl:545
  %% Aliased:
  %%    T0
  _225 = match_fail `badmatch`, T0

  %% Unique:
  %%    _225
  _666 = succeeded:body _225
  br ^1

1:
  _226 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _226
}

%% beam_type_SUITE.erl:588
%% Counter = 11
%% bs_ensure_opt: true
function `beam_type_SUITE`:`record_or_integer`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:'=:=' _0, `0`
  br _7, ^6, ^5

6:
  %% Result type:
  %%    {'tuple'}
  ret `{tuple}`

5:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_integer _0
  br _9, ^9, ^8

9:
  %% Result type:
  %%    integer()
  %% Aliased:
  %%    _0
  ret _0

8:
  %% beam_type_SUITE.erl:588
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-record_or_integer/1-',1}}
  _2 = match_fail `function_clause`, _0

  %% Unique:
  %%    _2
  _10 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:593
%% Counter = 14
%% bs_ensure_opt: true
function `beam_type_SUITE`:`tuple_or_integer`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:'=:=' _0, `0`
  br _10, ^9, ^7

9:
  %% beam_type_SUITE.erl:594
  _1 = call (`id`/1), `tuple`

  %% Aliased:
  %%    _1
  _8 = succeeded:body _1
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = put_tuple _1
  %% Result type:
  %%    {any()}
  %% Unique:
  %%    _3
  ret _3

7:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _12 = bif:is_integer _0
  br _12, ^12, ^11

12:
  %% Result type:
  %%    integer()
  %% Aliased:
  %%    _0
  ret _0

11:
  %% beam_type_SUITE.erl:593
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-tuple_or_integer/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_type_SUITE.erl:598
%% Counter = 31
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(32)
%%     accepts_match_context
%%    _1 =>
%%     {'a', 'b'}
%%    _2 =>
%%     'z'
function `beam_type_SUITE`:`do_setelement_1`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => bitstring(32)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _7 = bs_start_match `new`, _0
  _29 = bs_ensure _7, `32`, `1`
  _30 = succeeded:guard _29
  br _30, ^28, ^15

28:
  %% beam_type_SUITE.erl:598
  %% Argument types:
  %%    _29 => bs_context(32)
  %% Aliased:
  %%    _7
  %% Anno: #{ensured => true}
  _8 = bs_match `integer`, _29, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _8
  _16 = succeeded:guard _8
  br _16, ^16, ^15

16:
  %% Aliased:
  %%    _8
  _9 = bs_extract _8

  %% Aliased:
  %%    _8
  _19 = bs_test_tail _8, `0`
  br _19, ^19, ^15

19:
  %% beam_type_SUITE.erl:599
  %% Argument types:
  %%    _9 => 0..4294967295
  %% Aliased:
  %%    _9
  _10 = bif:element _9, `{a,b}`

  %% Aliased:
  %%    _10
  _17 = succeeded:body _10
  br _17, ^17, ^1

17:
  %% beam_type_SUITE.erl:602
  %% Aliased:
  %%    _9
  _11 = call (`erlang`:`setelement`/3), _9, _1, _2

  %% Aliased:
  %%    _11
  _18 = succeeded:body _11
  br _18, ^18, ^1

18:
  %% Result type:
  %%    {any(), any()}
  %% Aliased:
  %%    _11
  ret _11

15:
  %% Aliased:
  %%    _7
  _27 = bs_get_tail _7

  %% beam_type_SUITE.erl:598
  %% Aliased:
  %%    _27
  %% Anno: #{inlined => {'-inlined-do_setelement_1/3-',3}}
  _12 = match_fail `function_clause`, _27, _1, _2

  %% Unique:
  %%    _12
  _21 = succeeded:body _12
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_type_SUITE.erl:604
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(1)
%%     accepts_match_context
%%    _1 =>
%%     {'one', 'two'}
%%    _2 =>
%%     'new'
function `beam_type_SUITE`:`do_setelement_2`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => bitstring(1)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _7 = bs_start_match `new`, _0
  _35 = bs_ensure _7, `1`, `1`
  _36 = succeeded:guard _35
  br _36, ^34, ^16

34:
  %% beam_type_SUITE.erl:604
  %% Argument types:
  %%    _35 => bs_context(1)
  %% Aliased:
  %%    _7
  %% Anno: #{ensured => true}
  _8 = bs_match `integer`, _35, `[unsigned,big]`, `1`, `1`

  %% Aliased:
  %%    _8
  _17 = succeeded:guard _8
  br _17, ^17, ^16

17:
  %% Aliased:
  %%    _8
  _9 = bs_extract _8

  %% Aliased:
  %%    _8
  _25 = bs_test_tail _8, `0`
  br _25, ^22, ^16

22:
  %% beam_type_SUITE.erl:608
  %% Aliased:
  %%    _9
  _11 = call (`erlang`:`setelement`/3), _9, _1, _2

  %% Aliased:
  %%    _11
  _21 = succeeded:body _11
  br _21, ^21, ^1

21:
  %% Result type:
  %%    {'new', 'two'}
  %% Aliased:
  %%    _11
  ret _11

16:
  %% Aliased:
  %%    _7
  _33 = bs_get_tail _7

  %% beam_type_SUITE.erl:604
  %% Aliased:
  %%    _33
  %% Anno: #{inlined => {'-inlined-do_setelement_2/3-',3}}
  _13 = match_fail `function_clause`, _33, _1, _2

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_type_SUITE.erl:610
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'update_tuple_a', 'undefined', 'undefined'} | {'update_tuple_b', 'undefined', 'undefined', 'undefined'}
%%    _1 =>
%%     'y'
function `beam_type_SUITE`:`update_tuple_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => {'update_tuple_a', 'undefined', 'undefined'} | {'update_tuple_b', 'undefined', 'undefined', 'undefined'}
  %% Unique:
  %%    _0
  _32 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _32, ^24, [
    { `3`, ^35 },
    { `4`, ^35 }
  ]

35:
  %% beam_type_SUITE.erl:615
  %% Unique:
  %%    _0
  _20 = update_tuple _0, `1`, `y`
  %% Result type:
  %%    {'y', 'undefined', 'undefined', ...}
  %% Unique:
  %%    _20
  ret _20

24:
  %% beam_type_SUITE.erl:611
  %% Unique:
  %%    _0
  _19 = match_fail `case_clause`, _0

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:617
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'update_tuple_a', 'undefined', 'undefined'} | {'update_tuple_b', 'undefined', 'undefined', 'undefined'}
%%    _1 =>
%%     'y'
function `beam_type_SUITE`:`update_tuple_2`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => {'update_tuple_a', 'undefined', 'undefined'} | {'update_tuple_b', 'undefined', 'undefined', 'undefined'}
  %% Unique:
  %%    _0
  _32 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _32, ^24, [
    { `3`, ^35 },
    { `4`, ^35 }
  ]

35:
  %% beam_type_SUITE.erl:622
  %% Unique:
  %%    _0
  _20 = update_tuple _0, `2`, `y`
  %% Result type:
  %%    {'update_tuple_a', 'y', 'undefined'} | {'update_tuple_b', 'y', 'undefined', 'undefined'}
  %% Unique:
  %%    _20
  ret _20

24:
  %% beam_type_SUITE.erl:618
  %% Unique:
  %%    _0
  _19 = match_fail `case_clause`, _0

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:624
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     'y'
function `beam_type_SUITE`:`update_tuple_3`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _31 = bif:is_tuple _0
  br _31, ^31, ^24

31:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _32 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _32, ^24, [
    { `3`, ^29 },
    { `4`, ^30 }
  ]

30:
  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _18 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _28 = bif:'=:=' _18, `update_tuple_b`
  br _28, ^35, ^24

29:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _14 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _26 = bif:'=:=' _14, `update_tuple_a`
  br _26, ^35, ^24

35:
  %% beam_type_SUITE.erl:629
  %% Aliased:
  %%    _0
  _20 = update_tuple _0, `47`, `y`

  %% Aliased:
  %%    _20
  _34 = succeeded:body _20
  br ^1

24:
  %% beam_type_SUITE.erl:625
  %% Aliased:
  %%    _0
  _19 = match_fail `case_clause`, _0

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:631
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     'y'
function `beam_type_SUITE`:`update_tuple_4`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _31 = bif:is_tuple _0
  br _31, ^31, ^24

31:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _32 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _32, ^24, [
    { `3`, ^29 },
    { `4`, ^30 }
  ]

30:
  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _18 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _28 = bif:'=:=' _18, `update_tuple_b`
  br _28, ^35, ^24

29:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _14 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _26 = bif:'=:=' _14, `update_tuple_a`
  br _26, ^35, ^24

35:
  %% beam_type_SUITE.erl:638
  %% Aliased:
  %%    _0
  _20 = update_tuple _0, `4`, `y`
  %% Result type:
  %%    {'update_tuple_b', any(), any(), 'y'}
  %% Aliased:
  %%    _20
  ret _20

24:
  %% beam_type_SUITE.erl:632
  %% Aliased:
  %%    _0
  _19 = match_fail `case_clause`, _0

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:640
%% Counter = 168
%% bs_ensure_opt: true
function `beam_type_SUITE`:`cons`(_0) {
0:
  %% beam_type_SUITE.erl:641
  %% Result type:
  %%    nonempty_list('did')
  _15 = call (`cons`/2), `assigned`, `did`

  %% Unique:
  %%    _15
  _45 = succeeded:body _15
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _15 => nonempty_list('did')
  %% Unique:
  %%    _15
  _132 = bif:'=:=' _15, `[did]`
  br _132, ^132, ^47

132:
  %% beam_type_SUITE.erl:643
  %% Result type:
  %%    'false' | 'true'
  _16 = call (`cons_is_empty_list`/1), `[]`

  %% Unique:
  %%    _16
  _48 = succeeded:body _16
  br _48, ^48, ^1

48:
  br _16, ^129, ^50

129:
  %% beam_type_SUITE.erl:644
  %% Result type:
  %%    'false' | 'true'
  _17 = call (`cons_is_empty_list`/1), `[a]`

  %% Unique:
  %%    _17
  _51 = succeeded:body _17
  br _51, ^51, ^1

51:
  br _17, ^53, ^126

53:
  %% beam_type_SUITE.erl:644
  _40 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _40
  _128 = succeeded:body _40
  br ^1

126:
  %% beam_type_SUITE.erl:646
  %% Result type:
  %%    'false' | 'true'
  _18 = call (`cons_not`/1), `true`

  %% Unique:
  %%    _18
  _54 = succeeded:body _18
  br _54, ^54, ^1

54:
  br _18, ^56, ^123

56:
  %% beam_type_SUITE.erl:646
  _39 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _39
  _125 = succeeded:body _39
  br ^1

123:
  %% beam_type_SUITE.erl:647
  %% Result type:
  %%    'false' | 'true'
  _19 = call (`cons_not`/1), `false`

  %% Unique:
  %%    _19
  _57 = succeeded:body _19
  br _57, ^57, ^1

57:
  br _19, ^120, ^59

120:
  %% beam_type_SUITE.erl:649
  %% Result type:
  %%    {any(), any()}
  _20 = call (`cons_hdtl`/1), `true`

  %% Unique:
  %%    _20
  _60 = succeeded:body _20
  br _60, ^60, ^1

60:
  %% Argument types:
  %%    _20 => {any(), any()}
  %% Unique:
  %%    _20
  _118 = bif:'=:=' _20, `{97,"bc"}`
  br _118, ^118, ^62

118:
  %% beam_type_SUITE.erl:650
  %% Result type:
  %%    {any(), any()}
  _21 = call (`cons_hdtl`/1), `false`

  %% Unique:
  %%    _21
  _63 = succeeded:body _21
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    _21 => {any(), any()}
  %% Unique:
  %%    _21
  _116 = bif:'=:=' _21, `{100,"ef"}`
  br _116, ^164, ^65

164:
  br ^166

166:
  _69 = new_try_tag `'catch'`
  br _69, ^67, ^68

67:
  %% beam_type_SUITE.erl:652
  %% Argument types:
  %%    
  _31 = bif:hd `ok`

  %% Unique:
  %%    _31
  _71 = succeeded:body _31
  br ^68

68:
  %% Unique:
  %%    _69
  _74 = landingpad `'catch'`, _69

  %% Aliased:
  %%    _74
  _72 = extract _74, `0`
  br ^66

66:
  %% Aliased:
  %%    _72
  %% Unique:
  %%    _69
  _8 = catch_end _69, _72

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _112 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _112, ^109, ^77

109:
  %% Argument types:
  %%    _8 => {''EXIT'', any()}
  %% Aliased:
  %%    _8
  _22 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _106 = is_tagged_tuple _22, `2`, `badarg`
  br _106, ^165, ^77

165:
  br ^167

167:
  _81 = new_try_tag `'catch'`
  br _81, ^79, ^80

79:
  %% beam_type_SUITE.erl:653
  %% Argument types:
  %%    
  _33 = bif:tl `ok`

  %% Unique:
  %%    _33
  _83 = succeeded:body _33
  br ^80

80:
  %% Unique:
  %%    _81
  _86 = landingpad `'catch'`, _81

  %% Aliased:
  %%    _86
  _84 = extract _86, `0`
  br ^78

78:
  %% Aliased:
  %%    _84
  %% Unique:
  %%    _81
  _10 = catch_end _81, _84

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _99 = is_tagged_tuple _10, `2`, `'EXIT'`
  br _99, ^96, ^89

96:
  %% Argument types:
  %%    _10 => {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _26 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _93 = is_tagged_tuple _26, `2`, `badarg`
  br _93, ^90, ^89

90:
  %% Result type:
  %%    'ok'
  ret `ok`

89:
  %% beam_type_SUITE.erl:653
  %% Aliased:
  %%    _10
  _34 = match_fail `badmatch`, _10

  %% Unique:
  %%    _34
  _102 = succeeded:body _34
  br ^1

77:
  %% beam_type_SUITE.erl:652
  %% Aliased:
  %%    _8
  _35 = match_fail `badmatch`, _8

  %% Unique:
  %%    _35
  _115 = succeeded:body _35
  br ^1

65:
  %% beam_type_SUITE.erl:650
  %% Unique:
  %%    _21
  _36 = match_fail `badmatch`, _21

  %% Unique:
  %%    _36
  _117 = succeeded:body _36
  br ^1

62:
  %% beam_type_SUITE.erl:649
  %% Unique:
  %%    _20
  _37 = match_fail `badmatch`, _20

  %% Unique:
  %%    _37
  _119 = succeeded:body _37
  br ^1

59:
  %% beam_type_SUITE.erl:647
  _38 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _38
  _122 = succeeded:body _38
  br ^1

50:
  %% beam_type_SUITE.erl:643
  _41 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _41
  _131 = succeeded:body _41
  br ^1

47:
  %% beam_type_SUITE.erl:641
  %% Unique:
  %%    _15
  _42 = match_fail `badmatch`, _15

  %% Unique:
  %%    _42
  _133 = succeeded:body _42
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% beam_type_SUITE.erl:657
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'assigned'
%%    _1 =>
%%     'did'
function `beam_type_SUITE`:`cons`(_0, _1) {
0:
  %% Result type:
  %%    nonempty_list('did')
  ret `[did]`
}

%% beam_type_SUITE.erl:660
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list('a')
function `beam_type_SUITE`:`cons_is_empty_list`(_0) {
0:
  %% Argument types:
  %%    _0 => list('a')
  %% Unique:
  %%    _0
  _15 = bif:'=:=' _0, `[]`
  br _15, ^15, ^14

15:
  br ^13

14:
  br ^13

13:
  _2 = phi { `"false"`, ^14 }, { `"true"`, ^15 }

  %% beam_type_SUITE.erl:665
  _9 = call (`id`/1), `1`

  %% Aliased:
  %%    _9
  _16 = succeeded:body _9
  br _16, ^23, ^1

23:
  %% Argument types:
  %%    _2 => nonempty_list(97..117)
  %% Unique:
  %%    _2
  _8 = get_hd _2

  %% Argument types:
  %%    _2 => nonempty_list(97..117)
  %% Unique:
  %%    _2
  _7 = get_tl _2
  %% Argument types:
  %%    
  switch _8, ^18, [
    { `102`, ^22 },
    { `116`, ^21 }
  ]

21:
  %% Argument types:
  %%    _7 => list(97..117)
  %% Unique:
  %%    _7
  _19 = bif:'=:=' _7, `"rue"`
  br _19, ^19, ^18

19:
  %% Result type:
  %%    'true'
  ret `true`

22:
  %% Argument types:
  %%    _7 => list(97..117)
  %% Unique:
  %%    _7
  _20 = bif:'=:=' _7, `"alse"`
  br _20, ^20, ^18

20:
  %% Result type:
  %%    'false'
  ret `false`

18:
  %% beam_type_SUITE.erl:666
  %% Unique:
  %%    _2
  _10 = match_fail `case_clause`, _2

  %% Unique:
  %%    _10
  _24 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:671
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
function `beam_type_SUITE`:`cons_not`(_0) {
0:
  br _0, ^15, ^14

15:
  br ^12

14:
  br ^12

12:
  _2 = phi { `"false"`, ^14 }, { `"true"`, ^15 }

  %% beam_type_SUITE.erl:676
  _8 = call (`id`/1), `1`

  %% Aliased:
  %%    _8
  _17 = succeeded:body _8
  br _17, ^24, ^1

24:
  %% Argument types:
  %%    _2 => nonempty_list(97..117)
  %% Unique:
  %%    _2
  _6 = get_hd _2

  %% Argument types:
  %%    _2 => nonempty_list(97..117)
  %% Unique:
  %%    _2
  _5 = get_tl _2
  %% Argument types:
  %%    
  switch _6, ^19, [
    { `102`, ^23 },
    { `116`, ^22 }
  ]

22:
  %% Argument types:
  %%    _5 => list(97..117)
  %% Unique:
  %%    _5
  _20 = bif:'=:=' _5, `"rue"`
  br _20, ^20, ^19

20:
  %% Result type:
  %%    'false'
  ret `false`

23:
  %% Argument types:
  %%    _5 => list(97..117)
  %% Unique:
  %%    _5
  _21 = bif:'=:=' _5, `"alse"`
  br _21, ^21, ^19

21:
  %% Result type:
  %%    'true'
  ret `true`

19:
  %% beam_type_SUITE.erl:677
  %% Unique:
  %%    _2
  _9 = match_fail `case_clause`, _2

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_type_SUITE.erl:682
%% Counter = 24
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
function `beam_type_SUITE`:`cons_hdtl`(_0) {
0:
  br _0, ^15, ^16

15:
  br ^13

16:
  br ^13

13:
  _2 = phi { `"abc"`, ^15 }, { `"def"`, ^16 }

  %% beam_type_SUITE.erl:687
  _9 = call (`id`/1), `1`

  %% Aliased:
  %%    _9
  _18 = succeeded:body _9
  br _18, ^18, ^1

18:
  %% beam_type_SUITE.erl:688
  %% Argument types:
  %%    _2 => nonempty_list(97..102)
  %% Unique:
  %%    _2
  _6 = get_hd _2

  %% beam_type_SUITE.erl:688
  %% Unique:
  %%    _6
  _7 = call (`id`/1), _6

  %% Aliased:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% beam_type_SUITE.erl:688
  %% Argument types:
  %%    _2 => nonempty_list(97..102)
  %% Unique:
  %%    _2
  _4 = get_tl _2

  %% beam_type_SUITE.erl:688
  %% Unique:
  %%    _4
  _5 = call (`id`/1), _4

  %% Aliased:
  %%    _5
  _22 = succeeded:body _5
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _7
  _10 = put_tuple _7, _5
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _10
  ret _10

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:692
%% Counter = 645
%% bs_ensure_opt: true
function `beam_type_SUITE`:`tuple`(_0) {
0:
  br ^636

636:
  _200 = new_try_tag `'catch'`
  br _200, ^198, ^199

198:
  %% beam_type_SUITE.erl:693
  %% Result type:
  %%    none()
  _146 = call (`do_tuple`/0)

  %% Aliased:
  %%    _146
  _202 = succeeded:body _146
  br ^199

199:
  %% Unique:
  %%    _200
  _205 = landingpad `'catch'`, _200

  %% Aliased:
  %%    _205
  _203 = extract _205, `0`
  br ^197

197:
  %% Aliased:
  %%    _203
  %% Unique:
  %%    _200
  _1 = catch_end _200, _203

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _487 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _487, ^484, ^208

484:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _83 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _481 = bif:is_tuple _83
  br _481, ^481, ^208

481:
  %% Argument types:
  %%    _83 => {...}
  %% Aliased:
  %%    _83
  _482 = bif:tuple_size _83

  %% Argument types:
  %%    _482 => 0..16777215
  %% Unique:
  %%    _482
  _483 = bif:'=:=' _482, `2`
  br _483, ^480, ^208

480:
  %% Argument types:
  %%    _83 => {any(), any()}
  %% Aliased:
  %%    _83
  _86 = get_tuple_element _83, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _479 = bif:'=:=' _86, `{badmatch,{necessary}}`
  br _479, ^479, ^208

479:
  %% beam_type_SUITE.erl:695
  %% Result type:
  %%    nil()
  _10 = call (`'-tuple/1-lc$^0/1-0-'`/1), `[]`

  %% Unique:
  %%    _10
  _209 = succeeded:body _10
  br _209, ^477, ^1

477:
  %% beam_type_SUITE.erl:696
  %% Result type:
  %%    nil()
  _17 = call (`'-tuple/1-lc$^1/1-1-'`/1), `[]`

  %% Unique:
  %%    _17
  _212 = succeeded:body _17
  br _212, ^475, ^1

475:
  %% beam_type_SUITE.erl:697
  %% Result type:
  %%    nil()
  _30 = call (`'-tuple/1-lc$^2/1-2-'`/1), `[]`

  %% Unique:
  %%    _30
  _215 = succeeded:body _30
  br _215, ^473, ^1

473:
  %% beam_type_SUITE.erl:699
  %% Result type:
  %%    1
  _108 = call (`do_literal_tuple_1`/1), `1`

  %% Unique:
  %%    _108
  _218 = succeeded:body _108
  br _218, ^470, ^1

470:
  %% beam_type_SUITE.erl:700
  %% Result type:
  %%    1
  _109 = call (`do_literal_tuple_1`/1), `20`

  %% Unique:
  %%    _109
  _221 = succeeded:body _109
  br _221, ^628, ^1

628:
  br ^637

637:
  _227 = new_try_tag `'catch'`
  br _227, ^225, ^226

225:
  %% beam_type_SUITE.erl:701
  _34 = call (`id`/1), `0`

  %% Aliased:
  %%    _34
  _229 = succeeded:body _34
  br _229, ^229, ^226

229:
  %% beam_type_SUITE.erl:701
  %% Result type:
  %%    1
  %% Aliased:
  %%    _34
  _158 = call (`do_literal_tuple_1`/1), _34

  %% Unique:
  %%    _158
  _230 = succeeded:body _158
  br _230, ^230, ^226

230:
  br ^224

226:
  %% Unique:
  %%    _227
  _233 = landingpad `'catch'`, _227

  %% Aliased:
  %%    _233
  _231 = extract _233, `0`
  br ^224

224:
  _234 = phi { _231, ^226 }, { `1`, ^230 }

  %% Aliased:
  %%    _234
  %% Unique:
  %%    _227
  _35 = catch_end _227, _234

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _463 = is_tagged_tuple _35, `2`, `'EXIT'`
  br _463, ^629, ^236

629:
  br ^638

638:
  _240 = new_try_tag `'catch'`
  br _240, ^238, ^239

238:
  %% beam_type_SUITE.erl:702
  _37 = call (`id`/1), `bad`

  %% Aliased:
  %%    _37
  _242 = succeeded:body _37
  br _242, ^242, ^239

242:
  %% beam_type_SUITE.erl:702
  %% Result type:
  %%    1
  %% Aliased:
  %%    _37
  _160 = call (`do_literal_tuple_1`/1), _37

  %% Unique:
  %%    _160
  _243 = succeeded:body _160
  br _243, ^243, ^239

243:
  br ^237

239:
  %% Unique:
  %%    _240
  _246 = landingpad `'catch'`, _240

  %% Aliased:
  %%    _246
  _244 = extract _246, `0`
  br ^237

237:
  _247 = phi { _244, ^239 }, { `1`, ^243 }

  %% Aliased:
  %%    _247
  %% Unique:
  %%    _240
  _38 = catch_end _240, _247

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _456 = is_tagged_tuple _38, `2`, `'EXIT'`
  br _456, ^453, ^249

453:
  %% beam_type_SUITE.erl:704
  %% Result type:
  %%    2
  _114 = call (`do_literal_tuple_2`/1), `1`

  %% Unique:
  %%    _114
  _250 = succeeded:body _114
  br _250, ^450, ^1

450:
  %% beam_type_SUITE.erl:705
  %% Result type:
  %%    2
  _115 = call (`do_literal_tuple_2`/1), `15`

  %% Unique:
  %%    _115
  _253 = succeeded:body _115
  br _253, ^447, ^1

447:
  %% beam_type_SUITE.erl:706
  %% Result type:
  %%    2
  _116 = call (`do_literal_tuple_2`/1), `20`

  %% Unique:
  %%    _116
  _256 = succeeded:body _116
  br _256, ^444, ^1

444:
  %% beam_type_SUITE.erl:708
  Counters0 = call (`id`/1), `{0,0,0}`

  %% Aliased:
  %%    Counters0
  _259 = succeeded:body Counters0
  br _259, ^259, ^1

259:
  %% beam_type_SUITE.erl:709
  %% Result type:
  %%    {any(), ...}
  %% Aliased:
  %%    Counters0
  _44 = call (`increment_element`/2), `1`, Counters0

  %% Aliased:
  %%    _44
  _260 = succeeded:body _44
  br _260, ^260, ^1

260:
  %% Argument types:
  %%    _44 => {any(), ...}
  %% Aliased:
  %%    _44
  _442 = bif:'=:=' _44, `{1,0,0}`
  br _442, ^442, ^262

442:
  %% beam_type_SUITE.erl:710
  %% Result type:
  %%    {any(), ...}
  _117 = call (`increment_element`/2), `2`, `{1,0,0}`

  %% Aliased:
  %%    _117
  _263 = succeeded:body _117
  br _263, ^263, ^1

263:
  %% Argument types:
  %%    _117 => {any(), ...}
  %% Aliased:
  %%    _117
  _440 = bif:'=:=' _117, `{1,1,0}`
  br _440, ^440, ^265

440:
  %% beam_type_SUITE.erl:712
  _50 = call (`id`/1), `0`

  %% Aliased:
  %%    _50
  _266 = succeeded:body _50
  br _266, ^266, ^1

266:
  %% beam_type_SUITE.erl:712
  _49 = call (`id`/1), `0`

  %% Aliased:
  %%    _49
  _267 = succeeded:body _49
  br _267, ^267, ^1

267:
  %% beam_type_SUITE.erl:712
  _48 = call (`id`/1), `0`

  %% Aliased:
  %%    _48
  _268 = succeeded:body _48
  br _268, ^268, ^1

268:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _48, 
  %%    _49, 
  %%    _50
  Counters10 = put_tuple _50, _49, _48

  %% beam_type_SUITE.erl:713
  %% Result type:
  %%    {any(), any(), any()}
  %% Aliased:
  %%    Counters10
  _118 = call (`decrement_element`/2), `2`, Counters10

  %% Aliased:
  %%    _118
  _269 = succeeded:body _118
  br _269, ^269, ^1

269:
  %% Argument types:
  %%    _118 => {any(), any(), any()}
  %% Aliased:
  %%    _118
  _438 = bif:'=:=' _118, `{0,-1,0}`
  br _438, ^438, ^271

438:
  %% beam_type_SUITE.erl:714
  %% Result type:
  %%    {any(), any(), any()}
  %% Aliased:
  %%    Counters10
  _119 = call (`decrement_element`/2), `3`, Counters10

  %% Aliased:
  %%    _119
  _272 = succeeded:body _119
  br _272, ^272, ^1

272:
  %% Argument types:
  %%    _119 => {any(), any(), any()}
  %% Aliased:
  %%    _119
  _436 = bif:'=:=' _119, `{0,0,-1}`
  br _436, ^630, ^274

630:
  br ^639

639:
  _278 = new_try_tag `'catch'`
  br _278, ^276, ^277

276:
  %% beam_type_SUITE.erl:715
  %% Result type:
  %%    {any(), any(), any()}
  %% Aliased:
  %%    Counters10
  _162 = call (`decrement_element`/2), `4`, Counters10

  %% Aliased:
  %%    _162
  _280 = succeeded:body _162
  br _280, ^280, ^277

280:
  br ^275

277:
  %% Unique:
  %%    _278
  _283 = landingpad `'catch'`, _278

  %% Aliased:
  %%    _283
  _281 = extract _283, `0`
  br ^275

275:
  _284 = phi { _281, ^277 }, { _162, ^280 }

  %% Aliased:
  %%    _284
  %% Unique:
  %%    _278
  _54 = catch_end _278, _284

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _432 = is_tagged_tuple _54, `2`, `'EXIT'`
  br _432, ^429, ^286

429:
  %% Argument types:
  %%    _54 => {''EXIT'', any()}
  %% Aliased:
  %%    _54
  _120 = get_tuple_element _54, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _120
  _426 = is_tagged_tuple _120, `2`, `badarg`
  br _426, ^423, ^286

423:
  %% beam_type_SUITE.erl:717
  _56 = call (`id`/1), `{true}`

  %% Aliased:
  %%    _56
  _287 = succeeded:body _56
  br _287, ^287, ^1

287:
  %% beam_type_SUITE.erl:717
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _56
  _124 = call (`gh_6458`/1), _56

  %% Unique:
  %%    _124
  _288 = succeeded:body _124
  br _288, ^631, ^1

631:
  br ^640

640:
  _294 = new_try_tag `'catch'`
  br _294, ^292, ^293

292:
  %% beam_type_SUITE.erl:718
  _58 = call (`id`/1), `{false}`

  %% Aliased:
  %%    _58
  _296 = succeeded:body _58
  br _296, ^296, ^293

296:
  %% beam_type_SUITE.erl:718
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _58
  _164 = call (`gh_6458`/1), _58

  %% Unique:
  %%    _164
  _297 = succeeded:body _164
  br _297, ^297, ^293

297:
  br ^291

293:
  %% Unique:
  %%    _294
  _300 = landingpad `'catch'`, _294

  %% Aliased:
  %%    _300
  _298 = extract _300, `0`
  br ^291

291:
  _301 = phi { _298, ^293 }, { `[]`, ^297 }

  %% Aliased:
  %%    _301
  %% Unique:
  %%    _294
  _59 = catch_end _294, _301

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _417 = is_tagged_tuple _59, `2`, `'EXIT'`
  br _417, ^414, ^303

414:
  %% Argument types:
  %%    _59 => {''EXIT'', any()}
  %% Aliased:
  %%    _59
  _125 = get_tuple_element _59, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _125
  _411 = is_tagged_tuple _125, `2`, `function_clause`
  br _411, ^632, ^303

632:
  br ^641

641:
  _307 = new_try_tag `'catch'`
  br _307, ^305, ^306

305:
  %% beam_type_SUITE.erl:719
  _61 = call (`id`/1), `{42}`

  %% Aliased:
  %%    _61
  _309 = succeeded:body _61
  br _309, ^309, ^306

309:
  %% beam_type_SUITE.erl:719
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _61
  _166 = call (`gh_6458`/1), _61

  %% Unique:
  %%    _166
  _310 = succeeded:body _166
  br _310, ^310, ^306

310:
  br ^304

306:
  %% Unique:
  %%    _307
  _313 = landingpad `'catch'`, _307

  %% Aliased:
  %%    _313
  _311 = extract _313, `0`
  br ^304

304:
  _314 = phi { _311, ^306 }, { `[]`, ^310 }

  %% Aliased:
  %%    _314
  %% Unique:
  %%    _307
  _62 = catch_end _307, _314

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _404 = is_tagged_tuple _62, `2`, `'EXIT'`
  br _404, ^401, ^316

401:
  %% Argument types:
  %%    _62 => {''EXIT'', any()}
  %% Aliased:
  %%    _62
  _129 = get_tuple_element _62, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _129
  _398 = is_tagged_tuple _129, `2`, `function_clause`
  br _398, ^633, ^316

633:
  br ^642

642:
  _320 = new_try_tag `'catch'`
  br _320, ^318, ^319

318:
  %% beam_type_SUITE.erl:720
  _64 = call (`id`/1), `a`

  %% Aliased:
  %%    _64
  _322 = succeeded:body _64
  br _322, ^322, ^319

322:
  %% beam_type_SUITE.erl:720
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _64
  _168 = call (`gh_6458`/1), _64

  %% Unique:
  %%    _168
  _323 = succeeded:body _168
  br _323, ^323, ^319

323:
  br ^317

319:
  %% Unique:
  %%    _320
  _326 = landingpad `'catch'`, _320

  %% Aliased:
  %%    _326
  _324 = extract _326, `0`
  br ^317

317:
  _327 = phi { _324, ^319 }, { `[]`, ^323 }

  %% Aliased:
  %%    _327
  %% Unique:
  %%    _320
  _65 = catch_end _320, _327

  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _391 = is_tagged_tuple _65, `2`, `'EXIT'`
  br _391, ^388, ^329

388:
  %% Argument types:
  %%    _65 => {''EXIT'', any()}
  %% Aliased:
  %%    _65
  _133 = get_tuple_element _65, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _385 = is_tagged_tuple _133, `2`, `function_clause`
  br _385, ^634, ^329

634:
  br ^643

643:
  _333 = new_try_tag `'catch'`
  br _333, ^331, ^332

331:
  %% beam_type_SUITE.erl:722
  _67 = call (`id`/1), `{a,b}`

  %% Aliased:
  %%    _67
  _335 = succeeded:body _67
  br _335, ^335, ^332

335:
  %% beam_type_SUITE.erl:722
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _67
  _170 = call (`gh_6927`/1), _67

  %% Aliased:
  %%    _170
  _336 = succeeded:body _170
  br ^332

332:
  %% Unique:
  %%    _333
  _339 = landingpad `'catch'`, _333

  %% Aliased:
  %%    _339
  _337 = extract _339, `0`
  br ^330

330:
  %% Aliased:
  %%    _337
  %% Unique:
  %%    _333
  _68 = catch_end _333, _337

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _378 = is_tagged_tuple _68, `2`, `'EXIT'`
  br _378, ^375, ^342

375:
  %% Argument types:
  %%    _68 => {''EXIT'', any()}
  %% Aliased:
  %%    _68
  _137 = get_tuple_element _68, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _372 = is_tagged_tuple _137, `2`, `badarg`
  br _372, ^635, ^342

635:
  br ^644

644:
  _346 = new_try_tag `'catch'`
  br _346, ^344, ^345

344:
  %% beam_type_SUITE.erl:723
  _70 = call (`id`/1), `[]`

  %% Aliased:
  %%    _70
  _348 = succeeded:body _70
  br _348, ^348, ^345

348:
  %% beam_type_SUITE.erl:723
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _70
  _172 = call (`gh_6927`/1), _70

  %% Aliased:
  %%    _172
  _349 = succeeded:body _172
  br ^345

345:
  %% Unique:
  %%    _346
  _352 = landingpad `'catch'`, _346

  %% Aliased:
  %%    _352
  _350 = extract _352, `0`
  br ^343

343:
  %% Aliased:
  %%    _350
  %% Unique:
  %%    _346
  _71 = catch_end _346, _350

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _365 = is_tagged_tuple _71, `2`, `'EXIT'`
  br _365, ^362, ^355

362:
  %% Argument types:
  %%    _71 => {''EXIT'', any()}
  %% Aliased:
  %%    _71
  _141 = get_tuple_element _71, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _141
  _359 = is_tagged_tuple _141, `2`, `badarg`
  br _359, ^356, ^355

356:
  %% Result type:
  %%    'ok'
  ret `ok`

355:
  %% beam_type_SUITE.erl:723
  %% Aliased:
  %%    _71
  _173 = match_fail `badmatch`, _71

  %% Unique:
  %%    _173
  _368 = succeeded:body _173
  br ^1

342:
  %% beam_type_SUITE.erl:722
  %% Aliased:
  %%    _68
  _174 = match_fail `badmatch`, _68

  %% Unique:
  %%    _174
  _381 = succeeded:body _174
  br ^1

329:
  %% beam_type_SUITE.erl:720
  %% Aliased:
  %%    _65
  _175 = match_fail `badmatch`, _65

  %% Unique:
  %%    _175
  _394 = succeeded:body _175
  br ^1

316:
  %% beam_type_SUITE.erl:719
  %% Aliased:
  %%    _62
  _176 = match_fail `badmatch`, _62

  %% Unique:
  %%    _176
  _407 = succeeded:body _176
  br ^1

303:
  %% beam_type_SUITE.erl:718
  %% Aliased:
  %%    _59
  _177 = match_fail `badmatch`, _59

  %% Unique:
  %%    _177
  _420 = succeeded:body _177
  br ^1

286:
  %% beam_type_SUITE.erl:715
  %% Aliased:
  %%    _54
  _179 = match_fail `badmatch`, _54

  %% Unique:
  %%    _179
  _435 = succeeded:body _179
  br ^1

274:
  %% beam_type_SUITE.erl:714
  %% Aliased:
  %%    _119
  _180 = match_fail `badmatch`, _119

  %% Unique:
  %%    _180
  _437 = succeeded:body _180
  br ^1

271:
  %% beam_type_SUITE.erl:713
  %% Aliased:
  %%    _118
  _181 = match_fail `badmatch`, _118

  %% Unique:
  %%    _181
  _439 = succeeded:body _181
  br ^1

265:
  %% beam_type_SUITE.erl:710
  %% Aliased:
  %%    _117
  _182 = match_fail `badmatch`, _117

  %% Unique:
  %%    _182
  _441 = succeeded:body _182
  br ^1

262:
  %% beam_type_SUITE.erl:709
  %% Aliased:
  %%    _44
  _183 = match_fail `badmatch`, _44

  %% Unique:
  %%    _183
  _443 = succeeded:body _183
  br ^1

249:
  %% beam_type_SUITE.erl:702
  %% Aliased:
  %%    _38
  _187 = match_fail `badmatch`, _38

  %% Unique:
  %%    _187
  _459 = succeeded:body _187
  br ^1

236:
  %% beam_type_SUITE.erl:701
  %% Aliased:
  %%    _35
  _188 = match_fail `badmatch`, _35

  %% Unique:
  %%    _188
  _466 = succeeded:body _188
  br ^1

208:
  %% beam_type_SUITE.erl:693
  %% Aliased:
  %%    _1
  _194 = match_fail `badmatch`, _1

  %% Unique:
  %%    _194
  _490 = succeeded:body _194
  br ^1

1:
  _195 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _195
}

%% beam_type_SUITE.erl:727
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_tuple`() {
0:
  %% beam_type_SUITE.erl:728
  _2 = match_fail `badmatch`, `{necessary}`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:730
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`do_literal_tuple_1`(_0) {
0:
  %% beam_type_SUITE.erl:731
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:element _0, `{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    1
  ret `1`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:733
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     1..20
function `beam_type_SUITE`:`do_literal_tuple_2`(_0) {
0:
  %% Result type:
  %%    2
  ret `2`
}

%% beam_type_SUITE.erl:736
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     1..2
function `beam_type_SUITE`:`increment_element`(_0, _1) {
0:
  %% beam_type_SUITE.erl:737
  %% Argument types:
  %%    _0 => 1..2
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  Ns = bif:element _0, _1

  %% Aliased:
  %%    Ns
  _7 = succeeded:body Ns
  br _7, ^7, ^1

7:
  %% beam_type_SUITE.erl:738
  %% Argument types:
  %%    
  %% Aliased:
  %%    Ns
  _3 = bif:'+' Ns, `1`

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:738
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0, 
  %%    _3
  _4 = call (`erlang`:`setelement`/3), _0, _1, _3

  %% Aliased:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^9, ^1

9:
  %% Result type:
  %%    {any(), ...}
  %% Aliased:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_type_SUITE.erl:740
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     2..4
%%    _1 =>
%%     {any(), any(), any()}
function `beam_type_SUITE`:`decrement_element`(_0, _1) {
0:
  %% beam_type_SUITE.erl:741
  %% Argument types:
  %%    _0 => 2..4
  %%    _1 => {any(), any(), any()}
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  Ns = bif:element _0, _1

  %% Aliased:
  %%    Ns
  _7 = succeeded:body Ns
  br _7, ^7, ^1

7:
  %% beam_type_SUITE.erl:742
  %% Argument types:
  %%    
  %% Aliased:
  %%    Ns
  _3 = bif:'-' Ns, `1`

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:742
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0, 
  %%    _3
  _4 = call (`erlang`:`setelement`/3), _0, _1, _3

  %% Aliased:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^9, ^1

9:
  %% Result type:
  %%    {any(), any(), any()}
  %% Aliased:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_type_SUITE.erl:744
%% Counter = 64
%% bs_ensure_opt: true
function `beam_type_SUITE`:`gh_6458`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _58 = bif:is_tuple _0
  br _58, ^58, ^43

58:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _59 = bif:tuple_size _0

  %% Argument types:
  %%    _59 => 0..16777215
  %% Unique:
  %%    _59
  _60 = bif:'=:=' _59, `1`
  br _60, ^57, ^43

57:
  %% Argument types:
  %%    _0 => {any()}
  %% Aliased:
  %%    _0
  _20 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _1 = bif:'=:=' _20, `true`
  switch _20, ^47, [
    { `false`, ^48 },
    { `true`, ^49 }
  ]

49:
  br ^46

48:
  br ^46

46:
  %% Anno: #{boolean_phi => true}
  _4 = phi { `false`, ^48 }, { `true`, ^49 }
  br ^44

47:
  br ^44

44:
  %% Anno: #{boolean_phi => true}
  _5 = phi { `false`, ^47 }, { _4, ^46 }

  %% beam_type_SUITE.erl:744
  %% Argument types:
  %%    _1 => 'false' | 'true'
  %%    _5 => 'false' | 'true'
  %% Unique:
  %%    _1, 
  %%    _5
  _22 = bif:'or' _1, _5
  br _22, ^51, ^43

51:
  %% Aliased:
  %%    _20
  _63 = bif:is_boolean _20
  br _63, ^52, ^53

52:
  %% beam_type_SUITE.erl:750
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _0, 
  %%    _20
  _39 = call (`'-gh_6458/1-lc$^0/1-0-'`/3), `[]`, _0, _20

  %% Unique:
  %%    _39
  _56 = succeeded:body _39
  br _56, ^56, ^1

56:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _39
  ret _39

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _23 = put_tuple `badarg`, _20

  %% beam_type_SUITE.erl:745
  %% Unique:
  %%    _23
  _33 = call (`erlang`:`error`/1), _23

  %% Aliased:
  %%    _33
  _55 = succeeded:body _33
  br ^1

43:
  %% beam_type_SUITE.erl:744
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-gh_6458/1-',1}}
  _40 = match_fail `function_clause`, _0

  %% Unique:
  %%    _40
  _61 = succeeded:body _40
  br ^1

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41
}

%% beam_type_SUITE.erl:756
%% Counter = 20
%% bs_ensure_opt: true
function `beam_type_SUITE`:`gh_6927`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_tuple _0
  br _15, ^15, ^13

15:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _16 = bif:tuple_size _0

  %% Argument types:
  %%    _16 => 0..16777215
  %% Unique:
  %%    _16
  _17 = bif:'=:=' _16, `2`
  br _17, ^14, ^13

14:
  br ^12

13:
  br ^12

12:
  _2 = phi { `ok`, ^13 }, { _0, ^14 }

  %% beam_type_SUITE.erl:759
  %% Argument types:
  %%    _2 => 'ok' | {any(), any()}
  %% Aliased:
  %%    _2
  _9 = bif:element `42`, _2

  %% Aliased:
  %%    _9
  _18 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_type_SUITE.erl:767
%% Counter = 178
%% bs_ensure_opt: true
function `beam_type_SUITE`:`record_float`(_0) {
0:
  %% beam_type_SUITE.erl:768
  %% Result type:
  %%    float()
  _13 = call (`record_float`/2), `{x,{0}}`, `1700`

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _13 => float()
  %% Unique:
  %%    _13
  _125 = bif:'=:=' _13, `17.0`
  br _125, ^124, ^42

124:
  %% beam_type_SUITE.erl:769
  %% Result type:
  %%    float()
  _14 = call (`record_float`/2), `{x,{0}}`, `2.3e3`

  %% Unique:
  %%    _14
  _43 = succeeded:body _14
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _14 => float()
  %% Unique:
  %%    _14
  _122 = bif:'=:=' _14, `23.0`
  br _122, ^172, ^45

172:
  br ^175

175:
  _49 = new_try_tag `'catch'`
  br _49, ^47, ^48

47:
  %% beam_type_SUITE.erl:770
  %% Result type:
  %%    float()
  _28 = call (`record_float`/2), `{x,{1}}`, `88`

  %% Unique:
  %%    _28
  _51 = succeeded:body _28
  br _51, ^51, ^48

51:
  br ^46

48:
  %% Unique:
  %%    _49
  _54 = landingpad `'catch'`, _49

  %% Aliased:
  %%    _54
  _52 = extract _54, `0`
  br ^46

46:
  _55 = phi { _52, ^48 }, { _28, ^51 }

  %% Aliased:
  %%    _55
  %% Unique:
  %%    _49
  _3 = catch_end _49, _55

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _117 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _117, ^114, ^57

114:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _15 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _111 = is_tagged_tuple _15, `2`, `if_clause`
  br _111, ^173, ^57

173:
  br ^176

176:
  _61 = new_try_tag `'catch'`
  br _61, ^59, ^60

59:
  %% beam_type_SUITE.erl:771
  %% Result type:
  %%    float()
  _30 = call (`record_float`/2), `{x,{}}`, `88`

  %% Unique:
  %%    _30
  _63 = succeeded:body _30
  br _63, ^63, ^60

63:
  br ^58

60:
  %% Unique:
  %%    _61
  _66 = landingpad `'catch'`, _61

  %% Aliased:
  %%    _66
  _64 = extract _66, `0`
  br ^58

58:
  _67 = phi { _64, ^60 }, { _30, ^63 }

  %% Aliased:
  %%    _67
  %% Unique:
  %%    _61
  _5 = catch_end _61, _67

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _104 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _104, ^101, ^69

101:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _19 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _98 = is_tagged_tuple _19, `2`, `if_clause`
  br _98, ^174, ^69

174:
  br ^177

177:
  _73 = new_try_tag `'catch'`
  br _73, ^71, ^72

71:
  %% beam_type_SUITE.erl:772
  %% Result type:
  %%    float()
  _32 = call (`record_float`/2), `{x,undefined}`, `88`

  %% Unique:
  %%    _32
  _75 = succeeded:body _32
  br _75, ^75, ^72

75:
  br ^70

72:
  %% Unique:
  %%    _73
  _78 = landingpad `'catch'`, _73

  %% Aliased:
  %%    _78
  _76 = extract _78, `0`
  br ^70

70:
  _79 = phi { _76, ^72 }, { _32, ^75 }

  %% Aliased:
  %%    _79
  %% Unique:
  %%    _73
  _7 = catch_end _73, _79

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _91 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _91, ^88, ^81

88:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _23 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _85 = is_tagged_tuple _23, `2`, `if_clause`
  br _85, ^82, ^81

82:
  %% Result type:
  %%    'ok'
  ret `ok`

81:
  %% beam_type_SUITE.erl:772
  %% Aliased:
  %%    _7
  _33 = match_fail `badmatch`, _7

  %% Unique:
  %%    _33
  _94 = succeeded:body _33
  br ^1

69:
  %% beam_type_SUITE.erl:771
  %% Aliased:
  %%    _5
  _34 = match_fail `badmatch`, _5

  %% Unique:
  %%    _34
  _107 = succeeded:body _34
  br ^1

57:
  %% beam_type_SUITE.erl:770
  %% Aliased:
  %%    _3
  _35 = match_fail `badmatch`, _3

  %% Unique:
  %%    _35
  _120 = succeeded:body _35
  br ^1

45:
  %% beam_type_SUITE.erl:769
  %% Unique:
  %%    _14
  _36 = match_fail `badmatch`, _14

  %% Unique:
  %%    _36
  _123 = succeeded:body _36
  br ^1

42:
  %% beam_type_SUITE.erl:768
  %% Unique:
  %%    _13
  _37 = match_fail `badmatch`, _13

  %% Unique:
  %%    _37
  _126 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% beam_type_SUITE.erl:775
%% Counter = 51
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'x', 'undefined' | {...}}
%%    _1 =>
%%     number(88, 2300)
function `beam_type_SUITE`:`record_float`(_0, _1) {
0:
  %% beam_type_SUITE.erl:776
  %% Argument types:
  %%    _1 => number(88, 2300)
  %% Unique:
  %%    _1
  _45 = float:convert _1

  %% Unique:
  %%    _45
  _50 = succeeded:body _45
  br _50, ^50, ^1

50:
  %% beam_type_SUITE.erl:776
  _46 = float:put `100.0`

  %% beam_type_SUITE.erl:776
  %% Unique:
  %%    _45, 
  %%    _46
  _47 = float:'/' _45, _46

  %% Unique:
  %%    _47
  _17 = succeeded:body _47
  br _17, ^48, ^1

48:
  %% Unique:
  %%    _47
  N = float:get _47

  %% beam_type_SUITE.erl:777
  %% Argument types:
  %%    _0 => {'x', 'undefined' | {...}}
  %% Unique:
  %%    _0
  _7 = get_tuple_element _0, `1`

  %% beam_type_SUITE.erl:777
  %% Argument types:
  %%    _7 => 'undefined' | {...}
  %% Unique:
  %%    _7
  _8 = bif:element `1`, _7

  %% Aliased:
  %%    _8
  _33 = succeeded:guard _8
  br _33, ^38, ^19

38:
  %% beam_type_SUITE.erl:777
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _9 = bif:'=:=' _8, `0`
  br _9, ^35, ^19

35:
  %% Result type:
  %%    float()
  %% Unique:
  %%    N
  ret N

19:
  %% beam_type_SUITE.erl:777
  _14 = match_fail `if_clause`

  %% Unique:
  %%    _14
  _36 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_type_SUITE.erl:781
%% Counter = 75
%% bs_ensure_opt: true
function `beam_type_SUITE`:`binary_float`(_0) {
0:
  %% beam_type_SUITE.erl:782
  %% Result type:
  %%    bitstring(64)
  _8 = call (`binary_negate_float`/1), `<<63,240,0,0,0,0,0,0>>`

  %% Aliased:
  %%    _8
  _22 = succeeded:body _8
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _8 => bitstring(64)
  %% Aliased:
  %%    _8
  _9 = bs_start_match `new`, _8

  %% beam_type_SUITE.erl:782
  %% Argument types:
  %%    _9 => bs_context(64)
  %% Aliased:
  %%    _9
  _10 = bs_match `float`, _9, `[unsigned,big]`, `64`, `1`

  %% Aliased:
  %%    _10
  _25 = succeeded:guard _10
  br _25, ^25, ^24

25:
  %% Aliased:
  %%    _10
  _11 = bs_extract _10

  %% Argument types:
  %%    _11 => float()
  %% Unique:
  %%    _11
  _55 = bif:'=:=' _11, `-1.0`
  br _55, ^54, ^24

54:
  %% Aliased:
  %%    _10
  _53 = bs_test_tail _10, `0`
  br _53, ^73, ^24

73:
  br ^74

74:
  _29 = new_try_tag `'catch'`
  br _29, ^27, ^28

27:
  %% beam_type_SUITE.erl:783
  _3 = call (`id`/1), `64.0`

  %% Aliased:
  %%    _3
  _31 = succeeded:body _3
  br _31, ^31, ^28

31:
  %% beam_type_SUITE.erl:783
  _2 = call (`id`/1), `0`

  %% Aliased:
  %%    _2
  _32 = succeeded:body _2
  br _32, ^32, ^28

32:
  %% beam_type_SUITE.erl:783
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _2, 
  %%    _3
  _17 = call (`binary_float_1`/2), _3, _2

  %% Aliased:
  %%    _17
  _33 = succeeded:body _17
  br ^28

28:
  %% Unique:
  %%    _29
  _36 = landingpad `'catch'`, _29

  %% Aliased:
  %%    _36
  _34 = extract _36, `0`
  br ^26

26:
  %% Aliased:
  %%    _34
  %% Unique:
  %%    _29
  _4 = catch_end _29, _34

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _49 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _49, ^46, ^39

46:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _12 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _43 = is_tagged_tuple _12, `2`, `badarg`
  br _43, ^40, ^39

40:
  %% Result type:
  %%    'ok'
  ret `ok`

39:
  %% beam_type_SUITE.erl:783
  %% Aliased:
  %%    _4
  _18 = match_fail `badmatch`, _4

  %% Unique:
  %%    _18
  _52 = succeeded:body _18
  br ^1

24:
  %% beam_type_SUITE.erl:782
  %% Aliased:
  %%    _8
  _19 = match_fail `badmatch`, _8

  %% Unique:
  %%    _19
  _57 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_type_SUITE.erl:786
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(64)
%%     accepts_match_context
function `beam_type_SUITE`:`binary_negate_float`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(64)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _3 = bs_start_match `new`, _0

  %% beam_type_SUITE.erl:786
  %% Argument types:
  %%    _3 => bs_context(64)
  %% Aliased:
  %%    _3
  _4 = bs_match `float`, _3, `[unsigned,big]`, `64`, `1`

  %% Aliased:
  %%    _4
  _11 = succeeded:guard _4
  br _11, ^11, ^10

11:
  %% Aliased:
  %%    _4
  _5 = bs_extract _4

  %% Aliased:
  %%    _4
  _14 = bs_test_tail _4, `0`
  br _14, ^14, ^10

14:
  %% beam_type_SUITE.erl:787
  %% Argument types:
  %%    _5 => float()
  %% Unique:
  %%    _5
  _23 = float:put _5

  %% beam_type_SUITE.erl:787
  %% Unique:
  %%    _23
  _24 = float:'-' _23

  %% Unique:
  %%    _24
  _12 = succeeded:body _24
  br _12, ^25, ^1

25:
  %% Unique:
  %%    _24
  _1 = float:get _24

  %% beam_type_SUITE.erl:787
  %% Argument types:
  %%    _1 => float()
  %% Unique:
  %%    _1
  %% Anno: #{unit => 64}
  _6 = bs_create_bin `float`, `[1,{segment,1}]`, _1, `64`

  %% Aliased:
  %%    _6
  _13 = succeeded:body _6
  br _13, ^13, ^1

13:
  %% Result type:
  %%    bitstring(64)
  %% Aliased:
  %%    _6
  ret _6

10:
  %% Aliased:
  %%    _3
  _22 = bs_get_tail _3

  %% beam_type_SUITE.erl:786
  %% Aliased:
  %%    _22
  %% Anno: #{inlined => {'-inlined-binary_negate_float/1-',1}}
  _7 = match_fail `function_clause`, _22

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:790
%% Counter = 21
%% bs_ensure_opt: true
function `beam_type_SUITE`:`binary_float_1`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _19 = bif:'=:=' _0, `64.0`
  br _19, ^13, ^12

13:
  %% beam_type_SUITE.erl:791
  _2 = call (`erlang`:`binary_to_integer`/1), `ok`

  %% Aliased:
  %%    _2
  _14 = succeeded:body _2
  br ^1

12:
  %% beam_type_SUITE.erl:791
  %% Aliased:
  %%    _0
  _9 = match_fail `badmatch`, _0

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_type_SUITE.erl:794
%% Counter = 59
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_compare`(_0) {
0:
  %% beam_type_SUITE.erl:795
  %% Result type:
  %%    'false'
  _9 = call (`do_float_compare`/1), `-42.0`

  %% Unique:
  %%    _9
  _23 = succeeded:body _9
  br _23, ^56, ^1

56:
  %% beam_type_SUITE.erl:796
  %% Result type:
  %%    'false'
  _10 = call (`do_float_compare`/1), `-42`

  %% Unique:
  %%    _10
  _26 = succeeded:body _10
  br _26, ^53, ^1

53:
  %% beam_type_SUITE.erl:797
  %% Result type:
  %%    'false' | 'true'
  _11 = call (`do_float_compare`/1), `0`

  %% Unique:
  %%    _11
  _29 = succeeded:body _11
  br _29, ^29, ^1

29:
  br _11, ^31, ^50

31:
  %% beam_type_SUITE.erl:797
  _18 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _18
  _52 = succeeded:body _18
  br ^1

50:
  %% beam_type_SUITE.erl:798
  %% Result type:
  %%    'false' | 'true'
  _12 = call (`do_float_compare`/1), `0.0`

  %% Unique:
  %%    _12
  _32 = succeeded:body _12
  br _32, ^32, ^1

32:
  br _12, ^34, ^47

34:
  %% beam_type_SUITE.erl:798
  _17 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _17
  _49 = succeeded:body _17
  br ^1

47:
  %% beam_type_SUITE.erl:799
  %% Result type:
  %%    'false' | 'true'
  _13 = call (`do_float_compare`/1), `42`

  %% Unique:
  %%    _13
  _35 = succeeded:body _13
  br _35, ^35, ^1

35:
  br _13, ^44, ^37

44:
  %% beam_type_SUITE.erl:800
  %% Result type:
  %%    'false' | 'true'
  _14 = call (`do_float_compare`/1), `42.0`

  %% Unique:
  %%    _14
  _38 = succeeded:body _14
  br _38, ^38, ^1

38:
  br _14, ^41, ^40

41:
  %% Result type:
  %%    'ok'
  ret `ok`

40:
  %% beam_type_SUITE.erl:800
  _15 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _15
  _43 = succeeded:body _15
  br ^1

37:
  %% beam_type_SUITE.erl:799
  _16 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _16
  _46 = succeeded:body _16
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:803
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     number(-42, 42)
function `beam_type_SUITE`:`do_float_compare`(_0) {
0:
  %% beam_type_SUITE.erl:807
  %% Argument types:
  %%    _0 => number(-42, 42)
  %% Unique:
  %%    _0
  _19 = float:convert _0

  %% Unique:
  %%    _19
  _24 = succeeded:body _19
  br _24, ^24, ^1

24:
  %% beam_type_SUITE.erl:807
  _20 = float:put `1.0`

  %% beam_type_SUITE.erl:807
  %% Unique:
  %%    _19, 
  %%    _20
  _21 = float:'+' _19, _20

  %% Unique:
  %%    _21
  _9 = succeeded:body _21
  br _9, ^22, ^1

22:
  %% Unique:
  %%    _21
  Y = float:get _21

  %% beam_type_SUITE.erl:808
  %% Argument types:
  %%    _0 => number(-42, 42)
  %% Unique:
  %%    _0
  _4 = bif:'>' _0, `0`
  br _4, ^11, ^13

11:
  %% beam_type_SUITE.erl:810
  %% Argument types:
  %%    Y => float()
  %% Unique:
  %%    Y
  _6 = bif:'>' Y, `0`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _6
  ret _6

13:
  %% Result type:
  %%    'false'
  ret `false`

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:813
%% Counter = 88
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_overflow`(_0) {
0:
  %% beam_type_SUITE.erl:814
  %% Result type:
  %%    2
  _1 = call (`two`/0)

  %% Unique:
  %%    _1
  _31 = succeeded:body _1
  br _31, ^32, ^1

32:
  %% beam_type_SUITE.erl:814
  Res1 = call (`id`/1), `179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216`

  %% Aliased:
  %%    Res1
  _33 = succeeded:body Res1
  br _33, ^33, ^1

33:
  %% beam_type_SUITE.erl:815
  %% Result type:
  %%    integer()
  _18 = call (`float_overflow_1`/0)

  %% Unique:
  %%    _18
  _34 = succeeded:body _18
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _18 => integer()
  %% Aliased:
  %%    Res1
  %% Unique:
  %%    _18
  _37 = bif:'=:=' _18, Res1
  br _37, ^37, ^36

37:
  %% beam_type_SUITE.erl:817
  %% Result type:
  %%    2
  _6 = call (`two`/0)

  %% Unique:
  %%    _6
  _38 = succeeded:body _6
  br _38, ^39, ^1

39:
  %% beam_type_SUITE.erl:817
  Res2 = call (`id`/1), `-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216`

  %% Aliased:
  %%    Res2
  _40 = succeeded:body Res2
  br _40, ^40, ^1

40:
  %% beam_type_SUITE.erl:818
  %% Result type:
  %%    integer()
  _19 = call (`float_overflow_2`/0)

  %% Unique:
  %%    _19
  _41 = succeeded:body _19
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    _19 => integer()
  %% Aliased:
  %%    Res2
  %% Unique:
  %%    _19
  _44 = bif:'=:=' _19, Res2
  br _44, ^86, ^43

86:
  br ^87

87:
  _48 = new_try_tag `'catch'`
  br _48, ^46, ^47

46:
  %% beam_type_SUITE.erl:820
  %% Result type:
  %%    none()
  _25 = call (`float_overflow_3`/0)

  %% Aliased:
  %%    _25
  _50 = succeeded:body _25
  br ^47

47:
  %% Unique:
  %%    _48
  _53 = landingpad `'catch'`, _48

  %% Aliased:
  %%    _53
  _51 = extract _53, `0`
  br ^45

45:
  %% Aliased:
  %%    _51
  %% Unique:
  %%    _48
  _12 = catch_end _48, _51

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _65 = is_tagged_tuple _12, `2`, `'EXIT'`
  br _65, ^62, ^56

62:
  %% Argument types:
  %%    _12 => {''EXIT'', any()}
  %% Aliased:
  %%    _12
  _20 = get_tuple_element _12, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _59 = bif:is_tuple _20
  br _59, ^59, ^56

59:
  %% Argument types:
  %%    _20 => {...}
  %% Aliased:
  %%    _20
  _60 = bif:tuple_size _20

  %% Argument types:
  %%    _60 => 0..16777215
  %% Unique:
  %%    _60
  _61 = bif:'=:=' _60, `2`
  br _61, ^58, ^56

58:
  %% Argument types:
  %%    _20 => {any(), any()}
  %% Aliased:
  %%    _20
  _23 = get_tuple_element _20, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _57 = bif:'=:=' _23, `{bad_filter,[0]}`
  br _57, ^57, ^56

57:
  %% Result type:
  %%    'ok'
  ret `ok`

56:
  %% beam_type_SUITE.erl:820
  %% Aliased:
  %%    _12
  _26 = match_fail `badmatch`, _12

  %% Unique:
  %%    _26
  _68 = succeeded:body _26
  br ^1

43:
  %% beam_type_SUITE.erl:818
  %% Unique:
  %%    _19
  _27 = match_fail `badmatch`, _19

  %% Unique:
  %%    _27
  _69 = succeeded:body _27
  br ^1

36:
  %% beam_type_SUITE.erl:815
  %% Unique:
  %%    _18
  _28 = match_fail `badmatch`, _18

  %% Unique:
  %%    _28
  _70 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_type_SUITE.erl:826
%% Counter = 42
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_overflow_1`() {
0:
  br ^41

41:
  _18 = new_try_tag `'try'`
  br _18, ^17, ^15

17:
  %% beam_type_SUITE.erl:829
  %% Result type:
  %%    2
  _0 = call (`two`/0)

  %% Unique:
  %%    _0
  _19 = succeeded:body _0
  br _19, ^14, ^15

14:
  %% Unique:
  %%    _18
  _23 = kill_try_tag _18
  br ^16

15:
  %% Unique:
  %%    _18
  _21 = landingpad `'try'`, _18

  %% Unique:
  %%    _18
  _22 = kill_try_tag _18
  br ^16

16:
  _8 = phi { `179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216`, ^14 }, { `0.0`, ^15 }

  %% beam_type_SUITE.erl:827
  %% Argument types:
  %%    _8 => number(0, 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216)
  %% Unique:
  %%    _8
  _11 = bif:round _8

  %% Unique:
  %%    _11
  _24 = succeeded:body _11
  br _24, ^24, ^1

24:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_type_SUITE.erl:836
%% Counter = 43
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_overflow_2`() {
0:
  br ^42

42:
  _19 = new_try_tag `'try'`
  br _19, ^18, ^16

18:
  %% beam_type_SUITE.erl:839
  %% Result type:
  %%    2
  _0 = call (`two`/0)

  %% Unique:
  %%    _0
  _20 = succeeded:body _0
  br _20, ^15, ^16

15:
  %% Unique:
  %%    _19
  _24 = kill_try_tag _19
  br ^17

16:
  %% Unique:
  %%    _19
  _22 = landingpad `'try'`, _19

  %% Unique:
  %%    _19
  _23 = kill_try_tag _19
  br ^17

17:
  _9 = phi { `-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216`, ^15 }, { `0.0`, ^16 }

  %% beam_type_SUITE.erl:837
  %% Argument types:
  %%    _9 => number(-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216, 0)
  %% Unique:
  %%    _9
  _12 = bif:round _9

  %% Unique:
  %%    _12
  _25 = succeeded:body _12
  br _25, ^25, ^1

25:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _12
  ret _12

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_type_SUITE.erl:846
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`two`() {
0:
  %% Result type:
  %%    2
  ret `2`
}

%% beam_type_SUITE.erl:848
%% Counter = 24
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_overflow_3`() {
0:
  %% beam_type_SUITE.erl:849
  %% Result type:
  %%    none()
  _20 = call (`'-float_overflow_3/0-lc$^0/1-0-'`/1), `<<>>`
  _23 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% beam_type_SUITE.erl:853
%% Counter = 22
%% bs_ensure_opt: true
function `beam_type_SUITE`:`arity_checks`(_0) {
0:
  %% beam_type_SUITE.erl:856
  %% Result type:
  %%    'ok'
  _5 = call (`do_record_arity_check`/1), `{rgb,255,255,255,1}`

  %% Unique:
  %%    _5
  _10 = succeeded:body _5
  br _10, ^19, ^1

19:
  %% beam_type_SUITE.erl:857
  %% Result type:
  %%    'ok'
  _4 = call (`do_tuple_arity_check`/1), `{255,255,255,1}`

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^16, ^1

16:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _4
  ret _4

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_type_SUITE.erl:861
%% Counter = 90
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'rgb', 255, 255, 255, 1}
function `beam_type_SUITE`:`do_record_arity_check`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:870
%% Counter = 81
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {255, 255, 255, 1}
function `beam_type_SUITE`:`do_tuple_arity_check`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:879
%% Counter = 38
%% bs_ensure_opt: true
function `beam_type_SUITE`:`elixir_binaries`(_0) {
0:
  %% beam_type_SUITE.erl:880
  %% Result type:
  %%    bitstring(8)
  _4 = call (`elixir_binary_1`/1), `<<"blitzky">>`

  %% Aliased:
  %%    _4
  _16 = succeeded:body _4
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _4 => bitstring(8)
  %% Aliased:
  %%    _4
  _33 = bif:'=:=' _4, `<<"foo blitzky baz">>`
  br _33, ^33, ^18

33:
  %% beam_type_SUITE.erl:881
  %% Result type:
  %%    bitstring(8)
  _5 = call (`elixir_binary_2`/1), `42`

  %% Unique:
  %%    _5
  _19 = succeeded:body _5
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _5 => bitstring(8)
  %% Unique:
  %%    _5
  _31 = bif:'=:=' _5, `<<"foo * baz">>`
  br _31, ^31, ^21

31:
  %% beam_type_SUITE.erl:882
  %% Result type:
  %%    bitstring(2)
  _6 = call (`elixir_bitstring_3`/1), `<<188,3:2>>`

  %% Aliased:
  %%    _6
  _22 = succeeded:body _6
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _6 => bitstring(2)
  %% Aliased:
  %%    _6
  _7 = bs_start_match `new`, _6
  _36 = bs_ensure _7, `14`, `1`
  _37 = succeeded:guard _36
  br _37, ^35, ^24

35:
  %% Argument types:
  %%    _36 => bs_context(2)
  %% Aliased:
  %%    _7
  %% Anno: #{ensured => true}
  _10 = bs_match `string`, _36, `<<123,51:6>>`

  %% Aliased:
  %%    _10
  _27 = succeeded:guard _10
  br _27, ^27, ^24

27:
  %% Aliased:
  %%    _10
  _28 = bs_test_tail _10, `0`
  br _28, ^28, ^24

28:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% beam_type_SUITE.erl:882
  %% Aliased:
  %%    _6
  _11 = match_fail `badmatch`, _6

  %% Unique:
  %%    _11
  _30 = succeeded:body _11
  br ^1

21:
  %% beam_type_SUITE.erl:881
  %% Unique:
  %%    _5
  _12 = match_fail `badmatch`, _5

  %% Unique:
  %%    _12
  _32 = succeeded:body _12
  br ^1

18:
  %% beam_type_SUITE.erl:880
  %% Aliased:
  %%    _4
  _13 = match_fail `badmatch`, _4

  %% Unique:
  %%    _13
  _34 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_type_SUITE.erl:885
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(8)
function `beam_type_SUITE`:`elixir_binary_1`(_0) {
0:
  %% beam_type_SUITE.erl:886
  %% Argument types:
  %%    _0 => bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{unit => 8}
  _6 = bs_create_bin `binary`, `[1]`, `<<"foo ">>`, `all`, `binary`, `[8,{segment,2}]`, _0, `all`, `binary`, `[1]`, `<<" baz">>`, `all`

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _6
  ret _6

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_type_SUITE.erl:895
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
function `beam_type_SUITE`:`elixir_binary_2`(_0) {
0:
  %% Result type:
  %%    bitstring(8)
  ret `<<"foo * baz">>`
}

%% beam_type_SUITE.erl:906
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(2)
function `beam_type_SUITE`:`elixir_bitstring_3`(_0) {
0:
  %% beam_type_SUITE.erl:907
  %% Argument types:
  %%    _0 => bitstring(2)
  %% Aliased:
  %%    _0
  %% Anno: #{unit => 2}
  _6 = bs_create_bin `binary`, `[1]`, `<<7:4>>`, `all`, `binary`, `[1,{segment,2}]`, _0, `all`

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Result type:
  %%    bitstring(2)
  %% Aliased:
  %%    _6
  ret _6

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_type_SUITE.erl:915
%% Counter = 38
%% bs_ensure_opt: true
function `beam_type_SUITE`:`find_best`(_0) {
0:
  %% beam_type_SUITE.erl:916
  %% Result type:
  %%    'ok' | {'error', bitstring(8)}
  _6 = call (`find_best`/2), `[a]`, `nil`

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _6 => 'ok' | {'error', bitstring(8)}
  %% Unique:
  %%    _6
  _36 = bif:'=:=' _6, `ok`
  br _36, ^35, ^18

35:
  %% beam_type_SUITE.erl:917
  %% Result type:
  %%    'ok' | {'error', bitstring(8)}
  _7 = call (`find_best`/2), `[<<"a">>]`, `nil`

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _7 => 'ok' | {'error', bitstring(8)}
  %% Unique:
  %%    _7
  _33 = bif:'=:=' _7, `ok`
  br _33, ^32, ^21

32:
  %% beam_type_SUITE.erl:918
  %% Result type:
  %%    {'error', bitstring(8)}
  _8 = call (`find_best`/2), `[]`, `nil`

  %% Unique:
  %%    _8
  _22 = succeeded:body _8
  br _22, ^25, ^1

25:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% beam_type_SUITE.erl:917
  %% Unique:
  %%    _7
  _12 = match_fail `badmatch`, _7

  %% Unique:
  %%    _12
  _34 = succeeded:body _12
  br ^1

18:
  %% beam_type_SUITE.erl:916
  %% Unique:
  %%    _6
  _13 = match_fail `badmatch`, _6

  %% Unique:
  %%    _13
  _37 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% beam_type_SUITE.erl:923
%% Counter = 82
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list('a' | bitstring(8))
%%    _1 =>
%%     'a' | 'nil' | bitstring(8)
function `beam_type_SUITE`:`find_best`(_0, _1) {
0:
  %% Unique:
  %%    _0
  _60 = is_nonempty_list _0
  br _60, ^60, ^37

60:
  %% Argument types:
  %%    _0 => nonempty_list('a' | bitstring(8))
  %% Unique:
  %%    _0
  _17 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list('a' | bitstring(8))
  %% Unique:
  %%    _0
  _16 = get_tl _0

  %% Argument types:
  %%    _17 => 'a' | bitstring(8)
  %% Unique:
  %%    _17
  _48 = bif:'=:=' _17, `<<"a">>`
  br _48, ^48, ^38

48:
  %% beam_type_SUITE.erl:932
  %% Argument types:
  %%    _1 => 'a' | 'nil' | bitstring(8)
  %% Unique:
  %%    _1
  _19 = bif:'=:=' _1, `nil`
  br _19, ^46, ^40

46:
  br ^39

40:
  br ^39

39:
  _11 = phi { _1, ^40 }, { `<<"a">>`, ^46 }

  %% beam_type_SUITE.erl:930
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _11
  _33 = call (`find_best`/2), _16, _11

  %% Unique:
  %%    _33
  _47 = succeeded:body _33
  br _47, ^47, ^1

47:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _33
  ret _33

38:
  %% Argument types:
  %%    _17 => 'a' | bitstring(8)
  %% Unique:
  %%    _17
  _59 = bif:'=:=' _17, `a`
  br _59, ^58, ^37

58:
  %% beam_type_SUITE.erl:926
  %% Argument types:
  %%    _1 => 'a' | 'nil' | bitstring(8)
  %% Unique:
  %%    _1
  _23 = bif:'=:=' _1, `nil`
  br _23, ^56, ^50

56:
  br ^49

50:
  br ^49

49:
  _6 = phi { _1, ^50 }, { `a`, ^56 }

  %% beam_type_SUITE.erl:924
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _6
  _30 = call (`find_best`/2), _16, _6

  %% Unique:
  %%    _30
  _57 = succeeded:body _30
  br _57, ^57, ^1

57:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _30
  ret _30

37:
  %% Argument types:
  %%    _1 => 'a' | 'nil' | bitstring(8)
  %% Unique:
  %%    _1
  _64 = bif:'=:=' _1, `<<"a">>`
  br _64, ^64, ^62

64:
  %% Argument types:
  %%    _0 => list('a' | bitstring(8))
  %% Unique:
  %%    _0
  _63 = bif:'=:=' _0, `[]`
  br _63, ^63, ^61

63:
  %% Result type:
  %%    'ok'
  ret `ok`

62:
  %% Argument types:
  %%    
  switch _1, ^61, [
    { `a`, ^67 },
    { `nil`, ^68 }
  ]

68:
  %% Argument types:
  %%    _0 => list('a' | bitstring(8))
  %% Unique:
  %%    _0
  _66 = bif:'=:=' _0, `[]`
  br _66, ^66, ^61

66:
  %% Result type:
  %%    {'error', bitstring(8)}
  ret `{error,<<"should not get here">>}`

67:
  %% Argument types:
  %%    _0 => list('a' | bitstring(8))
  %% Unique:
  %%    _0
  _65 = bif:'=:=' _0, `[]`
  br _65, ^65, ^61

65:
  %% Result type:
  %%    'ok'
  ret `ok`

61:
  %% beam_type_SUITE.erl:923
  %% Unique:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-find_best/2-',2}}
  _34 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _34
  _69 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% beam_type_SUITE.erl:942
%% Counter = 21
%% bs_ensure_opt: true
function `beam_type_SUITE`:`test_size`(_0) {
0:
  %% beam_type_SUITE.erl:943
  %% Result type:
  %%    2
  _3 = call (`do_test_size`/1), `{a,b}`

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^18, ^1

18:
  %% beam_type_SUITE.erl:944
  %% Result type:
  %%    0..288230376151711743
  _4 = call (`do_test_size`/1), `<<0,0,0,42>>`

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _4 => 0..288230376151711743
  %% Unique:
  %%    _4
  _16 = bif:'=:=' _4, `4`
  br _16, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_type_SUITE.erl:944
  %% Unique:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _17 = succeeded:body _5
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:947
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b'} | bitstring(32)
function `beam_type_SUITE`:`do_test_size`(_0) {
0:
  %% Argument types:
  %%    _0 => {'a', 'b'} | bitstring(32)
  %% Unique:
  %%    _0
  _10 = bif:is_tuple _0
  br _10, ^11, ^12

11:
  %% Result type:
  %%    2
  ret `2`

12:
  %% beam_type_SUITE.erl:950
  %% Argument types:
  %%    _0 => bitstring(32)
  %% Unique:
  %%    _0
  _3 = bif:byte_size _0
  %% Result type:
  %%    0..288230376151711743
  %% Unique:
  %%    _3
  ret _3
}

%% beam_type_SUITE.erl:952
%% Counter = 878
%% bs_ensure_opt: true
function `beam_type_SUITE`:`cover_lists_functions`(_0) {
0:
  %% Result type:
  %%    'foo'
  _5 = make_fun (`'-cover_lists_functions/1-fun-0-'`/2)

  %% beam_type_SUITE.erl:953
  %% Aliased:
  %%    _5
  _6 = call (`id`/1), _5

  %% Aliased:
  %%    _6
  _251 = succeeded:body _6
  br _251, ^251, ^1

251:
  %% beam_type_SUITE.erl:953
  %% Aliased:
  %%    _0, 
  %%    _6
  _128 = call (`lists`:`foldl`/3), _6, `foo`, _0

  %% Aliased:
  %%    _128
  _252 = succeeded:body _128
  br _252, ^252, ^1

252:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _632 = bif:'=:=' _128, `foo`
  br _632, ^631, ^254

631:
  %% Result type:
  %%    'foo'
  _12 = make_fun (`'-cover_lists_functions/1-fun-1-'`/2)

  %% beam_type_SUITE.erl:954
  %% Aliased:
  %%    _0, 
  %%    _12
  _129 = call (`lists`:`foldl`/3), _12, `foo`, _0

  %% Aliased:
  %%    _129
  _255 = succeeded:body _129
  br _255, ^854, ^1

854:
  br ^868

868:
  _261 = new_try_tag `'catch'`
  br _261, ^259, ^260

259:
  %% beam_type_SUITE.erl:955
  %% Aliased:
  %%    _0
  _191 = call (`lists`:`foldl`/3), `not_a_fun`, `foo`, _0

  %% Aliased:
  %%    _191
  _263 = succeeded:body _191
  br _263, ^263, ^260

263:
  br ^258

260:
  %% Unique:
  %%    _261
  _266 = landingpad `'catch'`, _261

  %% Aliased:
  %%    _266
  _264 = extract _266, `0`
  br ^258

258:
  _267 = phi { _264, ^260 }, { _191, ^263 }

  %% Aliased:
  %%    _267
  %% Unique:
  %%    _261
  _14 = catch_end _261, _267

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _624 = is_tagged_tuple _14, `2`, `'EXIT'`
  br _624, ^621, ^269

621:
  %% Result type:
  %%    'foo'
  _20 = make_fun (`'-cover_lists_functions/1-fun-2-'`/2)

  %% beam_type_SUITE.erl:957
  %% Aliased:
  %%    _20
  _21 = call (`id`/1), _20

  %% Aliased:
  %%    _21
  _270 = succeeded:body _21
  br _270, ^270, ^1

270:
  %% beam_type_SUITE.erl:957
  %% Aliased:
  %%    _0, 
  %%    _21
  _132 = call (`lists`:`foldr`/3), _21, `foo`, _0

  %% Aliased:
  %%    _132
  _271 = succeeded:body _132
  br _271, ^271, ^1

271:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _132
  _619 = bif:'=:=' _132, `foo`
  br _619, ^618, ^273

618:
  %% Result type:
  %%    'foo'
  _27 = make_fun (`'-cover_lists_functions/1-fun-3-'`/2)

  %% beam_type_SUITE.erl:958
  %% Aliased:
  %%    _0, 
  %%    _27
  _133 = call (`lists`:`foldr`/3), _27, `foo`, _0

  %% Aliased:
  %%    _133
  _274 = succeeded:body _133
  br _274, ^855, ^1

855:
  br ^869

869:
  _280 = new_try_tag `'catch'`
  br _280, ^278, ^279

278:
  %% beam_type_SUITE.erl:959
  %% Aliased:
  %%    _0
  _193 = call (`lists`:`foldr`/3), `not_a_fun`, `foo`, _0

  %% Aliased:
  %%    _193
  _282 = succeeded:body _193
  br _282, ^282, ^279

282:
  br ^277

279:
  %% Unique:
  %%    _280
  _285 = landingpad `'catch'`, _280

  %% Aliased:
  %%    _285
  _283 = extract _285, `0`
  br ^277

277:
  _286 = phi { _283, ^279 }, { _193, ^282 }

  %% Aliased:
  %%    _286
  %% Unique:
  %%    _280
  _29 = catch_end _280, _286

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _611 = is_tagged_tuple _29, `2`, `'EXIT'`
  br _611, ^608, ^288

608:
  %% beam_type_SUITE.erl:961
  _31 = call (`id`/1), `1`

  %% Aliased:
  %%    _31
  _289 = succeeded:body _31
  br _289, ^289, ^1

289:
  %% beam_type_SUITE.erl:961
  %% Aliased:
  %%    _0, 
  %%    _31
  _136 = call (`lists`:`keyfind`/3), `data_dir`, _31, _0

  %% Aliased:
  %%    _136
  _290 = succeeded:body _136
  br _290, ^290, ^1

290:
  %% Argument types:
  %%    _136 => 'false' | {...}
  %% Aliased:
  %%    _136
  _604 = is_tagged_tuple _136, `2`, `data_dir`
  br _604, ^856, ^292

856:
  br ^870

870:
  _296 = new_try_tag `'catch'`
  br _296, ^294, ^295

294:
  %% beam_type_SUITE.erl:962
  %% Aliased:
  %%    _0
  _195 = call (`lists`:`keyfind`/3), `data_dir`, `not_a_position`, _0

  %% Aliased:
  %%    _195
  _298 = succeeded:body _195
  br _298, ^298, ^295

298:
  br ^293

295:
  %% Unique:
  %%    _296
  _301 = landingpad `'catch'`, _296

  %% Aliased:
  %%    _301
  _299 = extract _301, `0`
  br ^293

293:
  _302 = phi { _299, ^295 }, { `false`, ^298 }

  %% Aliased:
  %%    _302
  %% Unique:
  %%    _296
  _33 = catch_end _296, _302

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _597 = is_tagged_tuple _33, `2`, `'EXIT'`
  br _597, ^857, ^304

857:
  br ^871

871:
  _308 = new_try_tag `'catch'`
  br _308, ^306, ^307

306:
  %% beam_type_SUITE.erl:963
  _197 = call (`lists`:`keyfind`/3), `data_dir`, `1`, `not_a_list`

  %% Aliased:
  %%    _197
  _310 = succeeded:body _197
  br ^307

307:
  %% Unique:
  %%    _308
  _313 = landingpad `'catch'`, _308

  %% Aliased:
  %%    _313
  _311 = extract _313, `0`
  br ^305

305:
  %% Aliased:
  %%    _311
  %% Unique:
  %%    _308
  _35 = catch_end _308, _311

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _590 = is_tagged_tuple _35, `2`, `'EXIT'`
  br _590, ^858, ^316

858:
  br ^872

872:
  _320 = new_try_tag `'catch'`
  br _320, ^318, ^319

318:
  %% beam_type_SUITE.erl:965
  %% Aliased:
  %%    _0
  _199 = call (`lists`:`map`/2), `not_a_fun`, _0

  %% Aliased:
  %%    _199
  _322 = succeeded:body _199
  br ^319

319:
  %% Unique:
  %%    _320
  _325 = landingpad `'catch'`, _320

  %% Aliased:
  %%    _325
  _323 = extract _325, `0`
  br ^317

317:
  %% Aliased:
  %%    _323
  %% Unique:
  %%    _320
  _37 = catch_end _320, _323

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _583 = is_tagged_tuple _37, `2`, `'EXIT'`
  br _583, ^859, ^328

859:
  br ^873

873:
  _332 = new_try_tag `'catch'`
  br _332, ^330, ^331

330:
  %% beam_type_SUITE.erl:966
  _201 = call (`lists`:`map`/2), `not_a_fun`, `[]`

  %% Aliased:
  %%    _201
  _334 = succeeded:body _201
  br ^331

331:
  %% Unique:
  %%    _332
  _337 = landingpad `'catch'`, _332

  %% Aliased:
  %%    _337
  _335 = extract _337, `0`
  br ^329

329:
  %% Aliased:
  %%    _335
  %% Unique:
  %%    _332
  _39 = catch_end _332, _335

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _576 = is_tagged_tuple _39, `2`, `'EXIT'`
  br _576, ^573, ^340

573:
  _41 = make_fun (`id`/1)
  _344 = new_try_tag `'catch'`
  br _344, ^638, ^343

638:
  %% beam_type_SUITE.erl:967
  %% Aliased:
  %%    _41
  _203 = call (`lists`:`map`/2), _41, `not_a_list`

  %% Aliased:
  %%    _203
  _346 = succeeded:body _203
  br ^343

343:
  %% Unique:
  %%    _344
  _349 = landingpad `'catch'`, _344

  %% Aliased:
  %%    _349
  _347 = extract _349, `0`
  br ^341

341:
  %% Aliased:
  %%    _347
  %% Unique:
  %%    _344
  _42 = catch_end _344, _347

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _569 = is_tagged_tuple _42, `2`, `'EXIT'`
  br _569, ^566, ^352

566:
  _44 = make_fun (`id`/1)

  %% beam_type_SUITE.erl:968
  %% Aliased:
  %%    _44
  _45 = call (`id`/1), _44

  %% Aliased:
  %%    _45
  _353 = succeeded:body _45
  br _353, ^353, ^1

353:
  %% beam_type_SUITE.erl:968
  %% Aliased:
  %%    _0, 
  %%    _45
  _149 = call (`lists`:`map`/2), _45, _0

  %% Aliased:
  %%    _149
  _354 = succeeded:body _149
  br _354, ^354, ^1

354:
  %% Argument types:
  %%    _149 => list(any())
  %% Aliased:
  %%    _0, 
  %%    _149
  _357 = bif:'=:=' _149, _0
  br _357, ^357, ^356

357:
  %% Argument types:
  %%    _0 => list(any())
  %% Aliased:
  %%    _0
  _150 = put_list `no`, _0

  %% beam_type_SUITE.erl:970
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _150
  _151 = call (`lists`:`suffix`/2), _150, _0

  %% Aliased:
  %%    _151
  _358 = succeeded:body _151
  br _358, ^358, ^1

358:
  br _151, ^363, ^359

363:
  %% beam_type_SUITE.erl:972
  _204 = call (`ct`:`fail`/1), `should_be_false`

  %% Aliased:
  %%    _204
  _361 = succeeded:body _204
  br _361, ^359, ^1

359:
  %% beam_type_SUITE.erl:977
  _152 = call (`lists`:`zip`/2), `[]`, `[]`

  %% Aliased:
  %%    _152
  _365 = succeeded:body _152
  br _365, ^861, ^1

861:
  br ^874

874:
  _371 = new_try_tag `'catch'`
  br _371, ^369, ^370

369:
  %% beam_type_SUITE.erl:978
  _207 = call (`lists`:`zip`/2), `not_list`, `[b]`

  %% Aliased:
  %%    _207
  _373 = succeeded:body _207
  br ^370

370:
  %% Unique:
  %%    _371
  _376 = landingpad `'catch'`, _371

  %% Aliased:
  %%    _376
  _374 = extract _376, `0`
  br ^368

368:
  %% Aliased:
  %%    _374
  %% Unique:
  %%    _371
  _49 = catch_end _371, _374

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _559 = is_tagged_tuple _49, `2`, `'EXIT'`
  br _559, ^556, ^379

556:
  %% Result type:
  %%    {any(), any()}
  Zipper = make_fun (`'-cover_lists_functions/1-fun-4-'`/2)

  %% beam_type_SUITE.erl:982
  %% Aliased:
  %%    Zipper
  _155 = call (`lists`:`zipwith`/3), Zipper, `[]`, `[]`

  %% Aliased:
  %%    _155
  _380 = succeeded:body _155
  br _380, ^554, ^1

554:
  %% beam_type_SUITE.erl:985
  %% Argument types:
  %%    _0 => list(any())
  %% Aliased:
  %%    _0
  _57 = bif:length _0

  %% beam_type_SUITE.erl:985
  %% Unique:
  %%    _57
  _58 = call (`lists`:`duplicate`/2), _57, `zip`

  %% Aliased:
  %%    _58
  _384 = succeeded:body _58
  br _384, ^384, ^1

384:
  %% beam_type_SUITE.erl:984
  %% Aliased:
  %%    _0, 
  %%    _58, 
  %%    Zipper
  Zipped = call (`lists`:`zipwith`/3), Zipper, _58, _0

  %% Aliased:
  %%    Zipped
  _385 = succeeded:body Zipped
  br _385, ^385, ^1

385:
  %% Aliased:
  %%    Zipped
  _552 = is_nonempty_list Zipped
  br _552, ^552, ^387

552:
  %% Argument types:
  %%    Zipped => nonempty_list({any(), any()})
  %% Aliased:
  %%    Zipped
  _157 = get_hd Zipped

  %% Argument types:
  %%    _157 => {any(), any()}
  %% Aliased:
  %%    _157
  _549 = is_tagged_tuple _157, `2`, `zip`
  br _549, ^546, ^387

546:
  %% beam_type_SUITE.erl:989
  %% Aliased:
  %%    Zipper
  _63 = call (`id`/1), Zipper

  %% Aliased:
  %%    _63
  _388 = succeeded:body _63
  br _388, ^388, ^1

388:
  %% beam_type_SUITE.erl:990
  %% Argument types:
  %%    Zipped => nonempty_list({any(), any()})
  %% Aliased:
  %%    Zipped
  _61 = bif:length Zipped

  %% beam_type_SUITE.erl:990
  %% Unique:
  %%    _61
  _62 = call (`lists`:`duplicate`/2), _61, `zip_zip`

  %% Aliased:
  %%    _62
  _390 = succeeded:body _62
  br _390, ^390, ^1

390:
  %% beam_type_SUITE.erl:989
  %% Aliased:
  %%    _62, 
  %%    _63, 
  %%    Zipped
  _160 = call (`lists`:`zipwith`/3), _63, _62, Zipped

  %% Aliased:
  %%    _160
  _391 = succeeded:body _160
  br _391, ^544, ^1

544:
  %% Argument types:
  %%    _160 => nonempty_list(any())
  %% Aliased:
  %%    _160
  _162 = get_hd _160

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _541 = is_tagged_tuple _162, `2`, `zip_zip`
  br _541, ^538, ^393

538:
  %% Argument types:
  %%    _162 => {'zip_zip', any()}
  %% Aliased:
  %%    _162
  _163 = get_tuple_element _162, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _163
  _535 = is_tagged_tuple _163, `2`, `zip`
  br _535, ^862, ^393

862:
  br ^875

875:
  _397 = new_try_tag `'catch'`
  br _397, ^395, ^396

395:
  %% beam_type_SUITE.erl:994
  _210 = call (`lists`:`zipwith`/3), `not_a_fun`, `[a]`, `[b]`

  %% Aliased:
  %%    _210
  _399 = succeeded:body _210
  br ^396

396:
  %% Unique:
  %%    _397
  _402 = landingpad `'catch'`, _397

  %% Aliased:
  %%    _402
  _400 = extract _402, `0`
  br ^394

394:
  %% Aliased:
  %%    _400
  %% Unique:
  %%    _397
  _66 = catch_end _397, _400

  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _528 = is_tagged_tuple _66, `2`, `'EXIT'`
  br _528, ^525, ^405

525:
  %% Result type:
  %%    none()
  _72 = make_fun (`'-cover_lists_functions/1-fun-5-'`/2)
  _409 = new_try_tag `'catch'`
  br _409, ^642, ^408

642:
  %% beam_type_SUITE.erl:995
  %% Aliased:
  %%    _72
  _213 = call (`lists`:`zipwith`/3), _72, `[a]`, `[b]`

  %% Aliased:
  %%    _213
  _411 = succeeded:body _213
  br ^408

408:
  %% Unique:
  %%    _409
  _414 = landingpad `'catch'`, _409

  %% Aliased:
  %%    _414
  _412 = extract _414, `0`
  br ^406

406:
  %% Aliased:
  %%    _412
  %% Unique:
  %%    _409
  _73 = catch_end _409, _412

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _521 = is_tagged_tuple _73, `2`, `'EXIT'`
  br _521, ^518, ^417

518:
  %% Argument types:
  %%    _73 => {''EXIT'', any()}
  %% Aliased:
  %%    _73
  _169 = get_tuple_element _73, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _169
  _515 = is_tagged_tuple _169, `2`, `bad`
  br _515, ^512, ^417

512:
  %% Result type:
  %%    none()
  _79 = make_fun (`'-cover_lists_functions/1-fun-6-'`/2)
  _421 = new_try_tag `'catch'`
  br _421, ^643, ^420

643:
  %% beam_type_SUITE.erl:997
  %% Aliased:
  %%    _79
  _216 = call (`lists`:`zipwith`/3), _79, `not_list`, `[b]`

  %% Aliased:
  %%    _216
  _423 = succeeded:body _216
  br ^420

420:
  %% Unique:
  %%    _421
  _426 = landingpad `'catch'`, _421

  %% Aliased:
  %%    _426
  _424 = extract _426, `0`
  br ^418

418:
  %% Aliased:
  %%    _424
  %% Unique:
  %%    _421
  _80 = catch_end _421, _424

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _508 = is_tagged_tuple _80, `2`, `'EXIT'`
  br _508, ^505, ^429

505:
  %% Result type:
  %%    none()
  _88 = make_fun (`'-cover_lists_functions/1-fun-7-'`/2)

  %% beam_type_SUITE.erl:1000
  %% Argument types:
  %%    Zipped => nonempty_list({any(), any()})
  %% Aliased:
  %%    Zipped
  _82 = bif:length Zipped
  _433 = new_try_tag `'catch'`
  br _433, ^435, ^432

435:
  %% beam_type_SUITE.erl:1000
  %% Unique:
  %%    _82
  _83 = call (`lists`:`duplicate`/2), _82, `zip_zip`

  %% Aliased:
  %%    _83
  _436 = succeeded:body _83
  br _436, ^436, ^432

436:
  %% beam_type_SUITE.erl:999
  %% Aliased:
  %%    _83, 
  %%    _88, 
  %%    Zipped
  _219 = call (`lists`:`zipwith`/3), _88, _83, Zipped

  %% Aliased:
  %%    _219
  _437 = succeeded:body _219
  br ^432

432:
  %% Unique:
  %%    _433
  _440 = landingpad `'catch'`, _433

  %% Aliased:
  %%    _440
  _438 = extract _440, `0`
  br ^430

430:
  %% Aliased:
  %%    _438
  %% Unique:
  %%    _433
  _89 = catch_end _433, _438

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _501 = is_tagged_tuple _89, `2`, `'EXIT'`
  br _501, ^498, ^443

498:
  %% Argument types:
  %%    _89 => {''EXIT'', any()}
  %% Aliased:
  %%    _89
  _175 = get_tuple_element _89, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _175
  _495 = is_tagged_tuple _175, `2`, `bad`
  br _495, ^866, ^443

866:
  br ^876

876:
  _447 = new_try_tag `'catch'`
  br _447, ^445, ^446

445:
  %% beam_type_SUITE.erl:1003
  _221 = call (`lists`:`unzip`/1), `not_a_list`

  %% Aliased:
  %%    _221
  _449 = succeeded:body _221
  br ^446

446:
  %% Unique:
  %%    _447
  _452 = landingpad `'catch'`, _447

  %% Aliased:
  %%    _452
  _450 = extract _452, `0`
  br ^444

444:
  %% Aliased:
  %%    _450
  %% Unique:
  %%    _447
  _91 = catch_end _447, _450

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _488 = is_tagged_tuple _91, `2`, `'EXIT'`
  br _488, ^867, ^455

867:
  br ^877

877:
  _459 = new_try_tag `'catch'`
  br _459, ^457, ^458

457:
  %% beam_type_SUITE.erl:1004
  _223 = call (`lists`:`unzip`/1), `[not_a_tuple]`

  %% Aliased:
  %%    _223
  _461 = succeeded:body _223
  br ^458

458:
  %% Unique:
  %%    _459
  _464 = landingpad `'catch'`, _459

  %% Aliased:
  %%    _464
  _462 = extract _464, `0`
  br ^456

456:
  %% Aliased:
  %%    _462
  %% Unique:
  %%    _459
  _93 = catch_end _459, _462

  %% Argument types:
  %%    
  %% Aliased:
  %%    _93
  _481 = is_tagged_tuple _93, `2`, `'EXIT'`
  br _481, ^478, ^467

478:
  %% beam_type_SUITE.erl:1005
  %% Aliased:
  %%    Zipped
  _183 = call (`lists`:`unzip`/1), Zipped

  %% Aliased:
  %%    _183
  _468 = succeeded:body _183
  br _468, ^471, ^1

471:
  %% Result type:
  %%    'ok'
  ret `ok`

467:
  %% beam_type_SUITE.erl:1004
  %% Aliased:
  %%    _93
  _225 = match_fail `badmatch`, _93

  %% Unique:
  %%    _225
  _484 = succeeded:body _225
  br ^1

455:
  %% beam_type_SUITE.erl:1003
  %% Aliased:
  %%    _91
  _226 = match_fail `badmatch`, _91

  %% Unique:
  %%    _226
  _491 = succeeded:body _226
  br ^1

443:
  %% beam_type_SUITE.erl:999
  %% Aliased:
  %%    _89
  _227 = match_fail `badmatch`, _89

  %% Unique:
  %%    _227
  _504 = succeeded:body _227
  br ^1

429:
  %% beam_type_SUITE.erl:997
  %% Aliased:
  %%    _80
  _228 = match_fail `badmatch`, _80

  %% Unique:
  %%    _228
  _511 = succeeded:body _228
  br ^1

417:
  %% beam_type_SUITE.erl:995
  %% Aliased:
  %%    _73
  _229 = match_fail `badmatch`, _73

  %% Unique:
  %%    _229
  _524 = succeeded:body _229
  br ^1

405:
  %% beam_type_SUITE.erl:994
  %% Aliased:
  %%    _66
  _230 = match_fail `badmatch`, _66

  %% Unique:
  %%    _230
  _531 = succeeded:body _230
  br ^1

393:
  %% beam_type_SUITE.erl:992
  %% Aliased:
  %%    _160
  _231 = match_fail `badmatch`, _160

  %% Unique:
  %%    _231
  _545 = succeeded:body _231
  br ^1

387:
  %% beam_type_SUITE.erl:987
  %% Aliased:
  %%    Zipped
  _232 = match_fail `badmatch`, Zipped

  %% Unique:
  %%    _232
  _553 = succeeded:body _232
  br ^1

379:
  %% beam_type_SUITE.erl:978
  %% Aliased:
  %%    _49
  _234 = match_fail `badmatch`, _49

  %% Unique:
  %%    _234
  _562 = succeeded:body _234
  br ^1

356:
  %% beam_type_SUITE.erl:968
  %% Aliased:
  %%    _149
  _236 = match_fail `badmatch`, _149

  %% Unique:
  %%    _236
  _565 = succeeded:body _236
  br ^1

352:
  %% beam_type_SUITE.erl:967
  %% Aliased:
  %%    _42
  _237 = match_fail `badmatch`, _42

  %% Unique:
  %%    _237
  _572 = succeeded:body _237
  br ^1

340:
  %% beam_type_SUITE.erl:966
  %% Aliased:
  %%    _39
  _238 = match_fail `badmatch`, _39

  %% Unique:
  %%    _238
  _579 = succeeded:body _238
  br ^1

328:
  %% beam_type_SUITE.erl:965
  %% Aliased:
  %%    _37
  _239 = match_fail `badmatch`, _37

  %% Unique:
  %%    _239
  _586 = succeeded:body _239
  br ^1

316:
  %% beam_type_SUITE.erl:963
  %% Aliased:
  %%    _35
  _240 = match_fail `badmatch`, _35

  %% Unique:
  %%    _240
  _593 = succeeded:body _240
  br ^1

304:
  %% beam_type_SUITE.erl:962
  %% Aliased:
  %%    _33
  _241 = match_fail `badmatch`, _33

  %% Unique:
  %%    _241
  _600 = succeeded:body _241
  br ^1

292:
  %% beam_type_SUITE.erl:961
  %% Aliased:
  %%    _136
  _242 = match_fail `badmatch`, _136

  %% Unique:
  %%    _242
  _607 = succeeded:body _242
  br ^1

288:
  %% beam_type_SUITE.erl:959
  %% Aliased:
  %%    _29
  _243 = match_fail `badmatch`, _29

  %% Unique:
  %%    _243
  _614 = succeeded:body _243
  br ^1

273:
  %% beam_type_SUITE.erl:957
  %% Aliased:
  %%    _132
  _245 = match_fail `badmatch`, _132

  %% Unique:
  %%    _245
  _620 = succeeded:body _245
  br ^1

269:
  %% beam_type_SUITE.erl:955
  %% Aliased:
  %%    _14
  _246 = match_fail `badmatch`, _14

  %% Unique:
  %%    _246
  _627 = succeeded:body _246
  br ^1

254:
  %% beam_type_SUITE.erl:953
  %% Aliased:
  %%    _128
  _248 = match_fail `badmatch`, _128

  %% Unique:
  %%    _248
  _633 = succeeded:body _248
  br ^1

1:
  _249 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _249
}

%% beam_type_SUITE.erl:1009
%% Counter = 16
%% bs_ensure_opt: true
function `beam_type_SUITE`:`list_append`(_0) {
0:
  %% beam_type_SUITE.erl:1012
  _2 = call (`id`/1), `[]`

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:1012
  _1 = call (`id`/1), `hello`

  %% Aliased:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% beam_type_SUITE.erl:1012
  %% Aliased:
  %%    _1, 
  %%    _2
  _4 = call (`erlang`:`'++'`/2), _2, _1

  %% Aliased:
  %%    _4
  _10 = succeeded:body _4
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `hello`
  br _14, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_type_SUITE.erl:1012
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1018
%% Counter = 15
%% bs_ensure_opt: true
function `beam_type_SUITE`:`bad_binary_unit`(_0) {
0:
  %% beam_type_SUITE.erl:1019
  Bin = call (`id`/1), `<<1,2,3>>`

  %% Aliased:
  %%    Bin
  _8 = succeeded:body Bin
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:1020
  %% Argument types:
  %%    
  %% Aliased:
  %%    Bin
  %% Anno: #{first_fragment_dies => true,unit => 1}
  Bitstring = bs_create_bin `append`, `[8,{segment,1}]`, Bin, `all`, `binary`, `[1]`, `<<1:1>>`, `all`

  %% Aliased:
  %%    Bitstring
  _9 = succeeded:body Bitstring
  br _9, ^9, ^1

9:
  %% beam_type_SUITE.erl:1021
  %% Argument types:
  %%    Bitstring => bitstring(1)
  %% Aliased:
  %%    Bitstring
  _4 = bif:is_binary Bitstring
  br _4, ^11, ^12

11:
  %% beam_type_SUITE.erl:1021
  _5 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _5
  _14 = succeeded:body _5
  br ^1

12:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1025
%% Counter = 37
%% bs_ensure_opt: true
function `beam_type_SUITE`:`none_argument`(_0) {
0:
  %% beam_type_SUITE.erl:1026
  Binary = call (`id`/1), `<<0,3,42>>`

  %% Aliased:
  %%    Binary
  _19 = succeeded:body Binary
  br _19, ^36, ^1

36:
  %% beam_type_SUITE.erl:1027
  _14 = call (`id`/1), `error`

  %% Aliased:
  %%    _14
  _30 = succeeded:body _14
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _34 = bif:'=:=' _14, `error`
  br _34, ^33, ^32

33:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  %% beam_type_SUITE.erl:1027
  %% Aliased:
  %%    _14
  _16 = match_fail `badmatch`, _14

  %% Unique:
  %%    _16
  _35 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_type_SUITE.erl:1051
%% Counter = 50
%% bs_ensure_opt: true
function `beam_type_SUITE`:`success_type_oscillation`(_0) {
0:
  %% beam_type_SUITE.erl:1054
  _2 = call (`id`/1), `case_1_1`

  %% Aliased:
  %%    _2
  _24 = succeeded:body _2
  br _24, ^24, ^1

24:
  %% beam_type_SUITE.erl:1054
  %% Result type:
  %%    {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Aliased:
  %%    _2
  _12 = call (`sto_1`/1), _2

  %% Unique:
  %%    _12
  _25 = succeeded:body _12
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _12 => {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Unique:
  %%    _12
  _28 = bif:'=:=' _12, `{a,[]}`
  br _28, ^28, ^27

28:
  %% beam_type_SUITE.erl:1055
  _4 = call (`id`/1), `case_2_1`

  %% Aliased:
  %%    _4
  _29 = succeeded:body _4
  br _29, ^29, ^1

29:
  %% beam_type_SUITE.erl:1055
  %% Result type:
  %%    {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Aliased:
  %%    _4
  _13 = call (`sto_1`/1), _4

  %% Unique:
  %%    _13
  _30 = succeeded:body _13
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _13 => {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Unique:
  %%    _13
  _33 = bif:'=:=' _13, `{a,[]}`
  br _33, ^33, ^32

33:
  %% beam_type_SUITE.erl:1056
  _6 = call (`id`/1), `case_2_2`

  %% Aliased:
  %%    _6
  _34 = succeeded:body _6
  br _34, ^34, ^1

34:
  %% beam_type_SUITE.erl:1056
  %% Result type:
  %%    {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Aliased:
  %%    _6
  _14 = call (`sto_1`/1), _6

  %% Unique:
  %%    _14
  _35 = succeeded:body _14
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    _14 => {'a', nil()} | {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Unique:
  %%    _14
  _44 = is_tagged_tuple _14, `2`, `b`
  br _44, ^40, ^37

40:
  %% Argument types:
  %%    _14 => {'b', nonempty_list({'a', nil()} | {'b', nonempty_list({...})})}
  %% Unique:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% Argument types:
  %%    _15 => nonempty_list({'a', nil()} | {'b', nonempty_list({...})})
  %% Unique:
  %%    _15
  _18 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_list({'a', nil()} | {'b', nonempty_list({...})})
  %% Unique:
  %%    _15
  _17 = get_tl _15

  %% Argument types:
  %%    _17 => list({'a', nil()} | {'b', nonempty_list({...})})
  %% Unique:
  %%    _17
  _39 = bif:'=:=' _17, `[]`
  br _39, ^39, ^37

39:
  %% Argument types:
  %%    _18 => {'a', nil()} | {'b', nonempty_list({...})}
  %% Unique:
  %%    _18
  _38 = bif:'=:=' _18, `{a,[]}`
  br _38, ^38, ^37

38:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% beam_type_SUITE.erl:1056
  %% Unique:
  %%    _14
  _19 = match_fail `badmatch`, _14

  %% Unique:
  %%    _19
  _47 = succeeded:body _19
  br ^1

32:
  %% beam_type_SUITE.erl:1055
  %% Unique:
  %%    _13
  _20 = match_fail `badmatch`, _13

  %% Unique:
  %%    _20
  _48 = succeeded:body _20
  br ^1

27:
  %% beam_type_SUITE.erl:1054
  %% Unique:
  %%    _12
  _21 = match_fail `badmatch`, _12

  %% Unique:
  %%    _21
  _49 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% beam_type_SUITE.erl:1060
%% Counter = 61
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sto_1`(_0) {
0:
  switch _0, ^36, [
    { `case_1_1`, ^48 },
    { `case_1_2`, ^48 },
    { `case_2_1`, ^49 },
    { `case_2_2`, ^50 },
    { `case_2_3`, ^51 },
    { `case_2_4`, ^52 },
    { `case_3_1`, ^53 },
    { `case_3_2`, ^54 },
    { `case_3_3`, ^55 },
    { `case_3_4`, ^56 },
    { `case_4_1`, ^57 },
    { `case_4_2`, ^58 },
    { `step_4_3`, ^59 }
  ]

59:
  %% beam_type_SUITE.erl:1072
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({...})})}
  _10 = call (`sto_1`/1), `case_3_3`

  %% Unique:
  %%    _10
  _47 = succeeded:body _10
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    _10 => {'b', nonempty_list({'b', nonempty_list({...})})}
  %% Unique:
  %%    _10
  _21 = put_list _10, `[]`

  %% Argument types:
  %%    _21 => nonempty_list({'b', nonempty_list({'b', nonempty_list({...})})})
  %% Unique:
  %%    _21
  _22 = put_tuple `b`, _21
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'b', nonempty_list({...})})})}
  %% Unique:
  %%    _22
  ret _22

58:
  %% beam_type_SUITE.erl:1071
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({...})})}
  _9 = call (`sto_1`/1), `case_3_2`

  %% Unique:
  %%    _9
  _46 = succeeded:body _9
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _9 => {'b', nonempty_list({'b', nonempty_list({...})})}
  %% Unique:
  %%    _9
  _20 = put_list _9, `[]`

  %% Argument types:
  %%    _20 => nonempty_list({'b', nonempty_list({'b', nonempty_list({...})})})
  %% Unique:
  %%    _20
  _23 = put_tuple `b`, _20
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'b', nonempty_list({...})})})}
  %% Unique:
  %%    _23
  ret _23

57:
  %% beam_type_SUITE.erl:1070
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  _8 = call (`sto_1`/1), `case_3_1`

  %% Unique:
  %%    _8
  _45 = succeeded:body _8
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _8 => {'b', nonempty_list({'a', nil()})}
  %% Unique:
  %%    _8
  _19 = put_list _8, `[]`

  %% Argument types:
  %%    _19 => nonempty_list({'b', nonempty_list({'a', nil()})})
  %% Unique:
  %%    _19
  _24 = put_tuple `b`, _19
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'a', nil()})})}
  %% Unique:
  %%    _24
  ret _24

56:
  %% beam_type_SUITE.erl:1069
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  _7 = call (`sto_1`/1), `case_2_4`

  %% Unique:
  %%    _7
  _44 = succeeded:body _7
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    _7 => {'b', nonempty_list({'a', nil()})}
  %% Unique:
  %%    _7
  _18 = put_list _7, `[]`

  %% Argument types:
  %%    _18 => nonempty_list({'b', nonempty_list({'a', nil()})})
  %% Unique:
  %%    _18
  _25 = put_tuple `b`, _18
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'a', nil()})})}
  %% Unique:
  %%    _25
  ret _25

55:
  %% beam_type_SUITE.erl:1068
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  _6 = call (`sto_1`/1), `case_2_3`

  %% Unique:
  %%    _6
  _43 = succeeded:body _6
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _6 => {'b', nonempty_list({'a', nil()})}
  %% Unique:
  %%    _6
  _17 = put_list _6, `[]`

  %% Argument types:
  %%    _17 => nonempty_list({'b', nonempty_list({'a', nil()})})
  %% Unique:
  %%    _17
  _26 = put_tuple `b`, _17
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'a', nil()})})}
  %% Unique:
  %%    _26
  ret _26

54:
  %% beam_type_SUITE.erl:1067
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  _5 = call (`sto_1`/1), `case_2_2`

  %% Unique:
  %%    _5
  _42 = succeeded:body _5
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    _5 => {'b', nonempty_list({'a', nil()})}
  %% Unique:
  %%    _5
  _16 = put_list _5, `[]`

  %% Argument types:
  %%    _16 => nonempty_list({'b', nonempty_list({'a', nil()})})
  %% Unique:
  %%    _16
  _27 = put_tuple `b`, _16
  %% Result type:
  %%    {'b', nonempty_list({'b', nonempty_list({'a', nil()})})}
  %% Unique:
  %%    _27
  ret _27

53:
  %% beam_type_SUITE.erl:1066
  %% Result type:
  %%    {'a', nil()}
  _4 = call (`sto_1`/1), `case_2_1`

  %% Unique:
  %%    _4
  _41 = succeeded:body _4
  br _41, ^41, ^1

41:
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  ret `{b,[{a,[]}]}`

52:
  %% beam_type_SUITE.erl:1065
  %% Result type:
  %%    {'a', nil()}
  _3 = call (`sto_1`/1), `case_1_2`

  %% Unique:
  %%    _3
  _40 = succeeded:body _3
  br _40, ^40, ^1

40:
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  ret `{b,[{a,[]}]}`

51:
  %% beam_type_SUITE.erl:1064
  %% Result type:
  %%    {'a', nil()}
  _2 = call (`sto_1`/1), `case_1_1`

  %% Unique:
  %%    _2
  _39 = succeeded:body _2
  br _39, ^39, ^1

39:
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  ret `{b,[{a,[]}]}`

50:
  %% beam_type_SUITE.erl:1063
  %% Result type:
  %%    {'a', nil()}
  _1 = call (`sto_1`/1), `case_1_1`

  %% Unique:
  %%    _1
  _38 = succeeded:body _1
  br _38, ^38, ^1

38:
  %% Result type:
  %%    {'b', nonempty_list({'a', nil()})}
  ret `{b,[{a,[]}]}`

49:
  %% beam_type_SUITE.erl:1062
  %% Result type:
  %%    {'a', nil()}
  _32 = call (`sto_1`/1), `case_1_1`

  %% Unique:
  %%    _32
  _37 = succeeded:body _32
  br _37, ^37, ^1

37:
  %% Result type:
  %%    {'a', nil()}
  %% Unique:
  %%    _32
  ret _32

48:
  %% Result type:
  %%    {'a', nil()}
  ret `{a,[]}`

36:
  %% beam_type_SUITE.erl:1060
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-sto_1/1-',1}}
  _33 = match_fail `function_clause`, _0

  %% Unique:
  %%    _33
  _60 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% beam_type_SUITE.erl:1082
%% Counter = 171
%% bs_ensure_opt: true
function `beam_type_SUITE`:`type_subtraction`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _42 = bif:is_list _0
  br _42, ^42, ^41

42:
  %% beam_type_SUITE.erl:1083
  _1 = call (`id`/1), `<<"A">>`

  %% Aliased:
  %%    _1
  _43 = succeeded:body _1
  br _43, ^43, ^1

43:
  %% beam_type_SUITE.erl:1083
  %% Result type:
  %%    'error' | 'false' | 'true'
  %% Aliased:
  %%    _1
  _19 = call (`type_subtraction_1`/1), _1

  %% Unique:
  %%    _19
  _44 = succeeded:body _19
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    _19 => 'error' | 'false' | 'true'
  %% Unique:
  %%    _19
  _117 = bif:'=:=' _19, `true`
  br _117, ^116, ^46

116:
  %% beam_type_SUITE.erl:1085
  _3 = call (`id`/1), `true`

  %% Aliased:
  %%    _3
  _47 = succeeded:body _3
  br _47, ^47, ^1

47:
  %% beam_type_SUITE.erl:1085
  %% Result type:
  %%    'ok' | bitstring(32)
  %% Aliased:
  %%    _3
  _20 = call (`type_subtraction_2`/1), _3

  %% Unique:
  %%    _20
  _48 = succeeded:body _20
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _20 => 'ok' | bitstring(32)
  %% Unique:
  %%    _20
  _114 = bif:'=:=' _20, `ok`
  br _114, ^113, ^50

113:
  %% beam_type_SUITE.erl:1086
  _5 = call (`id`/1), `false`

  %% Aliased:
  %%    _5
  _51 = succeeded:body _5
  br _51, ^51, ^1

51:
  %% beam_type_SUITE.erl:1086
  %% Result type:
  %%    'ok' | bitstring(32)
  %% Aliased:
  %%    _5
  _21 = call (`type_subtraction_2`/1), _5

  %% Unique:
  %%    _21
  _52 = succeeded:body _21
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    _21 => 'ok' | bitstring(32)
  %% Unique:
  %%    _21
  _111 = bif:'=:=' _21, `<<"aaaa">>`
  br _111, ^165, ^54

165:
  br ^168

168:
  _58 = new_try_tag `'catch'`
  br _58, ^56, ^57

56:
  %% beam_type_SUITE.erl:1087
  _7 = call (`id`/1), `false`

  %% Aliased:
  %%    _7
  _60 = succeeded:body _7
  br _60, ^60, ^57

60:
  %% beam_type_SUITE.erl:1087
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _7
  _27 = call (`type_subtraction_3`/1), _7

  %% Aliased:
  %%    _27
  _61 = succeeded:body _27
  br ^57

57:
  %% Unique:
  %%    _58
  _64 = landingpad `'catch'`, _58

  %% Aliased:
  %%    _64
  _62 = extract _64, `0`
  br ^55

55:
  %% Aliased:
  %%    _62
  %% Unique:
  %%    _58
  _8 = catch_end _58, _62

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _107 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _107, ^166, ^67

166:
  br ^169

169:
  _71 = new_try_tag `'catch'`
  br _71, ^69, ^70

69:
  %% beam_type_SUITE.erl:1088
  _10 = call (`id`/1), `ok`

  %% Aliased:
  %%    _10
  _73 = succeeded:body _10
  br _73, ^73, ^70

73:
  %% beam_type_SUITE.erl:1088
  %% Result type:
  %%    'ok' | bitstring(256,appendable)
  %% Aliased:
  %%    _10
  _29 = call (`type_subtraction_4`/1), _10

  %% Unique:
  %%    _29
  _74 = succeeded:body _29
  br _74, ^74, ^70

74:
  br ^68

70:
  %% Unique:
  %%    _71
  _77 = landingpad `'catch'`, _71

  %% Aliased:
  %%    _77
  _75 = extract _77, `0`
  br ^68

68:
  _78 = phi { _75, ^70 }, { _29, ^74 }

  %% Aliased:
  %%    _78
  %% Unique:
  %%    _71
  _11 = catch_end _71, _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _102 = bif:'=:=' _11, `ok`
  br _102, ^167, ^80

167:
  br ^170

170:
  _84 = new_try_tag `'catch'`
  br _84, ^82, ^83

82:
  %% beam_type_SUITE.erl:1089
  _13 = call (`id`/1), `false`

  %% Aliased:
  %%    _13
  _86 = succeeded:body _13
  br _86, ^86, ^83

86:
  %% beam_type_SUITE.erl:1089
  %% Result type:
  %%    'ok' | bitstring(256,appendable)
  %% Aliased:
  %%    _13
  _31 = call (`type_subtraction_4`/1), _13

  %% Unique:
  %%    _31
  _87 = succeeded:body _31
  br _87, ^87, ^83

87:
  br ^81

83:
  %% Unique:
  %%    _84
  _90 = landingpad `'catch'`, _84

  %% Aliased:
  %%    _90
  _88 = extract _90, `0`
  br ^81

81:
  _91 = phi { _88, ^83 }, { _31, ^87 }

  %% Aliased:
  %%    _91
  %% Unique:
  %%    _84
  _14 = catch_end _84, _91

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _97 = is_tagged_tuple _14, `2`, `'EXIT'`
  br _97, ^94, ^93

94:
  %% Result type:
  %%    'ok'
  ret `ok`

93:
  %% beam_type_SUITE.erl:1089
  %% Aliased:
  %%    _14
  _32 = match_fail `badmatch`, _14

  %% Unique:
  %%    _32
  _100 = succeeded:body _32
  br ^1

80:
  %% beam_type_SUITE.erl:1088
  %% Aliased:
  %%    _11
  _33 = match_fail `badmatch`, _11

  %% Unique:
  %%    _33
  _103 = succeeded:body _33
  br ^1

67:
  %% beam_type_SUITE.erl:1087
  %% Aliased:
  %%    _8
  _34 = match_fail `badmatch`, _8

  %% Unique:
  %%    _34
  _110 = succeeded:body _34
  br ^1

54:
  %% beam_type_SUITE.erl:1086
  %% Unique:
  %%    _21
  _35 = match_fail `badmatch`, _21

  %% Unique:
  %%    _35
  _112 = succeeded:body _35
  br ^1

50:
  %% beam_type_SUITE.erl:1085
  %% Unique:
  %%    _20
  _36 = match_fail `badmatch`, _20

  %% Unique:
  %%    _36
  _115 = succeeded:body _36
  br ^1

46:
  %% beam_type_SUITE.erl:1083
  %% Unique:
  %%    _19
  _37 = match_fail `badmatch`, _19

  %% Unique:
  %%    _37
  _118 = succeeded:body _37
  br ^1

41:
  %% beam_type_SUITE.erl:1082
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-type_subtraction/1-',1}}
  _38 = match_fail `function_clause`, _0

  %% Unique:
  %%    _38
  _119 = succeeded:body _38
  br ^1

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% beam_type_SUITE.erl:1094
%% Counter = 15
%% bs_ensure_opt: true
function `beam_type_SUITE`:`type_subtraction_1`(_0) {
0:
  %% beam_type_SUITE.erl:1095
  %% Result type:
  %%    2..3
  %% Aliased:
  %%    _0
  _a@1 = call (`ts_12`/1), _0

  %% Unique:
  %%    _a@1
  _7 = succeeded:body _a@1
  br _7, ^7, ^1

7:
  %% beam_type_SUITE.erl:1096
  %% Result type:
  %%    1..2
  %% Aliased:
  %%    _0
  _b@1 = call (`ts_23`/1), _0

  %% Unique:
  %%    _b@1
  _8 = succeeded:body _b@1
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:1097
  %% Argument types:
  %%    _a@1 => 2..3
  %%    _b@1 => 1..2
  %% Unique:
  %%    _a@1, 
  %%    _b@1
  _2 = bif:'=:=' _a@1, _b@1
  br _2, ^13, ^14

13:
  %% Result type:
  %%    'error'
  ret `error`

14:
  %% beam_type_SUITE.erl:1099
  %% Argument types:
  %%    _a@1 => 2..3
  %% Unique:
  %%    _a@1
  _3 = bif:'=:=' _a@1, `3`
  br _3, ^12, ^11

12:
  %% beam_type_SUITE.erl:1099
  %% Argument types:
  %%    _b@1 => 1..2
  %% Unique:
  %%    _b@1
  _4 = bif:'=:=' _b@1, `2`
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _4
  ret _4

11:
  %% Result type:
  %%    'false'
  ret `false`

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% beam_type_SUITE.erl:1102
%% Counter = 8
%% bs_ensure_opt: true
function `beam_type_SUITE`:`ts_12`(_0) {
0:
  %% beam_type_SUITE.erl:1103
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:'=:=' _0, `<<"A">>`
  br _2, ^7, ^6

7:
  %% Result type:
  %%    3
  ret `3`

6:
  %% Result type:
  %%    2
  ret `2`
}

%% beam_type_SUITE.erl:1110
%% Counter = 8
%% bs_ensure_opt: true
function `beam_type_SUITE`:`ts_23`(_0) {
0:
  %% beam_type_SUITE.erl:1111
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:'=:=' _0, `<<"A">>`
  br _2, ^7, ^6

7:
  %% Result type:
  %%    2
  ret `2`

6:
  %% Result type:
  %%    1
  ret `1`
}

%% beam_type_SUITE.erl:1118
%% Counter = 25
%% bs_ensure_opt: true
function `beam_type_SUITE`:`type_subtraction_2`(_0) {
0:
  %% beam_type_SUITE.erl:1119
  %% Result type:
  %%    {'ok'} | {'error', bitstring(32)}
  %% Aliased:
  %%    _0
  _4 = call (`ts_34`/1), _0

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^18, ^1

18:
  %% beam_type_SUITE.erl:1120
  %% Argument types:
  %%    _4 => {'ok'} | {'error', bitstring(32)}
  %% Unique:
  %%    _4
  _1 = get_tuple_element _4, `0`

  %% Argument types:
  %%    _1 => 'error' | 'ok'
  %% Unique:
  %%    _1
  _19 = bif:'=:=' _1, `ok`
  br _19, ^19, ^23

19:
  %% Result type:
  %%    'ok'
  ret `ok`

23:
  %% beam_type_SUITE.erl:1123
  %% Argument types:
  %%    _4 => {'error', bitstring(32)}
  %% Unique:
  %%    _4
  _9 = get_tuple_element _4, `1`
  %% Result type:
  %%    bitstring(32)
  %% Unique:
  %%    _9
  ret _9

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:1126
%% Counter = 9
%% bs_ensure_opt: true
function `beam_type_SUITE`:`ts_34`(_0) {
0:
  switch _0, ^5, [
    { `false`, ^7 },
    { `true`, ^6 }
  ]

6:
  %% Result type:
  %%    {'ok'}
  ret `{ok}`

7:
  %% Result type:
  %%    {'error', bitstring(32)}
  ret `{error,<<"aaaa">>}`

5:
  %% beam_type_SUITE.erl:1127
  %% Aliased:
  %%    _0
  _2 = match_fail `case_clause`, _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:1132
%% Counter = 25
%% bs_ensure_opt: true
function `beam_type_SUITE`:`type_subtraction_3`(_0) {
0:
  %% beam_type_SUITE.erl:1132
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-type_subtraction_3/1-',1}}
  _12 = match_fail `function_clause`, _0

  %% Unique:
  %%    _12
  _24 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_type_SUITE.erl:1135
%% Counter = 120
%% bs_ensure_opt: true
function `beam_type_SUITE`:`type_subtraction_4`(_0) {
0:
  br ^119

119:
  _82 = new_try_tag `'try'`
  br _82, ^81, ^79

81:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _85 = bif:'=:=' _0, `ok`
  br _85, ^83, ^84

83:
  %% Unique:
  %%    _82
  _100 = kill_try_tag _82
  %% Result type:
  %%    'ok'
  ret `ok`

84:
  %% beam_type_SUITE.erl:1137
  _63 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _63
  _86 = succeeded:body _63
  br ^79

79:
  %% Unique:
  %%    _82
  _98 = landingpad `'try'`, _82

  %% Aliased:
  %%    _98
  _5 = extract _98, `0`

  %% Aliased:
  %%    _98
  _4 = extract _98, `1`

  %% Aliased:
  %%    _98
  _3 = extract _98, `2`

  %% Unique:
  %%    _82
  _99 = kill_try_tag _82

  %% Argument types:
  %%    _5 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _5
  _96 = bif:'=:=' _5, `throw`
  br _96, ^95, ^88

95:
  %% beam_type_SUITE.erl:1142
  _47 = call (`erts_internal`:`mc_iterator`/1), `ok`

  %% Aliased:
  %%    _47
  _89 = succeeded:body _47
  br _89, ^89, ^1

89:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _93 = bif:'=:=' _47, `[]`
  br _93, ^93, ^101

93:
  %% beam_type_SUITE.erl:1142
  _64 = call (`erlang`:`error`/1), `{bad_generator,ok}`

  %% Aliased:
  %%    _64
  _92 = succeeded:body _64
  br ^1

101:
  %% beam_type_SUITE.erl:1140
  _6 = bs_init_writable `256`

  %% beam_type_SUITE.erl:1140
  %% Result type:
  %%    bitstring(256,appendable)
  %% Aliased:
  %%    _47
  %% Unique:
  %%    _6
  _74 = call (`'-type_subtraction_4/1-lbc$^0/2-0-'`/2), _47, _6

  %% Unique:
  %%    _74
  _94 = succeeded:body _74
  br _94, ^94, ^1

94:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _74
  ret _74

88:
  %% Aliased:
  %%    _3, 
  %%    _4
  _75 = resume _3, _4

  %% Unique:
  %%    _75
  _97 = succeeded:body _75
  br ^1

1:
  _76 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _76
}

%% beam_type_SUITE.erl:1154
%% Counter = 21
%% bs_ensure_opt: true
function `beam_type_SUITE`:`container_subtraction`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _12 = bif:is_list _0
  br _12, ^12, ^11

12:
  %% beam_type_SUITE.erl:1155
  A = call (`id`/1), `baz`

  %% Aliased:
  %%    A
  _13 = succeeded:body A
  br _13, ^13, ^1

13:
  %% beam_type_SUITE.erl:1157
  %% Result type:
  %%    'ok'
  _5 = call (`cs_1`/1), `{foo,[]}`

  %% Unique:
  %%    _5
  _14 = succeeded:body _5
  br _14, ^14, ^1

14:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _3 = put_tuple `bar`, A

  %% beam_type_SUITE.erl:1158
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _3
  _6 = call (`cs_1`/1), _3

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _4 = put_tuple `bar`, A

  %% beam_type_SUITE.erl:1159
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _4
  _7 = call (`cs_2`/1), _4

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^20, ^1

20:
  ret _7

11:
  %% beam_type_SUITE.erl:1154
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-container_subtraction/1-',1}}
  _8 = match_fail `function_clause`, _0

  %% Unique:
  %%    _8
  _17 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_type_SUITE.erl:1163
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'bar', any()} | {'foo', nil()}
function `beam_type_SUITE`:`cs_1`(_0) {
0:
  %% Argument types:
  %%    _0 => {'bar', any()} | {'foo', nil()}
  %% Unique:
  %%    _0
  _5 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _13 = bif:'=:=' _5, `[]`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_type_SUITE.erl:1166
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _0
  _7 = call (`cs_2`/1), _0

  %% Unique:
  %%    _7
  _14 = succeeded:body _7
  br _14, ^14, ^1

14:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _7
  ret _7

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_type_SUITE.erl:1168
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'bar', any()}
function `beam_type_SUITE`:`cs_2`(_0) {
0:
  %% Argument types:
  %%    _0 => {'bar', any()}
  %% Unique:
  %%    _0
  _6 = bif:'=:=' _0, `{bar,baz}`
  br _6, ^6, ^5

6:
  %% Result type:
  %%    'ok'
  ret `ok`

5:
  %% beam_type_SUITE.erl:1168
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cs_2/1-',1}}
  _2 = match_fail `function_clause`, _0

  %% Unique:
  %%    _2
  _7 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:1171
%% Counter = 102
%% bs_ensure_opt: true
function `beam_type_SUITE`:`is_list_opt`(_0) {
0:
  %% beam_type_SUITE.erl:1172
  _1 = call (`id`/1), `<<"application/a2l">>`

  %% Aliased:
  %%    _1
  _31 = succeeded:body _1
  br _31, ^31, ^1

31:
  %% beam_type_SUITE.erl:1172
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _1
  _14 = call (`is_list_opt_1`/1), _1

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br _32, ^32, ^1

32:
  br _14, ^82, ^34

82:
  %% beam_type_SUITE.erl:1173
  _3 = call (`id`/1), `<<>>`

  %% Aliased:
  %%    _3
  _35 = succeeded:body _3
  br _35, ^35, ^1

35:
  %% beam_type_SUITE.erl:1173
  %% Result type:
  %%    'false' | 'true'
  %% Aliased:
  %%    _3
  _15 = call (`is_list_opt_1`/1), _3

  %% Unique:
  %%    _15
  _36 = succeeded:body _15
  br _36, ^36, ^1

36:
  br _15, ^38, ^79

38:
  %% beam_type_SUITE.erl:1173
  _27 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _27
  _81 = succeeded:body _27
  br ^1

79:
  %% beam_type_SUITE.erl:1175
  _5 = call (`id`/1), `[]`

  %% Aliased:
  %%    _5
  _39 = succeeded:body _5
  br _39, ^39, ^1

39:
  %% beam_type_SUITE.erl:1175
  %% Result type:
  %%    'false' | 'ok' | 'true'
  %% Aliased:
  %%    _5
  _16 = call (`is_list_opt_3`/1), _5

  %% Unique:
  %%    _16
  _40 = succeeded:body _16
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _16 => 'false' | 'ok' | 'true'
  %% Unique:
  %%    _16
  _77 = bif:'=:=' _16, `ok`
  br _77, ^76, ^42

76:
  %% beam_type_SUITE.erl:1176
  _7 = call (`id`/1), `[a]`

  %% Aliased:
  %%    _7
  _43 = succeeded:body _7
  br _43, ^43, ^1

43:
  %% beam_type_SUITE.erl:1176
  %% Result type:
  %%    'false' | 'ok' | 'true'
  %% Aliased:
  %%    _7
  _17 = call (`is_list_opt_3`/1), _7

  %% Unique:
  %%    _17
  _44 = succeeded:body _17
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    _17 => 'false' | 'ok' | 'true'
  %% Unique:
  %%    _17
  _74 = bif:'=:=' _17, `true`
  br _74, ^100, ^46

100:
  br ^101

101:
  _50 = new_try_tag `'catch'`
  br _50, ^48, ^49

48:
  %% beam_type_SUITE.erl:1177
  _9 = call (`id`/1), `no_list`

  %% Aliased:
  %%    _9
  _52 = succeeded:body _9
  br _52, ^52, ^49

52:
  %% beam_type_SUITE.erl:1177
  %% Result type:
  %%    'false' | 'ok' | 'true'
  %% Aliased:
  %%    _9
  _23 = call (`is_list_opt_3`/1), _9

  %% Unique:
  %%    _23
  _53 = succeeded:body _23
  br _53, ^53, ^49

53:
  br ^47

49:
  %% Unique:
  %%    _50
  _56 = landingpad `'catch'`, _50

  %% Aliased:
  %%    _56
  _54 = extract _56, `0`
  br ^47

47:
  _57 = phi { _54, ^49 }, { _23, ^53 }

  %% Aliased:
  %%    _57
  %% Unique:
  %%    _50
  _10 = catch_end _50, _57

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _69 = is_tagged_tuple _10, `2`, `'EXIT'`
  br _69, ^66, ^59

66:
  %% Argument types:
  %%    _10 => {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _18 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _63 = is_tagged_tuple _18, `2`, `badarg`
  br _63, ^60, ^59

60:
  %% Result type:
  %%    'ok'
  ret `ok`

59:
  %% beam_type_SUITE.erl:1177
  %% Aliased:
  %%    _10
  _24 = match_fail `badmatch`, _10

  %% Unique:
  %%    _24
  _72 = succeeded:body _24
  br ^1

46:
  %% beam_type_SUITE.erl:1176
  %% Unique:
  %%    _17
  _25 = match_fail `badmatch`, _17

  %% Unique:
  %%    _25
  _75 = succeeded:body _25
  br ^1

42:
  %% beam_type_SUITE.erl:1175
  %% Unique:
  %%    _16
  _26 = match_fail `badmatch`, _16

  %% Unique:
  %%    _26
  _78 = succeeded:body _26
  br ^1

34:
  %% beam_type_SUITE.erl:1172
  _28 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _28
  _84 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_type_SUITE.erl:1181
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`is_list_opt_1`(_0) {
0:
  %% beam_type_SUITE.erl:1185
  %% Result type:
  %%    'nil' | nonempty_list(bitstring(8))
  %% Aliased:
  %%    _0
  _1 = call (`is_list_opt_2`/1), _0

  %% Unique:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% beam_type_SUITE.erl:1185
  %% Unique:
  %%    _1
  %% Anno: #{was_bif_is_list => true}
  _2 = is_nonempty_list _1
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:1187
%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`is_list_opt_2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _5 = bif:'=:=' _0, `<<"application/a2l">>`
  br _5, ^5, ^4

5:
  %% Result type:
  %%    nonempty_list(bitstring(8))
  ret `[<<"a2l">>]`

4:
  %% Result type:
  %%    'nil'
  ret `nil`
}

%% beam_type_SUITE.erl:1190
%% Counter = 17
%% bs_ensure_opt: true
function `beam_type_SUITE`:`is_list_opt_3`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:'=:=' _0, `[]`
  br _10, ^10, ^9

10:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% beam_type_SUITE.erl:1196
  %% Aliased:
  %%    _0
  %% Anno: #{was_bif_is_list => true}
  _3 = is_nonempty_list _0
  br _3, ^11, ^15

15:
  %% beam_type_SUITE.erl:1196
  _5 = call (`erlang`:`binary_to_integer`/1), `<<>>`

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br _13, ^11, ^1

11:
  %% Result type:
  %%    'false' | 'true'
  %% Unique:
  %%    _3
  ret _3

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:1240
%% Counter = 17
%% bs_ensure_opt: true
function `beam_type_SUITE`:`connected_tuple_elements`(_0) {
0:
  %% beam_type_SUITE.erl:1241
  _3 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% beam_type_SUITE.erl:1241
  _1 = call (`id`/1), `2`

  %% Aliased:
  %%    _1
  _10 = succeeded:body _1
  br _10, ^10, ^1

10:
  %% beam_type_SUITE.erl:1241
  %% Result type:
  %%    {'a', any(), any()} | {'b', any(), any()} | {'c', any(), {{any()}, {any()}}}
  %% Aliased:
  %%    _1
  _2 = call (`cte_generate`/1), _1

  %% Unique:
  %%    _2
  _11 = succeeded:body _2
  br _11, ^11, ^1

11:
  %% beam_type_SUITE.erl:1241
  %% Result type:
  %%    {'a', any(), any()} | {'b', any(), any()} | {'c', any(), any(), any()}
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _2
  _5 = call (`cte_match`/2), _3, _2

  %% Unique:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _5 => {'a', any(), any()} | {'b', any(), any()} | {'c', any(), any(), any()}
  %% Unique:
  %%    _5
  _15 = bif:'=:=' _5, `{c,1,2,3}`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_type_SUITE.erl:1241
  %% Unique:
  %%    _5
  _6 = match_fail `badmatch`, _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:1244
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     {'a', any(), any()} | {'b', any(), any()} | {'c', any(), {{any()}, {any()}}}
function `beam_type_SUITE`:`cte_match`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => {'a', any(), any()} | {'b', any(), any()} | {'c', any(), {{any()}, {any()}}}
  %% Unique:
  %%    _1
  _26 = get_tuple_element _1, `0`

  %% Argument types:
  %%    _1 => {'a', any(), any()} | {'b', any(), any()} | {'c', any(), {{any()}, {any()}}}
  %% Unique:
  %%    _1
  _25 = get_tuple_element _1, `1`

  %% Argument types:
  %%    _1 => {'a', any(), any()} | {'b', any(), any()} | {'c', any(), {{any()}, {any()}}}
  %% Unique:
  %%    _1
  _24 = get_tuple_element _1, `2`
  %% Argument types:
  %%    
  switch _26, ^33, [
    { `a`, ^38 },
    { `b`, ^39 }
  ]

39:
  %% beam_type_SUITE.erl:1247
  %% Aliased:
  %%    _25
  _5 = call (`id`/1), _25

  %% Aliased:
  %%    _5
  _36 = succeeded:body _5
  br _36, ^36, ^1

36:
  %% beam_type_SUITE.erl:1247
  %% Aliased:
  %%    _24
  _4 = call (`id`/1), _24

  %% Aliased:
  %%    _4
  _37 = succeeded:body _4
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4, 
  %%    _5
  _27 = put_tuple `b`, _5, _4
  %% Result type:
  %%    {'b', any(), any()}
  %% Unique:
  %%    _27
  ret _27

38:
  %% beam_type_SUITE.erl:1245
  %% Aliased:
  %%    _25
  _3 = call (`id`/1), _25

  %% Aliased:
  %%    _3
  _34 = succeeded:body _3
  br _34, ^34, ^1

34:
  %% beam_type_SUITE.erl:1245
  %% Aliased:
  %%    _24
  _2 = call (`id`/1), _24

  %% Aliased:
  %%    _2
  _35 = succeeded:body _2
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _3
  _28 = put_tuple `a`, _3, _2
  %% Result type:
  %%    {'a', any(), any()}
  %% Unique:
  %%    _28
  ret _28

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _67 = bif:'=:=' _0, `gurka`
  br _67, ^48, ^44

48:
  %% Argument types:
  %%    _24 => {{any()}, {any()}}
  %% Aliased:
  %%    _24
  _20 = get_tuple_element _24, `1`

  %% beam_type_SUITE.erl:1249
  %% Aliased:
  %%    _25
  _8 = call (`id`/1), _25

  %% Aliased:
  %%    _8
  _45 = succeeded:body _8
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    _24 => {{any()}, {any()}}
  %% Aliased:
  %%    _24
  _21 = get_tuple_element _24, `0`

  %% Argument types:
  %%    _21 => {any()}
  %% Aliased:
  %%    _21
  _22 = get_tuple_element _21, `0`

  %% beam_type_SUITE.erl:1249
  %% Aliased:
  %%    _22
  _7 = call (`id`/1), _22

  %% Aliased:
  %%    _7
  _46 = succeeded:body _7
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _20 => {any()}
  %% Aliased:
  %%    _20
  _23 = get_tuple_element _20, `0`

  %% beam_type_SUITE.erl:1249
  %% Aliased:
  %%    _23
  _6 = call (`id`/1), _23

  %% Aliased:
  %%    _6
  _47 = succeeded:body _6
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _7, 
  %%    _8
  _29 = put_tuple `c`, _8, _7, _6
  %% Result type:
  %%    {'c', any(), any(), any()}
  %% Unique:
  %%    _29
  ret _29

44:
  %% beam_type_SUITE.erl:1244
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  %% Anno: #{inlined => {'-inlined-cte_match/2-',2}}
  _30 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _30
  _68 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_type_SUITE.erl:1251
%% Counter = 30
%% bs_ensure_opt: true
function `beam_type_SUITE`:`cte_generate`(_0) {
0:
  switch _0, ^18, [
    { `0`, ^26 },
    { `1`, ^27 },
    { `2`, ^28 }
  ]

28:
  %% beam_type_SUITE.erl:1256
  _7 = call (`id`/1), `1`

  %% Aliased:
  %%    _7
  _23 = succeeded:body _7
  br _23, ^23, ^1

23:
  %% beam_type_SUITE.erl:1256
  _6 = call (`id`/1), `2`

  %% Aliased:
  %%    _6
  _24 = succeeded:body _6
  br _24, ^24, ^1

24:
  %% beam_type_SUITE.erl:1256
  _5 = call (`id`/1), `3`

  %% Aliased:
  %%    _5
  _25 = succeeded:body _5
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _10 = put_tuple _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _9 = put_tuple _5

  %% Argument types:
  %%    _10 => {any()}
  %%    _9 => {any()}
  %% Unique:
  %%    _9, 
  %%    _10
  _11 = put_tuple _10, _9

  %% Argument types:
  %%    _11 => {{any()}, {any()}}
  %% Aliased:
  %%    _7
  %% Unique:
  %%    _11
  _12 = put_tuple `c`, _7, _11
  %% Result type:
  %%    {'c', any(), {{any()}, {any()}}}
  %% Unique:
  %%    _12
  ret _12

27:
  %% beam_type_SUITE.erl:1254
  _4 = call (`id`/1), `1`

  %% Aliased:
  %%    _4
  _21 = succeeded:body _4
  br _21, ^21, ^1

21:
  %% beam_type_SUITE.erl:1254
  _3 = call (`id`/1), `2`

  %% Aliased:
  %%    _3
  _22 = succeeded:body _3
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _4
  _13 = put_tuple `b`, _4, _3
  %% Result type:
  %%    {'b', any(), any()}
  %% Unique:
  %%    _13
  ret _13

26:
  %% beam_type_SUITE.erl:1252
  _2 = call (`id`/1), `1`

  %% Aliased:
  %%    _2
  _19 = succeeded:body _2
  br _19, ^19, ^1

19:
  %% beam_type_SUITE.erl:1252
  _1 = call (`id`/1), `2`

  %% Aliased:
  %%    _1
  _20 = succeeded:body _1
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _14 = put_tuple `a`, _2, _1
  %% Result type:
  %%    {'a', any(), any()}
  %% Unique:
  %%    _14
  ret _14

18:
  %% beam_type_SUITE.erl:1251
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-cte_generate/1-',1}}
  _15 = match_fail `function_clause`, _0

  %% Unique:
  %%    _15
  _29 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_type_SUITE.erl:1261
%% Counter = 67
%% bs_ensure_opt: true
function `beam_type_SUITE`:`switch_fail_inference`(_0) {
0:
  %% beam_type_SUITE.erl:1262
  _1 = call (`id`/1), `[]`

  %% Aliased:
  %%    _1
  _27 = succeeded:body _1
  br _27, ^27, ^1

27:
  %% beam_type_SUITE.erl:1262
  %% Result type:
  %%    'ok' | {'error', 'gaffel', any()}
  %% Aliased:
  %%    _1
  _13 = call (`sfi`/1), _1

  %% Unique:
  %%    _13
  _28 = succeeded:body _13
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _13 => 'ok' | {'error', 'gaffel', any()}
  %% Unique:
  %%    _13
  _65 = bif:'=:=' _13, `ok`
  br _65, ^64, ^30

64:
  %% beam_type_SUITE.erl:1263
  _3 = call (`id`/1), `[{twiddle,frobnitz},eof]`

  %% Aliased:
  %%    _3
  _31 = succeeded:body _3
  br _31, ^31, ^1

31:
  %% beam_type_SUITE.erl:1263
  %% Result type:
  %%    'ok' | {'error', 'gaffel', any()}
  %% Aliased:
  %%    _3
  _14 = call (`sfi`/1), _3

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _14 => 'ok' | {'error', 'gaffel', any()}
  %% Unique:
  %%    _14
  _62 = bif:'=:=' _14, `ok`
  br _62, ^61, ^34

61:
  %% beam_type_SUITE.erl:1264
  _5 = call (`id`/1), `[{twiddle,frobnitz},{error,gurka}]`

  %% Aliased:
  %%    _5
  _35 = succeeded:body _5
  br _35, ^35, ^1

35:
  %% beam_type_SUITE.erl:1264
  %% Result type:
  %%    'ok' | {'error', 'gaffel', any()}
  %% Aliased:
  %%    _5
  _15 = call (`sfi`/1), _5

  %% Unique:
  %%    _15
  _36 = succeeded:body _15
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _15 => 'ok' | {'error', 'gaffel', any()}
  %% Unique:
  %%    _15
  _59 = bif:'=:=' _15, `{error,gaffel,gurka}`
  br _59, ^59, ^38

59:
  %% beam_type_SUITE.erl:1265
  _7 = call (`id`/1), `[{ok,frobnitz},{error,gurka}]`

  %% Aliased:
  %%    _7
  _39 = succeeded:body _7
  br _39, ^39, ^1

39:
  %% beam_type_SUITE.erl:1265
  %% Result type:
  %%    'ok' | {'error', 'gaffel', any()}
  %% Aliased:
  %%    _7
  _16 = call (`sfi`/1), _7

  %% Unique:
  %%    _16
  _40 = succeeded:body _16
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _16 => 'ok' | {'error', 'gaffel', any()}
  %% Unique:
  %%    _16
  _57 = bif:'=:=' _16, `{error,gaffel,gurka}`
  br _57, ^57, ^42

57:
  %% beam_type_SUITE.erl:1267
  _9 = call (`id`/1), `"GET"`

  %% Aliased:
  %%    _9
  _43 = succeeded:body _9
  br _43, ^43, ^1

43:
  %% beam_type_SUITE.erl:1267
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _9
  _17 = call (`sfi_5`/1), _9

  %% Unique:
  %%    _17
  _44 = succeeded:body _17
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    _17 => 'error' | 'ok'
  %% Unique:
  %%    _17
  _55 = bif:'=:=' _17, `ok`
  br _55, ^54, ^46

54:
  %% beam_type_SUITE.erl:1268
  _11 = call (`id`/1), `"OTHER"`

  %% Aliased:
  %%    _11
  _47 = succeeded:body _11
  br _47, ^47, ^1

47:
  %% beam_type_SUITE.erl:1268
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _11
  _18 = call (`sfi_5`/1), _11

  %% Unique:
  %%    _18
  _48 = succeeded:body _18
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _18 => 'error' | 'ok'
  %% Unique:
  %%    _18
  _52 = bif:'=:=' _18, `error`
  br _52, ^51, ^50

51:
  %% Result type:
  %%    'ok'
  ret `ok`

50:
  %% beam_type_SUITE.erl:1268
  _19 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _19
  _53 = succeeded:body _19
  br ^1

46:
  %% beam_type_SUITE.erl:1267
  _20 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _20
  _56 = succeeded:body _20
  br ^1

42:
  %% beam_type_SUITE.erl:1265
  %% Unique:
  %%    _16
  _21 = match_fail `badmatch`, _16

  %% Unique:
  %%    _21
  _58 = succeeded:body _21
  br ^1

38:
  %% beam_type_SUITE.erl:1264
  %% Unique:
  %%    _15
  _22 = match_fail `badmatch`, _15

  %% Unique:
  %%    _22
  _60 = succeeded:body _22
  br ^1

34:
  %% beam_type_SUITE.erl:1263
  %% Unique:
  %%    _14
  _23 = match_fail `badmatch`, _14

  %% Unique:
  %%    _23
  _63 = succeeded:body _23
  br ^1

30:
  %% beam_type_SUITE.erl:1262
  %% Unique:
  %%    _13
  _24 = match_fail `badmatch`, _13

  %% Unique:
  %%    _24
  _66 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% beam_type_SUITE.erl:1272
%% Counter = 28
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi`(_0) {
0:
  %% beam_type_SUITE.erl:1273
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Aliased:
  %%    _0
  _4 = call (`sfi_1`/1), _0

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^22, ^1

22:
  %% Argument types:
  %%    _4 => {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Unique:
  %%    _4
  _6 = get_tuple_element _4, `0`

  %% Unique:
  %%    _6
  _27 = bif:'=:=' _6, `ok`
  br _27, ^20, ^16

20:
  %% Result type:
  %%    'ok'
  ret `ok`

16:
  %% Argument types:
  %%    _4 => {'error', {'gaffel', any()}}
  %% Unique:
  %%    _4
  _5 = get_tuple_element _4, `1`

  %% Argument types:
  %%    _5 => {'gaffel', any()}
  %% Aliased:
  %%    _5
  _7 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _9 = put_tuple `error`, `gaffel`, _7
  %% Result type:
  %%    {'error', 'gaffel', any()}
  %% Unique:
  %%    _9
  ret _9

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:1278
%% Counter = 17
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi_1`(_0) {
0:
  %% beam_type_SUITE.erl:1279
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Aliased:
  %%    _0
  _2 = call (`sfi_2`/1), _0

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^11, ^1

11:
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Unique:
  %%    _2
  ret _2

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1284
%% Counter = 32
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi_2`(_0) {
0:
  %% Aliased:
  %%    _0
  _27 = is_nonempty_list _0
  br _27, ^27, ^15

27:
  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _5 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _0
  _4 = get_tl _0

  %% beam_type_SUITE.erl:1285
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'eof' | 'twiddle'}
  %% Aliased:
  %%    _5
  _6 = call (`sfi_3`/1), _5

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^22, ^1

22:
  %% Argument types:
  %%    _6 => {'error', {'gaffel', any()}} | {'ok', 'eof' | 'twiddle'}
  %% Unique:
  %%    _6
  _8 = get_tuple_element _6, `0`

  %% Unique:
  %%    _8
  _31 = bif:'=:=' _8, `ok`
  br _31, ^21, ^20

21:
  %% beam_type_SUITE.erl:1286
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Aliased:
  %%    _4
  _9 = call (`sfi_2`/1), _4

  %% Unique:
  %%    _9
  _19 = succeeded:body _9
  br _19, ^19, ^1

19:
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'done'}
  %% Unique:
  %%    _9
  ret _9

20:
  %% Result type:
  %%    {'error', {'gaffel', any()}}
  %% Unique:
  %%    _6
  ret _6

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _28 = bif:'=:=' _0, `[]`
  br _28, ^28, ^14

28:
  %% Result type:
  %%    {'ok', 'done'}
  ret `{ok,done}`

14:
  %% beam_type_SUITE.erl:1284
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-sfi_2/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _29 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_type_SUITE.erl:1292
%% Counter = 33
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi_3`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _18 = is_tagged_tuple _0, `2`, `twiddle`
  br _18, ^15, ^14

15:
  %% Result type:
  %%    {'ok', 'twiddle'}
  ret `{ok,twiddle}`

14:
  %% beam_type_SUITE.erl:1295
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'eof'} | {'twiddle', any()}
  %% Aliased:
  %%    _0
  _5 = call (`sfi_4`/1), _0

  %% Unique:
  %%    _5
  _21 = succeeded:body _5
  br _21, ^27, ^1

27:
  %% Argument types:
  %%    _5 => {'error', {'gaffel', any()}} | {'ok', 'eof'} | {'twiddle', any()}
  %% Unique:
  %%    _5
  _7 = get_tuple_element _5, `0`

  %% Unique:
  %%    _7
  _32 = bif:'=:=' _7, `twiddle`
  br _32, ^26, ^25

26:
  %% beam_type_SUITE.erl:1296
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'eof' | 'twiddle'}
  %% Unique:
  %%    _5
  _10 = call (`sfi_3`/1), _5

  %% Unique:
  %%    _10
  _24 = succeeded:body _10
  br _24, ^24, ^1

24:
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'eof' | 'twiddle'}
  %% Unique:
  %%    _10
  ret _10

25:
  %% Result type:
  %%    {'error', {'gaffel', any()}} | {'ok', 'eof'}
  %% Unique:
  %%    _5
  ret _5

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_type_SUITE.erl:1301
%% Counter = 21
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi_4`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_tuple _0
  br _15, ^15, ^11

15:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _16 = bif:tuple_size _0

  %% Argument types:
  %%    _16 => 0..16777215
  %% Unique:
  %%    _16
  _17 = bif:'=:=' _16, `2`
  br _17, ^14, ^10

14:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _2 = get_tuple_element _0, `1`
  switch _3, ^10, [
    { `error`, ^12 },
    { `ok`, ^13 }
  ]

13:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _6 = put_tuple `twiddle`, _2
  %% Result type:
  %%    {'twiddle', any()}
  %% Unique:
  %%    _6
  ret _6

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _4 = put_tuple `gaffel`, _2

  %% Argument types:
  %%    _4 => {'gaffel', any()}
  %% Unique:
  %%    _4
  _5 = put_tuple `error`, _4
  %% Result type:
  %%    {'error', {'gaffel', any()}}
  %% Unique:
  %%    _5
  ret _5

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _19 = bif:'=:=' _0, `eof`
  br _19, ^18, ^10

18:
  %% Result type:
  %%    {'ok', 'eof'}
  ret `{ok,eof}`

10:
  %% beam_type_SUITE.erl:1301
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-sfi_4/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_type_SUITE.erl:1308
%% Counter = 14
%% bs_ensure_opt: true
function `beam_type_SUITE`:`sfi_5`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:'=:=' _0, `"GET"`
  br _11, ^11, ^10

11:
  br ^9

10:
  br ^9

9:
  _2 = phi { `{412}`, ^10 }, { `{304}`, ^11 }

  %% beam_type_SUITE.erl:1315
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _2
  _6 = call (`sfi_send_return_value`/1), _2

  %% Unique:
  %%    _6
  _12 = succeeded:body _6
  br _12, ^12, ^1

12:
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _6
  ret _6

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:1317
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {304} | {412}
function `beam_type_SUITE`:`sfi_send_return_value`(_0) {
0:
  %% Argument types:
  %%    _0 => {304} | {412}
  %% Unique:
  %%    _0
  _2 = get_tuple_element _0, `0`

  %% Unique:
  %%    _2
  _14 = bif:'=:=' _2, `412`
  br _14, ^7, ^8

7:
  %% Result type:
  %%    'error'
  ret `error`

8:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1322
%% Counter = 166
%% bs_ensure_opt: true
function `beam_type_SUITE`:`failures`(_0) {
0:
  br ^163

163:
  _40 = new_try_tag `'catch'`
  br _40, ^38, ^39

38:
  %% beam_type_SUITE.erl:1323
  _3 = call (`id`/1), `a`

  %% Aliased:
  %%    _3
  _42 = succeeded:body _3
  br _42, ^42, ^39

42:
  %% beam_type_SUITE.erl:1323
  _2 = call (`id`/1), `b`

  %% Aliased:
  %%    _2
  _43 = succeeded:body _2
  br _43, ^43, ^39

43:
  %% beam_type_SUITE.erl:1323
  _1 = call (`id`/1), `c`

  %% Aliased:
  %%    _1
  _44 = succeeded:body _1
  br _44, ^44, ^39

44:
  %% beam_type_SUITE.erl:1323
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _3
  _27 = call (`failures_1`/3), _3, _2, _1

  %% Aliased:
  %%    _27
  _45 = succeeded:body _27
  br ^39

39:
  %% Unique:
  %%    _40
  _48 = landingpad `'catch'`, _40

  %% Aliased:
  %%    _48
  _46 = extract _48, `0`
  br ^37

37:
  %% Aliased:
  %%    _46
  %% Unique:
  %%    _40
  _4 = catch_end _40, _46

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _111 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _111, ^108, ^51

108:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _14 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _105 = is_tagged_tuple _14, `2`, `function_clause`
  br _105, ^161, ^51

161:
  br ^164

164:
  _55 = new_try_tag `'catch'`
  br _55, ^53, ^54

53:
  %% beam_type_SUITE.erl:1324
  %% Result type:
  %%    none()
  _29 = call (`failures_1`/3), `[]`, `2`, `3`

  %% Aliased:
  %%    _29
  _57 = succeeded:body _29
  br ^54

54:
  %% Unique:
  %%    _55
  _60 = landingpad `'catch'`, _55

  %% Aliased:
  %%    _60
  _58 = extract _60, `0`
  br ^52

52:
  %% Aliased:
  %%    _58
  %% Unique:
  %%    _55
  _6 = catch_end _55, _58

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _98 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _98, ^95, ^63

95:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _18 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _92 = is_tagged_tuple _18, `2`, `badarith`
  br _92, ^162, ^63

162:
  br ^165

165:
  _67 = new_try_tag `'catch'`
  br _67, ^65, ^66

65:
  %% beam_type_SUITE.erl:1325
  %% Result type:
  %%    none()
  _31 = call (`failures_1`/3), `[]`, `x`, `y`

  %% Aliased:
  %%    _31
  _69 = succeeded:body _31
  br ^66

66:
  %% Unique:
  %%    _67
  _72 = landingpad `'catch'`, _67

  %% Aliased:
  %%    _72
  _70 = extract _72, `0`
  br ^64

64:
  %% Aliased:
  %%    _70
  %% Unique:
  %%    _67
  _8 = catch_end _67, _70

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _85 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _85, ^82, ^75

82:
  %% Argument types:
  %%    _8 => {''EXIT'', any()}
  %% Aliased:
  %%    _8
  _22 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _79 = is_tagged_tuple _22, `2`, `badarith`
  br _79, ^76, ^75

76:
  %% Result type:
  %%    'ok'
  ret `ok`

75:
  %% beam_type_SUITE.erl:1325
  %% Aliased:
  %%    _8
  _32 = match_fail `badmatch`, _8

  %% Unique:
  %%    _32
  _88 = succeeded:body _32
  br ^1

63:
  %% beam_type_SUITE.erl:1324
  %% Aliased:
  %%    _6
  _33 = match_fail `badmatch`, _6

  %% Unique:
  %%    _33
  _101 = succeeded:body _33
  br ^1

51:
  %% beam_type_SUITE.erl:1323
  %% Aliased:
  %%    _4
  _34 = match_fail `badmatch`, _4

  %% Unique:
  %%    _34
  _114 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% beam_type_SUITE.erl:1328
%% Counter = 24
%% bs_ensure_opt: true
function `beam_type_SUITE`:`failures_1`(_0, _1, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:'=:=' _0, `[]`
  br _22, ^22, ^15

22:
  %% beam_type_SUITE.erl:1335
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _5 = bif:'-' `[]`, _2

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

15:
  %% beam_type_SUITE.erl:1328
  %% Aliased:
  %%    _0, 
  %%    _1, 
  %%    _2
  %% Anno: #{inlined => {'-inlined-failures_1/3-',3}}
  _12 = match_fail `function_clause`, _0, _1, _2

  %% Unique:
  %%    _12
  _23 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_type_SUITE.erl:1338
%% Counter = 1347
%% bs_ensure_opt: true
function `beam_type_SUITE`:`cover_maps_functions`(_0) {
0:
  %% Result type:
  %%    'true'
  _5 = make_fun (`'-cover_maps_functions/1-fun-0-'`/2)
  _316 = new_try_tag `'catch'`
  br _316, ^887, ^315

887:
  %% beam_type_SUITE.erl:1339
  %% Aliased:
  %%    _5
  _217 = call (`maps`:`filter`/2), _5, `not_a_map`

  %% Aliased:
  %%    _217
  _318 = succeeded:body _217
  br ^315

315:
  %% Unique:
  %%    _316
  _321 = landingpad `'catch'`, _316

  %% Aliased:
  %%    _321
  _319 = extract _321, `0`
  br ^313

313:
  %% Aliased:
  %%    _319
  %% Unique:
  %%    _316
  _6 = catch_end _316, _319

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _883 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _883, ^1301, ^324

1301:
  br ^1327

1327:
  _328 = new_try_tag `'catch'`
  br _328, ^326, ^327

326:
  %% beam_type_SUITE.erl:1340
  _219 = call (`maps`:`filter`/2), `not_a_predicate`, `#{}`

  %% Aliased:
  %%    _219
  _330 = succeeded:body _219
  br _330, ^330, ^327

330:
  br ^325

327:
  %% Unique:
  %%    _328
  _333 = landingpad `'catch'`, _328

  %% Aliased:
  %%    _333
  _331 = extract _333, `0`
  br ^325

325:
  _334 = phi { _331, ^327 }, { `#{}`, ^330 }

  %% Aliased:
  %%    _334
  %% Unique:
  %%    _328
  _8 = catch_end _328, _334

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _876 = is_tagged_tuple _8, `2`, `'EXIT'`
  br _876, ^873, ^336

873:
  %% beam_type_SUITE.erl:1342
  _154 = call (`maps`:`find`/2), `key_not_present`, `#{}`

  %% Aliased:
  %%    _154
  _337 = succeeded:body _154
  br _337, ^870, ^1

870:
  %% Result type:
  %%    'true'
  _17 = make_fun (`'-cover_maps_functions/1-fun-1-'`/3)
  _343 = new_try_tag `'catch'`
  br _343, ^888, ^342

888:
  %% beam_type_SUITE.erl:1344
  %% Aliased:
  %%    _17
  _221 = call (`maps`:`fold`/3), _17, `init`, `not_a_map`

  %% Aliased:
  %%    _221
  _345 = succeeded:body _221
  br ^342

342:
  %% Unique:
  %%    _343
  _348 = landingpad `'catch'`, _343

  %% Aliased:
  %%    _348
  _346 = extract _348, `0`
  br ^340

340:
  %% Aliased:
  %%    _346
  %% Unique:
  %%    _343
  _18 = catch_end _343, _346

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _866 = is_tagged_tuple _18, `2`, `'EXIT'`
  br _866, ^1303, ^351

1303:
  br ^1328

1328:
  _355 = new_try_tag `'catch'`
  br _355, ^353, ^354

353:
  %% beam_type_SUITE.erl:1345
  _223 = call (`maps`:`fold`/3), `not_a_fun`, `init`, `#{}`

  %% Aliased:
  %%    _223
  _357 = succeeded:body _223
  br _357, ^357, ^354

357:
  br ^352

354:
  %% Unique:
  %%    _355
  _360 = landingpad `'catch'`, _355

  %% Aliased:
  %%    _360
  _358 = extract _360, `0`
  br ^352

352:
  _361 = phi { _358, ^354 }, { `init`, ^357 }

  %% Aliased:
  %%    _361
  %% Unique:
  %%    _355
  _20 = catch_end _355, _361

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _859 = is_tagged_tuple _20, `2`, `'EXIT'`
  br _859, ^856, ^363

856:
  %% beam_type_SUITE.erl:1347
  _159 = call (`maps`:`from_keys`/2), `[]`, `gurka`

  %% Aliased:
  %%    _159
  _364 = succeeded:body _159
  br _364, ^854, ^1

854:
  %% beam_type_SUITE.erl:1348
  _160 = call (`maps`:`from_keys`/2), `[hello]`, `gurka`

  %% Aliased:
  %%    _160
  _367 = succeeded:body _160
  br _367, ^852, ^1

852:
  %% Argument types:
  %%    _160 => #{'hello'=>'gurka'}
  %% Aliased:
  %%    _160
  _370 = has_map_field _160, `hello`
  br _370, ^1304, ^369

1304:
  br ^1329

1329:
  _374 = new_try_tag `'catch'`
  br _374, ^372, ^373

372:
  %% beam_type_SUITE.erl:1349
  _225 = call (`maps`:`from_keys`/2), `not_a_list`, `gurka`

  %% Aliased:
  %%    _225
  _376 = succeeded:body _225
  br ^373

373:
  %% Unique:
  %%    _374
  _379 = landingpad `'catch'`, _374

  %% Aliased:
  %%    _379
  _377 = extract _379, `0`
  br ^371

371:
  %% Aliased:
  %%    _377
  %% Unique:
  %%    _374
  _24 = catch_end _374, _377

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _846 = is_tagged_tuple _24, `2`, `'EXIT'`
  br _846, ^1305, ^382

1305:
  br ^1330

1330:
  _386 = new_try_tag `'catch'`
  br _386, ^384, ^385

384:
  %% beam_type_SUITE.erl:1351
  _227 = call (`maps`:`from_list`/1), `[]`

  %% Aliased:
  %%    _227
  _388 = succeeded:body _227
  br _388, ^388, ^385

388:
  br ^383

385:
  %% Unique:
  %%    _386
  _391 = landingpad `'catch'`, _386

  %% Aliased:
  %%    _391
  _389 = extract _391, `0`
  br ^383

383:
  _392 = phi { _389, ^385 }, { `#{}`, ^388 }

  %% Aliased:
  %%    _392
  %% Unique:
  %%    _386
  _26 = catch_end _386, _392

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _841 = bif:is_map _26
  br _841, ^1306, ^394

1306:
  br ^1331

1331:
  _398 = new_try_tag `'catch'`
  br _398, ^396, ^397

396:
  %% beam_type_SUITE.erl:1352
  _229 = call (`maps`:`from_list`/1), `[not_a_tuple]`

  %% Aliased:
  %%    _229
  _400 = succeeded:body _229
  br ^397

397:
  %% Unique:
  %%    _398
  _403 = landingpad `'catch'`, _398

  %% Aliased:
  %%    _403
  _401 = extract _403, `0`
  br ^395

395:
  %% Aliased:
  %%    _401
  %% Unique:
  %%    _398
  _28 = catch_end _398, _401

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _837 = is_tagged_tuple _28, `2`, `'EXIT'`
  br _837, ^1307, ^406

1307:
  br ^1332

1332:
  _418 = new_try_tag `'catch'`
  br _418, ^416, ^417

416:
  %% beam_type_SUITE.erl:1355
  %% Argument types:
  %%    
  _232 = bif:map_get `key_not_present`, `#{}`

  %% Aliased:
  %%    _232
  _420 = succeeded:body _232
  br ^417

417:
  %% Unique:
  %%    _418
  _423 = landingpad `'catch'`, _418

  %% Aliased:
  %%    _423
  _421 = extract _423, `0`
  br ^415

415:
  %% Aliased:
  %%    _421
  %% Unique:
  %%    _418
  _31 = catch_end _418, _421

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _827 = is_tagged_tuple _31, `2`, `'EXIT'`
  br _827, ^824, ^426

824:
  %% beam_type_SUITE.erl:1357
  _171 = call (`maps`:`keys`/1), `#{}`

  %% Aliased:
  %%    _171
  _427 = succeeded:body _171
  br _427, ^1308, ^1

1308:
  br ^1333

1333:
  _433 = new_try_tag `'catch'`
  br _433, ^431, ^432

431:
  %% beam_type_SUITE.erl:1358
  _234 = call (`maps`:`keys`/1), `not_a_map`

  %% Aliased:
  %%    _234
  _435 = succeeded:body _234
  br ^432

432:
  %% Unique:
  %%    _433
  _438 = landingpad `'catch'`, _433

  %% Aliased:
  %%    _438
  _436 = extract _438, `0`
  br ^430

430:
  %% Aliased:
  %%    _436
  %% Unique:
  %%    _433
  _34 = catch_end _433, _436

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _818 = is_tagged_tuple _34, `2`, `'EXIT'`
  br _818, ^815, ^441

815:
  %% Result type:
  %%    'ok'
  _40 = make_fun (`'-cover_maps_functions/1-fun-2-'`/2)
  _445 = new_try_tag `'catch'`
  br _445, ^889, ^444

889:
  %% beam_type_SUITE.erl:1360
  %% Aliased:
  %%    _40
  _236 = call (`maps`:`map`/2), _40, `#{a => a}`

  %% Aliased:
  %%    _236
  _447 = succeeded:body _236
  br _447, ^447, ^444

447:
  br ^442

444:
  %% Unique:
  %%    _445
  _450 = landingpad `'catch'`, _445

  %% Aliased:
  %%    _450
  _448 = extract _450, `0`
  br ^442

442:
  _451 = phi { _448, ^444 }, { _236, ^447 }

  %% Aliased:
  %%    _451
  %% Unique:
  %%    _445
  _41 = catch_end _445, _451

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _813 = bif:is_map _41
  br _813, ^813, ^453

813:
  %% Argument types:
  %%    _41 => map()
  %% Aliased:
  %%    _41
  _174 = get_map_element _41, `a`

  %% Aliased:
  %%    _174
  _454 = succeeded:guard _174
  br _454, ^454, ^453

454:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _174
  _812 = bif:'=:=' _174, `ok`
  br _812, ^811, ^453

811:
  %% Result type:
  %%    none()
  _47 = make_fun (`'-cover_maps_functions/1-fun-3-'`/2)
  _458 = new_try_tag `'catch'`
  br _458, ^890, ^457

890:
  %% beam_type_SUITE.erl:1361
  %% Aliased:
  %%    _47
  _239 = call (`maps`:`map`/2), _47, `#{a => a}`

  %% Aliased:
  %%    _239
  _460 = succeeded:body _239
  br _460, ^460, ^457

460:
  br ^455

457:
  %% Unique:
  %%    _458
  _463 = landingpad `'catch'`, _458

  %% Aliased:
  %%    _463
  _461 = extract _463, `0`
  br ^455

455:
  _464 = phi { _461, ^457 }, { _239, ^460 }

  %% Aliased:
  %%    _464
  %% Unique:
  %%    _458
  _48 = catch_end _458, _464

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _807 = is_tagged_tuple _48, `2`, `'EXIT'`
  br _807, ^1311, ^466

1311:
  br ^1334

1334:
  _470 = new_try_tag `'catch'`
  br _470, ^468, ^469

468:
  %% beam_type_SUITE.erl:1362
  _241 = call (`maps`:`map`/2), `not_a_fun`, `#{}`

  %% Aliased:
  %%    _241
  _472 = succeeded:body _241
  br _472, ^472, ^469

472:
  br ^467

469:
  %% Unique:
  %%    _470
  _475 = landingpad `'catch'`, _470

  %% Aliased:
  %%    _475
  _473 = extract _475, `0`
  br ^467

467:
  _476 = phi { _473, ^469 }, { `#{}`, ^472 }

  %% Aliased:
  %%    _476
  %% Unique:
  %%    _470
  _50 = catch_end _470, _476

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _800 = is_tagged_tuple _50, `2`, `'EXIT'`
  br _800, ^797, ^478

797:
  %% Result type:
  %%    'ok'
  _56 = make_fun (`'-cover_maps_functions/1-fun-4-'`/2)
  _482 = new_try_tag `'catch'`
  br _482, ^891, ^481

891:
  %% beam_type_SUITE.erl:1363
  %% Aliased:
  %%    _56
  _243 = call (`maps`:`map`/2), _56, `not_a_map`

  %% Aliased:
  %%    _243
  _484 = succeeded:body _243
  br ^481

481:
  %% Unique:
  %%    _482
  _487 = landingpad `'catch'`, _482

  %% Aliased:
  %%    _487
  _485 = extract _487, `0`
  br ^479

479:
  %% Aliased:
  %%    _485
  %% Unique:
  %%    _482
  _57 = catch_end _482, _485

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57
  _793 = is_tagged_tuple _57, `2`, `'EXIT'`
  br _793, ^1313, ^490

1313:
  br ^1335

1335:
  _494 = new_try_tag `'catch'`
  br _494, ^492, ^493

492:
  %% beam_type_SUITE.erl:1365
  _245 = call (`maps`:`merge`/2), `not_a_map`, `#{}`

  %% Aliased:
  %%    _245
  _496 = succeeded:body _245
  br ^493

493:
  %% Unique:
  %%    _494
  _499 = landingpad `'catch'`, _494

  %% Aliased:
  %%    _499
  _497 = extract _499, `0`
  br ^491

491:
  %% Aliased:
  %%    _497
  %% Unique:
  %%    _494
  _59 = catch_end _494, _497

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _786 = is_tagged_tuple _59, `2`, `'EXIT'`
  br _786, ^1314, ^502

1314:
  br ^1336

1336:
  _508 = new_try_tag `'catch'`
  br _508, ^506, ^507

506:
  %% beam_type_SUITE.erl:1369
  _247 = call (`maps`:`put`/3), `key`, `value`, `not_a_map`

  %% Aliased:
  %%    _247
  _510 = succeeded:body _247
  br ^507

507:
  %% Unique:
  %%    _508
  _513 = landingpad `'catch'`, _508

  %% Aliased:
  %%    _513
  _511 = extract _513, `0`
  br ^505

505:
  %% Aliased:
  %%    _511
  %% Unique:
  %%    _508
  _62 = catch_end _508, _511

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _777 = is_tagged_tuple _62, `2`, `'EXIT'`
  br _777, ^774, ^516

774:
  %% beam_type_SUITE.erl:1371
  _186 = call (`maps`:`remove`/2), `a`, `#{a => a}`

  %% Aliased:
  %%    _186
  _517 = succeeded:body _186
  br _517, ^1315, ^1

1315:
  br ^1337

1337:
  _523 = new_try_tag `'catch'`
  br _523, ^521, ^522

521:
  %% beam_type_SUITE.erl:1372
  _249 = call (`maps`:`remove`/2), `gurka`, `not_a_map`

  %% Aliased:
  %%    _249
  _525 = succeeded:body _249
  br ^522

522:
  %% Unique:
  %%    _523
  _528 = landingpad `'catch'`, _523

  %% Aliased:
  %%    _528
  _526 = extract _528, `0`
  br ^520

520:
  %% Aliased:
  %%    _526
  %% Unique:
  %%    _523
  _65 = catch_end _523, _526

  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _768 = is_tagged_tuple _65, `2`, `'EXIT'`
  br _768, ^765, ^531

765:
  %% beam_type_SUITE.erl:1374
  _189 = call (`maps`:`take`/2), `key_not_present`, `#{}`

  %% Aliased:
  %%    _189
  _532 = succeeded:body _189
  br _532, ^1316, ^1

1316:
  br ^1338

1338:
  _538 = new_try_tag `'catch'`
  br _538, ^536, ^537

536:
  %% beam_type_SUITE.erl:1375
  _251 = call (`maps`:`take`/2), `key`, `not_a_map`

  %% Aliased:
  %%    _251
  _540 = succeeded:body _251
  br ^537

537:
  %% Unique:
  %%    _538
  _543 = landingpad `'catch'`, _538

  %% Aliased:
  %%    _543
  _541 = extract _543, `0`
  br ^535

535:
  %% Aliased:
  %%    _541
  %% Unique:
  %%    _538
  _68 = catch_end _538, _541

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _758 = is_tagged_tuple _68, `2`, `'EXIT'`
  br _758, ^1317, ^546

1317:
  br ^1339

1339:
  _550 = new_try_tag `'catch'`
  br _550, ^548, ^549

548:
  %% beam_type_SUITE.erl:1377
  _253 = call (`maps`:`to_list`/1), `not_a_map`

  %% Aliased:
  %%    _253
  _552 = succeeded:body _253
  br ^549

549:
  %% Unique:
  %%    _550
  _555 = landingpad `'catch'`, _550

  %% Aliased:
  %%    _555
  _553 = extract _555, `0`
  br ^547

547:
  %% Aliased:
  %%    _553
  %% Unique:
  %%    _550
  _70 = catch_end _550, _553

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _751 = is_tagged_tuple _70, `2`, `'EXIT'`
  br _751, ^748, ^558

748:
  %% Result type:
  %%    'ok'
  _74 = make_fun (`'-cover_maps_functions/1-fun-5-'`/1)

  %% beam_type_SUITE.erl:1379
  %% Aliased:
  %%    _74
  _194 = call (`maps`:`update_with`/3), `a`, _74, `#{a => a}`

  %% Aliased:
  %%    _194
  _559 = succeeded:body _194
  br _559, ^746, ^1

746:
  %% Argument types:
  %%    _194 => #{'a'=>'a' | 'ok'}
  %% Aliased:
  %%    _194
  _195 = get_map_element _194, `a`

  %% Aliased:
  %%    _195
  _562 = succeeded:guard _195
  br _562, ^562, ^561

562:
  %% Argument types:
  %%    _195 => 'a' | 'ok'
  %% Unique:
  %%    _195
  _745 = bif:'=:=' _195, `ok`
  br _745, ^744, ^561

744:
  %% Result type:
  %%    none()
  _78 = make_fun (`'-cover_maps_functions/1-fun-6-'`/1)
  _566 = new_try_tag `'catch'`
  br _566, ^893, ^565

893:
  %% beam_type_SUITE.erl:1380
  %% Aliased:
  %%    _78
  _256 = call (`maps`:`update_with`/3), `a`, _78, `#{a => a}`

  %% Aliased:
  %%    _256
  _568 = succeeded:body _256
  br ^565

565:
  %% Unique:
  %%    _566
  _571 = landingpad `'catch'`, _566

  %% Aliased:
  %%    _571
  _569 = extract _571, `0`
  br ^563

563:
  %% Aliased:
  %%    _569
  %% Unique:
  %%    _566
  _79 = catch_end _566, _569

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _740 = is_tagged_tuple _79, `2`, `'EXIT'`
  br _740, ^737, ^574

737:
  %% Result type:
  %%    'ok'
  _83 = make_fun (`'-cover_maps_functions/1-fun-7-'`/1)
  _578 = new_try_tag `'catch'`
  br _578, ^894, ^577

894:
  %% beam_type_SUITE.erl:1381
  %% Aliased:
  %%    _83
  _258 = call (`maps`:`update_with`/3), `key_not_present`, _83, `#{}`

  %% Aliased:
  %%    _258
  _580 = succeeded:body _258
  br _580, ^580, ^577

580:
  br ^575

577:
  %% Unique:
  %%    _578
  _583 = landingpad `'catch'`, _578

  %% Aliased:
  %%    _583
  _581 = extract _583, `0`
  br ^575

575:
  _584 = phi { _581, ^577 }, { _258, ^580 }

  %% Aliased:
  %%    _584
  %% Unique:
  %%    _578
  _84 = catch_end _578, _584

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _733 = is_tagged_tuple _84, `2`, `'EXIT'`
  br _733, ^1320, ^586

1320:
  br ^1340

1340:
  _590 = new_try_tag `'catch'`
  br _590, ^588, ^589

588:
  %% beam_type_SUITE.erl:1382
  _260 = call (`maps`:`update_with`/3), `key`, `not_a_fun`, `not_a_map`

  %% Aliased:
  %%    _260
  _592 = succeeded:body _260
  br ^589

589:
  %% Unique:
  %%    _590
  _595 = landingpad `'catch'`, _590

  %% Aliased:
  %%    _595
  _593 = extract _595, `0`
  br ^587

587:
  %% Aliased:
  %%    _593
  %% Unique:
  %%    _590
  _86 = catch_end _590, _593

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _726 = is_tagged_tuple _86, `2`, `'EXIT'`
  br _726, ^723, ^598

723:
  %% beam_type_SUITE.erl:1384
  _202 = call (`maps`:`values`/1), `#{}`

  %% Aliased:
  %%    _202
  _599 = succeeded:body _202
  br _599, ^1321, ^1

1321:
  br ^1341

1341:
  _605 = new_try_tag `'catch'`
  br _605, ^603, ^604

603:
  %% beam_type_SUITE.erl:1385
  _262 = call (`maps`:`values`/1), `not_a_map`

  %% Aliased:
  %%    _262
  _607 = succeeded:body _262
  br ^604

604:
  %% Unique:
  %%    _605
  _610 = landingpad `'catch'`, _605

  %% Aliased:
  %%    _610
  _608 = extract _610, `0`
  br ^602

602:
  %% Aliased:
  %%    _608
  %% Unique:
  %%    _605
  _89 = catch_end _605, _608

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _717 = is_tagged_tuple _89, `2`, `'EXIT'`
  br _717, ^714, ^613

714:
  %% beam_type_SUITE.erl:1387
  _205 = call (`maps`:`with`/2), `[key_not_present]`, `#{}`

  %% Aliased:
  %%    _205
  _614 = succeeded:body _205
  br _614, ^1322, ^1

1322:
  br ^1342

1342:
  _620 = new_try_tag `'catch'`
  br _620, ^618, ^619

618:
  %% beam_type_SUITE.erl:1388
  _264 = call (`maps`:`with`/2), `not_a_list`, `#{}`

  %% Aliased:
  %%    _264
  _622 = succeeded:body _264
  br ^619

619:
  %% Unique:
  %%    _620
  _625 = landingpad `'catch'`, _620

  %% Aliased:
  %%    _625
  _623 = extract _625, `0`
  br ^617

617:
  %% Aliased:
  %%    _623
  %% Unique:
  %%    _620
  _92 = catch_end _620, _623

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _708 = is_tagged_tuple _92, `2`, `'EXIT'`
  br _708, ^1323, ^628

1323:
  br ^1343

1343:
  _632 = new_try_tag `'catch'`
  br _632, ^630, ^631

630:
  %% beam_type_SUITE.erl:1389
  _266 = call (`maps`:`with`/2), `[]`, `not_a_map`

  %% Aliased:
  %%    _266
  _634 = succeeded:body _266
  br ^631

631:
  %% Unique:
  %%    _632
  _637 = landingpad `'catch'`, _632

  %% Aliased:
  %%    _637
  _635 = extract _637, `0`
  br ^629

629:
  %% Aliased:
  %%    _635
  %% Unique:
  %%    _632
  _94 = catch_end _632, _635

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _701 = is_tagged_tuple _94, `2`, `'EXIT'`
  br _701, ^1324, ^640

1324:
  br ^1344

1344:
  _644 = new_try_tag `'catch'`
  br _644, ^642, ^643

642:
  %% beam_type_SUITE.erl:1390
  _268 = call (`maps`:`with`/2), `[foobar]`, `not_a_map`

  %% Aliased:
  %%    _268
  _646 = succeeded:body _268
  br ^643

643:
  %% Unique:
  %%    _644
  _649 = landingpad `'catch'`, _644

  %% Aliased:
  %%    _649
  _647 = extract _649, `0`
  br ^641

641:
  %% Aliased:
  %%    _647
  %% Unique:
  %%    _644
  _96 = catch_end _644, _647

  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _694 = is_tagged_tuple _96, `2`, `'EXIT'`
  br _694, ^1325, ^652

1325:
  br ^1345

1345:
  _656 = new_try_tag `'catch'`
  br _656, ^654, ^655

654:
  %% beam_type_SUITE.erl:1392
  _270 = call (`maps`:`without`/2), `not_a_list`, `#{}`

  %% Aliased:
  %%    _270
  _658 = succeeded:body _270
  br ^655

655:
  %% Unique:
  %%    _656
  _661 = landingpad `'catch'`, _656

  %% Aliased:
  %%    _661
  _659 = extract _661, `0`
  br ^653

653:
  %% Aliased:
  %%    _659
  %% Unique:
  %%    _656
  _98 = catch_end _656, _659

  %% Argument types:
  %%    
  %% Aliased:
  %%    _98
  _687 = is_tagged_tuple _98, `2`, `'EXIT'`
  br _687, ^1326, ^664

1326:
  br ^1346

1346:
  _668 = new_try_tag `'catch'`
  br _668, ^666, ^667

666:
  %% beam_type_SUITE.erl:1393
  _272 = call (`maps`:`without`/2), `[]`, `not_a_map`

  %% Aliased:
  %%    _272
  _670 = succeeded:body _272
  br ^667

667:
  %% Unique:
  %%    _668
  _673 = landingpad `'catch'`, _668

  %% Aliased:
  %%    _673
  _671 = extract _673, `0`
  br ^665

665:
  %% Aliased:
  %%    _671
  %% Unique:
  %%    _668
  _100 = catch_end _668, _671

  %% Argument types:
  %%    
  %% Aliased:
  %%    _100
  _680 = is_tagged_tuple _100, `2`, `'EXIT'`
  br _680, ^677, ^676

677:
  %% Result type:
  %%    'ok'
  ret `ok`

676:
  %% beam_type_SUITE.erl:1393
  %% Aliased:
  %%    _100
  _273 = match_fail `badmatch`, _100

  %% Unique:
  %%    _273
  _683 = succeeded:body _273
  br ^1

664:
  %% beam_type_SUITE.erl:1392
  %% Aliased:
  %%    _98
  _274 = match_fail `badmatch`, _98

  %% Unique:
  %%    _274
  _690 = succeeded:body _274
  br ^1

652:
  %% beam_type_SUITE.erl:1390
  %% Aliased:
  %%    _96
  _275 = match_fail `badmatch`, _96

  %% Unique:
  %%    _275
  _697 = succeeded:body _275
  br ^1

640:
  %% beam_type_SUITE.erl:1389
  %% Aliased:
  %%    _94
  _276 = match_fail `badmatch`, _94

  %% Unique:
  %%    _276
  _704 = succeeded:body _276
  br ^1

628:
  %% beam_type_SUITE.erl:1388
  %% Aliased:
  %%    _92
  _277 = match_fail `badmatch`, _92

  %% Unique:
  %%    _277
  _711 = succeeded:body _277
  br ^1

613:
  %% beam_type_SUITE.erl:1385
  %% Aliased:
  %%    _89
  _279 = match_fail `badmatch`, _89

  %% Unique:
  %%    _279
  _720 = succeeded:body _279
  br ^1

598:
  %% beam_type_SUITE.erl:1382
  %% Aliased:
  %%    _86
  _281 = match_fail `badmatch`, _86

  %% Unique:
  %%    _281
  _729 = succeeded:body _281
  br ^1

586:
  %% beam_type_SUITE.erl:1381
  %% Aliased:
  %%    _84
  _282 = match_fail `badmatch`, _84

  %% Unique:
  %%    _282
  _736 = succeeded:body _282
  br ^1

574:
  %% beam_type_SUITE.erl:1380
  %% Aliased:
  %%    _79
  _283 = match_fail `badmatch`, _79

  %% Unique:
  %%    _283
  _743 = succeeded:body _283
  br ^1

561:
  %% beam_type_SUITE.erl:1379
  %% Aliased:
  %%    _194
  _284 = match_fail `badmatch`, _194

  %% Unique:
  %%    _284
  _747 = succeeded:body _284
  br ^1

558:
  %% beam_type_SUITE.erl:1377
  %% Aliased:
  %%    _70
  _285 = match_fail `badmatch`, _70

  %% Unique:
  %%    _285
  _754 = succeeded:body _285
  br ^1

546:
  %% beam_type_SUITE.erl:1375
  %% Aliased:
  %%    _68
  _286 = match_fail `badmatch`, _68

  %% Unique:
  %%    _286
  _761 = succeeded:body _286
  br ^1

531:
  %% beam_type_SUITE.erl:1372
  %% Aliased:
  %%    _65
  _288 = match_fail `badmatch`, _65

  %% Unique:
  %%    _288
  _771 = succeeded:body _288
  br ^1

516:
  %% beam_type_SUITE.erl:1369
  %% Aliased:
  %%    _62
  _290 = match_fail `badmatch`, _62

  %% Unique:
  %%    _290
  _780 = succeeded:body _290
  br ^1

502:
  %% beam_type_SUITE.erl:1365
  %% Aliased:
  %%    _59
  _292 = match_fail `badmatch`, _59

  %% Unique:
  %%    _292
  _789 = succeeded:body _292
  br ^1

490:
  %% beam_type_SUITE.erl:1363
  %% Aliased:
  %%    _57
  _293 = match_fail `badmatch`, _57

  %% Unique:
  %%    _293
  _796 = succeeded:body _293
  br ^1

478:
  %% beam_type_SUITE.erl:1362
  %% Aliased:
  %%    _50
  _294 = match_fail `badmatch`, _50

  %% Unique:
  %%    _294
  _803 = succeeded:body _294
  br ^1

466:
  %% beam_type_SUITE.erl:1361
  %% Aliased:
  %%    _48
  _295 = match_fail `badmatch`, _48

  %% Unique:
  %%    _295
  _810 = succeeded:body _295
  br ^1

453:
  %% beam_type_SUITE.erl:1360
  %% Aliased:
  %%    _41
  _296 = match_fail `badmatch`, _41

  %% Unique:
  %%    _296
  _814 = succeeded:body _296
  br ^1

441:
  %% beam_type_SUITE.erl:1358
  %% Aliased:
  %%    _34
  _297 = match_fail `badmatch`, _34

  %% Unique:
  %%    _297
  _821 = succeeded:body _297
  br ^1

426:
  %% beam_type_SUITE.erl:1355
  %% Aliased:
  %%    _31
  _299 = match_fail `badmatch`, _31

  %% Unique:
  %%    _299
  _830 = succeeded:body _299
  br ^1

406:
  %% beam_type_SUITE.erl:1352
  %% Aliased:
  %%    _28
  _301 = match_fail `badmatch`, _28

  %% Unique:
  %%    _301
  _840 = succeeded:body _301
  br ^1

394:
  %% beam_type_SUITE.erl:1351
  %% Aliased:
  %%    _26
  _302 = match_fail `badmatch`, _26

  %% Unique:
  %%    _302
  _842 = succeeded:body _302
  br ^1

382:
  %% beam_type_SUITE.erl:1349
  %% Aliased:
  %%    _24
  _303 = match_fail `badmatch`, _24

  %% Unique:
  %%    _303
  _849 = succeeded:body _303
  br ^1

369:
  %% beam_type_SUITE.erl:1348
  %% Aliased:
  %%    _160
  _304 = match_fail `badmatch`, _160

  %% Unique:
  %%    _304
  _853 = succeeded:body _304
  br ^1

363:
  %% beam_type_SUITE.erl:1345
  %% Aliased:
  %%    _20
  _306 = match_fail `badmatch`, _20

  %% Unique:
  %%    _306
  _862 = succeeded:body _306
  br ^1

351:
  %% beam_type_SUITE.erl:1344
  %% Aliased:
  %%    _18
  _307 = match_fail `badmatch`, _18

  %% Unique:
  %%    _307
  _869 = succeeded:body _307
  br ^1

336:
  %% beam_type_SUITE.erl:1340
  %% Aliased:
  %%    _8
  _309 = match_fail `badmatch`, _8

  %% Unique:
  %%    _309
  _879 = succeeded:body _309
  br ^1

324:
  %% beam_type_SUITE.erl:1339
  %% Aliased:
  %%    _6
  _310 = match_fail `badmatch`, _6

  %% Unique:
  %%    _310
  _886 = succeeded:body _310
  br ^1

1:
  _311 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _311
}

%% beam_type_SUITE.erl:1399
%% Counter = 110
%% bs_ensure_opt: true
function `beam_type_SUITE`:`min_max_mixed_types`(_0) {
0:
  %% beam_type_SUITE.erl:1400
  _1 = call (`id`/1), `12`

  %% Aliased:
  %%    _1
  _44 = succeeded:body _1
  br _44, ^44, ^1

44:
  %% beam_type_SUITE.erl:1400
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  NotFloatA = bif:min _1, `100.0`

  %% beam_type_SUITE.erl:1401
  %% Argument types:
  %%    NotFloatA => number()
  %% Unique:
  %%    NotFloatA
  _96 = float:convert NotFloatA

  %% Unique:
  %%    _96
  _102 = succeeded:body _96
  br _102, ^102, ^1

102:
  %% beam_type_SUITE.erl:1401
  _97 = float:put `0.5`

  %% beam_type_SUITE.erl:1401
  %% Unique:
  %%    _96, 
  %%    _97
  _98 = float:'*' _96, _97

  %% Unique:
  %%    _98
  _45 = succeeded:body _98
  br _45, ^99, ^1

99:
  %% Unique:
  %%    _98
  _3 = float:get _98

  %% beam_type_SUITE.erl:1401
  %% Unique:
  %%    _3
  _35 = call (`id`/1), _3

  %% Aliased:
  %%    _35
  _46 = succeeded:body _35
  br _46, ^46, ^1

46:
  %% beam_type_SUITE.erl:1403
  _4 = call (`id`/1), `12.0`

  %% Aliased:
  %%    _4
  _47 = succeeded:body _4
  br _47, ^47, ^1

47:
  %% beam_type_SUITE.erl:1403
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  NotFloatB = bif:max _4, `100`

  %% beam_type_SUITE.erl:1404
  %% Argument types:
  %%    NotFloatB => atom() | maybe_improper_list(any(), any()) | number(100, '+inf') | {...} | other()
  %% Unique:
  %%    NotFloatB
  _103 = float:convert NotFloatB

  %% Unique:
  %%    _103
  _109 = succeeded:body _103
  br _109, ^109, ^1

109:
  %% beam_type_SUITE.erl:1404
  _104 = float:put `0.5`

  %% beam_type_SUITE.erl:1404
  %% Unique:
  %%    _103, 
  %%    _104
  _105 = float:'*' _103, _104

  %% Unique:
  %%    _105
  _48 = succeeded:body _105
  br _48, ^106, ^1

106:
  %% Unique:
  %%    _105
  _6 = float:get _105

  %% beam_type_SUITE.erl:1404
  %% Unique:
  %%    _6
  _36 = call (`id`/1), _6

  %% Aliased:
  %%    _36
  _49 = succeeded:body _36
  br _49, ^49, ^1

49:
  %% beam_type_SUITE.erl:1407
  _7 = call (`id`/1), `0`

  %% Aliased:
  %%    _7
  _50 = succeeded:body _7
  br _50, ^50, ^1

50:
  %% beam_type_SUITE.erl:1407
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _8 = bif:'+' _7, `1`

  %% Unique:
  %%    _8
  _51 = succeeded:body _8
  br _51, ^51, ^1

51:
  %% beam_type_SUITE.erl:1407
  %% Argument types:
  %%    _8 => number()
  %% Unique:
  %%    _8
  _9 = bif:min _8, `42`

  %% beam_type_SUITE.erl:1407
  %% Unique:
  %%    _9
  _30 = call (`id`/1), _9

  %% Aliased:
  %%    _30
  _52 = succeeded:body _30
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _89 = bif:'=:=' _30, `1`
  br _89, ^88, ^54

88:
  %% beam_type_SUITE.erl:1408
  _12 = call (`id`/1), `0`

  %% Aliased:
  %%    _12
  _55 = succeeded:body _12
  br _55, ^55, ^1

55:
  %% beam_type_SUITE.erl:1408
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _13 = bif:'+' _12, `1`

  %% Unique:
  %%    _13
  _56 = succeeded:body _13
  br _56, ^56, ^1

56:
  %% beam_type_SUITE.erl:1408
  %% Argument types:
  %%    _13 => number()
  %% Unique:
  %%    _13
  _14 = bif:min _13, `-10`

  %% beam_type_SUITE.erl:1408
  %% Unique:
  %%    _14
  _31 = call (`id`/1), _14

  %% Aliased:
  %%    _31
  _57 = succeeded:body _31
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _86 = bif:'=:=' _31, `-10`
  br _86, ^85, ^59

85:
  %% beam_type_SUITE.erl:1409
  _16 = call (`id`/1), `42`

  %% Aliased:
  %%    _16
  _60 = succeeded:body _16
  br _60, ^60, ^1

60:
  %% beam_type_SUITE.erl:1409
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _17 = bif:'+' _16, `1`

  %% Unique:
  %%    _17
  _61 = succeeded:body _17
  br _61, ^61, ^1

61:
  %% beam_type_SUITE.erl:1409
  %% Argument types:
  %%    _17 => number()
  %% Unique:
  %%    _17
  _18 = bif:max `3`, _17

  %% beam_type_SUITE.erl:1409
  %% Unique:
  %%    _18
  _32 = call (`id`/1), _18

  %% Aliased:
  %%    _32
  _62 = succeeded:body _32
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _83 = bif:'=:=' _32, `43`
  br _83, ^82, ^64

82:
  %% beam_type_SUITE.erl:1410
  _20 = call (`id`/1), `41`

  %% Aliased:
  %%    _20
  _65 = succeeded:body _20
  br _65, ^65, ^1

65:
  %% beam_type_SUITE.erl:1410
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _21 = bif:'+' _20, `1`

  %% Unique:
  %%    _21
  _66 = succeeded:body _21
  br _66, ^66, ^1

66:
  %% beam_type_SUITE.erl:1410
  %% Argument types:
  %%    _21 => number()
  %% Unique:
  %%    _21
  _23 = bif:max `-99`, _21

  %% beam_type_SUITE.erl:1410
  %% Unique:
  %%    _23
  _33 = call (`id`/1), _23

  %% Aliased:
  %%    _33
  _67 = succeeded:body _33
  br _67, ^67, ^1

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _80 = bif:'=:=' _33, `42`
  br _80, ^79, ^69

79:
  %% beam_type_SUITE.erl:1411
  _27 = call (`id`/1), `0`

  %% Aliased:
  %%    _27
  _70 = succeeded:body _27
  br _70, ^70, ^1

70:
  %% beam_type_SUITE.erl:1411
  _25 = call (`id`/1), `42`

  %% Aliased:
  %%    _25
  _71 = succeeded:body _25
  br _71, ^71, ^1

71:
  %% beam_type_SUITE.erl:1411
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _26 = bif:'-' _25

  %% Unique:
  %%    _26
  _72 = succeeded:body _26
  br _72, ^72, ^1

72:
  %% beam_type_SUITE.erl:1411
  %% Argument types:
  %%    _26 => number()
  %% Aliased:
  %%    _27
  %% Unique:
  %%    _26
  _28 = bif:min _27, _26

  %% beam_type_SUITE.erl:1411
  %% Unique:
  %%    _28
  _34 = call (`id`/1), _28

  %% Aliased:
  %%    _34
  _73 = succeeded:body _34
  br _73, ^73, ^1

73:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _77 = bif:'=:=' _34, `-42`
  br _77, ^76, ^75

76:
  %% Result type:
  %%    'ok'
  ret `ok`

75:
  %% beam_type_SUITE.erl:1411
  %% Aliased:
  %%    _34
  _37 = match_fail `badmatch`, _34

  %% Unique:
  %%    _37
  _78 = succeeded:body _37
  br ^1

69:
  %% beam_type_SUITE.erl:1410
  %% Aliased:
  %%    _33
  _38 = match_fail `badmatch`, _33

  %% Unique:
  %%    _38
  _81 = succeeded:body _38
  br ^1

64:
  %% beam_type_SUITE.erl:1409
  %% Aliased:
  %%    _32
  _39 = match_fail `badmatch`, _32

  %% Unique:
  %%    _39
  _84 = succeeded:body _39
  br ^1

59:
  %% beam_type_SUITE.erl:1408
  %% Aliased:
  %%    _31
  _40 = match_fail `badmatch`, _31

  %% Unique:
  %%    _40
  _87 = succeeded:body _40
  br ^1

54:
  %% beam_type_SUITE.erl:1407
  %% Aliased:
  %%    _30
  _41 = match_fail `badmatch`, _30

  %% Unique:
  %%    _41
  _90 = succeeded:body _41
  br ^1

1:
  _42 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _42
}

%% beam_type_SUITE.erl:1421
%% Counter = 222
%% bs_ensure_opt: true
function `beam_type_SUITE`:`not_equal`(_0) {
0:
  %% beam_type_SUITE.erl:1422
  %% Result type:
  %%    'true'
  _16 = call (`do_not_equal`/1), `true`

  %% Unique:
  %%    _16
  _48 = succeeded:body _16
  br _48, ^215, ^1

215:
  br ^219

219:
  _54 = new_try_tag `'catch'`
  br _54, ^52, ^53

52:
  %% beam_type_SUITE.erl:1423
  %% Result type:
  %%    'true'
  _34 = call (`do_not_equal`/1), `false`

  %% Unique:
  %%    _34
  _56 = succeeded:body _34
  br _56, ^56, ^53

56:
  br ^51

53:
  %% Unique:
  %%    _54
  _59 = landingpad `'catch'`, _54

  %% Aliased:
  %%    _59
  _57 = extract _59, `0`
  br ^51

51:
  _60 = phi { _57, ^53 }, { `true`, ^56 }

  %% Aliased:
  %%    _60
  %% Unique:
  %%    _54
  _2 = catch_end _54, _60

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _147 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _147, ^144, ^62

144:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _17 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _141 = is_tagged_tuple _17, `2`, `function_clause`
  br _141, ^216, ^62

216:
  br ^220

220:
  _66 = new_try_tag `'catch'`
  br _66, ^64, ^65

64:
  %% beam_type_SUITE.erl:1424
  %% Result type:
  %%    none()
  _36 = call (`do_not_equal`/1), `0`

  %% Aliased:
  %%    _36
  _68 = succeeded:body _36
  br ^65

65:
  %% Unique:
  %%    _66
  _71 = landingpad `'catch'`, _66

  %% Aliased:
  %%    _71
  _69 = extract _71, `0`
  br ^63

63:
  %% Aliased:
  %%    _69
  %% Unique:
  %%    _66
  _4 = catch_end _66, _69

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _134 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _134, ^131, ^74

131:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _21 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _128 = is_tagged_tuple _21, `2`, `function_clause`
  br _128, ^217, ^74

217:
  br ^221

221:
  _78 = new_try_tag `'catch'`
  br _78, ^76, ^77

76:
  %% beam_type_SUITE.erl:1425
  %% Result type:
  %%    none()
  _38 = call (`do_not_equal`/1), `42`

  %% Aliased:
  %%    _38
  _80 = succeeded:body _38
  br ^77

77:
  %% Unique:
  %%    _78
  _83 = landingpad `'catch'`, _78

  %% Aliased:
  %%    _83
  _81 = extract _83, `0`
  br ^75

75:
  %% Aliased:
  %%    _81
  %% Unique:
  %%    _78
  _6 = catch_end _78, _81

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _121 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _121, ^118, ^86

118:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _25 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _115 = is_tagged_tuple _25, `2`, `function_clause`
  br _115, ^112, ^86

112:
  %% beam_type_SUITE.erl:1426
  %% Argument types:
  %%    
  _8 = bif:self
  _90 = new_try_tag `'catch'`
  br _90, ^154, ^89

154:
  %% beam_type_SUITE.erl:1426
  %% Result type:
  %%    none()
  %% Unique:
  %%    _8
  _40 = call (`do_not_equal`/1), _8

  %% Aliased:
  %%    _40
  _92 = succeeded:body _40
  br ^89

89:
  %% Unique:
  %%    _90
  _95 = landingpad `'catch'`, _90

  %% Aliased:
  %%    _95
  _93 = extract _95, `0`
  br ^87

87:
  %% Aliased:
  %%    _93
  %% Unique:
  %%    _90
  _9 = catch_end _90, _93

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _108 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _108, ^105, ^98

105:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _29 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _102 = is_tagged_tuple _29, `2`, `function_clause`
  br _102, ^99, ^98

99:
  %% Result type:
  %%    'ok'
  ret `ok`

98:
  %% beam_type_SUITE.erl:1426
  %% Aliased:
  %%    _9
  _41 = match_fail `badmatch`, _9

  %% Unique:
  %%    _41
  _111 = succeeded:body _41
  br ^1

86:
  %% beam_type_SUITE.erl:1425
  %% Aliased:
  %%    _6
  _42 = match_fail `badmatch`, _6

  %% Unique:
  %%    _42
  _124 = succeeded:body _42
  br ^1

74:
  %% beam_type_SUITE.erl:1424
  %% Aliased:
  %%    _4
  _43 = match_fail `badmatch`, _4

  %% Unique:
  %%    _43
  _137 = succeeded:body _43
  br ^1

62:
  %% beam_type_SUITE.erl:1423
  %% Aliased:
  %%    _2
  _44 = match_fail `badmatch`, _2

  %% Unique:
  %%    _44
  _150 = succeeded:body _44
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% beam_type_SUITE.erl:1430
%% Counter = 46
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true' | 0..42 | pid()
function `beam_type_SUITE`:`do_not_equal`(_0) {
0:
  %% Argument types:
  %%    _0 => 'false' | 'true' | 0..42 | pid()
  %% Unique:
  %%    _0
  _6 = bif:'=:=' _0, `true`

  %% Argument types:
  %%    _0 => 'false' | 'true' | 0..42 | pid()
  %% Unique:
  %%    _0
  _7 = bif:'=:=' _0, `true`

  %% beam_type_SUITE.erl:1430
  %% Argument types:
  %%    _6 => 'false' | 'true'
  %%    _7 => 'false' | 'true'
  %% Unique:
  %%    _6, 
  %%    _7
  _8 = bif:'or' _6, _7
  br _8, ^35, ^26

35:
  %% beam_type_SUITE.erl:1431
  %% Argument types:
  %%    _0 => 'false' | 'true' | 0..42 | pid()
  %% Unique:
  %%    _0
  _11 = bif:'=/=' _0, `a`

  %% Argument types:
  %%    _11 => 'false' | 'true'
  %%    _0 => 'false' | 'true' | 0..42 | pid()
  %% Unique:
  %%    _0, 
  %%    _11
  _38 = bif:'=:=' _11, _0
  br _38, ^42, ^37

42:
  %% Result type:
  %%    'true'
  ret `true`

37:
  %% beam_type_SUITE.erl:1431
  %% Unique:
  %%    _11
  _22 = match_fail `badmatch`, _11

  %% Unique:
  %%    _22
  _44 = succeeded:body _22
  br ^1

26:
  %% beam_type_SUITE.erl:1430
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-do_not_equal/1-',1}}
  _23 = match_fail `function_clause`, _0

  %% Unique:
  %%    _23
  _45 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_type_SUITE.erl:1434
%% Counter = 164
%% bs_ensure_opt: true
function `beam_type_SUITE`:`infer_relops`(_0) {
0:
  br ^161

161:
  _39 = new_try_tag `'catch'`
  br _39, ^37, ^38

37:
  %% beam_type_SUITE.erl:1435
  %% Result type:
  %%    none()
  _25 = call (`infer_relops_1`/0)

  %% Aliased:
  %%    _25
  _41 = succeeded:body _25
  br ^38

38:
  %% Unique:
  %%    _39
  _44 = landingpad `'catch'`, _39

  %% Aliased:
  %%    _44
  _42 = extract _44, `0`
  br ^36

36:
  %% Aliased:
  %%    _42
  %% Unique:
  %%    _39
  _1 = catch_end _39, _42

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _109 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _109, ^106, ^47

106:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _12 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _103 = is_tagged_tuple _12, `2`, `badarith`
  br _103, ^159, ^47

159:
  br ^162

162:
  _51 = new_try_tag `'catch'`
  br _51, ^49, ^50

49:
  %% beam_type_SUITE.erl:1436
  %% Result type:
  %%    none()
  _27 = call (`infer_relops_2`/0)

  %% Aliased:
  %%    _27
  _53 = succeeded:body _27
  br ^50

50:
  %% Unique:
  %%    _51
  _56 = landingpad `'catch'`, _51

  %% Aliased:
  %%    _56
  _54 = extract _56, `0`
  br ^48

48:
  %% Aliased:
  %%    _54
  %% Unique:
  %%    _51
  _3 = catch_end _51, _54

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _96 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _96, ^93, ^59

93:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _16 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _90 = is_tagged_tuple _16, `2`, `badarith`
  br _90, ^160, ^59

160:
  br ^163

163:
  _63 = new_try_tag `'catch'`
  br _63, ^61, ^62

61:
  %% beam_type_SUITE.erl:1437
  _5 = call (`id`/1), `0`

  %% Aliased:
  %%    _5
  _65 = succeeded:body _5
  br _65, ^65, ^62

65:
  %% beam_type_SUITE.erl:1437
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _5
  _29 = call (`infer_relops_3`/1), _5

  %% Aliased:
  %%    _29
  _66 = succeeded:body _29
  br ^62

62:
  %% Unique:
  %%    _63
  _69 = landingpad `'catch'`, _63

  %% Aliased:
  %%    _69
  _67 = extract _69, `0`
  br ^60

60:
  %% Aliased:
  %%    _67
  %% Unique:
  %%    _63
  _6 = catch_end _63, _67

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _83 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _83, ^80, ^72

80:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _20 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _77 = is_tagged_tuple _20, `2`, `badarith`
  br _77, ^74, ^72

74:
  %% beam_type_SUITE.erl:1438
  %% Result type:
  %%    nil()
  _30 = call (`infer_relops_4`/0)

  %% Unique:
  %%    _30
  _73 = succeeded:body _30
  br _73, ^73, ^1

73:
  %% Result type:
  %%    'ok'
  ret `ok`

72:
  %% beam_type_SUITE.erl:1437
  %% Aliased:
  %%    _6
  _31 = match_fail `badmatch`, _6

  %% Unique:
  %%    _31
  _86 = succeeded:body _31
  br ^1

59:
  %% beam_type_SUITE.erl:1436
  %% Aliased:
  %%    _3
  _32 = match_fail `badmatch`, _3

  %% Unique:
  %%    _32
  _99 = succeeded:body _32
  br ^1

47:
  %% beam_type_SUITE.erl:1435
  %% Aliased:
  %%    _1
  _33 = match_fail `badmatch`, _1

  %% Unique:
  %%    _33
  _112 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% beam_type_SUITE.erl:1444
%% Counter = 56
%% bs_ensure_opt: true
function `beam_type_SUITE`:`infer_relops_1`() {
0:
  %% beam_type_SUITE.erl:1445
  %% Argument types:
  %%    
  _8 = bif:'rem' `0`, `0`

  %% Unique:
  %%    _8
  _39 = succeeded:body _8
  br _39, ^39, ^1

39:
  %% beam_type_SUITE.erl:1445
  %% Argument types:
  %%    
  _33 = bif:node

  %% beam_type_SUITE.erl:1445
  %% Result type:
  %%    none()
  %% Unique:
  %%    _33
  _7 = call (`'-infer_relops_1/0-lc$^0/1-0-'`/1), _33

  %% Aliased:
  %%    _7
  _49 = succeeded:body _7
  br ^1

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37
}

%% beam_type_SUITE.erl:1447
%% Counter = 40
%% bs_ensure_opt: true
function `beam_type_SUITE`:`infer_relops_2`() {
0:
  %% beam_type_SUITE.erl:1448
  %% Argument types:
  %%    
  _0 = bif:self

  %% beam_type_SUITE.erl:1448
  %% Argument types:
  %%    _0 => pid()
  %% Unique:
  %%    _0
  X = bif:'+' _0, `0`

  %% Unique:
  %%    X
  _33 = succeeded:body X
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_type_SUITE.erl:1451
%% Counter = 34
%% bs_ensure_opt: true
function `beam_type_SUITE`:`infer_relops_3`(_0) {
0:
  %% beam_type_SUITE.erl:1452
  _6 = call (`erlang`:`is_alive`/0)

  %% beam_type_SUITE.erl:1452
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _7 = bif:'+' _6

  %% Unique:
  %%    _7
  _18 = succeeded:body _7
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:'=:=' _0, `true`
  br _21, ^21, ^28

21:
  %% beam_type_SUITE.erl:1454
  %% Result type:
  %%    none()
  _3 = call (`infer_relops_3`/1), `0`

  %% Aliased:
  %%    _3
  _22 = succeeded:body _3
  br ^1

28:
  %% beam_type_SUITE.erl:1456
  _14 = match_fail `bad_filter`, `ok`

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_type_SUITE.erl:1459
%% Counter = 55
%% bs_ensure_opt: true
function `beam_type_SUITE`:`infer_relops_4`() {
0:
  %% beam_type_SUITE.erl:1462
  %% Result type:
  %%    nil()
  _51 = call (`'-infer_relops_4/0-lc$^1/1-0-'`/1), `<<>>`

  %% Unique:
  %%    _51
  _54 = succeeded:body _51
  br _54, ^54, ^1

54:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _51
  ret _51

1:
  _52 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _52
}

%% beam_type_SUITE.erl:1474
%% Counter = 23
%% bs_ensure_opt: true
function `beam_type_SUITE`:`binary_unit`(_0) {
0:
  %% beam_type_SUITE.erl:1475
  %% Result type:
  %%    fun((_) -> bitstring(16))
  _1 = call (`binary_unit_1`/0)

  %% Aliased:
  %%    _1
  _11 = succeeded:body _1
  br _11, ^11, ^1

11:
  %% beam_type_SUITE.erl:1475
  %% Aliased:
  %%    _1
  F = call (`id`/1), _1

  %% Aliased:
  %%    F
  _12 = succeeded:body F
  br _12, ^12, ^1

12:
  %% beam_type_SUITE.erl:1477
  %% Argument types:
  %%    
  %% Aliased:
  %%    F
  _5 = call F, `[1]`

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br _13, ^13, ^1

13:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _21 = bif:'=:=' _5, `<<0,1>>`
  br _21, ^21, ^15

21:
  %% beam_type_SUITE.erl:1478
  %% Argument types:
  %%    F => fun((_))
  %% Aliased:
  %%    F
  _6 = call F, `[0,1]`

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _19 = bif:'=:=' _6, `<<0,0>>`
  br _19, ^19, ^18

19:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% beam_type_SUITE.erl:1478
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br ^1

15:
  %% beam_type_SUITE.erl:1477
  %% Aliased:
  %%    _5
  _8 = match_fail `badmatch`, _5

  %% Unique:
  %%    _8
  _22 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% beam_type_SUITE.erl:1482
%% Counter = 32
%% bs_ensure_opt: true
function `beam_type_SUITE`:`binary_unit_1`() {
0:
  %% Result type:
  %%    bitstring(16)
  _29 = make_fun (`'-binary_unit_1/0-Foo/1-0-'`/1)
  %% Result type:
  %%    fun((_) -> bitstring(16))
  %% Aliased:
  %%    _29
  ret _29
}

%% beam_type_SUITE.erl:1491
%% Counter = 29
%% bs_ensure_opt: true
function `beam_type_SUITE`:`premature_concretization`(_0) {
0:
  %% beam_type_SUITE.erl:1492
  _2 = call (`id`/1), `tagged`

  %% Aliased:
  %%    _2
  _13 = succeeded:body _2
  br _13, ^13, ^1

13:
  %% beam_type_SUITE.erl:1492
  _1 = call (`id`/1), `{tagged,foo}`

  %% Aliased:
  %%    _1
  _14 = succeeded:body _1
  br _14, ^14, ^1

14:
  %% beam_type_SUITE.erl:1492
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _1, 
  %%    _2
  _7 = call (`pm_concretization_1`/2), _2, _1

  %% Unique:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _7 => 'error' | 'ok'
  %% Unique:
  %%    _7
  _27 = bif:'=:=' _7, `ok`
  br _27, ^26, ^17

26:
  %% beam_type_SUITE.erl:1493
  _5 = call (`id`/1), `flurb`

  %% Aliased:
  %%    _5
  _18 = succeeded:body _5
  br _18, ^18, ^1

18:
  %% beam_type_SUITE.erl:1493
  _4 = call (`id`/1), `{tagged,foo}`

  %% Aliased:
  %%    _4
  _19 = succeeded:body _4
  br _19, ^19, ^1

19:
  %% beam_type_SUITE.erl:1493
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _4, 
  %%    _5
  _8 = call (`pm_concretization_1`/2), _5, _4

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _8 => 'error' | 'ok'
  %% Unique:
  %%    _8
  _24 = bif:'=:=' _8, `error`
  br _24, ^23, ^22

23:
  %% Result type:
  %%    'ok'
  ret `ok`

22:
  %% beam_type_SUITE.erl:1493
  _9 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br ^1

17:
  %% beam_type_SUITE.erl:1492
  _10 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _10
  _28 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:1496
%% Counter = 30
%% bs_ensure_opt: true
function `beam_type_SUITE`:`pm_concretization_1`(_0, _1) {
0:
  %% beam_type_SUITE.erl:1497
  %% Result type:
  %%    {'error', any()} | {'ok', {'tagged', any()}}
  %% Aliased:
  %%    _0, 
  %%    _1
  _4 = call (`pm_concretization_2`/2), _0, _1

  %% Unique:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^23, ^1

23:
  %% Argument types:
  %%    _4 => {'error', any()} | {'ok', {'tagged', any()}}
  %% Unique:
  %%    _4
  _6 = get_tuple_element _4, `0`

  %% Argument types:
  %%    _4 => {'error', any()} | {'ok', {'tagged', any()}}
  %% Unique:
  %%    _4
  _5 = get_tuple_element _4, `1`

  %% beam_type_SUITE.erl:1498
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  _7 = call (`pm_concretization_3`/1), _5

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^16, ^1

16:
  %% Unique:
  %%    _6
  _29 = bif:'=:=' _6, `ok`
  br _29, ^21, ^20

21:
  %% beam_type_SUITE.erl:1500
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  _8 = call (`pm_concretization_4`/1), _5

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _8
  ret _8

20:
  %% Result type:
  %%    'error'
  ret `error`

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_type_SUITE.erl:1504
%% Counter = 20
%% bs_ensure_opt: true
function `beam_type_SUITE`:`pm_concretization_2`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _19 = bif:'=:=' _0, `tagged`
  br _19, ^18, ^11

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _15 = is_tagged_tuple _1, `2`, `tagged`
  br _15, ^12, ^11

12:
  %% Argument types:
  %%    _1 => {'tagged', any()}
  %% Aliased:
  %%    _1
  _7 = put_tuple `ok`, _1
  %% Result type:
  %%    {'ok', {'tagged', any()}}
  %% Unique:
  %%    _7
  ret _7

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _8 = put_tuple `error`, _1
  %% Result type:
  %%    {'error', any()}
  %% Unique:
  %%    _8
  ret _8
}

%% beam_type_SUITE.erl:1507
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`pm_concretization_3`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1508
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'tagged', any()}
function `beam_type_SUITE`:`pm_concretization_4`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1510
%% Counter = 121
%% bs_ensure_opt: true
function `beam_type_SUITE`:`funs`(_0) {
0:
  br ^119

119:
  _32 = new_try_tag `'catch'`
  br _32, ^30, ^31

30:
  %% beam_type_SUITE.erl:1511
  %% Result type:
  %%    none()
  _21 = call (`gh_7179`/0)

  %% Aliased:
  %%    _21
  _34 = succeeded:body _21
  br ^31

31:
  %% Unique:
  %%    _32
  _37 = landingpad `'catch'`, _32

  %% Aliased:
  %%    _37
  _35 = extract _37, `0`
  br ^29

29:
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _32
  _1 = catch_end _32, _35

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _82 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _82, ^79, ^40

79:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _11 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _76 = is_tagged_tuple _11, `2`, `badarg`
  br _76, ^73, ^40

73:
  %% Result type:
  %%    'ok'
  _3 = make_fun (`'-funs/1-fun-0-'`/0)

  %% beam_type_SUITE.erl:1512
  %% Aliased:
  %%    _3
  _4 = call (`id`/1), _3

  %% Aliased:
  %%    _4
  _41 = succeeded:body _4
  br _41, ^118, ^1

118:
  br ^120

120:
  _48 = new_try_tag `'catch'`
  br _48, ^46, ^47

46:
  %% beam_type_SUITE.erl:1514
  %% Result type:
  %%    nil()
  _23 = call (`gh_7197`/0)

  %% Unique:
  %%    _23
  _50 = succeeded:body _23
  br _50, ^50, ^47

50:
  br ^45

47:
  %% Unique:
  %%    _48
  _53 = landingpad `'catch'`, _48

  %% Aliased:
  %%    _53
  _51 = extract _53, `0`
  br ^45

45:
  _54 = phi { _51, ^47 }, { `[]`, ^50 }

  %% Aliased:
  %%    _54
  %% Unique:
  %%    _48
  _6 = catch_end _48, _54

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _66 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _66, ^63, ^56

63:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _16 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _60 = is_tagged_tuple _16, `2`, `badarg`
  br _60, ^57, ^56

57:
  %% Result type:
  %%    'ok'
  ret `ok`

56:
  %% beam_type_SUITE.erl:1514
  %% Aliased:
  %%    _6
  _24 = match_fail `badmatch`, _6

  %% Unique:
  %%    _24
  _69 = succeeded:body _24
  br ^1

40:
  %% beam_type_SUITE.erl:1511
  %% Aliased:
  %%    _1
  _26 = match_fail `badmatch`, _1

  %% Unique:
  %%    _26
  _85 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_type_SUITE.erl:1519
%% Counter = 50
%% bs_ensure_opt: true
function `beam_type_SUITE`:`gh_7179`() {
0:
  %% beam_type_SUITE.erl:1520
  %% Result type:
  %%    list(0)
  _6 = call (`'-gh_7179/0-lc$^0/1-0-'`/1), `<<>>`

  %% Unique:
  %%    _6
  _43 = succeeded:body _6
  br _43, ^43, ^1

43:
  %% beam_type_SUITE.erl:1520
  %% Argument types:
  %%    _6 => list(0)
  %% Unique:
  %%    _6
  _28 = bif:is_function _6, `-1`

  %% Unique:
  %%    _28
  _44 = succeeded:body _28
  br ^1

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41
}

%% beam_type_SUITE.erl:1524
%% Counter = 40
%% bs_ensure_opt: true
function `beam_type_SUITE`:`gh_7197`() {
0:
  %% beam_type_SUITE.erl:1525
  %% Result type:
  %%    list('ok')
  _5 = call (`'-gh_7197/0-lc$^0/1-0-'`/1), `<<>>`

  %% Unique:
  %%    _5
  _29 = succeeded:body _5
  br _29, ^29, ^1

29:
  %% beam_type_SUITE.erl:1525
  _0 = call (`erlang`:`get_keys`/0)

  %% Aliased:
  %%    _0
  _30 = succeeded:body _0
  br _30, ^30, ^1

30:
  %% beam_type_SUITE.erl:1525
  %% Argument types:
  %%    _5 => list('ok')
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _5
  _22 = bif:is_function _5, _0

  %% Unique:
  %%    _22
  _31 = succeeded:body _22
  br _31, ^38, ^1

38:
  %% Result type:
  %%    nil()
  ret `[]`

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_type_SUITE.erl:1530
%% Counter = 16
%% bs_ensure_opt: true
function `beam_type_SUITE`:`will_succeed`(_0) {
0:
  %% beam_type_SUITE.erl:1531
  _2 = call (`id`/1), `ok`

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% beam_type_SUITE.erl:1531
  _1 = call (`id`/1), `#{}`

  %% Aliased:
  %%    _1
  _9 = succeeded:body _1
  br _9, ^9, ^1

9:
  %% beam_type_SUITE.erl:1531
  %% Result type:
  %%    'a' | 'b'
  %% Aliased:
  %%    _1, 
  %%    _2
  _4 = call (`will_succeed_1`/2), _2, _1

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _4 => 'a' | 'b'
  %% Unique:
  %%    _4
  _14 = bif:'=:=' _4, `b`
  br _14, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% beam_type_SUITE.erl:1531
  _5 = match_fail `badmatch`, `a`

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1536
%% Counter = 19
%% bs_ensure_opt: true
function `beam_type_SUITE`:`will_succeed_1`(_0, _1) {
0:
  %% beam_type_SUITE.erl:1537
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = bif:map_size _1

  %% Unique:
  %%    _2
  _14 = succeeded:guard _2
  br _14, ^14, ^12

14:
  %% beam_type_SUITE.erl:1537
  %% Argument types:
  %%    _2 => 0..288230376151711743
  %% Unique:
  %%    _2
  _3 = bif:'bxor' _2, `288230376151711743`

  %% beam_type_SUITE.erl:1537
  %% Argument types:
  %%    _3 => 0..288230376151711743
  %% Unique:
  %%    _3
  _5 = bif:'bsl' `1`, _3

  %% Unique:
  %%    _5
  _17 = succeeded:guard _5
  br _17, ^17, ^12

17:
  %% Argument types:
  %%    _5 => 1..'+inf'
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _5
  _18 = bif:'=:=' _5, _0
  br _18, ^13, ^12

13:
  %% Result type:
  %%    'a'
  ret `a`

12:
  %% Result type:
  %%    'b'
  ret `b`
}

%% beam_type_SUITE.erl:1544
%% Counter = 244
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion`(_0) {
0:
  br ^239

239:
  _55 = new_try_tag `'catch'`
  br _55, ^53, ^54

53:
  %% beam_type_SUITE.erl:1545
  _34 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _34
  _57 = succeeded:body _34
  br ^54

54:
  %% Unique:
  %%    _55
  _60 = landingpad `'catch'`, _55

  %% Aliased:
  %%    _60
  _58 = extract _60, `0`
  br ^52

52:
  %% Aliased:
  %%    _58
  %% Unique:
  %%    _55
  _3 = catch_end _55, _58

  %% beam_type_SUITE.erl:1545
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  _22 = call (`float_confusion_1`/2), _3, `-0.0`

  %% Unique:
  %%    _22
  _62 = succeeded:body _22
  br _62, ^155, ^1

155:
  %% beam_type_SUITE.erl:1546
  %% Result type:
  %%    'ok'
  _23 = call (`float_confusion_1`/2), `ok`, `0.0`

  %% Unique:
  %%    _23
  _65 = succeeded:body _23
  br _65, ^235, ^1

235:
  br ^240

240:
  _71 = new_try_tag `'catch'`
  br _71, ^69, ^70

69:
  %% beam_type_SUITE.erl:1547
  %% Result type:
  %%    nil()
  _36 = call (`float_confusion_2`/0)

  %% Unique:
  %%    _36
  _73 = succeeded:body _36
  br _73, ^73, ^70

73:
  br ^68

70:
  %% Unique:
  %%    _71
  _76 = landingpad `'catch'`, _71

  %% Aliased:
  %%    _76
  _74 = extract _76, `0`
  br ^68

68:
  _77 = phi { _74, ^70 }, { `[]`, ^73 }

  %% Aliased:
  %%    _77
  %% Unique:
  %%    _71
  _6 = catch_end _71, _77

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _148 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _148, ^236, ^79

236:
  br ^241

241:
  _83 = new_try_tag `'catch'`
  br _83, ^81, ^82

81:
  %% beam_type_SUITE.erl:1548
  _8 = call (`id`/1), `0.0`

  %% Aliased:
  %%    _8
  _85 = succeeded:body _8
  br _85, ^85, ^82

85:
  %% beam_type_SUITE.erl:1548
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _8
  _38 = call (`float_confusion_3`/1), _8

  %% Unique:
  %%    _38
  _86 = succeeded:body _38
  br _86, ^86, ^82

86:
  br ^80

82:
  %% Unique:
  %%    _83
  _89 = landingpad `'catch'`, _83

  %% Aliased:
  %%    _89
  _87 = extract _89, `0`
  br ^80

80:
  _90 = phi { _87, ^82 }, { `ok`, ^86 }

  %% Aliased:
  %%    _90
  %% Unique:
  %%    _83
  _9 = catch_end _83, _90

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _141 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _141, ^138, ^92

138:
  %% beam_type_SUITE.erl:1549
  _11 = call (`id`/1), `1`

  %% Aliased:
  %%    _11
  _93 = succeeded:body _11
  br _93, ^93, ^1

93:
  %% beam_type_SUITE.erl:1549
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _11
  _28 = call (`float_confusion_4`/1), _11

  %% Unique:
  %%    _28
  _94 = succeeded:body _28
  br _94, ^237, ^1

237:
  br ^242

242:
  _100 = new_try_tag `'catch'`
  br _100, ^98, ^99

98:
  %% beam_type_SUITE.erl:1550
  %% Result type:
  %%    'ok'
  _40 = call (`float_confusion_5`/0)

  %% Unique:
  %%    _40
  _102 = succeeded:body _40
  br _102, ^102, ^99

102:
  br ^97

99:
  %% Unique:
  %%    _100
  _105 = landingpad `'catch'`, _100

  %% Aliased:
  %%    _105
  _103 = extract _105, `0`
  br ^97

97:
  _106 = phi { _103, ^99 }, { `ok`, ^102 }

  %% Aliased:
  %%    _106
  %% Unique:
  %%    _100
  _13 = catch_end _100, _106

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _131 = is_tagged_tuple _13, `2`, `'EXIT'`
  br _131, ^238, ^108

238:
  br ^243

243:
  _112 = new_try_tag `'catch'`
  br _112, ^110, ^111

110:
  %% beam_type_SUITE.erl:1551
  %% Result type:
  %%    bitstring(256,appendable)
  _42 = call (`float_confusion_6`/0)

  %% Unique:
  %%    _42
  _114 = succeeded:body _42
  br _114, ^114, ^111

114:
  br ^109

111:
  %% Unique:
  %%    _112
  _117 = landingpad `'catch'`, _112

  %% Aliased:
  %%    _117
  _115 = extract _117, `0`
  br ^109

109:
  _118 = phi { _115, ^111 }, { _42, ^114 }

  %% Aliased:
  %%    _118
  %% Unique:
  %%    _112
  _15 = catch_end _112, _118

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _124 = is_tagged_tuple _15, `2`, `'EXIT'`
  br _124, ^121, ^120

121:
  %% Result type:
  %%    'ok'
  ret `ok`

120:
  %% beam_type_SUITE.erl:1551
  %% Aliased:
  %%    _15
  _43 = match_fail `badmatch`, _15

  %% Unique:
  %%    _43
  _127 = succeeded:body _43
  br ^1

108:
  %% beam_type_SUITE.erl:1550
  %% Aliased:
  %%    _13
  _44 = match_fail `badmatch`, _13

  %% Unique:
  %%    _44
  _134 = succeeded:body _44
  br ^1

92:
  %% beam_type_SUITE.erl:1548
  %% Aliased:
  %%    _9
  _46 = match_fail `badmatch`, _9

  %% Unique:
  %%    _46
  _144 = succeeded:body _46
  br ^1

79:
  %% beam_type_SUITE.erl:1547
  %% Aliased:
  %%    _6
  _47 = match_fail `badmatch`, _6

  %% Unique:
  %%    _47
  _151 = succeeded:body _47
  br ^1

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% beam_type_SUITE.erl:1554
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     -0.0..0.0
function `beam_type_SUITE`:`float_confusion_1`(_0, _1) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1557
%% Counter = 40
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion_2`() {
0:
  %% beam_type_SUITE.erl:1558
  _21 = call (`erts_internal`:`mc_iterator`/1), `ok`

  %% Aliased:
  %%    _21
  _33 = succeeded:body _21
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _37 = bif:'=:=' _21, `[]`
  br _37, ^37, ^39

37:
  %% beam_type_SUITE.erl:1558
  _29 = call (`erlang`:`error`/1), `{bad_generator,ok}`

  %% Aliased:
  %%    _29
  _36 = succeeded:body _29
  br ^1

39:
  %% beam_type_SUITE.erl:1558
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21
  _30 = call (`'-float_confusion_2/0-lc$^0/1-0-'`/1), _21

  %% Unique:
  %%    _30
  _38 = succeeded:body _30
  br _38, ^38, ^1

38:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _30
  ret _30

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_type_SUITE.erl:1561
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     number(-1, 0)
function `beam_type_SUITE`:`float_confusion_crash`(_0, _1) {
0:
  %% beam_type_SUITE.erl:1561
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  %% Anno: #{inlined => {'-inlined-float_confusion_crash/2-',2}}
  _5 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _5
  _11 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1564
%% Counter = 12
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion_3`(_0) {
0:
  %% beam_type_SUITE.erl:1565
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:abs _0

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    _2 => number(0, '+inf')
  %% Unique:
  %%    _2
  _10 = bif:'=:=' _2, `-0.0`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% beam_type_SUITE.erl:1565
  %% Unique:
  %%    _2
  _3 = match_fail `badmatch`, _2

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_type_SUITE.erl:1568
%% Counter = 14
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion_4`(_0) {
0:
  %% beam_type_SUITE.erl:1568
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:'band' _0, `1`

  %% Unique:
  %%    _1
  _10 = succeeded:guard _1
  br _10, ^11, ^8

11:
  %% Argument types:
  %%    _1 => 0..1
  %% Unique:
  %%    _1
  _12 = bif:'<' `-0.0`, _1
  br _12, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% beam_type_SUITE.erl:1568
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-float_confusion_4/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _13 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_type_SUITE.erl:1571
%% Counter = 18
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion_5`() {
0:
  %% Result type:
  %%    'ok'
  _4 = make_fun (`'-float_confusion_5/0-fun-0-'`/0)

  %% Argument types:
  %%    _4 => fun(() -> 'ok')
  %% Aliased:
  %%    _4
  _11 = bif:'>' _4, `ok`
  br _11, ^11, ^10

11:
  br ^9

10:
  br ^9

9:
  _1 = phi { `-2147483648`, ^10 }, { `2147483647.0`, ^11 }

  %% beam_type_SUITE.erl:1582
  %% Argument types:
  %%    _1 => number(-2147483648, 2147483647)
  %% Unique:
  %%    _1
  _5 = bif:'*' _1, `0`

  %% Unique:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _5 => number(0)
  %% Unique:
  %%    _5
  _16 = bif:'=:=' _5, `-0.0`
  br _16, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_type_SUITE.erl:1572
  %% Unique:
  %%    _5
  _6 = match_fail `badmatch`, _5

  %% Unique:
  %%    _6
  _17 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_type_SUITE.erl:1587
%% Counter = 57
%% bs_ensure_opt: true
function `beam_type_SUITE`:`float_confusion_6`() {
0:
  %% beam_type_SUITE.erl:1590
  _22 = call (`erts_internal`:`mc_iterator`/1), `ok`

  %% Aliased:
  %%    _22
  _49 = succeeded:body _22
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _53 = bif:'=:=' _22, `[]`
  br _53, ^53, ^55

53:
  %% beam_type_SUITE.erl:1590
  _36 = call (`erlang`:`error`/1), `{bad_generator,ok}`

  %% Aliased:
  %%    _36
  _52 = succeeded:body _36
  br ^1

55:
  %% beam_type_SUITE.erl:1588
  _0 = bs_init_writable `256`

  %% beam_type_SUITE.erl:1588
  %% Result type:
  %%    bitstring(256,appendable)
  %% Aliased:
  %%    _22
  %% Unique:
  %%    _0
  _46 = call (`'-float_confusion_6/0-lbc$^0/2-0-'`/2), _22, _0

  %% Unique:
  %%    _46
  _54 = succeeded:body _46
  br _54, ^54, ^1

54:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _46
  ret _46

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% beam_type_SUITE.erl:1601
%% Counter = 29
%% bs_ensure_opt: true
function `beam_type_SUITE`:`cover_convert_ext`(_0) {
0:
  %% beam_type_SUITE.erl:1606
  _5 = call (`beam_types`:`convert_ext`/2), `2`, `<<15,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1>>`

  %% Aliased:
  %%    _5
  _19 = succeeded:body _5
  br _19, ^19, ^1

19:
  %% beam_type_SUITE.erl:1606
  %% Aliased:
  %%    _5
  _14 = call (`beam_types`:`decode_ext`/1), _5

  %% Aliased:
  %%    _14
  _20 = succeeded:body _14
  br _20, ^20, ^1

20:
  %% beam_type_SUITE.erl:1611
  _10 = call (`beam_types`:`convert_ext`/2), `1`, `<<15,255,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,15,255,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,
   10>>`

  %% Aliased:
  %%    _10
  _21 = succeeded:body _10
  br _21, ^21, ^1

21:
  %% beam_type_SUITE.erl:1611
  %% Aliased:
  %%    _10
  _15 = call (`beam_types`:`decode_ext`/1), _10

  %% Aliased:
  %%    _15
  _22 = succeeded:body _15
  br _22, ^22, ^1

22:
  %% beam_type_SUITE.erl:1613
  _13 = call (`beam_types`:`convert_ext`/2), `0`, `<<>>`

  %% Aliased:
  %%    _13
  _23 = succeeded:body _13
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _27 = bif:'=:=' _13, `none`
  br _27, ^26, ^25

26:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% beam_type_SUITE.erl:1613
  %% Aliased:
  %%    _13
  _16 = match_fail `badmatch`, _13

  %% Unique:
  %%    _16
  _28 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_type_SUITE.erl:1622
%% Counter = 4
%% bs_ensure_opt: true
function `beam_type_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_type_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_type_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_type_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_type_SUITE.erl:1588
%% Counter = 84
%% bs_ensure_opt: true
%% Parameters
%%    _12 =>
%%     bitstring(256,appendable)
function `beam_type_SUITE`:`'-float_confusion_6/0-lbc$^0/2-0-'`(_13, _12) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _72 = bif:is_tuple _13
  br _72, ^72, ^49

72:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _73 = bif:tuple_size _13

  %% Argument types:
  %%    _73 => 0..16777215
  %% Unique:
  %%    _73
  _74 = bif:'=:=' _73, `3`
  br _74, ^71, ^78

71:
  %% Argument types:
  %%    _13 => {any(), any(), any()}
  %% Aliased:
  %%    _13
  _31 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _67 = bif:is_tuple _31
  br _67, ^67, ^50

67:
  %% Argument types:
  %%    _31 => {...}
  %% Aliased:
  %%    _31
  _68 = bif:tuple_size _31

  %% Argument types:
  %%    _68 => 0..16777215
  %% Unique:
  %%    _68
  _69 = bif:'=:=' _68, `1`
  br _69, ^66, ^50

66:
  %% Argument types:
  %%    _31 => {any()}
  %% Aliased:
  %%    _31
  _33 = get_tuple_element _31, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _54 = bif:'=:=' _33, `{}`
  br _54, ^54, ^53

54:
  br ^51

53:
  switch _33, ^56, [
    { `0.0`, ^57 },
    { `-0.0`, ^57 }
  ]

57:
  br ^51

51:
  _11 = phi { `{}`, ^54 }, { `[]`, ^57 }

  %% beam_type_SUITE.erl:1591
  %% Unique:
  %%    _11
  _41 = match_fail `bad_filter`, _11

  %% Unique:
  %%    _41
  _64 = succeeded:body _41
  br ^1

56:
  %% beam_type_SUITE.erl:1591
  %% Aliased:
  %%    _33
  _39 = match_fail `else_clause`, _33

  %% Unique:
  %%    _39
  _58 = succeeded:body _39
  br ^1

50:
  %% Argument types:
  %%    _13 => {any(), any(), any()}
  %% Aliased:
  %%    _13
  _30 = get_tuple_element _13, `2`

  %% beam_type_SUITE.erl:1590
  %% Result type:
  %%    bitstring(256,appendable)
  %% Aliased:
  %%    _30
  %% Unique:
  %%    _12
  _43 = call (`'-float_confusion_6/0-lbc$^0/2-0-'`/2), _30, _12

  %% Unique:
  %%    _43
  _70 = succeeded:body _43
  br _70, ^70, ^1

70:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _43
  ret _43

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _76 = bif:'=:=' _13, `none`
  br _76, ^75, ^78

75:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _12
  ret _12

78:
  %% beam_type_SUITE.erl:1590
  %% Aliased:
  %%    _13
  _28 = call (`erts_internal`:`mc_refill`/1), _13

  %% Aliased:
  %%    _28
  _79 = succeeded:body _28
  br _79, ^79, ^1

79:
  %% beam_type_SUITE.erl:1590
  %% Result type:
  %%    bitstring(256,appendable)
  %% Aliased:
  %%    _28
  %% Unique:
  %%    _12
  _44 = call (`'-float_confusion_6/0-lbc$^0/2-0-'`/2), _28, _12

  %% Unique:
  %%    _44
  _80 = succeeded:body _44
  br _80, ^80, ^1

80:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _44
  ret _44

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% beam_type_SUITE.erl:1574
%% Counter = 8
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-float_confusion_5/0-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1558
%% Counter = 77
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-float_confusion_2/0-lc$^0/1-0-'`(_8) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _52 = bif:is_tuple _8
  br _52, ^52, ^32

52:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _53 = bif:tuple_size _8

  %% Argument types:
  %%    _53 => 0..16777215
  %% Unique:
  %%    _53
  _54 = bif:'=:=' _53, `3`
  br _54, ^75, ^31

75:
  br ^76

76:
  _36 = new_try_tag `'catch'`
  br _36, ^34, ^35

34:
  %% beam_type_SUITE.erl:1559
  %% Result type:
  %%    none()
  _24 = call (`float_confusion_crash`/2), `ok`, `-1`

  %% Aliased:
  %%    _24
  _38 = succeeded:body _24
  br ^35

35:
  %% Unique:
  %%    _36
  _41 = landingpad `'catch'`, _36

  %% Aliased:
  %%    _41
  _39 = extract _41, `0`
  br ^33

33:
  %% Aliased:
  %%    _39
  %% Unique:
  %%    _36
  _7 = catch_end _36, _39

  %% beam_type_SUITE.erl:1559
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _7
  _20 = call (`float_confusion_crash`/2), _7, `-0.0`

  %% Aliased:
  %%    _20
  _43 = succeeded:body _20
  br ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _56 = bif:'=:=' _8, `none`
  br _56, ^55, ^31

55:
  %% Result type:
  %%    nil()
  ret `[]`

31:
  %% beam_type_SUITE.erl:1558
  %% Aliased:
  %%    _8
  _16 = call (`erts_internal`:`mc_refill`/1), _8

  %% Aliased:
  %%    _16
  _57 = succeeded:body _16
  br _57, ^57, ^1

57:
  %% beam_type_SUITE.erl:1558
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _16
  _28 = call (`'-float_confusion_2/0-lc$^0/1-0-'`/1), _16

  %% Unique:
  %%    _28
  _58 = succeeded:body _28
  br _58, ^58, ^1

58:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _28
  ret _28

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_type_SUITE.erl:1525
%% Counter = 49
%% bs_ensure_opt: true
%% Parameters
%%    _2 =>
%%     bs_matchable(8)
%%     accepts_match_context
function `beam_type_SUITE`:`'-gh_7197/0-lc$^0/1-0-'`(_2) {
0:
  %% Argument types:
  %%    _2 => bs_matchable(8)
  %% Aliased:
  %%    _2
  %% Anno: #{accepts_match_contexts => true}
  _15 = bs_start_match `new`, _2
  _47 = bs_ensure _15, `8`, `1`
  _48 = succeeded:guard _47
  br _48, ^46, ^33

46:
  %% beam_type_SUITE.erl:1525
  %% Aliased:
  %%    _15
  %% Anno: #{ensured => true}
  _16 = bs_match `skip`, _47, `integer`, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _16
  _30 = succeeded:guard _16
  br _30, ^43, ^33

43:
  %% beam_type_SUITE.erl:1525
  %% Result type:
  %%    list('ok')
  %% Aliased:
  %%    _16
  %% Anno: #{bsm_info => context_reused}
  _4 = call (`'-gh_7197/0-lc$^0/1-0-'`/1), _16

  %% Unique:
  %%    _4
  _32 = succeeded:body _4
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _4 => list('ok')
  %% Unique:
  %%    _4
  _24 = put_list `ok`, _4
  %% Result type:
  %%    nonempty_list('ok')
  %% Unique:
  %%    _24
  ret _24

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41

33:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:1520
%% Counter = 60
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     bs_matchable(8)
%%     accepts_match_context
function `beam_type_SUITE`:`'-gh_7179/0-lc$^0/1-0-'`(_3) {
0:
  %% Argument types:
  %%    _3 => bs_matchable(8)
  %% Aliased:
  %%    _3
  %% Anno: #{accepts_match_contexts => true}
  _21 = bs_start_match `new`, _3
  _58 = bs_ensure _21, `8`, `1`
  _59 = succeeded:guard _58
  br _59, ^57, ^44

57:
  %% beam_type_SUITE.erl:1520
  %% Aliased:
  %%    _21
  %% Anno: #{ensured => true}
  _22 = bs_match `skip`, _58, `integer`, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _22
  _41 = succeeded:guard _22
  br _41, ^54, ^44

54:
  %% beam_type_SUITE.erl:1520
  %% Result type:
  %%    list(0)
  %% Aliased:
  %%    _22
  %% Anno: #{bsm_info => context_reused}
  _5 = call (`'-gh_7179/0-lc$^0/1-0-'`/1), _22

  %% Unique:
  %%    _5
  _43 = succeeded:body _5
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _5 => list(0)
  %% Unique:
  %%    _5
  _35 = put_list `0`, _5
  %% Result type:
  %%    nonempty_list(0)
  %% Unique:
  %%    _35
  ret _35

1:
  _52 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _52

44:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:1512
%% Counter = 24
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-funs/1-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1483
%% Counter = 35
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-binary_unit_1/0-Foo/1-0-'`(_11) {
0:
  %% Result type:
  %%    bitstring(16)
  Foo = make_fun (`'-binary_unit_1/0-Foo/1-0-'`/1)

  %% beam_type_SUITE.erl:1484
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11, 
  %%    Foo
  _9 = call (`'-binary_unit_1/0-lc$^0/1-1-'`/3), _11, _11, Foo

  %% Unique:
  %%    _9
  _31 = succeeded:body _9
  br _31, ^31, ^1

31:
  %% beam_type_SUITE.erl:1484
  %% Argument types:
  %%    _9 => list(any())
  %% Unique:
  %%    _9
  I = bif:hd _9

  %% Aliased:
  %%    I
  _32 = succeeded:body I
  br _32, ^32, ^1

32:
  %% beam_type_SUITE.erl:1485
  %% Argument types:
  %%    
  %% Aliased:
  %%    I
  %% Anno: #{unit => 16}
  _28 = bs_create_bin `binary`, `[1]`, `<<0>>`, `all`, `integer`, `[1,{segment,2}]`, I, `8`

  %% Aliased:
  %%    _28
  _33 = succeeded:body _28
  br _33, ^33, ^1

33:
  %% Result type:
  %%    bitstring(16)
  %% Aliased:
  %%    _28
  ret _28

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_type_SUITE.erl:1484
%% Counter = 38
%% bs_ensure_opt: true
%% Parameters
%%    Foo =>
%%     fun((_) -> bitstring(16))
function `beam_type_SUITE`:`'-binary_unit_1/0-lc$^0/1-1-'`(_4, _11, Foo) {
0:
  %% Aliased:
  %%    _4
  _33 = is_nonempty_list _4
  br _33, ^33, ^31

33:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _17 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _16 = get_tl _4

  %% beam_type_SUITE.erl:1484
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11, 
  %%    _16, 
  %%    _17, 
  %%    Foo
  _26 = call (`'-binary_unit_1/0-lc$^1/1-2-'`/5), _11, _11, _16, _17, Foo

  %% Unique:
  %%    _26
  _32 = succeeded:body _26
  br _32, ^32, ^1

32:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _26
  ret _26

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _34 = bif:'=:=' _4, `[]`
  br _34, ^34, ^30

34:
  %% Result type:
  %%    nil()
  ret `[]`

30:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _15 = put_tuple `bad_generator`, _4

  %% beam_type_SUITE.erl:1484
  %% Unique:
  %%    _15
  _27 = call (`erlang`:`error`/1), _15

  %% Aliased:
  %%    _27
  _35 = succeeded:body _27
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% beam_type_SUITE.erl:1484
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    Foo =>
%%     fun((_) -> bitstring(16))
function `beam_type_SUITE`:`'-binary_unit_1/0-lc$^1/1-2-'`(_6, _11, _16, _17, Foo) {
0:
  %% Aliased:
  %%    _6
  _34 = is_nonempty_list _6
  br _34, ^34, ^29

34:
  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _20 = get_tl _6

  %% Argument types:
  %%    Foo => fun((_) -> bitstring(16))
  %% Aliased:
  %%    Foo
  _31 = bif:'>=' Foo, `ok`
  br _31, ^31, ^30

31:
  %% beam_type_SUITE.erl:1484
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11, 
  %%    _16, 
  %%    _17, 
  %%    _20, 
  %%    Foo
  _8 = call (`'-binary_unit_1/0-lc$^1/1-2-'`/5), _20, _11, _16, _17, Foo

  %% Unique:
  %%    _8
  _32 = succeeded:body _8
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _8 => list(any())
  %% Aliased:
  %%    _17
  %% Unique:
  %%    _8
  _23 = put_list _17, _8
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _23
  ret _23

30:
  %% beam_type_SUITE.erl:1484
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11, 
  %%    _16, 
  %%    _17, 
  %%    _20, 
  %%    Foo
  _24 = call (`'-binary_unit_1/0-lc$^1/1-2-'`/5), _20, _11, _16, _17, Foo

  %% Unique:
  %%    _24
  _33 = succeeded:body _24
  br _33, ^33, ^1

33:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _24
  ret _24

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _36 = bif:'=:=' _6, `[]`
  br _36, ^36, ^28

36:
  %% beam_type_SUITE.erl:1484
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _11, 
  %%    _16, 
  %%    Foo
  _22 = call (`'-binary_unit_1/0-lc$^0/1-1-'`/3), _16, _11, Foo

  %% Unique:
  %%    _22
  _35 = succeeded:body _22
  br _35, ^35, ^1

35:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _22
  ret _22

28:
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _19 = put_tuple `bad_generator`, _6

  %% beam_type_SUITE.erl:1484
  %% Unique:
  %%    _19
  _25 = call (`erlang`:`error`/1), _19

  %% Aliased:
  %%    _25
  _37 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_type_SUITE.erl:1462
%% Counter = 74
%% bs_ensure_opt: true
%% Parameters
%%    _8 =>
%%     bitstring(8)
%%     accepts_match_context
function `beam_type_SUITE`:`'-infer_relops_4/0-lc$^1/1-0-'`(_8) {
0:
  %% Argument types:
  %%    _8 => bitstring(8)
  %% Aliased:
  %%    _8
  %% Anno: #{accepts_match_contexts => true}
  _19 = bs_start_match `new`, _8
  _72 = bs_ensure _19, `8`, `1`
  _73 = succeeded:guard _72
  br _73, ^71, ^58

71:
  %% beam_type_SUITE.erl:1460
  %% Argument types:
  %%    _72 => bs_context(8)
  %% Aliased:
  %%    _19
  %% Anno: #{ensured => true}
  _20 = bs_match `integer`, _72, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _20
  _55 = succeeded:guard _20
  br _55, ^55, ^58

55:
  %% Aliased:
  %%    _20
  _21 = bs_extract _20

  %% beam_type_SUITE.erl:1460
  %% Aliased:
  %%    _20
  _22 = bs_get_tail _20

  %% beam_type_SUITE.erl:1463
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21, 
  %%    _22
  %% Anno: #{bsm_info =>
                 {no_match_on_entry,
                     {b_local,{b_literal,'-infer_relops_4/0-lc$^2/1-1-'},3}}}
  _49 = call (`'-infer_relops_4/0-lc$^2/1-1-'`/3), `<<>>`, _21, _22

  %% Unique:
  %%    _49
  _57 = succeeded:body _49
  br _57, ^57, ^1

57:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _49
  ret _49

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66

58:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:1463
%% Counter = 80
%% bs_ensure_opt: true
%% Parameters
%%    _10 =>
%%     bs_matchable(1)
%%     accepts_match_context
%%    _21 =>
%%     0..255
%%    _23 =>
%%     bitstring(8)
function `beam_type_SUITE`:`'-infer_relops_4/0-lc$^2/1-1-'`(_10, _21, _23) {
0:
  %% Argument types:
  %%    _10 => bs_matchable(1)
  %% Aliased:
  %%    _10
  %% Anno: #{accepts_match_contexts => true}
  _28 = bs_start_match `new`, _10

  %% beam_type_SUITE.erl:1460
  %% Aliased:
  %%    _28
  %% Unique:
  %%    _21
  _29 = bs_match `skip`, _28, `integer`, `[unsigned,big]`, _21, `1`

  %% Aliased:
  %%    _29
  _53 = succeeded:guard _29
  br _53, ^55, ^77

55:
  %% beam_type_SUITE.erl:1463
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _21, 
  %%    _23, 
  %%    _29
  %% Anno: #{bsm_info => context_reused}
  _47 = call (`'-infer_relops_4/0-lc$^2/1-1-'`/3), _29, _21, _23

  %% Unique:
  %%    _47
  _65 = succeeded:body _47
  br _65, ^65, ^1

65:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _47
  ret _47

77:
  %% beam_type_SUITE.erl:1462
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _23
  _41 = call (`'-infer_relops_4/0-lc$^1/1-0-'`/1), _23

  %% Unique:
  %%    _41
  _67 = succeeded:body _41
  br _67, ^67, ^1

67:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _41
  ret _41

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% beam_type_SUITE.erl:1445
%% Counter = 42
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-infer_relops_1/0-lc$^0/1-0-'`(_4) {
0:
  %% Aliased:
  %%    _4
  _37 = is_nonempty_list _4
  br _37, ^37, ^35

37:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _21 = get_tl _4

  %% beam_type_SUITE.erl:1445
  %% Result type:
  %%    list(0)
  %% Aliased:
  %%    _21
  _6 = call (`'-infer_relops_1/0-lc$^0/1-0-'`/1), _21

  %% Unique:
  %%    _6
  _36 = succeeded:body _6
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _6 => list(0)
  %% Unique:
  %%    _6
  _30 = put_list `0`, _6
  %% Result type:
  %%    nonempty_list(0)
  %% Unique:
  %%    _30
  ret _30

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _38 = bif:'=:=' _4, `[]`
  br _38, ^38, ^34

38:
  %% Result type:
  %%    nil()
  ret `[]`

34:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _20 = put_tuple `bad_generator`, _4

  %% beam_type_SUITE.erl:1445
  %% Unique:
  %%    _20
  _31 = call (`erlang`:`error`/1), _20

  %% Aliased:
  %%    _31
  _39 = succeeded:body _31
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% beam_type_SUITE.erl:1381
%% Counter = 260
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-7-'`(_81) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1380
%% Counter = 259
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-6-'`(_76) {
0:
  %% beam_type_SUITE.erl:1380
  _255 = call (`erlang`:`error`/1), `a`

  %% Aliased:
  %%    _255
  _258 = succeeded:body _255
  br ^1

1:
  _256 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _256
}

%% beam_type_SUITE.erl:1379
%% Counter = 256
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-5-'`(_72) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1363
%% Counter = 245
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-4-'`(_53, _52) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1361
%% Counter = 242
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-3-'`(_44, _43) {
0:
  %% beam_type_SUITE.erl:1361
  _238 = call (`erlang`:`error`/1), `crash`

  %% Aliased:
  %%    _238
  _241 = succeeded:body _238
  br ^1

1:
  _239 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _239
}

%% beam_type_SUITE.erl:1360
%% Counter = 238
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-2-'`(_37, _36) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_type_SUITE.erl:1344
%% Counter = 223
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-1-'`(_13, _12, _11) {
0:
  %% Result type:
  %%    'true'
  ret `true`
}

%% beam_type_SUITE.erl:1339
%% Counter = 219
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_maps_functions/1-fun-0-'`(_2, _1) {
0:
  %% Result type:
  %%    'true'
  ret `true`
}

%% beam_type_SUITE.erl:1140
%% Counter = 114
%% bs_ensure_opt: true
%% Parameters
%%    _26 =>
%%     bitstring(256,appendable)
function `beam_type_SUITE`:`'-type_subtraction_4/1-lbc$^0/2-0-'`(_27, _26) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _101 = bif:is_tuple _27
  br _101, ^101, ^77

101:
  %% Argument types:
  %%    _27 => {...}
  %% Aliased:
  %%    _27
  _102 = bif:tuple_size _27

  %% Argument types:
  %%    _102 => 0..16777215
  %% Unique:
  %%    _102
  _103 = bif:'=:=' _102, `3`
  br _103, ^100, ^107

100:
  %% Argument types:
  %%    _27 => {any(), any(), any()}
  %% Aliased:
  %%    _27
  _57 = get_tuple_element _27, `0`

  %% Aliased:
  %%    _57
  _113 = bif:'=:=' _57, `true`
  br _113, ^94, ^79

94:
  %% beam_type_SUITE.erl:1143
  _70 = match_fail `bad_filter`, `ok`

  %% Unique:
  %%    _70
  _98 = succeeded:body _70
  br ^1

79:
  %% beam_type_SUITE.erl:1143
  _68 = match_fail `try_clause`, `ok`

  %% Unique:
  %%    _68
  _92 = succeeded:body _68
  br ^1

77:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _105 = bif:'=:=' _27, `none`
  br _105, ^104, ^107

104:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _26
  ret _26

107:
  %% beam_type_SUITE.erl:1142
  %% Aliased:
  %%    _27
  _53 = call (`erts_internal`:`mc_refill`/1), _27

  %% Aliased:
  %%    _53
  _108 = succeeded:body _53
  br _108, ^108, ^1

108:
  %% beam_type_SUITE.erl:1142
  %% Result type:
  %%    bitstring(256,appendable)
  %% Aliased:
  %%    _53
  %% Unique:
  %%    _26
  _72 = call (`'-type_subtraction_4/1-lbc$^0/2-0-'`/2), _53, _26

  %% Unique:
  %%    _72
  _109 = succeeded:body _72
  br _109, ^109, ^1

109:
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _72
  ret _72

1:
  _74 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _74
}

%% beam_type_SUITE.erl:999
%% Counter = 222
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-7-'`(_85, _84) {
0:
  %% beam_type_SUITE.erl:999
  _218 = call (`erlang`:`error`/1), `bad`

  %% Aliased:
  %%    _218
  _221 = succeeded:body _218
  br ^1

1:
  _219 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _219
}

%% beam_type_SUITE.erl:997
%% Counter = 219
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-6-'`(_76, _75) {
0:
  %% beam_type_SUITE.erl:997
  _215 = call (`erlang`:`error`/1), `bad`

  %% Aliased:
  %%    _215
  _218 = succeeded:body _215
  br ^1

1:
  _216 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _216
}

%% beam_type_SUITE.erl:995
%% Counter = 216
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-5-'`(_69, _68) {
0:
  %% beam_type_SUITE.erl:995
  _212 = call (`erlang`:`error`/1), `bad`

  %% Aliased:
  %%    _212
  _215 = succeeded:body _212
  br ^1

1:
  _213 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _213
}

%% beam_type_SUITE.erl:980
%% Counter = 211
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-4-'`(_52, _51) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _51, 
  %%    _52
  _208 = put_tuple _52, _51
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _208
  ret _208
}

%% beam_type_SUITE.erl:958
%% Counter = 194
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-3-'`(_24, _23) {
0:
  %% Result type:
  %%    'foo'
  ret `foo`
}

%% beam_type_SUITE.erl:957
%% Counter = 194
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-2-'`(_17, _16) {
0:
  %% Result type:
  %%    'foo'
  ret `foo`
}

%% beam_type_SUITE.erl:954
%% Counter = 192
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-1-'`(_9, _8) {
0:
  %% Result type:
  %%    'foo'
  ret `foo`
}

%% beam_type_SUITE.erl:953
%% Counter = 192
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-cover_lists_functions/1-fun-0-'`(_2, _1) {
0:
  %% Result type:
  %%    'foo'
  ret `foo`
}

%% beam_type_SUITE.erl:849
%% Counter = 48
%% bs_ensure_opt: true
%% Parameters
%%    _6 =>
%%     bitstring(256,appendable)
%%     accepts_match_context
function `beam_type_SUITE`:`'-float_overflow_3/0-lc$^0/1-0-'`(_6) {
0:
  %% beam_type_SUITE.erl:850
  %% Argument types:
  %%    
  _1 = bif:map_size `#{}`

  %% beam_type_SUITE.erl:850
  %% Argument types:
  %%    _1 => 0..288230376151711743
  %% Unique:
  %%    _1
  %% Anno: #{float_op => [convert,float]}
  _2 = bif:'+' _1, `1.0`

  %% Unique:
  %%    _2
  _28 = succeeded:guard _2
  br _28, ^28, ^25

28:
  %% Argument types:
  %%    _2 => float()
  %% Unique:
  %%    _2
  _29 = bif:'>=' `359538626972463141629054847463408713596141135051689993197834953606314521560057077521179117265533756343080917907028764928468642653778928365536935093407075033972099821153102564152490980180778657888151737016910267884609166473806445896331617118664246696549595652408289446337476354361838599762500808052368249716736`, _2
  br _29, ^29, ^25

29:
  br ^24

25:
  br ^24

24:
  _5 = phi { `[]`, ^25 }, { `[0]`, ^29 }

  %% beam_type_SUITE.erl:850
  %% Unique:
  %%    _5
  _18 = match_fail `bad_filter`, _5

  %% Unique:
  %%    _18
  _36 = succeeded:body _18
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_type_SUITE.erl:750
%% Counter = 61
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'false'} | {'true'}
%%    _10 =>
%%     nil()
%%    _20 =>
%%     'false' | 'true'
function `beam_type_SUITE`:`'-gh_6458/1-lc$^0/1-0-'`(_10, _0, _20) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:697
%% Counter = 189
%% bs_ensure_opt: true
%% Parameters
%%    _27 =>
%%     nil()
function `beam_type_SUITE`:`'-tuple/1-lc$^2/1-2-'`(_27) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:696
%% Counter = 165
%% bs_ensure_opt: true
%% Parameters
%%    _14 =>
%%     nil()
function `beam_type_SUITE`:`'-tuple/1-lc$^1/1-1-'`(_14) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:695
%% Counter = 165
%% bs_ensure_opt: true
%% Parameters
%%    _6 =>
%%     nil()
function `beam_type_SUITE`:`'-tuple/1-lc$^0/1-0-'`(_6) {
0:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% beam_type_SUITE.erl:522
%% Counter = 41
%% bs_ensure_opt: true
function `beam_type_SUITE`:`'-do_booleans_8/1-lc$^0/1-0-'`(_4) {
0:
  %% Aliased:
  %%    _4
  _36 = is_nonempty_list _4
  br _36, ^36, ^34

36:
  %% Argument types:
  %%    _4 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _4
  _23 = get_tl _4

  %% beam_type_SUITE.erl:522
  %% Result type:
  %%    list('ok')
  %% Aliased:
  %%    _23
  _6 = call (`'-do_booleans_8/1-lc$^0/1-0-'`/1), _23

  %% Unique:
  %%    _6
  _35 = succeeded:body _6
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    _6 => list('ok')
  %% Unique:
  %%    _6
  _29 = put_list `ok`, _6
  %% Result type:
  %%    nonempty_list('ok')
  %% Unique:
  %%    _29
  ret _29

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _37 = bif:'=:=' _4, `[]`
  br _37, ^37, ^33

37:
  %% Result type:
  %%    nil()
  ret `[]`

33:
  %% Argument types:
  %%    _4 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _4
  _22 = put_tuple `bad_generator`, _4

  %% beam_type_SUITE.erl:522
  %% Unique:
  %%    _22
  _30 = call (`erlang`:`error`/1), _22

  %% Aliased:
  %%    _30
  _38 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% beam_type_SUITE.erl:501
%% Counter = 46
%% bs_ensure_opt: true
%% Parameters
%%    _7 =>
%%     {nonempty_improper_list(any(), any())}
function `beam_type_SUITE`:`'-do_booleans_6/3-lc$^0/1-0-'`(_7) {
0:
  %% Argument types:
  %%    _7 => {nonempty_improper_list(any(), any())}
  %% Unique:
  %%    _7
  _28 = put_tuple `bad_generator`, _7

  %% beam_type_SUITE.erl:501
  %% Unique:
  %%    _28
  _35 = call (`erlang`:`error`/1), _28

  %% Aliased:
  %%    _35
  _43 = succeeded:body _35
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}
