module beam_ssa_check_SUITE.
exports [{alias_checks,1},
         {all,0},
         {annotation_checks,1},
         {appendable_checks,1},
         {bs_size_unit_checks,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {module_info,0},
         {module_info,1},
         {no_reuse_hint_checks,1},
         {private_append_checks,1},
         {ret_annotation_checks,1},
         {sanity_checks,1},
         {suite,0},
         {tuple_inplace_checks,1}].
attributes [].

%% beam_ssa_check_SUITE.erl:41
%% Counter = 4
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_ssa_check_SUITE.erl:43
%% Counter = 4
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'post_ssa_opt_dynamic' | 'post_ssa_opt_static'})
  ret `[{group,post_ssa_opt_dynamic},{group,post_ssa_opt_static}]`
}

%% beam_ssa_check_SUITE.erl:46
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`groups`() {
0:
  %% beam_ssa_check_SUITE.erl:47
  _1 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _1
  _8 = succeeded:body _1
  br _8, ^8, ^1

8:
  %% beam_ssa_check_SUITE.erl:56
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _9 = succeeded:body _0
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `post_ssa_opt_dynamic`, _0, `[bs_size_unit_checks]`

  %% Argument types:
  %%    _2 => {'post_ssa_opt_dynamic', any(), nonempty_list('bs_size_unit_checks')}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _4 = put_tuple `post_ssa_opt_static`, _1, `[alias_checks,annotation_checks,appendable_checks,no_reuse_hint_checks,
  private_append_checks,ret_annotation_checks,sanity_checks,
  tuple_inplace_checks]`

  %% Argument types:
  %%    _4 => {'post_ssa_opt_static', any(), nonempty_list(atom())}
  %%    _3 => nonempty_list({'post_ssa_opt_dynamic', any(), nonempty_list('bs_size_unit_checks')})
  %% Unique:
  %%    _3, 
  %%    _4
  _5 = put_list _4, _3
  %% Result type:
  %%    nonempty_list({'post_ssa_opt_dynamic', any(), nonempty_list('bs_size_unit_checks')} | {'post_ssa_opt_static', any(), nonempty_list(atom())})
  %% Unique:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% beam_ssa_check_SUITE.erl:59
%% Counter = 6
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_ssa_check_SUITE.erl:60
  _2 = call (`test_lib`:`recompile`/1), `beam_ssa_check_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_ssa_check_SUITE.erl:63
%% Counter = 4
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_ssa_check_SUITE.erl:66
%% Counter = 23
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:'=:=' _0, `post_ssa_opt_dynamic`
  br _21, ^20, ^11

20:
  %% beam_ssa_check_SUITE.erl:67
  %% Aliased:
  %%    _1
  TargetDir = call (`dynamic_workdir`/1), _1

  %% Aliased:
  %%    TargetDir
  _12 = succeeded:body TargetDir
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    TargetDir
  _5 = put_list TargetDir, `[]`

  %% beam_ssa_check_SUITE.erl:68
  %% Unique:
  %%    _5
  _7 = call (`ct`:`log`/2), `"Creating working directory for generated test cases: ~p~n"`, _5

  %% Aliased:
  %%    _7
  _13 = succeeded:body _7
  br _13, ^13, ^1

13:
  %% beam_ssa_check_SUITE.erl:70
  %% Aliased:
  %%    TargetDir
  _6 = call (`file`:`make_dir`/1), TargetDir

  %% Aliased:
  %%    _6
  _14 = succeeded:body _6
  br _14, ^14, ^1

14:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _18 = bif:'=:=' _6, `ok`
  br _18, ^17, ^16

17:
  %% Aliased:
  %%    _1
  ret _1

16:
  %% beam_ssa_check_SUITE.erl:70
  %% Aliased:
  %%    _6
  _8 = match_fail `badmatch`, _6

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9

11:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_ssa_check_SUITE.erl:75
%% Counter = 27
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _25 = bif:'=:=' _0, `post_ssa_opt_dynamic`
  br _25, ^24, ^13

24:
  %% beam_ssa_check_SUITE.erl:76
  %% Aliased:
  %%    _1
  PrivDir = call (`proplists`:`get_value`/2), `priv_dir`, _1

  %% Aliased:
  %%    PrivDir
  _14 = succeeded:body PrivDir
  br _14, ^14, ^1

14:
  %% beam_ssa_check_SUITE.erl:77
  %% Aliased:
  %%    PrivDir
  TargetDir = call (`filename`:`join`/2), PrivDir, `"dynamic"`

  %% Aliased:
  %%    TargetDir
  _15 = succeeded:body TargetDir
  br _15, ^15, ^1

15:
  %% beam_ssa_check_SUITE.erl:78
  %% Aliased:
  %%    _1
  _6 = call (`proplists`:`get_bool`/2), `keep_generated`, _1

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  switch _6, ^18, [
    { `false`, ^22 },
    { `true`, ^21 }
  ]

21:
  %% Aliased:
  %%    _1
  ret _1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    TargetDir
  _7 = put_list TargetDir, `[]`

  %% beam_ssa_check_SUITE.erl:80
  %% Unique:
  %%    _7
  _8 = call (`ct`:`log`/2), `"Removing working directory for generated test cases: ~p~n"`, _7

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% beam_ssa_check_SUITE.erl:82
  %% Aliased:
  %%    TargetDir
  _9 = call (`file`:`del_dir_r`/1), TargetDir

  %% Aliased:
  %%    _9
  _20 = succeeded:body _9
  br _20, ^20, ^1

20:
  %% Aliased:
  %%    _9
  ret _9

18:
  %% beam_ssa_check_SUITE.erl:78
  %% Aliased:
  %%    _6
  _10 = match_fail `case_clause`, _6

  %% Unique:
  %%    _10
  _23 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11

13:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_ssa_check_SUITE.erl:89
%% Counter = 16
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`alias_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% beam_ssa_check_SUITE.erl:90
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `alias`, _0

  %% Aliased:
  %%    _2
  _11 = succeeded:body _2
  br _11, ^11, ^1

11:
  %% beam_ssa_check_SUITE.erl:91
  %% Aliased:
  %%    _0
  _3 = call (`run_post_ssa_opt`/2), `alias_non_convergence`, _0

  %% Aliased:
  %%    _3
  _12 = succeeded:body _3
  br _12, ^12, ^1

12:
  %% beam_ssa_check_SUITE.erl:92
  %% Aliased:
  %%    _0
  _4 = call (`run_post_ssa_opt`/2), `alias_chain`, _0

  %% Aliased:
  %%    _4
  _13 = succeeded:body _4
  br _13, ^13, ^1

13:
  %% beam_ssa_check_SUITE.erl:93
  %% Aliased:
  %%    _0
  _5 = call (`run_post_ssa_opt`/2), `ss_depth_limit`, _0

  %% Aliased:
  %%    _5
  _14 = succeeded:body _5
  br _14, ^14, ^1

14:
  %% Aliased:
  %%    _5
  ret _5

9:
  %% beam_ssa_check_SUITE.erl:89
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-alias_checks/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_ssa_check_SUITE.erl:95
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`annotation_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:96
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `annotations`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:95
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-annotation_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:98
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`appendable_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:99
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `appendable`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:98
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-appendable_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:101
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`bs_size_unit_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:102
  %% Aliased:
  %%    _0
  _2 = call (`gen_and_run_post_ssa_opt`/2), `bs_size_unit_checks`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:101
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bs_size_unit_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:104
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`no_reuse_hint_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:105
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `no_reuse_hint`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:104
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_reuse_hint_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:107
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`private_append_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:108
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `private_append`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:107
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-private_append_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:110
%% Counter = 18
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`tuple_inplace_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:is_list _0
  br _11, ^11, ^10

11:
  %% beam_ssa_check_SUITE.erl:111
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `tuple_inplace_checks`, _0

  %% Aliased:
  %%    _2
  _12 = succeeded:body _2
  br _12, ^12, ^1

12:
  %% beam_ssa_check_SUITE.erl:112
  %% Aliased:
  %%    _0
  _3 = call (`run_post_ssa_opt`/2), `tuple_inplace_abort0`, _0

  %% Aliased:
  %%    _3
  _13 = succeeded:body _3
  br _13, ^13, ^1

13:
  %% beam_ssa_check_SUITE.erl:113
  %% Aliased:
  %%    _0
  _4 = call (`run_post_ssa_opt`/2), `tuple_inplace_abort1`, _0

  %% Aliased:
  %%    _4
  _14 = succeeded:body _4
  br _14, ^14, ^1

14:
  %% beam_ssa_check_SUITE.erl:114
  %% Aliased:
  %%    _0
  _5 = call (`run_post_ssa_opt`/2), `tuple_inplace_abort2`, _0

  %% Aliased:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% beam_ssa_check_SUITE.erl:115
  %% Aliased:
  %%    _0
  _6 = call (`run_post_ssa_opt`/2), `tuple_inplace_abort3`, _0

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^16, ^1

16:
  %% Aliased:
  %%    _6
  ret _6

10:
  %% beam_ssa_check_SUITE.erl:110
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-tuple_inplace_checks/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_ssa_check_SUITE.erl:117
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`ret_annotation_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:118
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `ret_annotation`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:117
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-ret_annotation_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:120
%% Counter = 10
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`sanity_checks`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% beam_ssa_check_SUITE.erl:121
  %% Aliased:
  %%    _0
  _2 = call (`run_post_ssa_opt`/2), `sanity_checks`, _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% beam_ssa_check_SUITE.erl:120
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-sanity_checks/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:123
%% Counter = 7
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`dynamic_workdir`(_0) {
0:
  %% beam_ssa_check_SUITE.erl:124
  %% Aliased:
  %%    _0
  PrivDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    PrivDir
  _5 = succeeded:body PrivDir
  br _5, ^5, ^1

5:
  %% beam_ssa_check_SUITE.erl:125
  %% Aliased:
  %%    PrivDir
  _2 = call (`filename`:`join`/2), PrivDir, `"dynamic"`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_ssa_check_SUITE.erl:127
%% Counter = 11
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     maybe_improper_list(any(), any())
function `beam_ssa_check_SUITE`:`run_post_ssa_opt`(_0, _1) {
0:
  %% beam_ssa_check_SUITE.erl:128
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`atom_to_list`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% beam_ssa_check_SUITE.erl:128
  %% Aliased:
  %%    _2
  File = call (`erlang`:`'++'`/2), _2, `".erl"`

  %% beam_ssa_check_SUITE.erl:130
  %% Aliased:
  %%    _1
  DataDir = call (`proplists`:`get_value`/2), `data_dir`, _1

  %% Aliased:
  %%    DataDir
  _8 = succeeded:body DataDir
  br _8, ^8, ^1

8:
  %% beam_ssa_check_SUITE.erl:131
  %% Aliased:
  %%    DataDir, 
  %%    File
  Source = call (`filename`:`join`/2), DataDir, File

  %% Aliased:
  %%    Source
  _9 = succeeded:body Source
  br _9, ^9, ^1

9:
  %% beam_ssa_check_SUITE.erl:132
  %% Aliased:
  %%    _1, 
  %%    Source
  _3 = call (`run_checks`/3), Source, `post_ssa_opt`, _1

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Aliased:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_ssa_check_SUITE.erl:134
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     'post_ssa_opt'
%%    _2 =>
%%     maybe_improper_list(any(), any())
function `beam_ssa_check_SUITE`:`run_checks`(_0, _1, _2) {
0:
  %% beam_ssa_check_SUITE.erl:136
  %% Aliased:
  %%    _0
  _13 = call (`compile`:`file`/2), _0, `[binary,deterministic,{check_ssa,post_ssa_opt},report_errors]`

  %% Aliased:
  %%    _13
  _21 = succeeded:body _13
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _28 = bif:is_tuple _13
  br _28, ^28, ^24

28:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _30 = is_tagged_tuple _13, `3`, `ok`
  br _30, ^25, ^23

25:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _33 = bif:'=:=' _13, `error`
  br _33, ^32, ^23

32:
  %% beam_ssa_check_SUITE.erl:138
  _17 = call (`ct`:`fail`/1), `{unexpected_error,"SSA check failed"}`

  %% Aliased:
  %%    _17
  _31 = succeeded:body _17
  br _31, ^31, ^1

31:
  %% Aliased:
  %%    _17
  ret _17

23:
  %% beam_ssa_check_SUITE.erl:136
  %% Aliased:
  %%    _13
  _18 = match_fail `case_clause`, _13

  %% Unique:
  %%    _18
  _34 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_ssa_check_SUITE.erl:141
%% Counter = 81
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'bs_size_unit_checks'
%%    _1 =>
%%     maybe_improper_list(any(), any())
function `beam_ssa_check_SUITE`:`gen_and_run_post_ssa_opt`(_0, _1) {
0:
  %% beam_ssa_check_SUITE.erl:145
  %% Aliased:
  %%    _1
  _6 = call (`proplists`:`get_value`/2), `data_dir`, _1

  %% Aliased:
  %%    _6
  _41 = succeeded:body _6
  br _41, ^42, ^1

42:
  %% beam_ssa_check_SUITE.erl:145
  %% Aliased:
  %%    _6
  GenFilename = call (`filename`:`join`/2), _6, `"gen_bs_size_unit_checks.erl"`

  %% Aliased:
  %%    GenFilename
  _43 = succeeded:body GenFilename
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    GenFilename
  _21 = put_list GenFilename, `[]`

  %% beam_ssa_check_SUITE.erl:147
  %% Unique:
  %%    _21
  _31 = call (`ct`:`log`/2), `"Compiling generator ~s~n"`, _21

  %% Aliased:
  %%    _31
  _44 = succeeded:body _31
  br _44, ^44, ^1

44:
  %% beam_ssa_check_SUITE.erl:148
  %% Aliased:
  %%    GenFilename
  _22 = call (`compile`:`file`/2), GenFilename, `[binary]`

  %% Aliased:
  %%    _22
  _45 = succeeded:body _22
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _74 = is_tagged_tuple _22, `3`, `ok`
  br _74, ^71, ^47

71:
  %% Argument types:
  %%    _22 => {'ok', any(), any()}
  %% Aliased:
  %%    _22
  _24 = get_tuple_element _22, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _48 = bif:'=:=' _24, `gen_bs_size_unit_checks`
  br _48, ^48, ^47

48:
  %% Argument types:
  %%    _22 => {'ok', 'gen_bs_size_unit_checks', any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `2`

  %% beam_ssa_check_SUITE.erl:149
  %% Aliased:
  %%    _23, 
  %%    GenFilename
  _26 = call (`code`:`load_binary`/3), `gen_bs_size_unit_checks`, GenFilename, _23

  %% Aliased:
  %%    _26
  _49 = succeeded:body _26
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _67 = is_tagged_tuple _26, `2`, `module`
  br _67, ^64, ^51

64:
  %% Argument types:
  %%    _26 => {'module', any()}
  %% Aliased:
  %%    _26
  _27 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _52 = bif:'=:=' _27, `gen_bs_size_unit_checks`
  br _52, ^52, ^51

52:
  %% beam_ssa_check_SUITE.erl:150
  %% Aliased:
  %%    _1
  _11 = call (`dynamic_workdir`/1), _1

  %% Aliased:
  %%    _11
  _53 = succeeded:body _11
  br _53, ^54, ^1

54:
  %% beam_ssa_check_SUITE.erl:150
  %% Aliased:
  %%    _11
  TargetFileName = call (`filename`:`join`/2), _11, `"bs_size_unit_checks.erl"`

  %% Aliased:
  %%    TargetFileName
  _55 = succeeded:body TargetFileName
  br _55, ^55, ^1

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    TargetFileName
  _29 = put_list TargetFileName, `[]`

  %% beam_ssa_check_SUITE.erl:151
  %% Unique:
  %%    _29
  _32 = call (`ct`:`log`/2), `"Generating ~s~n"`, _29

  %% Aliased:
  %%    _32
  _56 = succeeded:body _32
  br _56, ^56, ^1

56:
  %% beam_ssa_check_SUITE.erl:152
  %% Aliased:
  %%    _1, 
  %%    TargetFileName
  _30 = call (`gen_bs_size_unit_checks`:`generate`/2), TargetFileName, _1

  %% Aliased:
  %%    _30
  _57 = succeeded:body _30
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _62 = bif:'=:=' _30, `ok`
  br _62, ^61, ^59

61:
  %% beam_ssa_check_SUITE.erl:153
  %% Aliased:
  %%    _1, 
  %%    TargetFileName
  _33 = call (`run_checks`/3), TargetFileName, `post_ssa_opt`, _1

  %% Aliased:
  %%    _33
  _60 = succeeded:body _33
  br _60, ^60, ^1

60:
  %% Aliased:
  %%    _33
  ret _33

59:
  %% beam_ssa_check_SUITE.erl:152
  %% Aliased:
  %%    _30
  _34 = match_fail `badmatch`, _30

  %% Unique:
  %%    _34
  _63 = succeeded:body _34
  br ^1

51:
  %% beam_ssa_check_SUITE.erl:149
  %% Aliased:
  %%    _26
  _35 = match_fail `badmatch`, _26

  %% Unique:
  %%    _35
  _70 = succeeded:body _35
  br ^1

47:
  %% beam_ssa_check_SUITE.erl:148
  %% Aliased:
  %%    _22
  _36 = match_fail `badmatch`, _22

  %% Unique:
  %%    _36
  _77 = succeeded:body _36
  br ^1

1:
  _37 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _37
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_ssa_check_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_ssa_check_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_ssa_check_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}
