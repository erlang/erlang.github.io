module bif_SUITE.
exports [{all,0},
         {beam_validator,1},
         {cover_safe_and_pure_bifs,1},
         {cover_trim,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {head_tail,1},
         {init_per_group,2},
         {init_per_suite,1},
         {min_max,1},
         {module_info,0},
         {module_info,1},
         {suite,0},
         {trunc_and_friends,1},
         {unsafe_get_list,1}].
attributes [].

%% bif_SUITE.erl:32
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% bif_SUITE.erl:35
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% bif_SUITE.erl:38
%% Counter = 7
%% bs_ensure_opt: true
function `bif_SUITE`:`groups`() {
0:
  %% bif_SUITE.erl:39
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[beam_validator,unsafe_get_list,trunc_and_friends,cover_safe_and_pure_bifs,
  cover_trim,head_tail,min_max]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% bif_SUITE.erl:49
%% Counter = 8
%% bs_ensure_opt: true
function `bif_SUITE`:`init_per_suite`(_0) {
0:
  %% bif_SUITE.erl:50
  %% Aliased:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% bif_SUITE.erl:51
  _3 = call (`test_lib`:`recompile`/1), `bif_SUITE`

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Aliased:
  %%    _0
  ret _0

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% bif_SUITE.erl:54
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% bif_SUITE.erl:57
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% bif_SUITE.erl:60
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% bif_SUITE.erl:63
%% Counter = 13
%% bs_ensure_opt: true
function `bif_SUITE`:`unsafe_get_list`(_0) {
0:
  %% bif_SUITE.erl:64
  _1 = call (`id`/1), `3`

  %% Aliased:
  %%    _1
  _7 = succeeded:body _1
  br _7, ^7, ^1

7:
  %% bif_SUITE.erl:64
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Aliased:
  %%    _1
  _3 = call (`create_rows`/1), _1

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    _3 => nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _3
  _11 = bif:'=:=' _3, `[[1],[1],[1]]`
  br _11, ^11, ^10

11:
  %% Result type:
  %%    'ok'
  ret `ok`

10:
  %% bif_SUITE.erl:64
  %% Unique:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% bif_SUITE.erl:67
%% Counter = 6
%% bs_ensure_opt: true
function `bif_SUITE`:`create_rows`(_0) {
0:
  %% bif_SUITE.erl:67
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Aliased:
  %%    _0
  _2 = call (`create_rows`/2), _0, `[[1]]`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% bif_SUITE.erl:69
%% Counter = 40
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     nonempty_list(nonempty_list(1))
function `bif_SUITE`:`create_rows`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _23 = bif:'=:=' _0, `1`
  br _23, ^22, ^36

22:
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _1
  ret _1

36:
  %% Argument types:
  %%    _1 => nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _1
  _10 = get_hd _1

  %% Argument types:
  %%    _10 => nonempty_list(1)
  %% Unique:
  %%    _10
  _11 = get_tl _10

  %% bif_SUITE.erl:73
  %% Result type:
  %%    list(1)
  %% Unique:
  %%    _10, 
  %%    _11
  _13 = call (`first`/2), _11, _10

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _13 => list(1)
  %% Unique:
  %%    _13
  _32 = bif:'=:=' _13, `[]`
  br _32, ^32, ^29

32:
  %% bif_SUITE.erl:74
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _4 = bif:'-' _0, `1`

  %% Unique:
  %%    _4
  _30 = succeeded:body _4
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _1 => nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _1
  _14 = put_list `[1]`, _1

  %% bif_SUITE.erl:74
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _4, 
  %%    _14
  _15 = call (`create_rows`/2), _4, _14

  %% Unique:
  %%    _15
  _31 = succeeded:body _15
  br _31, ^31, ^1

31:
  %% Result type:
  %%    nonempty_list(nonempty_list(1))
  %% Unique:
  %%    _15
  ret _15

29:
  %% bif_SUITE.erl:73
  %% Unique:
  %%    _13
  _16 = match_fail `badmatch`, _13

  %% Unique:
  %%    _16
  _33 = succeeded:body _16
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% bif_SUITE.erl:76
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(1)
%%    _1 =>
%%     nonempty_list(1)
function `bif_SUITE`:`first`(_0, _1) {
0:
  %% Result type:
  %%    list(1)
  %% Unique:
  %%    _0
  ret _0
}

%% bif_SUITE.erl:80
%% Counter = 31
%% bs_ensure_opt: true
function `bif_SUITE`:`beam_validator`(_0) {
0:
  %% bif_SUITE.erl:81
  %% Result type:
  %%    nonempty_list(any())
  %% Aliased:
  %%    _0
  _6 = call (`food`/1), _0

  %% Aliased:
  %%    _6
  _16 = succeeded:body _6
  br _16, ^29, ^1

29:
  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _8 = get_hd _6

  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _7 = get_tl _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _28 = bif:'=:=' _8, `false`
  br _28, ^27, ^18

27:
  %% Aliased:
  %%    _7
  _26 = is_nonempty_list _7
  br _26, ^26, ^18

26:
  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _10 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_list(any())
  %% Aliased:
  %%    _7
  _9 = get_tl _7

  %% Argument types:
  %%    _9 => list(any())
  %% Aliased:
  %%    _9
  _25 = bif:'=:=' _9, `[]`
  br _25, ^25, ^18

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _10
  _19 = bif:'=:=' _10, _0
  br _19, ^19, ^18

19:
  %% bif_SUITE.erl:84
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _11 = bif:is_port _0
  br _11, ^21, ^22

21:
  %% bif_SUITE.erl:84
  _12 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _12
  _24 = succeeded:body _12
  br ^1

22:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% bif_SUITE.erl:81
  %% Aliased:
  %%    _6
  _13 = match_fail `badmatch`, _6

  %% Unique:
  %%    _13
  _30 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% bif_SUITE.erl:88
%% Counter = 6
%% bs_ensure_opt: true
function `bif_SUITE`:`food`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_list _0, `[]`

  %% Argument types:
  %%    _2 => nonempty_list(any())
  %% Unique:
  %%    _2
  _3 = put_list `false`, _2
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _3
  ret _3
}

%% bif_SUITE.erl:96
%% Counter = 70
%% bs_ensure_opt: true
function `bif_SUITE`:`trunc_and_friends`(_0) {
0:
  %% bif_SUITE.erl:98
  %% Result type:
  %%    nonempty_list(any())
  Fs = call (`trunc_and_friends_1`/1), `[trunc,round,floor,ceil]`

  %% Aliased:
  %%    Fs
  _51 = succeeded:body Fs
  br _51, ^51, ^1

51:
  %% bif_SUITE.erl:103
  %% Result type:
  %%    nonempty_list(any())
  %% Aliased:
  %%    Fs
  _11 = call (`'-trunc_and_friends/1-lc$^0/1-0-'`/1), Fs

  %% Aliased:
  %%    _11
  _52 = succeeded:body _11
  br _52, ^52, ^1

52:
  _13 = call (`merl`:`term`/1), `trunc_and_friends`

  %% Aliased:
  %%    _13
  _53 = succeeded:body _13
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _25 = put_list _13, `[]`

  %% Argument types:
  %%    _25 => nonempty_list(any())
  %% Unique:
  %%    _25
  _26 = put_list _25, `[]`

  %% Argument types:
  %%    _26 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _26
  _27 = put_list `[{tree,atom,{attr,104,[],none},module}]`, _26

  %% Argument types:
  %%    _11 => nonempty_list(any())
  %% Aliased:
  %%    _11
  _28 = put_list _11, `[{atom,106,ok}]`

  %% Argument types:
  %%    _28 => nonempty_list(nonempty_list(any()) | {'atom', 106, 'ok'})
  %% Unique:
  %%    _28
  _29 = put_list _28, `[]`

  %% Argument types:
  %%    _29 => nonempty_list(nonempty_list(nonempty_list(any()) | {'atom', 106, 'ok'}))
  %% Unique:
  %%    _29
  _30 = put_list `[]`, _29

  %% Argument types:
  %%    _30 => nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))
  %% Unique:
  %%    _30
  _31 = put_list `[]`, _30

  %% Argument types:
  %%    _31 => nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))
  %% Unique:
  %%    _31
  _32 = put_tuple `template`, `clause`, `{attr,106,[],none}`, _31

  %% Argument types:
  %%    _32 => {'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))}
  %% Unique:
  %%    _32
  _33 = put_list _32, `[]`

  %% Argument types:
  %%    _33 => nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))})
  %% Unique:
  %%    _33
  _34 = put_list _33, `[]`

  %% Argument types:
  %%    _34 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))}))
  %% Unique:
  %%    _34
  _35 = put_list `[{tree,atom,{attr,106,[],none},test}]`, _34

  %% Argument types:
  %%    _35 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))} | {'tree', 'atom', {'attr', 106, nil(), 'none'}, 'test'}))
  %% Unique:
  %%    _35
  _36 = put_tuple `template`, `function`, `{attr,106,[],none}`, _35

  %% Argument types:
  %%    _36 => {'template', 'function', {'attr', 106, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))} | {'tree', 'atom', {'attr', 106, nil(), 'none'}, 'test'}))}
  %% Unique:
  %%    _36
  _37 = put_list _36, `[{function,107,id,1,[{clause,107,[{var,107,'I'}],[],[{var,107,'I'}]}]}]`

  %% Argument types:
  %%    _37 => nonempty_list({'template', 'function', {'attr', 106, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))} | {'tree', 'atom', {'attr', 106, nil(), 'none'}, 'test'}))} | {'function', 107, 'id', 1, nonempty_list({'clause', 107, nonempty_list({'var', 107, ''I''}), nil(), nonempty_list({'var', 107, ''I''})})})
  %% Unique:
  %%    _37
  _38 = put_list `{attribute,105,export,[{test,0}]}`, _37

  %% Argument types:
  %%    _27 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _27
  _39 = put_tuple `template`, `attribute`, `{attr,104,[],none}`, _27

  %% Argument types:
  %%    _39 => {'template', 'attribute', {'attr', 104, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %%    _38 => nonempty_list({'attribute', 105, 'export', nonempty_list({'test', 0})} | {'template', 'function', {'attr', 106, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 106, nil(), 'none'}, nonempty_list(list(nonempty_list(any()) | {'atom', 106, 'ok'}))} | {'tree', 'atom', {'attr', 106, nil(), 'none'}, 'test'}))} | {'function', 107, 'id', 1, nonempty_list({'clause', 107, nonempty_list({'var', 107, ''I''}), nil(), nonempty_list({'var', 107, ''I''})})})
  %% Unique:
  %%    _38, 
  %%    _39
  _40 = put_list _39, _38

  %% bif_SUITE.erl:104
  %% Unique:
  %%    _40
  _14 = call (`merl`:`tree`/1), _40

  %% Aliased:
  %%    _14
  _54 = succeeded:body _14
  br _54, ^54, ^1

54:
  %% bif_SUITE.erl:107
  %% Aliased:
  %%    _14, 
  %%    Fs
  Tree = call (`erlang`:`'++'`/2), _14, Fs

  %% Aliased:
  %%    Tree
  _55 = succeeded:body Tree
  br _55, ^55, ^1

55:
  %% bif_SUITE.erl:108
  %% Aliased:
  %%    Tree
  _46 = call (`merl`:`print`/1), Tree

  %% Aliased:
  %%    _46
  _56 = succeeded:body _46
  br _56, ^56, ^1

56:
  %% bif_SUITE.erl:109
  Opts = call (`test_lib`:`opt_opts`/1), `bif_SUITE`

  %% Aliased:
  %%    Opts
  _57 = succeeded:body Opts
  br _57, ^57, ^1

57:
  %% bif_SUITE.erl:110
  %% Aliased:
  %%    Opts, 
  %%    Tree
  _41 = call (`merl`:`compile_and_load`/2), Tree, Opts

  %% Aliased:
  %%    _41
  _58 = succeeded:body _41
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _65 = is_tagged_tuple _41, `2`, `ok`
  br _65, ^62, ^60

62:
  %% bif_SUITE.erl:111
  _47 = call (`trunc_and_friends`:`test`/0)

  %% Aliased:
  %%    _47
  _61 = succeeded:body _47
  br _61, ^61, ^1

61:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% bif_SUITE.erl:110
  %% Aliased:
  %%    _41
  _48 = match_fail `badmatch`, _41

  %% Unique:
  %%    _48
  _68 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% bif_SUITE.erl:114
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list('ceil' | 'floor' | 'round' | 'trunc')
function `bif_SUITE`:`trunc_and_friends_1`(_0) {
0:
  %% Unique:
  %%    _0
  _21 = is_nonempty_list _0
  br _21, ^21, ^22

21:
  %% Argument types:
  %%    _0 => nonempty_list('ceil' | 'floor' | 'round' | 'trunc')
  %% Unique:
  %%    _0
  _9 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list('ceil' | 'floor' | 'round' | 'trunc')
  %% Unique:
  %%    _0
  _8 = get_tl _0

  %% bif_SUITE.erl:115
  %% Argument types:
  %%    _8 => list('ceil' | 'floor' | 'round' | 'trunc')
  %% Unique:
  %%    _8
  _1 = bif:length _8

  %% bif_SUITE.erl:115
  %% Unique:
  %%    _1
  _2 = call (`erlang`:`integer_to_list`/1), _1

  %% Aliased:
  %%    _2
  _17 = succeeded:body _2
  br _17, ^17, ^1

17:
  %% Argument types:
  %%    _2 => nonempty_list(any())
  %% Aliased:
  %%    _2
  _3 = put_list `102`, _2

  %% bif_SUITE.erl:115
  %% Unique:
  %%    _3
  Func = call (`erlang`:`list_to_atom`/1), _3

  %% Aliased:
  %%    Func
  _18 = succeeded:body Func
  br _18, ^18, ^1

18:
  %% bif_SUITE.erl:116
  %% Aliased:
  %%    Func
  %% Unique:
  %%    _9
  _6 = call (`trunc_template`/2), Func, _9

  %% Aliased:
  %%    _6
  _19 = succeeded:body _6
  br _19, ^19, ^1

19:
  %% bif_SUITE.erl:116
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _8
  _5 = call (`trunc_and_friends_1`/1), _8

  %% Aliased:
  %%    _5
  _20 = succeeded:body _5
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _5 => list(any())
  %% Aliased:
  %%    _5, 
  %%    _6
  _10 = put_list _6, _5
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _10
  ret _10

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12

22:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% bif_SUITE.erl:119
%% Counter = 140
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     'ceil' | 'floor' | 'round' | 'trunc'
function `bif_SUITE`:`trunc_template`(_0, _1) {
0:
  %% bif_SUITE.erl:121
  Res = call (`erlang`:_1/1), `42.77`

  %% Aliased:
  %%    Res
  _125 = succeeded:body Res
  br _125, ^125, ^1

125:
  %% bif_SUITE.erl:122
  %% Argument types:
  %%    
  %% Aliased:
  %%    Res
  FloatRes = bif:float Res

  %% Unique:
  %%    FloatRes
  _126 = succeeded:body FloatRes
  br _126, ^126, ^1

126:
  %% Aliased:
  %%    _0
  _15 = call (`merl`:`term`/1), _0

  %% Aliased:
  %%    _15
  _127 = succeeded:body _15
  br _127, ^127, ^1

127:
  _14 = call (`merl`:`term`/1), `42.77`

  %% Aliased:
  %%    _14
  _128 = succeeded:body _14
  br _128, ^128, ^1

128:
  %% Aliased:
  %%    _1
  _13 = call (`merl`:`term`/1), _1

  %% Aliased:
  %%    _13
  _129 = succeeded:body _13
  br _129, ^129, ^1

129:
  %% Aliased:
  %%    Res
  _12 = call (`merl`:`term`/1), Res

  %% Aliased:
  %%    _12
  _130 = succeeded:body _12
  br _130, ^130, ^1

130:
  %% Aliased:
  %%    _1
  _11 = call (`merl`:`term`/1), _1

  %% Aliased:
  %%    _11
  _131 = succeeded:body _11
  br _131, ^131, ^1

131:
  %% Unique:
  %%    FloatRes
  _10 = call (`merl`:`term`/1), FloatRes

  %% Aliased:
  %%    _10
  _132 = succeeded:body _10
  br _132, ^132, ^1

132:
  %% Aliased:
  %%    _1
  _9 = call (`merl`:`term`/1), _1

  %% Aliased:
  %%    _9
  _133 = succeeded:body _9
  br _133, ^133, ^1

133:
  %% Aliased:
  %%    Res
  _8 = call (`merl`:`term`/1), Res

  %% Aliased:
  %%    _8
  _134 = succeeded:body _8
  br _134, ^134, ^1

134:
  %% Aliased:
  %%    Res
  _7 = call (`merl`:`term`/1), Res

  %% Aliased:
  %%    _7
  _135 = succeeded:body _7
  br _135, ^135, ^1

135:
  %% Aliased:
  %%    _1
  _6 = call (`merl`:`term`/1), _1

  %% Aliased:
  %%    _6
  _136 = succeeded:body _6
  br _136, ^136, ^1

136:
  %% Aliased:
  %%    _1
  _5 = call (`merl`:`term`/1), _1

  %% Aliased:
  %%    _5
  _137 = succeeded:body _5
  br _137, ^137, ^1

137:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _16 = put_list _14, `[]`

  %% Argument types:
  %%    _16 => nonempty_list(any())
  %% Unique:
  %%    _16
  _17 = put_list _16, `[]`

  %% Argument types:
  %%    _17 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _17
  _18 = put_list `[{atom,124,id}]`, _17

  %% Argument types:
  %%    _18 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _18
  _19 = put_tuple `template`, `application`, `{attr,124,[],none}`, _18

  %% Argument types:
  %%    _19 => {'template', 'application', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _19
  _20 = put_list _19, `[]`

  %% Argument types:
  %%    _20 => nonempty_list({'template', 'application', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _20
  _21 = put_list _20, `[]`

  %% Argument types:
  %%    _21 => nonempty_list(nonempty_list({'template', 'application', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _21
  _22 = put_list `[{var,124,'Var'}]`, _21

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _23 = put_list _13, `[]`

  %% Argument types:
  %%    _23 => nonempty_list(any())
  %% Unique:
  %%    _23
  _24 = put_list _23, `[[{var,125,'Var'}]]`

  %% Argument types:
  %%    _24 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _24
  _25 = put_tuple `template`, `application`, `{attr,125,[],none}`, _24

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _26 = put_list _12, `[]`

  %% Argument types:
  %%    _26 => nonempty_list(any())
  %% Unique:
  %%    _26
  _27 = put_list _26, `[]`

  %% Argument types:
  %%    _27 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _27
  _28 = put_list `[{tree,operator,{attr,125,[],none},'=:='}]`, _27

  %% Argument types:
  %%    _25 => {'template', 'application', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _25
  _29 = put_list _25, `[]`

  %% Argument types:
  %%    _29 => nonempty_list({'template', 'application', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %%    _28 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _28, 
  %%    _29
  _30 = put_list _29, _28

  %% Argument types:
  %%    _30 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _30
  _31 = put_tuple `template`, `infix_expr`, `{attr,125,[],none}`, _30

  %% Argument types:
  %%    _31 => {'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _31
  _32 = put_list _31, `[]`

  %% Argument types:
  %%    _32 => nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _32
  _33 = put_list _32, `[]`

  %% Argument types:
  %%    _33 => nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _33
  _34 = put_tuple `template`, `conjunction`, `{attr,0,[],none}`, _33

  %% Argument types:
  %%    _34 => {'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}
  %% Unique:
  %%    _34
  _35 = put_list _34, `[]`

  %% Argument types:
  %%    _35 => nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))})
  %% Unique:
  %%    _35
  _36 = put_list _35, `[]`

  %% Argument types:
  %%    _36 => nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))
  %% Unique:
  %%    _36
  _37 = put_tuple `template`, `disjunction`, `{attr,0,[],none}`, _36

  %% Argument types:
  %%    _37 => {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}
  %% Unique:
  %%    _37
  _38 = put_list _37, `[]`

  %% Argument types:
  %%    _38 => nonempty_list({'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))})
  %% Unique:
  %%    _38
  _39 = put_list _38, `[[{atom,125,ok}]]`

  %% Argument types:
  %%    _39 => nonempty_list(nonempty_list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _39
  _40 = put_list `[]`, _39

  %% Argument types:
  %%    _40 => nonempty_list(list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _40
  _41 = put_tuple `template`, `clause`, `{attr,125,[],none}`, _40

  %% Argument types:
  %%    _41 => {'template', 'clause', {'attr', 125, nil(), 'none'}, nonempty_list(list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}
  %% Unique:
  %%    _41
  _42 = put_list _41, `[]`

  %% Argument types:
  %%    _42 => nonempty_list({'template', 'clause', {'attr', 125, nil(), 'none'}, nonempty_list(list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))})
  %% Unique:
  %%    _42
  _43 = put_list _42, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _44 = put_list _11, `[]`

  %% Argument types:
  %%    _44 => nonempty_list(any())
  %% Unique:
  %%    _44
  _45 = put_list _44, `[[{var,126,'Var'}]]`

  %% Argument types:
  %%    _45 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _45
  _46 = put_tuple `template`, `application`, `{attr,126,[],none}`, _45

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _47 = put_list _10, `[]`

  %% Argument types:
  %%    _47 => nonempty_list(any())
  %% Unique:
  %%    _47
  _48 = put_list _47, `[]`

  %% Argument types:
  %%    _48 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _48
  _49 = put_list `[{tree,operator,{attr,126,[],none},'=='}]`, _48

  %% Argument types:
  %%    _46 => {'template', 'application', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _46
  _50 = put_list _46, `[]`

  %% Argument types:
  %%    _50 => nonempty_list({'template', 'application', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %%    _49 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _49, 
  %%    _50
  _51 = put_list _50, _49

  %% Argument types:
  %%    _51 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _51
  _52 = put_tuple `template`, `infix_expr`, `{attr,126,[],none}`, _51

  %% Argument types:
  %%    _52 => {'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _52
  _53 = put_list _52, `[]`

  %% Argument types:
  %%    _53 => nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _53
  _54 = put_list _53, `[]`

  %% Argument types:
  %%    _54 => nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _54
  _55 = put_tuple `template`, `conjunction`, `{attr,0,[],none}`, _54

  %% Argument types:
  %%    _55 => {'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}
  %% Unique:
  %%    _55
  _56 = put_list _55, `[]`

  %% Argument types:
  %%    _56 => nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))})
  %% Unique:
  %%    _56
  _57 = put_list _56, `[]`

  %% Argument types:
  %%    _57 => nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))
  %% Unique:
  %%    _57
  _58 = put_tuple `template`, `disjunction`, `{attr,0,[],none}`, _57

  %% Argument types:
  %%    _58 => {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}
  %% Unique:
  %%    _58
  _59 = put_list _58, `[]`

  %% Argument types:
  %%    _59 => nonempty_list({'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))})
  %% Unique:
  %%    _59
  _60 = put_list _59, `[[{atom,126,ok}]]`

  %% Argument types:
  %%    _60 => nonempty_list(nonempty_list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _60
  _61 = put_list `[]`, _60

  %% Argument types:
  %%    _61 => nonempty_list(list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _61
  _62 = put_tuple `template`, `clause`, `{attr,126,[],none}`, _61

  %% Argument types:
  %%    _62 => {'template', 'clause', {'attr', 126, nil(), 'none'}, nonempty_list(list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}
  %% Unique:
  %%    _62
  _63 = put_list _62, `[]`

  %% Argument types:
  %%    _63 => nonempty_list({'template', 'clause', {'attr', 126, nil(), 'none'}, nonempty_list(list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))})
  %% Unique:
  %%    _63
  _64 = put_list _63, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _65 = put_list _9, `[]`

  %% Argument types:
  %%    _65 => nonempty_list(any())
  %% Unique:
  %%    _65
  _66 = put_list _65, `[[{var,127,'Var'}]]`

  %% Argument types:
  %%    _66 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _66
  _67 = put_tuple `template`, `application`, `{attr,127,[],none}`, _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _68 = put_list _8, `[]`

  %% Argument types:
  %%    _68 => nonempty_list(any())
  %% Unique:
  %%    _68
  _69 = put_list _68, `[]`

  %% Argument types:
  %%    _69 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _69
  _70 = put_list `[{tree,operator,{attr,127,[],none},'=='}]`, _69

  %% Argument types:
  %%    _67 => {'template', 'application', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _67
  _71 = put_list _67, `[]`

  %% Argument types:
  %%    _71 => nonempty_list({'template', 'application', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %%    _70 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _70, 
  %%    _71
  _72 = put_list _71, _70

  %% Argument types:
  %%    _72 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _72
  _73 = put_tuple `template`, `infix_expr`, `{attr,127,[],none}`, _72

  %% Argument types:
  %%    _73 => {'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _73
  _74 = put_list _73, `[]`

  %% Argument types:
  %%    _74 => nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _74
  _75 = put_list _74, `[]`

  %% Argument types:
  %%    _75 => nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _75
  _76 = put_tuple `template`, `conjunction`, `{attr,0,[],none}`, _75

  %% Argument types:
  %%    _76 => {'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}
  %% Unique:
  %%    _76
  _77 = put_list _76, `[]`

  %% Argument types:
  %%    _77 => nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))})
  %% Unique:
  %%    _77
  _78 = put_list _77, `[]`

  %% Argument types:
  %%    _78 => nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))
  %% Unique:
  %%    _78
  _79 = put_tuple `template`, `disjunction`, `{attr,0,[],none}`, _78

  %% Argument types:
  %%    _79 => {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}
  %% Unique:
  %%    _79
  _80 = put_list _79, `[]`

  %% Argument types:
  %%    _80 => nonempty_list({'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))})
  %% Unique:
  %%    _80
  _81 = put_list _80, `[[{atom,127,ok}]]`

  %% Argument types:
  %%    _81 => nonempty_list(nonempty_list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _81
  _82 = put_list `[]`, _81

  %% Argument types:
  %%    _82 => nonempty_list(list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))
  %% Unique:
  %%    _82
  _83 = put_tuple `template`, `clause`, `{attr,127,[],none}`, _82

  %% Argument types:
  %%    _83 => {'template', 'clause', {'attr', 127, nil(), 'none'}, nonempty_list(list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}
  %% Unique:
  %%    _83
  _84 = put_list _83, `[]`

  %% Argument types:
  %%    _84 => nonempty_list({'template', 'clause', {'attr', 127, nil(), 'none'}, nonempty_list(list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))})
  %% Unique:
  %%    _84
  _85 = put_list _84, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _86 = put_list _6, `[]`

  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Unique:
  %%    _86
  _87 = put_list _86, `[[{var,128,'Var'}]]`

  %% Argument types:
  %%    _87 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _87
  _88 = put_tuple `template`, `application`, `{attr,128,[],none}`, _87

  %% Argument types:
  %%    _88 => {'template', 'application', {'attr', 128, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _88
  _89 = put_list _88, `[]`

  %% Argument types:
  %%    _89 => nonempty_list({'template', 'application', {'attr', 128, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _89
  _90 = put_list _89, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _91 = put_list _7, `[]`

  %% Argument types:
  %%    _91 => nonempty_list(any())
  %%    _90 => nonempty_list(nonempty_list({'template', 'application', {'attr', 128, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _90, 
  %%    _91
  _92 = put_list _91, _90

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _93 = put_list _5, `[]`

  %% Argument types:
  %%    _93 => nonempty_list(any())
  %% Unique:
  %%    _93
  _94 = put_list _93, `[[{atom,129,a}]]`

  %% Argument types:
  %%    _94 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _94
  _95 = put_tuple `template`, `application`, `{attr,129,[],none}`, _94

  %% Argument types:
  %%    _95 => {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %% Unique:
  %%    _95
  _96 = put_list _95, `[{atom,129,ok}]`

  %% Argument types:
  %%    _96 => nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))})
  %% Unique:
  %%    _96
  _97 = put_list _96, `[]`

  %% Argument types:
  %%    _97 => nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _97
  _98 = put_tuple `template`, `block_expr`, `{attr,129,[],none}`, _97

  %% Argument types:
  %%    _98 => {'template', 'block_expr', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}
  %% Unique:
  %%    _98
  _99 = put_list _98, `[]`

  %% Argument types:
  %%    _99 => nonempty_list({'template', 'block_expr', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))})
  %% Unique:
  %%    _99
  _100 = put_list _99, `[[],
  [{clause,130,
           [{tree,class_qualifier,
                  {attr,0,[],none},
                  {class_qualifier,{atom,130,error},
                                   {atom,130,badarg},
                                   {var,130,'_'}}}],
           [],
           [{atom,130,ok}]}],
  []]`

  %% Argument types:
  %%    _100 => nonempty_list(list({'template', 'block_expr', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))} | {'clause', 130, nonempty_list({'tree', 'class_qualifier', {'attr', 0, nil(), 'none'}, {'class_qualifier', {'atom', 130, 'error'}, {'atom', 130, 'badarg'}, {'var', 130, ''_''}}}), nil(), nonempty_list({'atom', 130, 'ok'})}))
  %% Unique:
  %%    _100
  _101 = put_tuple `template`, `try_expr`, `{attr,129,[],none}`, _100

  %% Argument types:
  %%    _101 => {'template', 'try_expr', {'attr', 129, nil(), 'none'}, nonempty_list(list({'template', 'block_expr', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))} | {'clause', 130, nonempty_list({'tree', 'class_qualifier', {'attr', 0, nil(), 'none'}, {'class_qualifier', {'atom', 130, 'error'}, {'atom', 130, 'badarg'}, {'var', 130, ''_''}}}), nil(), nonempty_list({'atom', 130, 'ok'})}))}
  %% Unique:
  %%    _101
  _102 = put_list _101, `[{atom,131,ok}]`

  %% Argument types:
  %%    _92 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _92
  _103 = put_tuple `template`, `match_expr`, `{attr,128,[],none}`, _92

  %% Argument types:
  %%    _103 => {'template', 'match_expr', {'attr', 128, nil(), 'none'}, nonempty_list(nonempty_list(any()))}
  %%    _102 => nonempty_list({'atom', 131, 'ok'} | {'template', 'try_expr', {'attr', 129, nil(), 'none'}, nonempty_list(list({'template', 'block_expr', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list({'atom', 129, 'ok'} | {'template', 'application', {'attr', 129, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))} | {'clause', 130, nonempty_list({'tree', 'class_qualifier', {'attr', 0, nil(), 'none'}, {'class_qualifier', {'atom', 130, 'error'}, {'atom', 130, 'badarg'}, {'var', 130, ''_''}}}), nil(), nonempty_list({'atom', 130, 'ok'})}))})
  %% Unique:
  %%    _102, 
  %%    _103
  _104 = put_list _103, _102

  %% Argument types:
  %%    _85 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 127, nil(), 'none'}, nonempty_list(list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))
  %% Unique:
  %%    _85
  _105 = put_tuple `template`, `if_expr`, `{attr,127,[],none}`, _85

  %% Argument types:
  %%    _105 => {'template', 'if_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 127, nil(), 'none'}, nonempty_list(list({'atom', 127, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 127, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))}
  %%    _104 => nonempty_list({'atom', 131, 'ok'} | {'template', 'match_expr' | 'try_expr', {'attr', 128..129, nil(), 'none'}, nonempty_list(list(any()))})
  %% Unique:
  %%    _104, 
  %%    _105
  _106 = put_list _105, _104

  %% Argument types:
  %%    _64 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 126, nil(), 'none'}, nonempty_list(list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))
  %% Unique:
  %%    _64
  _107 = put_tuple `template`, `if_expr`, `{attr,126,[],none}`, _64

  %% Argument types:
  %%    _107 => {'template', 'if_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 126, nil(), 'none'}, nonempty_list(list({'atom', 126, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 126, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))}
  %%    _106 => nonempty_list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 127..129, nil(), 'none'}, nonempty_list(list(any()))})
  %% Unique:
  %%    _106, 
  %%    _107
  _108 = put_list _107, _106

  %% Argument types:
  %%    _43 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 125, nil(), 'none'}, nonempty_list(list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))
  %% Unique:
  %%    _43
  _109 = put_tuple `template`, `if_expr`, `{attr,125,[],none}`, _43

  %% Argument types:
  %%    _109 => {'template', 'if_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'clause', {'attr', 125, nil(), 'none'}, nonempty_list(list({'atom', 125, 'ok'} | {'template', 'disjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'conjunction', {'attr', 0, nil(), 'none'}, nonempty_list(nonempty_list({'template', 'infix_expr', {'attr', 125, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}))}))}))}
  %%    _108 => nonempty_list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 126..129, nil(), 'none'}, nonempty_list(list(any()))})
  %% Unique:
  %%    _108, 
  %%    _109
  _110 = put_list _109, _108

  %% Argument types:
  %%    _22 => nonempty_list(nonempty_list({'var', 124, ''Var''} | {'template', 'application', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))
  %% Unique:
  %%    _22
  _111 = put_tuple `template`, `match_expr`, `{attr,124,[],none}`, _22

  %% Argument types:
  %%    _111 => {'template', 'match_expr', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list({'var', 124, ''Var''} | {'template', 'application', {'attr', 124, nil(), 'none'}, nonempty_list(nonempty_list(any()))}))}
  %%    _110 => nonempty_list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 125..129, nil(), 'none'}, nonempty_list(list(any()))})
  %% Unique:
  %%    _110, 
  %%    _111
  _112 = put_list _111, _110

  %% Argument types:
  %%    _112 => nonempty_list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))})
  %% Unique:
  %%    _112
  _113 = put_list _112, `[]`

  %% Argument types:
  %%    _113 => nonempty_list(nonempty_list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))
  %% Unique:
  %%    _113
  _114 = put_list `[]`, _113

  %% Argument types:
  %%    _114 => nonempty_list(list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))
  %% Unique:
  %%    _114
  _115 = put_list `[]`, _114

  %% Argument types:
  %%    _115 => nonempty_list(list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))
  %% Unique:
  %%    _115
  _116 = put_tuple `template`, `clause`, `{attr,123,[],none}`, _115

  %% Argument types:
  %%    _116 => {'template', 'clause', {'attr', 123, nil(), 'none'}, nonempty_list(list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))}
  %% Unique:
  %%    _116
  _117 = put_list _116, `[]`

  %% Argument types:
  %%    _117 => nonempty_list({'template', 'clause', {'attr', 123, nil(), 'none'}, nonempty_list(list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))})
  %% Unique:
  %%    _117
  _118 = put_list _117, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _119 = put_list _15, `[]`

  %% Argument types:
  %%    _119 => nonempty_list(any())
  %%    _118 => nonempty_list(nonempty_list({'template', 'clause', {'attr', 123, nil(), 'none'}, nonempty_list(list({'atom', 131, 'ok'} | {'template', 'if_expr' | 'match_expr' | 'try_expr', {'attr', 124..129, nil(), 'none'}, nonempty_list(list(any()))}))}))
  %% Unique:
  %%    _118, 
  %%    _119
  _120 = put_list _119, _118

  %% Argument types:
  %%    _120 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _120
  _121 = put_tuple `template`, `function`, `{attr,123,[],none}`, _120

  %% bif_SUITE.erl:123
  %% Unique:
  %%    _121
  _122 = call (`merl`:`tree`/1), _121

  %% Aliased:
  %%    _122
  _138 = succeeded:body _122
  br _138, ^138, ^1

138:
  %% Aliased:
  %%    _122
  ret _122

1:
  _123 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _123
}

%% bif_SUITE.erl:133
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`cover_safe_and_pure_bifs`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% bif_SUITE.erl:150
%% Counter = 100
%% bs_ensure_opt: true
function `bif_SUITE`:`cover_trim`(_0) {
0:
  %% bif_SUITE.erl:151
  _1 = call (`id`/1), `"*"`

  %% Aliased:
  %%    _1
  _38 = succeeded:body _1
  br _38, ^38, ^1

38:
  %% bif_SUITE.erl:151
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _1
  _16 = call (`cover_trim_1`/2), `<<"abc">>`, _1

  %% Unique:
  %%    _16
  _39 = succeeded:body _16
  br _39, ^97, ^1

97:
  %% bif_SUITE.erl:152
  _3 = call (`id`/1), `"*"`

  %% Aliased:
  %%    _3
  _42 = succeeded:body _3
  br _42, ^42, ^1

42:
  %% bif_SUITE.erl:152
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  _17 = call (`cover_trim_1`/2), `{a,b,c}`, _3

  %% Unique:
  %%    _17
  _43 = succeeded:body _17
  br _43, ^94, ^1

94:
  %% bif_SUITE.erl:154
  %% Result type:
  %%    'false' | 'true'
  _18 = call (`cover_trim_2`/2), `"keep-alive"`, `"1"`

  %% Unique:
  %%    _18
  _46 = succeeded:body _18
  br _46, ^46, ^1

46:
  br _18, ^91, ^48

91:
  %% bif_SUITE.erl:155
  %% Result type:
  %%    'false' | 'true'
  _19 = call (`cover_trim_2`/2), `"keep-alive"`, `"0"`

  %% Unique:
  %%    _19
  _49 = succeeded:body _19
  br _49, ^49, ^1

49:
  br _19, ^51, ^88

51:
  %% bif_SUITE.erl:155
  _32 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _32
  _90 = succeeded:body _32
  br ^1

88:
  %% bif_SUITE.erl:156
  %% Result type:
  %%    'false' | 'true'
  _20 = call (`cover_trim_2`/2), `"other"`, `"1"`

  %% Unique:
  %%    _20
  _52 = succeeded:body _20
  br _52, ^52, ^1

52:
  br _20, ^54, ^85

54:
  %% bif_SUITE.erl:156
  _31 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _31
  _87 = succeeded:body _31
  br ^1

85:
  %% bif_SUITE.erl:157
  %% Result type:
  %%    'false' | 'true'
  _21 = call (`cover_trim_2`/2), `"other"`, `"0"`

  %% Unique:
  %%    _21
  _55 = succeeded:body _21
  br _55, ^55, ^1

55:
  br _21, ^57, ^82

57:
  %% bif_SUITE.erl:157
  _30 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _30
  _84 = succeeded:body _30
  br ^1

82:
  %% bif_SUITE.erl:159
  %% Result type:
  %%    'false' | 'true'
  _22 = call (`cover_trim_3`/2), `"keep-alive"`, `-1`

  %% Unique:
  %%    _22
  _58 = succeeded:body _22
  br _58, ^58, ^1

58:
  br _22, ^79, ^60

79:
  %% bif_SUITE.erl:160
  %% Result type:
  %%    'false' | 'true'
  _23 = call (`cover_trim_3`/2), `"keep-alive"`, `100`

  %% Unique:
  %%    _23
  _61 = succeeded:body _23
  br _61, ^61, ^1

61:
  br _23, ^63, ^76

63:
  %% bif_SUITE.erl:160
  _28 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _28
  _78 = succeeded:body _28
  br ^1

76:
  %% bif_SUITE.erl:161
  %% Result type:
  %%    'false' | 'true'
  _24 = call (`cover_trim_3`/2), `"other"`, `-10`

  %% Unique:
  %%    _24
  _64 = succeeded:body _24
  br _64, ^64, ^1

64:
  br _24, ^66, ^73

66:
  %% bif_SUITE.erl:161
  _27 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _27
  _75 = succeeded:body _27
  br ^1

73:
  %% bif_SUITE.erl:162
  %% Result type:
  %%    'false' | 'true'
  _25 = call (`cover_trim_3`/2), `"other"`, `-100`

  %% Unique:
  %%    _25
  _67 = succeeded:body _25
  br _67, ^67, ^1

67:
  br _25, ^69, ^70

69:
  %% bif_SUITE.erl:162
  _26 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _26
  _72 = succeeded:body _26
  br ^1

70:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% bif_SUITE.erl:159
  _29 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _29
  _81 = succeeded:body _29
  br ^1

48:
  %% bif_SUITE.erl:154
  _33 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _33
  _93 = succeeded:body _33
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% bif_SUITE.erl:166
%% Counter = 16
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b', 'c'} | bitstring(8)
function `bif_SUITE`:`cover_trim_1`(_0, _1) {
0:
  %% bif_SUITE.erl:167
  %% Aliased:
  %%    _0
  _3 = call (`id`/1), _0

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% bif_SUITE.erl:168
  %% Aliased:
  %%    _0
  _4 = call (`id`/1), _0

  %% Aliased:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^9, ^1

9:
  %% bif_SUITE.erl:170
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = bif:hd _1

  %% Aliased:
  %%    _2
  _13 = succeeded:guard _2
  br _13, ^13, ^11

13:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _14 = bif:'=:=' _2, `42`
  br _14, ^12, ^11

12:
  %% Result type:
  %%    'ok'
  ret `ok`

11:
  %% bif_SUITE.erl:169
  _5 = match_fail `if_clause`

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% bif_SUITE.erl:174
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(45..118)
%%    _1 =>
%%     nonempty_list(48..49)
function `bif_SUITE`:`cover_trim_2`(_0, _1) {
0:
  %% bif_SUITE.erl:175
  _4 = call (`id`/1), `0`

  %% Aliased:
  %%    _4
  _7 = succeeded:body _4
  br _7, ^7, ^1

7:
  %% bif_SUITE.erl:176
  %% Unique:
  %%    _0
  _3 = call (`id`/1), _0

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _14 = bif:'=:=' _3, `"keep-alive"`
  br _14, ^14, ^10

14:
  %% bif_SUITE.erl:177
  %% Argument types:
  %%    _1 => nonempty_list(48..49)
  %% Unique:
  %%    _1
  _2 = get_hd _1

  %% Argument types:
  %%    _2 => 48..49
  %% Unique:
  %%    _2
  _13 = bif:'>=' _2, `49`
  ret _13

10:
  %% Result type:
  %%    'false'
  ret `false`

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% bif_SUITE.erl:183
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(45..118)
%%    _1 =>
%%     -100..100
function `bif_SUITE`:`cover_trim_3`(_0, _1) {
0:
  %% bif_SUITE.erl:184
  _4 = call (`id`/1), `0`

  %% Aliased:
  %%    _4
  _7 = succeeded:body _4
  br _7, ^7, ^1

7:
  %% bif_SUITE.erl:185
  %% Unique:
  %%    _0
  _3 = call (`id`/1), _0

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _14 = bif:'=:=' _3, `"keep-alive"`
  br _14, ^14, ^10

14:
  %% bif_SUITE.erl:186
  %% Argument types:
  %%    _1 => -100..100
  %% Unique:
  %%    _1
  _2 = bif:abs _1

  %% Unique:
  %%    _2
  _12 = succeeded:guard _2
  br _12, ^12, ^10

12:
  %% Argument types:
  %%    _2 => 0..100
  %% Unique:
  %%    _2
  _13 = bif:'<' _2, `42`
  ret _13

10:
  %% Result type:
  %%    'false'
  ret `false`

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% bif_SUITE.erl:194
%% Counter = 40
%% bs_ensure_opt: true
function `bif_SUITE`:`head_tail`(_0) {
0:
  %% bif_SUITE.erl:195
  %% Result type:
  %%    {1, 'ok'}
  _7 = call (`head_case`/0)

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br _17, ^38, ^1

38:
  %% bif_SUITE.erl:196
  %% Result type:
  %%    {1, 'ok'}
  _8 = call (`tail_case`/0)

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^36, ^1

36:
  %% bif_SUITE.erl:198
  _3 = call (`id`/1), `[1]`

  %% Aliased:
  %%    _3
  _23 = succeeded:body _3
  br _23, ^23, ^1

23:
  %% bif_SUITE.erl:198
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _9 = bif:hd _3

  %% Aliased:
  %%    _9
  _24 = succeeded:body _9
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _34 = bif:'=:=' _9, `1`
  br _34, ^33, ^26

33:
  %% bif_SUITE.erl:199
  _5 = call (`id`/1), `[1]`

  %% Aliased:
  %%    _5
  _27 = succeeded:body _5
  br _27, ^27, ^1

27:
  %% bif_SUITE.erl:199
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _10 = bif:tl _5

  %% Aliased:
  %%    _10
  _28 = succeeded:body _10
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _31 = bif:'=:=' _10, `[]`
  br _31, ^31, ^30

31:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% bif_SUITE.erl:199
  %% Aliased:
  %%    _10
  _11 = match_fail `badmatch`, _10

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br ^1

26:
  %% bif_SUITE.erl:198
  %% Aliased:
  %%    _9
  _12 = match_fail `badmatch`, _9

  %% Unique:
  %%    _12
  _35 = succeeded:body _12
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% bif_SUITE.erl:203
%% Counter = 8
%% bs_ensure_opt: true
function `bif_SUITE`:`head_case`() {
0:
  %% Result type:
  %%    {1, 'ok'}
  ret `{1,ok}`
}

%% bif_SUITE.erl:209
%% Counter = 8
%% bs_ensure_opt: true
function `bif_SUITE`:`tail_case`() {
0:
  %% Result type:
  %%    {1, 'ok'}
  ret `{1,ok}`
}

%% bif_SUITE.erl:215
%% Counter = 313
%% bs_ensure_opt: true
function `bif_SUITE`:`min_max`(_0) {
0:
  %% bif_SUITE.erl:216
  False = call (`id`/1), `false`

  %% Aliased:
  %%    False
  _113 = succeeded:body False
  br _113, ^113, ^1

113:
  %% bif_SUITE.erl:217
  True = call (`id`/1), `true`

  %% Aliased:
  %%    True
  _114 = succeeded:body True
  br _114, ^114, ^1

114:
  %% bif_SUITE.erl:219
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    False
  _45 = call (`bool_min_false`/2), False, False

  %% Unique:
  %%    _45
  _115 = succeeded:body _45
  br _115, ^310, ^1

310:
  %% bif_SUITE.erl:220
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    False, 
  %%    True
  _46 = call (`bool_min_false`/2), False, True

  %% Unique:
  %%    _46
  _118 = succeeded:body _46
  br _118, ^307, ^1

307:
  %% bif_SUITE.erl:221
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    False, 
  %%    True
  _47 = call (`bool_min_false`/2), True, False

  %% Unique:
  %%    _47
  _121 = succeeded:body _47
  br _121, ^304, ^1

304:
  %% bif_SUITE.erl:222
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    True
  _48 = call (`bool_min_true`/2), True, True

  %% Unique:
  %%    _48
  _124 = succeeded:body _48
  br _124, ^301, ^1

301:
  %% bif_SUITE.erl:224
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    False
  _49 = call (`bool_max_false`/2), False, False

  %% Unique:
  %%    _49
  _127 = succeeded:body _49
  br _127, ^298, ^1

298:
  %% bif_SUITE.erl:225
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    False, 
  %%    True
  _50 = call (`bool_max_true`/2), False, True

  %% Unique:
  %%    _50
  _130 = succeeded:body _50
  br _130, ^295, ^1

295:
  %% bif_SUITE.erl:226
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    False, 
  %%    True
  _51 = call (`bool_max_true`/2), True, False

  %% Unique:
  %%    _51
  _133 = succeeded:body _51
  br _133, ^292, ^1

292:
  %% bif_SUITE.erl:227
  %% Result type:
  %%    'true'
  %% Aliased:
  %%    True
  _52 = call (`bool_max_true`/2), True, True

  %% Unique:
  %%    _52
  _136 = succeeded:body _52
  br _136, ^289, ^1

289:
  %% bif_SUITE.erl:229
  %% Result type:
  %%    number(0, '+inf')
  _53 = call (`min_increment`/1), `100`

  %% Unique:
  %%    _53
  _139 = succeeded:body _53
  br _139, ^139, ^1

139:
  %% Argument types:
  %%    _53 => number(0, '+inf')
  %% Unique:
  %%    _53
  _287 = bif:'=:=' _53, `11`
  br _287, ^286, ^141

286:
  %% bif_SUITE.erl:230
  %% Result type:
  %%    number(0, '+inf')
  _54 = call (`min_increment`/1), `10`

  %% Unique:
  %%    _54
  _142 = succeeded:body _54
  br _142, ^142, ^1

142:
  %% Argument types:
  %%    _54 => number(0, '+inf')
  %% Unique:
  %%    _54
  _284 = bif:'=:=' _54, `11`
  br _284, ^283, ^144

283:
  %% bif_SUITE.erl:231
  %% Result type:
  %%    number(0, '+inf')
  _55 = call (`min_increment`/1), `9`

  %% Unique:
  %%    _55
  _145 = succeeded:body _55
  br _145, ^145, ^1

145:
  %% Argument types:
  %%    _55 => number(0, '+inf')
  %% Unique:
  %%    _55
  _281 = bif:'=:=' _55, `10`
  br _281, ^280, ^147

280:
  %% bif_SUITE.erl:232
  %% Result type:
  %%    number(0, '+inf')
  _56 = call (`min_increment`/1), `0`

  %% Unique:
  %%    _56
  _148 = succeeded:body _56
  br _148, ^148, ^1

148:
  %% Argument types:
  %%    _56 => number(0, '+inf')
  %% Unique:
  %%    _56
  _278 = bif:'=:=' _56, `1`
  br _278, ^277, ^150

277:
  %% bif_SUITE.erl:233
  %% Result type:
  %%    number(0, '+inf')
  _57 = call (`min_increment`/1), `-1`

  %% Unique:
  %%    _57
  _151 = succeeded:body _57
  br _151, ^151, ^1

151:
  %% Argument types:
  %%    _57 => number(0, '+inf')
  %% Unique:
  %%    _57
  _275 = bif:'=:=' _57, `0`
  br _275, ^274, ^153

274:
  %% bif_SUITE.erl:234
  %% Result type:
  %%    number(0, '+inf')
  _58 = call (`min_increment`/1), `a`

  %% Unique:
  %%    _58
  _154 = succeeded:body _58
  br _154, ^154, ^1

154:
  %% Argument types:
  %%    _58 => number(0, '+inf')
  %% Unique:
  %%    _58
  _272 = bif:'=:=' _58, `11`
  br _272, ^271, ^156

271:
  %% bif_SUITE.erl:236
  _18 = call (`id`/1), `42`

  %% Aliased:
  %%    _18
  _157 = succeeded:body _18
  br _157, ^157, ^1

157:
  %% bif_SUITE.erl:236
  %% Result type:
  %%    {integer(), number(1, '+inf')}
  %% Aliased:
  %%    _18
  _59 = call (`max_number`/1), _18

  %% Unique:
  %%    _59
  _158 = succeeded:body _59
  br _158, ^158, ^1

158:
  %% Argument types:
  %%    _59 => {integer(), number(1, '+inf')}
  %% Unique:
  %%    _59
  _269 = bif:'=:=' _59, `{42,42}`
  br _269, ^269, ^160

269:
  %% bif_SUITE.erl:237
  _20 = call (`id`/1), `42.0`

  %% Aliased:
  %%    _20
  _161 = succeeded:body _20
  br _161, ^161, ^1

161:
  %% bif_SUITE.erl:237
  %% Result type:
  %%    {integer(), number(1, '+inf')}
  %% Aliased:
  %%    _20
  _60 = call (`max_number`/1), _20

  %% Unique:
  %%    _60
  _162 = succeeded:body _60
  br _162, ^162, ^1

162:
  %% Argument types:
  %%    _60 => {integer(), number(1, '+inf')}
  %% Unique:
  %%    _60
  _267 = bif:'=:=' _60, `{42,42.0}`
  br _267, ^267, ^164

267:
  %% bif_SUITE.erl:238
  _23 = call (`id`/1), `-1`

  %% Aliased:
  %%    _23
  _165 = succeeded:body _23
  br _165, ^165, ^1

165:
  %% bif_SUITE.erl:238
  %% Result type:
  %%    {integer(), number(1, '+inf')}
  %% Aliased:
  %%    _23
  _61 = call (`max_number`/1), _23

  %% Unique:
  %%    _61
  _166 = succeeded:body _61
  br _166, ^166, ^1

166:
  %% Argument types:
  %%    _61 => {integer(), number(1, '+inf')}
  %% Unique:
  %%    _61
  _265 = bif:'=:=' _61, `{-1,1}`
  br _265, ^265, ^168

265:
  %% bif_SUITE.erl:239
  _26 = call (`id`/1), `-1.0`

  %% Aliased:
  %%    _26
  _169 = succeeded:body _26
  br _169, ^169, ^1

169:
  %% bif_SUITE.erl:239
  %% Result type:
  %%    {integer(), number(1, '+inf')}
  %% Aliased:
  %%    _26
  _62 = call (`max_number`/1), _26

  %% Unique:
  %%    _62
  _170 = succeeded:body _62
  br _170, ^170, ^1

170:
  %% Argument types:
  %%    _62 => {integer(), number(1, '+inf')}
  %% Unique:
  %%    _62
  _263 = bif:'=:=' _62, `{-1,1}`
  br _263, ^263, ^172

263:
  %% bif_SUITE.erl:241
  %% Result type:
  %%    100..'+inf'
  _63 = call (`int_clamped_add`/1), `-1`

  %% Unique:
  %%    _63
  _173 = succeeded:body _63
  br _173, ^173, ^1

173:
  %% Argument types:
  %%    _63 => 100..'+inf'
  %% Unique:
  %%    _63
  _261 = bif:'=:=' _63, `100`
  br _261, ^260, ^175

260:
  %% bif_SUITE.erl:242
  %% Result type:
  %%    100..'+inf'
  _64 = call (`int_clamped_add`/1), `0`

  %% Unique:
  %%    _64
  _176 = succeeded:body _64
  br _176, ^176, ^1

176:
  %% Argument types:
  %%    _64 => 100..'+inf'
  %% Unique:
  %%    _64
  _258 = bif:'=:=' _64, `100`
  br _258, ^257, ^178

257:
  %% bif_SUITE.erl:243
  %% Result type:
  %%    100..'+inf'
  _65 = call (`int_clamped_add`/1), `5`

  %% Unique:
  %%    _65
  _179 = succeeded:body _65
  br _179, ^179, ^1

179:
  %% Argument types:
  %%    _65 => 100..'+inf'
  %% Unique:
  %%    _65
  _255 = bif:'=:=' _65, `105`
  br _255, ^254, ^181

254:
  %% bif_SUITE.erl:244
  %% Result type:
  %%    100..'+inf'
  _66 = call (`int_clamped_add`/1), `10`

  %% Unique:
  %%    _66
  _182 = succeeded:body _66
  br _182, ^182, ^1

182:
  %% Argument types:
  %%    _66 => 100..'+inf'
  %% Unique:
  %%    _66
  _252 = bif:'=:=' _66, `110`
  br _252, ^251, ^184

251:
  %% bif_SUITE.erl:245
  %% Result type:
  %%    100..'+inf'
  _67 = call (`int_clamped_add`/1), `11`

  %% Unique:
  %%    _67
  _185 = succeeded:body _67
  br _185, ^185, ^1

185:
  %% Argument types:
  %%    _67 => 100..'+inf'
  %% Unique:
  %%    _67
  _249 = bif:'=:=' _67, `110`
  br _249, ^248, ^187

248:
  %% bif_SUITE.erl:247
  %% Result type:
  %%    number(99, '+inf')
  _68 = call (`num_clamped_add`/1), `-1`

  %% Unique:
  %%    _68
  _188 = succeeded:body _68
  br _188, ^188, ^1

188:
  %% Argument types:
  %%    _68 => number(99, '+inf')
  %% Unique:
  %%    _68
  _246 = bif:'=:=' _68, `100`
  br _246, ^245, ^190

245:
  %% bif_SUITE.erl:248
  %% Result type:
  %%    number(99, '+inf')
  _69 = call (`num_clamped_add`/1), `0`

  %% Unique:
  %%    _69
  _191 = succeeded:body _69
  br _191, ^191, ^1

191:
  %% Argument types:
  %%    _69 => number(99, '+inf')
  %% Unique:
  %%    _69
  _243 = bif:'=:=' _69, `100`
  br _243, ^242, ^193

242:
  %% bif_SUITE.erl:249
  %% Result type:
  %%    number(99, '+inf')
  _70 = call (`num_clamped_add`/1), `5`

  %% Unique:
  %%    _70
  _194 = succeeded:body _70
  br _194, ^194, ^1

194:
  %% Argument types:
  %%    _70 => number(99, '+inf')
  %% Unique:
  %%    _70
  _240 = bif:'=:=' _70, `105`
  br _240, ^239, ^196

239:
  %% bif_SUITE.erl:250
  %% Result type:
  %%    number(99, '+inf')
  _71 = call (`num_clamped_add`/1), `10`

  %% Unique:
  %%    _71
  _197 = succeeded:body _71
  br _197, ^197, ^1

197:
  %% Argument types:
  %%    _71 => number(99, '+inf')
  %% Unique:
  %%    _71
  _237 = bif:'=:=' _71, `110`
  br _237, ^236, ^199

236:
  %% bif_SUITE.erl:251
  %% Result type:
  %%    number(99, '+inf')
  _72 = call (`num_clamped_add`/1), `11`

  %% Unique:
  %%    _72
  _200 = succeeded:body _72
  br _200, ^200, ^1

200:
  %% Argument types:
  %%    _72 => number(99, '+inf')
  %% Unique:
  %%    _72
  _234 = bif:'=:=' _72, `110`
  br _234, ^233, ^202

233:
  %% bif_SUITE.erl:253
  %% Result type:
  %%    number(99, '+inf')
  _73 = call (`num_clamped_add`/1), `5`

  %% Unique:
  %%    _73
  _203 = succeeded:body _73
  br _203, ^203, ^1

203:
  %% Argument types:
  %%    _73 => number(99, '+inf')
  %% Unique:
  %%    _73
  _231 = bif:'=:=' _73, `105`
  br _231, ^230, ^205

230:
  %% bif_SUITE.erl:254
  %% Result type:
  %%    number(99, '+inf')
  _74 = call (`num_clamped_add`/1), `5.0`

  %% Unique:
  %%    _74
  _206 = succeeded:body _74
  br _206, ^206, ^1

206:
  %% Argument types:
  %%    _74 => number(99, '+inf')
  %% Unique:
  %%    _74
  _228 = bif:'=:=' _74, `105.0`
  br _228, ^227, ^208

227:
  %% bif_SUITE.erl:255
  %% Result type:
  %%    number(99, '+inf')
  _75 = call (`num_clamped_add`/1), `a`

  %% Unique:
  %%    _75
  _209 = succeeded:body _75
  br _209, ^209, ^1

209:
  %% Argument types:
  %%    _75 => number(99, '+inf')
  %% Unique:
  %%    _75
  _225 = bif:'=:=' _75, `110`
  br _225, ^224, ^211

224:
  %% bif_SUITE.erl:256
  %% Result type:
  %%    number(99, '+inf')
  _76 = call (`num_clamped_add`/1), `{a,b,c}`

  %% Unique:
  %%    _76
  _212 = succeeded:body _76
  br _212, ^212, ^1

212:
  %% Argument types:
  %%    _76 => number(99, '+inf')
  %% Unique:
  %%    _76
  _222 = bif:'=:=' _76, `110`
  br _222, ^221, ^214

221:
  %% bif_SUITE.erl:257
  %% Result type:
  %%    number(99, '+inf')
  _77 = call (`num_clamped_add`/1), `{a,b,c}`

  %% Unique:
  %%    _77
  _215 = succeeded:body _77
  br _215, ^215, ^1

215:
  %% Argument types:
  %%    _77 => number(99, '+inf')
  %% Unique:
  %%    _77
  _219 = bif:'=:=' _77, `110`
  br _219, ^218, ^217

218:
  %% Result type:
  %%    'ok'
  ret `ok`

217:
  %% bif_SUITE.erl:257
  %% Unique:
  %%    _77
  _78 = match_fail `badmatch`, _77

  %% Unique:
  %%    _78
  _220 = succeeded:body _78
  br ^1

214:
  %% bif_SUITE.erl:256
  %% Unique:
  %%    _76
  _79 = match_fail `badmatch`, _76

  %% Unique:
  %%    _79
  _223 = succeeded:body _79
  br ^1

211:
  %% bif_SUITE.erl:255
  %% Unique:
  %%    _75
  _80 = match_fail `badmatch`, _75

  %% Unique:
  %%    _80
  _226 = succeeded:body _80
  br ^1

208:
  %% bif_SUITE.erl:254
  %% Unique:
  %%    _74
  _81 = match_fail `badmatch`, _74

  %% Unique:
  %%    _81
  _229 = succeeded:body _81
  br ^1

205:
  %% bif_SUITE.erl:253
  %% Unique:
  %%    _73
  _82 = match_fail `badmatch`, _73

  %% Unique:
  %%    _82
  _232 = succeeded:body _82
  br ^1

202:
  %% bif_SUITE.erl:251
  %% Unique:
  %%    _72
  _83 = match_fail `badmatch`, _72

  %% Unique:
  %%    _83
  _235 = succeeded:body _83
  br ^1

199:
  %% bif_SUITE.erl:250
  %% Unique:
  %%    _71
  _84 = match_fail `badmatch`, _71

  %% Unique:
  %%    _84
  _238 = succeeded:body _84
  br ^1

196:
  %% bif_SUITE.erl:249
  %% Unique:
  %%    _70
  _85 = match_fail `badmatch`, _70

  %% Unique:
  %%    _85
  _241 = succeeded:body _85
  br ^1

193:
  %% bif_SUITE.erl:248
  %% Unique:
  %%    _69
  _86 = match_fail `badmatch`, _69

  %% Unique:
  %%    _86
  _244 = succeeded:body _86
  br ^1

190:
  %% bif_SUITE.erl:247
  %% Unique:
  %%    _68
  _87 = match_fail `badmatch`, _68

  %% Unique:
  %%    _87
  _247 = succeeded:body _87
  br ^1

187:
  %% bif_SUITE.erl:245
  %% Unique:
  %%    _67
  _88 = match_fail `badmatch`, _67

  %% Unique:
  %%    _88
  _250 = succeeded:body _88
  br ^1

184:
  %% bif_SUITE.erl:244
  %% Unique:
  %%    _66
  _89 = match_fail `badmatch`, _66

  %% Unique:
  %%    _89
  _253 = succeeded:body _89
  br ^1

181:
  %% bif_SUITE.erl:243
  %% Unique:
  %%    _65
  _90 = match_fail `badmatch`, _65

  %% Unique:
  %%    _90
  _256 = succeeded:body _90
  br ^1

178:
  %% bif_SUITE.erl:242
  %% Unique:
  %%    _64
  _91 = match_fail `badmatch`, _64

  %% Unique:
  %%    _91
  _259 = succeeded:body _91
  br ^1

175:
  %% bif_SUITE.erl:241
  %% Unique:
  %%    _63
  _92 = match_fail `badmatch`, _63

  %% Unique:
  %%    _92
  _262 = succeeded:body _92
  br ^1

172:
  %% bif_SUITE.erl:239
  %% Unique:
  %%    _62
  _93 = match_fail `badmatch`, _62

  %% Unique:
  %%    _93
  _264 = succeeded:body _93
  br ^1

168:
  %% bif_SUITE.erl:238
  %% Unique:
  %%    _61
  _94 = match_fail `badmatch`, _61

  %% Unique:
  %%    _94
  _266 = succeeded:body _94
  br ^1

164:
  %% bif_SUITE.erl:237
  %% Unique:
  %%    _60
  _95 = match_fail `badmatch`, _60

  %% Unique:
  %%    _95
  _268 = succeeded:body _95
  br ^1

160:
  %% bif_SUITE.erl:236
  %% Unique:
  %%    _59
  _96 = match_fail `badmatch`, _59

  %% Unique:
  %%    _96
  _270 = succeeded:body _96
  br ^1

156:
  %% bif_SUITE.erl:234
  %% Unique:
  %%    _58
  _97 = match_fail `badmatch`, _58

  %% Unique:
  %%    _97
  _273 = succeeded:body _97
  br ^1

153:
  %% bif_SUITE.erl:233
  %% Unique:
  %%    _57
  _98 = match_fail `badmatch`, _57

  %% Unique:
  %%    _98
  _276 = succeeded:body _98
  br ^1

150:
  %% bif_SUITE.erl:232
  %% Unique:
  %%    _56
  _99 = match_fail `badmatch`, _56

  %% Unique:
  %%    _99
  _279 = succeeded:body _99
  br ^1

147:
  %% bif_SUITE.erl:231
  %% Unique:
  %%    _55
  _100 = match_fail `badmatch`, _55

  %% Unique:
  %%    _100
  _282 = succeeded:body _100
  br ^1

144:
  %% bif_SUITE.erl:230
  %% Unique:
  %%    _54
  _101 = match_fail `badmatch`, _54

  %% Unique:
  %%    _101
  _285 = succeeded:body _101
  br ^1

141:
  %% bif_SUITE.erl:229
  %% Unique:
  %%    _53
  _102 = match_fail `badmatch`, _53

  %% Unique:
  %%    _102
  _288 = succeeded:body _102
  br ^1

1:
  _111 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _111
}

%% bif_SUITE.erl:264
%% Counter = 26
%% bs_ensure_opt: true
function `bif_SUITE`:`bool_min_false`(_0, _1) {
0:
  %% bif_SUITE.erl:264
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_boolean _0
  br _2, ^24, ^13

24:
  %% bif_SUITE.erl:264
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_boolean _1
  br _3, ^15, ^13

15:
  %% bif_SUITE.erl:265
  %% Argument types:
  %%    _0 => 'false' | 'true'
  %%    _1 => 'false' | 'true'
  %% Unique:
  %%    _0, 
  %%    _1
  _7 = bif:min _0, _1
  br _7, ^17, ^18

17:
  %% bif_SUITE.erl:265
  _9 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

18:
  %% Result type:
  %%    'false'
  ret `false`

13:
  %% bif_SUITE.erl:264
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-bool_min_false/2-',2}}
  _10 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _10
  _21 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% bif_SUITE.erl:267
%% Counter = 26
%% bs_ensure_opt: true
function `bif_SUITE`:`bool_min_true`(_0, _1) {
0:
  %% bif_SUITE.erl:267
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_boolean _0
  br _2, ^24, ^13

24:
  %% bif_SUITE.erl:267
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_boolean _1
  br _3, ^15, ^13

15:
  %% bif_SUITE.erl:268
  %% Argument types:
  %%    _0 => 'false' | 'true'
  %%    _1 => 'false' | 'true'
  %% Unique:
  %%    _0, 
  %%    _1
  _7 = bif:min _0, _1
  br _7, ^18, ^17

18:
  %% Result type:
  %%    'true'
  ret `true`

17:
  %% bif_SUITE.erl:268
  _9 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

13:
  %% bif_SUITE.erl:267
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-bool_min_true/2-',2}}
  _10 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _10
  _21 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% bif_SUITE.erl:270
%% Counter = 26
%% bs_ensure_opt: true
function `bif_SUITE`:`bool_max_false`(_0, _1) {
0:
  %% bif_SUITE.erl:270
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:is_boolean _0
  br _2, ^24, ^13

24:
  %% bif_SUITE.erl:270
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _3 = bif:is_boolean _1
  br _3, ^15, ^13

15:
  %% bif_SUITE.erl:271
  %% Argument types:
  %%    _0 => 'false' | 'true'
  %%    _1 => 'false' | 'true'
  %% Unique:
  %%    _0, 
  %%    _1
  _7 = bif:max _0, _1
  br _7, ^17, ^18

17:
  %% bif_SUITE.erl:271
  _9 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

18:
  %% Result type:
  %%    'false'
  ret `false`

13:
  %% bif_SUITE.erl:270
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-bool_max_false/2-',2}}
  _10 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _10
  _21 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% bif_SUITE.erl:273
%% Counter = 31
%% bs_ensure_opt: true
function `bif_SUITE`:`bool_max_true`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _15 = bif:is_boolean _1
  br _15, ^15, ^14

15:
  %% bif_SUITE.erl:274
  %% Argument types:
  %%    _1 => 'false' | 'true'
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  _7 = bif:max _0, _1

  %% Argument types:
  %%    
  %% Unique:
  %%    _7
  _28 = bif:'=:=' _7, `true`
  br _28, ^27, ^17

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_boolean _0
  br _20, ^23, ^19

23:
  %% Result type:
  %%    'true'
  ret `true`

19:
  %% bif_SUITE.erl:275
  _9 = match_fail `if_clause`

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br ^1

17:
  %% bif_SUITE.erl:274
  %% Unique:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br ^1

14:
  %% bif_SUITE.erl:273
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-bool_max_true/2-',2}}
  _11 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _11
  _30 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% bif_SUITE.erl:280
%% Counter = 23
%% bs_ensure_opt: true
function `bif_SUITE`:`max_number`(_0) {
0:
  %% bif_SUITE.erl:281
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:trunc _0

  %% Unique:
  %%    _2
  _17 = succeeded:body _2
  br _17, ^17, ^1

17:
  %% bif_SUITE.erl:281
  %% Argument types:
  %%    _0 => number()
  %% Unique:
  %%    _0
  _1 = bif:max _0, `1`

  %% Argument types:
  %%    _2 => integer()
  %%    _1 => number(1, '+inf')
  %% Unique:
  %%    _1, 
  %%    _2
  Res = put_tuple _2, _1

  %% bif_SUITE.erl:282
  %% Argument types:
  %%    _0 => number()
  %% Unique:
  %%    _0
  _4 = bif:max `1`, _0

  %% Argument types:
  %%    _2 => integer()
  %%    _4 => number(1, '+inf')
  %% Unique:
  %%    _2, 
  %%    _4
  _8 = put_tuple _2, _4

  %% Argument types:
  %%    _8 => {integer(), number(1, '+inf')}
  %%    Res => {integer(), number(1, '+inf')}
  %% Unique:
  %%    _8, 
  %%    Res
  _21 = bif:'=:=' _8, Res
  br _21, ^21, ^20

21:
  %% Result type:
  %%    {integer(), number(1, '+inf')}
  %% Unique:
  %%    _8
  ret _8

20:
  %% bif_SUITE.erl:282
  %% Unique:
  %%    _8
  _14 = match_fail `badmatch`, _8

  %% Unique:
  %%    _14
  _22 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% bif_SUITE.erl:284
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | -1..100
function `bif_SUITE`:`min_increment`(_0) {
0:
  %% bif_SUITE.erl:285
  %% Argument types:
  %%    _0 => 'a' | -1..100
  %% Unique:
  %%    _0
  _1 = bif:min `10`, _0

  %% bif_SUITE.erl:285
  %% Argument types:
  %%    _1 => number(-1, 10)
  %% Unique:
  %%    _1
  Res = bif:'+' _1, `1`

  %% Unique:
  %%    Res
  _17 = succeeded:body Res
  br _17, ^17, ^1

17:
  %% bif_SUITE.erl:286
  %% Argument types:
  %%    _0 => 'a' | -1..100
  %% Unique:
  %%    _0
  _3 = bif:min _0, `10`

  %% bif_SUITE.erl:286
  %% Argument types:
  %%    _3 => number(-1, 10)
  %% Unique:
  %%    _3
  _12 = bif:'+' _3, `1`

  %% Unique:
  %%    _12
  _18 = succeeded:body _12
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _12 => number(0, 11)
  %%    Res => number(0, 11)
  %% Unique:
  %%    _12, 
  %%    Res
  _21 = bif:'=:=' _12, Res
  br _21, ^21, ^20

21:
  %% bif_SUITE.erl:287
  %% Unique:
  %%    _0
  _5 = call (`id`/1), _0

  %% Aliased:
  %%    _5
  _22 = succeeded:body _5
  br _22, ^22, ^1

22:
  %% bif_SUITE.erl:287
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _6 = bif:min _5, `10`

  %% bif_SUITE.erl:287
  %% Argument types:
  %%    _6 => number('-inf', 10)
  %% Unique:
  %%    _6
  _10 = bif:'+' _6, `1`

  %% Unique:
  %%    _10
  _23 = succeeded:body _10
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _10 => number('-inf', 11)
  %%    Res => number(0, 11)
  %% Unique:
  %%    _10, 
  %%    Res
  _26 = bif:'=:=' _10, Res
  br _26, ^26, ^25

26:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _10
  ret _10

25:
  %% bif_SUITE.erl:287
  %% Unique:
  %%    _10
  _13 = match_fail `badmatch`, _10

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br ^1

20:
  %% bif_SUITE.erl:286
  %% Unique:
  %%    _12
  _14 = match_fail `badmatch`, _12

  %% Unique:
  %%    _14
  _28 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% bif_SUITE.erl:289
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     -1..11
function `bif_SUITE`:`int_clamped_add`(_0) {
0:
  %% bif_SUITE.erl:290
  %% Argument types:
  %%    _0 => -1..11
  %% Unique:
  %%    _0
  _1 = bif:max _0, `0`

  %% bif_SUITE.erl:290
  %% Argument types:
  %%    _1 => 0..11
  %% Unique:
  %%    _1
  _2 = bif:min _1, `10`

  %% bif_SUITE.erl:290
  %% Argument types:
  %%    _2 => 0..10
  %% Unique:
  %%    _2
  _4 = bif:'+' _2, `100`
  %% Result type:
  %%    100..'+inf'
  %% Unique:
  %%    _4
  ret _4
}

%% bif_SUITE.erl:292
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | number(-1, 11) | {'a', 'b', 'c'}
function `bif_SUITE`:`num_clamped_add`(_0) {
0:
  %% bif_SUITE.erl:293
  %% Argument types:
  %%    _0 => 'a' | number(-1, 11) | {'a', 'b', 'c'}
  %% Unique:
  %%    _0
  _1 = bif:max _0, `0`

  %% bif_SUITE.erl:293
  %% Argument types:
  %%    _1 => 'a' | number(-1, 11) | {'a', 'b', 'c'}
  %% Unique:
  %%    _1
  _2 = bif:min _1, `10`

  %% bif_SUITE.erl:293
  %% Argument types:
  %%    _2 => number(-1, 10)
  %% Unique:
  %%    _2
  _3 = bif:'+' _2, `100`

  %% Unique:
  %%    _3
  _6 = succeeded:body _3
  br _6, ^6, ^1

6:
  %% Result type:
  %%    number(99, '+inf')
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% bif_SUITE.erl:299
%% Counter = 4
%% bs_ensure_opt: true
function `bif_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `bif_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `bif_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `bif_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `bif_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% bif_SUITE.erl:103
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _6 =>
%%     list(any())
function `bif_SUITE`:`'-trunc_and_friends/1-lc$^0/1-0-'`(_6) {
0:
  %% Aliased:
  %%    _6
  _53 = is_nonempty_list _6
  br _53, ^53, ^54

53:
  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _21 = get_hd _6

  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _6
  _20 = get_tl _6

  %% bif_SUITE.erl:101
  %% Aliased:
  %%    _21
  Atom = call (`erl_syntax`:`function_name`/1), _21

  %% Aliased:
  %%    Atom
  _50 = succeeded:body Atom
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Atom
  _22 = put_list Atom, `[]`

  %% Argument types:
  %%    _22 => nonempty_list(any())
  %% Unique:
  %%    _22
  _23 = put_list _22, `[[]]`

  %% Argument types:
  %%    _23 => nonempty_list(list(any()))
  %% Unique:
  %%    _23
  _24 = put_tuple `template`, `application`, `{attr,102,[],none}`, _23

  %% bif_SUITE.erl:102
  %% Unique:
  %%    _24
  _9 = call (`merl`:`tree`/1), _24

  %% Aliased:
  %%    _9
  _51 = succeeded:body _9
  br _51, ^51, ^1

51:
  %% bif_SUITE.erl:103
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _20
  _10 = call (`'-trunc_and_friends/1-lc$^0/1-0-'`/1), _20

  %% Aliased:
  %%    _10
  _52 = succeeded:body _10
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    _10 => list(any())
  %% Aliased:
  %%    _9, 
  %%    _10
  _44 = put_list _9, _10
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _44
  ret _44

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46

54:
  %% Result type:
  %%    nil()
  ret `[]`
}
