module beam_utils_SUITE.
exports [{all,0},
         {apply_fun,1},
         {apply_mf,1},
         {bs_init,1},
         {bs_save,1},
         {cafu,1},
         {coverage,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {id,1},
         {init_per_group,2},
         {init_per_suite,1},
         {is_not_killed,1},
         {is_not_used_at,1},
         {is_used_fr,1},
         {liveopt,1},
         {module_info,0},
         {module_info,1},
         {not_used,1},
         {otp_8949_b,1},
         {read_size_file_version,1},
         {receive_label,1},
         {scan_f,1},
         {select,1},
         {suite,0},
         {unsafe_is_function,1},
         {user_predef,1},
         {y_catch,1},
         {y_registers,1}].
attributes [].

%% beam_utils_SUITE.erl:32
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% beam_utils_SUITE.erl:34
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% beam_utils_SUITE.erl:37
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [apply_fun,apply_mf,bs_init,bs_save,is_not_killed,is_not_used_at,select,
      y_catch,otp_8949_b,liveopt,coverage,y_registers,user_predef,scan_f,cafu,
      read_size_file_version,not_used,is_used_fr,unsafe_is_function]}]`
}

%% beam_utils_SUITE.erl:60
%% Counter = 6
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`init_per_suite`(_0) {
0:
  %% beam_utils_SUITE.erl:61
  _2 = call (`test_lib`:`recompile`/1), `beam_utils_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_utils_SUITE.erl:64
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_utils_SUITE.erl:67
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_utils_SUITE.erl:70
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% beam_utils_SUITE.erl:73
%% Counter = 39
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`apply_fun`(_0) {
0:
  %% beam_utils_SUITE.erl:74
  %% Result type:
  %%    number()
  _5 = call (`do_apply_fun`/2), `false`, `false`

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _5 => number()
  %% Unique:
  %%    _5
  _37 = bif:'=:=' _5, `3`
  br _37, ^36, ^17

36:
  %% beam_utils_SUITE.erl:75
  %% Result type:
  %%    number()
  _6 = call (`do_apply_fun`/2), `false`, `true`

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => number()
  %% Unique:
  %%    _6
  _34 = bif:'=:=' _6, `3`
  br _34, ^33, ^20

33:
  %% beam_utils_SUITE.erl:76
  %% Result type:
  %%    number()
  _7 = call (`do_apply_fun`/2), `true`, `false`

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => number()
  %% Unique:
  %%    _7
  _31 = bif:'=:=' _7, `3`
  br _31, ^30, ^23

30:
  %% beam_utils_SUITE.erl:77
  %% Result type:
  %%    number()
  _8 = call (`do_apply_fun`/2), `true`, `true`

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => number()
  %% Unique:
  %%    _8
  _28 = bif:'=:=' _8, `2`
  br _28, ^27, ^26

27:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% beam_utils_SUITE.erl:77
  %% Unique:
  %%    _8
  _9 = match_fail `badmatch`, _8

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br ^1

23:
  %% beam_utils_SUITE.erl:76
  %% Unique:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _32 = succeeded:body _10
  br ^1

20:
  %% beam_utils_SUITE.erl:75
  %% Unique:
  %%    _6
  _11 = match_fail `badmatch`, _6

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br ^1

17:
  %% beam_utils_SUITE.erl:74
  %% Unique:
  %%    _5
  _12 = match_fail `badmatch`, _5

  %% Unique:
  %%    _12
  _38 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:80
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
%%    _1 =>
%%     'false' | 'true'
function `beam_utils_SUITE`:`do_apply_fun`(_0, _1) {
0:
  br _0, ^22, ^27

22:
  %% beam_utils_SUITE.erl:82
  %% Unique:
  %%    _1
  _12 = call (`id`/1), _1

  %% Aliased:
  %%    _12
  _20 = succeeded:body _12
  br _20, ^18, ^1

18:
  switch _12, ^25, [
    { `false`, ^27 },
    { `true`, ^26 }
  ]

26:
  br ^24

25:
  %% beam_utils_SUITE.erl:82
  %% Aliased:
  %%    _12
  _14 = match_fail `case_clause`, _12

  %% Unique:
  %%    _14
  _28 = succeeded:body _14
  br ^1

27:
  br ^24

24:
  _9 = phi { `1`, ^26 }, { `2`, ^27 }

  %% beam_utils_SUITE.erl:86
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-do_apply_fun/2-fun-0-'`/1) => fun((_) -> number())
  %%    _9 => 1..2
  %% Unique:
  %%    _9
  _15 = call (`'-do_apply_fun/2-fun-0-'`/1), _9

  %% Unique:
  %%    _15
  _29 = succeeded:body _15
  br _29, ^29, ^1

29:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _15
  ret _15

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_utils_SUITE.erl:88
%% Counter = 193
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`apply_mf`(_0) {
0:
  %% beam_utils_SUITE.erl:89
  _15 = call (`do_apply_mf_used`/3), `{a,b}`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _15
  _46 = succeeded:body _15
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _140 = bif:'=:=' _15, `ok`
  br _140, ^139, ^48

139:
  %% beam_utils_SUITE.erl:90
  _16 = call (`do_apply_mf_used`/3), `[a]`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _16
  _49 = succeeded:body _16
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _137 = bif:'=:=' _16, `error`
  br _137, ^187, ^51

187:
  br ^190

190:
  _55 = new_try_tag `'catch'`
  br _55, ^53, ^54

53:
  %% beam_utils_SUITE.erl:91
  _32 = call (`do_apply_mf_used`/3), `{[],b}`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _32
  _57 = succeeded:body _32
  br _57, ^57, ^54

57:
  br ^52

54:
  %% Unique:
  %%    _55
  _60 = landingpad `'catch'`, _55

  %% Aliased:
  %%    _60
  _58 = extract _60, `0`
  br ^52

52:
  _61 = phi { _58, ^54 }, { _32, ^57 }

  %% Aliased:
  %%    _61
  %% Unique:
  %%    _55
  _3 = catch_end _55, _61

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _132 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _132, ^129, ^63

129:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _17 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _126 = bif:is_tuple _17
  br _126, ^126, ^63

126:
  %% Argument types:
  %%    _17 => {...}
  %% Aliased:
  %%    _17
  _127 = bif:tuple_size _17

  %% Argument types:
  %%    _127 => 0..16777215
  %% Unique:
  %%    _127
  _128 = bif:'=:=' _127, `2`
  br _128, ^125, ^63

125:
  %% Argument types:
  %%    _17 => {any(), any()}
  %% Aliased:
  %%    _17
  _20 = get_tuple_element _17, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _124 = bif:'=:=' _20, `{case_clause,{[],b}}`
  br _124, ^124, ^63

124:
  %% beam_utils_SUITE.erl:93
  _21 = call (`do_apply_mf_killed`/3), `{error,[a]}`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _21
  _64 = succeeded:body _21
  br _64, ^64, ^1

64:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _122 = bif:'=:=' _21, `error`
  br _122, ^121, ^66

121:
  %% beam_utils_SUITE.erl:94
  _22 = call (`do_apply_mf_killed`/3), `[b]`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _22
  _67 = succeeded:body _22
  br _67, ^67, ^1

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _119 = bif:'=:=' _22, `ok`
  br _119, ^188, ^69

188:
  br ^191

191:
  _73 = new_try_tag `'catch'`
  br _73, ^71, ^72

71:
  %% beam_utils_SUITE.erl:95
  _34 = call (`do_apply_mf_killed`/3), `{a,[b]}`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _34
  _75 = succeeded:body _34
  br _75, ^75, ^72

75:
  br ^70

72:
  %% Unique:
  %%    _73
  _78 = landingpad `'catch'`, _73

  %% Aliased:
  %%    _78
  _76 = extract _78, `0`
  br ^70

70:
  _79 = phi { _76, ^72 }, { _34, ^75 }

  %% Aliased:
  %%    _79
  %% Unique:
  %%    _73
  _7 = catch_end _73, _79

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _114 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _114, ^111, ^81

111:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _23 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _108 = bif:is_tuple _23
  br _108, ^108, ^81

108:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _109 = bif:tuple_size _23

  %% Argument types:
  %%    _109 => 0..16777215
  %% Unique:
  %%    _109
  _110 = bif:'=:=' _109, `2`
  br _110, ^107, ^81

107:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Aliased:
  %%    _23
  _26 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _106 = bif:'=:=' _26, `{case_clause,{a,[b]}}`
  br _106, ^189, ^81

189:
  br ^192

192:
  _85 = new_try_tag `'catch'`
  br _85, ^83, ^84

83:
  %% beam_utils_SUITE.erl:96
  _36 = call (`do_apply_mf_killed`/3), `{error,[]}`, `beam_utils_SUITE`, `id`

  %% Aliased:
  %%    _36
  _87 = succeeded:body _36
  br _87, ^87, ^84

87:
  br ^82

84:
  %% Unique:
  %%    _85
  _90 = landingpad `'catch'`, _85

  %% Aliased:
  %%    _90
  _88 = extract _90, `0`
  br ^82

82:
  _91 = phi { _88, ^84 }, { _36, ^87 }

  %% Aliased:
  %%    _91
  %% Unique:
  %%    _85
  _9 = catch_end _85, _91

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _102 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _102, ^99, ^93

99:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _27 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _96 = bif:is_tuple _27
  br _96, ^96, ^93

96:
  %% Argument types:
  %%    _27 => {...}
  %% Aliased:
  %%    _27
  _97 = bif:tuple_size _27

  %% Argument types:
  %%    _97 => 0..16777215
  %% Unique:
  %%    _97
  _98 = bif:'=:=' _97, `2`
  br _98, ^95, ^93

95:
  %% Argument types:
  %%    _27 => {any(), any()}
  %% Aliased:
  %%    _27
  _30 = get_tuple_element _27, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _94 = bif:'=:=' _30, `{case_clause,{error,[]}}`
  br _94, ^94, ^93

94:
  %% Result type:
  %%    'ok'
  ret `ok`

93:
  %% beam_utils_SUITE.erl:96
  %% Aliased:
  %%    _9
  _37 = match_fail `badmatch`, _9

  %% Unique:
  %%    _37
  _105 = succeeded:body _37
  br ^1

81:
  %% beam_utils_SUITE.erl:95
  %% Aliased:
  %%    _7
  _38 = match_fail `badmatch`, _7

  %% Unique:
  %%    _38
  _117 = succeeded:body _38
  br ^1

69:
  %% beam_utils_SUITE.erl:94
  %% Aliased:
  %%    _22
  _39 = match_fail `badmatch`, _22

  %% Unique:
  %%    _39
  _120 = succeeded:body _39
  br ^1

66:
  %% beam_utils_SUITE.erl:93
  %% Aliased:
  %%    _21
  _40 = match_fail `badmatch`, _21

  %% Unique:
  %%    _40
  _123 = succeeded:body _40
  br ^1

63:
  %% beam_utils_SUITE.erl:91
  %% Aliased:
  %%    _3
  _41 = match_fail `badmatch`, _3

  %% Unique:
  %%    _41
  _135 = succeeded:body _41
  br ^1

51:
  %% beam_utils_SUITE.erl:90
  %% Aliased:
  %%    _16
  _42 = match_fail `badmatch`, _16

  %% Unique:
  %%    _42
  _138 = succeeded:body _42
  br ^1

48:
  %% beam_utils_SUITE.erl:89
  %% Aliased:
  %%    _15
  _43 = match_fail `badmatch`, _15

  %% Unique:
  %%    _43
  _141 = succeeded:body _43
  br ^1

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44
}

%% beam_utils_SUITE.erl:100
%% Counter = 30
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('a') | {nil(), 'b'} | {'a', 'b'}
%%    _1 =>
%%     'beam_utils_SUITE'
%%    _2 =>
%%     'id'
function `beam_utils_SUITE`:`do_apply_mf_used`(_0, _1, _2) {
0:
  %% beam_utils_SUITE.erl:101
  %% Unique:
  %%    _0
  _10 = call (`id`/1), _0

  %% Aliased:
  %%    _10
  _17 = succeeded:body _10
  br _17, ^17, ^1

17:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _22 = bif:is_tuple _10
  br _22, ^22, ^19

22:
  %% Argument types:
  %%    _10 => {...}
  %% Aliased:
  %%    _10
  _23 = bif:tuple_size _10

  %% Argument types:
  %%    _23 => 0..16777215
  %% Unique:
  %%    _23
  _24 = bif:'=:=' _23, `2`
  br _24, ^21, ^19

21:
  %% Argument types:
  %%    _10 => {any(), any()}
  %% Aliased:
  %%    _10
  _12 = get_tuple_element _10, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _20 = bif:'=:=' _12, `[]`
  br _20, ^19, ^20

20:
  br ^18

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _26 = bif:is_list _10
  br _26, ^26, ^25

26:
  br ^18

18:
  _4 = phi { `ok`, ^20 }, { `error`, ^26 }

  %% beam_utils_SUITE.erl:107
  %% Unique:
  %%    _4
  _14 = call (`beam_utils_SUITE`:`id`/1), _4

  %% Aliased:
  %%    _14
  _28 = succeeded:body _14
  br _28, ^28, ^1

28:
  %% Aliased:
  %%    _14
  ret _14

25:
  %% beam_utils_SUITE.erl:101
  %% Aliased:
  %%    _10
  _13 = match_fail `case_clause`, _10

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_utils_SUITE.erl:109
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('b') | {'a', nonempty_list('b')} | {'error', list('a')}
%%    _1 =>
%%     'beam_utils_SUITE'
%%    _2 =>
%%     'id'
function `beam_utils_SUITE`:`do_apply_mf_killed`(_0, _1, _2) {
0:
  %% beam_utils_SUITE.erl:110
  %% Unique:
  %%    _0
  _7 = call (`id`/1), _0

  %% Aliased:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _21 = bif:is_tuple _7
  br _21, ^21, ^17

21:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _22 = bif:tuple_size _7

  %% Argument types:
  %%    _22 => 0..16777215
  %% Unique:
  %%    _22
  _23 = bif:'=:=' _22, `2`
  br _23, ^20, ^17

20:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% beam_utils_SUITE.erl:111
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _3 = bif:'=:=' _8, `[]`
  br _3, ^17, ^30

30:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _9 = get_tuple_element _7, `0`

  %% beam_utils_SUITE.erl:111
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _4 = bif:'=:=' _9, `error`
  br _4, ^19, ^17

19:
  br ^16

17:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _25 = bif:is_list _7
  br _25, ^25, ^24

25:
  br ^16

16:
  _6 = phi { `error`, ^19 }, { `ok`, ^25 }

  %% beam_utils_SUITE.erl:116
  %% Unique:
  %%    _6
  _12 = call (`beam_utils_SUITE`:`id`/1), _6

  %% Aliased:
  %%    _12
  _27 = succeeded:body _12
  br _27, ^27, ^1

27:
  %% Aliased:
  %%    _12
  ret _12

24:
  %% beam_utils_SUITE.erl:110
  %% Aliased:
  %%    _7
  _11 = match_fail `case_clause`, _7

  %% Unique:
  %%    _11
  _26 = succeeded:body _11
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:118
%% Counter = 427
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`bs_init`(_0) {
0:
  %% beam_utils_SUITE.erl:119
  _46 = call (`do_bs_init_1`/2), `[beam_utils_SUITE]`, `7`

  %% Aliased:
  %%    _46
  _126 = succeeded:body _46
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _330 = bif:'=:=' _46, `<<7>>`
  br _330, ^330, ^128

330:
  %% beam_utils_SUITE.erl:120
  %% Result type:
  %%    'error'
  _47 = call (`do_bs_init_1`/2), `[beam_utils_SUITE]`, `0.0`

  %% Aliased:
  %%    _47
  _129 = succeeded:body _47
  br _129, ^327, ^1

327:
  %% beam_utils_SUITE.erl:121
  %% Result type:
  %%    'error'
  _48 = call (`do_bs_init_1`/2), `[beam_utils_SUITE]`, `-43`

  %% Aliased:
  %%    _48
  _132 = succeeded:body _48
  br _132, ^324, ^1

324:
  %% beam_utils_SUITE.erl:122
  %% Result type:
  %%    'error'
  _49 = call (`do_bs_init_1`/2), `[beam_utils_SUITE]`, `42`

  %% Aliased:
  %%    _49
  _135 = succeeded:body _49
  br _135, ^321, ^1

321:
  %% beam_utils_SUITE.erl:124
  %% Result type:
  %%    bitstring(32,appendable)
  _50 = call (`do_bs_init_2`/1), `[]`

  %% Unique:
  %%    _50
  _138 = succeeded:body _50
  br _138, ^138, ^1

138:
  %% Argument types:
  %%    _50 => bitstring(32,appendable)
  %% Unique:
  %%    _50
  _319 = bif:'=:=' _50, `<<>>`
  br _319, ^319, ^140

319:
  %% beam_utils_SUITE.erl:125
  %% Result type:
  %%    bitstring(32,appendable)
  _51 = call (`do_bs_init_2`/1), `[0,4294967295]`

  %% Unique:
  %%    _51
  _141 = succeeded:body _51
  br _141, ^141, ^1

141:
  %% Argument types:
  %%    _51 => bitstring(32,appendable)
  %% Unique:
  %%    _51
  _317 = bif:'=:=' _51, `<<0,0,0,0,255,255,255,255>>`
  br _317, ^411, ^143

411:
  br ^422

422:
  _147 = new_try_tag `'catch'`
  br _147, ^145, ^146

145:
  %% beam_utils_SUITE.erl:126
  %% Result type:
  %%    bitstring(32,appendable)
  _97 = call (`do_bs_init_2`/1), `[0.5]`

  %% Unique:
  %%    _97
  _149 = succeeded:body _97
  br _149, ^149, ^146

149:
  br ^144

146:
  %% Unique:
  %%    _147
  _152 = landingpad `'catch'`, _147

  %% Aliased:
  %%    _152
  _150 = extract _152, `0`
  br ^144

144:
  _153 = phi { _150, ^146 }, { _97, ^149 }

  %% Aliased:
  %%    _153
  %% Unique:
  %%    _147
  _10 = catch_end _147, _153

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _313 = is_tagged_tuple _10, `2`, `'EXIT'`
  br _313, ^310, ^155

310:
  %% Argument types:
  %%    _10 => {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _52 = get_tuple_element _10, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _307 = is_tagged_tuple _52, `2`, `badarg`
  br _307, ^412, ^155

412:
  br ^423

423:
  _159 = new_try_tag `'catch'`
  br _159, ^157, ^158

157:
  %% beam_utils_SUITE.erl:127
  %% Result type:
  %%    bitstring(32,appendable)
  _99 = call (`do_bs_init_2`/1), `[-1]`

  %% Unique:
  %%    _99
  _161 = succeeded:body _99
  br _161, ^161, ^158

161:
  br ^156

158:
  %% Unique:
  %%    _159
  _164 = landingpad `'catch'`, _159

  %% Aliased:
  %%    _164
  _162 = extract _164, `0`
  br ^156

156:
  _165 = phi { _162, ^158 }, { _99, ^161 }

  %% Aliased:
  %%    _165
  %% Unique:
  %%    _159
  _13 = catch_end _159, _165

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _300 = is_tagged_tuple _13, `2`, `'EXIT'`
  br _300, ^297, ^167

297:
  %% Argument types:
  %%    _13 => {''EXIT'', any()}
  %% Aliased:
  %%    _13
  _56 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _294 = is_tagged_tuple _56, `2`, `badarg`
  br _294, ^413, ^167

413:
  br ^424

424:
  _171 = new_try_tag `'catch'`
  br _171, ^169, ^170

169:
  %% beam_utils_SUITE.erl:128
  %% Result type:
  %%    bitstring(32,appendable)
  _101 = call (`do_bs_init_2`/1), `[4294967296]`

  %% Unique:
  %%    _101
  _173 = succeeded:body _101
  br _173, ^173, ^170

173:
  br ^168

170:
  %% Unique:
  %%    _171
  _176 = landingpad `'catch'`, _171

  %% Aliased:
  %%    _176
  _174 = extract _176, `0`
  br ^168

168:
  _177 = phi { _174, ^170 }, { _101, ^173 }

  %% Aliased:
  %%    _177
  %% Unique:
  %%    _171
  _16 = catch_end _171, _177

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _287 = is_tagged_tuple _16, `2`, `'EXIT'`
  br _287, ^284, ^179

284:
  %% Argument types:
  %%    _16 => {''EXIT'', any()}
  %% Aliased:
  %%    _16
  _60 = get_tuple_element _16, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _281 = is_tagged_tuple _60, `2`, `badarg`
  br _281, ^278, ^179

278:
  %% beam_utils_SUITE.erl:130
  %% Result type:
  %%    bitstring(8)
  _64 = call (`do_bs_init_3`/3), `{tag,0}`, `0`, `0`

  %% Aliased:
  %%    _64
  _180 = succeeded:body _64
  br _180, ^180, ^1

180:
  %% Argument types:
  %%    _64 => bitstring(8)
  %% Aliased:
  %%    _64
  _276 = bif:'=:=' _64, `<<>>`
  br _276, ^276, ^182

276:
  %% beam_utils_SUITE.erl:131
  %% Result type:
  %%    bitstring(8)
  _65 = call (`do_bs_init_3`/3), `{tag,0}`, `2`, `1`

  %% Aliased:
  %%    _65
  _183 = succeeded:body _65
  br _183, ^183, ^1

183:
  %% Argument types:
  %%    _65 => bitstring(8)
  %% Aliased:
  %%    _65
  _274 = bif:'=:=' _65, `<<0>>`
  br _274, ^274, ^185

274:
  %% beam_utils_SUITE.erl:133
  _66 = call (`do_bs_init_4`/2), `[]`, `false`

  %% Aliased:
  %%    _66
  _186 = succeeded:body _66
  br _186, ^186, ^1

186:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _272 = bif:'=:=' _66, `<<"_build/shared">>`
  br _272, ^272, ^188

272:
  %% beam_utils_SUITE.erl:134
  _67 = call (`do_bs_init_4`/2), `<<"abc">>`, `false`

  %% Aliased:
  %%    _67
  _189 = succeeded:body _67
  br _189, ^189, ^1

189:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _270 = bif:'=:=' _67, `<<"abc/shared">>`
  br _270, ^270, ^191

270:
  %% beam_utils_SUITE.erl:135
  _68 = call (`do_bs_init_4`/2), `<<"foo">>`, `true`

  %% Aliased:
  %%    _68
  _192 = succeeded:body _68
  br _192, ^192, ^1

192:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _268 = bif:'=:=' _68, `<<"foo/foo">>`
  br _268, ^268, ^194

268:
  %% beam_utils_SUITE.erl:136
  _69 = call (`do_bs_init_4`/2), `[]`, `not_boolean`

  %% Aliased:
  %%    _69
  _195 = succeeded:body _69
  br _195, ^195, ^1

195:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _266 = bif:'=:=' _69, `error`
  br _266, ^265, ^197

265:
  %% beam_utils_SUITE.erl:141
  %% Result type:
  %%    nonempty_list(bitstring(8))
  _70 = call (`do_bs_init_5`/1), `#{domain => -8798798,id => 17575,tag => value}`

  %% Aliased:
  %%    _70
  _198 = succeeded:body _70
  br _198, ^263, ^1

263:
  %% Argument types:
  %%    _70 => nonempty_list(bitstring(8))
  %% Aliased:
  %%    _70
  _72 = get_hd _70

  %% Argument types:
  %%    _70 => nonempty_list(bitstring(8))
  %% Aliased:
  %%    _70
  _71 = get_tl _70

  %% Argument types:
  %%    _72 => bitstring(8)
  %% Aliased:
  %%    _72
  _73 = bs_start_match `new`, _72
  _417 = bs_ensure _73, `40`, `1`
  _418 = succeeded:guard _417
  br _418, ^416, ^200

416:
  %% Argument types:
  %%    _417 => bs_context(8)
  %% Aliased:
  %%    _73
  %% Anno: #{ensured => true}
  _74 = bs_match `string`, _417, `<<10,0,1>>`

  %% Aliased:
  %%    _74
  _201 = succeeded:guard _74
  br _201, ^201, ^200

201:
  %% beam_utils_SUITE.erl:140
  %% Argument types:
  %%    _74 => bs_context(8)
  %% Aliased:
  %%    _74
  %% Anno: #{ensured => true}
  _75 = bs_match `integer`, _74, `[signed,big]`, `16`, `1`

  %% Aliased:
  %%    _75
  _202 = succeeded:guard _75
  br _202, ^202, ^200

202:
  %% Aliased:
  %%    _75
  _76 = bs_extract _75

  %% Aliased:
  %%    _75
  _261 = bs_test_tail _75, `0`
  br _261, ^261, ^200

261:
  %% Aliased:
  %%    _71
  _260 = is_nonempty_list _71
  br _260, ^260, ^200

260:
  %% Argument types:
  %%    _71 => nonempty_list(bitstring(8))
  %% Aliased:
  %%    _71
  _78 = get_hd _71

  %% Argument types:
  %%    _71 => nonempty_list(bitstring(8))
  %% Aliased:
  %%    _71
  _77 = get_tl _71

  %% Argument types:
  %%    _78 => bitstring(8)
  %% Aliased:
  %%    _78
  _79 = bs_start_match `new`, _78
  _420 = bs_ensure _79, `56`, `1`
  _421 = succeeded:guard _420
  br _421, ^419, ^200

419:
  %% Argument types:
  %%    _420 => bs_context(8)
  %% Aliased:
  %%    _79
  %% Anno: #{ensured => true}
  _80 = bs_match `string`, _420, `<<8,0,2>>`

  %% Aliased:
  %%    _80
  _203 = succeeded:guard _80
  br _203, ^203, ^200

203:
  %% beam_utils_SUITE.erl:140
  %% Argument types:
  %%    _80 => bs_context(8)
  %% Aliased:
  %%    _80
  %% Anno: #{ensured => true}
  _81 = bs_match `integer`, _80, `[signed,big]`, `32`, `1`

  %% Aliased:
  %%    _81
  _204 = succeeded:guard _81
  br _204, ^204, ^200

204:
  %% Aliased:
  %%    _81
  _82 = bs_extract _81

  %% Aliased:
  %%    _81
  _258 = bs_test_tail _81, `0`
  br _258, ^258, ^200

258:
  %% Argument types:
  %%    _77 => list(bitstring(8))
  %% Aliased:
  %%    _77
  _257 = bif:'=:=' _77, `[]`
  br _257, ^257, ^200

257:
  %% beam_utils_SUITE.erl:140
  %% Argument types:
  %%    _76 => -32768..32767
  %% Unique:
  %%    _76
  _40 = bif:'=:=' _76, `17575`
  br _40, ^334, ^200

334:
  %% beam_utils_SUITE.erl:140
  %% Argument types:
  %%    _82 => -2147483648..2147483647
  %% Unique:
  %%    _82
  _41 = bif:'=:=' _82, `-8798798`
  br _41, ^414, ^200

414:
  br ^425

425:
  _210 = new_try_tag `'catch'`
  br _210, ^208, ^209

208:
  %% beam_utils_SUITE.erl:143
  %% Result type:
  %%    nonempty_list(bitstring(8))
  _103 = call (`do_bs_init_5`/1), `#{domain => -8798798,id => nil,tag => value}`

  %% Aliased:
  %%    _103
  _212 = succeeded:body _103
  br _212, ^212, ^209

212:
  br ^207

209:
  %% Unique:
  %%    _210
  _215 = landingpad `'catch'`, _210

  %% Aliased:
  %%    _215
  _213 = extract _215, `0`
  br ^207

207:
  _216 = phi { _213, ^209 }, { _103, ^212 }

  %% Aliased:
  %%    _216
  %% Unique:
  %%    _210
  _29 = catch_end _210, _216

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _253 = is_tagged_tuple _29, `2`, `'EXIT'`
  br _253, ^250, ^218

250:
  %% Argument types:
  %%    _29 => {''EXIT'', any()}
  %% Aliased:
  %%    _29
  _84 = get_tuple_element _29, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _247 = bif:is_tuple _84
  br _247, ^247, ^218

247:
  %% Argument types:
  %%    _84 => {...}
  %% Aliased:
  %%    _84
  _248 = bif:tuple_size _84

  %% Argument types:
  %%    _248 => 0..16777215
  %% Unique:
  %%    _248
  _249 = bif:'=:=' _248, `2`
  br _249, ^246, ^218

246:
  %% Argument types:
  %%    _84 => {any(), any()}
  %% Aliased:
  %%    _84
  _87 = get_tuple_element _84, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _245 = bif:'=:=' _87, `{required,id}`
  br _245, ^245, ^218

245:
  %% Argument types:
  %%    _84 => {{'required', 'id'}, any()}
  %% Aliased:
  %%    _84
  _86 = get_tuple_element _84, `1`

  %% Aliased:
  %%    _86
  _244 = is_nonempty_list _86
  br _244, ^415, ^218

415:
  br ^426

426:
  _222 = new_try_tag `'catch'`
  br _222, ^220, ^221

220:
  %% beam_utils_SUITE.erl:145
  %% Result type:
  %%    nonempty_list(bitstring(8))
  _105 = call (`do_bs_init_5`/1), `#{domain => nil,id => 17575,tag => value}`

  %% Aliased:
  %%    _105
  _224 = succeeded:body _105
  br _224, ^224, ^221

224:
  br ^219

221:
  %% Unique:
  %%    _222
  _227 = landingpad `'catch'`, _222

  %% Aliased:
  %%    _227
  _225 = extract _227, `0`
  br ^219

219:
  _228 = phi { _225, ^221 }, { _105, ^224 }

  %% Aliased:
  %%    _228
  %% Unique:
  %%    _222
  _32 = catch_end _222, _228

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _240 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _240, ^237, ^230

237:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _90 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _90
  _234 = bif:is_tuple _90
  br _234, ^234, ^230

234:
  %% Argument types:
  %%    _90 => {...}
  %% Aliased:
  %%    _90
  _235 = bif:tuple_size _90

  %% Argument types:
  %%    _235 => 0..16777215
  %% Unique:
  %%    _235
  _236 = bif:'=:=' _235, `2`
  br _236, ^233, ^230

233:
  %% Argument types:
  %%    _90 => {any(), any()}
  %% Aliased:
  %%    _90
  _93 = get_tuple_element _90, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _93
  _232 = bif:'=:=' _93, `{required,domain}`
  br _232, ^232, ^230

232:
  %% Argument types:
  %%    _90 => {{'required', 'domain'}, any()}
  %% Aliased:
  %%    _90
  _92 = get_tuple_element _90, `1`

  %% Aliased:
  %%    _92
  _231 = is_nonempty_list _92
  br _231, ^231, ^230

231:
  %% Result type:
  %%    'ok'
  ret `ok`

230:
  %% beam_utils_SUITE.erl:144
  %% Aliased:
  %%    _32
  _106 = match_fail `badmatch`, _32

  %% Unique:
  %%    _106
  _243 = succeeded:body _106
  br ^1

218:
  %% beam_utils_SUITE.erl:142
  %% Aliased:
  %%    _29
  _107 = match_fail `badmatch`, _29

  %% Unique:
  %%    _107
  _256 = succeeded:body _107
  br ^1

200:
  %% beam_utils_SUITE.erl:140
  %% Aliased:
  %%    _70
  _108 = match_fail `badmatch`, _70

  %% Unique:
  %%    _108
  _264 = succeeded:body _108
  br ^1

197:
  %% beam_utils_SUITE.erl:136
  %% Aliased:
  %%    _69
  _109 = match_fail `badmatch`, _69

  %% Unique:
  %%    _109
  _267 = succeeded:body _109
  br ^1

194:
  %% beam_utils_SUITE.erl:135
  %% Aliased:
  %%    _68
  _110 = match_fail `badmatch`, _68

  %% Unique:
  %%    _110
  _269 = succeeded:body _110
  br ^1

191:
  %% beam_utils_SUITE.erl:134
  %% Aliased:
  %%    _67
  _111 = match_fail `badmatch`, _67

  %% Unique:
  %%    _111
  _271 = succeeded:body _111
  br ^1

188:
  %% beam_utils_SUITE.erl:133
  %% Aliased:
  %%    _66
  _112 = match_fail `badmatch`, _66

  %% Unique:
  %%    _112
  _273 = succeeded:body _112
  br ^1

185:
  %% beam_utils_SUITE.erl:131
  %% Aliased:
  %%    _65
  _113 = match_fail `badmatch`, _65

  %% Unique:
  %%    _113
  _275 = succeeded:body _113
  br ^1

182:
  %% beam_utils_SUITE.erl:130
  %% Aliased:
  %%    _64
  _114 = match_fail `badmatch`, _64

  %% Unique:
  %%    _114
  _277 = succeeded:body _114
  br ^1

179:
  %% beam_utils_SUITE.erl:128
  %% Aliased:
  %%    _16
  _115 = match_fail `badmatch`, _16

  %% Unique:
  %%    _115
  _290 = succeeded:body _115
  br ^1

167:
  %% beam_utils_SUITE.erl:127
  %% Aliased:
  %%    _13
  _116 = match_fail `badmatch`, _13

  %% Unique:
  %%    _116
  _303 = succeeded:body _116
  br ^1

155:
  %% beam_utils_SUITE.erl:126
  %% Aliased:
  %%    _10
  _117 = match_fail `badmatch`, _10

  %% Unique:
  %%    _117
  _316 = succeeded:body _117
  br ^1

143:
  %% beam_utils_SUITE.erl:125
  %% Unique:
  %%    _51
  _118 = match_fail `badmatch`, _51

  %% Unique:
  %%    _118
  _318 = succeeded:body _118
  br ^1

140:
  %% beam_utils_SUITE.erl:124
  %% Unique:
  %%    _50
  _119 = match_fail `badmatch`, _50

  %% Unique:
  %%    _119
  _320 = succeeded:body _119
  br ^1

128:
  %% beam_utils_SUITE.erl:119
  %% Aliased:
  %%    _46
  _123 = match_fail `badmatch`, _46

  %% Unique:
  %%    _123
  _331 = succeeded:body _123
  br ^1

1:
  _124 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _124
}

%% beam_utils_SUITE.erl:149
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('beam_utils_SUITE')
%%    _1 =>
%%     number(-43, 42)
function `beam_utils_SUITE`:`do_bs_init_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => nonempty_list('beam_utils_SUITE')
  %% Unique:
  %%    _0
  _24 = bif:'=:=' _0, `[beam_utils_SUITE]`
  br _24, ^24, ^15

24:
  %% beam_utils_SUITE.erl:151
  %% Argument types:
  %%    _1 => number(-43, 42)
  %% Unique:
  %%    _1
  _2 = bif:is_integer _1
  br _2, ^29, ^17

29:
  %% beam_utils_SUITE.erl:151
  %% Argument types:
  %%    _1 => -43..42
  %% Unique:
  %%    _1
  _4 = bif:'>=' _1, `-42`
  br _4, ^30, ^17

30:
  %% beam_utils_SUITE.erl:151
  %% Argument types:
  %%    _1 => -42..42
  %% Unique:
  %%    _1
  _5 = bif:'<' _1, `42`
  br _5, ^21, ^17

21:
  %% beam_utils_SUITE.erl:152
  %% Argument types:
  %%    _1 => -42..41
  %% Unique:
  %%    _1
  %% Anno: #{unit => 8}
  _7 = bs_create_bin `integer`, `[1,{segment,1}]`, _1, `8`

  %% Aliased:
  %%    _7
  _22 = succeeded:body _7
  br _22, ^22, ^1

22:
  %% beam_utils_SUITE.erl:152
  %% Aliased:
  %%    _7
  _11 = call (`id`/1), _7

  %% Aliased:
  %%    _11
  _23 = succeeded:body _11
  br _23, ^23, ^1

23:
  %% Aliased:
  %%    _11
  ret _11

17:
  %% Result type:
  %%    'error'
  ret `error`

15:
  %% beam_utils_SUITE.erl:149
  %% Unique:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-do_bs_init_1/2-',2}}
  _12 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _12
  _25 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:157
%% Counter = 43
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(number(-1, 4294967296))
function `beam_utils_SUITE`:`do_bs_init_2`(_0) {
0:
  %% beam_utils_SUITE.erl:158
  _1 = bs_init_writable `256`

  %% beam_utils_SUITE.erl:158
  %% Result type:
  %%    bitstring(32,appendable)
  %% Unique:
  %%    _0, 
  %%    _1
  _38 = call (`'-do_bs_init_2/1-lbc$^0/2-0-'`/2), _0, _1

  %% Unique:
  %%    _38
  _41 = succeeded:body _38
  br _41, ^41, ^1

41:
  %% Result type:
  %%    bitstring(32,appendable)
  %% Unique:
  %%    _38
  ret _38

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% beam_utils_SUITE.erl:164
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'tag', 0}
%%    _1 =>
%%     0..2
%%    _2 =>
%%     0..1
function `beam_utils_SUITE`:`do_bs_init_3`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _1 => 0..2
  %%    _2 => 0..1
  %% Unique:
  %%    _1, 
  %%    _2
  _19 = bif:'>' _1, _2
  br _19, ^19, ^18

19:
  br ^17

18:
  br ^17

17:
  _4 = phi { _1, ^18 }, { _2, ^19 }

  %% beam_utils_SUITE.erl:169
  %% Argument types:
  %%    _4 => 0..1
  %% Unique:
  %%    _4
  %% Anno: #{unit => 8}
  _11 = bs_create_bin `integer`, `[8,{segment,1}]`, `0`, _4

  %% Aliased:
  %%    _11
  _20 = succeeded:body _11
  br _20, ^20, ^1

20:
  %% Result type:
  %%    bitstring(8)
  %% Aliased:
  %%    _11
  ret _11

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:171
%% Counter = 90
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil() | bitstring(8)
%%    _1 =>
%%     'false' | 'not_boolean' | 'true'
function `beam_utils_SUITE`:`do_bs_init_4`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:173
  %% Unique:
  %%    _0
  _23 = call (`id`/1), _0

  %% Aliased:
  %%    _23
  _44 = succeeded:body _23
  br _44, ^44, ^1

44:
  %% beam_utils_SUITE.erl:174
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _25 = bif:'=:=' _23, `[]`
  br _25, ^52, ^83

83:
  %% beam_utils_SUITE.erl:174
  %% Argument types:
  %%    _23 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _23
  _35 = bif:'=:=' _23, `false`
  br _35, ^52, ^46

52:
  br ^45

46:
  br ^45

45:
  _6 = phi { _23, ^46 }, { `<<"_build">>`, ^52 }

  %% beam_utils_SUITE.erl:177
  %% Unique:
  %%    _1
  _27 = call (`id`/1), _1

  %% Aliased:
  %%    _27
  _53 = succeeded:body _27
  br _53, ^53, ^1

53:
  switch _27, ^55, [
    { `false`, ^78 },
    { `true`, ^77 }
  ]

77:
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _58 = bif:is_binary _6
  br _58, ^58, ^57

58:
  br ^56

57:
  %% beam_utils_SUITE.erl:183
  %% Aliased:
  %%    _6
  _29 = call (`id`/1), _6

  %% Aliased:
  %%    _29
  _59 = succeeded:body _29
  br _59, ^59, ^1

59:
  br ^56

56:
  _11 = phi { _6, ^58 }, { _29, ^59 }

  %% beam_utils_SUITE.erl:186
  _31 = call (`id`/1), `<<"foo">>`

  %% Aliased:
  %%    _31
  _60 = succeeded:body _31
  br _60, ^60, ^1

60:
  %% beam_utils_SUITE.erl:187
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6, 
  %%    _31
  _20 = bif:'=:=' _31, _6
  br _20, ^81, ^62

81:
  %% beam_utils_SUITE.erl:187
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _21 = bif:is_binary _6
  br _21, ^65, ^66

65:
  br ^61

66:
  %% beam_utils_SUITE.erl:190
  %% Aliased:
  %%    _6
  _39 = call (`id`/1), _6

  %% Aliased:
  %%    _39
  _67 = succeeded:body _39
  br _67, ^67, ^1

67:
  br ^61

61:
  _9 = phi { _6, ^65 }, { _39, ^67 }

  %% beam_utils_SUITE.erl:179
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9, 
  %%    _11
  %% Anno: #{first_fragment_dies => true,unit => 8}
  _12 = bs_create_bin `append`, `[8,{segment,1}]`, _11, `all`, `binary`, `[1]`, `<<"/">>`, `all`, `binary`, `[8,{segment,3}]`, _9, `all`

  %% Aliased:
  %%    _12
  _69 = succeeded:body _12
  br _69, ^69, ^1

69:
  %% beam_utils_SUITE.erl:179
  %% Aliased:
  %%    _12
  _41 = call (`id`/1), _12

  %% Aliased:
  %%    _41
  _70 = succeeded:body _41
  br _70, ^70, ^1

70:
  %% Aliased:
  %%    _41
  ret _41

62:
  %% beam_utils_SUITE.erl:186
  %% Aliased:
  %%    _31
  _40 = match_fail `case_clause`, _31

  %% Unique:
  %%    _40
  _68 = succeeded:body _40
  br ^1

78:
  %% Argument types:
  %%    _6 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _6
  _73 = bif:is_binary _6
  br _73, ^73, ^72

73:
  br ^71

72:
  %% beam_utils_SUITE.erl:197
  %% Aliased:
  %%    _6
  _37 = call (`id`/1), _6

  %% Aliased:
  %%    _37
  _74 = succeeded:body _37
  br _74, ^74, ^1

74:
  br ^71

71:
  _14 = phi { _6, ^73 }, { _37, ^74 }

  %% beam_utils_SUITE.erl:193
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  %% Anno: #{first_fragment_dies => true,unit => 8}
  _15 = bs_create_bin `append`, `[8,{segment,1}]`, _14, `all`, `binary`, `[1]`, `<<"/shared">>`, `all`

  %% Aliased:
  %%    _15
  _75 = succeeded:body _15
  br _75, ^75, ^1

75:
  %% beam_utils_SUITE.erl:193
  %% Aliased:
  %%    _15
  _38 = call (`id`/1), _15

  %% Aliased:
  %%    _38
  _76 = succeeded:body _38
  br _76, ^76, ^1

76:
  %% Aliased:
  %%    _38
  ret _38

55:
  %% Result type:
  %%    'error'
  ret `error`

1:
  _42 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _42
}

%% beam_utils_SUITE.erl:204
%% Counter = 48
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{'domain' | 'id' | 'tag'=>'nil' | 'value' | -8798798..17575}
function `beam_utils_SUITE`:`do_bs_init_5`(_0) {
0:
  %% Argument types:
  %%    _0 => #{'domain' | 'id' | 'tag'=>'nil' | 'value' | -8798798..17575}
  %% Aliased:
  %%    _0
  _12 = get_map_element _0, `domain`

  %% Aliased:
  %%    _12
  _23 = succeeded:guard _12
  br _23, ^23, ^22

23:
  %% Argument types:
  %%    _0 => #{'domain' | 'id' | 'tag'=>'nil' | 'value' | -8798798..17575}
  %% Aliased:
  %%    _0
  _11 = get_map_element _0, `id`

  %% Aliased:
  %%    _11
  _24 = succeeded:guard _11
  br _24, ^24, ^22

24:
  %% Argument types:
  %%    _0 => #{'domain' | 'id' | 'tag'=>'nil' | 'value' | -8798798..17575}
  %% Aliased:
  %%    _0
  _10 = get_map_element _0, `tag`

  %% Aliased:
  %%    _10
  _25 = succeeded:guard _10
  br _25, ^25, ^22

25:
  %% Argument types:
  %%    _10 => 'nil' | 'value' | -8798798..17575
  %% Aliased:
  %%    _10
  _41 = bif:'=:=' _10, `value`
  br _41, ^40, ^22

40:
  %% Argument types:
  %%    _11 => 'nil' | 'value' | -8798798..17575
  %% Aliased:
  %%    _11
  _31 = bif:'=:=' _11, `nil`
  br _31, ^30, ^27

30:
  %% beam_utils_SUITE.erl:207
  _4 = call (`id`/1), `{required,id}`

  %% Aliased:
  %%    _4
  _28 = succeeded:body _4
  br _28, ^28, ^1

28:
  %% beam_utils_SUITE.erl:207
  %% Aliased:
  %%    _4
  _14 = call (`erlang`:`error`/1), _4

  %% Aliased:
  %%    _14
  _29 = succeeded:body _14
  br ^1

27:
  %% beam_utils_SUITE.erl:209
  %% Argument types:
  %%    _11 => 'value' | -8798798..17575
  %% Aliased:
  %%    _11
  %% Anno: #{unit => 8}
  _15 = bs_create_bin `binary`, `[1]`, `<<10,0,1>>`, `all`, `integer`, `[1,{segment,3}]`, _11, `16`

  %% Aliased:
  %%    _15
  _32 = succeeded:body _15
  br _32, ^26, ^1

26:
  %% Argument types:
  %%    _12 => 'nil' | 'value' | -8798798..17575
  %% Aliased:
  %%    _12
  _38 = bif:'=:=' _12, `nil`
  br _38, ^37, ^34

37:
  %% beam_utils_SUITE.erl:213
  _1 = call (`id`/1), `{required,domain}`

  %% Aliased:
  %%    _1
  _35 = succeeded:body _1
  br _35, ^35, ^1

35:
  %% beam_utils_SUITE.erl:213
  %% Aliased:
  %%    _1
  _16 = call (`erlang`:`error`/1), _1

  %% Aliased:
  %%    _16
  _36 = succeeded:body _16
  br ^1

34:
  %% beam_utils_SUITE.erl:215
  %% Argument types:
  %%    _12 => 'value' | -8798798..17575
  %% Aliased:
  %%    _12
  %% Anno: #{unit => 8}
  _17 = bs_create_bin `binary`, `[1]`, `<<8,0,2>>`, `all`, `integer`, `[1,{segment,3}]`, _12, `32`

  %% Aliased:
  %%    _17
  _39 = succeeded:body _17
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _17 => bitstring(8)
  %% Aliased:
  %%    _17
  _46 = put_list _17, `[]`

  %% Argument types:
  %%    _15 => bitstring(8)
  %%    _46 => nonempty_list(bitstring(8))
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _46
  _47 = put_list _15, _46
  %% Result type:
  %%    nonempty_list(bitstring(8))
  %% Unique:
  %%    _47
  ret _47

22:
  %% beam_utils_SUITE.erl:204
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-do_bs_init_5/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _43 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_utils_SUITE.erl:218
%% Counter = 43
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`bs_save`(_0) {
0:
  %% beam_utils_SUITE.erl:219
  %% Result type:
  %%    {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  _6 = call (`do_bs_save`/1), `<<62:6>>`

  %% Aliased:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  %% Aliased:
  %%    _6
  _41 = bif:'=:=' _6, `{a,30,<<>>}`
  br _41, ^41, ^20

41:
  %% beam_utils_SUITE.erl:220
  %% Result type:
  %%    {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  _7 = call (`do_bs_save`/1), `<<253,63:6>>`

  %% Aliased:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  %% Aliased:
  %%    _7
  _39 = bif:'=:=' _7, `{b,127,<<>>}`
  br _39, ^39, ^23

39:
  %% beam_utils_SUITE.erl:221
  %% Result type:
  %%    {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  _8 = call (`do_bs_save`/1), `<<255,63:6>>`

  %% Aliased:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  %% Aliased:
  %%    _8
  _37 = bif:'=:=' _8, `{c,127,<<>>}`
  br _37, ^37, ^26

37:
  %% beam_utils_SUITE.erl:222
  %% Result type:
  %%    {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  _9 = call (`do_bs_save`/1), `<<127,63:6>>`

  %% Aliased:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _9 => {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  %% Aliased:
  %%    _9
  _35 = bif:'=:=' _9, `{c,127,<<>>}`
  br _35, ^35, ^29

35:
  %% beam_utils_SUITE.erl:223
  %% Result type:
  %%    {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  _10 = call (`do_bs_save`/1), `<<31:6>>`

  %% Aliased:
  %%    _10
  _30 = succeeded:body _10
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _10 => {'a', 0..30, bitstring(8)} | {'b', 0..127, bitstring(8)} | {'c', 0..127, bitstring(8)} | {'d', 1024, bitstring(8)}
  %% Aliased:
  %%    _10
  _33 = bif:'=:=' _10, `{d,1024,<<>>}`
  br _33, ^33, ^32

33:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  %% beam_utils_SUITE.erl:223
  %% Aliased:
  %%    _10
  _11 = match_fail `badmatch`, _10

  %% Unique:
  %%    _11
  _34 = succeeded:body _11
  br ^1

29:
  %% beam_utils_SUITE.erl:222
  %% Aliased:
  %%    _9
  _12 = match_fail `badmatch`, _9

  %% Unique:
  %%    _12
  _36 = succeeded:body _12
  br ^1

26:
  %% beam_utils_SUITE.erl:221
  %% Aliased:
  %%    _8
  _13 = match_fail `badmatch`, _8

  %% Unique:
  %%    _13
  _38 = succeeded:body _13
  br ^1

23:
  %% beam_utils_SUITE.erl:220
  %% Aliased:
  %%    _7
  _14 = match_fail `badmatch`, _7

  %% Unique:
  %%    _14
  _40 = succeeded:body _14
  br ^1

20:
  %% beam_utils_SUITE.erl:219
  %% Aliased:
  %%    _6
  _15 = match_fail `badmatch`, _6

  %% Unique:
  %%    _15
  _42 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_utils_SUITE.erl:226
%% Counter = 89
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(2)
%%     accepts_match_context
function `beam_utils_SUITE`:`do_bs_save`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(2)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _10 = bs_start_match `new`, _0
  _69 = bs_ensure _10, `1`, `1`
  _70 = succeeded:guard _69
  br _70, ^68, ^39

68:
  %% beam_utils_SUITE.erl:226
  %% Argument types:
  %%    _69 => bs_context(2)
  %% Aliased:
  %%    _10
  %% Anno: #{ensured => true}
  _11 = bs_match `integer`, _69, `[unsigned,big]`, `1`, `1`

  %% Aliased:
  %%    _11
  _40 = succeeded:guard _11
  br _40, ^40, ^39

40:
  %% Aliased:
  %%    _11
  _12 = bs_extract _11
  _72 = bs_ensure _11, `5`, `8`
  _73 = succeeded:guard _72
  br _73, ^71, ^41

71:
  %% beam_utils_SUITE.erl:226
  %% Argument types:
  %%    _72 => bs_context(1)
  %% Aliased:
  %%    _11
  %% Anno: #{ensured => true}
  _28 = bs_match `integer`, _72, `[unsigned,big]`, `5`, `1`

  %% Aliased:
  %%    _28
  _42 = succeeded:guard _28
  br _42, ^42, ^41

42:
  %% Aliased:
  %%    _28
  _29 = bs_extract _28

  %% beam_utils_SUITE.erl:226
  %% Argument types:
  %%    _28 => bs_context(1)
  %% Aliased:
  %%    _28
  %% Anno: #{ensured => true}
  _30 = bs_match `binary`, _28, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _30
  _43 = succeeded:guard _30
  br _43, ^43, ^41

43:
  %% Aliased:
  %%    _30
  _31 = bs_extract _30

  %% Argument types:
  %%    _29 => 0..31
  %% Unique:
  %%    _29
  _44 = bif:'<' _29, `31`
  br _44, ^44, ^41

44:
  %% Argument types:
  %%    _29 => 0..30
  %%    _31 => bitstring(8)
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _29
  _32 = put_tuple `a`, _29, _31
  %% Result type:
  %%    {'a', 0..30, bitstring(8)}
  %% Unique:
  %%    _32
  ret _32

41:
  %% Argument types:
  %%    _12 => 0..1
  %% Unique:
  %%    _12
  _51 = bif:'=:=' _12, `1`
  br _51, ^50, ^45

50:
  _75 = bs_ensure _11, `13`, `8`
  _76 = succeeded:guard _75
  br _76, ^74, ^45

74:
  %% Argument types:
  %%    _75 => bs_context(1)
  %% Aliased:
  %%    _11
  %% Anno: #{ensured => true}
  _23 = bs_match `string`, _75, `<<62:6>>`

  %% Aliased:
  %%    _23
  _47 = succeeded:guard _23
  br _47, ^47, ^45

47:
  %% beam_utils_SUITE.erl:228
  %% Argument types:
  %%    _23 => bs_context(1)
  %% Aliased:
  %%    _23
  %% Anno: #{ensured => true}
  _24 = bs_match `integer`, _23, `[unsigned,big]`, `7`, `1`

  %% Aliased:
  %%    _24
  _48 = succeeded:guard _24
  br _48, ^48, ^45

48:
  %% Aliased:
  %%    _24
  _25 = bs_extract _24

  %% beam_utils_SUITE.erl:228
  %% Argument types:
  %%    _24 => bs_context(1)
  %% Aliased:
  %%    _24
  %% Anno: #{ensured => true}
  _26 = bs_match `binary`, _24, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _26
  _49 = succeeded:guard _26
  br _49, ^49, ^45

49:
  %% Aliased:
  %%    _26
  _27 = bs_extract _26

  %% Argument types:
  %%    _25 => 0..127
  %%    _27 => bitstring(8)
  %% Aliased:
  %%    _27
  %% Unique:
  %%    _25
  _33 = put_tuple `b`, _25, _27
  %% Result type:
  %%    {'b', 0..127, bitstring(8)}
  %% Unique:
  %%    _33
  ret _33

45:
  _78 = bs_ensure _11, `5`, `1`
  _79 = succeeded:guard _78
  br _79, ^77, ^39

77:
  %% Argument types:
  %%    _78 => bs_context(1)
  %% Aliased:
  %%    _11
  %% Anno: #{ensured => true}
  _13 = bs_match `string`, _78, `<<31:5>>`

  %% Aliased:
  %%    _13
  _52 = succeeded:guard _13
  br _52, ^52, ^39

52:
  _81 = bs_ensure _13, `1`, `1`
  _82 = succeeded:guard _81
  br _82, ^80, ^53

80:
  %% beam_utils_SUITE.erl:230
  %% Argument types:
  %%    _81 => bs_context(1)
  %% Aliased:
  %%    _13
  %% Anno: #{ensured => true}
  _14 = bs_match `integer`, _81, `[unsigned,big]`, `1`, `1`

  %% Aliased:
  %%    _14
  _54 = succeeded:guard _14
  br _54, ^54, ^53

54:
  %% Aliased:
  %%    _14
  _15 = bs_extract _14

  %% Argument types:
  %%    _15 => 0..1
  %% Unique:
  %%    _15
  _58 = bif:'=:=' _15, `1`
  br _58, ^57, ^53

57:
  _84 = bs_ensure _14, `7`, `8`
  _85 = succeeded:guard _84
  br _85, ^83, ^53

83:
  %% beam_utils_SUITE.erl:230
  %% Argument types:
  %%    _84 => bs_context(1)
  %% Aliased:
  %%    _14
  %% Anno: #{ensured => true}
  _16 = bs_match `integer`, _84, `[unsigned,big]`, `7`, `1`

  %% Aliased:
  %%    _16
  _55 = succeeded:guard _16
  br _55, ^55, ^53

55:
  %% Aliased:
  %%    _16
  _17 = bs_extract _16

  %% beam_utils_SUITE.erl:230
  %% Argument types:
  %%    _16 => bs_context(1)
  %% Aliased:
  %%    _16
  %% Anno: #{ensured => true}
  _18 = bs_match `binary`, _16, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _18
  _56 = succeeded:guard _18
  br _56, ^56, ^53

56:
  %% Aliased:
  %%    _18
  _19 = bs_extract _18

  %% Argument types:
  %%    _17 => 0..127
  %%    _19 => bitstring(8)
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _17
  _35 = put_tuple `c`, _17, _19
  %% Result type:
  %%    {'c', 0..127, bitstring(8)}
  %% Unique:
  %%    _35
  ret _35

53:
  _87 = bs_ensure _13, `0`, `8`
  _88 = succeeded:guard _87
  br _88, ^86, ^39

86:
  %% beam_utils_SUITE.erl:232
  %% Argument types:
  %%    _87 => bs_context(1)
  %% Aliased:
  %%    _13
  %% Anno: #{ensured => true}
  _20 = bs_match `binary`, _87, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _20
  _59 = succeeded:guard _20
  br _59, ^59, ^39

59:
  %% Aliased:
  %%    _20
  _21 = bs_extract _20

  %% Argument types:
  %%    _21 => bitstring(8)
  %% Aliased:
  %%    _21
  _34 = put_tuple `d`, `1024`, _21
  %% Result type:
  %%    {'d', 1024, bitstring(8)}
  %% Unique:
  %%    _34
  ret _34

39:
  %% Aliased:
  %%    _10
  _67 = bs_get_tail _10

  %% beam_utils_SUITE.erl:226
  %% Aliased:
  %%    _67
  %% Anno: #{inlined => {'-inlined-do_bs_save/1-',1}}
  _36 = match_fail `function_clause`, _67

  %% Unique:
  %%    _36
  _61 = succeeded:body _36
  br ^1

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66
}

%% beam_utils_SUITE.erl:235
%% Counter = 78
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`is_not_killed`(_0) {
0:
  %% Result type:
  %%    none()
  _1 = make_fun (`'-is_not_killed/1-fun-0-'`/0)

  %% beam_utils_SUITE.erl:236
  _71 = recv_marker_reserve

  %% beam_utils_SUITE.erl:236
  %% Aliased:
  %%    _1
  _12 = call (`erlang`:`spawn_monitor`/1), _1

  %% Aliased:
  %%    _12
  _29 = succeeded:body _12
  br _29, ^62, ^1

62:
  %% Argument types:
  %%    _12 => {pid(), reference()}
  %% Aliased:
  %%    _12
  _14 = get_tuple_element _12, `0`

  %% Argument types:
  %%    _12 => {pid(), reference()}
  %% Aliased:
  %%    _12
  _13 = get_tuple_element _12, `1`

  %% Unique:
  %%    _13, 
  %%    _71
  _72 = recv_marker_bind _71, _13
  br ^15

15:
  %% beam_utils_SUITE.erl:237
  %% Unique:
  %%    _13
  _8 = peek_message _13

  %% Aliased:
  %%    _8
  _55 = succeeded:guard _8
  br _55, ^53, ^54

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _45 = is_tagged_tuple _8, `5`, `'DOWN'`
  br _45, ^44, ^35

44:
  %% Argument types:
  %%    _8 => {''DOWN'', any(), any(), any(), any()}
  %% Aliased:
  %%    _8
  _19 = get_tuple_element _8, `1`

  %% Argument types:
  %%    _8 => {''DOWN'', any(), any(), any(), any()}
  %% Aliased:
  %%    _8
  _18 = get_tuple_element _8, `2`

  %% Argument types:
  %%    _8 => {''DOWN'', any(), any(), any(), any()}
  %% Aliased:
  %%    _8
  _17 = get_tuple_element _8, `3`

  %% Argument types:
  %%    _8 => {''DOWN'', any(), any(), any(), any()}
  %% Aliased:
  %%    _8
  _16 = get_tuple_element _8, `4`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _41 = bif:'=:=' _18, `process`
  br _41, ^40, ^35

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _39 = bif:'=:=' _16, `banan`
  br _39, ^38, ^35

38:
  %% beam_utils_SUITE.erl:238
  %% Argument types:
  %%    _13 => reference()
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _13
  _6 = bif:'=:=' _19, _13
  br _6, ^69, ^35

69:
  %% beam_utils_SUITE.erl:238
  %% Argument types:
  %%    _14 => pid()
  %% Aliased:
  %%    _17
  %% Unique:
  %%    _14
  _7 = bif:'=:=' _17, _14
  br _7, ^76, ^35

76:
  %% Unique:
  %%    _13
  _73 = recv_marker_clear _13
  _24 = remove_message
  br ^22

22:
  _57 = wait_timeout `0`

  %% Unique:
  %%    _57
  _58 = succeeded:body _57
  br _58, ^58, ^1

58:
  br _57, ^60, ^22

60:
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  _25 = recv_next
  br ^15

54:
  _48 = wait_timeout `infinity`

  %% Unique:
  %%    _48
  _49 = succeeded:body _48
  br _49, ^52, ^1

52:
  br ^15

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% beam_utils_SUITE.erl:243
%% Counter = 54
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`is_not_used_at`(_0) {
0:
  %% beam_utils_SUITE.erl:244
  %% Result type:
  %%    'none' | {'a', 'b'}
  _7 = call (`do_is_not_used_at`/2), `a`, `[{a,b}]`

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _7
  _52 = bif:'=:=' _7, `{a,b}`
  br _52, ^52, ^23

52:
  %% beam_utils_SUITE.erl:245
  %% Result type:
  %%    'none' | {'a', 'b'}
  _8 = call (`do_is_not_used_at`/2), `a`, `[x,{a,b}]`

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _8
  _50 = bif:'=:=' _8, `{a,b}`
  br _50, ^50, ^26

50:
  %% beam_utils_SUITE.erl:246
  %% Result type:
  %%    'none' | {'a', 'b'}
  _9 = call (`do_is_not_used_at`/2), `a`, `[{x,y},{a,b}]`

  %% Unique:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _9 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _9
  _48 = bif:'=:=' _9, `{a,b}`
  br _48, ^48, ^29

48:
  %% beam_utils_SUITE.erl:247
  %% Result type:
  %%    'none' | {'a', 'b'}
  _10 = call (`do_is_not_used_at`/2), `z`, `[{a,b}]`

  %% Unique:
  %%    _10
  _30 = succeeded:body _10
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _10 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _10
  _46 = bif:'=:=' _10, `none`
  br _46, ^45, ^32

45:
  %% beam_utils_SUITE.erl:248
  %% Result type:
  %%    'none' | {'a', 'b'}
  _11 = call (`do_is_not_used_at`/2), `a`, `[x]`

  %% Unique:
  %%    _11
  _33 = succeeded:body _11
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _11 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _11
  _43 = bif:'=:=' _11, `none`
  br _43, ^42, ^35

42:
  %% beam_utils_SUITE.erl:249
  %% Result type:
  %%    'none' | {'a', 'b'}
  _12 = call (`do_is_not_used_at`/2), `a`, `[{x,y}]`

  %% Unique:
  %%    _12
  _36 = succeeded:body _12
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _12 => 'none' | {'a', 'b'}
  %% Unique:
  %%    _12
  _40 = bif:'=:=' _12, `none`
  br _40, ^39, ^38

39:
  %% Result type:
  %%    'ok'
  ret `ok`

38:
  %% beam_utils_SUITE.erl:249
  _13 = match_fail `badmatch`, `{a,b}`

  %% Unique:
  %%    _13
  _41 = succeeded:body _13
  br ^1

35:
  %% beam_utils_SUITE.erl:248
  _14 = match_fail `badmatch`, `{a,b}`

  %% Unique:
  %%    _14
  _44 = succeeded:body _14
  br ^1

32:
  %% beam_utils_SUITE.erl:247
  _15 = match_fail `badmatch`, `{a,b}`

  %% Unique:
  %%    _15
  _47 = succeeded:body _15
  br ^1

29:
  %% beam_utils_SUITE.erl:246
  _16 = match_fail `badmatch`, `none`

  %% Unique:
  %%    _16
  _49 = succeeded:body _16
  br ^1

26:
  %% beam_utils_SUITE.erl:245
  _17 = match_fail `badmatch`, `none`

  %% Unique:
  %%    _17
  _51 = succeeded:body _17
  br ^1

23:
  %% beam_utils_SUITE.erl:244
  _18 = match_fail `badmatch`, `none`

  %% Unique:
  %%    _18
  _53 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% beam_utils_SUITE.erl:252
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 'z'
%%    _1 =>
%%     list('x' | {'a', 'b'} | {'x', 'y'})
function `beam_utils_SUITE`:`do_is_not_used_at`(_0, _1) {
0:
  %% Unique:
  %%    _1
  _25 = is_nonempty_list _1
  br _25, ^25, ^26

25:
  %% Argument types:
  %%    _1 => nonempty_list('x' | {'a', 'b'} | {'x', 'y'})
  %% Unique:
  %%    _1
  _9 = get_hd _1

  %% Argument types:
  %%    _1 => nonempty_list('x' | {'a', 'b'} | {'x', 'y'})
  %% Unique:
  %%    _1
  _8 = get_tl _1

  %% beam_utils_SUITE.erl:254
  %% Argument types:
  %%    _9 => 'x' | {'a', 'b'} | {'x', 'y'}
  %% Unique:
  %%    _9
  _20 = bif:is_tuple _9
  br _20, ^29, ^18

29:
  %% beam_utils_SUITE.erl:254
  %% Argument types:
  %%    _9 => {'a', 'b'} | {'x', 'y'}
  %% Unique:
  %%    _9
  _4 = get_tuple_element _9, `0`

  %% beam_utils_SUITE.erl:254
  %% Argument types:
  %%    _4 => 'a' | 'x'
  %%    _0 => 'a' | 'z'
  %% Unique:
  %%    _0, 
  %%    _4
  _5 = bif:'=:=' _4, _0
  br _5, ^23, ^18

23:
  %% Result type:
  %%    {'a', 'b'}
  ret `{a,b}`

18:
  %% beam_utils_SUITE.erl:257
  %% Result type:
  %%    'none' | {'a', 'b'}
  %% Unique:
  %%    _0, 
  %%    _8
  _11 = call (`do_is_not_used_at`/2), _0, _8

  %% Unique:
  %%    _11
  _24 = succeeded:body _11
  br _24, ^24, ^1

24:
  %% Result type:
  %%    'none' | {'a', 'b'}
  %% Unique:
  %%    _11
  ret _11

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13

26:
  %% Result type:
  %%    'none'
  ret `none`
}

%% beam_utils_SUITE.erl:263
%% Counter = 39
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`select`(_0) {
0:
  %% beam_utils_SUITE.erl:264
  %% Result type:
  %%    'a' | 'b' | 'c'
  _5 = call (`do_select`/3), `{select,false}`, `0`, `0`

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _5 => 'a' | 'b' | 'c'
  %% Unique:
  %%    _5
  _37 = bif:'=:=' _5, `a`
  br _37, ^36, ^17

36:
  %% beam_utils_SUITE.erl:265
  %% Result type:
  %%    'a' | 'b' | 'c'
  _6 = call (`do_select`/3), `{select,false}`, `0`, `1`

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => 'a' | 'b' | 'c'
  %% Unique:
  %%    _6
  _34 = bif:'=:=' _6, `b`
  br _34, ^33, ^20

33:
  %% beam_utils_SUITE.erl:266
  %% Result type:
  %%    'a' | 'b' | 'c'
  _7 = call (`do_select`/3), `{select,true}`, `0`, `0`

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => 'a' | 'b' | 'c'
  %% Unique:
  %%    _7
  _31 = bif:'=:=' _7, `c`
  br _31, ^30, ^23

30:
  %% beam_utils_SUITE.erl:267
  %% Result type:
  %%    'a' | 'b' | 'c'
  _8 = call (`do_select`/3), `{select,true}`, `0`, `1`

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => 'a' | 'b' | 'c'
  %% Unique:
  %%    _8
  _28 = bif:'=:=' _8, `c`
  br _28, ^27, ^26

27:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% beam_utils_SUITE.erl:267
  %% Unique:
  %%    _8
  _9 = match_fail `badmatch`, _8

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br ^1

23:
  %% beam_utils_SUITE.erl:266
  %% Unique:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _32 = succeeded:body _10
  br ^1

20:
  %% beam_utils_SUITE.erl:265
  %% Unique:
  %%    _6
  _11 = match_fail `badmatch`, _6

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br ^1

17:
  %% beam_utils_SUITE.erl:264
  %% Unique:
  %%    _5
  _12 = match_fail `badmatch`, _5

  %% Unique:
  %%    _12
  _38 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:270
%% Counter = 50
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'select', 'false' | 'true'}
%%    _1 =>
%%     0
%%    _2 =>
%%     0..1
function `beam_utils_SUITE`:`do_select`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _2 => 0..1
  %% Unique:
  %%    _2
  _20 = bif:'=:=' _2, `0`
  br _20, ^20, ^19

20:
  br ^18

19:
  br ^18

18:
  _3 = phi { `true`, ^19 }, { `same`, ^20 }

  %% beam_utils_SUITE.erl:278
  %% Argument types:
  %%    _0 => {'select', 'false' | 'true'}
  %% Unique:
  %%    _0
  _9 = get_tuple_element _0, `1`
  br _9, ^39, ^21

39:
  %% Result type:
  %%    'c'
  ret `c`

21:
  %% Unique:
  %%    _3
  _49 = bif:'=:=' _3, `true`
  br _49, ^42, ^41

42:
  %% Result type:
  %%    'b'
  ret `b`

41:
  %% Result type:
  %%    'a'
  ret `a`
}

%% beam_utils_SUITE.erl:292
%% Counter = 56
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`y_catch`(_0) {
0:
  br ^55

55:
  _23 = new_try_tag `'try'`
  br _23, ^22, ^20

22:
  %% beam_utils_SUITE.erl:294
  %% Result type:
  %%    none()
  _13 = call (`do_y_catch`/2), `<<"<?xmlX">>`, `{state}`

  %% Aliased:
  %%    _13
  _24 = succeeded:body _13
  br ^20

20:
  %% Unique:
  %%    _23
  _31 = landingpad `'try'`, _23

  %% Aliased:
  %%    _31
  _4 = extract _31, `0`

  %% Aliased:
  %%    _31
  _3 = extract _31, `1`

  %% Aliased:
  %%    _31
  _2 = extract _31, `2`

  %% Unique:
  %%    _23
  _32 = kill_try_tag _23

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _29 = bif:'=:=' _4, `throw`
  br _29, ^28, ^26

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _27 = bif:'=:=' _3, `{<<"<?xmlX">>,{state}}`
  br _27, ^36, ^26

36:
  %% Result type:
  %%    'ok'
  ret `ok`

26:
  %% Aliased:
  %%    _2, 
  %%    _3
  _15 = resume _2, _3

  %% Unique:
  %%    _15
  _30 = succeeded:body _15
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_utils_SUITE.erl:301
%% Counter = 97
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(16)
%%     accepts_match_context
%%    _1 =>
%%     {'state'}
function `beam_utils_SUITE`:`do_y_catch`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => bitstring(16)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _12 = bs_start_match `new`, _0
  _95 = bs_ensure _12, `40`, `1`
  _96 = succeeded:guard _95
  br _96, ^94, ^35

94:
  %% Argument types:
  %%    _95 => bs_context(16)
  %% Aliased:
  %%    _12
  %% Anno: #{ensured => true}
  _14 = bs_match `string`, _95, `<<"<?xml">>`

  %% Aliased:
  %%    _14
  _37 = succeeded:guard _14
  br _37, ^74, ^35

74:
  %% beam_utils_SUITE.erl:303
  %% Result type:
  %%    'false'
  %% Aliased:
  %%    _14
  %% Anno: #{bsm_info => context_reused}
  _17 = call (`do_y_catch_1`/2), _14, _1

  %% Unique:
  %%    _17
  _39 = succeeded:body _17
  br _39, ^50, ^1

50:
  %% Aliased:
  %%    _12
  _71 = bs_get_tail _12

  %% Argument types:
  %%    _71 => bitstring(16)
  %% Aliased:
  %%    _71
  _22 = put_tuple _71, `{state}`
  _56 = new_try_tag `'catch'`
  br _56, ^76, ^55

76:
  %% beam_utils_SUITE.erl:310
  %% Unique:
  %%    _22
  _30 = call (`id`/1), _22

  %% Aliased:
  %%    _30
  _58 = succeeded:body _30
  br _58, ^58, ^55

58:
  br ^53

55:
  %% Unique:
  %%    _56
  _61 = landingpad `'catch'`, _56

  %% Aliased:
  %%    _61
  _59 = extract _61, `0`
  br ^53

53:
  _62 = phi { _59, ^55 }, { _30, ^58 }

  %% Aliased:
  %%    _62
  %% Unique:
  %%    _56
  _6 = catch_end _56, _62

  %% beam_utils_SUITE.erl:312
  %% Aliased:
  %%    _6
  %% Anno: #{thrown_type => any}
  _31 = call (`erlang`:`throw`/1), _6

  %% Aliased:
  %%    _31
  _63 = succeeded:body _31
  br ^1

35:
  %% Aliased:
  %%    _12
  _72 = bs_get_tail _12

  %% beam_utils_SUITE.erl:301
  %% Aliased:
  %%    _72
  %% Anno: #{inlined => {'-inlined-do_y_catch/2-',2}}
  _32 = match_fail `function_clause`, _72, _1

  %% Unique:
  %%    _32
  _65 = succeeded:body _32
  br ^1

1:
  _70 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _70
}

%% beam_utils_SUITE.erl:315
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bs_context(8)
%%     accepts_match_context
%%    _1 =>
%%     {'state'}
function `beam_utils_SUITE`:`do_y_catch_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => bs_context(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _7 = bs_start_match `resume`, _0
  _27 = bs_ensure _7, `8`, `1`
  _28 = succeeded:guard _27
  br _28, ^26, ^15

26:
  %% beam_utils_SUITE.erl:315
  %% Aliased:
  %%    _7
  %% Anno: #{ensured => true}
  _8 = bs_match `skip`, _27, `integer`, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _8
  _16 = succeeded:guard _8
  br _16, ^17, ^15

17:
  %% Result type:
  %%    'false'
  ret `false`

15:
  %% Aliased:
  %%    _7
  _25 = bs_get_tail _7

  %% beam_utils_SUITE.erl:315
  %% Aliased:
  %%    _25
  %% Anno: #{inlined => {'-inlined-do_y_catch_1/2-',2}}
  _12 = match_fail `function_clause`, _25, _1

  %% Unique:
  %%    _12
  _19 = succeeded:body _12
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_utils_SUITE.erl:320
%% Counter = 61
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`otp_8949_b`(_0) {
0:
  %% beam_utils_SUITE.erl:321
  %% Argument types:
  %%    
  _1 = bif:self

  %% beam_utils_SUITE.erl:321
  %% Unique:
  %%    _1
  _10 = call (`erlang`:`'!'`/2), _1, `something`

  %% Aliased:
  %%    _10
  _17 = succeeded:body _10
  br _17, ^17, ^1

17:
  %% beam_utils_SUITE.erl:322
  _7 = call (`otp_8949_b`/2), `[]`, `false`

  %% Aliased:
  %%    _7
  _18 = succeeded:body _7
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _41 = bif:'=:=' _7, `value`
  br _41, ^59, ^20

59:
  br ^60

60:
  _24 = new_try_tag `'catch'`
  br _24, ^22, ^23

22:
  %% beam_utils_SUITE.erl:323
  %% Result type:
  %%    none()
  _12 = call (`otp_8949_b`/2), `[]`, `true`

  %% Aliased:
  %%    _12
  _26 = succeeded:body _12
  br ^23

23:
  %% Unique:
  %%    _24
  _29 = landingpad `'catch'`, _24

  %% Aliased:
  %%    _29
  _27 = extract _29, `0`
  br ^21

21:
  %% Aliased:
  %%    _27
  %% Unique:
  %%    _24
  _3 = catch_end _24, _27

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _36 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _36, ^33, ^32

33:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  %% beam_utils_SUITE.erl:323
  %% Aliased:
  %%    _3
  _13 = match_fail `badmatch`, _3

  %% Unique:
  %%    _13
  _39 = succeeded:body _13
  br ^1

20:
  %% beam_utils_SUITE.erl:322
  %% Aliased:
  %%    _7
  _14 = match_fail `badmatch`, _7

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_utils_SUITE.erl:327
%% Counter = 44
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil()
%%    _1 =>
%%     'false' | 'true'
function `beam_utils_SUITE`:`otp_8949_b`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:328
  Var = call (`id`/1), `value`

  %% Aliased:
  %%    Var
  _18 = succeeded:body Var
  br _18, ^41, ^1

41:
  br _1, ^20, ^19

20:
  %% beam_utils_SUITE.erl:329
  _12 = match_fail `if_clause`

  %% Unique:
  %%    _12
  _23 = succeeded:body _12
  br ^1

19:
  br ^11

11:
  %% beam_utils_SUITE.erl:333
  _7 = peek_message `none`

  %% Aliased:
  %%    _7
  _38 = succeeded:guard _7
  br _38, ^36, ^37

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _30 = bif:'=:=' _7, `something`
  br _30, ^29, ^27

29:
  _13 = remove_message

  %% beam_utils_SUITE.erl:335
  %% Aliased:
  %%    Var
  _14 = call (`id`/1), Var

  %% Aliased:
  %%    _14
  _28 = succeeded:body _14
  br _28, ^28, ^1

28:
  %% Aliased:
  %%    _14
  ret _14

27:
  _15 = recv_next
  br ^11

37:
  _31 = wait_timeout `infinity`

  %% Unique:
  %%    _31
  _32 = succeeded:body _31
  br _32, ^35, ^1

35:
  br ^11

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_utils_SUITE.erl:340
%% Counter = 54
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`liveopt`(_0) {
0:
  %% beam_utils_SUITE.erl:341
  %% Result type:
  %%    fun((_, _) -> 'void')
  F = call (`liveopt_fun`/3), `42`, `pebkac`, `user`

  %% Aliased:
  %%    F
  _25 = succeeded:body F
  br _25, ^25, ^1

25:
  %% beam_utils_SUITE.erl:342
  %% Result type:
  %%    'void'
  %% Argument types:
  %%    F => fun((_, _) -> 'void')
  %% Aliased:
  %%    F
  _11 = call F, `42`, `{alarmInfo,sctp,pebkac,user}`

  %% Aliased:
  %%    _11
  _26 = succeeded:body _11
  br _26, ^51, ^1

51:
  %% beam_utils_SUITE.erl:346
  %% Result type:
  %%    {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  _12 = call (`liveopt_guard_bif`/1), `{{alarmInfo,undefined,{abc,def},undefined},ghi}`

  %% Unique:
  %%    _12
  _29 = succeeded:body _12
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _12 => {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _12
  _32 = bif:'=:=' _12, `{{alarmInfo,undefined,{abc,def},undefined},ghi}`
  br _32, ^32, ^31

32:
  %% beam_utils_SUITE.erl:349
  %% Result type:
  %%    {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  _13 = call (`liveopt_guard_bif`/1), `{{alarmInfo,undefined,{abc},undefined},def}`

  %% Unique:
  %%    _13
  _33 = succeeded:body _13
  br _33, ^39, ^1

39:
  %% Argument types:
  %%    _13 => {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _13
  _15 = get_tuple_element _13, `0`

  %% Argument types:
  %%    _15 => {'alarmInfo', 'undefined', {'abc'} | {{'abc'}} | {'abc', 'def'}, 'undefined'}
  %% Unique:
  %%    _15
  _17 = get_tuple_element _15, `2`

  %% Argument types:
  %%    _17 => {'abc'} | {{'abc'}} | {'abc', 'def'}
  %% Unique:
  %%    _17
  _38 = bif:'=:=' _17, `{{abc}}`
  br _38, ^38, ^35

38:
  %% Argument types:
  %%    _13 => {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Argument types:
  %%    _14 => 'def' | 'ghi'
  %% Unique:
  %%    _14
  _37 = bif:'=:=' _14, `def`
  br _37, ^36, ^35

36:
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  %% beam_utils_SUITE.erl:349
  %% Unique:
  %%    _13
  _20 = match_fail `badmatch`, _13

  %% Unique:
  %%    _20
  _49 = succeeded:body _20
  br ^1

31:
  %% beam_utils_SUITE.erl:346
  %% Unique:
  %%    _12
  _21 = match_fail `badmatch`, _12

  %% Unique:
  %%    _21
  _50 = succeeded:body _21
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% beam_utils_SUITE.erl:353
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     'pebkac'
%%    _2 =>
%%     'user'
function `beam_utils_SUITE`:`liveopt_fun`(_0, _1, _2) {
0:
  %% Result type:
  %%    'void'
  _13 = make_fun (`'-liveopt_fun/3-fun-0-'`/5), `42`, `pebkac`, `user`
  %% Result type:
  %%    fun((_, _) -> 'void')
  %% Aliased:
  %%    _13
  ret _13
}

%% beam_utils_SUITE.erl:362
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
function `beam_utils_SUITE`:`liveopt_guard_bif`(_0) {
0:
  %% Argument types:
  %%    _0 => {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _0
  _17 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _17 => {'alarmInfo', 'undefined', {'abc'} | {'abc', 'def'}, 'undefined'}
  %% Unique:
  %%    _17
  _19 = get_tuple_element _17, `2`

  %% beam_utils_SUITE.erl:365
  %% Argument types:
  %%    _19 => {'abc'} | {'abc', 'def'}
  %% Unique:
  %%    _19
  _2 = bif:tuple_size _19

  %% beam_utils_SUITE.erl:365
  %% Argument types:
  %%    _2 => 1..16777215
  %% Unique:
  %%    _2
  _3 = bif:'=:=' _2, `2`
  br _3, ^40, ^43

40:
  %% Result type:
  %%    {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _0
  ret _0

43:
  %% Argument types:
  %%    _0 => {{'alarmInfo', 'undefined', {'abc'}, 'undefined'}, 'def'} | {{'alarmInfo', 'undefined', {'abc', 'def'}, 'undefined'}, 'ghi'}
  %% Unique:
  %%    _0
  _16 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _16 => 'def' | 'ghi'
  %% Unique:
  %%    _16
  _68 = put_tuple `{alarmInfo,undefined,{{abc}},undefined}`, _16
  %% Result type:
  %%    {{'alarmInfo', 'undefined', {{'abc'}}, 'undefined'}, 'def' | 'ghi'}
  %% Unique:
  %%    _68
  ret _68
}

%% beam_utils_SUITE.erl:372
%% Counter = 250
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`coverage`(_0) {
0:
  %% beam_utils_SUITE.erl:373
  %% Result type:
  %%    49..'+inf'
  _18 = call (`merchant`/1), `[[],7,false]`

  %% Unique:
  %%    _18
  _58 = succeeded:body _18
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    _18 => 49..'+inf'
  %% Unique:
  %%    _18
  _179 = bif:'=:=' _18, `49`
  br _179, ^242, ^60

242:
  br ^246

246:
  _64 = new_try_tag `'catch'`
  br _64, ^62, ^63

62:
  %% beam_utils_SUITE.erl:375
  %% Result type:
  %%    0.0
  _41 = call (`resulting`/2), `[0]`, `stone`

  %% Unique:
  %%    _41
  _66 = succeeded:body _41
  br _66, ^66, ^63

66:
  br ^61

63:
  %% Unique:
  %%    _64
  _69 = landingpad `'catch'`, _64

  %% Aliased:
  %%    _69
  _67 = extract _69, `0`
  br ^61

61:
  _70 = phi { _67, ^63 }, { `0.0`, ^66 }

  %% Aliased:
  %%    _70
  %% Unique:
  %%    _64
  _2 = catch_end _64, _70

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _174 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _174, ^171, ^72

171:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _19 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _168 = bif:is_tuple _19
  br _168, ^168, ^72

168:
  %% Argument types:
  %%    _19 => {...}
  %% Aliased:
  %%    _19
  _169 = bif:tuple_size _19

  %% Argument types:
  %%    _169 => 0..16777215
  %% Unique:
  %%    _169
  _170 = bif:'=:=' _169, `2`
  br _170, ^167, ^72

167:
  %% Argument types:
  %%    _19 => {any(), any()}
  %% Aliased:
  %%    _19
  _22 = get_tuple_element _19, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _166 = bif:'=:=' _22, `{try_clause,0}`
  br _166, ^166, ^72

166:
  %% beam_utils_SUITE.erl:376
  %% Result type:
  %%    0.0
  _23 = call (`resulting`/2), `[true]`, `stone`

  %% Unique:
  %%    _23
  _73 = succeeded:body _23
  br _73, ^243, ^1

243:
  br ^247

247:
  _79 = new_try_tag `'catch'`
  br _79, ^77, ^78

77:
  %% beam_utils_SUITE.erl:378
  %% Result type:
  %%    none()
  _43 = call (`clinic`/1), `false`

  %% Aliased:
  %%    _43
  _81 = succeeded:body _43
  br ^78

78:
  %% Unique:
  %%    _79
  _84 = landingpad `'catch'`, _79

  %% Aliased:
  %%    _84
  _82 = extract _84, `0`
  br ^76

76:
  %% Aliased:
  %%    _82
  %% Unique:
  %%    _79
  _5 = catch_end _79, _82

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _159 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _159, ^156, ^87

156:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _24 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _153 = is_tagged_tuple _24, `2`, `if_clause`
  br _153, ^244, ^87

244:
  br ^248

248:
  _91 = new_try_tag `'catch'`
  br _91, ^89, ^90

89:
  %% beam_utils_SUITE.erl:379
  %% Result type:
  %%    none()
  _45 = call (`clinic`/1), `true`

  %% Aliased:
  %%    _45
  _93 = succeeded:body _45
  br ^90

90:
  %% Unique:
  %%    _91
  _96 = landingpad `'catch'`, _91

  %% Aliased:
  %%    _96
  _94 = extract _96, `0`
  br ^88

88:
  %% Aliased:
  %%    _94
  %% Unique:
  %%    _91
  _7 = catch_end _91, _94

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _146 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _146, ^143, ^99

143:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _28 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _140 = bif:is_tuple _28
  br _140, ^140, ^99

140:
  %% Argument types:
  %%    _28 => {...}
  %% Aliased:
  %%    _28
  _141 = bif:tuple_size _28

  %% Argument types:
  %%    _141 => 0..16777215
  %% Unique:
  %%    _141
  _142 = bif:'=:=' _141, `2`
  br _142, ^139, ^99

139:
  %% Argument types:
  %%    _28 => {any(), any()}
  %% Aliased:
  %%    _28
  _31 = get_tuple_element _28, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _138 = bif:'=:=' _31, `{try_clause,"trials"}`
  br _138, ^245, ^99

245:
  br ^249

249:
  _103 = new_try_tag `'catch'`
  br _103, ^101, ^102

101:
  %% beam_utils_SUITE.erl:381
  %% Result type:
  %%    none()
  _47 = call (`town`/2), `overall`, `{{abc},alcohol}`

  %% Aliased:
  %%    _47
  _105 = succeeded:body _47
  br ^102

102:
  %% Unique:
  %%    _103
  _108 = landingpad `'catch'`, _103

  %% Aliased:
  %%    _108
  _106 = extract _108, `0`
  br ^100

100:
  %% Aliased:
  %%    _106
  %% Unique:
  %%    _103
  _9 = catch_end _103, _106

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _134 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _134, ^131, ^111

131:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _32 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _128 = is_tagged_tuple _32, `2`, `function_clause`
  br _128, ^125, ^111

125:
  %% beam_utils_SUITE.erl:383
  %% Argument types:
  %%    
  _11 = bif:self

  %% beam_utils_SUITE.erl:383
  %% Unique:
  %%    _11
  _48 = call (`erlang`:`'!'`/2), _11, `junk_message`

  %% Aliased:
  %%    _48
  _112 = succeeded:body _48
  br _112, ^112, ^1

112:
  %% beam_utils_SUITE.erl:384
  %% Result type:
  %%    {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  _36 = call (`appointment`/1), `#{"resolution" => "url"}`

  %% Aliased:
  %%    _36
  _113 = succeeded:body _36
  br _113, ^120, ^1

120:
  %% Argument types:
  %%    _36 => {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  %% Aliased:
  %%    _36
  _38 = get_tuple_element _36, `0`

  %% Argument types:
  %%    _38 => nonempty_list(108..117)
  %% Aliased:
  %%    _38
  _119 = bif:'=:=' _38, `"url"`
  br _119, ^118, ^115

118:
  %% Argument types:
  %%    _36 => {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  %% Aliased:
  %%    _36
  _37 = get_tuple_element _36, `1`

  %% Argument types:
  %%    _37 => #{'true'=>nonempty_list(108..117)}
  %% Aliased:
  %%    _37
  _39 = get_map_element _37, `true`

  %% Aliased:
  %%    _39
  _116 = succeeded:guard _39
  br _116, ^116, ^115

116:
  %% Argument types:
  %%    _39 => nonempty_list(108..117)
  %% Aliased:
  %%    _39
  _117 = bif:'=:=' _39, `"url"`
  br _117, ^117, ^115

117:
  %% Result type:
  %%    'ok'
  ret `ok`

115:
  %% beam_utils_SUITE.erl:384
  %% Aliased:
  %%    _36
  _49 = match_fail `badmatch`, _36

  %% Unique:
  %%    _49
  _124 = succeeded:body _49
  br ^1

111:
  %% beam_utils_SUITE.erl:381
  %% Aliased:
  %%    _9
  _50 = match_fail `badmatch`, _9

  %% Unique:
  %%    _50
  _137 = succeeded:body _50
  br ^1

99:
  %% beam_utils_SUITE.erl:379
  %% Aliased:
  %%    _7
  _51 = match_fail `badmatch`, _7

  %% Unique:
  %%    _51
  _149 = succeeded:body _51
  br ^1

87:
  %% beam_utils_SUITE.erl:378
  %% Aliased:
  %%    _5
  _52 = match_fail `badmatch`, _5

  %% Unique:
  %%    _52
  _162 = succeeded:body _52
  br ^1

72:
  %% beam_utils_SUITE.erl:375
  %% Aliased:
  %%    _2
  _54 = match_fail `badmatch`, _2

  %% Unique:
  %%    _54
  _177 = succeeded:body _54
  br ^1

60:
  %% beam_utils_SUITE.erl:373
  %% Unique:
  %%    _18
  _55 = match_fail `badmatch`, _18

  %% Unique:
  %%    _55
  _180 = succeeded:body _55
  br ^1

1:
  _56 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _56
}

%% beam_utils_SUITE.erl:389
%% Counter = 47
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('false' | nil() | 7)
function `beam_utils_SUITE`:`merchant`(_0) {
0:
  %% Argument types:
  %%    _0 => nonempty_list('false' | nil() | 7)
  %% Unique:
  %%    _0
  _12 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list('false' | nil() | 7)
  %% Unique:
  %%    _0
  _11 = get_tl _0

  %% Unique:
  %%    _11
  _43 = is_nonempty_list _11
  br _43, ^43, ^31

43:
  %% Argument types:
  %%    _11 => nonempty_list('false' | nil() | 7)
  %% Unique:
  %%    _11
  _14 = get_hd _11

  %% Argument types:
  %%    _11 => nonempty_list('false' | nil() | 7)
  %% Unique:
  %%    _11
  _13 = get_tl _11

  %% Unique:
  %%    _13
  _42 = is_nonempty_list _13
  br _42, ^42, ^31

42:
  %% Argument types:
  %%    _13 => nonempty_list('false' | nil() | 7)
  %% Unique:
  %%    _13
  _15 = get_tl _13

  %% Argument types:
  %%    _15 => list('false' | nil() | 7)
  %% Aliased:
  %%    _15
  _41 = bif:'=:=' _15, `[]`
  br _41, ^41, ^31

41:
  %% beam_utils_SUITE.erl:390
  _22 = call (`id`/1), `42`

  %% Aliased:
  %%    _22
  _32 = succeeded:body _22
  br _32, ^32, ^1

32:
  %% beam_utils_SUITE.erl:391
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _12
  _8 = call (`'-merchant/1-lc$^0/1-0-'`/1), _12

  %% Unique:
  %%    _8
  _33 = succeeded:body _8
  br _33, ^46, ^1

46:
  %% beam_utils_SUITE.erl:391
  %% Result type:
  %%    'false' | nil() | 7
  %% Unique:
  %%    _14
  _9 = call (`oklahoma`/2), `[]`, _14

  %% Unique:
  %%    _9
  _39 = succeeded:body _9
  br _39, ^39, ^1

39:
  %% beam_utils_SUITE.erl:392
  %% Argument types:
  %%    _9 => 'false' | nil() | 7
  %% Unique:
  %%    _9
  _27 = bif:'+' _9, `42`

  %% Unique:
  %%    _27
  _40 = succeeded:body _27
  br _40, ^40, ^1

40:
  %% Result type:
  %%    49..'+inf'
  %% Unique:
  %%    _27
  ret _27

31:
  %% beam_utils_SUITE.erl:389
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-merchant/1-',1}}
  _28 = match_fail `function_clause`, _0

  %% Unique:
  %%    _28
  _45 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_utils_SUITE.erl:393
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil()
%%    _1 =>
%%     'false' | nil() | 7
function `beam_utils_SUITE`:`oklahoma`(_0, _1) {
0:
  %% Result type:
  %%    'false' | nil() | 7
  %% Unique:
  %%    _1
  ret _1
}

%% beam_utils_SUITE.erl:395
%% Counter = 64
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'overall'
%%    _1 =>
%%     {{'abc'}, 'alcohol'}
function `beam_utils_SUITE`:`town`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:395
  %% Anno: #{inlined => {'-inlined-town/2-',2}}
  _28 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _28
  _53 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% beam_utils_SUITE.erl:400
%% Counter = 76
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('true' | 0)
%%    _1 =>
%%     'stone'
function `beam_utils_SUITE`:`resulting`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => nonempty_list('true' | 0)
  %% Unique:
  %%    _0
  _20 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list('true' | 0)
  %% Unique:
  %%    _0
  _19 = get_tl _0

  %% Argument types:
  %%    _19 => list('true' | 0)
  %% Unique:
  %%    _19
  _50 = bif:'=:=' _19, `[]`
  br _50, ^74, ^30

74:
  br ^75

75:
  _35 = new_try_tag `'try'`
  br _35, ^38, ^32

38:
  %% Argument types:
  %%    _20 => 'true' | 0
  %% Unique:
  %%    _20
  _3 = bif:'=:=' _20, `true`
  br _3, ^36, ^37

36:
  %% Unique:
  %%    _35
  _47 = kill_try_tag _35
  %% Result type:
  %%    0.0
  ret `0.0`

37:
  %% beam_utils_SUITE.erl:401
  _25 = match_fail `try_clause`, `0`

  %% Unique:
  %%    _25
  _43 = succeeded:body _25
  br ^32

32:
  %% Unique:
  %%    _35
  _45 = landingpad `'try'`, _35

  %% Aliased:
  %%    _45
  _12 = extract _45, `1`

  %% Aliased:
  %%    _45
  _11 = extract _45, `2`

  %% Unique:
  %%    _35
  _46 = kill_try_tag _35

  %% Aliased:
  %%    _11, 
  %%    _12
  _26 = resume _11, _12

  %% Unique:
  %%    _26
  _44 = succeeded:body _26
  br ^1

30:
  %% beam_utils_SUITE.erl:400
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-resulting/2-',2}}
  _27 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _27
  _52 = succeeded:body _27
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% beam_utils_SUITE.erl:409
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
function `beam_utils_SUITE`:`clinic`(_0) {
0:
  br _0, ^19, ^16

19:
  %% beam_utils_SUITE.erl:412
  _11 = match_fail `try_clause`, `"trials"`

  %% Unique:
  %%    _11
  _22 = succeeded:body _11
  br ^1

16:
  %% beam_utils_SUITE.erl:410
  _12 = match_fail `if_clause`

  %% Unique:
  %%    _12
  _23 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:416
%% Counter = 167
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`y_registers`(_0) {
0:
  br ^164

164:
  _41 = new_try_tag `'catch'`
  br _41, ^39, ^40

39:
  %% beam_utils_SUITE.erl:417
  %% Result type:
  %%    none()
  _27 = call (`economic`/2), `0.0`, `jim`

  %% Aliased:
  %%    _27
  _43 = succeeded:body _27
  br ^40

40:
  %% Unique:
  %%    _41
  _46 = landingpad `'catch'`, _41

  %% Aliased:
  %%    _46
  _44 = extract _46, `0`
  br ^38

38:
  %% Aliased:
  %%    _44
  %% Unique:
  %%    _41
  _1 = catch_end _41, _44

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _112 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _112, ^109, ^49

109:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _13 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _106 = bif:is_tuple _13
  br _106, ^106, ^49

106:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _107 = bif:tuple_size _13

  %% Argument types:
  %%    _107 => 0..16777215
  %% Unique:
  %%    _107
  _108 = bif:'=:=' _107, `2`
  br _108, ^105, ^49

105:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _16 = get_tuple_element _13, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _104 = bif:'=:=' _16, `{badfun,0}`
  br _104, ^162, ^49

162:
  br ^165

165:
  _53 = new_try_tag `'catch'`
  br _53, ^51, ^52

51:
  %% beam_utils_SUITE.erl:418
  %% Result type:
  %%    {'necessarily', 'barbara'}
  _29 = call (`louisiana`/0)

  %% Unique:
  %%    _29
  _55 = succeeded:body _29
  br _55, ^55, ^52

55:
  br ^50

52:
  %% Unique:
  %%    _53
  _58 = landingpad `'catch'`, _53

  %% Aliased:
  %%    _58
  _56 = extract _58, `0`
  br ^50

50:
  _59 = phi { _56, ^52 }, { `{necessarily,barbara}`, ^55 }

  %% Aliased:
  %%    _59
  %% Unique:
  %%    _53
  _3 = catch_end _53, _59

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _100 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _100, ^97, ^61

97:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _17 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _94 = bif:is_tuple _17
  br _94, ^94, ^61

94:
  %% Argument types:
  %%    _17 => {...}
  %% Aliased:
  %%    _17
  _95 = bif:tuple_size _17

  %% Argument types:
  %%    _95 => 0..16777215
  %% Unique:
  %%    _95
  _96 = bif:'=:=' _95, `2`
  br _96, ^93, ^61

93:
  %% Argument types:
  %%    _17 => {any(), any()}
  %% Aliased:
  %%    _17
  _20 = get_tuple_element _17, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _92 = bif:'=:=' _20, `{badmatch,apartments}`
  br _92, ^92, ^61

92:
  %% beam_utils_SUITE.erl:419
  %% Result type:
  %%    fun((_))
  _5 = call (`boxes`/1), `true`

  %% Aliased:
  %%    _5
  _62 = succeeded:body _5
  br _62, ^62, ^1

62:
  %% beam_utils_SUITE.erl:419
  %% Argument types:
  %%    (`id`/1) => fun((_))
  _21 = call (`id`/1), `{a,b}`

  %% Aliased:
  %%    _21
  _63 = succeeded:body _21
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _90 = bif:'=:=' _21, `{a,b}`
  br _90, ^163, ^65

163:
  br ^166

166:
  _69 = new_try_tag `'catch'`
  br _69, ^67, ^68

67:
  %% beam_utils_SUITE.erl:420
  %% Result type:
  %%    none()
  _31 = call (`yellow`/1), `true`

  %% Aliased:
  %%    _31
  _71 = succeeded:body _31
  br ^68

68:
  %% Unique:
  %%    _69
  _74 = landingpad `'catch'`, _69

  %% Aliased:
  %%    _74
  _72 = extract _74, `0`
  br ^66

66:
  %% Aliased:
  %%    _72
  %% Unique:
  %%    _69
  _7 = catch_end _69, _72

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _86 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _86, ^83, ^77

83:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _22 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _80 = bif:is_tuple _22
  br _80, ^80, ^77

80:
  %% Argument types:
  %%    _22 => {...}
  %% Aliased:
  %%    _22
  _81 = bif:tuple_size _22

  %% Argument types:
  %%    _81 => 0..16777215
  %% Unique:
  %%    _81
  _82 = bif:'=:=' _81, `2`
  br _82, ^79, ^77

79:
  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _25 = get_tuple_element _22, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _78 = bif:'=:=' _25, `{case_clause,webmaster}`
  br _78, ^78, ^77

78:
  %% Result type:
  %%    'ok'
  ret `ok`

77:
  %% beam_utils_SUITE.erl:420
  %% Aliased:
  %%    _7
  _32 = match_fail `badmatch`, _7

  %% Unique:
  %%    _32
  _89 = succeeded:body _32
  br ^1

65:
  %% beam_utils_SUITE.erl:419
  %% Aliased:
  %%    _21
  _33 = match_fail `badmatch`, _21

  %% Unique:
  %%    _33
  _91 = succeeded:body _33
  br ^1

61:
  %% beam_utils_SUITE.erl:418
  %% Aliased:
  %%    _3
  _34 = match_fail `badmatch`, _3

  %% Unique:
  %%    _34
  _103 = succeeded:body _34
  br ^1

49:
  %% beam_utils_SUITE.erl:417
  %% Aliased:
  %%    _1
  _35 = match_fail `badmatch`, _1

  %% Unique:
  %%    _35
  _115 = succeeded:body _35
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% beam_utils_SUITE.erl:423
%% Counter = 26
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0.0
%%    _1 =>
%%     'jim'
function `beam_utils_SUITE`:`economic`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:428
  _8 = call (`erlang`:`error`/1), `{badfun,0}`

  %% Aliased:
  %%    _8
  _21 = succeeded:body _8
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_utils_SUITE.erl:432
%% Counter = 53
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`louisiana`() {
0:
  br ^52

52:
  _22 = new_try_tag `'try'`
  br _22, ^21, ^19

21:
  %% beam_utils_SUITE.erl:436
  _12 = match_fail `badmatch`, `apartments`

  %% Unique:
  %%    _12
  _23 = succeeded:body _12
  br ^19

19:
  %% Unique:
  %%    _22
  _30 = landingpad `'try'`, _22

  %% Aliased:
  %%    _30
  _4 = extract _30, `0`

  %% Aliased:
  %%    _30
  _3 = extract _30, `1`

  %% Aliased:
  %%    _30
  _2 = extract _30, `2`

  %% Unique:
  %%    _22
  _31 = kill_try_tag _22

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _28 = bif:'=:=' _4, `throw`
  br _28, ^27, ^25

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _26 = bif:'=:=' _3, `[]`
  br _26, ^26, ^25

26:
  %% Result type:
  %%    {'necessarily', 'barbara'}
  ret `{necessarily,barbara}`

25:
  %% Aliased:
  %%    _2, 
  %%    _3
  _14 = resume _2, _3

  %% Unique:
  %%    _14
  _29 = succeeded:body _14
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% beam_utils_SUITE.erl:440
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'true'
function `beam_utils_SUITE`:`boxes`(_0) {
0:
  _5 = make_fun (`id`/1)
  %% Result type:
  %%    fun((_))
  %% Aliased:
  %%    _5
  ret _5
}

%% beam_utils_SUITE.erl:447
%% Counter = 11
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'true'
function `beam_utils_SUITE`:`yellow`(_0) {
0:
  %% beam_utils_SUITE.erl:448
  _2 = match_fail `case_clause`, `webmaster`

  %% Unique:
  %%    _2
  _9 = succeeded:body _2
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% beam_utils_SUITE.erl:455
%% Counter = 5
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(108..117)
%%    _1 =>
%%     #{'true'=>nonempty_list(108..117)}
function `beam_utils_SUITE`:`do`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => nonempty_list(108..117)
  %%    _1 => #{'true'=>nonempty_list(108..117)}
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = put_tuple _0, _1
  %% Result type:
  %%    {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  %% Unique:
  %%    _2
  ret _2
}

%% beam_utils_SUITE.erl:456
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{nonempty_list(101..117)=>nonempty_list(108..117)}
function `beam_utils_SUITE`:`appointment`(_0) {
0:
  %% Argument types:
  %%    _0 => #{nonempty_list(101..117)=>nonempty_list(108..117)}
  %% Aliased:
  %%    _0
  _8 = get_map_element _0, `"resolution"`

  %% Aliased:
  %%    _8
  _18 = succeeded:guard _8
  br _18, ^18, ^17

18:
  br ^9

9:
  %% beam_utils_SUITE.erl:457
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _28 = succeeded:guard _5
  br _28, ^26, ^27

26:
  _12 = remove_message

  %% beam_utils_SUITE.erl:457
  %% Aliased:
  %%    _8
  _1 = put_map `assoc`, `#{}`, `true`, _8

  %% beam_utils_SUITE.erl:457
  %% Result type:
  %%    {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  %% Aliased:
  %%    _1, 
  %%    _8
  _13 = call (`do`/2), _8, _1

  %% Aliased:
  %%    _13
  _29 = succeeded:body _13
  br _29, ^29, ^1

29:
  %% Result type:
  %%    {nonempty_list(108..117), #{'true'=>nonempty_list(108..117)}}
  %% Aliased:
  %%    _13
  ret _13

27:
  _21 = wait_timeout `infinity`

  %% Unique:
  %%    _21
  _22 = succeeded:body _21
  br _22, ^25, ^1

25:
  br ^9

17:
  %% beam_utils_SUITE.erl:456
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-appointment/1-',1}}
  _14 = match_fail `function_clause`, _0

  %% Unique:
  %%    _14
  _31 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_utils_SUITE.erl:460
%% Counter = 34
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`user_predef`(_0) {
0:
  %% beam_utils_SUITE.erl:461
  %% Result type:
  %%    'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  _4 = call (`user_predef`/2), `{key,"value"}`, `#{}`

  %% Aliased:
  %%    _4
  _14 = succeeded:body _4
  br _14, ^14, ^1

14:
  %% Argument types:
  %%    _4 => 'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _4
  _32 = bif:is_map _4
  br _32, ^32, ^16

32:
  %% Argument types:
  %%    _4 => #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _4
  _5 = get_map_element _4, `key`

  %% Aliased:
  %%    _5
  _17 = succeeded:guard _5
  br _17, ^17, ^16

17:
  %% Argument types:
  %%    _5 => 'defined' | nonempty_list('defined' | 97..118)
  %% Aliased:
  %%    _5
  _31 = bif:'=:=' _5, `"value"`
  br _31, ^31, ^16

31:
  %% beam_utils_SUITE.erl:462
  %% Result type:
  %%    'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  _6 = call (`user_predef`/2), `{key,"value"}`, `#{key => defined}`

  %% Aliased:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    _6 => 'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _6
  _29 = bif:is_map _6
  br _29, ^29, ^20

29:
  %% Argument types:
  %%    _6 => #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _6
  _7 = get_map_element _6, `key`

  %% Aliased:
  %%    _7
  _21 = succeeded:guard _7
  br _21, ^21, ^20

21:
  %% Argument types:
  %%    _7 => 'defined' | nonempty_list('defined' | 97..118)
  %% Aliased:
  %%    _7
  _28 = bif:'=:=' _7, `"value"`
  br _28, ^28, ^20

28:
  %% beam_utils_SUITE.erl:463
  %% Result type:
  %%    'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  _8 = call (`user_predef`/2), `{key,"value"}`, `#{key => [defined]}`

  %% Aliased:
  %%    _8
  _22 = succeeded:body _8
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _8 => 'error' | #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _8
  _26 = bif:'=:=' _8, `error`
  br _26, ^25, ^24

25:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% beam_utils_SUITE.erl:463
  %% Aliased:
  %%    _8
  _9 = match_fail `badmatch`, _8

  %% Unique:
  %%    _9
  _27 = succeeded:body _9
  br ^1

20:
  %% beam_utils_SUITE.erl:462
  %% Aliased:
  %%    _6
  _10 = match_fail `badmatch`, _6

  %% Unique:
  %%    _10
  _30 = succeeded:body _10
  br ^1

16:
  %% beam_utils_SUITE.erl:461
  %% Aliased:
  %%    _4
  _11 = match_fail `badmatch`, _4

  %% Unique:
  %%    _11
  _33 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_utils_SUITE.erl:466
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'key', nonempty_list(97..118)}
%%    _1 =>
%%     #{'key'=>'defined' | nonempty_list('defined')}
function `beam_utils_SUITE`:`user_predef`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => #{'key'=>'defined' | nonempty_list('defined')}
  %% Aliased:
  %%    _1
  _8 = get_map_element _1, `key`

  %% Aliased:
  %%    _8
  _17 = succeeded:guard _8
  br _17, ^17, ^22

17:
  %% Aliased:
  %%    _8
  %% Anno: #{was_bif_is_list => true}
  _18 = is_nonempty_list _8
  br _18, ^18, ^22

18:
  %% Result type:
  %%    'error'
  ret `error`

22:
  %% Argument types:
  %%    _0 => {'key', nonempty_list(97..118)}
  %% Unique:
  %%    _0
  _6 = get_tuple_element _0, `1`

  %% beam_utils_SUITE.erl:471
  %% Aliased:
  %%    _1, 
  %%    _6
  _9 = put_map `assoc`, _1, `key`, _6
  %% Result type:
  %%    #{'key'=>'defined' | nonempty_list('defined' | 97..118)}
  %% Aliased:
  %%    _9
  ret _9
}

%% beam_utils_SUITE.erl:475
%% Counter = 19
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`scan_f`(_0) {
0:
  %% beam_utils_SUITE.erl:476
  %% Result type:
  %%    {0..1, bitstring(8), list(bitstring(8))}
  _3 = call (`scan_f`/3), `<<0,0,0,1>>`, `1`, `[]`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    _3 => {0..1, bitstring(8), list(bitstring(8))}
  %% Aliased:
  %%    _3
  _17 = bif:'=:=' _3, `{1,<<>>,[]}`
  br _17, ^17, ^11

17:
  %% beam_utils_SUITE.erl:477
  %% Result type:
  %%    {0..1, bitstring(8), list(bitstring(8))}
  _4 = call (`scan_f`/3), `<<0,0,0,1,156,0,0,0,1>>`, `1`, `[]`

  %% Aliased:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _4 => {0..1, bitstring(8), list(bitstring(8))}
  %% Aliased:
  %%    _4
  _15 = bif:'=:=' _4, `{1,<<>>,[<<156>>]}`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_utils_SUITE.erl:477
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

11:
  %% beam_utils_SUITE.erl:476
  %% Aliased:
  %%    _3
  _6 = match_fail `badmatch`, _3

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_utils_SUITE.erl:480
%% Counter = 47
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bs_matchable(8)
%%     accepts_match_context
%%    _1 =>
%%     1
%%    _2 =>
%%     list(bitstring(8))
function `beam_utils_SUITE`:`scan_f`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => bs_matchable(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _8 = bs_start_match `new`, _0
  _45 = bs_ensure _8, `32`, `1`
  _46 = succeeded:guard _45
  br _46, ^44, ^24

44:
  %% beam_utils_SUITE.erl:480
  %% Argument types:
  %%    _45 => bs_context(8)
  %% Aliased:
  %%    _8
  %% Anno: #{ensured => true}
  _9 = bs_match `integer`, _45, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _9
  _25 = succeeded:guard _9
  br _25, ^25, ^24

25:
  %% Aliased:
  %%    _9
  _10 = bs_extract _9

  %% Argument types:
  %%    _10 => 0..4294967295
  %% Unique:
  %%    _10
  _27 = bif:'=<' _10, `1`
  br _27, ^33, ^24

33:
  %% beam_utils_SUITE.erl:482
  %% Argument types:
  %%    _9 => bs_context(8)
  %%    _10 => 0..1
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _10
  _14 = bs_match `binary`, _9, `[unsigned,big]`, _10, `8`

  %% Aliased:
  %%    _14
  _30 = succeeded:guard _14
  br _30, ^30, ^29

30:
  %% Aliased:
  %%    _14
  _15 = bs_extract _14

  %% Argument types:
  %%    _15 => bitstring(8)
  %%    _2 => list(bitstring(8))
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _2
  _18 = put_list _15, _2

  %% beam_utils_SUITE.erl:483
  %% Result type:
  %%    {0..1, bitstring(8), list(bitstring(8))}
  %% Aliased:
  %%    _14
  %% Unique:
  %%    _18
  %% Anno: #{bsm_info => context_reused}
  _19 = call (`scan_f`/3), _14, _1, _18

  %% Aliased:
  %%    _19
  _32 = succeeded:body _19
  br _32, ^32, ^1

32:
  %% Result type:
  %%    {0..1, bitstring(8), list(bitstring(8))}
  %% Aliased:
  %%    _19
  ret _19

29:
  %% Aliased:
  %%    _9
  _36 = bs_get_tail _9

  %% Argument types:
  %%    _10 => 0..1
  %%    _36 => bitstring(8)
  %%    _2 => list(bitstring(8))
  %% Aliased:
  %%    _36
  %% Unique:
  %%    _2, 
  %%    _10
  _20 = put_tuple _10, _36, _2
  %% Result type:
  %%    {0..1, bitstring(8), list(bitstring(8))}
  %% Unique:
  %%    _20
  ret _20

24:
  %% Aliased:
  %%    _8
  _42 = bs_get_tail _8

  %% beam_utils_SUITE.erl:480
  %% Aliased:
  %%    _42
  %% Unique:
  %%    _2
  %% Anno: #{inlined => {'-inlined-scan_f/3-',3}}
  _21 = match_fail `function_clause`, _42, _1, _2

  %% Unique:
  %%    _21
  _35 = succeeded:body _21
  br ^1

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41
}

%% beam_utils_SUITE.erl:489
%% Counter = 32
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`cafu`(_0) {
0:
  %% beam_utils_SUITE.erl:490
  %% Result type:
  %%    'error'
  _6 = call (`cafu`/4), `<<0,0,0,42>>`, `-1`, `0`, `{utf32,big}`

  %% Unique:
  %%    _6
  _14 = succeeded:body _6
  br _14, ^29, ^1

29:
  %% beam_utils_SUITE.erl:491
  %% Result type:
  %%    'error'
  _7 = call (`cafu`/4), `<<0,0,0,42>>`, `10`, `0`, `{utf32,big}`

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br _17, ^26, ^1

26:
  %% beam_utils_SUITE.erl:492
  %% Result type:
  %%    'error'
  _8 = call (`cafu`/4), `<<0,0,0,42>>`, `-1`, `0`, `{utf32,little}`

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^23, ^1

23:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% beam_utils_SUITE.erl:495
%% Counter = 69
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bs_matchable(32)
%%     accepts_match_context
%%    _1 =>
%%     '-inf'..10
%%    _2 =>
%%     0..'+inf'
%%    _3 =>
%%     {'utf32', 'big' | 'little'}
function `beam_utils_SUITE`:`cafu`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _0 => bs_matchable(32)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _27 = bs_start_match `new`, _0

  %% beam_utils_SUITE.erl:495
  %% Aliased:
  %%    _27
  _28 = bs_match `skip`, _27, `utf32`, `[unsigned,big]`

  %% Aliased:
  %%    _28
  _45 = succeeded:guard _28
  br _45, ^56, ^44

56:
  %% Argument types:
  %%    _3 => {'utf32', 'big' | 'little'}
  %% Unique:
  %%    _3
  _32 = get_tuple_element _3, `1`

  %% Argument types:
  %%    _32 => 'big' | 'little'
  %% Unique:
  %%    _32
  _55 = bif:'=:=' _32, `big`
  br _55, ^54, ^44

54:
  %% Argument types:
  %%    _1 => '-inf'..10
  %% Unique:
  %%    _1
  _48 = bif:'<' _1, `0`
  br _48, ^48, ^47

48:
  %% beam_utils_SUITE.erl:496
  %% Argument types:
  %%    _2 => 0..'+inf'
  %% Unique:
  %%    _2
  _4 = bif:'+' _2, `1`

  %% Unique:
  %%    _4
  _49 = succeeded:body _4
  br _49, ^49, ^1

49:
  %% beam_utils_SUITE.erl:496
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _28
  %% Unique:
  %%    _4
  %% Anno: #{bsm_info => context_reused}
  _39 = call (`cafu`/4), _28, `-1`, _4, `{utf32,big}`

  %% Unique:
  %%    _39
  _50 = succeeded:body _39
  br _50, ^50, ^1

50:
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _39
  ret _39

47:
  %% beam_utils_SUITE.erl:498
  %% Argument types:
  %%    _1 => 0..10
  %% Unique:
  %%    _1
  _7 = bif:'-' _1, `1`

  %% beam_utils_SUITE.erl:498
  %% Argument types:
  %%    _2 => 0..'+inf'
  %% Unique:
  %%    _2
  _6 = bif:'+' _2, `1`

  %% Unique:
  %%    _6
  _52 = succeeded:body _6
  br _52, ^52, ^1

52:
  %% beam_utils_SUITE.erl:498
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _28
  %% Unique:
  %%    _6, 
  %%    _7
  %% Anno: #{bsm_info => context_reused}
  _40 = call (`cafu`/4), _28, _7, _6, `{utf32,big}`

  %% Unique:
  %%    _40
  _53 = succeeded:body _40
  br _53, ^53, ^1

53:
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _40
  ret _40

44:
  %% beam_utils_SUITE.erl:499
  %% Aliased:
  %%    _27
  _34 = bs_match `skip`, _27, `utf32`, `[unsigned,little]`

  %% Aliased:
  %%    _34
  _62 = succeeded:guard _34
  br _62, ^63, ^43

63:
  %% Argument types:
  %%    _3 => {'utf32', 'big' | 'little'}
  %% Unique:
  %%    _3
  _67 = bif:'=:=' _3, `{utf32,little}`
  br _67, ^67, ^43

67:
  %% Argument types:
  %%    _1 => '-inf'..10
  %% Unique:
  %%    _1
  _64 = bif:'<' _1, `0`
  br _64, ^64, ^43

64:
  %% beam_utils_SUITE.erl:500
  %% Argument types:
  %%    _2 => 0..'+inf'
  %% Unique:
  %%    _2
  _8 = bif:'+' _2, `1`

  %% Unique:
  %%    _8
  _65 = succeeded:body _8
  br _65, ^65, ^1

65:
  %% beam_utils_SUITE.erl:500
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _34
  %% Unique:
  %%    _8
  %% Anno: #{bsm_info => context_reused}
  _38 = call (`cafu`/4), _34, `-1`, _8, `{utf32,little}`

  %% Unique:
  %%    _38
  _66 = succeeded:body _38
  br _66, ^66, ^1

66:
  %% Result type:
  %%    'error'
  %% Unique:
  %%    _38
  ret _38

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41

43:
  %% Result type:
  %%    'error'
  ret `error`
}

%% beam_utils_SUITE.erl:506
%% Counter = 48
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`receive_label`(_0) {
0:
  %% Result type:
  %%    none()
  _1 = make_fun (`'-receive_label/1-fun-0-'`/0)

  %% beam_utils_SUITE.erl:507
  %% Aliased:
  %%    _1
  Pid = call (`erlang`:`spawn_link`/1), _1

  %% Aliased:
  %%    Pid
  _22 = succeeded:body Pid
  br _22, ^22, ^1

22:
  %% beam_utils_SUITE.erl:509
  %% Argument types:
  %%    
  _4 = bif:self

  %% Argument types:
  %%    _4 => pid()
  %% Unique:
  %%    _4
  _10 = put_tuple _4, `{a,b,c}`

  %% beam_utils_SUITE.erl:509
  %% Aliased:
  %%    Pid
  %% Unique:
  %%    _10
  _15 = call (`erlang`:`'!'`/2), Pid, _10

  %% Aliased:
  %%    _15
  _23 = succeeded:body _15
  br _23, ^23, ^1

23:
  br ^11

11:
  %% beam_utils_SUITE.erl:510
  _7 = peek_message `none`

  %% Aliased:
  %%    _7
  _44 = succeeded:guard _7
  br _44, ^42, ^43

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _34 = is_tagged_tuple _7, `2`, `ok`
  br _34, ^33, ^27

33:
  %% Argument types:
  %%    _7 => {'ok', any()}
  %% Aliased:
  %%    _7
  _12 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _28 = bif:'=:=' _12, `{a,b,c}`
  br _28, ^28, ^27

28:
  _16 = remove_message

  %% beam_utils_SUITE.erl:512
  %% Aliased:
  %%    Pid
  _17 = call (`erlang`:`unlink`/1), Pid

  %% Aliased:
  %%    _17
  _29 = succeeded:body _17
  br _29, ^29, ^1

29:
  %% beam_utils_SUITE.erl:513
  %% Aliased:
  %%    Pid
  _18 = call (`erlang`:`exit`/2), Pid, `die`

  %% Aliased:
  %%    _18
  _30 = succeeded:body _18
  br _30, ^30, ^1

30:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  _19 = recv_next
  br ^11

43:
  _37 = wait_timeout `infinity`

  %% Unique:
  %%    _37
  _38 = succeeded:body _37
  br _38, ^41, ^1

41:
  br ^11

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% beam_utils_SUITE.erl:517
%% Counter = 65
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'rec_label', 'true'}
function `beam_utils_SUITE`:`do_receive_label`(_0) {
0:
  br ^11

11:
  %% beam_utils_SUITE.erl:518
  _8 = peek_message `none`

  %% Aliased:
  %%    _8
  _57 = succeeded:guard _8
  br _57, ^55, ^56

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _47 = bif:is_tuple _8
  br _47, ^47, ^28

47:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _48 = bif:tuple_size _8

  %% Argument types:
  %%    _48 => 0..16777215
  %% Unique:
  %%    _48
  _49 = bif:'=:=' _48, `2`
  br _49, ^43, ^28

43:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _12 = get_tuple_element _8, `1`
  _19 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _17 = put_tuple `ok`, _12

  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _13 = get_tuple_element _8, `0`

  %% beam_utils_SUITE.erl:520
  %% Aliased:
  %%    _13
  %% Unique:
  %%    _17
  _20 = call (`erlang`:`'!'`/2), _13, _17

  %% Aliased:
  %%    _20
  _44 = succeeded:body _20
  br _44, ^44, ^1

44:
  %% beam_utils_SUITE.erl:521
  %% Result type:
  %%    none()
  _21 = call (`do_receive_label`/1), `{rec_label,true}`

  %% Aliased:
  %%    _21
  _45 = succeeded:body _21
  br ^1

28:
  _22 = recv_next
  br ^11

56:
  _50 = wait_timeout `infinity`

  %% Unique:
  %%    _50
  _51 = succeeded:body _50
  br _51, ^54, ^1

54:
  br ^11

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% beam_utils_SUITE.erl:524
%% Counter = 20
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`read_size_file_version`(_0) {
0:
  %% beam_utils_SUITE.erl:525
  %% Result type:
  %%    'ok' | {'ok', 0..4294967295}
  _3 = call (`do_read_size_file_version`/1), `{ok,<<"*">>}`

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    _3 => 'ok' | {'ok', 0..4294967295}
  %% Unique:
  %%    _3
  _18 = bif:'=:=' _3, `ok`
  br _18, ^17, ^11

17:
  %% beam_utils_SUITE.erl:526
  %% Result type:
  %%    'ok' | {'ok', 0..4294967295}
  _4 = call (`do_read_size_file_version`/1), `{ok,<<0,0,30,97>>}`

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    _4 => 'ok' | {'ok', 0..4294967295}
  %% Unique:
  %%    _4
  _15 = bif:'=:=' _4, `{ok,7777}`
  br _15, ^15, ^14

15:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  %% beam_utils_SUITE.erl:526
  %% Unique:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

11:
  %% beam_utils_SUITE.erl:525
  %% Unique:
  %%    _3
  _6 = match_fail `badmatch`, _3

  %% Unique:
  %%    _6
  _19 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% beam_utils_SUITE.erl:529
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'ok', bitstring(8)}
function `beam_utils_SUITE`:`do_read_size_file_version`(_0) {
0:
  %% Argument types:
  %%    _0 => {'ok', bitstring(8)}
  %% Unique:
  %%    _0
  _2 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _2 => bitstring(8)
  %% Aliased:
  %%    _2
  _4 = bs_start_match `new`, _2
  _29 = bs_ensure _4, `8`, `1`
  _30 = succeeded:guard _29
  br _30, ^28, ^14

28:
  %% beam_utils_SUITE.erl:531
  %% Argument types:
  %%    _29 => bs_context(8)
  %% Aliased:
  %%    _4
  %% Anno: #{ensured => true}
  _5 = bs_match `integer`, _29, `[unsigned,big]`, `8`, `1`

  %% Aliased:
  %%    _5
  _15 = succeeded:guard _5
  br _15, ^15, ^14

15:
  %% Aliased:
  %%    _5
  _6 = bs_extract _5

  %% Aliased:
  %%    _5
  _17 = bs_test_tail _5, `0`
  br _17, ^17, ^14

17:
  %% Argument types:
  %%    _6 => 0..255
  %% Unique:
  %%    _6
  _16 = bif:'=:=' _6, `42`
  br _16, ^16, ^14

16:
  %% Result type:
  %%    'ok'
  ret `ok`

14:
  _32 = bs_ensure _4, `32`, `1`
  _33 = succeeded:guard _32
  br _33, ^31, ^13

31:
  %% beam_utils_SUITE.erl:533
  %% Argument types:
  %%    _32 => bs_context(8)
  %% Aliased:
  %%    _4
  %% Anno: #{ensured => true}
  _7 = bs_match `integer`, _32, `[unsigned,big]`, `32`, `1`

  %% Aliased:
  %%    _7
  _18 = succeeded:guard _7
  br _18, ^18, ^13

18:
  %% Aliased:
  %%    _7
  _8 = bs_extract _7

  %% Aliased:
  %%    _7
  _19 = bs_test_tail _7, `0`
  br _19, ^19, ^13

19:
  %% Argument types:
  %%    _8 => 0..4294967295
  %% Unique:
  %%    _8
  _9 = put_tuple `ok`, _8
  %% Result type:
  %%    {'ok', 0..4294967295}
  %% Unique:
  %%    _9
  ret _9

13:
  %% beam_utils_SUITE.erl:530
  %% Unique:
  %%    _0
  _10 = match_fail `case_clause`, _0

  %% Unique:
  %%    _10
  _27 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% beam_utils_SUITE.erl:540
%% Counter = 27
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`not_used`(_0) {
0:
  %% beam_utils_SUITE.erl:541
  _4 = call (`not_used_p`/4), `any`, `{s,undefined,true}`, `{k,undefined}`, `ignored`

  %% Aliased:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _25 = bif:'=:=' _4, `[]`
  br _25, ^25, ^14

25:
  %% beam_utils_SUITE.erl:542
  _5 = call (`not_used_p`/4), `any`, `{s,undefined,false}`, `{k,42}`, `ignored`

  %% Aliased:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _23 = bif:'=:=' _5, `{k,42}`
  br _23, ^23, ^17

23:
  %% beam_utils_SUITE.erl:543
  _6 = call (`not_used_p`/4), `any`, `{s,undefined,bad}`, `{k,42}`, `ignored`

  %% Aliased:
  %%    _6
  _18 = succeeded:body _6
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _21 = bif:'=:=' _6, `{k,42}`
  br _21, ^21, ^20

21:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% beam_utils_SUITE.erl:543
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br ^1

17:
  %% beam_utils_SUITE.erl:542
  %% Aliased:
  %%    _5
  _8 = match_fail `badmatch`, _5

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br ^1

14:
  %% beam_utils_SUITE.erl:541
  %% Aliased:
  %%    _4
  _9 = match_fail `badmatch`, _4

  %% Unique:
  %%    _9
  _26 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% beam_utils_SUITE.erl:546
%% Counter = 86
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'any'
%%    _1 =>
%%     {'s', 'undefined', 'bad' | 'false' | 'true'}
%%    _2 =>
%%     {'k', 'undefined' | 42}
%%    _3 =>
%%     'ignored'
function `beam_utils_SUITE`:`not_used_p`(_0, _1, _2, _3) {
0:
  %% beam_utils_SUITE.erl:547
  %% Argument types:
  %%    _1 => {'s', 'undefined', 'bad' | 'false' | 'true'}
  %% Unique:
  %%    _1
  _8 = get_tuple_element _1, `2`

  %% Argument types:
  %%    _8 => 'bad' | 'false' | 'true'
  %% Unique:
  %%    _8
  _9 = bif:'=:=' _8, `true`
  br _9, ^55, ^38

55:
  %% Result type:
  %%    nil()
  ret `[]`

38:
  %% beam_utils_SUITE.erl:551
  _29 = call (`id`/1), `ignored`

  %% Aliased:
  %%    _29
  _56 = succeeded:body _29
  br _56, ^85, ^1

85:
  %% Argument types:
  %%    _2 => {'k', 'undefined' | 42}
  %% Unique:
  %%    _2
  _26 = get_tuple_element _2, `1`

  %% beam_utils_SUITE.erl:552
  %% Unique:
  %%    _26
  _31 = call (`id`/1), _26

  %% Aliased:
  %%    _31
  _66 = succeeded:body _31
  br _66, ^66, ^1

66:
  %% beam_utils_SUITE.erl:553
  %% Unique:
  %%    _2
  _32 = call (`id`/1), _2

  %% Aliased:
  %%    _32
  _67 = succeeded:body _32
  br _67, ^67, ^1

67:
  %% Aliased:
  %%    _32
  ret _32

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% beam_utils_SUITE.erl:556
%% Counter = 110
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`is_used_fr`(_0) {
0:
  %% beam_utils_SUITE.erl:557
  %% Argument types:
  %%    
  _2 = bif:self

  %% beam_utils_SUITE.erl:557
  %% Unique:
  %%    _2
  _19 = call (`is_used_fr`/2), _2, _2

  %% Aliased:
  %%    _19
  _40 = succeeded:body _19
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _106 = bif:'=:=' _19, `1`
  br _106, ^105, ^42

105:
  %% beam_utils_SUITE.erl:558
  %% Argument types:
  %%    
  _4 = bif:self

  %% beam_utils_SUITE.erl:558
  %% Unique:
  %%    _4
  _20 = call (`is_used_fr`/2), _4, `other`

  %% Aliased:
  %%    _20
  _43 = succeeded:body _20
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _103 = bif:'=:=' _20, `1`
  br _103, ^102, ^45

102:
  br ^21

21:
  %% beam_utils_SUITE.erl:559
  _7 = peek_message `none`

  %% Aliased:
  %%    _7
  _59 = succeeded:guard _7
  br _59, ^57, ^58

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _51 = bif:'=:=' _7, `1`
  br _51, ^50, ^49

50:
  _28 = remove_message
  br ^22

22:
  %% beam_utils_SUITE.erl:560
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _73 = succeeded:guard _10
  br _73, ^71, ^72

71:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _65 = bif:'=:=' _10, `1`
  br _65, ^64, ^63

64:
  _30 = remove_message
  br ^24

24:
  %% beam_utils_SUITE.erl:561
  _13 = peek_message `none`

  %% Aliased:
  %%    _13
  _87 = succeeded:guard _13
  br _87, ^85, ^86

85:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _79 = bif:'=:=' _13, `1`
  br _79, ^78, ^77

78:
  _32 = remove_message
  br ^26

26:
  %% beam_utils_SUITE.erl:562
  _16 = peek_message `none`

  %% Aliased:
  %%    _16
  _101 = succeeded:guard _16
  br _101, ^99, ^100

99:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _93 = bif:'=:=' _16, `1`
  br _93, ^92, ^91

92:
  _34 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

91:
  _35 = recv_next
  br ^26

100:
  _94 = wait_timeout `infinity`

  %% Unique:
  %%    _94
  _95 = succeeded:body _94
  br _95, ^98, ^1

98:
  br ^26

77:
  _33 = recv_next
  br ^24

86:
  _80 = wait_timeout `infinity`

  %% Unique:
  %%    _80
  _81 = succeeded:body _80
  br _81, ^84, ^1

84:
  br ^24

63:
  _31 = recv_next
  br ^22

72:
  _66 = wait_timeout `infinity`

  %% Unique:
  %%    _66
  _67 = succeeded:body _66
  br _67, ^70, ^1

70:
  br ^22

49:
  _29 = recv_next
  br ^21

58:
  _52 = wait_timeout `infinity`

  %% Unique:
  %%    _52
  _53 = succeeded:body _52
  br _53, ^56, ^1

56:
  br ^21

45:
  %% beam_utils_SUITE.erl:558
  %% Aliased:
  %%    _20
  _36 = match_fail `badmatch`, _20

  %% Unique:
  %%    _36
  _104 = succeeded:body _36
  br ^1

42:
  %% beam_utils_SUITE.erl:557
  %% Aliased:
  %%    _19
  _37 = match_fail `badmatch`, _19

  %% Unique:
  %%    _37
  _107 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% beam_utils_SUITE.erl:565
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
%%    _1 =>
%%     'other' | pid()
function `beam_utils_SUITE`:`is_used_fr`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:567
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`'!'`/2), _0, `1`

  %% Aliased:
  %%    _2
  _15 = succeeded:body _2
  br _15, ^15, ^1

15:
  %% beam_utils_SUITE.erl:567
  _21 = float:put `0.0`

  %% beam_utils_SUITE.erl:567
  %% Aliased:
  %%    _2
  _22 = float:convert _2

  %% Unique:
  %%    _22
  _27 = succeeded:body _22
  br _27, ^27, ^1

27:
  %% beam_utils_SUITE.erl:567
  %% Unique:
  %%    _21, 
  %%    _22
  _23 = float:'/' _21, _22

  %% Unique:
  %%    _23
  _16 = succeeded:body _23
  br _16, ^17, ^1

17:
  %% beam_utils_SUITE.erl:572
  %% Aliased:
  %%    _0
  _12 = call (`erlang`:`'!'`/2), _0, `1`

  %% Aliased:
  %%    _12
  _20 = succeeded:body _12
  br _20, ^20, ^1

20:
  %% Aliased:
  %%    _12
  ret _12

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% beam_utils_SUITE.erl:575
%% Counter = 85
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`unsafe_is_function`(_0) {
0:
  %% beam_utils_SUITE.erl:576
  %% Result type:
  %%    {'undefined', 'any'}
  _13 = call (`unsafe_is_function`/2), `undefined`, `any`

  %% Unique:
  %%    _13
  _28 = succeeded:body _13
  br _28, ^65, ^1

65:
  %% Result type:
  %%    'ok'
  _2 = make_fun (`'-unsafe_is_function/1-fun-0-'`/0)

  %% beam_utils_SUITE.erl:577
  %% Result type:
  %%    {'ok', 'any'}
  %% Aliased:
  %%    _2
  _14 = call (`unsafe_is_function`/2), _2, `any`

  %% Unique:
  %%    _14
  _31 = succeeded:body _14
  br _31, ^63, ^1

63:
  %% Result type:
  %%    'ok'
  _6 = make_fun (`'-unsafe_is_function/1-fun-1-'`/1)
  _37 = new_try_tag `'catch'`
  br _37, ^68, ^36

68:
  %% beam_utils_SUITE.erl:578
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _6
  _22 = call (`unsafe_is_function`/2), _6, `any`

  %% Aliased:
  %%    _22
  _39 = succeeded:body _22
  br ^36

36:
  %% Unique:
  %%    _37
  _42 = landingpad `'catch'`, _37

  %% Aliased:
  %%    _42
  _40 = extract _42, `0`
  br ^34

34:
  %% Aliased:
  %%    _40
  %% Unique:
  %%    _37
  _7 = catch_end _37, _40

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _59 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _59, ^56, ^45

56:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _15 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _53 = bif:is_tuple _15
  br _53, ^53, ^45

53:
  %% Argument types:
  %%    _15 => {...}
  %% Aliased:
  %%    _15
  _54 = bif:tuple_size _15

  %% Argument types:
  %%    _54 => 0..16777215
  %% Unique:
  %%    _54
  _55 = bif:'=:=' _54, `2`
  br _55, ^52, ^45

52:
  %% Argument types:
  %%    _15 => {any(), any()}
  %% Aliased:
  %%    _15
  _18 = get_tuple_element _15, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _49 = is_tagged_tuple _18, `2`, `case_clause`
  br _49, ^46, ^45

46:
  %% Result type:
  %%    'ok'
  ret `ok`

45:
  %% beam_utils_SUITE.erl:578
  %% Aliased:
  %%    _7
  _23 = match_fail `badmatch`, _7

  %% Unique:
  %%    _23
  _62 = succeeded:body _23
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_utils_SUITE.erl:581
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'undefined' | fun((...) -> 'ok')
%%    _1 =>
%%     'any'
function `beam_utils_SUITE`:`unsafe_is_function`(_0, _1) {
0:
  %% beam_utils_SUITE.erl:586
  %% Argument types:
  %%    _0 => 'undefined' | fun((...) -> 'ok')
  %% Aliased:
  %%    _0
  _4 = bif:is_function _0, `0`
  br _4, ^16, ^15

16:
  %% beam_utils_SUITE.erl:587
  %% Result type:
  %%    'ok'
  %% Argument types:
  %%    _0 => fun(() -> 'ok')
  %% Aliased:
  %%    _0
  _5 = call _0

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br _13, ^13, ^1

13:
  %% Result type:
  %%    {'ok', 'any'}
  ret `{ok,any}`

15:
  %% Argument types:
  %%    _0 => 'undefined' | fun((...) -> 'ok')
  %% Aliased:
  %%    _0
  _14 = bif:'=:=' _0, `undefined`
  br _14, ^14, ^12

14:
  %% Result type:
  %%    {'undefined', 'any'}
  ret `{undefined,any}`

12:
  %% beam_utils_SUITE.erl:586
  _6 = match_fail `case_clause`, `false`

  %% Unique:
  %%    _6
  _17 = succeeded:body _6
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% beam_utils_SUITE.erl:594
%% Counter = 4
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `beam_utils_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `beam_utils_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% beam_utils_SUITE.erl:578
%% Counter = 24
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`'-unsafe_is_function/1-fun-1-'`(_4) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_utils_SUITE.erl:577
%% Counter = 23
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`'-unsafe_is_function/1-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% beam_utils_SUITE.erl:507
%% Counter = 18
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`'-receive_label/1-fun-0-'`() {
0:
  %% beam_utils_SUITE.erl:507
  %% Result type:
  %%    none()
  _14 = call (`do_receive_label`/1), `{rec_label,true}`

  %% Aliased:
  %%    _14
  _17 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% beam_utils_SUITE.erl:391
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    _5 =>
%%     'false' | nil() | 7
function `beam_utils_SUITE`:`'-merchant/1-lc$^0/1-0-'`(_5) {
0:
  %% Argument types:
  %%    _5 => 'false' | nil() | 7
  %% Unique:
  %%    _5
  _36 = bif:'=:=' _5, `[]`
  br _36, ^36, ^28

36:
  %% Result type:
  %%    nil()
  ret `[]`

28:
  %% Argument types:
  %%    _5 => 'false' | 7
  %% Unique:
  %%    _5
  _18 = put_tuple `bad_generator`, _5

  %% beam_utils_SUITE.erl:391
  %% Unique:
  %%    _18
  _25 = call (`erlang`:`error`/1), _18

  %% Aliased:
  %%    _25
  _37 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% beam_utils_SUITE.erl:354
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
%%    _1 =>
%%     'pebkac'
%%    _2 =>
%%     'user'
function `beam_utils_SUITE`:`'-liveopt_fun/3-fun-0-'`(_7, _6, _0, _1, _2) {
0:
  %% beam_utils_SUITE.erl:355
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _10 = bif:'==' _7, `42`
  br _10, ^27, ^19

27:
  %% beam_utils_SUITE.erl:356
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _14 = bif:'=:=' _6, `{alarmInfo,sctp,pebkac,user}`
  br _14, ^25, ^19

25:
  %% Result type:
  %%    'void'
  ret `void`

19:
  %% beam_utils_SUITE.erl:354
  %% Aliased:
  %%    _6, 
  %%    _7
  %% Anno: #{inlined => {'-liveopt_fun/3-inlined-0-',2}}
  _16 = match_fail `function_clause`, _7, _6

  %% Unique:
  %%    _16
  _26 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% beam_utils_SUITE.erl:236
%% Counter = 27
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`'-is_not_killed/1-fun-0-'`() {
0:
  %% beam_utils_SUITE.erl:236
  _23 = call (`erlang`:`exit`/1), `banan`

  %% Unique:
  %%    _23
  _26 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% beam_utils_SUITE.erl:158
%% Counter = 66
%% bs_ensure_opt: true
%% Parameters
%%    _13 =>
%%     bitstring(32,appendable)
%%    _14 =>
%%     list(number(-1, 4294967296))
function `beam_utils_SUITE`:`'-do_bs_init_2/1-lbc$^0/2-0-'`(_14, _13) {
0:
  %% Unique:
  %%    _14
  _61 = is_nonempty_list _14
  br _61, ^61, ^62

61:
  %% Argument types:
  %%    _14 => nonempty_list(number(-1, 4294967296))
  %% Unique:
  %%    _14
  _26 = get_hd _14

  %% Argument types:
  %%    _14 => nonempty_list(number(-1, 4294967296))
  %% Unique:
  %%    _14
  _25 = get_tl _14

  %% beam_utils_SUITE.erl:160
  %% Argument types:
  %%    _26 => number(-1, 4294967296)
  %% Unique:
  %%    _26
  _27 = bif:is_integer _26
  br _27, ^47, ^52

47:
  %% beam_utils_SUITE.erl:160
  %% Argument types:
  %%    _26 => -1..4294967296
  %% Unique:
  %%    _26
  _28 = bif:'>=' _26, `0`
  br _28, ^45, ^52

45:
  %% beam_utils_SUITE.erl:160
  %% Argument types:
  %%    _26 => 0..4294967296
  %% Unique:
  %%    _26
  _31 = bif:'<' _26, `4294967296`
  br _31, ^58, ^52

58:
  %% beam_utils_SUITE.erl:158
  %% Result type:
  %%    bitstring(32,appendable)
  %% Argument types:
  %%    _13 => bitstring(32,appendable)
  %%    _26 => 0..4294967295
  %% Unique:
  %%    _13, 
  %%    _26
  %% Anno: #{unit => 32}
  _34 = bs_create_bin `private_append`, `[1,{segment,1}]`, _13, `all`, `integer`, `[1,{segment,2}]`, _26, `32`

  %% Unique:
  %%    _34
  _56 = succeeded:body _34
  br _56, ^64, ^1

64:
  %% beam_utils_SUITE.erl:159
  %% Result type:
  %%    bitstring(32,appendable)
  %% Unique:
  %%    _25, 
  %%    _34
  _36 = call (`'-do_bs_init_2/1-lbc$^0/2-0-'`/2), _25, _34

  %% Unique:
  %%    _36
  _60 = succeeded:body _36
  br _60, ^60, ^1

60:
  %% Result type:
  %%    bitstring(32,appendable)
  %% Unique:
  %%    _36
  ret _36

52:
  %% beam_utils_SUITE.erl:161
  _32 = call (`erlang`:`error`/1), `badarg`

  %% Aliased:
  %%    _32
  _50 = succeeded:body _32
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38

62:
  %% Result type:
  %%    bitstring(32,appendable)
  %% Unique:
  %%    _13
  ret _13
}

%% beam_utils_SUITE.erl:81
%% Counter = 15
%% bs_ensure_opt: true
function `beam_utils_SUITE`:`'-do_apply_fun/2-fun-0-'`(_2) {
0:
  %% beam_utils_SUITE.erl:81
  %% Argument types:
  %%    
  %% Unique:
  %%    _2
  _11 = bif:'+' _2, `1`

  %% Unique:
  %%    _11
  _14 = succeeded:body _11
  br _14, ^14, ^1

14:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}
