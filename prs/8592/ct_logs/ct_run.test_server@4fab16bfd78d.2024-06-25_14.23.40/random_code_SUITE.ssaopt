module random_code_SUITE.
exports [{all,0},
         {compile,1},
         {end_per_suite,1},
         {init_per_suite,1},
         {module_info,0},
         {module_info,1},
         {suite,0}].
attributes [].

%% random_code_SUITE.erl:30
%% Counter = 4
%% bs_ensure_opt: true
function `random_code_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% random_code_SUITE.erl:33
%% Counter = 4
%% bs_ensure_opt: true
function `random_code_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list('compile')
  ret `[compile]`
}

%% random_code_SUITE.erl:36
%% Counter = 61
%% bs_ensure_opt: true
function `random_code_SUITE`:`init_per_suite`(_0) {
0:
  %% random_code_SUITE.erl:37
  %% Aliased:
  %%    _0
  _16 = call (`ct_property_test`:`init_per_suite`/1), _0

  %% Aliased:
  %%    _16
  _24 = succeeded:body _16
  br _24, ^24, ^1

24:
  %% Aliased:
  %%    _16
  _43 = is_nonempty_list _16
  br _43, ^59, ^26

59:
  br ^60

60:
  _31 = new_try_tag `'try'`
  br _31, ^30, ^28

30:
  %% random_code_SUITE.erl:39
  _20 = call (`proper_erlang_abstract_code`:`module`/0)

  %% Aliased:
  %%    _20
  _32 = succeeded:body _20
  br _32, ^32, ^28

32:
  %% Unique:
  %%    _31
  _42 = kill_try_tag _31
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  ret _16

28:
  %% Unique:
  %%    _31
  _40 = landingpad `'try'`, _31

  %% Aliased:
  %%    _40
  _5 = extract _40, `0`

  %% Aliased:
  %%    _40
  _4 = extract _40, `1`

  %% Aliased:
  %%    _40
  _3 = extract _40, `2`

  %% Unique:
  %%    _31
  _41 = kill_try_tag _31

  %% Argument types:
  %%    _5 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _5
  _38 = bif:'=:=' _5, `error`
  br _38, ^37, ^34

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _36 = bif:'=:=' _4, `undef`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    {'skip', nonempty_list(32..117)}
  ret `{skip,"No proper_erlang_abstract_code module"}`

34:
  %% Aliased:
  %%    _3, 
  %%    _4
  _21 = resume _3, _4

  %% Unique:
  %%    _21
  _39 = succeeded:body _21
  br ^1

26:
  %% Aliased:
  %%    _16
  ret _16

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% random_code_SUITE.erl:50
%% Counter = 4
%% bs_ensure_opt: true
function `random_code_SUITE`:`end_per_suite`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% random_code_SUITE.erl:53
%% Counter = 43
%% bs_ensure_opt: true
function `random_code_SUITE`:`compile`(_0) {
0:
  %% random_code_SUITE.erl:54
  _10 = call (`os`:`getenv`/1), `"ERL_RANDOM_CODE_NUMTESTS"`

  %% Aliased:
  %%    _10
  _22 = succeeded:body _10
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _26 = bif:'=:=' _10, `false`
  br _26, ^25, ^24

25:
  br ^23

24:
  %% random_code_SUITE.erl:58
  %% Aliased:
  %%    _10
  _16 = call (`erlang`:`list_to_integer`/1), _10

  %% Aliased:
  %%    _16
  _27 = succeeded:body _16
  br _27, ^27, ^1

27:
  br ^23

23:
  _2 = phi { `1000`, ^25 }, { _16, ^27 }

  %% random_code_SUITE.erl:62
  %% Argument types:
  %%    _2 => integer()
  %% Unique:
  %%    _2
  _4 = bif:'+' _2, `99`

  %% Unique:
  %%    _4
  _28 = succeeded:body _4
  br _28, ^28, ^1

28:
  %% random_code_SUITE.erl:62
  %% Argument types:
  %%    _4 => integer()
  %% Unique:
  %%    _4
  _5 = bif:'div' _4, `100`

  %% Unique:
  %%    _5
  _29 = succeeded:body _5
  br _29, ^29, ^1

29:
  %% random_code_SUITE.erl:62
  %% Argument types:
  %%    _5 => integer()
  %% Unique:
  %%    _5
  _6 = bif:'+' _5, `60000`

  %% Unique:
  %%    _6
  _30 = succeeded:body _6
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _6 => integer()
  %% Unique:
  %%    _6
  TimeTrap = put_tuple `seconds`, _6

  %% random_code_SUITE.erl:63
  %% Unique:
  %%    TimeTrap
  _17 = call (`ct`:`timetrap`/1), TimeTrap

  %% Aliased:
  %%    _17
  _31 = succeeded:body _17
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    _2 => integer()
  %% Unique:
  %%    _2
  _11 = put_list _2, `[]`

  %% random_code_SUITE.erl:64
  %% Unique:
  %%    _11
  _18 = call (`io`:`format`/2), `"~p tests\n"`, _11

  %% Aliased:
  %%    _18
  _32 = succeeded:body _18
  br _32, ^32, ^1

32:
  %% random_code_SUITE.erl:65
  _8 = call (`compile_prop`:`compile`/0)

  %% Aliased:
  %%    _8
  _33 = succeeded:body _8
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _2 => integer()
  %% Unique:
  %%    _2
  _12 = put_tuple `numtests`, _2

  %% Argument types:
  %%    _12 => {'numtests', integer()}
  %% Unique:
  %%    _12
  _13 = put_list _12, `[]`

  %% Argument types:
  %%    _13 => nonempty_list({'numtests', integer()})
  %% Unique:
  %%    _13
  _14 = put_list `quiet`, _13

  %% random_code_SUITE.erl:65
  %% Aliased:
  %%    _8
  %% Unique:
  %%    _14
  _15 = call (`proper`:`quickcheck`/2), _8, _14

  %% Aliased:
  %%    _15
  _34 = succeeded:body _15
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _38 = bif:'=:=' _15, `true`
  br _38, ^37, ^36

37:
  %% Result type:
  %%    'ok'
  ret `ok`

36:
  %% random_code_SUITE.erl:65
  %% Aliased:
  %%    _15
  _19 = match_fail `badmatch`, _15

  %% Unique:
  %%    _19
  _39 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% Counter = 6
%% bs_ensure_opt: true
function `random_code_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `random_code_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `random_code_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `random_code_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}
