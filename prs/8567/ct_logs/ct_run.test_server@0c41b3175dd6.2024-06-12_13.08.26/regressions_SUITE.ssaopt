module regressions_SUITE.
exports [{all,0},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {maps,1},
         {module_info,0},
         {module_info,1},
         {suite,0}].
attributes [].

%% regressions_SUITE.erl:30
%% Counter = 7
%% bs_ensure_opt: true
function `regressions_SUITE`:`groups`() {
0:
  %% regressions_SUITE.erl:31
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[maps]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list('maps')}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list('maps')})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% regressions_SUITE.erl:34
%% Counter = 6
%% bs_ensure_opt: true
function `regressions_SUITE`:`init_per_suite`(_0) {
0:
  %% regressions_SUITE.erl:35
  _2 = call (`test_lib`:`recompile`/1), `regressions_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% regressions_SUITE.erl:38
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% regressions_SUITE.erl:41
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% regressions_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% regressions_SUITE.erl:47
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% regressions_SUITE.erl:50
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% regressions_SUITE.erl:53
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 2}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,2}}]`
}

%% regressions_SUITE.erl:57
%% Counter = 4
%% bs_ensure_opt: true
function `regressions_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% regressions_SUITE.erl:62
%% Counter = 18
%% bs_ensure_opt: true
function `regressions_SUITE`:`maps`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% regressions_SUITE.erl:78
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{beam_bool_get_elements,<<"century(#{ron := operator}, _century) ->\n                  if 0.0; _century, _century, _century -> _century end.\n           ">>},
  {empty_map_clauses,<<"politics(#{}, researchers) -> concerned;\n              politics(#{[] := _}, workers) -> dot;\n              politics(#{[] := ct}, counsel) -> calls.\n             ">>},
  {empty_map_clauses_variable,<<"georgia(#{a := effectively}, ratio, is, eventually) -> teens;\n              georgia(#{a := government}, knowledge, poker, partly) -> signed;\n              georgia(#{}, recording, bring, vital) -> divided;\n              georgia(#{0 := 0}, articles, brought, #{true := true, a := There}) -> There.\n             ">>}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _15 = bif:'=:=' _4, `ok`
  br _15, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% regressions_SUITE.erl:78
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

9:
  %% regressions_SUITE.erl:62
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-maps/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _17 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% regressions_SUITE.erl:83
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     maybe_improper_list(any(), any())
%%    _1 =>
%%     nonempty_list({'beam_bool_get_elements', bitstring(32)} | {'empty_map_clauses', bitstring(8)} | {'empty_map_clauses_variable', bitstring(8)})
function `regressions_SUITE`:`run`(_0, _1) {
0:
  %% Aliased:
  %%    _0
  F = make_fun (`'-run/2-fun-0-'`/2), _0

  %% regressions_SUITE.erl:94
  %% Aliased:
  %%    F
  %% Unique:
  %%    _1
  _23 = call (`lists`:`foreach`/2), F, _1

  %% Aliased:
  %%    _23
  _26 = succeeded:body _23
  br _26, ^26, ^1

26:
  %% Aliased:
  %%    _23
  ret _23

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% regressions_SUITE.erl:97
%% Counter = 64
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     maybe_improper_list(any(), any())
function `regressions_SUITE`:`run_test`(_0, _1) {
0:
  %% regressions_SUITE.erl:98
  _2 = call (`test_lib`:`uniq`/0)

  %% Aliased:
  %%    _2
  _48 = succeeded:body _2
  br _48, ^48, ^1

48:
  %% regressions_SUITE.erl:98
  %% Aliased:
  %%    _2
  Module = call (`erlang`:`'++'`/2), `"regressions_"`, _2

  %% regressions_SUITE.erl:99
  %% Aliased:
  %%    Module
  Filename = call (`erlang`:`'++'`/2), Module, `".erl"`

  %% Aliased:
  %%    Filename
  _50 = succeeded:body Filename
  br _50, ^50, ^1

50:
  %% regressions_SUITE.erl:100
  %% Aliased:
  %%    _0
  DataDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    DataDir
  _51 = succeeded:body DataDir
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _26 = put_list _1, `[]`

  %% Argument types:
  %%    _26 => nonempty_list(any())
  %% Unique:
  %%    _26
  _27 = put_list `"). "`, _26

  %% Argument types:
  %%    _27 => nonempty_list(any())
  %% Aliased:
  %%    Module
  %% Unique:
  %%    _27
  _28 = put_list Module, _27

  %% Argument types:
  %%    _28 => nonempty_list(any())
  %% Unique:
  %%    _28
  Test = put_list `"-module("`, _28

  %% regressions_SUITE.erl:102
  %% Aliased:
  %%    DataDir, 
  %%    Filename
  File = call (`filename`:`join`/2), DataDir, Filename

  %% Aliased:
  %%    File
  _52 = succeeded:body File
  br _52, ^52, ^1

52:
  %% regressions_SUITE.erl:105
  %% Result type:
  %%    nonempty_list(list(atom()))
  _15 = call (`'-run_test/2-lc$^0/1-0-'`/1), `[[no_postopt],[no_copt],[no_postopt,no_copt],[inline],[inline,no_postopt],[]]`

  %% Aliased:
  %%    _15
  _53 = succeeded:body _15
  br _53, ^53, ^1

53:
  %% regressions_SUITE.erl:112
  %% Aliased:
  %%    File
  %% Unique:
  %%    Test
  _33 = call (`file`:`write_file`/2), File, Test

  %% Aliased:
  %%    _33
  _54 = succeeded:body _33
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _60 = bif:'=:=' _33, `ok`
  br _60, ^59, ^56

59:
  %% Result type:
  %%    {'ok', any(), any(), any()}
  %% Aliased:
  %%    File
  _21 = make_fun (`'-run_test/2-fun-1-'`/2), File

  %% regressions_SUITE.erl:113
  %% Aliased:
  %%    _15, 
  %%    _21
  _43 = call (`lists`:`foreach`/2), _21, _15

  %% Aliased:
  %%    _43
  _57 = succeeded:body _43
  br _57, ^57, ^1

57:
  %% regressions_SUITE.erl:117
  %% Aliased:
  %%    File
  _44 = call (`file`:`delete`/1), File

  %% Aliased:
  %%    _44
  _58 = succeeded:body _44
  br _58, ^58, ^1

58:
  %% Result type:
  %%    'ok'
  ret `ok`

56:
  %% regressions_SUITE.erl:112
  %% Aliased:
  %%    _33
  _45 = match_fail `badmatch`, _33

  %% Unique:
  %%    _45
  _61 = succeeded:body _45
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% regressions_SUITE.erl:120
%% Counter = 6
%% bs_ensure_opt: true
function `regressions_SUITE`:`fail`() {
0:
  %% regressions_SUITE.erl:121
  _2 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `regressions_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `regressions_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `regressions_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `regressions_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% regressions_SUITE.erl:113
%% Counter = 57
%% bs_ensure_opt: true
function `regressions_SUITE`:`'-run_test/2-fun-1-'`(_19, File) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _34 = put_list _19, `[]`

  %% regressions_SUITE.erl:114
  %% Unique:
  %%    _34
  _41 = call (`io`:`format`/2), `"  - compiling with ~p~n"`, _34

  %% Aliased:
  %%    _41
  _45 = succeeded:body _41
  br _45, ^45, ^1

45:
  %% regressions_SUITE.erl:115
  %% Aliased:
  %%    _19, 
  %%    File
  _24 = call (`compile`:`file`/2), File, _19

  %% Aliased:
  %%    _24
  _46 = succeeded:body _24
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _52 = is_tagged_tuple _24, `4`, `ok`
  br _52, ^49, ^48

49:
  %% Result type:
  %%    {'ok', any(), any(), any()}
  %% Aliased:
  %%    _24
  ret _24

48:
  %% regressions_SUITE.erl:115
  %% Aliased:
  %%    _24
  _42 = match_fail `badmatch`, _24

  %% Unique:
  %%    _42
  _55 = succeeded:body _42
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% regressions_SUITE.erl:105
%% Counter = 52
%% bs_ensure_opt: true
%% Parameters
%%    _11 =>
%%     list(list('inline' | 'no_copt' | 'no_postopt'))
function `regressions_SUITE`:`'-run_test/2-lc$^0/1-0-'`(_11) {
0:
  %% Unique:
  %%    _11
  _47 = is_nonempty_list _11
  br _47, ^47, ^48

47:
  %% Argument types:
  %%    _11 => nonempty_list(list('inline' | 'no_copt' | 'no_postopt'))
  %% Unique:
  %%    _11
  _32 = get_hd _11

  %% Argument types:
  %%    _11 => nonempty_list(list('inline' | 'no_copt' | 'no_postopt'))
  %% Unique:
  %%    _11
  _31 = get_tl _11

  %% regressions_SUITE.erl:104
  %% Unique:
  %%    _32
  _13 = call (`erlang`:`'++'`/2), _32, `[binary,export_all,return]`

  %% regressions_SUITE.erl:105
  %% Result type:
  %%    list(list(atom()))
  %% Unique:
  %%    _31
  _14 = call (`'-run_test/2-lc$^0/1-0-'`/1), _31

  %% Aliased:
  %%    _14
  _46 = succeeded:body _14
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _13 => list(atom())
  %%    _14 => list(list(atom()))
  %% Aliased:
  %%    _13, 
  %%    _14
  _39 = put_list _13, _14
  %% Result type:
  %%    nonempty_list(list(atom()))
  %% Unique:
  %%    _39
  ret _39

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41

48:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% regressions_SUITE.erl:84
%% Counter = 71
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     maybe_improper_list(any(), any())
function `regressions_SUITE`:`'-run/2-fun-0-'`(_4, _0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _48 = bif:is_tuple _4
  br _48, ^48, ^25

48:
  %% Argument types:
  %%    _4 => {...}
  %% Aliased:
  %%    _4
  _49 = bif:tuple_size _4

  %% Argument types:
  %%    _49 => 0..16777215
  %% Unique:
  %%    _49
  _50 = bif:'=:=' _49, `2`
  br _50, ^47, ^25

47:
  %% Argument types:
  %%    _4 => {any(), any()}
  %% Aliased:
  %%    _4
  _11 = get_tuple_element _4, `0`

  %% Argument types:
  %%    _4 => {any(), any()}
  %% Aliased:
  %%    _4
  _10 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _12 = put_list _11, `[]`

  %% regressions_SUITE.erl:85
  %% Unique:
  %%    _12
  _17 = call (`io`:`format`/2), `"Compiling test for: ~w~n"`, _12

  %% Aliased:
  %%    _17
  _26 = succeeded:body _17
  br _26, ^69, ^1

69:
  br ^70

70:
  _30 = new_try_tag `'catch'`
  br _30, ^28, ^29

28:
  %% regressions_SUITE.erl:86
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0, 
  %%    _10
  _19 = call (`run_test`/2), _0, _10

  %% Unique:
  %%    _19
  _32 = succeeded:body _19
  br _32, ^32, ^29

32:
  br ^27

29:
  %% Unique:
  %%    _30
  _35 = landingpad `'catch'`, _30

  %% Aliased:
  %%    _35
  _33 = extract _35, `0`
  br ^27

27:
  _36 = phi { _33, ^29 }, { `ok`, ^32 }

  %% Aliased:
  %%    _36
  %% Unique:
  %%    _30
  _2 = catch_end _30, _36

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _44 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _44, ^41, ^38

41:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _13 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _15 = put_list _13, `[]`

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    _11
  %% Unique:
  %%    _15
  _16 = put_list _11, _15

  %% regressions_SUITE.erl:88
  %% Unique:
  %%    _16
  _20 = call (`io`:`format`/2), `"~nTest ~p failed.~nReason: ~p~n"`, _16

  %% Aliased:
  %%    _20
  _39 = succeeded:body _20
  br _39, ^39, ^1

39:
  %% regressions_SUITE.erl:90
  _21 = call (`fail`/0)

  %% Aliased:
  %%    _21
  _40 = succeeded:body _21
  br _40, ^40, ^1

40:
  %% Aliased:
  %%    _21
  ret _21

38:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% regressions_SUITE.erl:84
  %% Aliased:
  %%    _4
  %% Anno: #{inlined => {'-run/2-inlined-0-',1}}
  _22 = match_fail `function_clause`, _4

  %% Unique:
  %%    _22
  _51 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}
