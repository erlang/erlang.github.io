{module, beam_doc_SUITE}.  %% version = 0

{exports, [{all,0},
           {all_string_formats,1},
           {callback,1},
           {deprecated,1},
           {doc_with_file,1},
           {doc_with_file_error,1},
           {docformat,1},
           {docmodule_with_doc_attributes,1},
           {docs_from_ast,1},
           {end_per_group,2},
           {equiv,1},
           {export_all,1},
           {groups,0},
           {hide_moduledoc,1},
           {hide_moduledoc2,1},
           {init_per_group,2},
           {module_info,0},
           {module_info,1},
           {no_doc_attributes,1},
           {private_types,1},
           {singleton_doc,1},
           {singleton_docformat,1},
           {singleton_meta,1},
           {singleton_moduledoc,1},
           {skip_doc,1},
           {slogan,1},
           {spec,1},
           {spec_switch_order,1},
           {types_and_opaques,1},
           {user_defined_type,1},
           {warn_missing_doc,1}]}.

{attributes, []}.

{labels, 279}.


{function, all, 0, 2}.
  {label,1}.
    {line,[{location,"beam_doc_SUITE.erl",18}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,all},0}.
  {label,2}.
    {move,{literal,[{group,documentation_generation_tests},doc_with_file]},
          {x,0}}.
    return.


{function, groups, 0, 4}.
  {label,3}.
    {line,[{location,"beam_doc_SUITE.erl",21}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,groups},0}.
  {label,4}.
    {allocate,0,0}.
    {line,[{location,"beam_doc_SUITE.erl",22}]}.
    {call,0,{f,10}}. % documentation_generation_tests/0
    {'%',{var_info,{x,0},[{type,{t_cons,{t_atom,any},nil}}]}}.
    {test_heap,6,1}.
    {put_tuple2,{x,0},
                {list,[{atom,documentation_generation_tests},
                       {literal,[parallel]},
                       {x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {deallocate,0}.
    return.


{function, init_per_group, 2, 6}.
  {label,5}.
    {line,[{location,"beam_doc_SUITE.erl",24}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,init_per_group},2}.
  {label,6}.
    {move,{x,1},{x,0}}.
    return.


{function, end_per_group, 2, 8}.
  {label,7}.
    {line,[{location,"beam_doc_SUITE.erl",27}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,end_per_group},2}.
  {label,8}.
    {move,{atom,ok},{x,0}}.
    return.


{function, documentation_generation_tests, 0, 10}.
  {label,9}.
    {line,[{location,"beam_doc_SUITE.erl",30}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,documentation_generation_tests},0}.
  {label,10}.
    {move,{literal,[singleton_moduledoc,singleton_doc,
                    docmodule_with_doc_attributes,hide_moduledoc,
                    hide_moduledoc2,docformat,singleton_docformat,
                    singleton_meta,slogan,types_and_opaques,callback,
                    private_types,export_all,equiv,spec,deprecated,
                    warn_missing_doc,doc_with_file_error,all_string_formats,
                    spec_switch_order,docs_from_ast,user_defined_type,
                    skip_doc,no_doc_attributes]},
          {x,0}}.
    return.


{function, singleton_moduledoc, 1, 12}.
  {label,11}.
    {line,[{location,"beam_doc_SUITE.erl",57}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,singleton_moduledoc},1}.
  {label,12}.
    {allocate,0,1}.
    {move,{literal,"singletonmoduledoc"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",59}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,14},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",63}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,13},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,13},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,13},[{x,2},{literal,<<"text/markdown">>}]}.
    {get_tuple_element,{x,1},4,{x,1}}.
    {test,is_eq_exact,
          {f,13},
          [{x,1},{literal,#{<<"en">> => <<"Moduledoc test module">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,13}.
    {badmatch,{x,0}}.
  {label,14}.
    {line,[{location,"beam_doc_SUITE.erl",59}]}.
    {badmatch,{x,0}}.


{function, singleton_doc, 1, 16}.
  {label,15}.
    {line,[{location,"beam_doc_SUITE.erl",66}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,singleton_doc},1}.
  {label,16}.
    {allocate,0,1}.
    {move,{literal,"singletondoc"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",68}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,18},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",74}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,17},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,17},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},1,{x,2}}.
    {test,is_eq_exact,{f,17},[{x,2},{integer,1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,17},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,2}}.
    {test,is_nonempty_list,{f,17},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,17},[{x,3}]}.
    {test,test_arity,{f,17},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,17},[{x,4},{literal,{function,foo,1}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,17},[{x,4},{literal,[<<"foo(ok)">>]}]}.
    {test,is_nonempty_list,{f,17},[{x,2}]}.
    {get_list,{x,2},{x,4},{x,2}}.
    {test,is_tuple,{f,17},[{x,4}]}.
    {test,test_arity,{f,17},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {test,is_eq_exact,{f,17},[{x,5},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,4},2,{x,5}}.
    {test,is_eq_exact,{f,17},[{x,5},{literal,[<<"main()">>]}]}.
    {test,is_nil,{f,17},[{x,2}]}.
    {get_tuple_element,{x,1},3,{x,1}}.
    {test,is_eq_exact,{f,17},[{x,1},{literal,<<"text/markdown">>}]}.
    {get_tuple_element,{x,3},3,{x,1}}.
    {test,is_eq_exact,
          {f,17},
          [{x,1},{literal,#{<<"en">> => <<"Tests multi-clauses">>}}]}.
    {get_tuple_element,{x,4},3,{x,1}}.
    {test,is_eq_exact,
          {f,17},
          [{x,1},{literal,#{<<"en">> => <<"Doc test module">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,17}.
    {line,[{location,"beam_doc_SUITE.erl",72}]}.
    {badmatch,{x,0}}.
  {label,18}.
    {line,[{location,"beam_doc_SUITE.erl",68}]}.
    {badmatch,{x,0}}.


{function, docmodule_with_doc_attributes, 1, 20}.
  {label,19}.
    {line,[{location,"beam_doc_SUITE.erl",77}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,docmodule_with_doc_attributes},1}.
  {label,20}.
    {allocate,5,1}.
    {init_yregs,{list,[{y,0},{y,1},{y,2},{y,3},{y,4}]}}.
    {move,{literal,"docmodule_with_doc_attributes"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",79}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,30},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",90}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,29},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,29},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},2,{x,2}}.
    {test,is_eq_exact,{f,29},[{x,2},{atom,erlang}]}.
    {get_tuple_element,{x,1},5,{x,2}}.
    {test,is_map,{f,29},[{x,2}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,29},[{x,2},{literal,<<"text/markdown">>}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,
          {f,29},
          [{x,2},{literal,#{<<"en">> => <<"Moduledoc test module">>}}]}.
    {get_tuple_element,{x,1},6,{x,0}}.
    {test,is_nonempty_list,{f,28},[{x,0}]}.
    {get_list,{x,0},{x,2},{x,3}}.
    {test,is_tuple,{f,28},[{x,2}]}.
    {test,test_arity,{f,28},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,4}}.
    {get_tuple_element,{x,2},1,{y,4}}.
    {test,is_eq_exact,{f,28},[{x,4},{literal,{function,no_docs_multi,1}}]}.
    {get_tuple_element,{x,2},2,{x,4}}.
    {test,is_eq_exact,{f,28},[{x,4},{literal,[<<"no_docs_multi/1">>]}]}.
    {get_tuple_element,{x,2},3,{x,4}}.
    {test,is_eq_exact,{f,28},[{x,4},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,28},[{x,2}]}.
    {test,is_nonempty_list,{f,28},[{x,3}]}.
    {get_list,{x,3},{x,2},{x,3}}.
    {test,is_tuple,{f,28},[{x,2}]}.
    {test,test_arity,{f,28},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,4}}.
    {get_tuple_element,{x,2},1,{y,3}}.
    {test,is_eq_exact,{f,28},[{x,4},{literal,{function,with_file_docs,0}}]}.
    {get_tuple_element,{x,2},2,{x,4}}.
    {test,is_eq_exact,{f,28},[{x,4},{literal,[<<"with_file_docs()">>]}]}.
    {get_tuple_element,{x,2},4,{x,4}}.
    {test,is_map,{f,28},[{x,4}]}.
    {test,is_nonempty_list,{f,28},[{x,3}]}.
    {get_list,{x,3},{x,4},{x,3}}.
    {test,is_tuple,{f,28},[{x,4}]}.
    {test,test_arity,{f,28},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {get_tuple_element,{x,4},1,{y,2}}.
    {test,is_eq_exact,{f,28},[{x,5},{literal,{function,no_docs,0}}]}.
    {get_tuple_element,{x,4},2,{x,5}}.
    {test,is_eq_exact,{f,28},[{x,5},{literal,[<<"no_docs()">>]}]}.
    {get_tuple_element,{x,4},3,{x,5}}.
    {test,is_eq_exact,{f,28},[{x,5},{atom,none}]}.
    {get_tuple_element,{x,4},4,{x,4}}.
    {test,is_map,{f,28},[{x,4}]}.
    {test,is_nonempty_list,{f,28},[{x,3}]}.
    {get_list,{x,3},{x,4},{x,3}}.
    {test,is_tuple,{f,28},[{x,4}]}.
    {test,test_arity,{f,28},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {get_tuple_element,{x,4},1,{y,1}}.
    {test,is_eq_exact,{f,28},[{x,5},{literal,{function,ok,0}}]}.
    {get_tuple_element,{x,4},2,{x,5}}.
    {test,is_eq_exact,{f,28},[{x,5},{literal,[<<"ok()">>]}]}.
    {get_tuple_element,{x,4},3,{x,5}}.
    {test,is_eq_exact,{f,28},[{x,5},{atom,none}]}.
    {get_tuple_element,{x,4},4,{x,4}}.
    {test,is_map,{f,28},[{x,4}]}.
    {get_map_elements,{f,28},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{atom,authors},{x,4}]}}.
    {test,is_eq_exact,{f,28},[{x,4},{literal,"Someone"}]}.
    {test,is_nonempty_list,{f,28},[{x,3}]}.
    {get_list,{x,3},{x,4},{x,3}}.
    {test,is_tuple,{f,28},[{x,4}]}.
    {test,test_arity,{f,28},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {get_tuple_element,{x,4},1,{y,0}}.
    {test,is_tagged_tuple,{f,28},[{x,5},3,{atom,function}]}.
    {get_tuple_element,{x,5},1,{x,5}}.
    {test,is_eq_exact,{f,28},[{x,5},{atom,main}]}.
    {test,is_nil,{f,28},[{x,3}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,
          {f,28},
          [{x,2},{literal,#{<<"en">> => <<"# README\n\nThis is a test">>}}]}.
    {get_tuple_element,{x,4},3,{x,2}}.
    {test,is_eq_exact,
          {f,28},
          [{x,2},{literal,#{<<"en">> => <<"Doc test module">>}}]}.
    {get_tuple_element,{x,1},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",99}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,27},[{x,0},{integer,5}]}.
    {move,{y,0},{x,0}}.
    {trim,1,4}.
    {line,[{location,"beam_doc_SUITE.erl",100}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,26},[{x,0},{integer,10}]}.
    {move,{y,0},{x,0}}.
    {trim,1,3}.
    {line,[{location,"beam_doc_SUITE.erl",101}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,25},[{x,0},{integer,18}]}.
    {move,{y,0},{x,0}}.
    {trim,1,2}.
    {line,[{location,"beam_doc_SUITE.erl",102}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,24},[{x,0},{integer,21}]}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",103}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,23},[{x,0},{integer,1}]}.
    {move,{y,0},{x,0}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",104}]}.
    {call_ext,1,{extfunc,erl_anno,file,1}}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,22},[{x,0},{literal,"README"}]}.
    {move,{y,0},{x,0}}.
    {trim,1,0}.
    {line,[{location,"beam_doc_SUITE.erl",105}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,21},[{x,0},{integer,28}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,21}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,28}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( NoDocsMultiAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,105}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,22}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"README"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( erl_anno : file ( FileDocsAnno ) )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,104}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",104}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,23}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,1}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( FileDocsAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,103}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",103}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,24}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,21}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( NoDocsAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,102}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",102}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,25}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,18}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( OkAnno )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,101}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",101}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,26}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,10}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( MainAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,100}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",100}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,27}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,5}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( ModuleAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,99}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",99}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},5}.
  {label,28}.
    {line,[{location,"beam_doc_SUITE.erl",93}]}.
    {badmatch,{x,0}}.
  {label,29}.
    {line,[{location,"beam_doc_SUITE.erl",84}]}.
    {badmatch,{x,0}}.
  {label,30}.
    {line,[{location,"beam_doc_SUITE.erl",79}]}.
    {badmatch,{x,0}}.


{function, hide_moduledoc, 1, 32}.
  {label,31}.
    {line,[{location,"beam_doc_SUITE.erl",109}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,hide_moduledoc},1}.
  {label,32}.
    {allocate,0,1}.
    {move,{literal,"hide_moduledoc"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",110}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,34},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",113}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,33},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,33},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,33},[{x,2},{atom,hidden}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,33},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,33},[{x,2}]}.
    {test,test_arity,{f,33},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,33},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,33},[{x,3},{literal,[<<"main()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,33},[{x,3}]}.
    {get_map_elements,{f,33},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,33},[{x,3},{literal,<<"Doc test module">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,33},[{x,2}]}.
    {test,is_nil,{f,33},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,33}.
    {line,[{location,"beam_doc_SUITE.erl",111}]}.
    {badmatch,{x,0}}.
  {label,34}.
    {line,[{location,"beam_doc_SUITE.erl",110}]}.
    {badmatch,{x,0}}.


{function, hide_moduledoc2, 1, 36}.
  {label,35}.
    {line,[{location,"beam_doc_SUITE.erl",117}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,hide_moduledoc2},1}.
  {label,36}.
    {allocate,0,1}.
    {move,{literal,"hide_moduledoc2"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",119}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,38},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",122}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,37},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,37},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,37},[{x,2},{atom,hidden}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,37},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,37},[{x,2}]}.
    {test,test_arity,{f,37},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{literal,{function,handle_call,1}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{literal,{16,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{literal,[<<"handle_call/1">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{atom,hidden}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,37},[{x,2}]}.
    {test,is_nonempty_list,{f,37},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,37},[{x,2}]}.
    {test,test_arity,{f,37},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{literal,[<<"main()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,37},[{x,3},{atom,hidden}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,37},[{x,2}]}.
    {test,is_nil,{f,37},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,37}.
    {line,[{location,"beam_doc_SUITE.erl",120}]}.
    {badmatch,{x,0}}.
  {label,38}.
    {line,[{location,"beam_doc_SUITE.erl",119}]}.
    {badmatch,{x,0}}.


{function, docformat, 1, 40}.
  {label,39}.
    {line,[{location,"beam_doc_SUITE.erl",125}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,docformat},1}.
  {label,40}.
    {allocate,0,1}.
    {move,{literal,"docformat"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",126}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,42},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",134}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,41},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,41},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,41},[{x,2},{literal,<<"text/asciidoc">>}]}.
    {get_tuple_element,{x,1},6,{x,2}}.
    {test,is_nonempty_list,{f,41},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,41},[{x,3}]}.
    {test,test_arity,{f,41},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_tagged_tuple,{f,41},[{x,4},3,{atom,function}]}.
    {get_tuple_element,{x,4},1,{x,4}}.
    {test,is_eq_exact,{f,41},[{x,4},{atom,main}]}.
    {test,is_nil,{f,41},[{x,2}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,
          {f,41},
          [{x,2},{literal,#{<<"en">> => <<"Moduledoc test module">>}}]}.
    {get_tuple_element,{x,1},5,{x,1}}.
    {test,is_eq_exact,
          {f,41},
          [{x,1},
           {literal,#{deprecated => "Use something else",
                      format => "text/asciidoc",
                      otp_doc_vsn => {1,0,0},
                      since => "1.0"}}]}.
    {get_tuple_element,{x,3},3,{x,1}}.
    {test,is_eq_exact,
          {f,41},
          [{x,1},{literal,#{<<"en">> => <<"Doc test module">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,41}.
    {line,[{location,"beam_doc_SUITE.erl",133}]}.
    {badmatch,{x,0}}.
  {label,42}.
    {line,[{location,"beam_doc_SUITE.erl",126}]}.
    {badmatch,{x,0}}.


{function, singleton_docformat, 1, 44}.
  {label,43}.
    {line,[{location,"beam_doc_SUITE.erl",137}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,singleton_docformat},1}.
  {label,44}.
    {allocate,0,1}.
    {move,{literal,"singleton_docformat"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",138}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,46},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",147}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,45},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,45},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},2,{x,2}}.
    {test,is_eq_exact,{f,45},[{x,2},{atom,erlang}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,45},[{x,2},{literal,<<"text/asciidoc">>}]}.
    {get_tuple_element,{x,1},6,{x,2}}.
    {test,is_nonempty_list,{f,45},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,45},[{x,3}]}.
    {test,test_arity,{f,45},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,45},[{x,4},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,45},[{x,4},{literal,[<<"main()">>]}]}.
    {test,is_nil,{f,45},[{x,2}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,
          {f,45},
          [{x,2},{literal,#{<<"en">> => <<"Moduledoc test module">>}}]}.
    {get_tuple_element,{x,1},5,{x,1}}.
    {test,is_eq_exact,
          {f,45},
          [{x,1},
           {literal,#{deprecated => <<"Use something else">>,
                      format => <<"text/asciidoc">>,
                      otp_doc_vsn => {1,0,0},
                      since => <<"1.0">>}}]}.
    {get_tuple_element,{x,3},3,{x,1}}.
    {test,is_eq_exact,
          {f,45},
          [{x,1},
           {literal,#{<<"en">> => <<"Doc test module\n\nMore info here">>}}]}.
    {get_tuple_element,{x,3},4,{x,1}}.
    {test,is_eq_exact,
          {f,45},
          [{x,1},
           {literal,#{authors => [<<"Beep Bop">>],
                      equiv => <<"main/3">>,since => <<"1.0">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,45}.
    {line,[{location,"beam_doc_SUITE.erl",146}]}.
    {badmatch,{x,0}}.
  {label,46}.
    {line,[{location,"beam_doc_SUITE.erl",138}]}.
    {badmatch,{x,0}}.


{function, singleton_meta, 1, 48}.
  {label,47}.
    {line,[{location,"beam_doc_SUITE.erl",150}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,singleton_meta},1}.
  {label,48}.
    {allocate,0,1}.
    {move,{literal,"singleton_meta"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",152}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,50},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",159}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,49},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,49},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},2,{x,2}}.
    {test,is_eq_exact,{f,49},[{x,2},{atom,erlang}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,49},[{x,2},{literal,<<"text/markdown">>}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,49},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},5,{x,2}}.
    {test,is_map,{f,49},[{x,2}]}.
    {get_map_elements,{f,49},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,since},{x,2}]}}.
    {test,is_eq_exact,{f,49},[{x,2},{literal,<<"1.0">>}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,49},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,49},[{x,2}]}.
    {test,test_arity,{f,49},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,49},[{x,3},{literal,{function,main1,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,49},[{x,3},{literal,[<<"main1()">>]}]}.
    {get_tuple_element,{x,2},4,{x,3}}.
    {test,is_map,{f,49},[{x,3}]}.
    {get_map_elements,{f,49},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{atom,since},{x,3},{atom,equiv},{x,4}]}}.
    {test,is_eq_exact,{f,49},[{x,4},{literal,<<"main(_)">>}]}.
    {test,is_eq_exact,{f,49},[{x,3},{literal,<<"1.1">>}]}.
    {test,is_nonempty_list,{f,49},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_tuple,{f,49},[{x,3}]}.
    {test,test_arity,{f,49},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,49},[{x,4},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,49},[{x,4},{literal,[<<"main()">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_eq_exact,{f,49},[{x,4},{atom,none}]}.
    {test,is_nil,{f,49},[{x,1}]}.
    {get_tuple_element,{x,2},3,{x,1}}.
    {test,is_eq_exact,
          {f,49},
          [{x,1},{literal,#{<<"en">> => <<"Returns always ok.">>}}]}.
    {get_tuple_element,{x,3},4,{x,1}}.
    {test,is_eq_exact,
          {f,49},
          [{x,1},
           {literal,#{authors => [<<"Beep Bop">>],
                      equiv => <<"main/3">>,since => <<"1.0">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,49}.
    {line,[{location,"beam_doc_SUITE.erl",155}]}.
    {badmatch,{x,0}}.
  {label,50}.
    {line,[{location,"beam_doc_SUITE.erl",152}]}.
    {badmatch,{x,0}}.


{function, slogan, 1, 52}.
  {label,51}.
    {line,[{location,"beam_doc_SUITE.erl",162}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,slogan},1}.
  {label,52}.
    {allocate,0,1}.
    {move,{literal,"slogan"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",164}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,63},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",170}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,62},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,62},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,62},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,6},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,7},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,8},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,9},{x,1}}.
    {test,is_nonempty_list,{f,62},[{x,1}]}.
    {get_list,{x,1},{x,10},{x,1}}.
    {test,is_nil,{f,62},[{x,1}]}.
    {test,is_tuple,{f,61},[{x,2}]}.
    {test,test_arity,{f,61},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,0}}.
    {test,is_eq_exact,{f,61},[{x,0},{literal,{function,connect,2}}]}.
    {get_tuple_element,{x,2},2,{x,0}}.
    {test,is_eq_exact,
          {f,61},
          [{x,0},{literal,[<<"connect(TCPSocket, TLSOptions)">>]}]}.
    {get_tuple_element,{x,2},3,{x,0}}.
    {test,is_eq_exact,{f,61},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,0}}.
    {test,is_map,{f,61},[{x,0}]}.
    {get_map_elements,{f,61},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,since},{x,0},{atom,equiv},{x,1}]}}.
    {test,is_eq_exact,{f,61},[{x,1},{literal,<<"connect/3">>}]}.
    {test,is_eq_exact,{f,61},[{x,0},{literal,<<"OTP R14B">>}]}.
    {test,is_tuple,{f,60},[{x,3}]}.
    {test,test_arity,{f,60},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,0}}.
    {test,is_eq_exact,
          {f,60},
          [{x,0},{literal,{function,spec_multiclause_slogan_ignored,1}}]}.
    {get_tuple_element,{x,3},2,{x,0}}.
    {test,is_eq_exact,
          {f,60},
          [{x,0},{literal,[<<"spec_multiclause_slogan_ignored(X)">>]}]}.
    {get_tuple_element,{x,3},3,{x,0}}.
    {test,is_eq_exact,{f,60},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,3},4,{x,0}}.
    {test,is_map,{f,60},[{x,0}]}.
    {test,is_tuple,{f,59},[{x,4}]}.
    {test,test_arity,{f,59},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,0}}.
    {test,is_eq_exact,
          {f,59},
          [{x,0},{literal,{function,spec_no_doc_slogan,1}}]}.
    {get_tuple_element,{x,4},2,{x,0}}.
    {test,is_eq_exact,{f,59},[{x,0},{literal,[<<"spec_no_doc_slogan(Y)">>]}]}.
    {get_tuple_element,{x,4},3,{x,0}}.
    {test,is_eq_exact,{f,59},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,4},4,{x,0}}.
    {test,is_map,{f,59},[{x,0}]}.
    {test,is_tuple,{f,58},[{x,5}]}.
    {test,test_arity,{f,58},[{x,5},5]}.
    {get_tuple_element,{x,5},0,{x,0}}.
    {test,is_eq_exact,{f,58},[{x,0},{literal,{function,no_doc_slogan,1}}]}.
    {get_tuple_element,{x,5},2,{x,0}}.
    {test,is_eq_exact,{f,58},[{x,0},{literal,[<<"no_doc_slogan(X)">>]}]}.
    {get_tuple_element,{x,5},3,{x,0}}.
    {test,is_eq_exact,{f,58},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,5},4,{x,0}}.
    {test,is_map,{f,58},[{x,0}]}.
    {test,is_tuple,{f,57},[{x,6}]}.
    {test,test_arity,{f,57},[{x,6},5]}.
    {get_tuple_element,{x,6},0,{x,0}}.
    {test,is_eq_exact,{f,57},[{x,0},{literal,{function,spec_slogan,2}}]}.
    {get_tuple_element,{x,6},2,{x,0}}.
    {test,is_eq_exact,{f,57},[{x,0},{literal,[<<"spec_slogan(Y, Z)">>]}]}.
    {get_tuple_element,{x,6},4,{x,0}}.
    {test,is_map,{f,57},[{x,0}]}.
    {test,is_tuple,{f,56},[{x,7}]}.
    {test,test_arity,{f,56},[{x,7},5]}.
    {get_tuple_element,{x,7},0,{x,0}}.
    {test,is_eq_exact,{f,56},[{x,0},{literal,{function,spec_slogan,1}}]}.
    {get_tuple_element,{x,7},2,{x,0}}.
    {test,is_eq_exact,{f,56},[{x,0},{literal,[<<"spec_slogan(Y)">>]}]}.
    {get_tuple_element,{x,7},4,{x,0}}.
    {test,is_map,{f,56},[{x,0}]}.
    {test,is_tuple,{f,55},[{x,8}]}.
    {test,test_arity,{f,55},[{x,8},5]}.
    {get_tuple_element,{x,8},0,{x,0}}.
    {test,is_eq_exact,{f,55},[{x,0},{literal,{function,no_slogan,1}}]}.
    {get_tuple_element,{x,8},2,{x,0}}.
    {test,is_eq_exact,{f,55},[{x,0},{literal,[<<"no_slogan/1">>]}]}.
    {get_tuple_element,{x,8},4,{x,0}}.
    {test,is_map,{f,55},[{x,0}]}.
    {get_tuple_element,{x,8},3,{x,0}}.
    {test,is_eq_exact,
          {f,55},
          [{x,0},
           {literal,#{<<"en">> =>
                          <<"Not a slogan\n\nTests slogans in multi-clause">>}}]}.
    {test,is_tuple,{f,54},[{x,9}]}.
    {test,test_arity,{f,54},[{x,9},5]}.
    {get_tuple_element,{x,9},0,{x,0}}.
    {test,is_eq_exact,{f,54},[{x,0},{literal,{function,bar,0}}]}.
    {get_tuple_element,{x,9},2,{x,0}}.
    {test,is_eq_exact,{f,54},[{x,0},{literal,[<<"bar()">>]}]}.
    {get_tuple_element,{x,9},4,{x,0}}.
    {test,is_map,{f,54},[{x,0}]}.
    {get_tuple_element,{x,9},3,{x,0}}.
    {test,is_eq_exact,
          {f,54},
          [{x,0},
           {literal,#{<<"en">> =>
                          <<"foo()\nNot a slogan since foo =/= bar">>}}]}.
    {test,is_tuple,{f,53},[{x,10}]}.
    {test,test_arity,{f,53},[{x,10},5]}.
    {get_tuple_element,{x,10},0,{x,0}}.
    {test,is_eq_exact,{f,53},[{x,0},{literal,{function,main,1}}]}.
    {get_tuple_element,{x,10},2,{x,0}}.
    {test,is_eq_exact,{f,53},[{x,0},{literal,[<<"main(Foo)">>]}]}.
    {get_tuple_element,{x,10},4,{x,0}}.
    {test,is_map,{f,53},[{x,0}]}.
    {get_tuple_element,{x,10},3,{x,0}}.
    {test,is_eq_exact,
          {f,53},
          [{x,0},{literal,#{<<"en">> => <<"Returns ok.">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,53}.
    {line,[{location,"beam_doc_SUITE.erl",181}]}.
    {badmatch,{x,10}}.
  {label,54}.
    {line,[{location,"beam_doc_SUITE.erl",180}]}.
    {badmatch,{x,9}}.
  {label,55}.
    {line,[{location,"beam_doc_SUITE.erl",179}]}.
    {badmatch,{x,8}}.
  {label,56}.
    {line,[{location,"beam_doc_SUITE.erl",178}]}.
    {badmatch,{x,7}}.
  {label,57}.
    {line,[{location,"beam_doc_SUITE.erl",177}]}.
    {badmatch,{x,6}}.
  {label,58}.
    {line,[{location,"beam_doc_SUITE.erl",176}]}.
    {badmatch,{x,5}}.
  {label,59}.
    {line,[{location,"beam_doc_SUITE.erl",175}]}.
    {badmatch,{x,4}}.
  {label,60}.
    {line,[{location,"beam_doc_SUITE.erl",174}]}.
    {badmatch,{x,3}}.
  {label,61}.
    {line,[{location,"beam_doc_SUITE.erl",172}]}.
    {badmatch,{x,2}}.
  {label,62}.
    {line,[{location,"beam_doc_SUITE.erl",168}]}.
    {badmatch,{x,0}}.
  {label,63}.
    {line,[{location,"beam_doc_SUITE.erl",164}]}.
    {badmatch,{x,0}}.


{function, types_and_opaques, 1, 65}.
  {label,64}.
    {line,[{location,"beam_doc_SUITE.erl",184}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,types_and_opaques},1}.
  {label,65}.
    {allocate,8,1}.
    {init_yregs,{list,[{y,0},{y,1},{y,2},{y,3},{y,4},{y,5},{y,6}]}}.
    {move,{x,0},{y,7}}.
    {move,{literal,[return_warnings]},{x,2}}.
    {move,{literal,"types_and_opaques"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",186}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,106},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{y,6}}.
    {get_tuple_element,{x,0},2,{y,5}}.
    {move,{y,6},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",203}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,105},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,105},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,105},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,6},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,7},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,8},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,9},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,10},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,11},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,12},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,13},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,14},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,15},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,16},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,17},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,18},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,19},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,20},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,21},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,22},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,23},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,24},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,25},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,26},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,27},{x,1}}.
    {test,is_nonempty_list,{f,105},[{x,1}]}.
    {get_list,{x,1},{x,28},{x,1}}.
    {test,is_nil,{f,105},[{x,1}]}.
    {test,is_tuple,{f,104},[{x,2}]}.
    {test,test_arity,{f,104},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,0}}.
    {test,is_eq_exact,{f,104},[{x,0},{literal,{type,public,0}}]}.
    {get_tuple_element,{x,2},1,{x,0}}.
    {test,is_eq_exact,{f,104},[{x,0},{literal,{125,2}}]}.
    {get_tuple_element,{x,2},2,{x,0}}.
    {test,is_eq_exact,{f,104},[{x,0},{literal,[<<"public()">>]}]}.
    {get_tuple_element,{x,2},3,{x,0}}.
    {test,is_eq_exact,{f,104},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,0}}.
    {test,is_map,{f,104},[{x,0}]}.
    {get_map_elements,{f,104},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,104},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,103},[{x,3}]}.
    {test,test_arity,{f,103},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,0}}.
    {test,is_eq_exact,{f,103},[{x,0},{literal,{type,intermediate,0}}]}.
    {get_tuple_element,{x,3},1,{x,0}}.
    {test,is_eq_exact,{f,103},[{x,0},{literal,{124,2}}]}.
    {get_tuple_element,{x,3},2,{x,0}}.
    {test,is_eq_exact,{f,103},[{x,0},{literal,[<<"intermediate()">>]}]}.
    {get_tuple_element,{x,3},3,{x,0}}.
    {test,is_eq_exact,{f,103},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,3},4,{x,0}}.
    {test,is_map,{f,103},[{x,0}]}.
    {get_map_elements,{f,103},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,103},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,102},[{x,4}]}.
    {test,test_arity,{f,102},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,0}}.
    {test,is_eq_exact,{f,102},[{x,0},{literal,{type,hidden_nowarn_type,0}}]}.
    {get_tuple_element,{x,4},1,{x,0}}.
    {test,is_eq_exact,{f,102},[{x,0},{literal,{120,2}}]}.
    {get_tuple_element,{x,4},2,{x,0}}.
    {test,is_eq_exact,{f,102},[{x,0},{literal,[<<"hidden_nowarn_type()">>]}]}.
    {get_tuple_element,{x,4},3,{x,0}}.
    {test,is_eq_exact,{f,102},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,4},4,{x,0}}.
    {test,is_map,{f,102},[{x,0}]}.
    {get_map_elements,{f,102},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,102},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,101},[{x,5}]}.
    {test,test_arity,{f,101},[{x,5},5]}.
    {get_tuple_element,{x,5},0,{x,0}}.
    {test,is_eq_exact,{f,101},[{x,0},{literal,{type,hidden_type,0}}]}.
    {get_tuple_element,{x,5},1,{x,0}}.
    {test,is_eq_exact,{f,101},[{x,0},{literal,{117,2}}]}.
    {get_tuple_element,{x,5},2,{x,0}}.
    {test,is_eq_exact,{f,101},[{x,0},{literal,[<<"hidden_type()">>]}]}.
    {get_tuple_element,{x,5},3,{x,0}}.
    {test,is_eq_exact,{f,101},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,5},4,{x,0}}.
    {test,is_map,{f,101},[{x,0}]}.
    {get_map_elements,{f,101},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,101},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,100},[{x,6}]}.
    {test,test_arity,{f,100},[{x,6},5]}.
    {get_tuple_element,{x,6},0,{x,0}}.
    {test,is_eq_exact,
          {f,100},
          [{x,0},{literal,{type,my_other_private_type,0}}]}.
    {get_tuple_element,{x,6},2,{x,0}}.
    {test,is_eq_exact,
          {f,100},
          [{x,0},{literal,[<<"my_other_private_type()">>]}]}.
    {get_tuple_element,{x,6},3,{x,0}}.
    {test,is_eq_exact,{f,100},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,6},4,{x,0}}.
    {test,is_map,{f,100},[{x,0}]}.
    {get_map_elements,{f,100},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,100},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,99},[{x,7}]}.
    {test,test_arity,{f,99},[{x,7},5]}.
    {get_tuple_element,{x,7},0,{x,0}}.
    {get_tuple_element,{x,7},1,{y,4}}.
    {test,is_eq_exact,{f,99},[{x,0},{literal,{type,my_private_type,0}}]}.
    {get_tuple_element,{x,7},2,{x,0}}.
    {test,is_eq_exact,{f,99},[{x,0},{literal,[<<"my_private_type()">>]}]}.
    {get_tuple_element,{x,7},3,{x,0}}.
    {test,is_eq_exact,{f,99},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,7},4,{x,0}}.
    {test,is_map,{f,99},[{x,0}]}.
    {get_map_elements,{f,99},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,99},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,98},[{x,8}]}.
    {test,test_arity,{f,98},[{x,8},5]}.
    {get_tuple_element,{x,8},0,{x,0}}.
    {get_tuple_element,{x,8},1,{y,3}}.
    {test,is_eq_exact,{f,98},[{x,0},{literal,{type,mymap,0}}]}.
    {get_tuple_element,{x,8},2,{x,0}}.
    {test,is_eq_exact,{f,98},[{x,0},{literal,[<<"mymap()">>]}]}.
    {get_tuple_element,{x,8},3,{x,0}}.
    {test,is_eq_exact,{f,98},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,8},4,{x,0}}.
    {test,is_map,{f,98},[{x,0}]}.
    {get_map_elements,{f,98},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,98},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,97},[{x,9}]}.
    {test,test_arity,{f,97},[{x,9},5]}.
    {get_tuple_element,{x,9},0,{x,0}}.
    {get_tuple_element,{x,9},1,{y,2}}.
    {test,is_eq_exact,{f,97},[{x,0},{literal,{type,state_enter,0}}]}.
    {get_tuple_element,{x,9},2,{x,0}}.
    {test,is_eq_exact,{f,97},[{x,0},{literal,[<<"state_enter()">>]}]}.
    {get_tuple_element,{x,9},3,{x,0}}.
    {test,is_eq_exact,{f,97},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,9},4,{x,0}}.
    {test,is_map,{f,97},[{x,0}]}.
    {get_map_elements,{f,97},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,97},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,96},[{x,10}]}.
    {test,test_arity,{f,96},[{x,10},5]}.
    {get_tuple_element,{x,10},0,{x,0}}.
    {get_tuple_element,{x,10},1,{y,1}}.
    {test,is_eq_exact,{f,96},[{x,0},{literal,{type,callback_mode,0}}]}.
    {get_tuple_element,{x,10},2,{x,0}}.
    {test,is_eq_exact,{f,96},[{x,0},{literal,[<<"callback_mode()">>]}]}.
    {get_tuple_element,{x,10},3,{x,0}}.
    {test,is_eq_exact,{f,96},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,10},4,{x,0}}.
    {test,is_map,{f,96},[{x,0}]}.
    {get_map_elements,{f,96},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,96},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,95},[{x,11}]}.
    {test,test_arity,{f,95},[{x,11},5]}.
    {get_tuple_element,{x,11},0,{x,0}}.
    {get_tuple_element,{x,11},1,{y,0}}.
    {test,is_eq_exact,{f,95},[{x,0},{literal,{type,callback_mode_result,0}}]}.
    {get_tuple_element,{x,11},2,{x,0}}.
    {test,is_eq_exact,{f,95},[{x,0},{literal,[<<"callback_mode_result()">>]}]}.
    {get_tuple_element,{x,11},3,{x,0}}.
    {test,is_eq_exact,{f,95},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,11},4,{x,0}}.
    {test,is_map,{f,95},[{x,0}]}.
    {get_map_elements,{f,95},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,95},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,94},[{x,12}]}.
    {test,test_arity,{f,94},[{x,12},5]}.
    {get_tuple_element,{x,12},0,{x,0}}.
    {test,is_eq_exact,{f,94},[{x,0},{literal,{type,encoding_func,0}}]}.
    {get_tuple_element,{x,12},2,{x,0}}.
    {test,is_eq_exact,{f,94},[{x,0},{literal,[<<"encoding_func()">>]}]}.
    {get_tuple_element,{x,12},3,{x,0}}.
    {test,is_eq_exact,{f,94},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,12},4,{x,0}}.
    {test,is_map,{f,94},[{x,0}]}.
    {get_map_elements,{f,94},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,94},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,93},[{x,13}]}.
    {test,test_arity,{f,93},[{x,13},5]}.
    {get_tuple_element,{x,13},0,{x,0}}.
    {test,is_eq_exact,{f,93},[{x,0},{literal,{type,three,0}}]}.
    {get_tuple_element,{x,13},2,{x,0}}.
    {test,is_eq_exact,{f,93},[{x,0},{literal,[<<"three()">>]}]}.
    {get_tuple_element,{x,13},3,{x,0}}.
    {test,is_eq_exact,{f,93},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,13},4,{x,0}}.
    {test,is_map,{f,93},[{x,0}]}.
    {get_map_elements,{f,93},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,93},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,92},[{x,14}]}.
    {test,test_arity,{f,92},[{x,14},5]}.
    {get_tuple_element,{x,14},0,{x,0}}.
    {test,is_eq_exact,{f,92},[{x,0},{literal,{type,two,0}}]}.
    {get_tuple_element,{x,14},2,{x,0}}.
    {test,is_eq_exact,{f,92},[{x,0},{literal,[<<"two()">>]}]}.
    {get_tuple_element,{x,14},3,{x,0}}.
    {test,is_eq_exact,{f,92},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,14},4,{x,0}}.
    {test,is_map,{f,92},[{x,0}]}.
    {get_map_elements,{f,92},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,92},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,91},[{x,15}]}.
    {test,test_arity,{f,91},[{x,15},5]}.
    {get_tuple_element,{x,15},0,{x,0}}.
    {test,is_eq_exact,{f,91},[{x,0},{literal,{type,one,0}}]}.
    {get_tuple_element,{x,15},2,{x,0}}.
    {test,is_eq_exact,{f,91},[{x,0},{literal,[<<"one()">>]}]}.
    {get_tuple_element,{x,15},3,{x,0}}.
    {test,is_eq_exact,{f,91},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,15},4,{x,0}}.
    {test,is_map,{f,91},[{x,0}]}.
    {get_map_elements,{f,91},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,91},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,90},[{x,16}]}.
    {test,test_arity,{f,90},[{x,16},5]}.
    {get_tuple_element,{x,16},0,{x,0}}.
    {test,is_eq_exact,{f,90},[{x,0},{literal,{type,hidden,0}}]}.
    {get_tuple_element,{x,16},2,{x,0}}.
    {test,is_eq_exact,{f,90},[{x,0},{literal,[<<"hidden()">>]}]}.
    {get_tuple_element,{x,16},3,{x,0}}.
    {test,is_eq_exact,{f,90},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,16},4,{x,0}}.
    {test,is_map,{f,90},[{x,0}]}.
    {get_map_elements,{f,90},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,90},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,89},[{x,17}]}.
    {test,test_arity,{f,89},[{x,17},5]}.
    {get_tuple_element,{x,17},0,{x,0}}.
    {test,is_eq_exact,{f,89},[{x,0},{literal,{type,hidden_false,0}}]}.
    {get_tuple_element,{x,17},2,{x,0}}.
    {test,is_eq_exact,{f,89},[{x,0},{literal,[<<"hidden_false()">>]}]}.
    {get_tuple_element,{x,17},3,{x,0}}.
    {test,is_eq_exact,{f,89},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,17},4,{x,0}}.
    {test,is_map,{f,89},[{x,0}]}.
    {get_map_elements,{f,89},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0},{atom,authors},{x,1}]}}.
    {test,is_eq_exact,{f,89},[{x,1},{literal,"Someone else"}]}.
    {test,is_eq_exact,{f,89},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,88},[{x,18}]}.
    {test,test_arity,{f,88},[{x,18},5]}.
    {get_tuple_element,{x,18},0,{x,0}}.
    {test,is_eq_exact,{f,88},[{x,0},{literal,{type,mmaybe,1}}]}.
    {get_tuple_element,{x,18},2,{x,0}}.
    {test,is_eq_exact,{f,88},[{x,0},{literal,[<<"mmaybe(X)">>]}]}.
    {get_tuple_element,{x,18},3,{x,0}}.
    {test,is_eq_exact,
          {f,88},
          [{x,0},
           {literal,#{<<"en">> =>
                          <<"mmaybe(X) ::= nothing | X.\n\nRepresents a maybe type.">>}}]}.
    {get_tuple_element,{x,18},4,{x,0}}.
    {test,is_eq_exact,
          {f,88},
          [{x,0},{literal,#{authors => "Someone else",exported => true}}]}.
    {test,is_tuple,{f,87},[{x,19}]}.
    {test,test_arity,{f,87},[{x,19},5]}.
    {get_tuple_element,{x,19},0,{x,0}}.
    {test,is_eq_exact,{f,87},[{x,0},{literal,{type,unnamed,0}}]}.
    {get_tuple_element,{x,19},1,{x,0}}.
    {test,is_eq_exact,{f,87},[{x,0},{literal,{30,2}}]}.
    {get_tuple_element,{x,19},2,{x,0}}.
    {test,is_eq_exact,{f,87},[{x,0},{literal,[<<"unnamed()">>]}]}.
    {get_tuple_element,{x,19},4,{x,0}}.
    {test,is_map,{f,87},[{x,0}]}.
    {get_map_elements,{f,87},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0},{atom,equiv},{x,1}]}}.
    {test,is_eq_exact,{f,87},[{x,1},{literal,<<"non_neg_integer()">>}]}.
    {test,is_eq_exact,{f,87},[{x,0},{atom,true}]}.
    {get_tuple_element,{x,19},3,{x,0}}.
    {test,is_eq_exact,
          {f,87},
          [{x,0},
           {literal,#{<<"en">> =>
                          <<"Represents the name of a person that cannot be named.">>}}]}.
    {test,is_tuple,{f,86},[{x,20}]}.
    {test,test_arity,{f,86},[{x,20},5]}.
    {get_tuple_element,{x,20},0,{x,0}}.
    {test,is_eq_exact,{f,86},[{x,0},{literal,{type,param,1}}]}.
    {get_tuple_element,{x,20},2,{x,0}}.
    {test,is_eq_exact,{f,86},[{x,0},{literal,[<<"param(X)">>]}]}.
    {get_tuple_element,{x,20},4,{x,0}}.
    {test,is_map,{f,86},[{x,0}]}.
    {get_map_elements,{f,86},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0},{atom,equiv},{x,1}]}}.
    {test,is_eq_exact,{f,86},[{x,1},{literal,<<"madeup()">>}]}.
    {test,is_eq_exact,{f,86},[{x,0},{atom,true}]}.
    {get_tuple_element,{x,20},3,{x,0}}.
    {test,is_eq_exact,
          {f,86},
          [{x,0},{literal,#{<<"en">> => <<"Tests generics">>}}]}.
    {test,is_tuple,{f,85},[{x,21}]}.
    {test,test_arity,{f,85},[{x,21},5]}.
    {get_tuple_element,{x,21},0,{x,0}}.
    {test,is_eq_exact,{f,85},[{x,0},{literal,{type,natural_number,0}}]}.
    {get_tuple_element,{x,21},2,{x,0}}.
    {test,is_eq_exact,{f,85},[{x,0},{literal,[<<"natural_number()">>]}]}.
    {get_tuple_element,{x,21},3,{x,0}}.
    {test,is_eq_exact,{f,85},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,21},4,{x,0}}.
    {test,is_eq_exact,
          {f,85},
          [{x,0},
           {literal,#{equiv => <<"non_neg_integer/0">>,exported => true,
                      since => "1.0"}}]}.
    {test,is_tuple,{f,84},[{x,22}]}.
    {test,test_arity,{f,84},[{x,22},5]}.
    {get_tuple_element,{x,22},0,{x,0}}.
    {test,is_eq_exact,{f,84},[{x,0},{literal,{type,name,1}}]}.
    {get_tuple_element,{x,22},2,{x,0}}.
    {test,is_eq_exact,{f,84},[{x,0},{literal,[<<"name(_)">>]}]}.
    {get_tuple_element,{x,22},4,{x,0}}.
    {test,is_map,{f,84},[{x,0}]}.
    {get_map_elements,{f,84},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,84},[{x,0},{atom,true}]}.
    {get_tuple_element,{x,22},3,{x,0}}.
    {test,is_eq_exact,
          {f,84},
          [{x,0},
           {literal,#{<<"en">> => <<"Represents the name of a person.">>}}]}.
    {test,is_tuple,{f,83},[{x,23}]}.
    {test,test_arity,{f,83},[{x,23},5]}.
    {get_tuple_element,{x,23},0,{x,0}}.
    {test,is_eq_exact,{f,83},[{x,0},{literal,{type,hidden_included_type,0}}]}.
    {get_tuple_element,{x,23},3,{x,0}}.
    {test,is_eq_exact,{f,83},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,23},4,{x,0}}.
    {test,is_map,{f,83},[{x,0}]}.
    {get_map_elements,{f,83},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,83},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,82},[{x,24}]}.
    {test,test_arity,{f,82},[{x,24},5]}.
    {get_tuple_element,{x,24},0,{x,0}}.
    {test,is_eq_exact,{f,82},[{x,0},{literal,{function,uses_public,0}}]}.
    {get_tuple_element,{x,24},1,{x,0}}.
    {test,is_eq_exact,{f,82},[{x,0},{literal,{128,1}}]}.
    {get_tuple_element,{x,24},2,{x,0}}.
    {test,is_eq_exact,{f,82},[{x,0},{literal,[<<"uses_public()">>]}]}.
    {get_tuple_element,{x,24},3,{x,0}}.
    {test,is_eq_exact,{f,82},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,24},4,{x,0}}.
    {test,is_map,{f,82},[{x,0}]}.
    {test,is_tuple,{f,81},[{x,25}]}.
    {test,test_arity,{f,81},[{x,25},5]}.
    {get_tuple_element,{x,25},0,{x,0}}.
    {test,is_eq_exact,
          {f,81},
          [{x,0},{literal,{function,ignore_type_from_hidden_fun,0}}]}.
    {get_tuple_element,{x,25},2,{x,0}}.
    {test,is_eq_exact,
          {f,81},
          [{x,0},{literal,[<<"ignore_type_from_hidden_fun()">>]}]}.
    {get_tuple_element,{x,25},3,{x,0}}.
    {test,is_eq_exact,{f,81},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,25},4,{x,0}}.
    {test,is_map,{f,81},[{x,0}]}.
    {test,is_tuple,{f,80},[{x,26}]}.
    {test,test_arity,{f,80},[{x,26},5]}.
    {get_tuple_element,{x,26},0,{x,0}}.
    {test,is_eq_exact,{f,80},[{x,0},{literal,{function,map_fun,0}}]}.
    {get_tuple_element,{x,26},2,{x,0}}.
    {test,is_eq_exact,{f,80},[{x,0},{literal,[<<"map_fun()">>]}]}.
    {get_tuple_element,{x,26},3,{x,0}}.
    {test,is_eq_exact,{f,80},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,26},4,{x,0}}.
    {test,is_map,{f,80},[{x,0}]}.
    {test,is_tuple,{f,79},[{x,27}]}.
    {test,test_arity,{f,79},[{x,27},5]}.
    {get_tuple_element,{x,27},0,{x,0}}.
    {test,is_eq_exact,
          {f,79},
          [{x,0},{literal,{function,private_encoding_func,2}}]}.
    {get_tuple_element,{x,27},2,{x,0}}.
    {test,is_eq_exact,
          {f,79},
          [{x,0},{literal,[<<"private_encoding_func(Data, Options)">>]}]}.
    {get_tuple_element,{x,27},3,{x,0}}.
    {test,is_eq_exact,{f,79},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,27},4,{x,0}}.
    {test,is_map,{f,79},[{x,0}]}.
    {test,is_tuple,{f,78},[{x,28}]}.
    {test,test_arity,{f,78},[{x,28},5]}.
    {get_tuple_element,{x,28},0,{x,0}}.
    {test,is_eq_exact,{f,78},[{x,0},{literal,{function,foo,0}}]}.
    {get_tuple_element,{x,28},2,{x,0}}.
    {test,is_eq_exact,{f,78},[{x,0},{literal,[<<"foo()">>]}]}.
    {get_tuple_element,{x,28},3,{x,0}}.
    {test,is_eq_exact,{f,78},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,28},4,{x,0}}.
    {test,is_map,{f,78},[{x,0}]}.
    {get_tuple_element,{x,6},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",240}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,75},[{x,0},{integer,103}]}.
    {move,{y,4},{x,0}}.
    {init_yregs,{list,[{y,4}]}}.
    {line,[{location,"beam_doc_SUITE.erl",241}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,74},[{x,0},{integer,102}]}.
    {move,{y,3},{x,0}}.
    {init_yregs,{list,[{y,3}]}}.
    {line,[{location,"beam_doc_SUITE.erl",242}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,73},[{x,0},{integer,99}]}.
    {move,{y,2},{x,0}}.
    {init_yregs,{list,[{y,2}]}}.
    {line,[{location,"beam_doc_SUITE.erl",243}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,72},[{x,0},{integer,96}]}.
    {move,{y,1},{x,0}}.
    {init_yregs,{list,[{y,1}]}}.
    {line,[{location,"beam_doc_SUITE.erl",244}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,71},[{x,0},{integer,95}]}.
    {move,{y,0},{x,0}}.
    {init_yregs,{list,[{y,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",245}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,70},[{x,0},{integer,93}]}.
    {test,is_nonempty_list,{f,77},[{y,5}]}.
    {get_list,{y,5},{x,0},{x,1}}.
    {test,is_tuple,{f,77},[{x,0}]}.
    {test,test_arity,{f,77},[{x,0},2]}.
    {get_tuple_element,{x,0},1,{y,4}}.
    {test,is_nonempty_list,{f,77},[{x,1}]}.
    {get_list,{x,1},{y,3},{x,1}}.
    {test,is_tuple,{f,77},[{y,3}]}.
    {test,test_arity,{f,77},[{y,3},2]}.
    {get_tuple_element,{y,3},1,{y,2}}.
    {test,is_nil,{f,77},[{x,1}]}.
    {get_tuple_element,{x,0},0,{x,0}}.
    {move,{y,2},{y,5}}.
    {trim,3,5}.
    {line,[{location,"beam_doc_SUITE.erl",248}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,69},[{x,0},{literal,"types_and_opaques.erl"}]}.
    {move,{y,1},{x,1}}.
    {move,{y,0},{y,1}}.
    {trim,1,4}.
    {move,{integer,4},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",250}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,68},
          [{x,0},
           {literal,{{117,2},
                     beam_doc,
                     {hidden_type_used_in_exported_fun,{hidden_type,0}}}}]}.
    {get_tuple_element,{y,0},0,{x,0}}.
    {trim,1,3}.
    {line,[{location,"beam_doc_SUITE.erl",252}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,67},[{x,0},{literal,"types_and_opaques.hrl"}]}.
    {move,{y,0},{x,1}}.
    {trim,1,2}.
    {move,{integer,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",254}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
        {f,66},
        [{x,0},
         {literal,
             {{1,2},
              beam_doc,
              {hidden_type_used_in_exported_fun,{hidden_included_type,0}}}}]}.
    {move,{literal,"types_and_opaques"},{x,1}}.
    {move,{literal,[return_warnings,nowarn_hidden_doc,nowarn_unused_type]},
          {x,2}}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,1}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",257}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,76},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},2,{x,1}}.
    {test,is_nonempty_list,{f,76},[{x,1}]}.
    {get_tl,{x,1},{x,1}}.
    {test,is_nil,{f,76},[{x,1}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,76},[{x,1},{y,0}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,1}.
    return.
  {label,66}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,
        {literal,
            {expected,
                {{1,2},
                 beam_doc,
                 {hidden_type_used_in_exported_fun,
                     {hidden_included_type,0}}}}},
        {x,0},
        {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 1 , HrlWs )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,254}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",254}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,67}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"types_and_opaques.hrl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( HrlFile )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,252}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",252}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,68}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,
        {literal,
            {expected,
                {{117,2},
                 beam_doc,
                 {hidden_type_used_in_exported_fun,{hidden_type,0}}}}},
        {x,0},
        {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 4 , Ws )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,250}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",250}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,69}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"types_and_opaques.erl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( File )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,248}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",248}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,70}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,93}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( CallbackResultLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,245}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",245}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,71}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,95}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( CallbackModeLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,244}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",244}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,72}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,96}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( StateEnterLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,243}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",243}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,73}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,99}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( MyMapLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,242}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",242}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,74}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,102}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( MyPrivateTypeLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,241}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",241}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,75}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,103}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( MyOtherPrivateTypeLine )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,240}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",240}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},8}.
  {label,76}.
    {line,[{location,"beam_doc_SUITE.erl",256}]}.
    {badmatch,{x,0}}.
  {label,77}.
    {line,[{location,"beam_doc_SUITE.erl",247}]}.
    {badmatch,{y,5}}.
  {label,78}.
    {line,[{location,"beam_doc_SUITE.erl",238}]}.
    {badmatch,{x,28}}.
  {label,79}.
    {line,[{location,"beam_doc_SUITE.erl",237}]}.
    {badmatch,{x,27}}.
  {label,80}.
    {line,[{location,"beam_doc_SUITE.erl",236}]}.
    {badmatch,{x,26}}.
  {label,81}.
    {line,[{location,"beam_doc_SUITE.erl",235}]}.
    {badmatch,{x,25}}.
  {label,82}.
    {line,[{location,"beam_doc_SUITE.erl",234}]}.
    {badmatch,{x,24}}.
  {label,83}.
    {line,[{location,"beam_doc_SUITE.erl",232}]}.
    {badmatch,{x,23}}.
  {label,84}.
    {line,[{location,"beam_doc_SUITE.erl",231}]}.
    {badmatch,{x,22}}.
  {label,85}.
    {line,[{location,"beam_doc_SUITE.erl",230}]}.
    {badmatch,{x,21}}.
  {label,86}.
    {line,[{location,"beam_doc_SUITE.erl",228}]}.
    {badmatch,{x,20}}.
  {label,87}.
    {line,[{location,"beam_doc_SUITE.erl",226}]}.
    {badmatch,{x,19}}.
  {label,88}.
    {line,[{location,"beam_doc_SUITE.erl",225}]}.
    {badmatch,{x,18}}.
  {label,89}.
    {line,[{location,"beam_doc_SUITE.erl",223}]}.
    {badmatch,{x,17}}.
  {label,90}.
    {line,[{location,"beam_doc_SUITE.erl",222}]}.
    {badmatch,{x,16}}.
  {label,91}.
    {line,[{location,"beam_doc_SUITE.erl",221}]}.
    {badmatch,{x,15}}.
  {label,92}.
    {line,[{location,"beam_doc_SUITE.erl",220}]}.
    {badmatch,{x,14}}.
  {label,93}.
    {line,[{location,"beam_doc_SUITE.erl",219}]}.
    {badmatch,{x,13}}.
  {label,94}.
    {line,[{location,"beam_doc_SUITE.erl",218}]}.
    {badmatch,{x,12}}.
  {label,95}.
    {line,[{location,"beam_doc_SUITE.erl",216}]}.
    {badmatch,{x,11}}.
  {label,96}.
    {line,[{location,"beam_doc_SUITE.erl",215}]}.
    {badmatch,{x,10}}.
  {label,97}.
    {line,[{location,"beam_doc_SUITE.erl",214}]}.
    {badmatch,{x,9}}.
  {label,98}.
    {line,[{location,"beam_doc_SUITE.erl",213}]}.
    {badmatch,{x,8}}.
  {label,99}.
    {line,[{location,"beam_doc_SUITE.erl",211}]}.
    {badmatch,{x,7}}.
  {label,100}.
    {line,[{location,"beam_doc_SUITE.erl",209}]}.
    {badmatch,{x,6}}.
  {label,101}.
    {line,[{location,"beam_doc_SUITE.erl",208}]}.
    {badmatch,{x,5}}.
  {label,102}.
    {line,[{location,"beam_doc_SUITE.erl",207}]}.
    {badmatch,{x,4}}.
  {label,103}.
    {line,[{location,"beam_doc_SUITE.erl",206}]}.
    {badmatch,{x,3}}.
  {label,104}.
    {line,[{location,"beam_doc_SUITE.erl",205}]}.
    {badmatch,{x,2}}.
  {label,105}.
    {line,[{location,"beam_doc_SUITE.erl",195}]}.
    {badmatch,{x,0}}.
  {label,106}.
    {line,[{location,"beam_doc_SUITE.erl",186}]}.
    {badmatch,{x,0}}.


{function, callback, 1, 108}.
  {label,107}.
    {line,[{location,"beam_doc_SUITE.erl",261}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,callback},1}.
  {label,108}.
    {allocate,4,1}.
    {init_yregs,{list,[{y,0},{y,1},{y,2}]}}.
    {move,{x,0},{y,3}}.
    {move,{literal,[return_warnings,report]},{x,2}}.
    {move,{literal,"callback"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",264}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,114},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},2,{x,1}}.
    {test,is_nonempty_list,{f,114},[{x,1}]}.
    {get_list,{x,1},{y,2},{x,1}}.
    {test,is_tuple,{f,114},[{y,2}]}.
    {test,test_arity,{f,114},[{y,2},2]}.
    {get_tuple_element,{y,2},1,{y,1}}.
    {test,is_nil,{f,114},[{x,1}]}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",286}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,113},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,113},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,113},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,nowarn,1}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{39,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"nowarn(Arg)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,hidden}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,warn,0}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{36,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"warn()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,hidden}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,bounded,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"bounded(X)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,multi,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"multi(Argument)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,113},[{x,3}]}.
    {get_map_elements,{f,113},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,
          {f,113},
          [{x,3},{literal,<<"A multiclause callback with slogan docs">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,multi_no_slogan,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"multi_no_slogan/1">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,ann,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"ann(X)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,param,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"param(X)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,113},[{x,2}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,113},[{x,2}]}.
    {test,test_arity,{f,113},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,{callback,change_order,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,[<<"change_order()">>]}]}.
    {get_tuple_element,{x,2},4,{x,3}}.
    {test,is_map,{f,113},[{x,3}]}.
    {get_map_elements,{f,113},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{atom,equiv},{x,3}]}}.
    {test,is_eq_exact,{f,113},[{x,3},{literal,<<"ok()">>}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_tuple,{f,113},[{x,3}]}.
    {test,test_arity,{f,113},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,113},[{x,4},{literal,{callback,all_ok,0}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,113},[{x,4},{literal,[<<"all_ok()">>]}]}.
    {get_tuple_element,{x,3},4,{x,4}}.
    {test,is_map,{f,113},[{x,4}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_tuple,{f,113},[{x,4}]}.
    {test,test_arity,{f,113},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {test,is_eq_exact,{f,113},[{x,5},{literal,{function,main2,0}}]}.
    {get_tuple_element,{x,4},2,{x,5}}.
    {test,is_eq_exact,{f,113},[{x,5},{literal,[<<"main2()">>]}]}.
    {get_tuple_element,{x,4},3,{x,5}}.
    {test,is_map,{f,113},[{x,5}]}.
    {get_map_elements,{f,113},
                      {tr,{x,5},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,5}]}}.
    {test,is_eq_exact,{f,113},[{x,5},{literal,<<"Second main">>}]}.
    {get_tuple_element,{x,4},4,{x,4}}.
    {test,is_map,{f,113},[{x,4}]}.
    {get_map_elements,{f,113},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{atom,equiv},{x,4}]}}.
    {test,is_eq_exact,{f,113},[{x,4},{literal,<<"main()">>}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_tuple,{f,113},[{x,4}]}.
    {test,test_arity,{f,113},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,5}}.
    {test,is_eq_exact,{f,113},[{x,5},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,4},2,{x,5}}.
    {test,is_eq_exact,{f,113},[{x,5},{literal,[<<"main()">>]}]}.
    {get_tuple_element,{x,4},4,{x,5}}.
    {test,is_map,{f,113},[{x,5}]}.
    {test,is_nonempty_list,{f,113},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,1}}.
    {test,is_tuple,{f,113},[{x,5}]}.
    {test,test_arity,{f,113},[{x,5},5]}.
    {get_tuple_element,{x,5},0,{x,6}}.
    {test,is_eq_exact,{f,113},[{x,6},{literal,{function,all_ok,0}}]}.
    {get_tuple_element,{x,5},2,{x,6}}.
    {test,is_eq_exact,{f,113},[{x,6},{literal,[<<"all_ok()">>]}]}.
    {get_tuple_element,{x,5},4,{x,6}}.
    {test,is_map,{f,113},[{x,6}]}.
    {get_map_elements,{f,113},
                      {tr,{x,6},{t_map,any,any}},
                      {list,[{atom,equiv},{x,6}]}}.
    {test,is_eq_exact,{f,113},[{x,6},{literal,<<"ok/0">>}]}.
    {test,is_nil,{f,113},[{x,1}]}.
    {get_tuple_element,{x,2},3,{x,1}}.
    {test,is_eq_exact,
          {f,113},
          [{x,1},{literal,#{<<"en">> => <<"Test changing order">>}}]}.
    {get_tuple_element,{x,3},3,{x,1}}.
    {test,is_eq_exact,
          {f,113},
          [{x,1},
           {literal,#{<<"en">> =>
                          <<"Callback fn that always returns ok.">>}}]}.
    {get_tuple_element,{x,4},3,{x,1}}.
    {test,is_eq_exact,
          {f,113},
          [{x,1},{literal,#{<<"en">> => <<"all_ok()\n\nCalls all_ok/0">>}}]}.
    {get_tuple_element,{x,5},3,{x,1}}.
    {test,is_eq_exact,
          {f,113},
          [{x,1},{literal,#{<<"en">> => <<"This is a test">>}}]}.
    {get_tuple_element,{y,2},0,{x,0}}.
    {move,{y,0},{y,2}}.
    {trim,1,3}.
    {line,[{location,"beam_doc_SUITE.erl",288}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,111},[{x,0},{literal,"callback.erl"}]}.
    {test_heap,2,0}.
    {put_list,{y,0},nil,{x,1}}.
    {move,{literal,"Warnings: ~p~n"},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",289}]}.
    {call_ext,2,{extfunc,io,format,2}}.
    {line,[{location,"beam_doc_SUITE.erl",290}]}.
    {gc_bif,length,{f,0},0,[{y,0}],{x,0}}.
    {test,is_eq_exact,
          {f,110},
          [{tr,{x,0},{t_integer,{0,288230376151711743}}},{integer,1}]}.
    {move,{y,0},{x,1}}.
    {trim,1,2}.
    {move,{integer,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",291}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,109},
          [{x,0},{literal,{{36,2},beam_doc,{hidden_callback,{warn,0}}}}]}.
    {move,{literal,"callback"},{x,1}}.
    {move,{literal,[return_warnings,report,nowarn_hidden_doc]},{x,2}}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,1}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",294}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,112},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},2,{x,1}}.
    {test,is_nil,{f,112},[{x,1}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,112},[{x,1},{y,0}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,1}.
    return.
  {label,109}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 36 , 2 } , beam_doc , { hidden_callback , { warn , 0 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 1 , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,291}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",291}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},4}.
  {label,110}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,1}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"length ( Warnings )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,290}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",290}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},4}.
  {label,111}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"callback.erl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( File )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,288}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",288}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},4}.
  {label,112}.
    {line,[{location,"beam_doc_SUITE.erl",293}]}.
    {badmatch,{x,0}}.
  {label,113}.
    {line,[{location,"beam_doc_SUITE.erl",269}]}.
    {badmatch,{x,0}}.
  {label,114}.
    {line,[{location,"beam_doc_SUITE.erl",263}]}.
    {badmatch,{x,0}}.


{function, private_types, 1, 116}.
  {label,115}.
    {line,[{location,"beam_doc_SUITE.erl",298}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,private_types},1}.
  {label,116}.
    {allocate,0,1}.
    {move,{literal,"private_types"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",300}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,144},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",313}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,143},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,143},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,143},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,6},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,7},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,8},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,9},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,10},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,11},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,12},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,13},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,14},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,15},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,16},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,17},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,18},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,19},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,20},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,21},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,22},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,23},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,24},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,25},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,26},{x,1}}.
    {test,is_nonempty_list,{f,143},[{x,1}]}.
    {get_list,{x,1},{x,27},{x,1}}.
    {test,is_nil,{f,143},[{x,1}]}.
    {test,is_tuple,{f,142},[{x,2}]}.
    {test,test_arity,{f,142},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,0}}.
    {test,is_eq_exact,{f,142},[{x,0},{literal,{type,remote_type_t,1}}]}.
    {get_tuple_element,{x,2},3,{x,0}}.
    {test,is_eq_exact,{f,142},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,0}}.
    {test,is_map,{f,142},[{x,0}]}.
    {get_map_elements,{f,142},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,142},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,141},[{x,3}]}.
    {test,test_arity,{f,141},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,0}}.
    {test,is_eq_exact,{f,141},[{x,0},{literal,{type,tuple_t,0}}]}.
    {get_tuple_element,{x,3},3,{x,0}}.
    {test,is_eq_exact,{f,141},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,3},4,{x,0}}.
    {test,is_map,{f,141},[{x,0}]}.
    {get_map_elements,{f,141},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,141},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,140},[{x,4}]}.
    {test,test_arity,{f,140},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,0}}.
    {test,is_eq_exact,{f,140},[{x,0},{literal,{type,record_a_t,0}}]}.
    {get_tuple_element,{x,4},3,{x,0}}.
    {test,is_eq_exact,{f,140},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,4},4,{x,0}}.
    {test,is_map,{f,140},[{x,0}]}.
    {get_map_elements,{f,140},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,140},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,139},[{x,5}]}.
    {test,test_arity,{f,139},[{x,5},5]}.
    {get_tuple_element,{x,5},0,{x,0}}.
    {test,is_eq_exact,{f,139},[{x,0},{literal,{type,record_inline_t,0}}]}.
    {get_tuple_element,{x,5},3,{x,0}}.
    {test,is_eq_exact,{f,139},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,5},4,{x,0}}.
    {test,is_map,{f,139},[{x,0}]}.
    {get_map_elements,{f,139},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,139},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,138},[{x,6}]}.
    {test,test_arity,{f,138},[{x,6},5]}.
    {get_tuple_element,{x,6},0,{x,0}}.
    {test,is_eq_exact,{f,138},[{x,0},{literal,{type,map_value_2_t,0}}]}.
    {get_tuple_element,{x,6},3,{x,0}}.
    {test,is_eq_exact,{f,138},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,6},4,{x,0}}.
    {test,is_map,{f,138},[{x,0}]}.
    {get_map_elements,{f,138},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,138},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,137},[{x,7}]}.
    {test,test_arity,{f,137},[{x,7},5]}.
    {get_tuple_element,{x,7},0,{x,0}}.
    {test,is_eq_exact,{f,137},[{x,0},{literal,{type,map_key_2_t,0}}]}.
    {get_tuple_element,{x,7},3,{x,0}}.
    {test,is_eq_exact,{f,137},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,7},4,{x,0}}.
    {test,is_map,{f,137},[{x,0}]}.
    {get_map_elements,{f,137},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,137},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,136},[{x,8}]}.
    {test,test_arity,{f,136},[{x,8},5]}.
    {get_tuple_element,{x,8},0,{x,0}}.
    {test,is_eq_exact,{f,136},[{x,0},{literal,{type,map_value_t,0}}]}.
    {get_tuple_element,{x,8},3,{x,0}}.
    {test,is_eq_exact,{f,136},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,8},4,{x,0}}.
    {test,is_map,{f,136},[{x,0}]}.
    {get_map_elements,{f,136},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,136},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,135},[{x,9}]}.
    {test,test_arity,{f,135},[{x,9},5]}.
    {get_tuple_element,{x,9},0,{x,0}}.
    {test,is_eq_exact,{f,135},[{x,0},{literal,{type,map_key_t,0}}]}.
    {get_tuple_element,{x,9},3,{x,0}}.
    {test,is_eq_exact,{f,135},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,9},4,{x,0}}.
    {test,is_map,{f,135},[{x,0}]}.
    {get_map_elements,{f,135},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,135},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,134},[{x,10}]}.
    {test,test_arity,{f,134},[{x,10},5]}.
    {get_tuple_element,{x,10},0,{x,0}}.
    {test,is_eq_exact,{f,134},[{x,0},{literal,{type,fun_ret_2_t,0}}]}.
    {get_tuple_element,{x,10},3,{x,0}}.
    {test,is_eq_exact,{f,134},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,10},4,{x,0}}.
    {test,is_map,{f,134},[{x,0}]}.
    {get_map_elements,{f,134},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,134},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,133},[{x,11}]}.
    {test,test_arity,{f,133},[{x,11},5]}.
    {get_tuple_element,{x,11},0,{x,0}}.
    {test,is_eq_exact,{f,133},[{x,0},{literal,{type,fun_ret_t,0}}]}.
    {get_tuple_element,{x,11},3,{x,0}}.
    {test,is_eq_exact,{f,133},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,11},4,{x,0}}.
    {test,is_map,{f,133},[{x,0}]}.
    {get_map_elements,{f,133},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,133},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,132},[{x,12}]}.
    {test,test_arity,{f,132},[{x,12},5]}.
    {get_tuple_element,{x,12},0,{x,0}}.
    {test,is_eq_exact,{f,132},[{x,0},{literal,{type,fun_t,0}}]}.
    {get_tuple_element,{x,12},3,{x,0}}.
    {test,is_eq_exact,{f,132},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,12},4,{x,0}}.
    {test,is_map,{f,132},[{x,0}]}.
    {get_map_elements,{f,132},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,132},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,131},[{x,13}]}.
    {test,test_arity,{f,131},[{x,13},5]}.
    {get_tuple_element,{x,13},0,{x,0}}.
    {test,is_eq_exact,{f,131},[{x,0},{literal,{type,complex,1}}]}.
    {get_tuple_element,{x,13},3,{x,0}}.
    {test,is_eq_exact,{f,131},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,13},4,{x,0}}.
    {test,is_map,{f,131},[{x,0}]}.
    {get_map_elements,{f,131},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,131},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,130},[{x,14}]}.
    {test,test_arity,{f,130},[{x,14},5]}.
    {get_tuple_element,{x,14},0,{x,0}}.
    {test,is_eq_exact,{f,130},[{x,0},{literal,{type,bounded_ret_t,0}}]}.
    {get_tuple_element,{x,14},3,{x,0}}.
    {test,is_eq_exact,{f,130},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,14},4,{x,0}}.
    {test,is_map,{f,130},[{x,0}]}.
    {get_map_elements,{f,130},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,130},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,129},[{x,15}]}.
    {test,test_arity,{f,129},[{x,15},5]}.
    {get_tuple_element,{x,15},0,{x,0}}.
    {test,is_eq_exact,{f,129},[{x,0},{literal,{type,arg_t,0}}]}.
    {get_tuple_element,{x,15},3,{x,0}}.
    {test,is_eq_exact,{f,129},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,15},4,{x,0}}.
    {test,is_map,{f,129},[{x,0}]}.
    {get_map_elements,{f,129},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,129},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,128},[{x,16}]}.
    {test,test_arity,{f,128},[{x,16},5]}.
    {get_tuple_element,{x,16},0,{x,0}}.
    {test,is_eq_exact,{f,128},[{x,0},{literal,{type,bounded_arg_t,0}}]}.
    {get_tuple_element,{x,16},3,{x,0}}.
    {test,is_eq_exact,{f,128},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,16},4,{x,0}}.
    {test,is_map,{f,128},[{x,0}]}.
    {get_map_elements,{f,128},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,128},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,127},[{x,17}]}.
    {test,test_arity,{f,127},[{x,17},5]}.
    {get_tuple_element,{x,17},0,{x,0}}.
    {test,is_eq_exact,{f,127},[{x,0},{literal,{type,private,0}}]}.
    {get_tuple_element,{x,17},1,{x,0}}.
    {test,is_eq_exact,{f,127},[{x,0},{literal,{30,2}}]}.
    {get_tuple_element,{x,17},2,{x,0}}.
    {test,is_eq_exact,{f,127},[{x,0},{literal,[<<"private()">>]}]}.
    {get_tuple_element,{x,17},3,{x,0}}.
    {test,is_eq_exact,{f,127},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,17},4,{x,0}}.
    {test,is_map,{f,127},[{x,0}]}.
    {get_map_elements,{f,127},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,127},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,126},[{x,18}]}.
    {test,test_arity,{f,126},[{x,18},5]}.
    {get_tuple_element,{x,18},0,{x,0}}.
    {test,is_eq_exact,{f,126},[{x,0},{literal,{type,hidden_export_t,0}}]}.
    {get_tuple_element,{x,18},2,{x,0}}.
    {test,is_eq_exact,{f,126},[{x,0},{literal,[<<"hidden_export_t()">>]}]}.
    {get_tuple_element,{x,18},3,{x,0}}.
    {test,is_eq_exact,{f,126},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,18},4,{x,0}}.
    {test,is_map,{f,126},[{x,0}]}.
    {get_map_elements,{f,126},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,126},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,125},[{x,19}]}.
    {test,test_arity,{f,125},[{x,19},5]}.
    {get_tuple_element,{x,19},0,{x,0}}.
    {test,is_eq_exact,{f,125},[{x,0},{literal,{type,private_cb_t,0}}]}.
    {get_tuple_element,{x,19},3,{x,0}}.
    {test,is_eq_exact,{f,125},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,19},4,{x,0}}.
    {test,is_map,{f,125},[{x,0}]}.
    {get_map_elements,{f,125},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,125},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,124},[{x,20}]}.
    {test,test_arity,{f,124},[{x,20},5]}.
    {get_tuple_element,{x,20},0,{x,0}}.
    {test,is_eq_exact,{f,124},[{x,0},{literal,{type,opaque_t,0}}]}.
    {get_tuple_element,{x,20},2,{x,0}}.
    {test,is_eq_exact,{f,124},[{x,0},{literal,[<<"opaque_t()">>]}]}.
    {get_tuple_element,{x,20},3,{x,0}}.
    {test,is_eq_exact,{f,124},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,20},4,{x,0}}.
    {test,is_map,{f,124},[{x,0}]}.
    {get_map_elements,{f,124},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,124},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,123},[{x,21}]}.
    {test,test_arity,{f,123},[{x,21},5]}.
    {get_tuple_element,{x,21},0,{x,0}}.
    {test,is_eq_exact,{f,123},[{x,0},{literal,{type,public_t,0}}]}.
    {get_tuple_element,{x,21},2,{x,0}}.
    {test,is_eq_exact,{f,123},[{x,0},{literal,[<<"public_t()">>]}]}.
    {get_tuple_element,{x,21},3,{x,0}}.
    {test,is_eq_exact,{f,123},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,21},4,{x,0}}.
    {test,is_map,{f,123},[{x,0}]}.
    {get_map_elements,{f,123},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,123},[{x,0},{atom,true}]}.
    {test,is_tuple,{f,122},[{x,22}]}.
    {test,test_arity,{f,122},[{x,22},5]}.
    {get_tuple_element,{x,22},0,{x,0}}.
    {test,is_eq_exact,{f,122},[{x,0},{literal,{type,private_t,0}}]}.
    {get_tuple_element,{x,22},2,{x,0}}.
    {test,is_eq_exact,{f,122},[{x,0},{literal,[<<"private_t()">>]}]}.
    {get_tuple_element,{x,22},3,{x,0}}.
    {test,is_eq_exact,{f,122},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,22},4,{x,0}}.
    {test,is_map,{f,122},[{x,0}]}.
    {get_map_elements,{f,122},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{atom,exported},{x,0}]}}.
    {test,is_eq_exact,{f,122},[{x,0},{atom,false}]}.
    {test,is_tuple,{f,121},[{x,23}]}.
    {test,test_arity,{f,121},[{x,23},5]}.
    {get_tuple_element,{x,23},0,{x,0}}.
    {test,is_eq_exact,{f,121},[{x,0},{literal,{callback,bar,1}}]}.
    {get_tuple_element,{x,23},3,{x,0}}.
    {test,is_eq_exact,{f,121},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,23},4,{x,0}}.
    {test,is_map,{f,121},[{x,0}]}.
    {test,is_tuple,{f,120},[{x,24}]}.
    {test,test_arity,{f,120},[{x,24},5]}.
    {get_tuple_element,{x,24},0,{x,0}}.
    {test,is_eq_exact,{f,120},[{x,0},{literal,{function,bounded,2}}]}.
    {get_tuple_element,{x,24},3,{x,0}}.
    {test,is_eq_exact,{f,120},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,24},4,{x,0}}.
    {test,is_map,{f,120},[{x,0}]}.
    {test,is_tuple,{f,119},[{x,25}]}.
    {test,test_arity,{f,119},[{x,25},5]}.
    {get_tuple_element,{x,25},0,{x,0}}.
    {test,is_eq_exact,
          {f,119},
          [{x,0},{literal,{function,hidden_type_exposed,0}}]}.
    {get_tuple_element,{x,25},1,{x,0}}.
    {test,is_eq_exact,{f,119},[{x,0},{literal,{34,1}}]}.
    {get_tuple_element,{x,25},2,{x,0}}.
    {test,is_eq_exact,{f,119},[{x,0},{literal,[<<"hidden_type_exposed()">>]}]}.
    {get_tuple_element,{x,25},3,{x,0}}.
    {test,is_eq_exact,{f,119},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,25},4,{x,0}}.
    {test,is_map,{f,119},[{x,0}]}.
    {test,is_tuple,{f,118},[{x,26}]}.
    {test,test_arity,{f,118},[{x,26},5]}.
    {get_tuple_element,{x,26},0,{x,0}}.
    {test,is_eq_exact,{f,118},[{x,0},{literal,{function,hidden,0}}]}.
    {get_tuple_element,{x,26},2,{x,0}}.
    {test,is_eq_exact,{f,118},[{x,0},{literal,[<<"hidden()">>]}]}.
    {get_tuple_element,{x,26},3,{x,0}}.
    {test,is_eq_exact,{f,118},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,26},4,{x,0}}.
    {test,is_map,{f,118},[{x,0}]}.
    {test,is_tuple,{f,117},[{x,27}]}.
    {test,test_arity,{f,117},[{x,27},5]}.
    {get_tuple_element,{x,27},0,{x,0}}.
    {test,is_eq_exact,{f,117},[{x,0},{literal,{function,bar,0}}]}.
    {get_tuple_element,{x,27},2,{x,0}}.
    {test,is_eq_exact,{f,117},[{x,0},{literal,[<<"bar()">>]}]}.
    {get_tuple_element,{x,27},3,{x,0}}.
    {test,is_eq_exact,{f,117},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,27},4,{x,0}}.
    {test,is_map,{f,117},[{x,0}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,117}.
    {test_heap,16,28}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,27}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { function , bar , 0 } , _ , [ << \"bar()\" >> ] , none , # { } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Bar"}},{x,0},{x,0}}.
    {put_list,{literal,{line,340}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",340}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,118}.
    {test_heap,16,27}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,26}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { function , hidden , 0 } , _ , [ << \"hidden()\" >> ] , hidden , # { } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Hidden"}},{x,0},{x,0}}.
    {put_list,{literal,{line,339}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",339}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,119}.
    {test_heap,16,26}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,25}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { function , hidden_type_exposed , 0 } , { 34 , 1 } , [ << \"hidden_type_exposed()\" >> ] , none , # { } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"HiddenTypeExposed"}},{x,0},{x,0}}.
    {put_list,{literal,{line,338}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",338}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,120}.
    {test_heap,16,25}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,24}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { function , bounded , 2 } , _ , _ , none , # { } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Bounded"}},{x,0},{x,0}}.
    {put_list,{literal,{line,337}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",337}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,121}.
    {test_heap,16,24}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,23}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { callback , bar , 1 } , _ , _ , none , # { } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"CBar"}},{x,0},{x,0}}.
    {put_list,{literal,{line,336}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",336}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,122}.
    {test_heap,16,23}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,22}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , private_t , 0 } , _ , [ << \"private_t()\" >> ] , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"PrivateT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,335}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",335}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,123}.
    {test_heap,16,22}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,21}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , public_t , 0 } , _ , [ << \"public_t()\" >> ] , none , # { exported := true } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"PublicT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,334}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",334}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,124}.
    {test_heap,16,21}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,20}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , opaque_t , 0 } , _ , [ << \"opaque_t()\" >> ] , none , # { exported := true } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"OpaqueT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,333}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",333}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,125}.
    {test_heap,16,20}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,19}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , private_cb_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"PrivateCBT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,332}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",332}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,126}.
    {test_heap,16,19}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,18}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , hidden_export_t , 0 } , _ , [ << \"hidden_export_t()\" >> ] , hidden , # { exported := true } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"HiddenExportT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,331}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",331}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,127}.
    {test_heap,16,18}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,17}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , private , 0 } , { 30 , 2 } , [ << \"private()\" >> ] , hidden , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Private"}},{x,0},{x,0}}.
    {put_list,{literal,{line,330}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",330}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,128}.
    {test_heap,16,17}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,16}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , bounded_arg_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"BoundedArgT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,329}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",329}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,129}.
    {test_heap,16,16}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,15}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , arg_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"ArgT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,328}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",328}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,130}.
    {test_heap,16,15}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,14}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , bounded_ret_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"BoundedRetT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,327}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",327}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,131}.
    {test_heap,16,14}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,13}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , complex , 1 } , _ , _ , none , # { exported := true } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Complex"}},{x,0},{x,0}}.
    {put_list,{literal,{line,326}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",326}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,132}.
    {test_heap,16,13}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,12}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , fun_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"FunT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,325}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",325}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,133}.
    {test_heap,16,12}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,11}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , fun_ret_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"FunRetT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,324}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",324}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,134}.
    {test_heap,16,11}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,10}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , fun_ret_2_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"FunRet2T"}},{x,0},{x,0}}.
    {put_list,{literal,{line,323}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",323}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,135}.
    {test_heap,16,10}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,9}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , map_key_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"MapKeyT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,322}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",322}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,136}.
    {test_heap,16,9}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,8}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , map_value_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"MapValueT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,321}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",321}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,137}.
    {test_heap,16,8}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,7}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , map_key_2_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"MapKey2T"}},{x,0},{x,0}}.
    {put_list,{literal,{line,320}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",320}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,138}.
    {test_heap,16,7}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,6}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , map_value_2_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"MapValue2T"}},{x,0},{x,0}}.
    {put_list,{literal,{line,319}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",319}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,139}.
    {test_heap,16,6}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,5}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , record_inline_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"RecordInlineT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,318}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",318}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,140}.
    {test_heap,16,5}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,4}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , record_a_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"RecordAT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,317}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",317}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,141}.
    {test_heap,16,4}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,3}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , tuple_t , 0 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"TupleT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,316}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",316}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,142}.
    {test_heap,16,3}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,2}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { type , remote_type_t , 1 } , _ , _ , none , # { exported := false } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"RemoteTypeT"}},{x,0},{x,0}}.
    {put_list,{literal,{line,315}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",315}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},0}.
  {label,143}.
    {line,[{location,"beam_doc_SUITE.erl",302}]}.
    {badmatch,{x,0}}.
  {label,144}.
    {line,[{location,"beam_doc_SUITE.erl",300}]}.
    {badmatch,{x,0}}.


{function, export_all, 1, 146}.
  {label,145}.
    {line,[{location,"beam_doc_SUITE.erl",345}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,export_all},1}.
  {label,146}.
    {allocate,0,1}.
    {move,{literal,"export_all"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",347}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,148},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",356}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,147},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,147},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,147},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,147},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,147},[{x,2}]}.
    {test,test_arity,{f,147},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,147},[{x,3},{literal,{function,main2,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,147},[{x,3},{literal,[<<"main2()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,147},[{x,3}]}.
    {get_map_elements,{f,147},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,147},[{x,3},{literal,<<"Second main">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,147},[{x,2}]}.
    {get_map_elements,{f,147},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,equiv},{x,2}]}}.
    {test,is_eq_exact,{f,147},[{x,2},{literal,<<"main()">>}]}.
    {test,is_nonempty_list,{f,147},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,147},[{x,2}]}.
    {test,test_arity,{f,147},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,147},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,147},[{x,3},{literal,[<<"main()">>]}]}.
    {get_tuple_element,{x,2},4,{x,3}}.
    {test,is_map,{f,147},[{x,3}]}.
    {test,is_nonempty_list,{f,147},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_tuple,{f,147},[{x,3}]}.
    {test,test_arity,{f,147},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,147},[{x,4},{literal,{function,all_ok,0}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,147},[{x,4},{literal,[<<"all_ok()">>]}]}.
    {get_tuple_element,{x,3},4,{x,4}}.
    {test,is_map,{f,147},[{x,4}]}.
    {get_map_elements,{f,147},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{atom,equiv},{x,4}]}}.
    {test,is_eq_exact,{f,147},[{x,4},{literal,<<"ok/0">>}]}.
    {test,is_nil,{f,147},[{x,1}]}.
    {get_tuple_element,{x,2},3,{x,1}}.
    {test,is_eq_exact,
          {f,147},
          [{x,1},{literal,#{<<"en">> => <<"all_ok()\n\nCalls all_ok/0">>}}]}.
    {get_tuple_element,{x,3},3,{x,1}}.
    {test,is_eq_exact,
          {f,147},
          [{x,1},{literal,#{<<"en">> => <<"This is a test">>}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,147}.
    {line,[{location,"beam_doc_SUITE.erl",350}]}.
    {badmatch,{x,0}}.
  {label,148}.
    {line,[{location,"beam_doc_SUITE.erl",347}]}.
    {badmatch,{x,0}}.


{function, equiv, 1, 150}.
  {label,149}.
    {line,[{location,"beam_doc_SUITE.erl",359}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,equiv},1}.
  {label,150}.
    {allocate,0,1}.
    {move,{literal,"equiv"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",361}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,152},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",367}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,151},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,151},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,151},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,151},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,151},[{x,2}]}.
    {test,test_arity,{f,151},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{literal,{function,main,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{literal,[<<"main(A, B)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,151},[{x,2}]}.
    {test,is_nonempty_list,{f,151},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,151},[{x,2}]}.
    {test,test_arity,{f,151},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{literal,{function,main,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{literal,[<<"main(A)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,151},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,151},[{x,2}]}.
    {get_map_elements,{f,151},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,equiv},{x,2}]}}.
    {test,is_eq_exact,{f,151},[{x,2},{literal,<<"main(A, 1)">>}]}.
    {test,is_nil,{f,151},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,151}.
    {line,[{location,"beam_doc_SUITE.erl",362}]}.
    {badmatch,{x,0}}.
  {label,152}.
    {line,[{location,"beam_doc_SUITE.erl",361}]}.
    {badmatch,{x,0}}.


{function, spec, 1, 154}.
  {label,153}.
    {line,[{location,"beam_doc_SUITE.erl",370}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,spec},1}.
  {label,154}.
    {allocate,0,1}.
    {move,{literal,"spec"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",372}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,156},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",378}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,155},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,155},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {get_map_elements,{f,155},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,{f,155},[{x,2},{literal,<<>>}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,155},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,155},[{x,2}]}.
    {test,test_arity,{f,155},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,{type,no,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,[<<"no()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {get_map_elements,{f,155},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,exported},{x,2}]}}.
    {test,is_eq_exact,{f,155},[{x,2},{atom,false}]}.
    {test,is_nonempty_list,{f,155},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,155},[{x,2}]}.
    {test,test_arity,{f,155},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,{type,yes,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,[<<"yes()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {get_map_elements,{f,155},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,exported},{x,2}]}}.
    {test,is_eq_exact,{f,155},[{x,2},{atom,false}]}.
    {test,is_nonempty_list,{f,155},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,155},[{x,2}]}.
    {test,test_arity,{f,155},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,{callback,me,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,[<<"me/1">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {test,is_nonempty_list,{f,155},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,155},[{x,2}]}.
    {test,test_arity,{f,155},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,{function,baz,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,[<<"baz(X)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {test,is_nonempty_list,{f,155},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,155},[{x,2}]}.
    {test,test_arity,{f,155},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,{function,foo,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{literal,[<<"foo(X)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,155},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,155},[{x,2}]}.
    {test,is_nil,{f,155},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,155}.
    {line,[{location,"beam_doc_SUITE.erl",373}]}.
    {badmatch,{x,0}}.
  {label,156}.
    {line,[{location,"beam_doc_SUITE.erl",372}]}.
    {badmatch,{x,0}}.


{function, user_defined_type, 1, 158}.
  {label,157}.
    {line,[{location,"beam_doc_SUITE.erl",381}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,user_defined_type},1}.
  {label,158}.
    {allocate,0,1}.
    {move,{literal,"user_defined_type"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",383}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,160},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",384}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,159},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,159},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_map,{f,159},[{x,2}]}.
    {get_map_elements,{f,159},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,{f,159},[{x,2},{literal,<<>>}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nil,{f,159},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,159}.
    {badmatch,{x,0}}.
  {label,160}.
    {line,[{location,"beam_doc_SUITE.erl",383}]}.
    {badmatch,{x,0}}.


{function, deprecated, 1, 162}.
  {label,161}.
    {line,[{location,"beam_doc_SUITE.erl",387}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,deprecated},1}.
  {label,162}.
    {allocate,2,1}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{x,0},{y,1}}.
    {move,{literal,"deprecated"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",389}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,168},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",398}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,167},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,167},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,167},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{type,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,167},
          [{x,2},
           {literal,<<"the type deprecated:test(_) is deprecated; Deprecation reason">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{type,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,167},
          [{x,2},
           {literal,<<"the type deprecated:test() is deprecated; see the documentation for details">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{callback,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,167},
          [{x,2},
           {literal,<<"the callback deprecated:test(_) is deprecated; Deprecation reason">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{callback,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,167},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{function,test,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test(N, M)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,167},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{function,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,167},
          [{x,2},
           {literal,<<"deprecated:test/1 is deprecated; Deprecation reason">>}]}.
    {test,is_nonempty_list,{f,167},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,167},[{x,2}]}.
    {test,test_arity,{f,167},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,{function,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,167},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,167},[{x,2}]}.
    {get_map_elements,{f,167},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,167},
          [{x,2},
           {literal,<<"deprecated:test/0 is deprecated; see the documentation for details">>}]}.
    {test,is_nil,{f,167},[{x,1}]}.
    {move,{literal,"deprecated"},{x,1}}.
    {move,{literal,[{d,'TEST_WILDCARD'},{d,'REASON',next_major_release}]},
          {x,2}}.
    {move,{y,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",400}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,166},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,166},[{x,1},{y,0}]}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",410}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,165},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,165},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,165},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{type,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,165},
          [{x,2},
           {literal,<<"the type deprecated:test(_) is deprecated; see the documentation for details">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{type,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,165},
          [{x,2},
           {literal,<<"the type deprecated:test() is deprecated; see the documentation for details">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{callback,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,165},
          [{x,2},
           {literal,<<"the callback deprecated:test(_) is deprecated; will be removed in the next major release. See the documentation for details">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{callback,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,165},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{function,test,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test(N, M)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,165},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{function,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,165},
          [{x,2},
           {literal,<<"deprecated:test/1 is deprecated; will be removed in the next major release. See the documentation for details">>}]}.
    {test,is_nonempty_list,{f,165},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,165},[{x,2}]}.
    {test,test_arity,{f,165},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,{function,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,165},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,165},[{x,2}]}.
    {get_map_elements,{f,165},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,165},
          [{x,2},
           {literal,<<"deprecated:test/0 is deprecated; see the documentation for details">>}]}.
    {test,is_nil,{f,165},[{x,1}]}.
    {move,{literal,"deprecated"},{x,1}}.
    {move,{literal,[{d,'ALL_WILDCARD'},
                    {d,'REASON',next_version},
                    {d,'TREASON',eventually}]},
          {x,2}}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,1}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",412}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,164},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,164},[{x,1},{y,0}]}.
    {move,{y,0},{x,0}}.
    {trim,1,0}.
    {line,[{location,"beam_doc_SUITE.erl",423}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,163},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,163},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,163},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{type,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,163},
          [{x,2},
           {literal,<<"the type deprecated:test(_) is deprecated; will be removed in a future release. See the documentation for details">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{type,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,163},
          [{x,2},
           {literal,<<"the type deprecated:test() is deprecated; see the documentation for details">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{callback,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,163},
          [{x,2},
           {literal,<<"the callback deprecated:test(_) is deprecated; will be removed in the next version. See the documentation for details">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{callback,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,163},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{function,test,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test(N, M)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,{f,163},[{x,2},{literal,<<"Meta reason">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{function,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,163},
          [{x,2},
           {literal,<<"deprecated:test/1 is deprecated; will be removed in the next version. See the documentation for details">>}]}.
    {test,is_nonempty_list,{f,163},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,163},[{x,2}]}.
    {test,test_arity,{f,163},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,{function,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,163},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,163},[{x,2}]}.
    {get_map_elements,{f,163},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,deprecated},{x,2}]}}.
    {test,is_eq_exact,
          {f,163},
          [{x,2},
           {literal,<<"deprecated:test/0 is deprecated; see the documentation for details">>}]}.
    {test,is_nil,{f,163},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,163}.
    {line,[{location,"beam_doc_SUITE.erl",415}]}.
    {badmatch,{x,0}}.
  {label,164}.
    {line,[{location,"beam_doc_SUITE.erl",412}]}.
    {badmatch,{x,0}}.
  {label,165}.
    {line,[{location,"beam_doc_SUITE.erl",402}]}.
    {badmatch,{x,0}}.
  {label,166}.
    {line,[{location,"beam_doc_SUITE.erl",400}]}.
    {badmatch,{x,0}}.
  {label,167}.
    {line,[{location,"beam_doc_SUITE.erl",390}]}.
    {badmatch,{x,0}}.
  {label,168}.
    {line,[{location,"beam_doc_SUITE.erl",389}]}.
    {badmatch,{x,0}}.


{function, warn_missing_doc, 1, 170}.
  {label,169}.
    {line,[{location,"beam_doc_SUITE.erl",426}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,warn_missing_doc},1}.
  {label,170}.
    {allocate,1,1}.
    {move,{x,0},{y,0}}.
    {move,{literal,[warn_missing_doc]},{x,2}}.
    {move,{literal,[function,type,callback]},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",428}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[function]},{x,1}}.
    {move,{literal,[warn_missing_doc_functions]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",429}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[function,type]},{x,1}}.
    {move,{literal,[warn_missing_doc_functions,warn_missing_doc_types]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",430}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[type,callback]},{x,1}}.
    {move,{literal,[warn_missing_doc_types,warn_missing_doc_callbacks]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",431}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[callback]},{x,1}}.
    {move,{literal,[warn_missing_doc_callbacks]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",432}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[type,callback]},{x,1}}.
    {move,{literal,[warn_missing_doc,nowarn_missing_doc_functions]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",434}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[function,callback]},{x,1}}.
    {move,{literal,[warn_missing_doc,nowarn_missing_doc_types]},{x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",435}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,[type]},{x,1}}.
    {move,{literal,[warn_missing_doc,nowarn_missing_doc_callbacks,
                    nowarn_missing_doc_functions]},
          {x,2}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",436}]}.
    {call,3,{f,172}}. % warn_missing_doc/3
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,nil,{x,1}}.
    {move,{literal,[warn_missing_doc_functions,nowarn_missing_doc]},{x,2}}.
    {move,{y,0},{x,0}}.
    {call_last,3,{f,172},1}. % warn_missing_doc/3


{function, warn_missing_doc, 3, 172}.
  {label,171}.
    {line,[{location,"beam_doc_SUITE.erl",441}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,warn_missing_doc},3}.
  {label,172}.
    {'%',{var_info,{x,1},
                   [{type,{t_list,{t_atom,[callback,function,type]},nil}}]}}.
    {'%',{var_info,{x,2},[{type,{t_cons,{t_atom,any},nil}}]}}.
    {allocate_heap,6,4,3}.
    {init_yregs,{list,[{y,0},{y,1},{y,2},{y,3},{y,4}]}}.
    {move,{x,1},{y,5}}.
    {put_list,{atom,report},{x,2},{x,1}}.
    {put_list,{atom,return_warnings},{x,1},{x,2}}.
    {move,{literal,"warn_missing_doc"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",444}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,197},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {get_tuple_element,{x,0},2,{y,4}}.
    {move,{x,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",453}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,196},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,196},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{type,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{type,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{callback,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{function,test,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test(N)">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{function,test,0}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test()">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nonempty_list,{f,196},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,196},[{x,2}]}.
    {test,test_arity,{f,196},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,{function,test,2}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,196},[{x,3},{literal,[<<"test(N, M)">>]}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_eq_exact,{f,196},[{x,2},{atom,none}]}.
    {test,is_nil,{f,196},[{x,1}]}.
    {test,is_nil,
          {f,173},
          [{tr,{y,5},{t_list,{t_atom,[callback,function,type]},nil}}]}.
    {test,is_ne_exact,{f,190},[{y,4},nil]}.
    {test_heap,16,0}.
    {put_tuple2,{x,0},{list,[{atom,value},{y,4}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,[]}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"Ws"}},{x,0},{x,0}}.
    {put_list,{literal,{line,457}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",457}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,173}.
    {test,is_nonempty_list,{f,195},[{y,4}]}.
    {get_list,{y,4},{y,3},{y,2}}.
    {test,is_tuple,{f,195},[{y,3}]}.
    {test,test_arity,{f,195},[{y,3},2]}.
    {get_tuple_element,{y,3},1,{y,4}}.
    {move,{y,5},{x,1}}.
    {move,{atom,type},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",462}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,174},[{x,0},{atom,true}]}.
    {move,{literal,[2]},{y,1}}.
    {jump,{f,175}}.
  {label,174}.
    {move,nil,{y,1}}.
  {label,175}.
    {move,{y,5},{x,1}}.
    {move,{atom,callback},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",463}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,176},[{x,0},{atom,true}]}.
    {move,{literal,[1]},{y,0}}.
    {jump,{f,177}}.
  {label,176}.
    {move,nil,{y,0}}.
  {label,177}.
    {move,{y,5},{x,1}}.
    {move,{atom,function},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",464}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,178},[{x,0},{atom,true}]}.
    {move,{literal,[2]},{x,0}}.
    {jump,{f,179}}.
  {label,178}.
    {move,nil,{x,0}}.
  {label,179}.
    {test_heap,6,1}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{y,0},{x,0},{x,0}}.
    {put_list,{y,1},{x,0},{x,0}}.
    {init_yregs,{list,[{y,0},{y,1}]}}.
    {line,[{location,"beam_doc_SUITE.erl",461}]}.
    {call_ext,1,{extfunc,lists,flatten,1}}.
    {line,[{location,"beam_doc_SUITE.erl",460}]}.
    {call_ext,1,{extfunc,lists,sum,1}}.
    {gc_bif,'+',{f,0},1,[{x,0},{integer,1}],{y,1}}.
    {get_tuple_element,{y,3},0,{x,0}}.
    {init_yregs,{list,[{y,3}]}}.
    {line,[{location,"beam_doc_SUITE.erl",466}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,193},[{x,0},{literal,"warn_missing_doc.erl"}]}.
    {line,[{location,"beam_doc_SUITE.erl",467}]}.
    {gc_bif,length,{f,0},0,[{y,4}],{x,0}}.
    {test,is_eq_exact,
          {f,192},
          [{tr,{x,0},{t_integer,{0,288230376151711743}}},
           {tr,{y,1},{t_number,any}}]}.
    {move,{y,4},{x,1}}.
    {init_yregs,{list,[{y,1}]}}.
    {move,{integer,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",468}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,191},
          [{x,0},{literal,{1,beam_doc,missing_moduledoc}}]}.
    {move,{y,5},{x,1}}.
    {move,{atom,type},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",470}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,182},[{x,0},{atom,true}]}.
    {move,{y,4},{x,1}}.
    {move,{integer,2},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",472}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,181},
          [{x,0},{literal,{{6,2},beam_doc,{missing_doc,{type,test,0}}}}]}.
    {move,{y,4},{x,1}}.
    {move,{integer,3},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",473}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,180},
          [{x,0},{literal,{{7,2},beam_doc,{missing_doc,{type,test,1}}}}]}.
    {move,{integer,4},{y,3}}.
    {jump,{f,183}}.
  {label,180}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 7 , 2 } , beam_doc , { missing_doc , { type , test , 1 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 3 , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,473}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,181}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 6 , 2 } , beam_doc , { missing_doc , { type , test , 0 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 2 , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,472}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",472}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,182}.
    {move,{integer,2},{y,3}}.
  {label,183}.
    {move,{y,5},{x,1}}.
    {move,{atom,callback},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",480}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,185},[{x,0},{atom,true}]}.
    {move,{y,4},{x,1}}.
    {move,{y,3},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",482}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,184},
          [{x,0},{literal,{{9,2},beam_doc,{missing_doc,{callback,test,0}}}}]}.
    {line,[{location,"beam_doc_SUITE.erl",483}]}.
    {gc_bif,'+',{f,0},0,[{tr,{y,3},{t_integer,{2,4}}},{integer,1}],{x,0}}.
    {move,{x,0},{y,3}}.
    {jump,{f,185}}.
  {label,184}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 9 , 2 } , beam_doc , { missing_doc , { callback , test , 0 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( TypePos , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,482}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",482}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,185}.
    {move,{y,5},{x,1}}.
    {init_yregs,{list,[{y,5}]}}.
    {move,{atom,function},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",488}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,190},[{x,0},{atom,true}]}.
    {move,{y,4},{x,1}}.
    {move,{y,3},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",490}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,189},
          [{x,0},{literal,{{13,1},beam_doc,{missing_doc,{function,test,0}}}}]}.
    {line,[{location,"beam_doc_SUITE.erl",491}]}.
    {gc_bif,'+',{f,0},0,[{tr,{y,3},{t_integer,{2,'+inf'}}},{integer,1}],{x,0}}.
    {move,{y,4},{x,1}}.
    {init_yregs,{list,[{y,3},{y,4}]}}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_eq_exact,
          {f,188},
          [{x,0},{literal,{{14,1},beam_doc,{missing_doc,{function,test,1}}}}]}.
    {test,is_nonempty_list,{f,194},[{y,2}]}.
    {get_list,{y,2},{x,0},{x,1}}.
    {test,is_tuple,{f,194},[{x,0}]}.
    {test,test_arity,{f,194},[{x,0},2]}.
    {get_tuple_element,{x,0},1,{y,5}}.
    {test,is_nil,{f,194},[{x,1}]}.
    {get_tuple_element,{x,0},0,{x,0}}.
    {init_yregs,{list,[{y,2}]}}.
    {line,[{location,"beam_doc_SUITE.erl",493}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,187},[{x,0},{literal,"warn_missing_doc.hrl"}]}.
    {line,[{location,"beam_doc_SUITE.erl",494}]}.
    {gc_bif,length,{f,0},0,[{y,5}],{x,0}}.
    {test,is_eq_exact,
          {f,186},
          [{tr,{x,0},{t_integer,{0,288230376151711743}}},{integer,1}]}.
    {move,{y,5},{x,1}}.
    {init_yregs,{list,[{y,5}]}}.
    {move,{integer,1},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",495}]}.
    {call_ext,2,{extfunc,lists,nth,2}}.
    {test,is_ne_exact,
          {f,190},
          [{x,0},{literal,{{2,1},beam_doc,{missing_doc,{function,test,2}}}}]}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 2 , 1 } , beam_doc , { missing_doc , { function , test , 2 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 1 , HrlWarnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,495}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,186}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,1}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"length ( HrlWarnings )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,494}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",494}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,187}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"warn_missing_doc.hrl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( HrlFile )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,493}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",493}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,188}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 14 , 1 } , beam_doc , { missing_doc , { function , test , 1 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( CBPos + 1 , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,491}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",491}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,189}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ { 13 , 1 } , beam_doc , { missing_doc , { function , test , 0 } } }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( CBPos , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,490}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",490}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,190}.
    {move,{atom,ok},{x,0}}.
    {deallocate,6}.
    return.
  {label,191}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"{ 1 , beam_doc , missing_moduledoc }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"lists : nth ( 1 , Warnings )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,468}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",468}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,192}.
    {test_heap,19,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_tuple2,{x,1},{list,[{atom,expected},{y,1}]}}.
    {put_list,{x,1},{x,0},{x,0}}.
    {put_list,{literal,{expression,"length ( Warnings )"}},{x,0},{x,0}}.
    {put_list,{literal,{line,467}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",467}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,193}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"warn_missing_doc.erl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( File )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,466}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",466}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},6}.
  {label,194}.
    {line,[{location,"beam_doc_SUITE.erl",492}]}.
    {badmatch,{y,2}}.
  {label,195}.
    {line,[{location,"beam_doc_SUITE.erl",459}]}.
    {badmatch,{y,4}}.
  {label,196}.
    {line,[{location,"beam_doc_SUITE.erl",446}]}.
    {badmatch,{x,0}}.
  {label,197}.
    {line,[{location,"beam_doc_SUITE.erl",443}]}.
    {badmatch,{x,0}}.


{function, doc_with_file, 1, 199}.
  {label,198}.
    {line,[{location,"beam_doc_SUITE.erl",501}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,doc_with_file},1}.
  {label,199}.
    {allocate,4,1}.
    {init_yregs,{list,[{y,0},{y,1},{y,3}]}}.
    {move,{x,0},{y,2}}.
    {line,[{location,"beam_doc_SUITE.erl",503}]}.
    {call_ext,0,{extfunc,file,get_cwd,0}}.
    {test,is_tagged_tuple,{f,209},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{y,1}}.
    {'try',{y,3},{f,203}}.
    {move,{y,2},{x,1}}.
    {move,{atom,data_dir},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",505}]}.
    {call_ext,2,{extfunc,proplists,get_value,2}}.
    {call_ext,1,{extfunc,file,set_cwd,1}}.
    {test,is_eq_exact,{f,207},[{x,0},{atom,ok}]}.
    {move,{literal,"doc_with_file"},{x,1}}.
    {move,{literal,[{i,"./folder"}]},{x,2}}.
    {move,{y,2},{x,0}}.
    {init_yregs,{list,[{y,2}]}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",506}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,206},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",515}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,205},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,205},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_map,{f,205},[{x,2}]}.
    {get_map_elements,{f,205},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,
          {f,205},
          [{x,2},{literal,<<"# README\n\nThis is a test">>}]}.
    {get_tuple_element,{x,1},6,{x,2}}.
    {test,is_nonempty_list,{f,205},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,205},[{x,3}]}.
    {test,test_arity,{f,205},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,{type,bar,1}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,[<<"bar(X)">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{atom,none}]}.
    {get_tuple_element,{x,3},4,{x,3}}.
    {test,is_map,{f,205},[{x,3}]}.
    {get_map_elements,{f,205},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{atom,exported},{x,3}]}}.
    {test,is_eq_exact,{f,205},[{x,3},{atom,false}]}.
    {test,is_nonempty_list,{f,205},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,205},[{x,3}]}.
    {test,test_arity,{f,205},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,{type,foo,1}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,[<<"foo(X)">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{atom,none}]}.
    {get_tuple_element,{x,3},4,{x,3}}.
    {test,is_map,{f,205},[{x,3}]}.
    {get_map_elements,{f,205},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{atom,exported},{x,3}]}}.
    {test,is_eq_exact,{f,205},[{x,3},{atom,true}]}.
    {test,is_nonempty_list,{f,205},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,205},[{x,3}]}.
    {test,test_arity,{f,205},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,
          {f,205},
          [{x,4},{literal,{type,private_type_exported,0}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,
          {f,205},
          [{x,4},{literal,[<<"private_type_exported()">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_map,{f,205},[{x,4}]}.
    {get_map_elements,{f,205},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,4}]}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,<<"# TYPES\n\nTest">>}]}.
    {get_tuple_element,{x,3},4,{x,3}}.
    {test,is_map,{f,205},[{x,3}]}.
    {get_map_elements,{f,205},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{atom,exported},{x,3}]}}.
    {test,is_eq_exact,{f,205},[{x,3},{atom,false}]}.
    {test,is_nonempty_list,{f,205},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,205},[{x,3}]}.
    {test,test_arity,{f,205},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {get_tuple_element,{x,3},1,{y,2}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,{function,main2,1}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,[<<"main2(I)">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_map,{f,205},[{x,4}]}.
    {get_map_elements,{f,205},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,4}]}}.
    {test,is_eq_exact,
          {f,205},
          [{x,4},
           {literal,<<"# File\n\ntesting fetching docs from other folders">>}]}.
    {get_tuple_element,{x,3},4,{x,3}}.
    {test,is_map,{f,205},[{x,3}]}.
    {test,is_nonempty_list,{f,205},[{x,2}]}.
    {get_list,{x,2},{x,3},{x,2}}.
    {test,is_tuple,{f,205},[{x,3}]}.
    {test,test_arity,{f,205},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,{function,main,1}}]}.
    {get_tuple_element,{x,3},2,{x,4}}.
    {test,is_eq_exact,{f,205},[{x,4},{literal,[<<"main(Var)">>]}]}.
    {get_tuple_element,{x,3},3,{x,4}}.
    {test,is_map,{f,205},[{x,4}]}.
    {get_map_elements,{f,205},
                      {tr,{x,4},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,4}]}}.
    {test,is_eq_exact,
          {f,205},
          [{x,4},{literal,<<"# Fun\n\nTest importing function">>}]}.
    {get_tuple_element,{x,3},4,{x,3}}.
    {test,is_map,{f,205},[{x,3}]}.
    {test,is_nil,{f,205},[{x,2}]}.
    {get_tuple_element,{x,1},1,{x,0}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",517}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,202},[{x,0},{integer,1}]}.
    {move,{y,2},{x,0}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",518}]}.
    {call_ext,1,{extfunc,erl_anno,line,1}}.
    {test,is_eq_exact,{f,201},[{x,0},{integer,1}]}.
    {move,{y,2},{x,0}}.
    {init_yregs,{list,[{y,2}]}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",519}]}.
    {call_ext,1,{extfunc,erl_anno,file,1}}.
    {test,is_eq_exact,{f,200},[{x,0},{literal,"./folder/FILE"}]}.
    {try_end,{y,3}}.
    {move,{y,1},{x,0}}.
    {trim,4,0}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",522}]}.
    {call_ext,1,{extfunc,file,set_cwd,1}}.
    {test,is_eq_exact,{f,204},[{x,0},{atom,ok}]}.
    {deallocate,0}.
    return.
  {label,200}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"./folder/FILE"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : file ( Main2Anno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,519}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",519}]}.
    {call_ext,1,{extfunc,erlang,error,1}}.
    {jump,{f,203}}.
  {label,201}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,1}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( Main2Anno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,518}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",518}]}.
    {call_ext,1,{extfunc,erlang,error,1}}.
    {jump,{f,203}}.
  {label,202}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,1}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"erl_anno : line ( ModuleAnno )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,517}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",517}]}.
    {call_ext,1,{extfunc,erlang,error,1}}.
  {label,203}.
    {try_case,{y,3}}.
    {move,{x,2},{y,0}}.
    {move,{x,1},{y,2}}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,3}}.
    {trim,2,2}.
    {line,[{scope,[1,3]},{location,"beam_doc_SUITE.erl",522}]}.
    {call_ext,1,{extfunc,file,set_cwd,1}}.
    {test,is_eq_exact,{f,208},[{x,0},{atom,ok}]}.
    {bif,raise,{f,0},[{y,1},{y,0}],{x,0}}.
  {label,204}.
    {line,[{scope,[1]},{location,"beam_doc_SUITE.erl",504}]}.
    {badmatch,{x,0}}.
  {label,205}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",507}]}.
    {badmatch,{x,0}}.
  {label,206}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",506}]}.
    {badmatch,{x,0}}.
  {label,207}.
    {line,[{scope,[2]},{location,"beam_doc_SUITE.erl",505}]}.
    {badmatch,{x,0}}.
  {label,208}.
    {line,[{scope,[0]},{location,"beam_doc_SUITE.erl",504}]}.
    {badmatch,{x,0}}.
  {label,209}.
    {line,[{scope,[3]},{location,"beam_doc_SUITE.erl",503}]}.
    {badmatch,{x,0}}.


{function, doc_with_file_error, 1, 211}.
  {label,210}.
    {line,[{location,"beam_doc_SUITE.erl",525}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,doc_with_file_error},1}.
  {label,211}.
    {allocate,1,1}.
    {move,{x,0},{y,0}}.
    {move,{literal,[return_warnings]},{x,2}}.
    {move,{literal,"doc_with_file_error"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",527}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,215},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},2,{x,0}}.
    {test,is_nonempty_list,{f,214},[{x,0}]}.
    {get_list,{x,0},{x,1},{x,2}}.
    {test,is_tuple,{f,214},[{x,1}]}.
    {test,test_arity,{f,214},[{x,1},2]}.
    {get_tuple_element,{x,1},1,{x,3}}.
    {test,is_eq_exact,
          {f,214},
          [{x,3},
           {literal,[{{6,2},epp,{moduledoc,file,"doesnotexist"}},
                     {{8,2},epp,{doc,file,"doesnotexist"}},
                     {{11,2},epp,{doc,file,"doesnotexist"}}]}]}.
    {test,is_nil,{f,214},[{x,2}]}.
    {get_tuple_element,{x,1},0,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",534}]}.
    {call_ext,1,{extfunc,filename,basename,1}}.
    {test,is_eq_exact,{f,212},[{x,0},{literal,"doc_with_file_error.erl"}]}.
    {move,{literal,"doc_with_file_error"},{x,1}}.
    {move,{literal,[report]},{x,2}}.
    {move,{y,0},{x,0}}.
    {trim,1,0}.
    {line,[{location,"beam_doc_SUITE.erl",536}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,213},[{x,0},2,{atom,ok}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,212}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{expected,"doc_with_file_error.erl"}},{x,0},{x,0}}.
    {put_list,{literal,{expression,"filename : basename ( File )"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{line,534}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertEqual},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",534}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},1}.
  {label,213}.
    {line,[{location,"beam_doc_SUITE.erl",536}]}.
    {badmatch,{x,0}}.
  {label,214}.
    {line,[{location,"beam_doc_SUITE.erl",529}]}.
    {badmatch,{x,0}}.
  {label,215}.
    {line,[{location,"beam_doc_SUITE.erl",527}]}.
    {badmatch,{x,0}}.


{function, all_string_formats, 1, 217}.
  {label,216}.
    {line,[{location,"beam_doc_SUITE.erl",540}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,all_string_formats},1}.
  {label,217}.
    {allocate,0,1}.
    {move,{literal,"all_string_formats"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",542}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,219},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",552}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,218},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,218},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {get_map_elements,{f,218},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,{f,218},[{x,2},{literal,<<"Moduledoc test module">>}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,six,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,
          {f,218},
          [{x,3},{literal,<<"all_string_formats-all_string_formats">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,five,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,
          {f,218},
          [{x,3},{literal,<<"all_string_formats-Doc module">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,four,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,<<"Doc test mÃ¶dule">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,three,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,<<"Doctestmodule">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,two,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,<<"Doc test module">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nonempty_list,{f,218},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,218},[{x,2}]}.
    {test,test_arity,{f,218},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,{function,one,0}}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_map,{f,218},[{x,3}]}.
    {get_map_elements,{f,218},
                      {tr,{x,3},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,3}]}}.
    {test,is_eq_exact,{f,218},[{x,3},{literal,<<"Doc test module">>}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,218},[{x,2}]}.
    {test,is_nil,{f,218},[{x,1}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,218}.
    {line,[{location,"beam_doc_SUITE.erl",544}]}.
    {badmatch,{x,0}}.
  {label,219}.
    {line,[{location,"beam_doc_SUITE.erl",542}]}.
    {badmatch,{x,0}}.


{function, spec_switch_order, 1, 221}.
  {label,220}.
    {line,[{location,"beam_doc_SUITE.erl",555}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,spec_switch_order},1}.
  {label,221}.
    {allocate,0,1}.
    {move,{literal,"spec_switch_order"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",557}]}.
    {call,2,{f,259}}. % default_compile_file/2
    {test,is_tagged_tuple,{f,227},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",560}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,226},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,226},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,226},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_nonempty_list,{f,226},[{x,1}]}.
    {get_list,{x,1},{x,3},{x,1}}.
    {test,is_nonempty_list,{f,226},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,1}}.
    {test,is_nonempty_list,{f,226},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,1}}.
    {test,is_nil,{f,226},[{x,1}]}.
    {test,is_tuple,{f,225},[{x,2}]}.
    {test,test_arity,{f,225},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,0}}.
    {test,is_eq_exact,{f,225},[{x,0},{literal,{function,not_false,0}}]}.
    {get_tuple_element,{x,2},1,{x,0}}.
    {test,is_eq_exact,{f,225},[{x,0},{literal,{52,1}}]}.
    {get_tuple_element,{x,2},2,{x,0}}.
    {test,is_eq_exact,{f,225},[{x,0},{literal,[<<"not_false()">>]}]}.
    {get_tuple_element,{x,2},3,{x,0}}.
    {test,is_eq_exact,{f,225},[{x,0},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,0}}.
    {test,is_map,{f,225},[{x,0}]}.
    {test,is_tuple,{f,224},[{x,3}]}.
    {test,test_arity,{f,224},[{x,3},5]}.
    {get_tuple_element,{x,3},0,{x,0}}.
    {test,is_eq_exact,{f,224},[{x,0},{literal,{function,other,0}}]}.
    {get_tuple_element,{x,3},1,{x,0}}.
    {test,is_eq_exact,{f,224},[{x,0},{literal,{36,2}}]}.
    {get_tuple_element,{x,3},2,{x,0}}.
    {test,is_eq_exact,{f,224},[{x,0},{literal,[<<"other()">>]}]}.
    {get_tuple_element,{x,3},3,{x,0}}.
    {test,is_eq_exact,{f,224},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,3},4,{x,0}}.
    {test,is_map,{f,224},[{x,0}]}.
    {test,is_tuple,{f,223},[{x,4}]}.
    {test,test_arity,{f,223},[{x,4},5]}.
    {get_tuple_element,{x,4},0,{x,0}}.
    {test,is_eq_exact,{f,223},[{x,0},{literal,{function,bar,1}}]}.
    {get_tuple_element,{x,4},1,{x,0}}.
    {test,is_eq_exact,{f,223},[{x,0},{literal,{30,2}}]}.
    {get_tuple_element,{x,4},2,{x,0}}.
    {test,is_eq_exact,{f,223},[{x,0},{literal,[<<"bar(X)">>]}]}.
    {get_tuple_element,{x,4},3,{x,0}}.
    {test,is_eq_exact,{f,223},[{x,0},{atom,hidden}]}.
    {get_tuple_element,{x,4},4,{x,0}}.
    {test,is_map,{f,223},[{x,0}]}.
    {test,is_tuple,{f,222},[{x,5}]}.
    {test,test_arity,{f,222},[{x,5},5]}.
    {get_tuple_element,{x,5},0,{x,0}}.
    {test,is_eq_exact,{f,222},[{x,0},{literal,{function,foo,1}}]}.
    {get_tuple_element,{x,5},1,{x,0}}.
    {test,is_eq_exact,{f,222},[{x,0},{literal,{22,2}}]}.
    {get_tuple_element,{x,5},2,{x,0}}.
    {test,is_eq_exact,{f,222},[{x,0},{literal,[<<"foo(Var)">>]}]}.
    {get_tuple_element,{x,5},3,{x,0}}.
    {test,is_map,{f,222},[{x,0}]}.
    {get_map_elements,{f,222},
                      {tr,{x,0},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,0}]}}.
    {test,is_eq_exact,{f,222},[{x,0},{literal,<<"Foo does X">>}]}.
    {get_tuple_element,{x,5},4,{x,0}}.
    {test,is_map,{f,222},[{x,0}]}.
    {move,{x,5},{x,0}}.
    {deallocate,0}.
    return.
  {label,222}.
    {line,[{location,"beam_doc_SUITE.erl",564}]}.
    {badmatch,{x,5}}.
  {label,223}.
    {line,[{location,"beam_doc_SUITE.erl",563}]}.
    {badmatch,{x,4}}.
  {label,224}.
    {line,[{location,"beam_doc_SUITE.erl",562}]}.
    {badmatch,{x,3}}.
  {label,225}.
    {line,[{location,"beam_doc_SUITE.erl",561}]}.
    {badmatch,{x,2}}.
  {label,226}.
    {line,[{location,"beam_doc_SUITE.erl",559}]}.
    {badmatch,{x,0}}.
  {label,227}.
    {line,[{location,"beam_doc_SUITE.erl",557}]}.
    {badmatch,{x,0}}.


{function, skip_doc, 1, 229}.
  {label,228}.
    {line,[{location,"beam_doc_SUITE.erl",566}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,skip_doc},1}.
  {label,229}.
    {allocate,2,1}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{x,0},{y,1}}.
    {move,{literal,[no_docs]},{x,2}}.
    {move,{literal,"skip_doc"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",568}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,234},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",574}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_tagged_tuple,{f,233},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,233},[{x,1},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,1},1,{x,2}}.
    {test,is_eq_exact,{f,233},[{x,2},{integer,0}]}.
    {get_tuple_element,{x,1},2,{x,2}}.
    {test,is_eq_exact,{f,233},[{x,2},{atom,erlang}]}.
    {get_tuple_element,{x,1},3,{x,2}}.
    {test,is_eq_exact,{f,233},[{x,2},{literal,<<"application/erlang+html">>}]}.
    {get_tuple_element,{x,1},4,{x,2}}.
    {test,is_eq_exact,{f,233},[{x,2},{atom,none}]}.
    {get_tuple_element,{x,1},5,{x,2}}.
    {test,is_map,{f,233},[{x,2}]}.
    {get_map_elements,{f,233},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{atom,otp_doc_vsn},
                             {x,2},
                             {atom,generated},
                             {x,3}]}}.
    {test,is_eq_exact,{f,233},[{x,3},{atom,true}]}.
    {test,is_eq_exact,{f,233},[{x,2},{literal,{1,0,0}}]}.
    {get_tuple_element,{x,1},6,{x,1}}.
    {test,is_nonempty_list,{f,233},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,233},[{x,2}]}.
    {test,test_arity,{f,233},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,{8,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,[<<"main/0">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,233},[{x,2}]}.
    {test,is_nonempty_list,{f,233},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,233},[{x,2}]}.
    {test,test_arity,{f,233},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,{function,foo,1}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,{16,1}}]}.
    {get_tuple_element,{x,2},2,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{literal,[<<"foo/1">>]}]}.
    {get_tuple_element,{x,2},3,{x,3}}.
    {test,is_eq_exact,{f,233},[{x,3},{atom,none}]}.
    {get_tuple_element,{x,2},4,{x,2}}.
    {test,is_map,{f,233},[{x,2}]}.
    {test,is_nil,{f,233},[{x,1}]}.
    {move,{literal,#{sources => [eep48]}},{x,1}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",577}]}.
    {call_ext,2,{extfunc,code,get_doc,2}}.
    {test,is_eq_exact,{f,232},[{x,0},{literal,{error,missing}}]}.
    {move,{literal,"skip_doc"},{x,1}}.
    {move,{literal,[report,return_errors,no_docs]},{x,2}}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,1}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",579}]}.
    {call,3,{f,256}}. % compile_file/3
    {test,is_tagged_tuple,{f,231},[{x,0},2,{atom,ok}]}.
    {move,{y,0},{x,0}}.
    {trim,1,0}.
    {line,[{location,"beam_doc_SUITE.erl",580}]}.
    {call_ext,1,{extfunc,code,get_doc,1}}.
    {test,is_eq_exact,{f,230},[{x,0},{literal,{error,missing}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,230}.
    {badmatch,{x,0}}.
  {label,231}.
    {line,[{location,"beam_doc_SUITE.erl",579}]}.
    {badmatch,{x,0}}.
  {label,232}.
    {line,[{location,"beam_doc_SUITE.erl",576}]}.
    {badmatch,{x,0}}.
  {label,233}.
    {line,[{location,"beam_doc_SUITE.erl",570}]}.
    {badmatch,{x,0}}.
  {label,234}.
    {line,[{location,"beam_doc_SUITE.erl",568}]}.
    {badmatch,{x,0}}.


{function, no_doc_attributes, 1, 236}.
  {label,235}.
    {line,[{location,"beam_doc_SUITE.erl",583}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,no_doc_attributes},1}.
  {label,236}.
    {allocate,0,1}.
    {move,nil,{x,2}}.
    {move,{literal,"no_doc_attributes"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",585}]}.
    {call,3,{f,261}}. % default_compile_file/3
    {test,is_tagged_tuple,{f,238},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {move,{literal,#{sources => [eep48]}},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",588}]}.
    {call_ext,2,{extfunc,code,get_doc,2}}.
    {test,is_eq_exact,{f,237},[{x,0},{literal,{error,missing}}]}.
    {move,{atom,ok},{x,0}}.
    {deallocate,0}.
    return.
  {label,237}.
    {line,[{location,"beam_doc_SUITE.erl",587}]}.
    {badmatch,{x,0}}.
  {label,238}.
    {line,[{location,"beam_doc_SUITE.erl",585}]}.
    {badmatch,{x,0}}.


{function, docs_from_ast, 1, 240}.
  {label,239}.
    {line,[{location,"beam_doc_SUITE.erl",592}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,docs_from_ast},1}.
  {label,240}.
    {allocate,1,0}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{literal,"-module(test).\n-moduledoc \"moduledoc\".\n-export([main/0]).\n-doc \"main\".\nmain() -> ok."},
          {x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",601}]}.
    {call,1,{f,248}}. % scan_and_parse/1
    {'%',{var_info,{x,0},[{type,{t_list,any,nil}}]}}.
    {move,{literal,[debug_info]},{x,1}}.
    {call_ext,2,{extfunc,compile,forms,2}}.
    {test,is_tagged_tuple,{f,246},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,246},[{x,1},{atom,test}]}.
    {get_tuple_element,{x,0},2,{y,0}}.
    {move,{literal,[documentation]},{x,1}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",602}]}.
    {call_ext,2,{extfunc,beam_lib,chunks,2}}.
    {test,is_tagged_tuple,{f,245},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,245},[{x,1},2,{atom,test}]}.
    {get_tuple_element,{x,1},1,{x,1}}.
    {test,is_nonempty_list,{f,245},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tagged_tuple,{f,245},[{x,2},2,{atom,documentation}]}.
    {test,is_nil,{f,245},[{x,1}]}.
    {get_tuple_element,{x,2},1,{x,0}}.
    {test,is_tagged_tuple,{f,242},[{x,0},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,242},[{x,1},{integer,2}]}.
    {get_tuple_element,{x,0},4,{x,1}}.
    {test,is_map,{f,242},[{x,1}]}.
    {get_map_elements,{f,242},
                      {tr,{x,1},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,1}]}}.
    {test,is_eq_exact,{f,242},[{x,1},{literal,<<"moduledoc">>}]}.
    {get_tuple_element,{x,0},6,{x,1}}.
    {test,is_nonempty_list,{f,242},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,242},[{x,2}]}.
    {test,test_arity,{f,242},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,242},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,242},[{x,3},{integer,4}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_map,{f,242},[{x,2}]}.
    {get_map_elements,{f,242},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,{f,242},[{x,2},{literal,<<"main">>}]}.
    {test,is_nil,{f,242},[{x,1}]}.
    {move,{y,0},{x,0}}.
    {init_yregs,{list,[{y,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",610}]}.
    {call,1,{f,263}}. % check_no_doc_attributes/1
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{literal,"-module(test).\n-moduledoc \"moduledoc\".\n-export([main/0]).\n-doc \"main\".\nmain() -> ok."},
          {x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",612}]}.
    {call,1,{f,248}}. % scan_and_parse/1
    {'%',{var_info,{x,0},[{type,{t_list,any,nil}}]}}.
    {move,{literal,[beam_docs,debug_info,{source,"test.erl"}]},{x,1}}.
    {call_ext,2,{extfunc,compile,forms,2}}.
    {test,is_tagged_tuple,{f,244},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,244},[{x,1},{atom,test}]}.
    {get_tuple_element,{x,0},2,{y,0}}.
    {move,{literal,[documentation]},{x,1}}.
    {move,{y,0},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",613}]}.
    {call_ext,2,{extfunc,beam_lib,chunks,2}}.
    {test,is_tagged_tuple,{f,243},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tagged_tuple,{f,243},[{x,1},2,{atom,test}]}.
    {get_tuple_element,{x,1},1,{x,1}}.
    {test,is_nonempty_list,{f,243},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tagged_tuple,{f,243},[{x,2},2,{atom,documentation}]}.
    {test,is_nil,{f,243},[{x,1}]}.
    {get_tuple_element,{x,2},1,{x,0}}.
    {test,is_tagged_tuple,{f,241},[{x,0},7,{atom,docs_v1}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_eq_exact,{f,241},[{x,1},{integer,2}]}.
    {get_tuple_element,{x,0},4,{x,1}}.
    {test,is_map,{f,241},[{x,1}]}.
    {get_map_elements,{f,241},
                      {tr,{x,1},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,1}]}}.
    {test,is_eq_exact,{f,241},[{x,1},{literal,<<"moduledoc">>}]}.
    {get_tuple_element,{x,0},6,{x,1}}.
    {test,is_nonempty_list,{f,241},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tuple,{f,241},[{x,2}]}.
    {test,test_arity,{f,241},[{x,2},5]}.
    {get_tuple_element,{x,2},0,{x,3}}.
    {test,is_eq_exact,{f,241},[{x,3},{literal,{function,main,0}}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,241},[{x,3},{integer,4}]}.
    {get_tuple_element,{x,2},3,{x,2}}.
    {test,is_map,{f,241},[{x,2}]}.
    {get_map_elements,{f,241},
                      {tr,{x,2},{t_map,any,any}},
                      {list,[{literal,<<"en">>},{x,2}]}}.
    {test,is_eq_exact,{f,241},[{x,2},{literal,<<"main">>}]}.
    {test,is_nil,{f,241},[{x,1}]}.
    {move,{y,0},{x,0}}.
    {call_last,1,{f,263},1}. % check_no_doc_attributes/1
  {label,241}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"# docs_v1 { module_doc = # { << \"en\" >> := << \"moduledoc\" >> } , anno = 2 , docs = [ { { function , main , 0 } , 4 , _ , # { << \"en\" >> := << \"main\" >> } , _ } ] }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"DocsWSource"}},{x,0},{x,0}}.
    {put_list,{literal,{line,619}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",619}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},1}.
  {label,242}.
    {test_heap,16,1}.
    {put_tuple2,{x,0},{list,[{atom,value},{x,0}]}}.
    {put_list,{x,0},nil,{x,0}}.
    {put_list,{literal,{pattern,"# docs_v1 { module_doc = # { << \"en\" >> := << \"moduledoc\" >> } , anno = 2 , docs = [ { { function , main , 0 } , 4 , _ , # { << \"en\" >> := << \"main\" >> } , _ } ] }"}},
              {x,0},
              {x,0}}.
    {put_list,{literal,{expression,"Docs"}},{x,0},{x,0}}.
    {put_list,{literal,{line,607}},{x,0},{x,0}}.
    {put_list,{literal,{module,beam_doc_SUITE}},{x,0},{x,0}}.
    {put_tuple2,{x,0},{list,[{atom,assertMatch},{x,0}]}}.
    {line,[{location,"beam_doc_SUITE.erl",607}]}.
    {call_ext_last,1,{extfunc,erlang,error,1},1}.
  {label,243}.
    {line,[{location,"beam_doc_SUITE.erl",613}]}.
    {badmatch,{x,0}}.
  {label,244}.
    {line,[{location,"beam_doc_SUITE.erl",612}]}.
    {badmatch,{x,0}}.
  {label,245}.
    {line,[{location,"beam_doc_SUITE.erl",602}]}.
    {badmatch,{x,0}}.
  {label,246}.
    {line,[{location,"beam_doc_SUITE.erl",601}]}.
    {badmatch,{x,0}}.


{function, scan_and_parse, 1, 248}.
  {label,247}.
    {line,[{location,"beam_doc_SUITE.erl",624}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,scan_and_parse},1}.
  {label,248}.
    {'%',{var_info,{x,0},[{type,{t_cons,{t_integer,{10,120}},nil}}]}}.
    {allocate,0,1}.
    {line,[{location,"beam_doc_SUITE.erl",625}]}.
    {call_ext,1,{extfunc,erl_scan,string,1}}.
    {test,is_tagged_tuple,{f,249},[{x,0},3,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,0}}.
    {call_last,1,{f,251},0}. % parse/1
  {label,249}.
    {badmatch,{x,0}}.


{function, parse, 1, 251}.
  {label,250}.
    {line,[{location,"beam_doc_SUITE.erl",628}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,parse},1}.
  {label,251}.
    {test,is_nil,{f,252},[{x,0}]}.
    return.
  {label,252}.
    {allocate_heap,2,{alloc,[{words,0},{floats,0},{funs,1}]},1}.
    {init_yregs,{list,[{y,0},{y,1}]}}.
    {make_fun3,{f,278},0,0,{x,1},{list,[]}}.
    {'%',{var_info,{x,1},[{fun_type,{t_atom,[false,true]}}]}}.
    {swap,{x,0},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",630}]}.
    {call_ext,2,{extfunc,lists,splitwith,2}}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_nonempty_list,{f,254},[{x,1}]}.
    {test_heap,2,2}.
    {get_list,{x,1},{x,1},{y,1}}.
    {put_list,{x,1},nil,{x,1}}.
    {get_tuple_element,{x,0},0,{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",631}]}.
    {call_ext,2,{extfunc,erlang,'++',2}}.
    {call_ext,1,{extfunc,erl_parse,parse_form,1}}.
    {move,{x,0},{y,0}}.
    {test,is_tagged_tuple,{f,253},[{x,0},2,{atom,ok}]}.
    {move,{y,1},{x,0}}.
    {move,{y,0},{y,1}}.
    {trim,1,1}.
    {line,[{location,"beam_doc_SUITE.erl",632}]}.
    {call,1,{f,251}}. % parse/1
    {'%',{var_info,{x,0},[{type,{t_list,any,nil}}]}}.
    {test_heap,2,1}.
    {get_tuple_element,{y,0},1,{x,1}}.
    {put_list,{x,1},{x,0},{x,0}}.
    {deallocate,1}.
    return.
  {label,253}.
    {line,[{location,"beam_doc_SUITE.erl",631}]}.
    {badmatch,{x,0}}.
  {label,254}.
    {line,[{location,"beam_doc_SUITE.erl",630}]}.
    {badmatch,{x,0}}.


{function, compile_file, 3, 256}.
  {label,255}.
    {line,[{location,"beam_doc_SUITE.erl",634}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,compile_file},3}.
  {label,256}.
    {'%',{var_info,{x,1},[{type,{t_cons,{t_integer,{50,121}},nil}}]}}.
    {'%',
     {var_info,
      {x,2},
      [{type,
        {t_cons,
         {t_union,
          {t_atom,any},
          none,none,
          [{{2,{t_atom,[d]}},
            {t_tuple,2,true,
             #{1 => {t_atom,[d]},
               2 => {t_atom,['ALL_WILDCARD','TEST_WILDCARD']}}}},
           {{2,{t_atom,[i]}},
            {t_tuple,2,true,
             #{1 => {t_atom,[i]},2 => {t_cons,{t_integer,{46,114}},nil}}}},
           {{3,{t_atom,[d]}},
            {t_tuple,3,true,
             #{1 => {t_atom,[d]},
               2 => {t_atom,['REASON','TREASON']},
               3 => {t_atom,[eventually,next_major_release,next_version]}}}}],
          none},
         nil}}]}}.
    {allocate,3,3}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{x,2},{y,1}}.
    {move,{x,0},{y,2}}.
    {move,{x,1},{x,0}}.
    {move,{literal,".erl"},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",635}]}.
    {call_ext,2,{extfunc,erlang,'++',2}}.
    {move,{y,2},{x,1}}.
    {move,{x,0},{y,2}}.
    {move,{atom,data_dir},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",636}]}.
    {call_ext,2,{extfunc,proplists,get_value,2}}.
    {move,{y,2},{x,1}}.
    {init_yregs,{list,[{y,2}]}}.
    {call_ext,2,{extfunc,filename,join,2}}.
    {test_heap,4,1}.
    {put_list,{y,1},nil,{x,1}}.
    {put_list,{x,0},{x,1},{x,1}}.
    {move,{x,0},{y,2}}.
    {move,{literal,"Compiling: ~ts~n~p~n"},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",637}]}.
    {call_ext,2,{extfunc,io,format,2}}.
    {move,{y,1},{x,1}}.
    {move,{y,2},{x,0}}.
    {init_yregs,{list,[{y,2}]}}.
    {line,[{location,"beam_doc_SUITE.erl",638}]}.
    {call_ext,2,{extfunc,compile,file,2}}.
    {move,{x,0},{y,2}}.
    {bif,element,{f,257},[{integer,1},{x,0}],{x,0}}.
    {test,is_eq_exact,{f,257},[{x,0},{atom,ok}]}.
    {line,[{location,"beam_doc_SUITE.erl",640}]}.
    {bif,element,{f,0},[{integer,2},{tr,{y,2},{t_tuple,1,false,#{}}}],{y,0}}.
    {test_heap,{alloc,[{words,0},{floats,0},{funs,1}]},0}.
    {make_fun3,{f,276},0,0,{x,0},{list,[]}}.
    {'%',{var_info,{x,0},[{fun_type,{t_atom,[false,true]}}]}}.
    {move,{y,1},{x,1}}.
    {init_yregs,{list,[{y,1}]}}.
    {line,[{location,"beam_doc_SUITE.erl",641}]}.
    {call_ext,2,{extfunc,lists,search,2}}.
    {test,is_eq_exact,
          {f,257},
          [{tr,{x,0},
               {t_union,{t_atom,[false]},
                        none,none,
                        [{{2,{t_atom,[value]}},
                          {t_tuple,2,true,#{1 => {t_atom,[value]}}}}],
                        none}},
           {atom,false}]}.
    {move,{y,0},{x,0}}.
    {trim,2,1}.
    {line,[{location,"beam_doc_SUITE.erl",643}]}.
    {call_ext,1,{extfunc,code,which,1}}.
    {call,1,{f,263}}. % check_no_doc_attributes/1
    {'%',{var_info,{x,0},[{type,{t_atom,[ok]}}]}}.
    {move,{y,0},{x,0}}.
    {deallocate,1}.
    return.
  {label,257}.
    {move,{y,2},{x,0}}.
    {deallocate,3}.
    return.


{function, default_compile_file, 2, 259}.
  {label,258}.
    {line,[{location,"beam_doc_SUITE.erl",652}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,default_compile_file},2}.
  {label,259}.
    {'%',{var_info,{x,1},[{type,{t_cons,{t_integer,{50,121}},nil}}]}}.
    {move,nil,{x,2}}.
    {call_only,3,{f,261}}. % default_compile_file/3


{function, default_compile_file, 3, 261}.
  {label,260}.
    {line,[{location,"beam_doc_SUITE.erl",654}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,default_compile_file},3}.
  {label,261}.
    {'%',{var_info,{x,1},[{type,{t_cons,{t_integer,{50,121}},nil}}]}}.
    {'%',
     {var_info,
      {x,2},
      [{type,
        {t_list,
         {t_union,
          {t_atom,any},
          none,none,
          [{{2,{t_atom,[d]}},
            {t_tuple,2,true,
             #{1 => {t_atom,[d]},
               2 => {t_atom,['ALL_WILDCARD','TEST_WILDCARD']}}}},
           {{2,{t_atom,[i]}},
            {t_tuple,2,true,
             #{1 => {t_atom,[i]},2 => {t_cons,{t_integer,{46,114}},nil}}}},
           {{3,{t_atom,[d]}},
            {t_tuple,3,true,
             #{1 => {t_atom,[d]},
               2 => {t_atom,['REASON','TREASON']},
               3 => {t_atom,[eventually,next_major_release,next_version]}}}}],
          none},
         nil}}]}}.
    {test_heap,6,3}.
    {put_list,{atom,debug_info},{x,2},{x,2}}.
    {put_list,{atom,return_errors},{x,2},{x,2}}.
    {put_list,{atom,report},{x,2},{x,2}}.
    {call_only,3,{f,256}}. % compile_file/3


{function, check_no_doc_attributes, 1, 263}.
  {label,262}.
    {line,[{location,"beam_doc_SUITE.erl",659}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,check_no_doc_attributes},1}.
  {label,263}.
    {allocate,1,1}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{literal,[debug_info]},{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",663}]}.
    {call_ext,2,{extfunc,beam_lib,chunks,2}}.
    {test,is_tagged_tuple,{f,266},[{x,0},2,{atom,ok}]}.
    {get_tuple_element,{x,0},1,{x,1}}.
    {test,is_tuple,{f,266},[{x,1}]}.
    {test,test_arity,{f,266},[{x,1},2]}.
    {get_tuple_element,{x,1},1,{x,1}}.
    {test,is_nonempty_list,{f,266},[{x,1}]}.
    {get_list,{x,1},{x,2},{x,1}}.
    {test,is_tagged_tuple,{f,266},[{x,2},2,{atom,debug_info}]}.
    {get_tuple_element,{x,2},1,{x,2}}.
    {test,is_tagged_tuple,{f,266},[{x,2},3,{atom,debug_info_v1}]}.
    {get_tuple_element,{x,2},1,{x,3}}.
    {test,is_eq_exact,{f,266},[{x,3},{atom,erl_abstract_code}]}.
    {get_tuple_element,{x,2},2,{x,2}}.
    {test,is_tuple,{f,266},[{x,2}]}.
    {test,test_arity,{f,266},[{x,2},2]}.
    {get_tuple_element,{x,2},1,{y,0}}.
    {test,is_nil,{f,266},[{x,1}]}.
    {test_heap,{alloc,[{words,0},{floats,0},{funs,1}]},3}.
    {make_fun3,{f,272},0,0,{x,0},{list,[]}}.
    {'%',{var_info,{x,0},[{fun_type,{t_atom,[false,true]}}]}}.
    {get_tuple_element,{x,2},0,{x,1}}.
    {line,[{location,"beam_doc_SUITE.erl",664}]}.
    {call_ext,2,{extfunc,lists,search,2}}.
    {test,is_eq_exact,
          {f,265},
          [{tr,{x,0},
               {t_union,{t_atom,[false]},
                        none,none,
                        [{{2,{t_atom,[value]}},
                          {t_tuple,2,true,#{1 => {t_atom,[value]}}}}],
                        none}},
           {atom,false}]}.
    {move,{y,0},{x,1}}.
    {init_yregs,{list,[{y,0}]}}.
    {move,{atom,no_docs},{x,0}}.
    {line,[{location,"beam_doc_SUITE.erl",670}]}.
    {call_ext,2,{extfunc,lists,member,2}}.
    {test,is_eq_exact,{f,264},[{x,0},{atom,true}]}.
    {badmatch,{atom,true}}.
  {label,264}.
    {move,{atom,ok},{x,0}}.
    {deallocate,1}.
    return.
  {label,265}.
    {line,[{location,"beam_doc_SUITE.erl",664}]}.
    {badmatch,{x,0}}.
  {label,266}.
    {line,[{location,"beam_doc_SUITE.erl",660}]}.
    {badmatch,{x,0}}.


{function, module_info, 0, 268}.
  {label,267}.
    {line,[]}.
    {func_info,{atom,beam_doc_SUITE},{atom,module_info},0}.
  {label,268}.
    {move,{atom,beam_doc_SUITE},{x,0}}.
    {call_ext_only,1,{extfunc,erlang,get_module_info,1}}.


{function, module_info, 1, 270}.
  {label,269}.
    {line,[]}.
    {func_info,{atom,beam_doc_SUITE},{atom,module_info},1}.
  {label,270}.
    {move,{x,0},{x,1}}.
    {move,{atom,beam_doc_SUITE},{x,0}}.
    {call_ext_only,2,{extfunc,erlang,get_module_info,2}}.


{function, '-check_no_doc_attributes/1-fun-0-', 1, 272}.
  {label,271}.
    {line,[{location,"beam_doc_SUITE.erl",665}]}.
    {func_info,{atom,beam_doc_SUITE},
               {atom,'-check_no_doc_attributes/1-fun-0-'},
               1}.
  {label,272}.
    {line,[{location,"beam_doc_SUITE.erl",666}]}.
    {bif,element,{f,0},[{integer,1},{x,0}],{x,1}}.
    {test,is_eq_exact,{f,274},[{x,1},{atom,attribute}]}.
    {line,[{location,"beam_doc_SUITE.erl",668}]}.
    {bif,element,{f,0},[{integer,3},{tr,{x,0},{t_tuple,1,false,#{}}}],{x,0}}.
    {test,is_eq_exact,{f,273},[{x,0},{atom,doc}]}.
    {move,{atom,true},{x,0}}.
    return.
  {label,273}.
    {bif,'=:=',{f,0},[{x,0},{atom,moduledoc}],{x,0}}.
    return.
  {label,274}.
    {move,{atom,false},{x,0}}.
    return.


{function, '-compile_file/3-fun-0-', 1, 276}.
  {label,275}.
    {line,[{location,"beam_doc_SUITE.erl",641}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,'-compile_file/3-fun-0-'},1}.
  {label,276}.
    {bif,'=:=',{f,0},[{x,0},{atom,no_docs}],{x,0}}.
    return.


{function, '-parse/1-fun-0-', 1, 278}.
  {label,277}.
    {line,[{location,"beam_doc_SUITE.erl",630}]}.
    {func_info,{atom,beam_doc_SUITE},{atom,'-parse/1-fun-0-'},1}.
  {label,278}.
    {bif,element,{f,0},[{integer,1},{x,0}],{x,0}}.
    {bif,'=/=',{f,0},[{x,0},{atom,dot}],{x,0}}.
    return.
