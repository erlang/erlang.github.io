module trycatch_SUITE.
exports [{after_oops,1},
         {all,0},
         {andalso_orelse,1},
         {basic,1},
         {bool,1},
         {catch_in_catch,1},
         {catch_oops,1},
         {coverage,1},
         {eclectic,1},
         {end_per_group,2},
         {end_per_suite,1},
         {expression_export,1},
         {get_in_try,1},
         {grab_bag,1},
         {groups,0},
         {handle_info,1},
         {hockey,1},
         {init_per_group,2},
         {init_per_suite,1},
         {last_call_optimization,1},
         {lean_throw,1},
         {module_info,0},
         {module_info,1},
         {nested_after,1},
         {nested_catch,1},
         {nested_horrid,1},
         {nested_of,1},
         {nested_stacktrace,1},
         {no_return_in_try_block,1},
         {raise,1},
         {rethrow,1},
         {stacktrace,1},
         {suite,0},
         {throw_opt_crash,1},
         {throw_opt_funs,1},
         {try_after,1},
         {try_of,1}].
attributes [].

%% trycatch_SUITE.erl:39
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% trycatch_SUITE.erl:41
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% trycatch_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [basic,lean_throw,try_of,try_after,catch_oops,after_oops,eclectic,
      rethrow,nested_of,nested_catch,nested_after,nested_horrid,
      last_call_optimization,bool,andalso_orelse,get_in_try,hockey,
      handle_info,catch_in_catch,grab_bag,stacktrace,nested_stacktrace,raise,
      no_return_in_try_block,expression_export,throw_opt_crash,coverage,
      throw_opt_funs]}]`
}

%% trycatch_SUITE.erl:58
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`init_per_suite`(_0) {
0:
  %% trycatch_SUITE.erl:59
  _2 = call (`test_lib`:`recompile`/1), `trycatch_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:62
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% trycatch_SUITE.erl:65
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% trycatch_SUITE.erl:68
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% trycatch_SUITE.erl:73
%% Counter = 529
%% bs_ensure_opt: true
function `trycatch_SUITE`:`basic`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _212 = bif:is_list _0
  br _212, ^511, ^211

511:
  br ^522

522:
  _217 = new_try_tag `'try'`
  br _217, ^216, ^214

216:
  %% trycatch_SUITE.erl:75
  %% Result type:
  %%    integer()
  _161 = call (`my_div`/2), `4`, `2`

  %% Unique:
  %%    _161
  _218 = succeeded:body _161
  br _218, ^218, ^214

218:
  %% Unique:
  %%    _217
  _221 = kill_try_tag _217
  br ^215

214:
  %% Unique:
  %%    _217
  _219 = landingpad `'try'`, _217

  %% Aliased:
  %%    _219
  _4 = extract _219, `0`

  %% Aliased:
  %%    _219
  _3 = extract _219, `1`

  %% Unique:
  %%    _217
  _220 = kill_try_tag _217

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _4
  _162 = put_tuple _4, _3
  br ^215

215:
  _5 = phi { _161, ^218 }, { _162, ^214 }

  %% Argument types:
  %%    _5 => integer() | {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _5
  _401 = bif:'=:=' _5, `2`
  br _401, ^512, ^223

512:
  br ^523

523:
  _228 = new_try_tag `'try'`
  br _228, ^227, ^225

227:
  %% trycatch_SUITE.erl:80
  %% Result type:
  %%    integer()
  _164 = call (`my_div`/2), `1`, `0`

  %% Unique:
  %%    _164
  _229 = succeeded:body _164
  br _229, ^229, ^225

229:
  %% Unique:
  %%    _228
  _239 = kill_try_tag _228

  %% trycatch_SUITE.erl:79
  %% Unique:
  %%    _164
  _206 = match_fail `badmatch`, _164

  %% Unique:
  %%    _206
  _399 = succeeded:body _206
  br ^1

225:
  %% Unique:
  %%    _228
  _237 = landingpad `'try'`, _228

  %% Aliased:
  %%    _237
  _10 = extract _237, `0`

  %% Aliased:
  %%    _237
  _9 = extract _237, `1`

  %% Aliased:
  %%    _237
  _8 = extract _237, `2`

  %% Unique:
  %%    _228
  _238 = kill_try_tag _228

  %% Argument types:
  %%    _10 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _10
  _235 = bif:'=:=' _10, `error`
  br _235, ^234, ^231

234:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _233 = bif:'=:=' _9, `badarith`
  br _233, ^513, ^231

513:
  br ^524

524:
  _246 = new_try_tag `'try'`
  br _246, ^245, ^243

245:
  %% trycatch_SUITE.erl:85
  %% Result type:
  %%    0.0
  _13 = call (`zero`/0)

  %% Unique:
  %%    _13
  _247 = succeeded:body _13
  br _247, ^247, ^243

247:
  %% trycatch_SUITE.erl:85
  _518 = float:put `1.0`

  %% trycatch_SUITE.erl:85
  _519 = float:put `0.0`

  %% trycatch_SUITE.erl:85
  %% Unique:
  %%    _518, 
  %%    _519
  _520 = float:'/' _518, _519

  %% Unique:
  %%    _520
  _248 = succeeded:body _520
  br _248, ^521, ^243

521:
  %% Unique:
  %%    _246
  _258 = kill_try_tag _246

  %% Unique:
  %%    _520
  _168 = float:get _520

  %% trycatch_SUITE.erl:84
  %% Unique:
  %%    _168
  _205 = match_fail `badmatch`, _168

  %% Unique:
  %%    _205
  _396 = succeeded:body _205
  br ^1

243:
  %% Unique:
  %%    _246
  _256 = landingpad `'try'`, _246

  %% Aliased:
  %%    _256
  _17 = extract _256, `0`

  %% Aliased:
  %%    _256
  _16 = extract _256, `1`

  %% Aliased:
  %%    _256
  _15 = extract _256, `2`

  %% Unique:
  %%    _246
  _257 = kill_try_tag _246

  %% Argument types:
  %%    _17 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _17
  _254 = bif:'=:=' _17, `error`
  br _254, ^253, ^250

253:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _252 = bif:'=:=' _16, `badarith`
  br _252, ^514, ^250

514:
  br ^525

525:
  _265 = new_try_tag `'try'`
  br _265, ^264, ^262

264:
  %% trycatch_SUITE.erl:90
  %% Result type:
  %%    none()
  _172 = call (`my_add`/2), `53`, `atom`

  %% Aliased:
  %%    _172
  _266 = succeeded:body _172
  br ^262

262:
  %% Unique:
  %%    _265
  _274 = landingpad `'try'`, _265

  %% Aliased:
  %%    _274
  _23 = extract _274, `0`

  %% Aliased:
  %%    _274
  _22 = extract _274, `1`

  %% Aliased:
  %%    _274
  _21 = extract _274, `2`

  %% Unique:
  %%    _265
  _275 = kill_try_tag _265

  %% Argument types:
  %%    _23 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _23
  _272 = bif:'=:=' _23, `error`
  br _272, ^271, ^268

271:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _270 = bif:'=:=' _22, `badarith`
  br _270, ^515, ^268

515:
  br ^526

526:
  _283 = new_try_tag `'try'`
  br _283, ^282, ^280

282:
  %% trycatch_SUITE.erl:95
  _176 = call (`erlang`:`exit`/1), `nisse`

  %% Unique:
  %%    _176
  _284 = succeeded:body _176
  br ^280

280:
  %% Unique:
  %%    _283
  _292 = landingpad `'try'`, _283

  %% Aliased:
  %%    _292
  _29 = extract _292, `0`

  %% Aliased:
  %%    _292
  _28 = extract _292, `1`

  %% Aliased:
  %%    _292
  _27 = extract _292, `2`

  %% Unique:
  %%    _283
  _293 = kill_try_tag _283

  %% Argument types:
  %%    _29 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _29
  _290 = bif:'=:=' _29, `exit`
  br _290, ^289, ^286

289:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _288 = bif:'=:=' _28, `nisse`
  br _288, ^516, ^286

516:
  br ^527

527:
  _301 = new_try_tag `'try'`
  br _301, ^300, ^298

300:
  %% trycatch_SUITE.erl:100
  %% Anno: #{thrown_type => {t_atom,[kalle]}}
  _180 = call (`erlang`:`throw`/1), `kalle`

  %% Aliased:
  %%    _180
  _302 = succeeded:body _180
  br ^298

298:
  %% Unique:
  %%    _301
  _310 = landingpad `'try'`, _301

  %% Aliased:
  %%    _310
  _35 = extract _310, `0`

  %% Aliased:
  %%    _310
  _34 = extract _310, `1`

  %% Aliased:
  %%    _310
  _33 = extract _310, `2`

  %% Unique:
  %%    _301
  _311 = kill_try_tag _301

  %% Argument types:
  %%    _35 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _35
  _308 = bif:'=:=' _35, `throw`
  br _308, ^307, ^304

307:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _306 = bif:'=:=' _34, `kalle`
  br _306, ^385, ^304

385:
  %% trycatch_SUITE.erl:107
  V = call (`id`/1), `{a,variable}`

  %% Aliased:
  %%    V
  _315 = succeeded:body V
  br _315, ^324, ^1

324:
  %% trycatch_SUITE.erl:115
  _183 = call (`after_call`/0)

  %% Aliased:
  %%    _183
  _325 = succeeded:body _183
  br _325, ^328, ^1

328:
  %% trycatch_SUITE.erl:116
  %% Result type:
  %%    'after_was_called'
  _184 = call (`after_clean`/0)

  %% Aliased:
  %%    _184
  _329 = succeeded:body _184
  br _329, ^329, ^1

329:
  %% trycatch_SUITE.erl:117
  _185 = call (`after_call`/0)

  %% Aliased:
  %%    _185
  _330 = succeeded:body _185
  br _330, ^378, ^1

378:
  %% trycatch_SUITE.erl:118
  %% Result type:
  %%    'after_was_called'
  _186 = call (`after_clean`/0)

  %% Aliased:
  %%    _186
  _333 = succeeded:body _186
  br _333, ^333, ^1

333:
  %% Argument types:
  %%    
  %% Aliased:
  %%    V
  _86 = put_list V, `[]`

  %% trycatch_SUITE.erl:119
  _187 = call (`after_call`/0)

  %% Aliased:
  %%    _187
  _334 = succeeded:body _187
  br _334, ^376, ^1

376:
  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Unique:
  %%    _86
  _157 = get_hd _86

  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Unique:
  %%    _86
  _156 = get_tl _86

  %% Argument types:
  %%    _156 => list(any())
  %% Unique:
  %%    _156
  _375 = bif:'=:=' _156, `[]`
  br _375, ^375, ^336

375:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _157, 
  %%    V
  _337 = bif:'=:=' _157, V
  br _337, ^337, ^336

337:
  %% trycatch_SUITE.erl:120
  %% Result type:
  %%    'after_was_called'
  _188 = call (`after_clean`/0)

  %% Aliased:
  %%    _188
  _338 = succeeded:body _188
  br _338, ^338, ^1

338:
  %% Argument types:
  %%    
  %% Aliased:
  %%    V
  _93 = put_tuple `ok`, V

  %% trycatch_SUITE.erl:121
  _189 = call (`after_call`/0)

  %% Aliased:
  %%    _189
  _339 = succeeded:body _189
  br _339, ^368, ^1

368:
  %% Argument types:
  %%    _93 => {'ok', any()}
  %% Unique:
  %%    _93
  _158 = get_tuple_element _93, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158, 
  %%    V
  _342 = bif:'=:=' _158, V
  br _342, ^342, ^341

342:
  %% Argument types:
  %%    
  %% Aliased:
  %%    V
  _345 = bif:'=:=' V, `{a,variable}`
  br _345, ^517, ^344

517:
  br ^528

528:
  _353 = new_try_tag `'try'`
  br _353, ^352, ^350

352:
  %% trycatch_SUITE.erl:131
  %% Anno: #{thrown_type => {t_atom,[thrown]}}
  _192 = call (`erlang`:`throw`/1), `thrown`

  %% Aliased:
  %%    _192
  _354 = succeeded:body _192
  br ^350

350:
  %% Unique:
  %%    _353
  _362 = landingpad `'try'`, _353

  %% Aliased:
  %%    _362
  _109 = extract _362, `0`

  %% Aliased:
  %%    _362
  _108 = extract _362, `1`

  %% Aliased:
  %%    _362
  _107 = extract _362, `2`

  %% Unique:
  %%    _353
  _363 = kill_try_tag _353

  %% Argument types:
  %%    _109 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _109
  _360 = bif:'=:=' _109, `throw`
  br _360, ^359, ^356

359:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _358 = bif:'=:=' _108, `thrown`
  br _358, ^351, ^356

351:
  %% Result type:
  %%    'ok'
  ret `ok`

356:
  %% Aliased:
  %%    _107, 
  %%    _108
  _193 = resume _107, _108

  %% Unique:
  %%    _193
  _361 = succeeded:body _193
  br ^1

344:
  %% trycatch_SUITE.erl:124
  %% Aliased:
  %%    V
  _190 = match_fail `try_clause`, V

  %% Unique:
  %%    _190
  _346 = succeeded:body _190
  br ^1

341:
  %% trycatch_SUITE.erl:121
  %% Unique:
  %%    _93
  _195 = match_fail `badmatch`, _93

  %% Unique:
  %%    _195
  _374 = succeeded:body _195
  br ^1

336:
  %% trycatch_SUITE.erl:119
  %% Unique:
  %%    _86
  _196 = match_fail `badmatch`, _86

  %% Unique:
  %%    _196
  _377 = succeeded:body _196
  br ^1

304:
  %% Aliased:
  %%    _33, 
  %%    _34
  _182 = resume _33, _34

  %% Unique:
  %%    _182
  _309 = succeeded:body _182
  br ^1

286:
  %% Aliased:
  %%    _27, 
  %%    _28
  _178 = resume _27, _28

  %% Unique:
  %%    _178
  _291 = succeeded:body _178
  br ^1

268:
  %% Aliased:
  %%    _21, 
  %%    _22
  _174 = resume _21, _22

  %% Unique:
  %%    _174
  _273 = succeeded:body _174
  br ^1

250:
  %% Aliased:
  %%    _15, 
  %%    _16
  _170 = resume _15, _16

  %% Unique:
  %%    _170
  _255 = succeeded:body _170
  br ^1

231:
  %% Aliased:
  %%    _8, 
  %%    _9
  _166 = resume _8, _9

  %% Unique:
  %%    _166
  _236 = succeeded:body _166
  br ^1

223:
  %% trycatch_SUITE.erl:74
  %% Unique:
  %%    _5
  _207 = match_fail `badmatch`, _5

  %% Unique:
  %%    _207
  _402 = succeeded:body _207
  br ^1

211:
  %% trycatch_SUITE.erl:73
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-basic/1-',1}}
  _208 = match_fail `function_clause`, _0

  %% Unique:
  %%    _208
  _403 = succeeded:body _208
  br ^1

1:
  _209 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _209
}

%% trycatch_SUITE.erl:141
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`after_call`() {
0:
  %% trycatch_SUITE.erl:142
  _2 = call (`erlang`:`put`/2), `basic`, `after_was_called`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:144
%% Counter = 11
%% bs_ensure_opt: true
function `trycatch_SUITE`:`after_clean`() {
0:
  %% trycatch_SUITE.erl:145
  _1 = call (`erlang`:`erase`/1), `basic`

  %% Aliased:
  %%    _1
  _5 = succeeded:body _1
  br _5, ^5, ^1

5:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _9 = bif:'=:=' _1, `after_was_called`
  br _9, ^8, ^7

8:
  %% Result type:
  %%    'after_was_called'
  %% Aliased:
  %%    _1
  ret _1

7:
  %% trycatch_SUITE.erl:145
  %% Aliased:
  %%    _1
  _2 = match_fail `badmatch`, _1

  %% Unique:
  %%    _2
  _10 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:148
%% Counter = 259
%% bs_ensure_opt: true
function `trycatch_SUITE`:`lean_throw`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _87 = bif:is_list _0
  br _87, ^249, ^86

249:
  br ^254

254:
  _92 = new_try_tag `'try'`
  br _92, ^91, ^89

91:
  %% trycatch_SUITE.erl:150
  %% Anno: #{thrown_type => {t_atom,[kalle]}}
  _53 = call (`erlang`:`throw`/1), `kalle`

  %% Aliased:
  %%    _53
  _93 = succeeded:body _53
  br ^89

89:
  %% Unique:
  %%    _92
  _99 = landingpad `'try'`, _92

  %% Aliased:
  %%    _99
  _4 = extract _99, `0`

  %% Aliased:
  %%    _99
  _3 = extract _99, `1`

  %% Aliased:
  %%    _99
  _2 = extract _99, `2`

  %% Unique:
  %%    _92
  _100 = kill_try_tag _92

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _97 = bif:'=:=' _4, `throw`
  br _97, ^96, ^95

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _55 = put_tuple `throw`, _3

  %% Argument types:
  %%    _55 => {'throw', any()}
  %% Unique:
  %%    _55
  _171 = bif:'=:=' _55, `{throw,kalle}`
  br _171, ^250, ^103

250:
  br ^255

255:
  _108 = new_try_tag `'try'`
  br _108, ^107, ^105

107:
  %% trycatch_SUITE.erl:155
  _58 = call (`erlang`:`exit`/1), `kalle`

  %% Unique:
  %%    _58
  _109 = succeeded:body _58
  br ^105

105:
  %% Unique:
  %%    _108
  _115 = landingpad `'try'`, _108

  %% Aliased:
  %%    _115
  _10 = extract _115, `0`

  %% Aliased:
  %%    _115
  _9 = extract _115, `1`

  %% Aliased:
  %%    _115
  _8 = extract _115, `2`

  %% Unique:
  %%    _108
  _116 = kill_try_tag _108
  %% Argument types:
  %%    
  switch _10, ^111, [
    { `exit`, ^112 },
    { `throw`, ^113 }
  ]

113:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _61 = put_tuple `throw`, _9
  br ^106

112:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _60 = put_tuple `exit`, _9
  br ^106

106:
  _11 = phi { _60, ^112 }, { _61, ^113 }

  %% Argument types:
  %%    _11 => {'exit', any()} | {'throw', any()}
  %% Aliased:
  %%    _11
  _169 = bif:'=:=' _11, `{exit,kalle}`
  br _169, ^251, ^119

251:
  br ^256

256:
  _124 = new_try_tag `'try'`
  br _124, ^123, ^121

123:
  %% trycatch_SUITE.erl:161
  _64 = call (`erlang`:`exit`/1), `kalle`

  %% Unique:
  %%    _64
  _125 = succeeded:body _64
  br ^121

121:
  %% Unique:
  %%    _124
  _131 = landingpad `'try'`, _124

  %% Aliased:
  %%    _131
  _16 = extract _131, `0`

  %% Aliased:
  %%    _131
  _15 = extract _131, `1`

  %% Aliased:
  %%    _131
  _14 = extract _131, `2`

  %% Unique:
  %%    _124
  _132 = kill_try_tag _124
  %% Argument types:
  %%    
  switch _16, ^127, [
    { `exit`, ^129 },
    { `throw`, ^128 }
  ]

128:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _66 = put_tuple `throw`, _15
  br ^122

129:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _67 = put_tuple `exit`, _15
  br ^122

122:
  _17 = phi { _66, ^128 }, { _67, ^129 }

  %% Argument types:
  %%    _17 => {'exit', any()} | {'throw', any()}
  %% Aliased:
  %%    _17
  _167 = bif:'=:=' _17, `{exit,kalle}`
  br _167, ^252, ^135

252:
  br ^257

257:
  _140 = new_try_tag `'try'`
  br _140, ^253, ^137

253:
  br ^258

258:
  _145 = new_try_tag `'try'`
  br _145, ^144, ^142

144:
  %% trycatch_SUITE.erl:167
  _72 = call (`erlang`:`exit`/1), `kalle`

  %% Unique:
  %%    _72
  _146 = succeeded:body _72
  br ^142

142:
  %% Unique:
  %%    _145
  _152 = landingpad `'try'`, _145

  %% Aliased:
  %%    _152
  _22 = extract _152, `0`

  %% Aliased:
  %%    _152
  _21 = extract _152, `1`

  %% Aliased:
  %%    _152
  _20 = extract _152, `2`

  %% Unique:
  %%    _145
  _153 = kill_try_tag _145

  %% Argument types:
  %%    _22 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _22
  _150 = bif:'=:=' _22, `throw`
  br _150, ^149, ^148

149:
  %% Unique:
  %%    _140
  _162 = kill_try_tag _140

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _74 = put_tuple `throw`, _21
  br ^138

148:
  %% Aliased:
  %%    _20, 
  %%    _21
  _75 = resume _20, _21

  %% Unique:
  %%    _75
  _151 = succeeded:body _75
  br ^137

137:
  %% Unique:
  %%    _140
  _160 = landingpad `'try'`, _140

  %% Aliased:
  %%    _160
  _26 = extract _160, `0`

  %% Aliased:
  %%    _160
  _25 = extract _160, `1`

  %% Aliased:
  %%    _160
  _24 = extract _160, `2`

  %% Unique:
  %%    _140
  _161 = kill_try_tag _140

  %% Argument types:
  %%    _26 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _26
  _158 = bif:'=:=' _26, `exit`
  br _158, ^157, ^156

157:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _77 = put_tuple `exit`, _25
  br ^138

138:
  _27 = phi { _74, ^149 }, { _77, ^157 }

  %% Argument types:
  %%    _27 => {'exit', any()} | {'throw', any()}
  %% Unique:
  %%    _27
  _165 = bif:'=:=' _27, `{exit,kalle}`
  br _165, ^165, ^164

165:
  %% Result type:
  %%    'ok'
  ret `ok`

164:
  %% trycatch_SUITE.erl:166
  %% Unique:
  %%    _27
  _79 = match_fail `badmatch`, _27

  %% Unique:
  %%    _79
  _166 = succeeded:body _79
  br ^1

156:
  %% Aliased:
  %%    _24, 
  %%    _25
  _78 = resume _24, _25

  %% Unique:
  %%    _78
  _159 = succeeded:body _78
  br ^1

135:
  %% trycatch_SUITE.erl:160
  %% Aliased:
  %%    _17
  _80 = match_fail `badmatch`, _17

  %% Unique:
  %%    _80
  _168 = succeeded:body _80
  br ^1

127:
  %% Aliased:
  %%    _14, 
  %%    _15
  _68 = resume _14, _15

  %% Unique:
  %%    _68
  _130 = succeeded:body _68
  br ^1

119:
  %% trycatch_SUITE.erl:154
  %% Aliased:
  %%    _11
  _81 = match_fail `badmatch`, _11

  %% Unique:
  %%    _81
  _170 = succeeded:body _81
  br ^1

111:
  %% Aliased:
  %%    _8, 
  %%    _9
  _62 = resume _8, _9

  %% Unique:
  %%    _62
  _114 = succeeded:body _62
  br ^1

103:
  %% trycatch_SUITE.erl:149
  %% Unique:
  %%    _55
  _82 = match_fail `badmatch`, _55

  %% Unique:
  %%    _82
  _172 = succeeded:body _82
  br ^1

95:
  %% Aliased:
  %%    _2, 
  %%    _3
  _56 = resume _2, _3

  %% Unique:
  %%    _56
  _98 = succeeded:body _56
  br ^1

86:
  %% trycatch_SUITE.erl:148
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-lean_throw/1-',1}}
  _83 = match_fail `function_clause`, _0

  %% Unique:
  %%    _83
  _173 = succeeded:body _83
  br ^1

1:
  _84 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _84
}

%% trycatch_SUITE.erl:178
%% Counter = 131
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_of`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _49 = bif:is_list _0
  br _49, ^49, ^48

49:
  %% trycatch_SUITE.erl:180
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _21 = call (`try_of_1`/1), `{value,{good,{some,content}}}`

  %% Aliased:
  %%    _21
  _50 = succeeded:body _21
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    _21 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _21
  _111 = bif:'=:=' _21, `{ok,{some,content}}`
  br _111, ^111, ^52

111:
  %% trycatch_SUITE.erl:182
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _22 = call (`try_of_1`/1), `{value,{bad,[other,content]}}`

  %% Aliased:
  %%    _22
  _53 = succeeded:body _22
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    _22 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _22
  _109 = bif:'=:=' _22, `{error,[other,content]}`
  br _109, ^109, ^55

109:
  %% trycatch_SUITE.erl:184
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _23 = call (`try_of_1`/1), `{exit,{ex,it,[reason]}}`

  %% Aliased:
  %%    _23
  _56 = succeeded:body _23
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    _23 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _23
  _107 = bif:'=:=' _23, `{caught,{exit,{ex,it,[reason]}}}`
  br _107, ^107, ^58

107:
  %% trycatch_SUITE.erl:186
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _24 = call (`try_of_1`/1), `{throw,[term,{in,a,{tuple}}]}`

  %% Aliased:
  %%    _24
  _59 = succeeded:body _24
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    _24 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _24
  _105 = bif:'=:=' _24, `{caught,{throw,[term,{in,a,{tuple}}]}}`
  br _105, ^105, ^61

105:
  %% trycatch_SUITE.erl:188
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _25 = call (`try_of_1`/1), `{error,[bad,arg]}`

  %% Aliased:
  %%    _25
  _62 = succeeded:body _25
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    _25 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _25
  _103 = bif:'=:=' _25, `{caught,{error,[bad,arg]}}`
  br _103, ^103, ^64

103:
  %% trycatch_SUITE.erl:190
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _26 = call (`try_of_1`/1), `{'div',{1,0}}`

  %% Aliased:
  %%    _26
  _65 = succeeded:body _26
  br _65, ^65, ^1

65:
  %% Argument types:
  %%    _26 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _26
  _101 = bif:'=:=' _26, `{caught,{error,badarith}}`
  br _101, ^101, ^67

101:
  %% trycatch_SUITE.erl:192
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _27 = call (`try_of_1`/1), `{add,{a,0}}`

  %% Aliased:
  %%    _27
  _68 = succeeded:body _27
  br _68, ^68, ^1

68:
  %% Argument types:
  %%    _27 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _27
  _99 = bif:'=:=' _27, `{caught,{error,badarith}}`
  br _99, ^99, ^70

99:
  %% trycatch_SUITE.erl:194
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _28 = call (`try_of_1`/1), `{abs,x}`

  %% Aliased:
  %%    _28
  _71 = succeeded:body _28
  br _71, ^71, ^1

71:
  %% Argument types:
  %%    _28 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _28
  _97 = bif:'=:=' _28, `{caught,{error,badarg}}`
  br _97, ^97, ^73

97:
  %% trycatch_SUITE.erl:196
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _29 = call (`try_of_1`/1), `illegal`

  %% Aliased:
  %%    _29
  _74 = succeeded:body _29
  br _74, ^74, ^1

74:
  %% Argument types:
  %%    _29 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _29
  _95 = bif:'=:=' _29, `{caught,{error,function_clause}}`
  br _95, ^129, ^76

129:
  br ^130

130:
  _81 = new_try_tag `'try'`
  br _81, ^80, ^78

80:
  %% trycatch_SUITE.erl:198
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  _31 = call (`try_of_1`/1), `{value,{some,other_garbage}}`

  %% Aliased:
  %%    _31
  _82 = succeeded:body _31
  br _82, ^82, ^78

82:
  %% Unique:
  %%    _81
  _90 = kill_try_tag _81
  br ^79

78:
  %% Unique:
  %%    _81
  _88 = landingpad `'try'`, _81

  %% Aliased:
  %%    _88
  _13 = extract _88, `0`

  %% Aliased:
  %%    _88
  _12 = extract _88, `1`

  %% Aliased:
  %%    _88
  _11 = extract _88, `2`

  %% Unique:
  %%    _81
  _89 = kill_try_tag _81

  %% Argument types:
  %%    _13 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _13
  _86 = bif:'=:=' _13, `error`
  br _86, ^85, ^84

85:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _33 = put_tuple `error`, _12
  br ^79

79:
  _14 = phi { _31, ^82 }, { _33, ^85 }

  %% Argument types:
  %%    _14 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'error', any()} | {'ok', any()}
  %% Aliased:
  %%    _14
  _93 = bif:'=:=' _14, `{error,{try_clause,{some,other_garbage}}}`
  br _93, ^93, ^92

93:
  %% Result type:
  %%    'ok'
  ret `ok`

92:
  %% trycatch_SUITE.erl:197
  %% Aliased:
  %%    _14
  _35 = match_fail `badmatch`, _14

  %% Unique:
  %%    _35
  _94 = succeeded:body _35
  br ^1

84:
  %% Aliased:
  %%    _11, 
  %%    _12
  _34 = resume _11, _12

  %% Unique:
  %%    _34
  _87 = succeeded:body _34
  br ^1

76:
  %% trycatch_SUITE.erl:195
  %% Aliased:
  %%    _29
  _36 = match_fail `badmatch`, _29

  %% Unique:
  %%    _36
  _96 = succeeded:body _36
  br ^1

73:
  %% trycatch_SUITE.erl:193
  %% Aliased:
  %%    _28
  _37 = match_fail `badmatch`, _28

  %% Unique:
  %%    _37
  _98 = succeeded:body _37
  br ^1

70:
  %% trycatch_SUITE.erl:191
  %% Aliased:
  %%    _27
  _38 = match_fail `badmatch`, _27

  %% Unique:
  %%    _38
  _100 = succeeded:body _38
  br ^1

67:
  %% trycatch_SUITE.erl:189
  %% Aliased:
  %%    _26
  _39 = match_fail `badmatch`, _26

  %% Unique:
  %%    _39
  _102 = succeeded:body _39
  br ^1

64:
  %% trycatch_SUITE.erl:187
  %% Aliased:
  %%    _25
  _40 = match_fail `badmatch`, _25

  %% Unique:
  %%    _40
  _104 = succeeded:body _40
  br ^1

61:
  %% trycatch_SUITE.erl:185
  %% Aliased:
  %%    _24
  _41 = match_fail `badmatch`, _24

  %% Unique:
  %%    _41
  _106 = succeeded:body _41
  br ^1

58:
  %% trycatch_SUITE.erl:183
  %% Aliased:
  %%    _23
  _42 = match_fail `badmatch`, _23

  %% Unique:
  %%    _42
  _108 = succeeded:body _42
  br ^1

55:
  %% trycatch_SUITE.erl:181
  %% Aliased:
  %%    _22
  _43 = match_fail `badmatch`, _22

  %% Unique:
  %%    _43
  _110 = succeeded:body _43
  br ^1

52:
  %% trycatch_SUITE.erl:179
  %% Aliased:
  %%    _21
  _44 = match_fail `badmatch`, _21

  %% Unique:
  %%    _44
  _112 = succeeded:body _44
  br ^1

48:
  %% trycatch_SUITE.erl:178
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-try_of/1-',1}}
  _45 = match_fail `function_clause`, _0

  %% Unique:
  %%    _45
  _113 = succeeded:body _45
  br ^1

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% trycatch_SUITE.erl:203
%% Counter = 53
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'illegal' | {'abs', 'x'} | {'add', {'a', 0}} | {''div'', {1, 0}} | {'error', nonempty_list('arg' | 'bad')} | {'exit', {'ex', 'it', nonempty_list('reason')}} | {'throw', nonempty_list('term' | {'in', 'a', {'tuple'}})} | {'value', {'bad', nonempty_list('content' | 'other')} | {'good', {'some', 'content'}} | {'some', 'other_garbage'}}
function `trycatch_SUITE`:`try_of_1`(_0) {
0:
  br ^52

52:
  _22 = new_try_tag `'try'`
  br _22, ^21, ^19

21:
  %% trycatch_SUITE.erl:204
  %% Unique:
  %%    _0
  _11 = call (`foo`/1), _0

  %% Aliased:
  %%    _11
  _23 = succeeded:body _11
  br _23, ^23, ^19

23:
  %% Unique:
  %%    _22
  _35 = kill_try_tag _22

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _29 = bif:is_tuple _11
  br _29, ^29, ^25

29:
  %% Argument types:
  %%    _11 => {...}
  %% Aliased:
  %%    _11
  _30 = bif:tuple_size _11

  %% Argument types:
  %%    _30 => 0..16777215
  %% Unique:
  %%    _30
  _31 = bif:'=:=' _30, `2`
  br _31, ^28, ^25

28:
  %% Argument types:
  %%    _11 => {any(), any()}
  %% Aliased:
  %%    _11
  _8 = get_tuple_element _11, `0`

  %% Argument types:
  %%    _11 => {any(), any()}
  %% Aliased:
  %%    _11
  _7 = get_tuple_element _11, `1`
  switch _8, ^25, [
    { `bad`, ^26 },
    { `good`, ^27 }
  ]

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _13 = put_tuple `ok`, _7
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _13
  ret _13

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _12 = put_tuple `error`, _7
  %% Result type:
  %%    {'error', any()}
  %% Unique:
  %%    _12
  ret _12

25:
  %% trycatch_SUITE.erl:204
  %% Aliased:
  %%    _11
  _14 = match_fail `try_clause`, _11

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16

19:
  %% Unique:
  %%    _22
  _33 = landingpad `'try'`, _22

  %% Aliased:
  %%    _33
  _5 = extract _33, `0`

  %% Aliased:
  %%    _33
  _4 = extract _33, `1`

  %% Unique:
  %%    _22
  _34 = kill_try_tag _22

  %% Argument types:
  %%    _5 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _4
  %% Unique:
  %%    _5
  _9 = put_tuple _5, _4

  %% Argument types:
  %%    _9 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _9
  _15 = put_tuple `caught`, _9
  %% Result type:
  %%    {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Unique:
  %%    _15
  ret _15
}

%% trycatch_SUITE.erl:212
%% Counter = 45
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _24 = bif:is_list _0
  br _24, ^24, ^23

24:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _1 = make_fun (`try_after_basic`/2)

  %% trycatch_SUITE.erl:213
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _1
  _11 = call (`try_after_1`/1), _1

  %% Unique:
  %%    _11
  _25 = succeeded:body _11
  br _25, ^25, ^1

25:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _2 = make_fun (`try_after_catch`/2)

  %% trycatch_SUITE.erl:214
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _2
  _12 = call (`try_after_1`/1), _2

  %% Unique:
  %%    _12
  _26 = succeeded:body _12
  br _26, ^26, ^1

26:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _3 = make_fun (`try_after_complex`/2)

  %% trycatch_SUITE.erl:215
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  _13 = call (`try_after_1`/1), _3

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br _27, ^27, ^1

27:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _4 = make_fun (`try_after_fun`/2)

  %% trycatch_SUITE.erl:216
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _4
  _14 = call (`try_after_1`/1), _4

  %% Unique:
  %%    _14
  _28 = succeeded:body _14
  br _28, ^28, ^1

28:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _5 = make_fun (`try_after_letrec`/2)

  %% trycatch_SUITE.erl:217
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  _15 = call (`try_after_1`/1), _5

  %% Unique:
  %%    _15
  _29 = succeeded:body _15
  br _29, ^29, ^1

29:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _6 = make_fun (`try_after_protect`/2)

  %% trycatch_SUITE.erl:218
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _6
  _16 = call (`try_after_1`/1), _6

  %% Unique:
  %%    _16
  _30 = succeeded:body _16
  br _30, ^30, ^1

30:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _7 = make_fun (`try_after_receive`/2)

  %% trycatch_SUITE.erl:219
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _7
  _17 = call (`try_after_1`/1), _7

  %% Unique:
  %%    _17
  _31 = succeeded:body _17
  br _31, ^31, ^1

31:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _8 = make_fun (`try_after_receive_timeout`/2)

  %% trycatch_SUITE.erl:220
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _8
  _18 = call (`try_after_1`/1), _8

  %% Unique:
  %%    _18
  _32 = succeeded:body _18
  br _32, ^32, ^1

32:
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  _9 = make_fun (`try_after_try`/2)

  %% trycatch_SUITE.erl:221
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _9
  _19 = call (`try_after_1`/1), _9

  %% Unique:
  %%    _19
  _33 = succeeded:body _19
  br _33, ^44, ^1

44:
  ret _19

23:
  %% trycatch_SUITE.erl:212
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-try_after/1-',1}}
  _20 = match_fail `function_clause`, _0

  %% Unique:
  %%    _20
  _34 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% trycatch_SUITE.erl:224
%% Counter = 227
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
function `trycatch_SUITE`:`try_after_1`(_0) {
0:
  %% trycatch_SUITE.erl:226
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _42 = call _0, `{value,{ok,[some,value]}}`, `finalized`

  %% Aliased:
  %%    _42
  _77 = succeeded:body _42
  br _77, ^77, ^1

77:
  %% Argument types:
  %%    _42 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _42
  _172 = bif:'=:=' _42, `{{ok,[some,value],undefined},finalized}`
  br _172, ^172, ^79

172:
  %% trycatch_SUITE.erl:228
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _43 = call _0, `{'div',{1,0}}`, `finalized`

  %% Aliased:
  %%    _43
  _80 = succeeded:body _43
  br _80, ^80, ^1

80:
  %% Argument types:
  %%    _43 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _43
  _170 = bif:'=:=' _43, `{{error,badarith,undefined},finalized}`
  br _170, ^170, ^82

170:
  %% trycatch_SUITE.erl:230
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _44 = call _0, `{add,{1,a}}`, `finalized`

  %% Aliased:
  %%    _44
  _83 = succeeded:body _44
  br _83, ^83, ^1

83:
  %% Argument types:
  %%    _44 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _44
  _168 = bif:'=:=' _44, `{{error,badarith,undefined},finalized}`
  br _168, ^168, ^85

168:
  %% trycatch_SUITE.erl:232
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _45 = call _0, `{abs,a}`, `finalized`

  %% Aliased:
  %%    _45
  _86 = succeeded:body _45
  br _86, ^86, ^1

86:
  %% Argument types:
  %%    _45 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _45
  _166 = bif:'=:=' _45, `{{error,badarg,undefined},finalized}`
  br _166, ^166, ^88

166:
  %% trycatch_SUITE.erl:234
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _46 = call _0, `{error,[the,{reason}]}`, `finalized`

  %% Aliased:
  %%    _46
  _89 = succeeded:body _46
  br _89, ^89, ^1

89:
  %% Argument types:
  %%    _46 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _46
  _164 = bif:'=:=' _46, `{{error,[the,{reason}],undefined},finalized}`
  br _164, ^164, ^91

164:
  %% trycatch_SUITE.erl:236
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _47 = call _0, `{throw,{thrown,[reason]}}`, `finalized`

  %% Aliased:
  %%    _47
  _92 = succeeded:body _47
  br _92, ^92, ^1

92:
  %% Argument types:
  %%    _47 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _47
  _162 = bif:'=:=' _47, `{{throw,{thrown,[reason]},undefined},finalized}`
  br _162, ^162, ^94

162:
  %% trycatch_SUITE.erl:238
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _48 = call _0, `{exit,{exited,{reason}}}`, `finalized`

  %% Aliased:
  %%    _48
  _95 = succeeded:body _48
  br _95, ^95, ^1

95:
  %% Argument types:
  %%    _48 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _48
  _160 = bif:'=:=' _48, `{{exit,{exited,{reason}},undefined},finalized}`
  br _160, ^160, ^97

160:
  %% trycatch_SUITE.erl:240
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _49 = call _0, `function_clause`, `finalized`

  %% Aliased:
  %%    _49
  _98 = succeeded:body _49
  br _98, ^98, ^1

98:
  %% Argument types:
  %%    _49 => {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Aliased:
  %%    _49
  _158 = bif:'=:=' _49, `{{error,function_clause,undefined},finalized}`
  br _158, ^221, ^100

221:
  br ^224

224:
  _105 = new_try_tag `'try'`
  br _105, ^104, ^102

104:
  %% trycatch_SUITE.erl:243
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Argument types:
  %%    _0 => fun((_, _) -> {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()})
  %% Aliased:
  %%    _0
  _52 = call _0, `{add,{1,1}}`, `finalized`

  %% Aliased:
  %%    _52
  _106 = succeeded:body _52
  br _106, ^106, ^102

106:
  %% Unique:
  %%    _105
  _115 = kill_try_tag _105

  %% trycatch_SUITE.erl:241
  %% Aliased:
  %%    _52
  _66 = match_fail `badmatch`, _52

  %% Unique:
  %%    _66
  _157 = succeeded:body _66
  br ^1

102:
  %% Unique:
  %%    _105
  _113 = landingpad `'try'`, _105

  %% Aliased:
  %%    _113
  _12 = extract _113, `0`

  %% Aliased:
  %%    _113
  _11 = extract _113, `1`

  %% Aliased:
  %%    _113
  _10 = extract _113, `2`

  %% Unique:
  %%    _105
  _114 = kill_try_tag _105

  %% Argument types:
  %%    _12 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _12
  _111 = bif:'=:=' _12, `error`
  br _111, ^110, ^108

110:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _109 = bif:'=:=' _11, `{try_clause,2}`
  br _109, ^155, ^108

155:
  %% trycatch_SUITE.erl:247
  _50 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _50
  _118 = succeeded:body _50
  br _118, ^118, ^1

118:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _153 = bif:'=:=' _50, `finalized`
  br _153, ^222, ^120

222:
  br ^225

225:
  _125 = new_try_tag `'try'`
  br _125, ^223, ^122

223:
  br ^226

226:
  _130 = new_try_tag `'try'`
  br _130, ^129, ^127

129:
  %% trycatch_SUITE.erl:251
  _58 = call (`foo`/1), `{exit,[reaso,{n}]}`

  %% Aliased:
  %%    _58
  _131 = succeeded:body _58
  br _131, ^131, ^127

131:
  %% Unique:
  %%    _130
  _137 = kill_try_tag _130

  %% trycatch_SUITE.erl:253
  _59 = call (`erlang`:`put`/2), `try_after`, `finalized`

  %% Aliased:
  %%    _59
  _132 = succeeded:body _59
  br _132, ^128, ^122

128:
  %% Unique:
  %%    _125
  _146 = kill_try_tag _125

  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _150 = bif:'=:=' _58, `ok`
  br _150, ^149, ^148

148:
  %% trycatch_SUITE.erl:248
  %% Aliased:
  %%    _58
  _64 = match_fail `badmatch`, _58

  %% Unique:
  %%    _64
  _151 = succeeded:body _64
  br ^1

127:
  %% Unique:
  %%    _130
  _135 = landingpad `'try'`, _130

  %% Aliased:
  %%    _135
  _19 = extract _135, `1`

  %% Aliased:
  %%    _135
  _18 = extract _135, `2`

  %% Unique:
  %%    _130
  _136 = kill_try_tag _130
  br ^175

175:
  %% trycatch_SUITE.erl:253
  _60 = call (`erlang`:`put`/2), `try_after`, `finalized`

  %% Aliased:
  %%    _60
  _133 = succeeded:body _60
  br _133, ^133, ^122

133:
  %% Aliased:
  %%    _18, 
  %%    _19
  _61 = resume _18, _19

  %% Unique:
  %%    _61
  _134 = succeeded:body _61
  br ^122

122:
  %% Unique:
  %%    _125
  _144 = landingpad `'try'`, _125

  %% Aliased:
  %%    _144
  _24 = extract _144, `0`

  %% Aliased:
  %%    _144
  _23 = extract _144, `1`

  %% Aliased:
  %%    _144
  _22 = extract _144, `2`

  %% Unique:
  %%    _125
  _145 = kill_try_tag _125

  %% Argument types:
  %%    _24 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _24
  _142 = bif:'=:=' _24, `exit`
  br _142, ^141, ^139

141:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _140 = bif:'=:=' _23, `[reaso,{n}]`
  br _140, ^149, ^139

149:
  %% Result type:
  %%    'ok'
  ret `ok`

139:
  %% Aliased:
  %%    _22, 
  %%    _23
  _63 = resume _22, _23

  %% Unique:
  %%    _63
  _143 = succeeded:body _63
  br ^1

120:
  %% trycatch_SUITE.erl:247
  %% Aliased:
  %%    _50
  _65 = match_fail `badmatch`, _50

  %% Unique:
  %%    _65
  _154 = succeeded:body _65
  br ^1

108:
  %% Aliased:
  %%    _10, 
  %%    _11
  _54 = resume _10, _11

  %% Unique:
  %%    _54
  _112 = succeeded:body _54
  br ^1

100:
  %% trycatch_SUITE.erl:239
  %% Aliased:
  %%    _49
  _67 = match_fail `badmatch`, _49

  %% Unique:
  %%    _67
  _159 = succeeded:body _67
  br ^1

97:
  %% trycatch_SUITE.erl:237
  %% Aliased:
  %%    _48
  _68 = match_fail `badmatch`, _48

  %% Unique:
  %%    _68
  _161 = succeeded:body _68
  br ^1

94:
  %% trycatch_SUITE.erl:235
  %% Aliased:
  %%    _47
  _69 = match_fail `badmatch`, _47

  %% Unique:
  %%    _69
  _163 = succeeded:body _69
  br ^1

91:
  %% trycatch_SUITE.erl:233
  %% Aliased:
  %%    _46
  _70 = match_fail `badmatch`, _46

  %% Unique:
  %%    _70
  _165 = succeeded:body _70
  br ^1

88:
  %% trycatch_SUITE.erl:231
  %% Aliased:
  %%    _45
  _71 = match_fail `badmatch`, _45

  %% Unique:
  %%    _71
  _167 = succeeded:body _71
  br ^1

85:
  %% trycatch_SUITE.erl:229
  %% Aliased:
  %%    _44
  _72 = match_fail `badmatch`, _44

  %% Unique:
  %%    _72
  _169 = succeeded:body _72
  br ^1

82:
  %% trycatch_SUITE.erl:227
  %% Aliased:
  %%    _43
  _73 = match_fail `badmatch`, _43

  %% Unique:
  %%    _73
  _171 = succeeded:body _73
  br ^1

79:
  %% trycatch_SUITE.erl:225
  %% Aliased:
  %%    _42
  _74 = match_fail `badmatch`, _42

  %% Unique:
  %%    _74
  _173 = succeeded:body _74
  br ^1

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% trycatch_SUITE.erl:275
%% Counter = 124
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_basic`(_0, _1) {
0:
  %% trycatch_SUITE.erl:276
  _31 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _31
  _50 = succeeded:body _31
  br _50, ^120, ^1

120:
  br ^122

122:
  _55 = new_try_tag `'try'`
  br _55, ^121, ^52

121:
  br ^123

123:
  _60 = new_try_tag `'try'`
  br _60, ^59, ^57

59:
  %% trycatch_SUITE.erl:276
  %% Aliased:
  %%    _0
  _35 = call (`foo`/1), _0

  %% Aliased:
  %%    _35
  _61 = succeeded:body _35
  br _61, ^61, ^57

61:
  %% Unique:
  %%    _60
  _79 = kill_try_tag _60

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _67 = is_tagged_tuple _35, `2`, `ok`
  br _67, ^64, ^63

64:
  %% Argument types:
  %%    _35 => {'ok', any()}
  %% Aliased:
  %%    _35
  _27 = get_tuple_element _35, `1`

  %% trycatch_SUITE.erl:276
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _27
  _37 = put_tuple `ok`, _27, _3
  br ^58

63:
  %% trycatch_SUITE.erl:276
  %% Aliased:
  %%    _35
  _38 = match_fail `try_clause`, _35

  %% Unique:
  %%    _38
  _70 = succeeded:body _38
  br ^52

57:
  %% Unique:
  %%    _60
  _77 = landingpad `'try'`, _60

  %% Aliased:
  %%    _77
  _7 = extract _77, `0`

  %% Aliased:
  %%    _77
  _6 = extract _77, `1`

  %% Unique:
  %%    _60
  _78 = kill_try_tag _60
  %% Argument types:
  %%    
  switch _7, ^74, [
    { `exit`, ^75 },
    { `throw`, ^73 }
  ]

73:
  %% trycatch_SUITE.erl:276
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _40 = put_tuple `throw`, _6, _8
  br ^71

75:
  %% trycatch_SUITE.erl:276
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _42 = put_tuple `exit`, _6, _10
  br ^71

74:
  %% trycatch_SUITE.erl:276
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _41 = put_tuple `error`, _6, _9
  br ^71

71:
  _39 = phi { _40, ^73 }, { _41, ^74 }, { _42, ^75 }
  br ^58

58:
  _33 = phi { _37, ^64 }, { _39, ^71 }

  %% Unique:
  %%    _55
  _85 = kill_try_tag _55

  %% trycatch_SUITE.erl:276
  %% Aliased:
  %%    _1
  _44 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _44
  _80 = succeeded:body _44
  br _80, ^89, ^1

89:
  %% trycatch_SUITE.erl:276
  _18 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _18
  _86 = succeeded:body _18
  br _86, ^86, ^1

86:
  %% Argument types:
  %%    _33 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _18, 
  %%    _33
  _47 = put_tuple _33, _18
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _47
  ret _47

52:
  %% Unique:
  %%    _55
  _83 = landingpad `'try'`, _55

  %% Aliased:
  %%    _83
  _14 = extract _83, `1`

  %% Aliased:
  %%    _83
  _13 = extract _83, `2`

  %% Unique:
  %%    _55
  _84 = kill_try_tag _55
  br ^88

88:
  %% trycatch_SUITE.erl:276
  %% Aliased:
  %%    _1
  _45 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _45
  _81 = succeeded:body _45
  br _81, ^81, ^1

81:
  %% Aliased:
  %%    _13, 
  %%    _14
  _46 = resume _13, _14

  %% Unique:
  %%    _46
  _82 = succeeded:body _46
  br ^1

1:
  _48 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _48
}

%% trycatch_SUITE.erl:278
%% Counter = 149
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_catch`(_0, _1) {
0:
  %% trycatch_SUITE.erl:279
  _36 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _36
  _59 = succeeded:body _36
  br _59, ^145, ^1

145:
  br ^147

147:
  _64 = new_try_tag `'try'`
  br _64, ^146, ^61

146:
  br ^148

148:
  _69 = new_try_tag `'try'`
  br _69, ^68, ^66

68:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _0
  _40 = call (`foo`/1), _0

  %% Aliased:
  %%    _40
  _70 = succeeded:body _40
  br _70, ^70, ^66

70:
  %% Unique:
  %%    _69
  _88 = kill_try_tag _69

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _76 = is_tagged_tuple _40, `2`, `ok`
  br _76, ^73, ^72

73:
  %% Argument types:
  %%    _40 => {'ok', any()}
  %% Aliased:
  %%    _40
  _27 = get_tuple_element _40, `1`

  %% trycatch_SUITE.erl:279
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _27
  _42 = put_tuple `ok`, _27, _3
  br ^67

72:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _40
  _43 = match_fail `try_clause`, _40

  %% Unique:
  %%    _43
  _79 = succeeded:body _43
  br ^61

66:
  %% Unique:
  %%    _69
  _86 = landingpad `'try'`, _69

  %% Aliased:
  %%    _86
  _7 = extract _86, `0`

  %% Aliased:
  %%    _86
  _6 = extract _86, `1`

  %% Unique:
  %%    _69
  _87 = kill_try_tag _69
  %% Argument types:
  %%    
  switch _7, ^83, [
    { `exit`, ^84 },
    { `throw`, ^82 }
  ]

82:
  %% trycatch_SUITE.erl:279
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _45 = put_tuple `throw`, _6, _8
  br ^80

84:
  %% trycatch_SUITE.erl:279
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _47 = put_tuple `exit`, _6, _10
  br ^80

83:
  %% trycatch_SUITE.erl:279
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _46 = put_tuple `error`, _6, _9
  br ^80

80:
  _44 = phi { _45, ^82 }, { _46, ^83 }, { _47, ^84 }
  br ^67

67:
  _38 = phi { _42, ^73 }, { _44, ^80 }

  %% Unique:
  %%    _64
  _112 = kill_try_tag _64
  _93 = new_try_tag `'try'`
  br _93, ^92, ^90

92:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _1
  _50 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _50
  _94 = succeeded:body _50
  br _94, ^94, ^90

94:
  %% Unique:
  %%    _93
  _97 = kill_try_tag _93
  br ^91

90:
  %% Unique:
  %%    _93
  _95 = landingpad `'try'`, _93

  %% Unique:
  %%    _93
  _96 = kill_try_tag _93
  br ^91

91:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _1
  _51 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _51
  _98 = succeeded:body _51
  br _98, ^114, ^1

114:
  %% trycatch_SUITE.erl:279
  _18 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _18
  _113 = succeeded:body _18
  br _113, ^113, ^1

113:
  %% Argument types:
  %%    _38 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _18, 
  %%    _38
  _56 = put_tuple _38, _18
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _56
  ret _56

61:
  %% Unique:
  %%    _64
  _110 = landingpad `'try'`, _64

  %% Aliased:
  %%    _110
  _14 = extract _110, `1`

  %% Aliased:
  %%    _110
  _13 = extract _110, `2`

  %% Unique:
  %%    _64
  _111 = kill_try_tag _64
  _103 = new_try_tag `'try'`
  br _103, ^102, ^100

102:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _1
  _53 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _53
  _104 = succeeded:body _53
  br _104, ^104, ^100

104:
  %% Unique:
  %%    _103
  _107 = kill_try_tag _103
  br ^101

100:
  %% Unique:
  %%    _103
  _105 = landingpad `'try'`, _103

  %% Unique:
  %%    _103
  _106 = kill_try_tag _103
  br ^101

101:
  %% trycatch_SUITE.erl:279
  %% Aliased:
  %%    _1
  _54 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _54
  _108 = succeeded:body _54
  br _108, ^108, ^1

108:
  %% Aliased:
  %%    _13, 
  %%    _14
  _55 = resume _13, _14

  %% Unique:
  %%    _55
  _109 = succeeded:body _55
  br ^1

1:
  _57 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _57
}

%% trycatch_SUITE.erl:281
%% Counter = 139
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_complex`(_0, _1) {
0:
  %% trycatch_SUITE.erl:283
  _34 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _34
  _65 = succeeded:body _34
  br _65, ^135, ^1

135:
  br ^137

137:
  _70 = new_try_tag `'try'`
  br _70, ^136, ^67

136:
  br ^138

138:
  _75 = new_try_tag `'try'`
  br _75, ^74, ^72

74:
  %% trycatch_SUITE.erl:283
  %% Aliased:
  %%    _0
  _50 = call (`foo`/1), _0

  %% Aliased:
  %%    _50
  _76 = succeeded:body _50
  br _76, ^76, ^72

76:
  %% Unique:
  %%    _75
  _94 = kill_try_tag _75

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _82 = is_tagged_tuple _50, `2`, `ok`
  br _82, ^79, ^78

79:
  %% Argument types:
  %%    _50 => {'ok', any()}
  %% Aliased:
  %%    _50
  _30 = get_tuple_element _50, `1`

  %% trycatch_SUITE.erl:283
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _30
  _52 = put_tuple `ok`, _30, _3
  br ^73

78:
  %% trycatch_SUITE.erl:283
  %% Aliased:
  %%    _50
  _53 = match_fail `try_clause`, _50

  %% Unique:
  %%    _53
  _85 = succeeded:body _53
  br ^67

72:
  %% Unique:
  %%    _75
  _92 = landingpad `'try'`, _75

  %% Aliased:
  %%    _92
  _7 = extract _92, `0`

  %% Aliased:
  %%    _92
  _6 = extract _92, `1`

  %% Unique:
  %%    _75
  _93 = kill_try_tag _75
  %% Argument types:
  %%    
  switch _7, ^89, [
    { `exit`, ^90 },
    { `throw`, ^88 }
  ]

88:
  %% trycatch_SUITE.erl:283
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _55 = put_tuple `throw`, _6, _8
  br ^86

90:
  %% trycatch_SUITE.erl:283
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _57 = put_tuple `exit`, _6, _10
  br ^86

89:
  %% trycatch_SUITE.erl:283
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _56 = put_tuple `error`, _6, _9
  br ^86

86:
  _54 = phi { _55, ^88 }, { _56, ^89 }, { _57, ^90 }
  br ^73

73:
  _48 = phi { _52, ^79 }, { _54, ^86 }

  %% Unique:
  %%    _70
  _100 = kill_try_tag _70

  %% trycatch_SUITE.erl:283
  %% Aliased:
  %%    _1
  _59 = call (`'-try_after_complex/2-after$^0/0-0-'`/1), _1

  %% Aliased:
  %%    _59
  _95 = succeeded:body _59
  br _95, ^104, ^1

104:
  %% trycatch_SUITE.erl:295
  _19 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _19
  _101 = succeeded:body _19
  br _101, ^101, ^1

101:
  %% Argument types:
  %%    _48 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _19, 
  %%    _48
  _62 = put_tuple _48, _19
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _62
  ret _62

67:
  %% Unique:
  %%    _70
  _98 = landingpad `'try'`, _70

  %% Aliased:
  %%    _98
  _15 = extract _98, `1`

  %% Aliased:
  %%    _98
  _14 = extract _98, `2`

  %% Unique:
  %%    _70
  _99 = kill_try_tag _70
  br ^103

103:
  %% trycatch_SUITE.erl:283
  %% Aliased:
  %%    _1
  _60 = call (`'-try_after_complex/2-after$^0/0-0-'`/1), _1

  %% Aliased:
  %%    _60
  _96 = succeeded:body _60
  br _96, ^96, ^1

96:
  %% Aliased:
  %%    _14, 
  %%    _15
  _61 = resume _14, _15

  %% Unique:
  %%    _61
  _97 = succeeded:body _61
  br ^1

1:
  _63 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _63
}

%% trycatch_SUITE.erl:297
%% Counter = 125
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_fun`(_0, _1) {
0:
  %% trycatch_SUITE.erl:298
  _32 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _32
  _51 = succeeded:body _32
  br _51, ^121, ^1

121:
  br ^123

123:
  _56 = new_try_tag `'try'`
  br _56, ^122, ^53

122:
  br ^124

124:
  _61 = new_try_tag `'try'`
  br _61, ^60, ^58

60:
  %% trycatch_SUITE.erl:298
  %% Aliased:
  %%    _0
  _36 = call (`foo`/1), _0

  %% Aliased:
  %%    _36
  _62 = succeeded:body _36
  br _62, ^62, ^58

62:
  %% Unique:
  %%    _61
  _80 = kill_try_tag _61

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _68 = is_tagged_tuple _36, `2`, `ok`
  br _68, ^65, ^64

65:
  %% Argument types:
  %%    _36 => {'ok', any()}
  %% Aliased:
  %%    _36
  _28 = get_tuple_element _36, `1`

  %% trycatch_SUITE.erl:298
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _28
  _38 = put_tuple `ok`, _28, _3
  br ^59

64:
  %% trycatch_SUITE.erl:298
  %% Aliased:
  %%    _36
  _39 = match_fail `try_clause`, _36

  %% Unique:
  %%    _39
  _71 = succeeded:body _39
  br ^53

58:
  %% Unique:
  %%    _61
  _78 = landingpad `'try'`, _61

  %% Aliased:
  %%    _78
  _7 = extract _78, `0`

  %% Aliased:
  %%    _78
  _6 = extract _78, `1`

  %% Unique:
  %%    _61
  _79 = kill_try_tag _61
  %% Argument types:
  %%    
  switch _7, ^75, [
    { `exit`, ^76 },
    { `throw`, ^74 }
  ]

74:
  %% trycatch_SUITE.erl:298
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _41 = put_tuple `throw`, _6, _8
  br ^72

76:
  %% trycatch_SUITE.erl:298
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _43 = put_tuple `exit`, _6, _10
  br ^72

75:
  %% trycatch_SUITE.erl:298
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _42 = put_tuple `error`, _6, _9
  br ^72

72:
  _40 = phi { _41, ^74 }, { _42, ^75 }, { _43, ^76 }
  br ^59

59:
  _34 = phi { _38, ^65 }, { _40, ^72 }

  %% Unique:
  %%    _56
  _86 = kill_try_tag _56

  %% trycatch_SUITE.erl:298
  %% Aliased:
  %%    _1
  _45 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _45
  _81 = succeeded:body _45
  br _81, ^90, ^1

90:
  %% trycatch_SUITE.erl:298
  _19 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _19
  _87 = succeeded:body _19
  br _87, ^87, ^1

87:
  %% Argument types:
  %%    _34 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _19, 
  %%    _34
  _48 = put_tuple _34, _19
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _48
  ret _48

53:
  %% Unique:
  %%    _56
  _84 = landingpad `'try'`, _56

  %% Aliased:
  %%    _84
  _15 = extract _84, `1`

  %% Aliased:
  %%    _84
  _14 = extract _84, `2`

  %% Unique:
  %%    _56
  _85 = kill_try_tag _56
  br ^89

89:
  %% trycatch_SUITE.erl:298
  %% Aliased:
  %%    _1
  _46 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _46
  _82 = succeeded:body _46
  br _82, ^82, ^1

82:
  %% Aliased:
  %%    _14, 
  %%    _15
  _47 = resume _14, _15

  %% Unique:
  %%    _47
  _83 = succeeded:body _47
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% trycatch_SUITE.erl:300
%% Counter = 152
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_letrec`(_0, _1) {
0:
  %% trycatch_SUITE.erl:301
  List = call (`lists`:`duplicate`/2), `100`, `ok`

  %% Aliased:
  %%    List
  _75 = succeeded:body List
  br _75, ^75, ^1

75:
  %% trycatch_SUITE.erl:302
  _50 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _50
  _76 = succeeded:body _50
  br _76, ^148, ^1

148:
  br ^150

150:
  _81 = new_try_tag `'try'`
  br _81, ^149, ^78

149:
  br ^151

151:
  _86 = new_try_tag `'try'`
  br _86, ^85, ^83

85:
  %% trycatch_SUITE.erl:302
  %% Aliased:
  %%    _0
  _54 = call (`foo`/1), _0

  %% Aliased:
  %%    _54
  _87 = succeeded:body _54
  br _87, ^87, ^83

87:
  %% Unique:
  %%    _86
  _105 = kill_try_tag _86

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _93 = is_tagged_tuple _54, `2`, `ok`
  br _93, ^90, ^89

90:
  %% Argument types:
  %%    _54 => {'ok', any()}
  %% Aliased:
  %%    _54
  _33 = get_tuple_element _54, `1`

  %% trycatch_SUITE.erl:302
  %% Argument types:
  %%    
  _4 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4, 
  %%    _33
  _56 = put_tuple `ok`, _33, _4
  br ^84

89:
  %% trycatch_SUITE.erl:302
  %% Aliased:
  %%    _54
  _57 = match_fail `try_clause`, _54

  %% Unique:
  %%    _57
  _96 = succeeded:body _57
  br ^78

83:
  %% Unique:
  %%    _86
  _103 = landingpad `'try'`, _86

  %% Aliased:
  %%    _103
  _8 = extract _103, `0`

  %% Aliased:
  %%    _103
  _7 = extract _103, `1`

  %% Unique:
  %%    _86
  _104 = kill_try_tag _86
  %% Argument types:
  %%    
  switch _8, ^100, [
    { `exit`, ^101 },
    { `throw`, ^99 }
  ]

99:
  %% trycatch_SUITE.erl:302
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7, 
  %%    _9
  _59 = put_tuple `throw`, _7, _9
  br ^97

101:
  %% trycatch_SUITE.erl:302
  %% Argument types:
  %%    
  _11 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7, 
  %%    _11
  _61 = put_tuple `exit`, _7, _11
  br ^97

100:
  %% trycatch_SUITE.erl:302
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7, 
  %%    _10
  _60 = put_tuple `error`, _7, _10
  br ^97

97:
  _58 = phi { _59, ^99 }, { _60, ^100 }, { _61, ^101 }
  br ^84

84:
  _52 = phi { _56, ^90 }, { _58, ^97 }

  %% Unique:
  %%    _81
  _113 = kill_try_tag _81

  %% trycatch_SUITE.erl:302
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    List
  _65 = call (`'-try_after_letrec/2-lc$^0/1-0-'`/1), List

  %% Unique:
  %%    _65
  _106 = succeeded:body _65
  br _106, ^106, ^1

106:
  %% trycatch_SUITE.erl:302
  %% Aliased:
  %%    _1
  _66 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _66
  _107 = succeeded:body _66
  br _107, ^117, ^1

117:
  %% trycatch_SUITE.erl:302
  _24 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _24
  _114 = succeeded:body _24
  br _114, ^114, ^1

114:
  %% Argument types:
  %%    _52 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _24, 
  %%    _52
  _72 = put_tuple _52, _24
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _72
  ret _72

78:
  %% Unique:
  %%    _81
  _111 = landingpad `'try'`, _81

  %% Aliased:
  %%    _111
  _20 = extract _111, `1`

  %% Aliased:
  %%    _111
  _19 = extract _111, `2`

  %% Unique:
  %%    _81
  _112 = kill_try_tag _81
  br ^116

116:
  %% trycatch_SUITE.erl:302
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    List
  _69 = call (`'-try_after_letrec/2-lc$^0/1-1-'`/1), List

  %% Unique:
  %%    _69
  _108 = succeeded:body _69
  br _108, ^108, ^1

108:
  %% trycatch_SUITE.erl:302
  %% Aliased:
  %%    _1
  _70 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _70
  _109 = succeeded:body _70
  br _109, ^109, ^1

109:
  %% Aliased:
  %%    _19, 
  %%    _20
  _71 = resume _19, _20

  %% Unique:
  %%    _71
  _110 = succeeded:body _71
  br ^1

1:
  _73 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _73
}

%% trycatch_SUITE.erl:304
%% Counter = 145
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_protect`(_0, _1) {
0:
  %% trycatch_SUITE.erl:305
  _42 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _42
  _61 = succeeded:body _42
  br _61, ^141, ^1

141:
  br ^143

143:
  _66 = new_try_tag `'try'`
  br _66, ^142, ^63

142:
  br ^144

144:
  _71 = new_try_tag `'try'`
  br _71, ^70, ^68

70:
  %% trycatch_SUITE.erl:305
  %% Aliased:
  %%    _0
  _46 = call (`foo`/1), _0

  %% Aliased:
  %%    _46
  _72 = succeeded:body _46
  br _72, ^72, ^68

72:
  %% Unique:
  %%    _71
  _90 = kill_try_tag _71

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _78 = is_tagged_tuple _46, `2`, `ok`
  br _78, ^75, ^74

75:
  %% Argument types:
  %%    _46 => {'ok', any()}
  %% Aliased:
  %%    _46
  _31 = get_tuple_element _46, `1`

  %% trycatch_SUITE.erl:305
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _31
  _48 = put_tuple `ok`, _31, _3
  br ^69

74:
  %% trycatch_SUITE.erl:305
  %% Aliased:
  %%    _46
  _49 = match_fail `try_clause`, _46

  %% Unique:
  %%    _49
  _81 = succeeded:body _49
  br ^63

68:
  %% Unique:
  %%    _71
  _88 = landingpad `'try'`, _71

  %% Aliased:
  %%    _88
  _7 = extract _88, `0`

  %% Aliased:
  %%    _88
  _6 = extract _88, `1`

  %% Unique:
  %%    _71
  _89 = kill_try_tag _71
  %% Argument types:
  %%    
  switch _7, ^85, [
    { `exit`, ^86 },
    { `throw`, ^84 }
  ]

84:
  %% trycatch_SUITE.erl:305
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _51 = put_tuple `throw`, _6, _8
  br ^82

86:
  %% trycatch_SUITE.erl:305
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _53 = put_tuple `exit`, _6, _10
  br ^82

85:
  %% trycatch_SUITE.erl:305
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _52 = put_tuple `error`, _6, _9
  br ^82

82:
  _50 = phi { _51, ^84 }, { _52, ^85 }, { _53, ^86 }
  br ^69

69:
  _44 = phi { _48, ^75 }, { _50, ^82 }

  %% Unique:
  %%    _66
  _106 = kill_try_tag _66

  %% trycatch_SUITE.erl:308
  %% Aliased:
  %%    _1
  _55 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _55
  _96 = succeeded:body _55
  br _96, ^110, ^1

110:
  %% trycatch_SUITE.erl:308
  _20 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _20
  _107 = succeeded:body _20
  br _107, ^107, ^1

107:
  %% Argument types:
  %%    _44 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _20, 
  %%    _44
  _58 = put_tuple _44, _20
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _58
  ret _58

63:
  %% Unique:
  %%    _66
  _104 = landingpad `'try'`, _66

  %% Aliased:
  %%    _104
  _16 = extract _104, `1`

  %% Aliased:
  %%    _104
  _15 = extract _104, `2`

  %% Unique:
  %%    _66
  _105 = kill_try_tag _66
  br ^97

97:
  %% trycatch_SUITE.erl:308
  %% Aliased:
  %%    _1
  _56 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _56
  _102 = succeeded:body _56
  br _102, ^102, ^1

102:
  %% Aliased:
  %%    _15, 
  %%    _16
  _57 = resume _15, _16

  %% Unique:
  %%    _57
  _103 = succeeded:body _57
  br ^1

1:
  _59 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _59
}

%% trycatch_SUITE.erl:310
%% Counter = 176
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_receive`(_0, _1) {
0:
  %% trycatch_SUITE.erl:311
  _133 = recv_marker_reserve

  %% trycatch_SUITE.erl:311
  Ref = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:312
  %% Argument types:
  %%    
  _3 = bif:self

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _133
  _134 = recv_marker_bind _133, Ref

  %% trycatch_SUITE.erl:312
  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _3
  _44 = call (`erlang`:`'!'`/2), _3, Ref

  %% Aliased:
  %%    _44
  _69 = succeeded:body _44
  br _69, ^69, ^1

69:
  %% trycatch_SUITE.erl:313
  _45 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _45
  _70 = succeeded:body _45
  br _70, ^172, ^1

172:
  br ^174

174:
  _75 = new_try_tag `'try'`
  br _75, ^173, ^72

173:
  br ^175

175:
  _80 = new_try_tag `'try'`
  br _80, ^79, ^77

79:
  %% trycatch_SUITE.erl:313
  %% Aliased:
  %%    _0
  _49 = call (`foo`/1), _0

  %% Aliased:
  %%    _49
  _81 = succeeded:body _49
  br _81, ^81, ^77

81:
  %% Unique:
  %%    _80
  _99 = kill_try_tag _80

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _87 = is_tagged_tuple _49, `2`, `ok`
  br _87, ^84, ^83

84:
  %% Argument types:
  %%    _49 => {'ok', any()}
  %% Aliased:
  %%    _49
  _37 = get_tuple_element _49, `1`

  %% trycatch_SUITE.erl:313
  %% Argument types:
  %%    
  _5 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _37
  _51 = put_tuple `ok`, _37, _5
  br ^78

83:
  %% trycatch_SUITE.erl:313
  %% Aliased:
  %%    _49
  _52 = match_fail `try_clause`, _49

  %% Unique:
  %%    _52
  _90 = succeeded:body _52
  br ^72

77:
  %% Unique:
  %%    _80
  _97 = landingpad `'try'`, _80

  %% Aliased:
  %%    _97
  _9 = extract _97, `0`

  %% Aliased:
  %%    _97
  _8 = extract _97, `1`

  %% Unique:
  %%    _80
  _98 = kill_try_tag _80
  %% Argument types:
  %%    
  switch _9, ^94, [
    { `exit`, ^95 },
    { `throw`, ^93 }
  ]

93:
  %% trycatch_SUITE.erl:313
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _10
  _54 = put_tuple `throw`, _8, _10
  br ^91

95:
  %% trycatch_SUITE.erl:313
  %% Argument types:
  %%    
  _12 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _12
  _56 = put_tuple `exit`, _8, _12
  br ^91

94:
  %% trycatch_SUITE.erl:313
  %% Argument types:
  %%    
  _11 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _11
  _55 = put_tuple `error`, _8, _11
  br ^91

91:
  _53 = phi { _54, ^93 }, { _55, ^94 }, { _56, ^95 }
  br ^78

78:
  _47 = phi { _51, ^84 }, { _53, ^91 }

  %% Unique:
  %%    _75
  _131 = kill_try_tag _75
  br ^41

41:
  %% trycatch_SUITE.erl:313
  %% Aliased:
  %%    Ref
  _28 = peek_message Ref

  %% Aliased:
  %%    _28
  _112 = succeeded:guard _28
  br _112, ^110, ^111

110:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _28
  %% Unique:
  %%    Ref
  _104 = bif:'=:=' _28, Ref
  br _104, ^138, ^103

138:
  %% Aliased:
  %%    Ref
  _135 = recv_marker_clear Ref
  _58 = remove_message

  %% trycatch_SUITE.erl:315
  %% Aliased:
  %%    _1
  _60 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _60
  _113 = succeeded:body _60
  br _113, ^141, ^1

141:
  %% trycatch_SUITE.erl:315
  _20 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _20
  _132 = succeeded:body _20
  br _132, ^132, ^1

132:
  %% Argument types:
  %%    _47 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _20, 
  %%    _47
  _65 = put_tuple _47, _20
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _65
  ret _65

103:
  _59 = recv_next
  br ^41

111:
  _105 = wait_timeout `infinity`

  %% Unique:
  %%    _105
  _106 = succeeded:body _105
  br _106, ^109, ^1

109:
  br ^41

72:
  %% Unique:
  %%    _75
  _129 = landingpad `'try'`, _75

  %% Aliased:
  %%    _129
  _16 = extract _129, `1`

  %% Aliased:
  %%    _129
  _15 = extract _129, `2`

  %% Unique:
  %%    _75
  _130 = kill_try_tag _75
  br ^42

42:
  %% trycatch_SUITE.erl:313
  _31 = peek_message `none`

  %% Aliased:
  %%    _31
  _126 = succeeded:guard _31
  br _126, ^124, ^125

124:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _31
  %% Unique:
  %%    Ref
  _118 = bif:'=:=' _31, Ref
  br _118, ^118, ^117

118:
  _61 = remove_message

  %% trycatch_SUITE.erl:315
  %% Aliased:
  %%    _1
  _63 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _63
  _127 = succeeded:body _63
  br _127, ^127, ^1

127:
  %% Aliased:
  %%    _15, 
  %%    _16
  _64 = resume _15, _16

  %% Unique:
  %%    _64
  _128 = succeeded:body _64
  br ^1

117:
  _62 = recv_next
  br ^42

125:
  _119 = wait_timeout `infinity`

  %% Unique:
  %%    _119
  _120 = succeeded:body _119
  br _120, ^123, ^1

123:
  br ^42

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66
}

%% trycatch_SUITE.erl:317
%% Counter = 176
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_receive_timeout`(_0, _1) {
0:
  %% trycatch_SUITE.erl:318
  _133 = recv_marker_reserve

  %% trycatch_SUITE.erl:318
  Ref = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:319
  %% Argument types:
  %%    
  _3 = bif:self

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _133
  _134 = recv_marker_bind _133, Ref

  %% trycatch_SUITE.erl:319
  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _3
  _44 = call (`erlang`:`'!'`/2), _3, Ref

  %% Aliased:
  %%    _44
  _69 = succeeded:body _44
  br _69, ^69, ^1

69:
  %% trycatch_SUITE.erl:320
  _45 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _45
  _70 = succeeded:body _45
  br _70, ^172, ^1

172:
  br ^174

174:
  _75 = new_try_tag `'try'`
  br _75, ^173, ^72

173:
  br ^175

175:
  _80 = new_try_tag `'try'`
  br _80, ^79, ^77

79:
  %% trycatch_SUITE.erl:320
  %% Aliased:
  %%    _0
  _49 = call (`foo`/1), _0

  %% Aliased:
  %%    _49
  _81 = succeeded:body _49
  br _81, ^81, ^77

81:
  %% Unique:
  %%    _80
  _99 = kill_try_tag _80

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _87 = is_tagged_tuple _49, `2`, `ok`
  br _87, ^84, ^83

84:
  %% Argument types:
  %%    _49 => {'ok', any()}
  %% Aliased:
  %%    _49
  _37 = get_tuple_element _49, `1`

  %% trycatch_SUITE.erl:320
  %% Argument types:
  %%    
  _5 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _37
  _51 = put_tuple `ok`, _37, _5
  br ^78

83:
  %% trycatch_SUITE.erl:320
  %% Aliased:
  %%    _49
  _52 = match_fail `try_clause`, _49

  %% Unique:
  %%    _52
  _90 = succeeded:body _52
  br ^72

77:
  %% Unique:
  %%    _80
  _97 = landingpad `'try'`, _80

  %% Aliased:
  %%    _97
  _9 = extract _97, `0`

  %% Aliased:
  %%    _97
  _8 = extract _97, `1`

  %% Unique:
  %%    _80
  _98 = kill_try_tag _80
  %% Argument types:
  %%    
  switch _9, ^94, [
    { `exit`, ^95 },
    { `throw`, ^93 }
  ]

93:
  %% trycatch_SUITE.erl:320
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _10
  _54 = put_tuple `throw`, _8, _10
  br ^91

95:
  %% trycatch_SUITE.erl:320
  %% Argument types:
  %%    
  _12 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _12
  _56 = put_tuple `exit`, _8, _12
  br ^91

94:
  %% trycatch_SUITE.erl:320
  %% Argument types:
  %%    
  _11 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _11
  _55 = put_tuple `error`, _8, _11
  br ^91

91:
  _53 = phi { _54, ^93 }, { _55, ^94 }, { _56, ^95 }
  br ^78

78:
  _47 = phi { _51, ^84 }, { _53, ^91 }

  %% Unique:
  %%    _75
  _131 = kill_try_tag _75
  br ^41

41:
  %% trycatch_SUITE.erl:320
  %% Aliased:
  %%    Ref
  _28 = peek_message Ref

  %% Aliased:
  %%    _28
  _112 = succeeded:guard _28
  br _112, ^111, ^110

111:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _28
  %% Unique:
  %%    Ref
  _109 = bif:'=:=' _28, Ref
  br _109, ^138, ^108

138:
  %% Aliased:
  %%    Ref
  _135 = recv_marker_clear Ref
  _58 = remove_message
  br ^101

108:
  _59 = recv_next
  br ^41

110:
  _102 = wait_timeout `1000`

  %% Unique:
  %%    _102
  _103 = succeeded:body _102
  br _103, ^103, ^1

103:
  br _102, ^137, ^106

137:
  %% Aliased:
  %%    Ref
  _136 = recv_marker_clear Ref
  br ^101

101:
  %% trycatch_SUITE.erl:323
  %% Aliased:
  %%    _1
  _60 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _60
  _113 = succeeded:body _60
  br _113, ^141, ^1

141:
  %% trycatch_SUITE.erl:323
  _20 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _20
  _132 = succeeded:body _20
  br _132, ^132, ^1

132:
  %% Argument types:
  %%    _47 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _20, 
  %%    _47
  _65 = put_tuple _47, _20
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _65
  ret _65

106:
  br ^41

72:
  %% Unique:
  %%    _75
  _129 = landingpad `'try'`, _75

  %% Aliased:
  %%    _129
  _16 = extract _129, `1`

  %% Aliased:
  %%    _129
  _15 = extract _129, `2`

  %% Unique:
  %%    _75
  _130 = kill_try_tag _75
  br ^42

42:
  %% trycatch_SUITE.erl:320
  _31 = peek_message `none`

  %% Aliased:
  %%    _31
  _126 = succeeded:guard _31
  br _126, ^125, ^124

125:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _31
  %% Unique:
  %%    Ref
  _123 = bif:'=:=' _31, Ref
  br _123, ^123, ^122

123:
  _61 = remove_message
  br ^115

122:
  _62 = recv_next
  br ^42

124:
  _116 = wait_timeout `1000`

  %% Unique:
  %%    _116
  _117 = succeeded:body _116
  br _117, ^117, ^1

117:
  br _116, ^115, ^120

115:
  %% trycatch_SUITE.erl:323
  %% Aliased:
  %%    _1
  _63 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _63
  _127 = succeeded:body _63
  br _127, ^127, ^1

127:
  %% Aliased:
  %%    _15, 
  %%    _16
  _64 = resume _15, _16

  %% Unique:
  %%    _64
  _128 = succeeded:body _64
  br ^1

120:
  br ^42

1:
  _66 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _66
}

%% trycatch_SUITE.erl:325
%% Counter = 177
%% bs_ensure_opt: true
function `trycatch_SUITE`:`try_after_try`(_0, _1) {
0:
  %% trycatch_SUITE.erl:326
  _52 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _52
  _77 = succeeded:body _52
  br _77, ^173, ^1

173:
  br ^175

175:
  _82 = new_try_tag `'try'`
  br _82, ^174, ^79

174:
  br ^176

176:
  _87 = new_try_tag `'try'`
  br _87, ^86, ^84

86:
  %% trycatch_SUITE.erl:326
  %% Aliased:
  %%    _0
  _56 = call (`foo`/1), _0

  %% Aliased:
  %%    _56
  _88 = succeeded:body _56
  br _88, ^88, ^84

88:
  %% Unique:
  %%    _87
  _106 = kill_try_tag _87

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _94 = is_tagged_tuple _56, `2`, `ok`
  br _94, ^91, ^90

91:
  %% Argument types:
  %%    _56 => {'ok', any()}
  %% Aliased:
  %%    _56
  _44 = get_tuple_element _56, `1`

  %% trycatch_SUITE.erl:326
  %% Argument types:
  %%    
  _3 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _44
  _58 = put_tuple `ok`, _44, _3
  br ^85

90:
  %% trycatch_SUITE.erl:326
  %% Aliased:
  %%    _56
  _59 = match_fail `try_clause`, _56

  %% Unique:
  %%    _59
  _97 = succeeded:body _59
  br ^79

84:
  %% Unique:
  %%    _87
  _104 = landingpad `'try'`, _87

  %% Aliased:
  %%    _104
  _7 = extract _104, `0`

  %% Aliased:
  %%    _104
  _6 = extract _104, `1`

  %% Unique:
  %%    _87
  _105 = kill_try_tag _87
  %% Argument types:
  %%    
  switch _7, ^101, [
    { `exit`, ^102 },
    { `throw`, ^100 }
  ]

100:
  %% trycatch_SUITE.erl:326
  %% Argument types:
  %%    
  _8 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _8
  _61 = put_tuple `throw`, _6, _8
  br ^98

102:
  %% trycatch_SUITE.erl:326
  %% Argument types:
  %%    
  _10 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _10
  _63 = put_tuple `exit`, _6, _10
  br ^98

101:
  %% trycatch_SUITE.erl:326
  %% Argument types:
  %%    
  _9 = bif:get `try_after`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    _9
  _62 = put_tuple `error`, _6, _9
  br ^98

98:
  _60 = phi { _61, ^100 }, { _62, ^101 }, { _63, ^102 }
  br ^85

85:
  _54 = phi { _58, ^91 }, { _60, ^98 }

  %% Unique:
  %%    _82
  _140 = kill_try_tag _82
  _111 = new_try_tag `'try'`
  br _111, ^110, ^108

110:
  %% trycatch_SUITE.erl:327
  %% Aliased:
  %%    _1
  _66 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _66
  _112 = succeeded:body _66
  br _112, ^112, ^108

112:
  %% Unique:
  %%    _111
  _120 = kill_try_tag _111
  br ^109

108:
  %% Unique:
  %%    _111
  _118 = landingpad `'try'`, _111

  %% Aliased:
  %%    _118
  _14 = extract _118, `0`

  %% Aliased:
  %%    _118
  _13 = extract _118, `1`

  %% Aliased:
  %%    _118
  _12 = extract _118, `2`

  %% Unique:
  %%    _111
  _119 = kill_try_tag _111

  %% Argument types:
  %%    _14 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _14
  _116 = bif:'=:=' _14, `throw`
  br _116, ^109, ^114

109:
  %% trycatch_SUITE.erl:330
  %% Aliased:
  %%    _1
  _68 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _68
  _121 = succeeded:body _68
  br _121, ^142, ^1

142:
  %% trycatch_SUITE.erl:330
  _22 = call (`erlang`:`erase`/1), `try_after`

  %% Aliased:
  %%    _22
  _141 = succeeded:body _22
  br _141, ^141, ^1

141:
  %% Argument types:
  %%    _54 => {'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}
  %% Aliased:
  %%    _22, 
  %%    _54
  _74 = put_tuple _54, _22
  %% Result type:
  %%    {{'error', any(), any()} | {'exit', any(), any()} | {'ok', any(), any()} | {'throw', any(), any()}, any()}
  %% Unique:
  %%    _74
  ret _74

114:
  %% Aliased:
  %%    _12, 
  %%    _13
  _67 = resume _12, _13

  %% Unique:
  %%    _67
  _117 = succeeded:body _67
  br ^1

79:
  %% Unique:
  %%    _82
  _138 = landingpad `'try'`, _82

  %% Aliased:
  %%    _138
  _18 = extract _138, `1`

  %% Aliased:
  %%    _138
  _17 = extract _138, `2`

  %% Unique:
  %%    _82
  _139 = kill_try_tag _82
  _126 = new_try_tag `'try'`
  br _126, ^125, ^123

125:
  %% trycatch_SUITE.erl:327
  %% Aliased:
  %%    _1
  _70 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _70
  _127 = succeeded:body _70
  br _127, ^127, ^123

127:
  %% Unique:
  %%    _126
  _135 = kill_try_tag _126
  br ^124

123:
  %% Unique:
  %%    _126
  _133 = landingpad `'try'`, _126

  %% Aliased:
  %%    _133
  _51 = extract _133, `0`

  %% Aliased:
  %%    _133
  _50 = extract _133, `1`

  %% Aliased:
  %%    _133
  _49 = extract _133, `2`

  %% Unique:
  %%    _126
  _134 = kill_try_tag _126

  %% Argument types:
  %%    _51 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _51
  _131 = bif:'=:=' _51, `throw`
  br _131, ^124, ^129

124:
  %% trycatch_SUITE.erl:330
  %% Aliased:
  %%    _1
  _72 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _72
  _136 = succeeded:body _72
  br _136, ^136, ^1

136:
  %% Aliased:
  %%    _17, 
  %%    _18
  _73 = resume _17, _18

  %% Unique:
  %%    _73
  _137 = succeeded:body _73
  br ^1

129:
  %% Aliased:
  %%    _49, 
  %%    _50
  _71 = resume _49, _50

  %% Unique:
  %%    _71
  _132 = succeeded:body _71
  br ^1

1:
  _75 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _75
}

%% trycatch_SUITE.erl:332
%% Counter = 91
%% bs_ensure_opt: true
function `trycatch_SUITE`:`catch_oops`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _38 = bif:is_list _0
  br _38, ^38, ^37

38:
  %% trycatch_SUITE.erl:333
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  V = put_tuple `v`, `[a,l|u]`, `{e}`, _1

  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    V
  _13 = put_tuple `value`, V

  %% trycatch_SUITE.erl:334
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  %% Unique:
  %%    _13
  _14 = call (`catch_oops_1`/1), _13

  %% Aliased:
  %%    _14
  _39 = succeeded:body _14
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _14 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _14
  _83 = is_tagged_tuple _14, `2`, `value`
  br _83, ^80, ^41

80:
  %% Argument types:
  %%    _14 => {'value', any()}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    _15, 
  %%    V
  _42 = bif:'=:=' _15, V
  br _42, ^42, ^41

42:
  %% trycatch_SUITE.erl:335
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  _17 = call (`catch_oops_1`/1), `{'div',{1,1}}`

  %% Aliased:
  %%    _17
  _43 = succeeded:body _17
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _17 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _17
  _78 = bif:'=:=' _17, `{value,1}`
  br _78, ^78, ^45

78:
  %% trycatch_SUITE.erl:336
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  _18 = call (`catch_oops_1`/1), `{'div',{1,0}}`

  %% Aliased:
  %%    _18
  _46 = succeeded:body _18
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    _18 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _18
  _76 = bif:'=:=' _18, `{error,badarith}`
  br _76, ^76, ^48

76:
  %% trycatch_SUITE.erl:337
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  _19 = call (`catch_oops_1`/1), `function_clause`

  %% Aliased:
  %%    _19
  _49 = succeeded:body _19
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _19 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _19
  _74 = bif:'=:=' _19, `{error,function_clause}`
  br _74, ^74, ^51

74:
  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    V
  _20 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:338
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  %% Unique:
  %%    _20
  _21 = call (`catch_oops_1`/1), _20

  %% Aliased:
  %%    _21
  _52 = succeeded:body _21
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    _21 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _21
  _70 = is_tagged_tuple _21, `2`, `throw`
  br _70, ^67, ^54

67:
  %% Argument types:
  %%    _21 => {'throw', any()}
  %% Aliased:
  %%    _21
  _22 = get_tuple_element _21, `1`

  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    _22, 
  %%    V
  _55 = bif:'=:=' _22, V
  br _55, ^55, ^54

55:
  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    V
  _24 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:339
  %% Result type:
  %%    {'error' | 'exit' | 'throw' | 'value', any()}
  %% Unique:
  %%    _24
  _25 = call (`catch_oops_1`/1), _24

  %% Aliased:
  %%    _25
  _56 = succeeded:body _25
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    _25 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _25
  _63 = is_tagged_tuple _25, `2`, `exit`
  br _63, ^60, ^58

60:
  %% Argument types:
  %%    _25 => {'exit', any()}
  %% Aliased:
  %%    _25
  _26 = get_tuple_element _25, `1`

  %% Argument types:
  %%    V => {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}
  %% Aliased:
  %%    _26, 
  %%    V
  _59 = bif:'=:=' _26, V
  br _59, ^59, ^58

59:
  %% Result type:
  %%    'ok'
  ret `ok`

58:
  %% trycatch_SUITE.erl:339
  %% Aliased:
  %%    _25
  _28 = match_fail `badmatch`, _25

  %% Unique:
  %%    _28
  _66 = succeeded:body _28
  br ^1

54:
  %% trycatch_SUITE.erl:338
  %% Aliased:
  %%    _21
  _29 = match_fail `badmatch`, _21

  %% Unique:
  %%    _29
  _73 = succeeded:body _29
  br ^1

51:
  %% trycatch_SUITE.erl:337
  %% Aliased:
  %%    _19
  _30 = match_fail `badmatch`, _19

  %% Unique:
  %%    _30
  _75 = succeeded:body _30
  br ^1

48:
  %% trycatch_SUITE.erl:336
  %% Aliased:
  %%    _18
  _31 = match_fail `badmatch`, _18

  %% Unique:
  %%    _31
  _77 = succeeded:body _31
  br ^1

45:
  %% trycatch_SUITE.erl:335
  %% Aliased:
  %%    _17
  _32 = match_fail `badmatch`, _17

  %% Unique:
  %%    _32
  _79 = succeeded:body _32
  br ^1

41:
  %% trycatch_SUITE.erl:334
  %% Aliased:
  %%    _14
  _33 = match_fail `badmatch`, _14

  %% Unique:
  %%    _33
  _86 = succeeded:body _33
  br ^1

37:
  %% trycatch_SUITE.erl:332
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-catch_oops/1-',1}}
  _34 = match_fail `function_clause`, _0

  %% Unique:
  %%    _34
  _87 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% trycatch_SUITE.erl:342
%% Counter = 89
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'function_clause' | {''div'', {1, 0..1}} | {'exit', {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}} | {'throw', {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}} | {'value', {'v', nonempty_improper_list('a' | 'l', 'u'), {'e'}, pid()}}
function `trycatch_SUITE`:`catch_oops_1`(_0) {
0:
  %% trycatch_SUITE.erl:343
  Ref = call (`erlang`:`make_ref`/0)

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _18 = put_tuple `error`, Ref
  _35 = new_try_tag `'try'`
  br _35, ^87, ^32

87:
  br ^88

88:
  _40 = new_try_tag `'try'`
  br _40, ^55, ^37

55:
  %% trycatch_SUITE.erl:344
  %% Unique:
  %%    _18
  _22 = call (`foo`/1), _18

  %% Aliased:
  %%    _22
  _41 = succeeded:body _22
  br _41, ^41, ^37

41:
  %% Unique:
  %%    _40
  _51 = kill_try_tag _40
  br ^38

37:
  %% Unique:
  %%    _40
  _49 = landingpad `'try'`, _40

  %% Aliased:
  %%    _49
  _5 = extract _49, `0`

  %% Aliased:
  %%    _49
  _4 = extract _49, `1`

  %% Aliased:
  %%    _49
  _3 = extract _49, `2`

  %% Unique:
  %%    _40
  _50 = kill_try_tag _40

  %% Argument types:
  %%    _5 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _5
  _47 = bif:'=:=' _5, `error`
  br _47, ^46, ^43

46:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _4
  %% Unique:
  %%    Ref
  _44 = bif:'=:=' _4, Ref
  br _44, ^44, ^43

44:
  %% trycatch_SUITE.erl:347
  %% Unique:
  %%    _0
  _24 = call (`foo`/1), _0

  %% Aliased:
  %%    _24
  _45 = succeeded:body _24
  br _45, ^45, ^32

45:
  br ^38

38:
  _20 = phi { _22, ^41 }, { _24, ^45 }

  %% Unique:
  %%    _35
  _54 = kill_try_tag _35

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _26 = put_tuple `value`, _20
  %% Result type:
  %%    {'value', any()}
  %% Unique:
  %%    _26
  ret _26

43:
  %% Aliased:
  %%    _3, 
  %%    _4
  _25 = resume _3, _4

  %% Unique:
  %%    _25
  _48 = succeeded:body _25
  br ^32

32:
  %% Unique:
  %%    _35
  _52 = landingpad `'try'`, _35

  %% Aliased:
  %%    _52
  _10 = extract _52, `0`

  %% Aliased:
  %%    _52
  _9 = extract _52, `1`

  %% Unique:
  %%    _35
  _53 = kill_try_tag _35

  %% Argument types:
  %%    _10 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _10
  _27 = put_tuple _10, _9
  %% Result type:
  %%    {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _27
  ret _27
}

%% trycatch_SUITE.erl:356
%% Counter = 229
%% bs_ensure_opt: true
function `trycatch_SUITE`:`after_oops`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _93 = bif:is_list _0
  br _93, ^93, ^92

93:
  %% trycatch_SUITE.erl:357
  %% Argument types:
  %%    
  _2 = bif:self

  %% trycatch_SUITE.erl:357
  _1 = call (`erlang`:`make_ref`/0)

  %% Argument types:
  %%    _2 => pid()
  %%    _1 => reference()
  %% Unique:
  %%    _1, 
  %%    _2
  V = put_tuple _2, _1

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _32 = put_tuple `value`, V

  %% trycatch_SUITE.erl:359
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _32
  _33 = call (`after_oops_1`/2), _32, _32

  %% Aliased:
  %%    _33
  _95 = succeeded:body _33
  br _95, ^198, ^1

198:
  %% Argument types:
  %%    _33 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _33
  _35 = get_tuple_element _33, `0`

  %% Argument types:
  %%    _35 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _35
  _195 = is_tagged_tuple _35, `2`, `value`
  br _195, ^192, ^97

192:
  %% Argument types:
  %%    _35 => {'value', any()}
  %% Aliased:
  %%    _35
  _36 = get_tuple_element _35, `1`

  %% trycatch_SUITE.erl:359
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _36, 
  %%    V
  _15 = bif:'=:=' _36, V
  br _15, ^218, ^97

218:
  %% Argument types:
  %%    _33 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _33
  _34 = get_tuple_element _33, `1`

  %% trycatch_SUITE.erl:359
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _34, 
  %%    V
  _16 = bif:'=:=' _34, V
  br _16, ^99, ^97

99:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _40 = put_tuple `exit`, V

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _39 = put_tuple `value`, V

  %% trycatch_SUITE.erl:360
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _39, 
  %%    _40
  _41 = call (`after_oops_1`/2), _40, _39

  %% Aliased:
  %%    _41
  _100 = succeeded:body _41
  br _100, ^187, ^1

187:
  %% Argument types:
  %%    _41 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _41
  _43 = get_tuple_element _41, `0`

  %% Argument types:
  %%    _43 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _43
  _184 = is_tagged_tuple _43, `2`, `exit`
  br _184, ^181, ^102

181:
  %% Argument types:
  %%    _43 => {'exit', any()}
  %% Aliased:
  %%    _43
  _44 = get_tuple_element _43, `1`

  %% trycatch_SUITE.erl:360
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _44, 
  %%    V
  _19 = bif:'=:=' _44, V
  br _19, ^214, ^102

214:
  %% Argument types:
  %%    _41 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _41
  _42 = get_tuple_element _41, `1`

  %% trycatch_SUITE.erl:360
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _42, 
  %%    V
  _20 = bif:'=:=' _42, V
  br _20, ^104, ^102

104:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _48 = put_tuple `value`, V

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _47 = put_tuple `error`, V

  %% trycatch_SUITE.erl:361
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _47, 
  %%    _48
  _49 = call (`after_oops_1`/2), _48, _47

  %% Aliased:
  %%    _49
  _105 = succeeded:body _49
  br _105, ^176, ^1

176:
  %% Argument types:
  %%    _49 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _49
  _51 = get_tuple_element _49, `0`

  %% Argument types:
  %%    _51 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _51
  _173 = is_tagged_tuple _51, `2`, `error`
  br _173, ^170, ^107

170:
  %% Argument types:
  %%    _49 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _49
  _50 = get_tuple_element _49, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _169 = bif:'=:=' _50, `undefined`
  br _169, ^168, ^107

168:
  %% Argument types:
  %%    _51 => {'error', any()}
  %% Aliased:
  %%    _51
  _52 = get_tuple_element _51, `1`

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _52, 
  %%    V
  _108 = bif:'=:=' _52, V
  br _108, ^108, ^107

108:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _54 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:363
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _54
  _55 = call (`after_oops_1`/2), _54, `function_clause`

  %% Aliased:
  %%    _55
  _109 = succeeded:body _55
  br _109, ^109, ^1

109:
  %% Argument types:
  %%    _55 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _55
  _166 = bif:'=:=' _55, `{{error,function_clause},undefined}`
  br _166, ^166, ^111

166:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _57 = put_tuple `value`, V

  %% trycatch_SUITE.erl:365
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _57
  _58 = call (`after_oops_2`/2), _57, _57

  %% Aliased:
  %%    _58
  _112 = succeeded:body _58
  br _112, ^161, ^1

161:
  %% Argument types:
  %%    _58 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _58
  _60 = get_tuple_element _58, `0`

  %% Argument types:
  %%    _60 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _60
  _158 = is_tagged_tuple _60, `2`, `value`
  br _158, ^155, ^114

155:
  %% Argument types:
  %%    _60 => {'value', any()}
  %% Aliased:
  %%    _60
  _61 = get_tuple_element _60, `1`

  %% trycatch_SUITE.erl:365
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _61, 
  %%    V
  _24 = bif:'=:=' _61, V
  br _24, ^210, ^114

210:
  %% Argument types:
  %%    _58 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _58
  _59 = get_tuple_element _58, `1`

  %% trycatch_SUITE.erl:365
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _59, 
  %%    V
  _25 = bif:'=:=' _59, V
  br _25, ^116, ^114

116:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _65 = put_tuple `exit`, V

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _64 = put_tuple `value`, V

  %% trycatch_SUITE.erl:366
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _64, 
  %%    _65
  _66 = call (`after_oops_2`/2), _65, _64

  %% Aliased:
  %%    _66
  _117 = succeeded:body _66
  br _117, ^150, ^1

150:
  %% Argument types:
  %%    _66 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _66
  _68 = get_tuple_element _66, `0`

  %% Argument types:
  %%    _68 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _68
  _147 = is_tagged_tuple _68, `2`, `exit`
  br _147, ^144, ^119

144:
  %% Argument types:
  %%    _68 => {'exit', any()}
  %% Aliased:
  %%    _68
  _69 = get_tuple_element _68, `1`

  %% trycatch_SUITE.erl:366
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _69, 
  %%    V
  _28 = bif:'=:=' _69, V
  br _28, ^206, ^119

206:
  %% Argument types:
  %%    _66 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _66
  _67 = get_tuple_element _66, `1`

  %% trycatch_SUITE.erl:366
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _67, 
  %%    V
  _29 = bif:'=:=' _67, V
  br _29, ^121, ^119

121:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _73 = put_tuple `value`, V

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _72 = put_tuple `error`, V

  %% trycatch_SUITE.erl:367
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _72, 
  %%    _73
  _74 = call (`after_oops_2`/2), _73, _72

  %% Aliased:
  %%    _74
  _122 = succeeded:body _74
  br _122, ^139, ^1

139:
  %% Argument types:
  %%    _74 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _74
  _76 = get_tuple_element _74, `0`

  %% Argument types:
  %%    _76 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _76
  _136 = is_tagged_tuple _76, `2`, `error`
  br _136, ^133, ^124

133:
  %% Argument types:
  %%    _74 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _74
  _75 = get_tuple_element _74, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _132 = bif:'=:=' _75, `undefined`
  br _132, ^131, ^124

131:
  %% Argument types:
  %%    _76 => {'error', any()}
  %% Aliased:
  %%    _76
  _77 = get_tuple_element _76, `1`

  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    _77, 
  %%    V
  _125 = bif:'=:=' _77, V
  br _125, ^125, ^124

125:
  %% Argument types:
  %%    V => {pid(), reference()}
  %% Aliased:
  %%    V
  _79 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:369
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _79
  _80 = call (`after_oops_2`/2), _79, `function_clause`

  %% Aliased:
  %%    _80
  _126 = succeeded:body _80
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    _80 => {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Aliased:
  %%    _80
  _129 = bif:'=:=' _80, `{{error,function_clause},undefined}`
  br _129, ^129, ^128

129:
  %% Result type:
  %%    'ok'
  ret `ok`

128:
  %% trycatch_SUITE.erl:368
  %% Aliased:
  %%    _80
  _81 = match_fail `badmatch`, _80

  %% Unique:
  %%    _81
  _130 = succeeded:body _81
  br ^1

124:
  %% trycatch_SUITE.erl:367
  %% Aliased:
  %%    _74
  _82 = match_fail `badmatch`, _74

  %% Unique:
  %%    _82
  _143 = succeeded:body _82
  br ^1

119:
  %% trycatch_SUITE.erl:366
  %% Aliased:
  %%    _66
  _83 = match_fail `badmatch`, _66

  %% Unique:
  %%    _83
  _154 = succeeded:body _83
  br ^1

114:
  %% trycatch_SUITE.erl:365
  %% Aliased:
  %%    _58
  _84 = match_fail `badmatch`, _58

  %% Unique:
  %%    _84
  _165 = succeeded:body _84
  br ^1

111:
  %% trycatch_SUITE.erl:362
  %% Aliased:
  %%    _55
  _85 = match_fail `badmatch`, _55

  %% Unique:
  %%    _85
  _167 = succeeded:body _85
  br ^1

107:
  %% trycatch_SUITE.erl:361
  %% Aliased:
  %%    _49
  _86 = match_fail `badmatch`, _49

  %% Unique:
  %%    _86
  _180 = succeeded:body _86
  br ^1

102:
  %% trycatch_SUITE.erl:360
  %% Aliased:
  %%    _41
  _87 = match_fail `badmatch`, _41

  %% Unique:
  %%    _87
  _191 = succeeded:body _87
  br ^1

97:
  %% trycatch_SUITE.erl:359
  %% Aliased:
  %%    _33
  _88 = match_fail `badmatch`, _33

  %% Unique:
  %%    _88
  _202 = succeeded:body _88
  br ^1

92:
  %% trycatch_SUITE.erl:356
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-after_oops/1-',1}}
  _89 = match_fail `function_clause`, _0

  %% Unique:
  %%    _89
  _203 = succeeded:body _89
  br ^1

1:
  _90 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _90
}

%% trycatch_SUITE.erl:373
%% Counter = 91
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'exit', {pid(), reference()}} | {'value', {pid(), reference()}}
%%    _1 =>
%%     'function_clause' | {'error', {pid(), reference()}} | {'value', {pid(), reference()}}
function `trycatch_SUITE`:`after_oops_1`(_0, _1) {
0:
  %% trycatch_SUITE.erl:374
  _17 = call (`erlang`:`erase`/1), `after_oops`

  %% Aliased:
  %%    _17
  _30 = succeeded:body _17
  br _30, ^87, ^1

87:
  br ^89

89:
  _35 = new_try_tag `'try'`
  br _35, ^88, ^32

88:
  br ^90

90:
  _40 = new_try_tag `'try'`
  br _40, ^39, ^37

39:
  %% trycatch_SUITE.erl:376
  %% Unique:
  %%    _0
  _21 = call (`foo`/1), _0

  %% Aliased:
  %%    _21
  _41 = succeeded:body _21
  br _41, ^41, ^37

41:
  %% Unique:
  %%    _40
  _49 = kill_try_tag _40

  %% trycatch_SUITE.erl:378
  %% Unique:
  %%    _1
  _2 = call (`foo`/1), _1

  %% Aliased:
  %%    _2
  _42 = succeeded:body _2
  br _42, ^42, ^32

42:
  %% trycatch_SUITE.erl:378
  %% Aliased:
  %%    _2
  _22 = call (`erlang`:`put`/2), `after_oops`, _2

  %% Aliased:
  %%    _22
  _43 = succeeded:body _22
  br _43, ^38, ^32

38:
  %% Unique:
  %%    _35
  _52 = kill_try_tag _35

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _25 = put_tuple `value`, _21
  br ^33

37:
  %% Unique:
  %%    _40
  _47 = landingpad `'try'`, _40

  %% Aliased:
  %%    _47
  _6 = extract _47, `1`

  %% Aliased:
  %%    _47
  _5 = extract _47, `2`

  %% Unique:
  %%    _40
  _48 = kill_try_tag _40
  br ^55

55:
  %% trycatch_SUITE.erl:378
  %% Unique:
  %%    _1
  _16 = call (`foo`/1), _1

  %% Aliased:
  %%    _16
  _44 = succeeded:body _16
  br _44, ^44, ^32

44:
  %% trycatch_SUITE.erl:378
  %% Aliased:
  %%    _16
  _23 = call (`erlang`:`put`/2), `after_oops`, _16

  %% Aliased:
  %%    _23
  _45 = succeeded:body _23
  br _45, ^45, ^32

45:
  %% Aliased:
  %%    _5, 
  %%    _6
  _24 = resume _5, _6

  %% Unique:
  %%    _24
  _46 = succeeded:body _24
  br ^32

32:
  %% Unique:
  %%    _35
  _50 = landingpad `'try'`, _35

  %% Aliased:
  %%    _50
  _12 = extract _50, `0`

  %% Aliased:
  %%    _50
  _11 = extract _50, `1`

  %% Unique:
  %%    _35
  _51 = kill_try_tag _35

  %% Argument types:
  %%    _12 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _11
  %% Unique:
  %%    _12
  _26 = put_tuple _12, _11
  br ^33

33:
  _13 = phi { _25, ^38 }, { _26, ^32 }

  %% trycatch_SUITE.erl:384
  _15 = call (`erlang`:`erase`/1), `after_oops`

  %% Aliased:
  %%    _15
  _53 = succeeded:body _15
  br _53, ^53, ^1

53:
  %% Argument types:
  %%    _13 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _13
  _27 = put_tuple _13, _15
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _27
  ret _27

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% trycatch_SUITE.erl:386
%% Counter = 124
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'exit', {pid(), reference()}} | {'value', {pid(), reference()}}
%%    _1 =>
%%     'function_clause' | {'error', {pid(), reference()}} | {'value', {pid(), reference()}}
function `trycatch_SUITE`:`after_oops_2`(_0, _1) {
0:
  %% trycatch_SUITE.erl:389
  _21 = call (`erlang`:`erase`/1), `after_oops`

  %% Aliased:
  %%    _21
  _37 = succeeded:body _21
  br _37, ^118, ^1

118:
  br ^121

121:
  _42 = new_try_tag `'try'`
  br _42, ^119, ^39

119:
  br ^122

122:
  _47 = new_try_tag `'try'`
  br _47, ^120, ^44

120:
  br ^123

123:
  _52 = new_try_tag `'try'`
  br _52, ^51, ^49

51:
  %% trycatch_SUITE.erl:393
  %% Unique:
  %%    _0
  _27 = call (`foo`/1), _0

  %% Aliased:
  %%    _27
  _53 = succeeded:body _27
  br _53, ^53, ^49

53:
  %% Unique:
  %%    _52
  _57 = kill_try_tag _52

  %% Unique:
  %%    _47
  _65 = kill_try_tag _47

  %% trycatch_SUITE.erl:397
  %% Unique:
  %%    _1
  _6 = call (`foo`/1), _1

  %% Aliased:
  %%    _6
  _58 = succeeded:body _6
  br _58, ^58, ^39

58:
  %% trycatch_SUITE.erl:397
  %% Aliased:
  %%    _6
  _29 = call (`erlang`:`put`/2), `after_oops`, _6

  %% Aliased:
  %%    _29
  _59 = succeeded:body _29
  br _59, ^45, ^39

45:
  %% Unique:
  %%    _42
  _68 = kill_try_tag _42

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _32 = put_tuple `value`, _27
  br ^40

49:
  %% Unique:
  %%    _52
  _55 = landingpad `'try'`, _52

  %% Aliased:
  %%    _55
  _5 = extract _55, `0`

  %% Aliased:
  %%    _55
  _4 = extract _55, `1`

  %% Aliased:
  %%    _55
  _3 = extract _55, `2`

  %% Unique:
  %%    _52
  _56 = kill_try_tag _52

  %% Aliased:
  %%    _3, 
  %%    _4, 
  %%    _5
  _28 = raw_raise _5, _4, _3

  %% Unique:
  %%    _28
  _54 = succeeded:body _28
  br ^44

44:
  %% Unique:
  %%    _47
  _63 = landingpad `'try'`, _47

  %% Aliased:
  %%    _63
  _10 = extract _63, `1`

  %% Aliased:
  %%    _63
  _9 = extract _63, `2`

  %% Unique:
  %%    _47
  _64 = kill_try_tag _47
  br ^71

71:
  %% trycatch_SUITE.erl:397
  %% Unique:
  %%    _1
  _20 = call (`foo`/1), _1

  %% Aliased:
  %%    _20
  _60 = succeeded:body _20
  br _60, ^60, ^39

60:
  %% trycatch_SUITE.erl:397
  %% Aliased:
  %%    _20
  _30 = call (`erlang`:`put`/2), `after_oops`, _20

  %% Aliased:
  %%    _30
  _61 = succeeded:body _30
  br _61, ^61, ^39

61:
  %% Aliased:
  %%    _9, 
  %%    _10
  _31 = resume _9, _10

  %% Unique:
  %%    _31
  _62 = succeeded:body _31
  br ^39

39:
  %% Unique:
  %%    _42
  _66 = landingpad `'try'`, _42

  %% Aliased:
  %%    _66
  _16 = extract _66, `0`

  %% Aliased:
  %%    _66
  _15 = extract _66, `1`

  %% Unique:
  %%    _42
  _67 = kill_try_tag _42

  %% Argument types:
  %%    _16 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _16
  _33 = put_tuple _16, _15
  br ^40

40:
  _17 = phi { _32, ^45 }, { _33, ^39 }

  %% trycatch_SUITE.erl:404
  _19 = call (`erlang`:`erase`/1), `after_oops`

  %% Aliased:
  %%    _19
  _69 = succeeded:body _19
  br _69, ^69, ^1

69:
  %% Argument types:
  %%    _17 => {'error' | 'exit' | 'throw' | 'value', any()}
  %% Aliased:
  %%    _19
  %% Unique:
  %%    _17
  _34 = put_tuple _17, _19
  %% Result type:
  %%    {{'error' | 'exit' | 'throw' | 'value', any()}, any()}
  %% Unique:
  %%    _34
  ret _34

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% trycatch_SUITE.erl:406
%% Counter = 958
%% bs_ensure_opt: true
function `trycatch_SUITE`:`eclectic`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _370 = bif:is_list _0
  br _370, ^370, ^369

370:
  %% trycatch_SUITE.erl:407
  _1 = call (`erlang`:`make_ref`/0)

  %% Argument types:
  %%    _1 => reference()
  %% Unique:
  %%    _1
  V = put_tuple _1, `3.1415926535`, `[[]|{}]`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _96 = put_tuple `value`, V

  %% Argument types:
  %%    _96 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Aliased:
  %%    _96
  _97 = put_tuple `value`, _96

  %% Argument types:
  %%    _97 => {'value', {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}}
  %% Unique:
  %%    _97
  _98 = put_tuple `foo`, _97

  %% trycatch_SUITE.erl:409
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _96
  %% Unique:
  %%    _98
  _99 = call (`eclectic_1`/3), _98, `undefined`, _96

  %% Aliased:
  %%    _99
  _372 = succeeded:body _99
  br _372, ^891, ^1

891:
  %% Argument types:
  %%    _99 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _99
  _101 = get_tuple_element _99, `0`

  %% Argument types:
  %%    _101 => {any(), any(), ...}
  %% Aliased:
  %%    _101
  _888 = is_tagged_tuple _101, `3`, `value`
  br _888, ^885, ^374

885:
  %% Argument types:
  %%    _101 => {'value', any(), any()}
  %% Aliased:
  %%    _101
  _103 = get_tuple_element _101, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _882 = is_tagged_tuple _103, `2`, `value`
  br _882, ^879, ^374

879:
  %% Argument types:
  %%    _103 => {'value', any()}
  %% Aliased:
  %%    _103
  _105 = get_tuple_element _103, `1`

  %% trycatch_SUITE.erl:408
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _105, 
  %%    V
  _24 = bif:'=:=' _105, V
  br _24, ^940, ^374

940:
  %% Argument types:
  %%    _101 => {'value', any(), any()}
  %% Aliased:
  %%    _101
  _102 = get_tuple_element _101, `2`

  %% trycatch_SUITE.erl:408
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _102, 
  %%    V
  _22 = bif:'=:=' _102, V
  br _22, ^941, ^374

941:
  %% Argument types:
  %%    _99 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _99
  _100 = get_tuple_element _99, `1`

  %% trycatch_SUITE.erl:408
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _100, 
  %%    V
  _23 = bif:'=:=' _100, V
  br _23, ^377, ^374

377:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _109 = put_tuple `error`, V

  %% Argument types:
  %%    _109 => {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _109
  _110 = put_tuple `catch_foo`, _109

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _108 = put_tuple `value`, V

  %% trycatch_SUITE.erl:411
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _108, 
  %%    _110
  _111 = call (`eclectic_1`/3), _110, `undefined`, _108

  %% Aliased:
  %%    _111
  _378 = succeeded:body _111
  br _378, ^874, ^1

874:
  %% Argument types:
  %%    _111 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _111
  _113 = get_tuple_element _111, `0`

  %% Argument types:
  %%    _113 => {any(), any(), ...}
  %% Aliased:
  %%    _113
  _871 = is_tagged_tuple _113, `2`, `'EXIT'`
  br _871, ^868, ^380

868:
  %% Argument types:
  %%    _113 => {''EXIT'', any()}
  %% Aliased:
  %%    _113
  _114 = get_tuple_element _113, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _114
  _865 = bif:is_tuple _114
  br _865, ^865, ^380

865:
  %% Argument types:
  %%    _114 => {...}
  %% Aliased:
  %%    _114
  _866 = bif:tuple_size _114

  %% Argument types:
  %%    _866 => 0..16777215
  %% Unique:
  %%    _866
  _867 = bif:'=:=' _866, `2`
  br _867, ^864, ^380

864:
  %% Argument types:
  %%    _114 => {any(), any()}
  %% Aliased:
  %%    _114
  _116 = get_tuple_element _114, `1`

  %% Aliased:
  %%    _116
  _863 = is_nonempty_list _116
  br _863, ^863, ^380

863:
  %% Argument types:
  %%    _116 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _116
  _119 = get_hd _116

  %% Argument types:
  %%    
  %% Aliased:
  %%    _119
  _860 = is_tagged_tuple _119, `4`, `trycatch_SUITE`
  br _860, ^857, ^380

857:
  %% Argument types:
  %%    _119 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _119
  _122 = get_tuple_element _119, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _122
  _856 = bif:'=:=' _122, `foo`
  br _856, ^855, ^380

855:
  %% Argument types:
  %%    _119 => {'trycatch_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _119
  _121 = get_tuple_element _119, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _121
  _854 = bif:'=:=' _121, `1`
  br _854, ^853, ^380

853:
  %% Argument types:
  %%    _114 => {any(), any()}
  %% Aliased:
  %%    _114
  _117 = get_tuple_element _114, `0`

  %% trycatch_SUITE.erl:410
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _117, 
  %%    V
  _30 = bif:'=:=' _117, V
  br _30, ^935, ^380

935:
  %% Argument types:
  %%    _111 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _111
  _112 = get_tuple_element _111, `1`

  %% trycatch_SUITE.erl:410
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _112, 
  %%    V
  _31 = bif:'=:=' _112, V
  br _31, ^382, ^380

382:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _126 = put_tuple `exit`, V

  %% Argument types:
  %%    _126 => {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _126
  _127 = put_tuple `error`, _126

  %% Argument types:
  %%    _127 => {'error', {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}}
  %% Unique:
  %%    _127
  _128 = put_tuple `foo`, _127

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _125 = put_tuple `value`, V

  %% trycatch_SUITE.erl:413
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _125, 
  %%    _128
  _129 = call (`eclectic_1`/3), _128, `error`, _125

  %% Aliased:
  %%    _129
  _383 = succeeded:body _129
  br _383, ^848, ^1

848:
  %% Argument types:
  %%    _129 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _129
  _131 = get_tuple_element _129, `0`

  %% Argument types:
  %%    _131 => {any(), any(), ...}
  %% Aliased:
  %%    _131
  _845 = is_tagged_tuple _131, `3`, `error`
  br _845, ^842, ^385

842:
  %% Argument types:
  %%    _131 => {'error', any(), any()}
  %% Aliased:
  %%    _131
  _133 = get_tuple_element _131, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _839 = is_tagged_tuple _133, `2`, `exit`
  br _839, ^836, ^385

836:
  %% Argument types:
  %%    _131 => {'error', any(), any()}
  %% Aliased:
  %%    _131
  _132 = get_tuple_element _131, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _132
  _833 = is_tagged_tuple _132, `2`, `'EXIT'`
  br _833, ^830, ^385

830:
  %% Argument types:
  %%    _133 => {'exit', any()}
  %% Aliased:
  %%    _133
  _135 = get_tuple_element _133, `1`

  %% trycatch_SUITE.erl:412
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _135, 
  %%    V
  _37 = bif:'=:=' _135, V
  br _37, ^930, ^385

930:
  %% Argument types:
  %%    _132 => {''EXIT'', any()}
  %% Aliased:
  %%    _132
  _137 = get_tuple_element _132, `1`

  %% trycatch_SUITE.erl:412
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _137, 
  %%    V
  _35 = bif:'=:=' _137, V
  br _35, ^931, ^385

931:
  %% Argument types:
  %%    _129 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _129
  _130 = get_tuple_element _129, `1`

  %% trycatch_SUITE.erl:412
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _130, 
  %%    V
  _36 = bif:'=:=' _130, V
  br _36, ^388, ^385

388:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _140 = put_tuple `value`, V

  %% Argument types:
  %%    _140 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _140
  _141 = put_tuple `value`, _140

  %% Argument types:
  %%    _141 => {'value', {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}}
  %% Unique:
  %%    _141
  _142 = put_tuple `foo`, _141

  %% trycatch_SUITE.erl:416
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _142
  _143 = call (`eclectic_1`/3), _142, `undefined`, `{add,{0,a}}`

  %% Aliased:
  %%    _143
  _389 = succeeded:body _143
  br _389, ^825, ^1

825:
  %% Argument types:
  %%    _143 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _143
  _145 = get_tuple_element _143, `0`

  %% Argument types:
  %%    _145 => {any(), any(), ...}
  %% Aliased:
  %%    _145
  _822 = is_tagged_tuple _145, `3`, `value`
  br _822, ^819, ^391

819:
  %% Argument types:
  %%    _145 => {'value', any(), any()}
  %% Aliased:
  %%    _145
  _147 = get_tuple_element _145, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _147
  _816 = is_tagged_tuple _147, `2`, `value`
  br _816, ^813, ^391

813:
  %% Argument types:
  %%    _143 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _143
  _144 = get_tuple_element _143, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _144
  _810 = is_tagged_tuple _144, `2`, `'EXIT'`
  br _810, ^807, ^391

807:
  %% Argument types:
  %%    _144 => {''EXIT'', any()}
  %% Aliased:
  %%    _144
  _151 = get_tuple_element _144, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _151
  _804 = is_tagged_tuple _151, `2`, `badarith`
  br _804, ^801, ^391

801:
  %% Argument types:
  %%    _151 => {'badarith', any()}
  %% Aliased:
  %%    _151
  _153 = get_tuple_element _151, `1`

  %% Aliased:
  %%    _153
  _800 = is_nonempty_list _153
  br _800, ^800, ^391

800:
  %% Argument types:
  %%    _153 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _153
  _156 = get_hd _153

  %% Argument types:
  %%    _153 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _153
  _155 = get_tl _153

  %% Argument types:
  %%    
  %% Aliased:
  %%    _156
  _797 = is_tagged_tuple _156, `4`, `erlang`
  br _797, ^794, ^391

794:
  %% Argument types:
  %%    _156 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _156
  _159 = get_tuple_element _156, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _159
  _793 = bif:'=:=' _159, `'+'`
  br _793, ^792, ^391

792:
  %% Argument types:
  %%    _156 => {'erlang', ''+'', any(), any()}
  %% Aliased:
  %%    _156
  _158 = get_tuple_element _156, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158
  _791 = bif:'=:=' _158, `[0,a]`
  br _791, ^791, ^391

791:
  %% Aliased:
  %%    _155
  _790 = is_nonempty_list _155
  br _790, ^790, ^391

790:
  %% Argument types:
  %%    _155 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _155
  _162 = get_hd _155

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _787 = is_tagged_tuple _162, `4`, `trycatch_SUITE`
  br _787, ^784, ^391

784:
  %% Argument types:
  %%    _162 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _162
  _165 = get_tuple_element _162, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _165
  _783 = bif:'=:=' _165, `my_add`
  br _783, ^782, ^391

782:
  %% Argument types:
  %%    _162 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _162
  _164 = get_tuple_element _162, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _164
  _781 = bif:'=:=' _164, `2`
  br _781, ^780, ^391

780:
  %% Argument types:
  %%    _147 => {'value', any()}
  %% Aliased:
  %%    _147
  _149 = get_tuple_element _147, `1`

  %% trycatch_SUITE.erl:414
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _149, 
  %%    V
  _44 = bif:'=:=' _149, V
  br _44, ^925, ^391

925:
  %% Argument types:
  %%    _145 => {'value', any(), any()}
  %% Aliased:
  %%    _145
  _146 = get_tuple_element _145, `2`

  %% trycatch_SUITE.erl:414
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _146, 
  %%    V
  _45 = bif:'=:=' _146, V
  br _45, ^393, ^391

393:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _169 = put_tuple `exit`, V

  %% Argument types:
  %%    _169 => {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _169
  _170 = put_tuple `catch_foo`, _169

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _168 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:418
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _168, 
  %%    _170
  _171 = call (`eclectic_1`/3), _170, `undefined`, _168

  %% Aliased:
  %%    _171
  _394 = succeeded:body _171
  br _394, ^775, ^1

775:
  %% Argument types:
  %%    _171 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _171
  _173 = get_tuple_element _171, `0`

  %% Argument types:
  %%    _173 => {any(), any(), ...}
  %% Aliased:
  %%    _173
  _772 = is_tagged_tuple _173, `2`, `'EXIT'`
  br _772, ^769, ^396

769:
  %% Argument types:
  %%    _173 => {''EXIT'', any()}
  %% Aliased:
  %%    _173
  _174 = get_tuple_element _173, `1`

  %% trycatch_SUITE.erl:417
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _174, 
  %%    V
  _48 = bif:'=:=' _174, V
  br _48, ^921, ^396

921:
  %% Argument types:
  %%    _171 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _171
  _172 = get_tuple_element _171, `1`

  %% trycatch_SUITE.erl:417
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _172, 
  %%    V
  _49 = bif:'=:=' _172, V
  br _49, ^398, ^396

398:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _177 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:421
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _177
  _178 = call (`eclectic_1`/3), `{foo,{error,{'div',{1,0}}}}`, `error`, _177

  %% Aliased:
  %%    _178
  _399 = succeeded:body _178
  br _399, ^764, ^1

764:
  %% Argument types:
  %%    _178 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _178
  _180 = get_tuple_element _178, `0`

  %% Argument types:
  %%    _180 => {any(), any(), ...}
  %% Aliased:
  %%    _180
  _761 = is_tagged_tuple _180, `3`, `error`
  br _761, ^758, ^401

758:
  %% Argument types:
  %%    _180 => {'error', any(), any()}
  %% Aliased:
  %%    _180
  _182 = get_tuple_element _180, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _182
  _757 = bif:'=:=' _182, `{'div',{1,0}}`
  br _757, ^757, ^401

757:
  %% Argument types:
  %%    _180 => {'error', {''div'', {1, 0}}, any()}
  %% Aliased:
  %%    _180
  _181 = get_tuple_element _180, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _181
  _754 = is_tagged_tuple _181, `2`, `'EXIT'`
  br _754, ^751, ^401

751:
  %% Argument types:
  %%    _181 => {''EXIT'', any()}
  %% Aliased:
  %%    _181
  _184 = get_tuple_element _181, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _184
  _748 = is_tagged_tuple _184, `2`, `badarith`
  br _748, ^745, ^401

745:
  %% Argument types:
  %%    _184 => {'badarith', any()}
  %% Aliased:
  %%    _184
  _186 = get_tuple_element _184, `1`

  %% Aliased:
  %%    _186
  _744 = is_nonempty_list _186
  br _744, ^744, ^401

744:
  %% Argument types:
  %%    _186 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _186
  _189 = get_hd _186

  %% Argument types:
  %%    _186 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _186
  _188 = get_tl _186

  %% Argument types:
  %%    
  %% Aliased:
  %%    _189
  _741 = is_tagged_tuple _189, `4`, `erlang`
  br _741, ^738, ^401

738:
  %% Argument types:
  %%    _189 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _189
  _192 = get_tuple_element _189, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _192
  _737 = bif:'=:=' _192, `'div'`
  br _737, ^736, ^401

736:
  %% Argument types:
  %%    _189 => {'erlang', ''div'', any(), any()}
  %% Aliased:
  %%    _189
  _191 = get_tuple_element _189, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _191
  _735 = bif:'=:=' _191, `[1,0]`
  br _735, ^735, ^401

735:
  %% Aliased:
  %%    _188
  _734 = is_nonempty_list _188
  br _734, ^734, ^401

734:
  %% Argument types:
  %%    _188 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _188
  _195 = get_hd _188

  %% Argument types:
  %%    
  %% Aliased:
  %%    _195
  _731 = is_tagged_tuple _195, `4`, `trycatch_SUITE`
  br _731, ^728, ^401

728:
  %% Argument types:
  %%    _195 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _195
  _198 = get_tuple_element _195, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _198
  _727 = bif:'=:=' _198, `my_div`
  br _727, ^726, ^401

726:
  %% Argument types:
  %%    _195 => {'trycatch_SUITE', 'my_div', any(), any()}
  %% Aliased:
  %%    _195
  _197 = get_tuple_element _195, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _197
  _725 = bif:'=:=' _197, `2`
  br _725, ^724, ^401

724:
  %% Argument types:
  %%    _178 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _178
  _179 = get_tuple_element _178, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _721 = is_tagged_tuple _179, `2`, `'EXIT'`
  br _721, ^718, ^401

718:
  %% Argument types:
  %%    _179 => {''EXIT'', any()}
  %% Aliased:
  %%    _179
  _200 = get_tuple_element _179, `1`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _200, 
  %%    V
  _402 = bif:'=:=' _200, V
  br _402, ^402, ^401

402:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _203 = put_tuple `error`, V

  %% Argument types:
  %%    _203 => {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _203
  _204 = put_tuple `throw`, _203

  %% Argument types:
  %%    _204 => {'throw', {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}}
  %% Unique:
  %%    _204
  _205 = put_tuple `catch_foo`, _204

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _202 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:424
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _202, 
  %%    _205
  _206 = call (`eclectic_1`/3), _205, `undefined`, _202

  %% Aliased:
  %%    _206
  _403 = succeeded:body _206
  br _403, ^710, ^1

710:
  %% Argument types:
  %%    _206 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _206
  _208 = get_tuple_element _206, `0`

  %% Argument types:
  %%    _208 => {any(), any(), ...}
  %% Aliased:
  %%    _208
  _711 = bif:tuple_size _208

  %% Argument types:
  %%    _711 => 2..16777215
  %% Unique:
  %%    _711
  _712 = bif:'=:=' _711, `2`
  br _712, ^709, ^405

709:
  %% Argument types:
  %%    _208 => {any(), any()}
  %% Aliased:
  %%    _208
  _210 = get_tuple_element _208, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _210
  _706 = is_tagged_tuple _210, `2`, `error`
  br _706, ^703, ^405

703:
  %% Argument types:
  %%    _208 => {any(), any()}
  %% Aliased:
  %%    _208
  _209 = get_tuple_element _208, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _209
  _700 = is_tagged_tuple _209, `2`, `'EXIT'`
  br _700, ^697, ^405

697:
  %% Argument types:
  %%    _209 => {''EXIT'', any()}
  %% Aliased:
  %%    _209
  _213 = get_tuple_element _209, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _213
  _694 = bif:is_tuple _213
  br _694, ^694, ^405

694:
  %% Argument types:
  %%    _213 => {...}
  %% Aliased:
  %%    _213
  _695 = bif:tuple_size _213

  %% Argument types:
  %%    _695 => 0..16777215
  %% Unique:
  %%    _695
  _696 = bif:'=:=' _695, `2`
  br _696, ^693, ^405

693:
  %% Argument types:
  %%    _213 => {any(), any()}
  %% Aliased:
  %%    _213
  _215 = get_tuple_element _213, `1`

  %% Aliased:
  %%    _215
  _692 = is_nonempty_list _215
  br _692, ^692, ^405

692:
  %% Argument types:
  %%    _215 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _215
  _218 = get_hd _215

  %% Argument types:
  %%    
  %% Aliased:
  %%    _218
  _689 = is_tagged_tuple _218, `4`, `trycatch_SUITE`
  br _689, ^686, ^405

686:
  %% Argument types:
  %%    _218 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _218
  _221 = get_tuple_element _218, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _221
  _685 = bif:'=:=' _221, `foo`
  br _685, ^684, ^405

684:
  %% Argument types:
  %%    _218 => {'trycatch_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _218
  _220 = get_tuple_element _218, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _220
  _683 = bif:'=:=' _220, `1`
  br _683, ^682, ^405

682:
  %% Argument types:
  %%    _206 => {{any(), any(), ...}, any()}
  %% Aliased:
  %%    _206
  _207 = get_tuple_element _206, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _207
  _679 = is_tagged_tuple _207, `2`, `'EXIT'`
  br _679, ^676, ^405

676:
  %% Argument types:
  %%    _210 => {'error', any()}
  %% Aliased:
  %%    _210
  _211 = get_tuple_element _210, `1`

  %% trycatch_SUITE.erl:422
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _211, 
  %%    V
  _61 = bif:'=:=' _211, V
  br _61, ^916, ^405

916:
  %% Argument types:
  %%    _213 => {any(), any()}
  %% Aliased:
  %%    _213
  _216 = get_tuple_element _213, `0`

  %% trycatch_SUITE.erl:422
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _216, 
  %%    V
  _59 = bif:'=:=' _216, V
  br _59, ^917, ^405

917:
  %% Argument types:
  %%    _207 => {''EXIT'', any()}
  %% Aliased:
  %%    _207
  _223 = get_tuple_element _207, `1`

  %% trycatch_SUITE.erl:423
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _223, 
  %%    V
  _60 = bif:'=:=' _223, V
  br _60, ^408, ^405

408:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _227 = put_tuple `value`, V

  %% Argument types:
  %%    _227 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Aliased:
  %%    _227
  _228 = put_tuple `value`, _227

  %% trycatch_SUITE.erl:427
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _227
  %% Unique:
  %%    _228
  _229 = call (`eclectic_2`/3), _228, `undefined`, _227

  %% Aliased:
  %%    _229
  _409 = succeeded:body _229
  br _409, ^671, ^1

671:
  %% Argument types:
  %%    _229 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _229
  _231 = get_tuple_element _229, `0`

  %% Argument types:
  %%    _231 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _231
  _668 = is_tagged_tuple _231, `2`, `value`
  br _668, ^665, ^411

665:
  %% Argument types:
  %%    _231 => {'value', any()}
  %% Aliased:
  %%    _231
  _232 = get_tuple_element _231, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _232
  _662 = is_tagged_tuple _232, `3`, `value`
  br _662, ^659, ^411

659:
  %% Argument types:
  %%    _232 => {'value', any(), any()}
  %% Aliased:
  %%    _232
  _235 = get_tuple_element _232, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _235
  _656 = is_tagged_tuple _235, `2`, `value`
  br _656, ^653, ^411

653:
  %% Argument types:
  %%    _235 => {'value', any()}
  %% Aliased:
  %%    _235
  _237 = get_tuple_element _235, `1`

  %% trycatch_SUITE.erl:426
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _237, 
  %%    V
  _68 = bif:'=:=' _237, V
  br _68, ^910, ^411

910:
  %% Argument types:
  %%    _232 => {'value', any(), any()}
  %% Aliased:
  %%    _232
  _234 = get_tuple_element _232, `2`

  %% trycatch_SUITE.erl:426
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _234, 
  %%    V
  _66 = bif:'=:=' _234, V
  br _66, ^911, ^411

911:
  %% Argument types:
  %%    _229 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _229
  _230 = get_tuple_element _229, `1`

  %% trycatch_SUITE.erl:426
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _230, 
  %%    V
  _67 = bif:'=:=' _230, V
  br _67, ^414, ^411

414:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _241 = put_tuple `value`, V

  %% Argument types:
  %%    _241 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Aliased:
  %%    _241
  _242 = put_tuple `throw`, _241

  %% trycatch_SUITE.erl:429
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _241
  %% Unique:
  %%    _242
  _243 = call (`eclectic_2`/3), _242, `throw`, _241

  %% Aliased:
  %%    _243
  _415 = succeeded:body _243
  br _415, ^648, ^1

648:
  %% Argument types:
  %%    _243 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _243
  _245 = get_tuple_element _243, `0`

  %% Argument types:
  %%    _245 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _245
  _645 = is_tagged_tuple _245, `2`, `value`
  br _645, ^642, ^417

642:
  %% Argument types:
  %%    _245 => {'value', any()}
  %% Aliased:
  %%    _245
  _246 = get_tuple_element _245, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _246
  _639 = is_tagged_tuple _246, `3`, `throw`
  br _639, ^636, ^417

636:
  %% Argument types:
  %%    _246 => {'throw', any(), any()}
  %% Aliased:
  %%    _246
  _249 = get_tuple_element _246, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _249
  _633 = is_tagged_tuple _249, `2`, `value`
  br _633, ^630, ^417

630:
  %% Argument types:
  %%    _249 => {'value', any()}
  %% Aliased:
  %%    _249
  _251 = get_tuple_element _249, `1`

  %% trycatch_SUITE.erl:428
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _251, 
  %%    V
  _75 = bif:'=:=' _251, V
  br _75, ^904, ^417

904:
  %% Argument types:
  %%    _246 => {'throw', any(), any()}
  %% Aliased:
  %%    _246
  _248 = get_tuple_element _246, `2`

  %% trycatch_SUITE.erl:428
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _248, 
  %%    V
  _73 = bif:'=:=' _248, V
  br _73, ^905, ^417

905:
  %% Argument types:
  %%    _243 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _243
  _244 = get_tuple_element _243, `1`

  %% trycatch_SUITE.erl:428
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _244, 
  %%    V
  _74 = bif:'=:=' _244, V
  br _74, ^420, ^417

420:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _255 = put_tuple `value`, V

  %% Argument types:
  %%    _255 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _255
  _256 = put_tuple `value`, _255

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _254 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:431
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _254, 
  %%    _256
  _257 = call (`eclectic_2`/3), _256, `undefined`, _254

  %% Aliased:
  %%    _257
  _421 = succeeded:body _257
  br _421, ^625, ^1

625:
  %% Argument types:
  %%    _257 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _257
  _259 = get_tuple_element _257, `0`

  %% Argument types:
  %%    _259 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _259
  _622 = is_tagged_tuple _259, `2`, `caught`
  br _622, ^619, ^423

619:
  %% Argument types:
  %%    _259 => {'caught', any()}
  %% Aliased:
  %%    _259
  _260 = get_tuple_element _259, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _260
  _616 = is_tagged_tuple _260, `2`, `'EXIT'`
  br _616, ^613, ^423

613:
  %% Argument types:
  %%    _257 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _257
  _258 = get_tuple_element _257, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _258
  _612 = bif:'=:=' _258, `undefined`
  br _612, ^611, ^423

611:
  %% Argument types:
  %%    _260 => {''EXIT'', any()}
  %% Aliased:
  %%    _260
  _262 = get_tuple_element _260, `1`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _262, 
  %%    V
  _424 = bif:'=:=' _262, V
  br _424, ^424, ^423

424:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _265 = put_tuple `value`, V

  %% Argument types:
  %%    _265 => {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _265
  _266 = put_tuple `error`, _265

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _264 = put_tuple `error`, V

  %% trycatch_SUITE.erl:433
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _264, 
  %%    _266
  _267 = call (`eclectic_2`/3), _266, `throw`, _264

  %% Aliased:
  %%    _267
  _425 = succeeded:body _267
  br _425, ^606, ^1

606:
  %% Argument types:
  %%    _267 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _267
  _269 = get_tuple_element _267, `0`

  %% Argument types:
  %%    _269 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _269
  _603 = is_tagged_tuple _269, `2`, `caught`
  br _603, ^600, ^427

600:
  %% Argument types:
  %%    _269 => {'caught', any()}
  %% Aliased:
  %%    _269
  _270 = get_tuple_element _269, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _270
  _597 = is_tagged_tuple _270, `2`, `'EXIT'`
  br _597, ^594, ^427

594:
  %% Argument types:
  %%    _270 => {''EXIT'', any()}
  %% Aliased:
  %%    _270
  _272 = get_tuple_element _270, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _272
  _591 = bif:is_tuple _272
  br _591, ^591, ^427

591:
  %% Argument types:
  %%    _272 => {...}
  %% Aliased:
  %%    _272
  _592 = bif:tuple_size _272

  %% Argument types:
  %%    _592 => 0..16777215
  %% Unique:
  %%    _592
  _593 = bif:'=:=' _592, `2`
  br _593, ^590, ^427

590:
  %% Argument types:
  %%    _272 => {any(), any()}
  %% Aliased:
  %%    _272
  _274 = get_tuple_element _272, `1`

  %% Aliased:
  %%    _274
  _589 = is_nonempty_list _274
  br _589, ^589, ^427

589:
  %% Argument types:
  %%    _274 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _274
  _277 = get_hd _274

  %% Argument types:
  %%    
  %% Aliased:
  %%    _277
  _586 = is_tagged_tuple _277, `4`, `trycatch_SUITE`
  br _586, ^583, ^427

583:
  %% Argument types:
  %%    _277 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _277
  _280 = get_tuple_element _277, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _280
  _582 = bif:'=:=' _280, `foo`
  br _582, ^581, ^427

581:
  %% Argument types:
  %%    _277 => {'trycatch_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _277
  _279 = get_tuple_element _277, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _279
  _580 = bif:'=:=' _279, `1`
  br _580, ^579, ^427

579:
  %% Argument types:
  %%    _267 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _267
  _268 = get_tuple_element _267, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _268
  _578 = bif:'=:=' _268, `undefined`
  br _578, ^577, ^427

577:
  %% Argument types:
  %%    _272 => {any(), any()}
  %% Aliased:
  %%    _272
  _275 = get_tuple_element _272, `0`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _275, 
  %%    V
  _428 = bif:'=:=' _275, V
  br _428, ^428, ^427

428:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _283 = put_tuple `abs`, V

  %% Argument types:
  %%    _283 => {'abs', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _283
  _284 = put_tuple `value`, _283

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _282 = put_tuple `value`, V

  %% trycatch_SUITE.erl:435
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _282, 
  %%    _284
  _285 = call (`eclectic_2`/3), _284, `undefined`, _282

  %% Aliased:
  %%    _285
  _429 = succeeded:body _285
  br _429, ^572, ^1

572:
  %% Argument types:
  %%    _285 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _285
  _287 = get_tuple_element _285, `0`

  %% Argument types:
  %%    _287 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _287
  _569 = is_tagged_tuple _287, `2`, `caught`
  br _569, ^566, ^431

566:
  %% Argument types:
  %%    _287 => {'caught', any()}
  %% Aliased:
  %%    _287
  _288 = get_tuple_element _287, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _288
  _563 = is_tagged_tuple _288, `2`, `'EXIT'`
  br _563, ^560, ^431

560:
  %% Argument types:
  %%    _288 => {''EXIT'', any()}
  %% Aliased:
  %%    _288
  _290 = get_tuple_element _288, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _290
  _557 = is_tagged_tuple _290, `2`, `badarg`
  br _557, ^554, ^431

554:
  %% Argument types:
  %%    _290 => {'badarg', any()}
  %% Aliased:
  %%    _290
  _292 = get_tuple_element _290, `1`

  %% Aliased:
  %%    _292
  _553 = is_nonempty_list _292
  br _553, ^553, ^431

553:
  %% Argument types:
  %%    _292 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _292
  _295 = get_hd _292

  %% Argument types:
  %%    
  %% Aliased:
  %%    _295
  _550 = is_tagged_tuple _295, `4`, `erlang`
  br _550, ^547, ^431

547:
  %% Argument types:
  %%    _295 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _295
  _298 = get_tuple_element _295, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _298
  _546 = bif:'=:=' _298, `abs`
  br _546, ^545, ^431

545:
  %% Argument types:
  %%    _295 => {'erlang', 'abs', any(), any()}
  %% Aliased:
  %%    _295
  _297 = get_tuple_element _295, `2`

  %% Aliased:
  %%    _297
  _544 = is_nonempty_list _297
  br _544, ^544, ^431

544:
  %% Argument types:
  %%    _297 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _297
  _301 = get_hd _297

  %% Argument types:
  %%    _297 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _297
  _300 = get_tl _297

  %% Argument types:
  %%    
  %% Aliased:
  %%    _300
  _543 = bif:'=:=' _300, `[]`
  br _543, ^543, ^431

543:
  %% trycatch_SUITE.erl:434
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _301, 
  %%    V
  _85 = bif:'=:=' _301, V
  br _85, ^899, ^431

899:
  %% Argument types:
  %%    _285 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _285
  _286 = get_tuple_element _285, `1`

  %% trycatch_SUITE.erl:434
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _286, 
  %%    V
  _86 = bif:'=:=' _286, V
  br _86, ^433, ^431

433:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _303 = put_tuple `value`, V

  %% trycatch_SUITE.erl:437
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _303
  _304 = call (`eclectic_2`/3), `{exit,{add,{0,a}}}`, `exit`, _303

  %% Aliased:
  %%    _304
  _434 = succeeded:body _304
  br _434, ^538, ^1

538:
  %% Argument types:
  %%    _304 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _304
  _306 = get_tuple_element _304, `0`

  %% Argument types:
  %%    _306 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _306
  _535 = is_tagged_tuple _306, `2`, `caught`
  br _535, ^532, ^436

532:
  %% Argument types:
  %%    _306 => {'caught', any()}
  %% Aliased:
  %%    _306
  _307 = get_tuple_element _306, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _307
  _529 = is_tagged_tuple _307, `2`, `'EXIT'`
  br _529, ^526, ^436

526:
  %% Argument types:
  %%    _307 => {''EXIT'', any()}
  %% Aliased:
  %%    _307
  _309 = get_tuple_element _307, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _309
  _523 = is_tagged_tuple _309, `2`, `badarith`
  br _523, ^520, ^436

520:
  %% Argument types:
  %%    _309 => {'badarith', any()}
  %% Aliased:
  %%    _309
  _311 = get_tuple_element _309, `1`

  %% Aliased:
  %%    _311
  _519 = is_nonempty_list _311
  br _519, ^519, ^436

519:
  %% Argument types:
  %%    _311 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _311
  _314 = get_hd _311

  %% Argument types:
  %%    _311 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _311
  _313 = get_tl _311

  %% Argument types:
  %%    
  %% Aliased:
  %%    _314
  _516 = is_tagged_tuple _314, `4`, `erlang`
  br _516, ^513, ^436

513:
  %% Argument types:
  %%    _314 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _314
  _317 = get_tuple_element _314, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _317
  _512 = bif:'=:=' _317, `'+'`
  br _512, ^511, ^436

511:
  %% Argument types:
  %%    _314 => {'erlang', ''+'', any(), any()}
  %% Aliased:
  %%    _314
  _316 = get_tuple_element _314, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _316
  _510 = bif:'=:=' _316, `[0,a]`
  br _510, ^510, ^436

510:
  %% Aliased:
  %%    _313
  _509 = is_nonempty_list _313
  br _509, ^509, ^436

509:
  %% Argument types:
  %%    _313 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _313
  _320 = get_hd _313

  %% Argument types:
  %%    
  %% Aliased:
  %%    _320
  _506 = is_tagged_tuple _320, `4`, `trycatch_SUITE`
  br _506, ^503, ^436

503:
  %% Argument types:
  %%    _320 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _320
  _323 = get_tuple_element _320, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _323
  _502 = bif:'=:=' _323, `my_add`
  br _502, ^501, ^436

501:
  %% Argument types:
  %%    _320 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _320
  _322 = get_tuple_element _320, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _322
  _500 = bif:'=:=' _322, `2`
  br _500, ^499, ^436

499:
  %% Argument types:
  %%    _304 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _304
  _305 = get_tuple_element _304, `1`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _305, 
  %%    V
  _437 = bif:'=:=' _305, V
  br _437, ^437, ^436

437:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _326 = put_tuple `error`, V

  %% Argument types:
  %%    _326 => {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
  %% Unique:
  %%    _326
  _327 = put_tuple `value`, _326

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _325 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:439
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _325, 
  %%    _327
  _328 = call (`eclectic_2`/3), _327, `undefined`, _325

  %% Aliased:
  %%    _328
  _438 = succeeded:body _328
  br _438, ^494, ^1

494:
  %% Argument types:
  %%    _328 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _328
  _330 = get_tuple_element _328, `0`

  %% Argument types:
  %%    _330 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _330
  _491 = is_tagged_tuple _330, `2`, `caught`
  br _491, ^488, ^440

488:
  %% Argument types:
  %%    _330 => {'caught', any()}
  %% Aliased:
  %%    _330
  _331 = get_tuple_element _330, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _331
  _485 = is_tagged_tuple _331, `2`, `'EXIT'`
  br _485, ^482, ^440

482:
  %% Argument types:
  %%    _328 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _328
  _329 = get_tuple_element _328, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _329
  _481 = bif:'=:=' _329, `undefined`
  br _481, ^480, ^440

480:
  %% Argument types:
  %%    _331 => {''EXIT'', any()}
  %% Aliased:
  %%    _331
  _333 = get_tuple_element _331, `1`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _333, 
  %%    V
  _441 = bif:'=:=' _333, V
  br _441, ^441, ^440

441:
  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    V
  _335 = put_tuple `error`, V

  %% trycatch_SUITE.erl:441
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _335
  _336 = call (`eclectic_2`/3), `{throw,{'div',{1,0}}}`, `throw`, _335

  %% Aliased:
  %%    _336
  _442 = succeeded:body _336
  br _442, ^475, ^1

475:
  %% Argument types:
  %%    _336 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _336
  _338 = get_tuple_element _336, `0`

  %% Argument types:
  %%    _338 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _338
  _472 = is_tagged_tuple _338, `2`, `caught`
  br _472, ^469, ^444

469:
  %% Argument types:
  %%    _338 => {'caught', any()}
  %% Aliased:
  %%    _338
  _339 = get_tuple_element _338, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _339
  _466 = is_tagged_tuple _339, `2`, `'EXIT'`
  br _466, ^463, ^444

463:
  %% Argument types:
  %%    _339 => {''EXIT'', any()}
  %% Aliased:
  %%    _339
  _341 = get_tuple_element _339, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _341
  _460 = bif:is_tuple _341
  br _460, ^460, ^444

460:
  %% Argument types:
  %%    _341 => {...}
  %% Aliased:
  %%    _341
  _461 = bif:tuple_size _341

  %% Argument types:
  %%    _461 => 0..16777215
  %% Unique:
  %%    _461
  _462 = bif:'=:=' _461, `2`
  br _462, ^459, ^444

459:
  %% Argument types:
  %%    _341 => {any(), any()}
  %% Aliased:
  %%    _341
  _343 = get_tuple_element _341, `1`

  %% Aliased:
  %%    _343
  _458 = is_nonempty_list _343
  br _458, ^458, ^444

458:
  %% Argument types:
  %%    _343 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _343
  _346 = get_hd _343

  %% Argument types:
  %%    
  %% Aliased:
  %%    _346
  _455 = is_tagged_tuple _346, `4`, `trycatch_SUITE`
  br _455, ^452, ^444

452:
  %% Argument types:
  %%    _346 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _346
  _349 = get_tuple_element _346, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _349
  _451 = bif:'=:=' _349, `foo`
  br _451, ^450, ^444

450:
  %% Argument types:
  %%    _346 => {'trycatch_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _346
  _348 = get_tuple_element _346, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _348
  _449 = bif:'=:=' _348, `1`
  br _449, ^448, ^444

448:
  %% Argument types:
  %%    _336 => {{'caught', any()} | {'value', any()}, any()}
  %% Aliased:
  %%    _336
  _337 = get_tuple_element _336, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _337
  _447 = bif:'=:=' _337, `undefined`
  br _447, ^446, ^444

446:
  %% Argument types:
  %%    _341 => {any(), any()}
  %% Aliased:
  %%    _341
  _344 = get_tuple_element _341, `0`

  %% Argument types:
  %%    V => {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}
  %% Aliased:
  %%    _344, 
  %%    V
  _445 = bif:'=:=' _344, V
  br _445, ^445, ^444

445:
  %% Result type:
  %%    'ok'
  ret `ok`

444:
  %% trycatch_SUITE.erl:440
  %% Aliased:
  %%    _336
  _351 = match_fail `badmatch`, _336

  %% Unique:
  %%    _351
  _479 = succeeded:body _351
  br ^1

440:
  %% trycatch_SUITE.erl:438
  %% Aliased:
  %%    _328
  _352 = match_fail `badmatch`, _328

  %% Unique:
  %%    _352
  _498 = succeeded:body _352
  br ^1

436:
  %% trycatch_SUITE.erl:436
  %% Aliased:
  %%    _304
  _353 = match_fail `badmatch`, _304

  %% Unique:
  %%    _353
  _542 = succeeded:body _353
  br ^1

431:
  %% trycatch_SUITE.erl:434
  %% Aliased:
  %%    _285
  _354 = match_fail `badmatch`, _285

  %% Unique:
  %%    _354
  _576 = succeeded:body _354
  br ^1

427:
  %% trycatch_SUITE.erl:432
  %% Aliased:
  %%    _267
  _355 = match_fail `badmatch`, _267

  %% Unique:
  %%    _355
  _610 = succeeded:body _355
  br ^1

423:
  %% trycatch_SUITE.erl:430
  %% Aliased:
  %%    _257
  _356 = match_fail `badmatch`, _257

  %% Unique:
  %%    _356
  _629 = succeeded:body _356
  br ^1

417:
  %% trycatch_SUITE.erl:428
  %% Aliased:
  %%    _243
  _357 = match_fail `badmatch`, _243

  %% Unique:
  %%    _357
  _652 = succeeded:body _357
  br ^1

411:
  %% trycatch_SUITE.erl:426
  %% Aliased:
  %%    _229
  _358 = match_fail `badmatch`, _229

  %% Unique:
  %%    _358
  _675 = succeeded:body _358
  br ^1

405:
  %% trycatch_SUITE.erl:422
  %% Aliased:
  %%    _206
  _359 = match_fail `badmatch`, _206

  %% Unique:
  %%    _359
  _717 = succeeded:body _359
  br ^1

401:
  %% trycatch_SUITE.erl:419
  %% Aliased:
  %%    _178
  _360 = match_fail `badmatch`, _178

  %% Unique:
  %%    _360
  _768 = succeeded:body _360
  br ^1

396:
  %% trycatch_SUITE.erl:417
  %% Aliased:
  %%    _171
  _361 = match_fail `badmatch`, _171

  %% Unique:
  %%    _361
  _779 = succeeded:body _361
  br ^1

391:
  %% trycatch_SUITE.erl:414
  %% Aliased:
  %%    _143
  _362 = match_fail `badmatch`, _143

  %% Unique:
  %%    _362
  _829 = succeeded:body _362
  br ^1

385:
  %% trycatch_SUITE.erl:412
  %% Aliased:
  %%    _129
  _363 = match_fail `badmatch`, _129

  %% Unique:
  %%    _363
  _852 = succeeded:body _363
  br ^1

380:
  %% trycatch_SUITE.erl:410
  %% Aliased:
  %%    _111
  _364 = match_fail `badmatch`, _111

  %% Unique:
  %%    _364
  _878 = succeeded:body _364
  br ^1

374:
  %% trycatch_SUITE.erl:408
  %% Aliased:
  %%    _99
  _365 = match_fail `badmatch`, _99

  %% Unique:
  %%    _365
  _895 = succeeded:body _365
  br ^1

369:
  %% trycatch_SUITE.erl:406
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-eclectic/1-',1}}
  _366 = match_fail `function_clause`, _0

  %% Unique:
  %%    _366
  _896 = succeeded:body _366
  br ^1

1:
  _367 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _367
}

%% trycatch_SUITE.erl:444
%% Counter = 268
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'catch_foo', {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'throw', {'error', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}} | {'foo', {'error', {''div'', {1, 0}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}} | {'value', {'value', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}}
%%    _1 =>
%%     'error' | 'undefined'
%%    _2 =>
%%     {'add', {0, 'a'}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}} | {'throw', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}} | {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
function `trycatch_SUITE`:`eclectic_1`(_0, _1, _2) {
0:
  %% trycatch_SUITE.erl:445
  _42 = call (`erlang`:`erase`/1), `eclectic`

  %% Aliased:
  %%    _42
  _74 = succeeded:body _42
  br _74, ^74, ^1

74:
  %% trycatch_SUITE.erl:446
  Done = call (`erlang`:`make_ref`/0)
  _80 = new_try_tag `'try'`
  br _80, ^254, ^77

254:
  %% Argument types:
  %%    _0 => {'catch_foo', {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'throw', {'error', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}} | {'foo', {'error', {''div'', {1, 0}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}} | {'value', {'value', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}}
  %% Unique:
  %%    _0
  _36 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {'catch_foo', {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'throw', {'error', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}} | {'foo', {'error', {''div'', {1, 0}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}} | {'value', {'value', {reference(), 3.1415926535, nonempty_improper_list(any(), any())}}}}
  %% Unique:
  %%    _0
  _35 = get_tuple_element _0, `1`
  br ^264

264:
  _85 = new_try_tag `'try'`
  br _85, ^101, ^82

101:
  %% Unique:
  %%    _36
  _263 = bif:'=:=' _36, `foo`
  br _263, ^100, ^260

100:
  %% trycatch_SUITE.erl:450
  %% Unique:
  %%    _35
  _5 = call (`foo`/1), _35

  %% Aliased:
  %%    _5
  _98 = succeeded:body _5
  br _98, ^98, ^82

98:
  %% Argument types:
  %%    Done => reference()
  %% Aliased:
  %%    _5
  %% Unique:
  %%    Done
  _47 = put_tuple Done, _5
  br ^86

260:
  br ^265

265:
  _91 = new_try_tag `'catch'`
  br _91, ^89, ^90

89:
  %% trycatch_SUITE.erl:449
  %% Unique:
  %%    _35
  _4 = call (`foo`/1), _35

  %% Aliased:
  %%    _4
  _93 = succeeded:body _4
  br _93, ^93, ^90

93:
  %% Argument types:
  %%    Done => reference()
  %% Aliased:
  %%    _4
  %% Unique:
  %%    Done
  _50 = put_tuple Done, _4
  br ^88

90:
  %% Unique:
  %%    _91
  _96 = landingpad `'catch'`, _91

  %% Aliased:
  %%    _96
  _94 = extract _96, `0`
  br ^88

88:
  _97 = phi { _94, ^90 }, { _50, ^93 }

  %% Aliased:
  %%    _97
  %% Unique:
  %%    _91
  _48 = catch_end _91, _97
  br ^86

86:
  _46 = phi { _48, ^88 }, { _47, ^98 }

  %% Unique:
  %%    _85
  _152 = kill_try_tag _85

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _123 = bif:is_tuple _46
  br _123, ^123, ^261

123:
  %% Argument types:
  %%    _46 => {...}
  %% Aliased:
  %%    _46
  _124 = bif:tuple_size _46

  %% Argument types:
  %%    _124 => 0..16777215
  %% Unique:
  %%    _124
  _125 = bif:'=:=' _124, `2`
  br _125, ^122, ^261

122:
  %% Argument types:
  %%    _46 => {any(), any()}
  %% Aliased:
  %%    _46
  _39 = get_tuple_element _46, `0`

  %% Argument types:
  %%    Done => reference()
  %% Aliased:
  %%    _39
  %% Unique:
  %%    Done
  _109 = bif:'=:=' _39, Done
  br _109, ^109, ^108

109:
  %% Argument types:
  %%    _46 => {reference(), any()}
  %% Aliased:
  %%    _46
  _38 = get_tuple_element _46, `1`
  _113 = new_try_tag `'catch'`
  br _113, ^111, ^112

111:
  %% trycatch_SUITE.erl:452
  %% Aliased:
  %%    _38
  _54 = call (`foo`/1), _38

  %% Aliased:
  %%    _54
  _115 = succeeded:body _54
  br _115, ^115, ^112

115:
  br ^110

112:
  %% Unique:
  %%    _113
  _118 = landingpad `'catch'`, _113

  %% Aliased:
  %%    _118
  _116 = extract _118, `0`
  br ^110

110:
  _119 = phi { _116, ^112 }, { _54, ^115 }

  %% Aliased:
  %%    _119
  %% Unique:
  %%    _113
  _8 = catch_end _113, _119

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _38
  _55 = put_tuple `value`, _38, _8
  br ^83

108:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _121 = bif:'=:=' _39, `'EXIT'`
  br _121, ^120, ^261

120:
  br ^83

261:
  br ^266

266:
  _129 = new_try_tag `'catch'`
  br _129, ^127, ^128

127:
  %% trycatch_SUITE.erl:454
  %% Aliased:
  %%    _46
  _57 = call (`foo`/1), _46

  %% Aliased:
  %%    _57
  _131 = succeeded:body _57
  br _131, ^131, ^128

131:
  br ^126

128:
  %% Unique:
  %%    _129
  _134 = landingpad `'catch'`, _129

  %% Aliased:
  %%    _134
  _132 = extract _134, `0`
  br ^126

126:
  _135 = phi { _132, ^128 }, { _57, ^131 }

  %% Aliased:
  %%    _135
  %% Unique:
  %%    _129
  _9 = catch_end _129, _135

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9, 
  %%    _46
  _58 = put_tuple _46, _9
  br ^83

82:
  %% Unique:
  %%    _85
  _150 = landingpad `'try'`, _85

  %% Aliased:
  %%    _150
  _13 = extract _150, `0`

  %% Aliased:
  %%    _150
  _12 = extract _150, `1`

  %% Aliased:
  %%    _150
  _11 = extract _150, `2`

  %% Unique:
  %%    _85
  _151 = kill_try_tag _85

  %% Argument types:
  %%    _13 => 'error' | 'exit' | 'throw'
  %%    _1 => 'error' | 'undefined'
  %% Unique:
  %%    _1, 
  %%    _13
  _138 = bif:'=:=' _13, _1
  br _138, ^262, ^137

262:
  br ^267

267:
  _142 = new_try_tag `'catch'`
  br _142, ^140, ^141

140:
  %% trycatch_SUITE.erl:456
  %% Aliased:
  %%    _12
  _61 = call (`foo`/1), _12

  %% Aliased:
  %%    _61
  _144 = succeeded:body _61
  br _144, ^144, ^141

144:
  br ^139

141:
  %% Unique:
  %%    _142
  _147 = landingpad `'catch'`, _142

  %% Aliased:
  %%    _147
  _145 = extract _147, `0`
  br ^139

139:
  _148 = phi { _145, ^141 }, { _61, ^144 }

  %% Aliased:
  %%    _148
  %% Unique:
  %%    _142
  _14 = catch_end _142, _148

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12, 
  %%    _14
  _62 = put_tuple `error`, _12, _14
  br ^83

83:
  _44 = phi { _55, ^110 }, { _46, ^120 }, { _58, ^126 }, { _62, ^139 }

  %% Unique:
  %%    _80
  _178 = kill_try_tag _80
  _156 = new_try_tag `'catch'`
  br _156, ^154, ^155

154:
  %% trycatch_SUITE.erl:458
  %% Aliased:
  %%    _2
  _65 = call (`foo`/1), _2

  %% Aliased:
  %%    _65
  _158 = succeeded:body _65
  br _158, ^158, ^155

158:
  br ^153

155:
  %% Unique:
  %%    _156
  _161 = landingpad `'catch'`, _156

  %% Aliased:
  %%    _161
  _159 = extract _161, `0`
  br ^153

153:
  _162 = phi { _159, ^155 }, { _65, ^158 }

  %% Aliased:
  %%    _162
  %% Unique:
  %%    _156
  _15 = catch_end _156, _162

  %% trycatch_SUITE.erl:458
  %% Aliased:
  %%    _15
  _66 = call (`erlang`:`put`/2), `eclectic`, _15

  %% Aliased:
  %%    _66
  _163 = succeeded:body _66
  br _163, ^182, ^1

182:
  %% trycatch_SUITE.erl:460
  _23 = call (`erlang`:`erase`/1), `eclectic`

  %% Aliased:
  %%    _23
  _179 = succeeded:body _23
  br _179, ^179, ^1

179:
  %% Argument types:
  %%    _44 => {any(), any(), ...}
  %% Aliased:
  %%    _23, 
  %%    _44
  _71 = put_tuple _44, _23
  %% Result type:
  %%    {{any(), any(), ...}, any()}
  %% Unique:
  %%    _71
  ret _71

137:
  %% Aliased:
  %%    _11, 
  %%    _12
  _63 = resume _11, _12

  %% Unique:
  %%    _63
  _149 = succeeded:body _63
  br ^77

77:
  %% Unique:
  %%    _80
  _176 = landingpad `'try'`, _80

  %% Aliased:
  %%    _176
  _19 = extract _176, `1`

  %% Aliased:
  %%    _176
  _18 = extract _176, `2`

  %% Unique:
  %%    _80
  _177 = kill_try_tag _80
  _167 = new_try_tag `'catch'`
  br _167, ^165, ^166

165:
  %% trycatch_SUITE.erl:458
  %% Aliased:
  %%    _2
  _68 = call (`foo`/1), _2

  %% Aliased:
  %%    _68
  _169 = succeeded:body _68
  br _169, ^169, ^166

169:
  br ^164

166:
  %% Unique:
  %%    _167
  _172 = landingpad `'catch'`, _167

  %% Aliased:
  %%    _172
  _170 = extract _172, `0`
  br ^164

164:
  _173 = phi { _170, ^166 }, { _68, ^169 }

  %% Aliased:
  %%    _173
  %% Unique:
  %%    _167
  _41 = catch_end _167, _173

  %% trycatch_SUITE.erl:458
  %% Aliased:
  %%    _41
  _69 = call (`erlang`:`put`/2), `eclectic`, _41

  %% Aliased:
  %%    _69
  _174 = succeeded:body _69
  br _174, ^174, ^1

174:
  %% Aliased:
  %%    _18, 
  %%    _19
  _70 = resume _18, _19

  %% Unique:
  %%    _70
  _175 = succeeded:body _70
  br ^1

1:
  _72 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _72
}

%% trycatch_SUITE.erl:462
%% Counter = 158
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'error', {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}}} | {'exit', {'add', {0, 'a'}}} | {'throw', {''div'', {1, 0}} | {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}}} | {'value', {'abs', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}} | {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {...})}}}
%%    _1 =>
%%     'exit' | 'throw' | 'undefined'
%%    _2 =>
%%     {'error', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}} | {'exit', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}} | {'value', {reference(), 3.1415926535, nonempty_improper_list(nil(), {})}}
function `trycatch_SUITE`:`eclectic_2`(_0, _1, _2) {
0:
  %% trycatch_SUITE.erl:463
  Done = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:464
  _37 = call (`erlang`:`erase`/1), `eclectic`

  %% Aliased:
  %%    _37
  _57 = succeeded:body _37
  br _57, ^152, ^1

152:
  br ^155

155:
  _61 = new_try_tag `'catch'`
  br _61, ^153, ^60

153:
  br ^156

156:
  _67 = new_try_tag `'try'`
  br _67, ^154, ^64

154:
  br ^157

157:
  _72 = new_try_tag `'try'`
  br _72, ^71, ^69

71:
  %% trycatch_SUITE.erl:469
  %% Unique:
  %%    _0
  _42 = call (`foo`/1), _0

  %% Aliased:
  %%    _42
  _73 = succeeded:body _42
  br _73, ^73, ^69

73:
  %% Unique:
  %%    _72
  _82 = kill_try_tag _72

  %% trycatch_SUITE.erl:470
  %% Aliased:
  %%    _42
  _5 = call (`foo`/1), _42

  %% Aliased:
  %%    _5
  _74 = succeeded:body _5
  br _74, ^74, ^64

74:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5, 
  %%    _42
  _43 = put_tuple `value`, _42, _5
  br ^70

69:
  %% Unique:
  %%    _72
  _80 = landingpad `'try'`, _72

  %% Aliased:
  %%    _80
  _9 = extract _80, `0`

  %% Aliased:
  %%    _80
  _8 = extract _80, `1`

  %% Aliased:
  %%    _80
  _7 = extract _80, `2`

  %% Unique:
  %%    _72
  _81 = kill_try_tag _72

  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %%    _1 => 'exit' | 'throw' | 'undefined'
  %% Unique:
  %%    _1, 
  %%    _9
  _77 = bif:'=:=' _9, _1
  br _77, ^77, ^76

77:
  %% trycatch_SUITE.erl:472
  %% Aliased:
  %%    _8
  _10 = call (`foo`/1), _8

  %% Aliased:
  %%    _10
  _78 = succeeded:body _10
  br _78, ^78, ^64

78:
  %% Argument types:
  %%    _1 => 'exit' | 'throw'
  %% Aliased:
  %%    _8, 
  %%    _10
  %% Unique:
  %%    _1
  _45 = put_tuple _1, _8, _10
  br ^70

70:
  _40 = phi { _43, ^74 }, { _45, ^78 }

  %% Unique:
  %%    _67
  _90 = kill_try_tag _67

  %% trycatch_SUITE.erl:474
  %% Aliased:
  %%    _2
  _11 = call (`foo`/1), _2

  %% Aliased:
  %%    _11
  _83 = succeeded:body _11
  br _83, ^83, ^60

83:
  %% trycatch_SUITE.erl:474
  %% Aliased:
  %%    _11
  _47 = call (`erlang`:`put`/2), `eclectic`, _11

  %% Aliased:
  %%    _47
  _84 = succeeded:body _47
  br _84, ^65, ^60

65:
  %% Argument types:
  %%    Done => reference()
  %%    _40 => {'exit' | 'throw' | 'value', any(), any()}
  %% Unique:
  %%    _40, 
  %%    Done
  _50 = put_tuple Done, _40
  br ^58

76:
  %% Aliased:
  %%    _7, 
  %%    _8
  _46 = resume _7, _8

  %% Unique:
  %%    _46
  _79 = succeeded:body _46
  br ^64

64:
  %% Unique:
  %%    _67
  _88 = landingpad `'try'`, _67

  %% Aliased:
  %%    _88
  _15 = extract _88, `1`

  %% Aliased:
  %%    _88
  _14 = extract _88, `2`

  %% Unique:
  %%    _67
  _89 = kill_try_tag _67
  br ^105

105:
  %% trycatch_SUITE.erl:474
  %% Aliased:
  %%    _2
  _33 = call (`foo`/1), _2

  %% Aliased:
  %%    _33
  _85 = succeeded:body _33
  br _85, ^85, ^60

85:
  %% trycatch_SUITE.erl:474
  %% Aliased:
  %%    _33
  _48 = call (`erlang`:`put`/2), `eclectic`, _33

  %% Aliased:
  %%    _48
  _86 = succeeded:body _48
  br _86, ^86, ^60

86:
  %% Aliased:
  %%    _14, 
  %%    _15
  _49 = resume _14, _15

  %% Unique:
  %%    _49
  _87 = succeeded:body _49
  br ^60

60:
  %% Unique:
  %%    _61
  _93 = landingpad `'catch'`, _61

  %% Aliased:
  %%    _93
  _91 = extract _93, `0`
  br ^58

58:
  _94 = phi { _91, ^60 }, { _50, ^65 }

  %% Aliased:
  %%    _94
  %% Unique:
  %%    _61
  _18 = catch_end _61, _94

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _99 = bif:is_tuple _18
  br _99, ^99, ^96

99:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _100 = bif:tuple_size _18

  %% Argument types:
  %%    _100 => 0..16777215
  %% Unique:
  %%    _100
  _101 = bif:'=:=' _100, `2`
  br _101, ^98, ^96

98:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _36 = get_tuple_element _18, `0`

  %% Argument types:
  %%    Done => reference()
  %% Aliased:
  %%    _36
  %% Unique:
  %%    Done
  _97 = bif:'=:=' _36, Done
  br _97, ^97, ^96

97:
  %% Argument types:
  %%    _18 => {reference(), any()}
  %% Aliased:
  %%    _18
  _35 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _51 = put_tuple `value`, _35
  br ^95

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _52 = put_tuple `caught`, _18
  br ^95

95:
  _20 = phi { _52, ^96 }, { _51, ^97 }

  %% trycatch_SUITE.erl:479
  _22 = call (`erlang`:`erase`/1), `eclectic`

  %% Aliased:
  %%    _22
  _102 = succeeded:body _22
  br _102, ^102, ^1

102:
  %% Argument types:
  %%    _20 => {'caught', any()} | {'value', any()}
  %% Aliased:
  %%    _22
  %% Unique:
  %%    _20
  _53 = put_tuple _20, _22
  %% Result type:
  %%    {{'caught', any()} | {'value', any()}, any()}
  %% Unique:
  %%    _53
  ret _53

1:
  _54 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _54
}

%% trycatch_SUITE.erl:483
%% Counter = 246
%% bs_ensure_opt: true
function `trycatch_SUITE`:`rethrow`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _90 = bif:is_list _0
  br _90, ^90, ^89

90:
  %% trycatch_SUITE.erl:484
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _22 = put_tuple `c`, _1

  %% Argument types:
  %%    _22 => {'c', pid()}
  %% Aliased:
  %%    _22
  _23 = put_list _22, `[make_ref]`

  %% Argument types:
  %%    _23 => nonempty_list('make_ref' | {'c', pid()})
  %% Aliased:
  %%    _23
  _24 = put_list `b`, _23

  %% Argument types:
  %%    _24 => nonempty_list('b' | 'make_ref' | {'c', pid()})
  %% Aliased:
  %%    _24
  V = put_tuple `a`, _24

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _25 = put_tuple `value`, V

  %% trycatch_SUITE.erl:486
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    V
  %% Unique:
  %%    _25
  _26 = call (`rethrow_1`/2), _25, V

  %% Aliased:
  %%    _26
  _91 = succeeded:body _26
  br _91, ^91, ^1

91:
  %% Argument types:
  %%    _26 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _26
  _234 = bif:'=:=' _26, `{value2,value1}`
  br _234, ^234, ^93

234:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _27 = put_tuple `error`, V

  %% trycatch_SUITE.erl:488
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Unique:
  %%    _27
  _28 = call (`rethrow_2`/2), _27, `undefined`

  %% Aliased:
  %%    _28
  _94 = succeeded:body _28
  br _94, ^94, ^1

94:
  %% Argument types:
  %%    _28 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Aliased:
  %%    _28
  _230 = is_tagged_tuple _28, `2`, `caught2`
  br _230, ^227, ^96

227:
  %% Argument types:
  %%    _28 => {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _28
  _29 = get_tuple_element _28, `1`

  %% Argument types:
  %%    _29 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _29
  _224 = is_tagged_tuple _29, `2`, `error`
  br _224, ^221, ^96

221:
  %% Argument types:
  %%    _29 => {'error', any()}
  %% Aliased:
  %%    _29
  _31 = get_tuple_element _29, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _31, 
  %%    V
  _97 = bif:'=:=' _31, V
  br _97, ^97, ^96

97:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _33 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:490
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _33
  _34 = call (`rethrow_1`/2), _33, `error`

  %% Aliased:
  %%    _34
  _98 = succeeded:body _34
  br _98, ^98, ^1

98:
  %% Argument types:
  %%    _34 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _34
  _217 = is_tagged_tuple _34, `2`, `caught2`
  br _217, ^214, ^100

214:
  %% Argument types:
  %%    _34 => {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _34
  _35 = get_tuple_element _34, `1`

  %% Argument types:
  %%    _35 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _35
  _211 = is_tagged_tuple _35, `2`, `exit`
  br _211, ^208, ^100

208:
  %% Argument types:
  %%    _35 => {'exit', any()}
  %% Aliased:
  %%    _35
  _37 = get_tuple_element _35, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _37, 
  %%    V
  _101 = bif:'=:=' _37, V
  br _101, ^101, ^100

101:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _39 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:492
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _39
  _40 = call (`rethrow_1`/2), _39, `undefined`

  %% Aliased:
  %%    _40
  _102 = succeeded:body _40
  br _102, ^102, ^1

102:
  %% Argument types:
  %%    _40 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _40
  _204 = is_tagged_tuple _40, `2`, `caught2`
  br _204, ^201, ^104

201:
  %% Argument types:
  %%    _40 => {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _40
  _41 = get_tuple_element _40, `1`

  %% Argument types:
  %%    _41 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _41
  _198 = is_tagged_tuple _41, `2`, `throw`
  br _198, ^195, ^104

195:
  %% Argument types:
  %%    _41 => {'throw', any()}
  %% Aliased:
  %%    _41
  _43 = get_tuple_element _41, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _43, 
  %%    V
  _105 = bif:'=:=' _43, V
  br _105, ^105, ^104

105:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _45 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:494
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Unique:
  %%    _45
  _46 = call (`rethrow_2`/2), _45, `undefined`

  %% Aliased:
  %%    _46
  _106 = succeeded:body _46
  br _106, ^106, ^1

106:
  %% Argument types:
  %%    _46 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Aliased:
  %%    _46
  _191 = is_tagged_tuple _46, `2`, `caught2`
  br _191, ^188, ^108

188:
  %% Argument types:
  %%    _46 => {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _46
  _47 = get_tuple_element _46, `1`

  %% Argument types:
  %%    _47 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _47
  _185 = is_tagged_tuple _47, `2`, `throw`
  br _185, ^182, ^108

182:
  %% Argument types:
  %%    _47 => {'throw', any()}
  %% Aliased:
  %%    _47
  _49 = get_tuple_element _47, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _49, 
  %%    V
  _109 = bif:'=:=' _49, V
  br _109, ^109, ^108

109:
  %% trycatch_SUITE.erl:496
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  _51 = call (`rethrow_1`/2), `{add,{0,a}}`, `throw`

  %% Aliased:
  %%    _51
  _110 = succeeded:body _51
  br _110, ^110, ^1

110:
  %% Argument types:
  %%    _51 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _51
  _180 = bif:'=:=' _51, `{caught2,{error,badarith}}`
  br _180, ^180, ^112

180:
  %% trycatch_SUITE.erl:498
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  _52 = call (`rethrow_2`/2), `function_clause`, `undefined`

  %% Aliased:
  %%    _52
  _113 = succeeded:body _52
  br _113, ^113, ^1

113:
  %% Argument types:
  %%    _52 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Aliased:
  %%    _52
  _178 = bif:'=:=' _52, `{caught2,{error,function_clause}}`
  br _178, ^178, ^115

178:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _53 = put_tuple `value`, V

  %% trycatch_SUITE.erl:500
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _53
  _54 = call (`rethrow_1`/2), _53, `exit`

  %% Aliased:
  %%    _54
  _116 = succeeded:body _54
  br _116, ^116, ^1

116:
  %% Argument types:
  %%    _54 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _54
  _174 = is_tagged_tuple _54, `2`, `caught2`
  br _174, ^171, ^118

171:
  %% Argument types:
  %%    _54 => {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _54
  _55 = get_tuple_element _54, `1`

  %% Argument types:
  %%    _55 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _55
  _168 = is_tagged_tuple _55, `2`, `error`
  br _168, ^165, ^118

165:
  %% Argument types:
  %%    _55 => {'error', any()}
  %% Aliased:
  %%    _55
  _57 = get_tuple_element _55, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57
  _162 = is_tagged_tuple _57, `2`, `try_clause`
  br _162, ^159, ^118

159:
  %% Argument types:
  %%    _57 => {'try_clause', any()}
  %% Aliased:
  %%    _57
  _59 = get_tuple_element _57, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _59, 
  %%    V
  _119 = bif:'=:=' _59, V
  br _119, ^119, ^118

119:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _61 = put_tuple `error`, V

  %% trycatch_SUITE.erl:502
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _61
  _62 = call (`rethrow_1`/2), _61, `error`

  %% Aliased:
  %%    _62
  _120 = succeeded:body _62
  br _120, ^120, ^1

120:
  %% Argument types:
  %%    _62 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _62
  _155 = is_tagged_tuple _62, `2`, `value2`
  br _155, ^152, ^122

152:
  %% Argument types:
  %%    _62 => {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _62
  _63 = get_tuple_element _62, `1`

  %% Argument types:
  %%    _63 => 'value1' | {'caught1', any()}
  %% Aliased:
  %%    _63
  _149 = bif:is_tuple _63
  br _149, ^146, ^122

146:
  %% Argument types:
  %%    _63 => {'caught1', any()}
  %% Aliased:
  %%    _63
  _65 = get_tuple_element _63, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _65, 
  %%    V
  _123 = bif:'=:=' _65, V
  br _123, ^123, ^122

123:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _67 = put_tuple `exit`, V

  %% trycatch_SUITE.erl:504
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _67
  _68 = call (`rethrow_1`/2), _67, `exit`

  %% Aliased:
  %%    _68
  _124 = succeeded:body _68
  br _124, ^124, ^1

124:
  %% Argument types:
  %%    _68 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _68
  _142 = is_tagged_tuple _68, `2`, `value2`
  br _142, ^139, ^126

139:
  %% Argument types:
  %%    _68 => {'value2', 'value1' | {'caught1', any()}}
  %% Aliased:
  %%    _68
  _69 = get_tuple_element _68, `1`

  %% Argument types:
  %%    _69 => 'value1' | {'caught1', any()}
  %% Aliased:
  %%    _69
  _136 = bif:is_tuple _69
  br _136, ^133, ^126

133:
  %% Argument types:
  %%    _69 => {'caught1', any()}
  %% Aliased:
  %%    _69
  _71 = get_tuple_element _69, `1`

  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _71, 
  %%    V
  _127 = bif:'=:=' _71, V
  br _127, ^127, ^126

127:
  %% Argument types:
  %%    V => {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    V
  _73 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:506
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Aliased:
  %%    V
  %% Unique:
  %%    _73
  _74 = call (`rethrow_2`/2), _73, V

  %% Aliased:
  %%    _74
  _128 = succeeded:body _74
  br _128, ^128, ^1

128:
  %% Argument types:
  %%    _74 => {'caught2', {'error' | 'exit' | 'throw', any()}} | {'value2', 'caught1' | 'value1'}
  %% Aliased:
  %%    _74
  _131 = bif:'=:=' _74, `{value2,caught1}`
  br _131, ^131, ^130

131:
  %% Result type:
  %%    'ok'
  ret `ok`

130:
  %% trycatch_SUITE.erl:505
  %% Aliased:
  %%    _74
  _75 = match_fail `badmatch`, _74

  %% Unique:
  %%    _75
  _132 = succeeded:body _75
  br ^1

126:
  %% trycatch_SUITE.erl:503
  %% Aliased:
  %%    _68
  _76 = match_fail `badmatch`, _68

  %% Unique:
  %%    _76
  _145 = succeeded:body _76
  br ^1

122:
  %% trycatch_SUITE.erl:501
  %% Aliased:
  %%    _62
  _77 = match_fail `badmatch`, _62

  %% Unique:
  %%    _77
  _158 = succeeded:body _77
  br ^1

118:
  %% trycatch_SUITE.erl:499
  %% Aliased:
  %%    _54
  _78 = match_fail `badmatch`, _54

  %% Unique:
  %%    _78
  _177 = succeeded:body _78
  br ^1

115:
  %% trycatch_SUITE.erl:497
  %% Aliased:
  %%    _52
  _79 = match_fail `badmatch`, _52

  %% Unique:
  %%    _79
  _179 = succeeded:body _79
  br ^1

112:
  %% trycatch_SUITE.erl:495
  %% Aliased:
  %%    _51
  _80 = match_fail `badmatch`, _51

  %% Unique:
  %%    _80
  _181 = succeeded:body _80
  br ^1

108:
  %% trycatch_SUITE.erl:493
  %% Aliased:
  %%    _46
  _81 = match_fail `badmatch`, _46

  %% Unique:
  %%    _81
  _194 = succeeded:body _81
  br ^1

104:
  %% trycatch_SUITE.erl:491
  %% Aliased:
  %%    _40
  _82 = match_fail `badmatch`, _40

  %% Unique:
  %%    _82
  _207 = succeeded:body _82
  br ^1

100:
  %% trycatch_SUITE.erl:489
  %% Aliased:
  %%    _34
  _83 = match_fail `badmatch`, _34

  %% Unique:
  %%    _83
  _220 = succeeded:body _83
  br ^1

96:
  %% trycatch_SUITE.erl:487
  %% Aliased:
  %%    _28
  _84 = match_fail `badmatch`, _28

  %% Unique:
  %%    _84
  _233 = succeeded:body _84
  br ^1

93:
  %% trycatch_SUITE.erl:485
  %% Aliased:
  %%    _26
  _85 = match_fail `badmatch`, _26

  %% Unique:
  %%    _85
  _235 = succeeded:body _85
  br ^1

89:
  %% trycatch_SUITE.erl:483
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-rethrow/1-',1}}
  _86 = match_fail `function_clause`, _0

  %% Unique:
  %%    _86
  _236 = succeeded:body _86
  br ^1

1:
  _87 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _87
}

%% trycatch_SUITE.erl:509
%% Counter = 94
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'add', {0, 'a'}} | {'error', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}} | {'exit', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}} | {'throw', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}} | {'value', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}}
%%    _1 =>
%%     'error' | 'exit' | 'throw' | 'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
function `trycatch_SUITE`:`rethrow_1`(_0, _1) {
0:
  br ^92

92:
  _39 = new_try_tag `'try'`
  br _39, ^91, ^36

91:
  br ^93

93:
  _44 = new_try_tag `'try'`
  br _44, ^43, ^41

43:
  %% trycatch_SUITE.erl:510
  %% Unique:
  %%    _0
  _25 = call (`foo`/1), _0

  %% Aliased:
  %%    _25
  _45 = succeeded:body _25
  br _45, ^45, ^41

45:
  %% Unique:
  %%    _44
  _56 = kill_try_tag _44

  %% Argument types:
  %%    _1 => 'error' | 'exit' | 'throw' | 'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _1, 
  %%    _25
  _48 = bif:'=:=' _25, _1
  br _48, ^48, ^47

48:
  br ^42

47:
  %% trycatch_SUITE.erl:510
  %% Aliased:
  %%    _25
  _27 = match_fail `try_clause`, _25

  %% Unique:
  %%    _27
  _49 = succeeded:body _27
  br ^36

41:
  %% Unique:
  %%    _44
  _54 = landingpad `'try'`, _44

  %% Aliased:
  %%    _54
  _6 = extract _54, `0`

  %% Aliased:
  %%    _54
  _5 = extract _54, `1`

  %% Aliased:
  %%    _54
  _4 = extract _54, `2`

  %% Unique:
  %%    _44
  _55 = kill_try_tag _44

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %%    _1 => 'error' | 'exit' | 'throw' | 'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _6
  _52 = bif:'=:=' _6, _1
  br _52, ^52, ^51

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _29 = put_tuple `caught1`, _5
  br ^42

42:
  _23 = phi { `value1`, ^48 }, { _29, ^52 }

  %% Unique:
  %%    _39
  _59 = kill_try_tag _39

  %% Argument types:
  %%    _23 => 'value1' | {'caught1', any()}
  %% Unique:
  %%    _23
  _31 = put_tuple `value2`, _23
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any()}}
  %% Unique:
  %%    _31
  ret _31

51:
  %% Aliased:
  %%    _4, 
  %%    _5
  _30 = resume _4, _5

  %% Unique:
  %%    _30
  _53 = succeeded:body _30
  br ^36

36:
  %% Unique:
  %%    _39
  _57 = landingpad `'try'`, _39

  %% Aliased:
  %%    _57
  _11 = extract _57, `0`

  %% Aliased:
  %%    _57
  _10 = extract _57, `1`

  %% Unique:
  %%    _39
  _58 = kill_try_tag _39

  %% Argument types:
  %%    _11 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _11
  _21 = put_tuple _11, _10

  %% Argument types:
  %%    _21 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _21
  _32 = put_tuple `caught2`, _21
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Unique:
  %%    _32
  ret _32
}

%% trycatch_SUITE.erl:520
%% Counter = 95
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'function_clause' | {'error', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}} | {'throw', {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}}
%%    _1 =>
%%     'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
function `trycatch_SUITE`:`rethrow_2`(_0, _1) {
0:
  br ^93

93:
  _38 = new_try_tag `'try'`
  br _38, ^92, ^35

92:
  br ^94

94:
  _43 = new_try_tag `'try'`
  br _43, ^42, ^40

42:
  %% trycatch_SUITE.erl:521
  %% Unique:
  %%    _0
  _25 = call (`foo`/1), _0

  %% Aliased:
  %%    _25
  _44 = succeeded:body _25
  br _44, ^44, ^40

44:
  %% Unique:
  %%    _43
  _57 = kill_try_tag _43

  %% Argument types:
  %%    _1 => 'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _1, 
  %%    _25
  _47 = bif:'=:=' _25, _1
  br _47, ^47, ^46

47:
  br ^41

46:
  %% trycatch_SUITE.erl:521
  %% Aliased:
  %%    _25
  _27 = match_fail `try_clause`, _25

  %% Unique:
  %%    _27
  _48 = succeeded:body _27
  br ^35

40:
  %% Unique:
  %%    _43
  _55 = landingpad `'try'`, _43

  %% Aliased:
  %%    _55
  _6 = extract _55, `0`

  %% Aliased:
  %%    _55
  _5 = extract _55, `1`

  %% Aliased:
  %%    _55
  _4 = extract _55, `2`

  %% Unique:
  %%    _43
  _56 = kill_try_tag _43

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _53 = bif:'=:=' _6, `throw`
  br _53, ^52, ^50

52:
  %% Argument types:
  %%    _1 => 'undefined' | {'a', nonempty_list('b' | 'make_ref' | {'c', pid()})}
  %% Aliased:
  %%    _1, 
  %%    _5
  _51 = bif:'=:=' _5, _1
  br _51, ^49, ^50

49:
  br ^41

41:
  _23 = phi { `value1`, ^47 }, { `caught1`, ^49 }

  %% Unique:
  %%    _38
  _60 = kill_try_tag _38

  %% Argument types:
  %%    _23 => 'caught1' | 'value1'
  %% Unique:
  %%    _23
  _30 = put_tuple `value2`, _23
  %% Result type:
  %%    {'value2', 'caught1' | 'value1'}
  %% Unique:
  %%    _30
  ret _30

50:
  %% Aliased:
  %%    _4, 
  %%    _5
  _29 = resume _4, _5

  %% Unique:
  %%    _29
  _54 = succeeded:body _29
  br ^35

35:
  %% Unique:
  %%    _38
  _58 = landingpad `'try'`, _38

  %% Aliased:
  %%    _58
  _11 = extract _58, `0`

  %% Aliased:
  %%    _58
  _10 = extract _58, `1`

  %% Unique:
  %%    _38
  _59 = kill_try_tag _38

  %% Argument types:
  %%    _11 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _11
  _21 = put_tuple _11, _10

  %% Argument types:
  %%    _21 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _21
  _31 = put_tuple `caught2`, _21
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}}
  %% Unique:
  %%    _31
  ret _31
}

%% trycatch_SUITE.erl:533
%% Counter = 737
%% bs_ensure_opt: true
function `trycatch_SUITE`:`nested_of`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _309 = bif:is_list _0
  br _309, ^309, ^308

309:
  %% trycatch_SUITE.erl:534
  %% Argument types:
  %%    
  _2 = bif:self

  %% trycatch_SUITE.erl:534
  _1 = call (`erlang`:`make_ref`/0)

  %% Argument types:
  %%    _2 => pid()
  %%    _1 => reference()
  %% Unique:
  %%    _1, 
  %%    _2
  _63 = put_list _2, _1

  %% Argument types:
  %%    _63 => nonempty_improper_list(pid(), reference())
  %% Aliased:
  %%    _63
  V = put_tuple _63, `1.4142136`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _71 = put_tuple V, `x1`

  %% Argument types:
  %%    _71 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _71
  _72 = put_tuple `value`, _71

  %% Argument types:
  %%    _72 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _71 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _71
  %% Unique:
  %%    _72
  _73 = put_tuple _72, `void`, _71

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _68 = put_tuple V, `x2`

  %% Argument types:
  %%    _68 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}
  %% Unique:
  %%    _68
  _69 = put_tuple `value`, _68

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _66 = put_tuple V, `x3`

  %% Argument types:
  %%    _66 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _66
  _67 = put_tuple `value`, _66

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _64 = put_tuple V, `x4`

  %% Argument types:
  %%    _64 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _64
  _65 = put_tuple `value`, _64

  %% trycatch_SUITE.erl:539
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _65, 
  %%    _67, 
  %%    _69, 
  %%    _73
  _74 = call (`nested_of_1`/4), _73, _69, _67, _65

  %% Aliased:
  %%    _74
  _311 = succeeded:body _74
  br _311, ^680, ^1

680:
  %% Argument types:
  %%    _74 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _74
  _78 = get_tuple_element _74, `0`

  %% Argument types:
  %%    _78 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _78
  _677 = is_tagged_tuple _78, `2`, `value`
  br _677, ^674, ^313

674:
  %% Argument types:
  %%    _78 => {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _78
  _79 = get_tuple_element _78, `1`

  %% Argument types:
  %%    _79 => {'caught1', any()} | {'value1', any()}
  %% Aliased:
  %%    _79
  _671 = is_tagged_tuple _79, `2`, `value1`
  br _671, ^668, ^313

668:
  %% Argument types:
  %%    _79 => {'value1', any()}
  %% Aliased:
  %%    _79
  _81 = get_tuple_element _79, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _81
  _665 = bif:is_tuple _81
  br _665, ^665, ^313

665:
  %% Argument types:
  %%    _81 => {...}
  %% Aliased:
  %%    _81
  _666 = bif:tuple_size _81

  %% Argument types:
  %%    _666 => 0..16777215
  %% Unique:
  %%    _666
  _667 = bif:'=:=' _666, `2`
  br _667, ^664, ^313

664:
  %% Argument types:
  %%    _81 => {any(), any()}
  %% Aliased:
  %%    _81
  _83 = get_tuple_element _81, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _663 = bif:'=:=' _83, `x2`
  br _663, ^662, ^313

662:
  %% Argument types:
  %%    _74 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _74
  _77 = get_tuple_element _74, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _659 = bif:is_tuple _77
  br _659, ^659, ^313

659:
  %% Argument types:
  %%    _77 => {...}
  %% Aliased:
  %%    _77
  _660 = bif:tuple_size _77

  %% Argument types:
  %%    _660 => 0..16777215
  %% Unique:
  %%    _660
  _661 = bif:'=:=' _660, `2`
  br _661, ^658, ^313

658:
  %% Argument types:
  %%    _77 => {any(), any()}
  %% Aliased:
  %%    _77
  _85 = get_tuple_element _77, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _657 = bif:'=:=' _85, `x3`
  br _657, ^656, ^313

656:
  %% Argument types:
  %%    _74 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _74
  _76 = get_tuple_element _74, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _76
  _653 = bif:is_tuple _76
  br _653, ^653, ^313

653:
  %% Argument types:
  %%    _76 => {...}
  %% Aliased:
  %%    _76
  _654 = bif:tuple_size _76

  %% Argument types:
  %%    _654 => 0..16777215
  %% Unique:
  %%    _654
  _655 = bif:'=:=' _654, `2`
  br _655, ^652, ^313

652:
  %% Argument types:
  %%    _76 => {any(), any()}
  %% Aliased:
  %%    _76
  _87 = get_tuple_element _76, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _651 = bif:'=:=' _87, `x4`
  br _651, ^650, ^313

650:
  %% Argument types:
  %%    _74 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _74
  _75 = get_tuple_element _74, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _649 = bif:'=:=' _75, `finalized`
  br _649, ^648, ^313

648:
  %% Argument types:
  %%    _81 => {any(), 'x2'}
  %% Aliased:
  %%    _81
  _84 = get_tuple_element _81, `0`

  %% trycatch_SUITE.erl:535
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _84, 
  %%    V
  _24 = bif:'=:=' _84, V
  br _24, ^719, ^313

719:
  %% Argument types:
  %%    _77 => {any(), 'x3'}
  %% Aliased:
  %%    _77
  _86 = get_tuple_element _77, `0`

  %% trycatch_SUITE.erl:536
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _86, 
  %%    V
  _22 = bif:'=:=' _86, V
  br _22, ^720, ^313

720:
  %% Argument types:
  %%    _76 => {any(), 'x4'}
  %% Aliased:
  %%    _76
  _88 = get_tuple_element _76, `0`

  %% trycatch_SUITE.erl:537
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _88, 
  %%    V
  _23 = bif:'=:=' _88, V
  br _23, ^316, ^313

316:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _97 = put_tuple V, `x1`

  %% Argument types:
  %%    _97 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _97
  _98 = put_tuple `value`, _97

  %% Argument types:
  %%    _98 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _97 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _97
  %% Unique:
  %%    _98
  _99 = put_tuple _98, `void`, _97

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _94 = put_tuple V, `x2`

  %% Argument types:
  %%    _94 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}
  %% Unique:
  %%    _94
  _95 = put_tuple `throw`, _94

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _92 = put_tuple V, `x3`

  %% Argument types:
  %%    _92 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _92
  _93 = put_tuple `value`, _92

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _90 = put_tuple V, `x4`

  %% Argument types:
  %%    _90 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _90
  _91 = put_tuple `value`, _90

  %% trycatch_SUITE.erl:545
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _91, 
  %%    _93, 
  %%    _95, 
  %%    _99
  _100 = call (`nested_of_1`/4), _99, _95, _93, _91

  %% Aliased:
  %%    _100
  _317 = succeeded:body _100
  br _317, ^643, ^1

643:
  %% Argument types:
  %%    _100 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _100
  _104 = get_tuple_element _100, `0`

  %% Argument types:
  %%    _104 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _104
  _640 = is_tagged_tuple _104, `2`, `caught`
  br _640, ^637, ^319

637:
  %% Argument types:
  %%    _104 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _104
  _105 = get_tuple_element _104, `1`

  %% Argument types:
  %%    _105 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _105
  _634 = is_tagged_tuple _105, `2`, `throw`
  br _634, ^631, ^319

631:
  %% Argument types:
  %%    _105 => {'throw', any()}
  %% Aliased:
  %%    _105
  _107 = get_tuple_element _105, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _107
  _628 = bif:is_tuple _107
  br _628, ^628, ^319

628:
  %% Argument types:
  %%    _107 => {...}
  %% Aliased:
  %%    _107
  _629 = bif:tuple_size _107

  %% Argument types:
  %%    _629 => 0..16777215
  %% Unique:
  %%    _629
  _630 = bif:'=:=' _629, `2`
  br _630, ^627, ^319

627:
  %% Argument types:
  %%    _107 => {any(), any()}
  %% Aliased:
  %%    _107
  _109 = get_tuple_element _107, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _109
  _626 = bif:'=:=' _109, `x2`
  br _626, ^625, ^319

625:
  %% Argument types:
  %%    _100 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _100
  _103 = get_tuple_element _100, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _622 = bif:is_tuple _103
  br _622, ^622, ^319

622:
  %% Argument types:
  %%    _103 => {...}
  %% Aliased:
  %%    _103
  _623 = bif:tuple_size _103

  %% Argument types:
  %%    _623 => 0..16777215
  %% Unique:
  %%    _623
  _624 = bif:'=:=' _623, `2`
  br _624, ^621, ^319

621:
  %% Argument types:
  %%    _103 => {any(), any()}
  %% Aliased:
  %%    _103
  _111 = get_tuple_element _103, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _620 = bif:'=:=' _111, `x3`
  br _620, ^619, ^319

619:
  %% Argument types:
  %%    _100 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _100
  _102 = get_tuple_element _100, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _616 = bif:is_tuple _102
  br _616, ^616, ^319

616:
  %% Argument types:
  %%    _102 => {...}
  %% Aliased:
  %%    _102
  _617 = bif:tuple_size _102

  %% Argument types:
  %%    _617 => 0..16777215
  %% Unique:
  %%    _617
  _618 = bif:'=:=' _617, `2`
  br _618, ^615, ^319

615:
  %% Argument types:
  %%    _102 => {any(), any()}
  %% Aliased:
  %%    _102
  _113 = get_tuple_element _102, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _614 = bif:'=:=' _113, `x4`
  br _614, ^613, ^319

613:
  %% Argument types:
  %%    _100 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _100
  _101 = get_tuple_element _100, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _101
  _612 = bif:'=:=' _101, `finalized`
  br _612, ^611, ^319

611:
  %% Argument types:
  %%    _107 => {any(), 'x2'}
  %% Aliased:
  %%    _107
  _110 = get_tuple_element _107, `0`

  %% trycatch_SUITE.erl:541
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _110, 
  %%    V
  _31 = bif:'=:=' _110, V
  br _31, ^713, ^319

713:
  %% Argument types:
  %%    _103 => {any(), 'x3'}
  %% Aliased:
  %%    _103
  _112 = get_tuple_element _103, `0`

  %% trycatch_SUITE.erl:542
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _112, 
  %%    V
  _29 = bif:'=:=' _112, V
  br _29, ^714, ^319

714:
  %% Argument types:
  %%    _102 => {any(), 'x4'}
  %% Aliased:
  %%    _102
  _114 = get_tuple_element _102, `0`

  %% trycatch_SUITE.erl:543
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _114, 
  %%    V
  _30 = bif:'=:=' _114, V
  br _30, ^322, ^319

322:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _121 = put_tuple V, `x1`

  %% Argument types:
  %%    _121 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _121
  _122 = put_tuple `value`, _121

  %% Argument types:
  %%    _122 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _121 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _121
  %% Unique:
  %%    _122
  _123 = put_tuple _122, `void`, _121

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _118 = put_tuple V, `x2`

  %% Argument types:
  %%    _118 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}
  %% Unique:
  %%    _118
  _119 = put_tuple `throw`, _118

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _116 = put_tuple V, `x4`

  %% Argument types:
  %%    _116 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _116
  _117 = put_tuple `value`, _116

  %% trycatch_SUITE.erl:551
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _117, 
  %%    _119, 
  %%    _123
  _124 = call (`nested_of_1`/4), _123, _119, `{'div',{1,0}}`, _117

  %% Aliased:
  %%    _124
  _323 = succeeded:body _124
  br _323, ^606, ^1

606:
  %% Argument types:
  %%    _124 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _124
  _128 = get_tuple_element _124, `0`

  %% Argument types:
  %%    _128 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _128
  _605 = bif:'=:=' _128, `{caught,{error,badarith}}`
  br _605, ^605, ^325

605:
  %% Argument types:
  %%    _124 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _124
  _127 = get_tuple_element _124, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _127
  _604 = bif:'=:=' _127, `undefined`
  br _604, ^603, ^325

603:
  %% Argument types:
  %%    _124 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _124
  _126 = get_tuple_element _124, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _600 = bif:is_tuple _126
  br _600, ^600, ^325

600:
  %% Argument types:
  %%    _126 => {...}
  %% Aliased:
  %%    _126
  _601 = bif:tuple_size _126

  %% Argument types:
  %%    _601 => 0..16777215
  %% Unique:
  %%    _601
  _602 = bif:'=:=' _601, `2`
  br _602, ^599, ^325

599:
  %% Argument types:
  %%    _126 => {any(), any()}
  %% Aliased:
  %%    _126
  _129 = get_tuple_element _126, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _129
  _598 = bif:'=:=' _129, `x4`
  br _598, ^597, ^325

597:
  %% Argument types:
  %%    _124 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _124
  _125 = get_tuple_element _124, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _125
  _596 = bif:'=:=' _125, `finalized`
  br _596, ^595, ^325

595:
  %% Argument types:
  %%    _126 => {any(), 'x4'}
  %% Aliased:
  %%    _126
  _130 = get_tuple_element _126, `0`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _130, 
  %%    V
  _326 = bif:'=:=' _130, V
  br _326, ^326, ^325

326:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _134 = put_tuple V, `x1`

  %% Argument types:
  %%    _134 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _134
  _135 = put_tuple `value`, _134

  %% Argument types:
  %%    _135 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _134 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _134
  %% Unique:
  %%    _135
  _136 = put_tuple _135, `void`, _134

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _131 = put_tuple V, `x2`

  %% Argument types:
  %%    _131 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}
  %% Unique:
  %%    _131
  _132 = put_tuple `throw`, _131

  %% trycatch_SUITE.erl:557
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _132, 
  %%    _136
  _137 = call (`nested_of_1`/4), _136, _132, `{'div',{1,0}}`, `{add,{0,b}}`

  %% Aliased:
  %%    _137
  _327 = succeeded:body _137
  br _327, ^327, ^1

327:
  %% Argument types:
  %%    _137 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _137
  _593 = bif:'=:=' _137, `{{caught,{error,badarith}},undefined,undefined,finalized}`
  br _593, ^593, ^329

593:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _142 = put_tuple V, `x1`

  %% Argument types:
  %%    _142 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Unique:
  %%    _142
  _143 = put_tuple `value`, _142

  %% Argument types:
  %%    _143 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _143
  _144 = put_tuple _143, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _140 = put_tuple V, `x3`

  %% Argument types:
  %%    _140 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _140
  _141 = put_tuple `value`, _140

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _138 = put_tuple V, `x4`

  %% Argument types:
  %%    _138 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _138
  _139 = put_tuple `value`, _138

  %% trycatch_SUITE.erl:564
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _139, 
  %%    _141, 
  %%    _144
  _145 = call (`nested_of_1`/4), _144, `void`, _141, _139

  %% Aliased:
  %%    _145
  _330 = succeeded:body _145
  br _330, ^588, ^1

588:
  %% Argument types:
  %%    _145 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _145
  _149 = get_tuple_element _145, `0`

  %% Argument types:
  %%    _149 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _149
  _585 = is_tagged_tuple _149, `2`, `caught`
  br _585, ^582, ^332

582:
  %% Argument types:
  %%    _149 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _149
  _150 = get_tuple_element _149, `1`

  %% Argument types:
  %%    _150 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _150
  _579 = is_tagged_tuple _150, `2`, `error`
  br _579, ^576, ^332

576:
  %% Argument types:
  %%    _150 => {'error', any()}
  %% Aliased:
  %%    _150
  _152 = get_tuple_element _150, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _152
  _573 = is_tagged_tuple _152, `2`, `try_clause`
  br _573, ^570, ^332

570:
  %% Argument types:
  %%    _152 => {'try_clause', any()}
  %% Aliased:
  %%    _152
  _154 = get_tuple_element _152, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _154
  _567 = bif:is_tuple _154
  br _567, ^567, ^332

567:
  %% Argument types:
  %%    _154 => {...}
  %% Aliased:
  %%    _154
  _568 = bif:tuple_size _154

  %% Argument types:
  %%    _568 => 0..16777215
  %% Unique:
  %%    _568
  _569 = bif:'=:=' _568, `2`
  br _569, ^566, ^332

566:
  %% Argument types:
  %%    _154 => {any(), any()}
  %% Aliased:
  %%    _154
  _156 = get_tuple_element _154, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _156
  _565 = bif:'=:=' _156, `x1`
  br _565, ^564, ^332

564:
  %% Argument types:
  %%    _145 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _145
  _148 = get_tuple_element _145, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _148
  _561 = bif:is_tuple _148
  br _561, ^561, ^332

561:
  %% Argument types:
  %%    _148 => {...}
  %% Aliased:
  %%    _148
  _562 = bif:tuple_size _148

  %% Argument types:
  %%    _562 => 0..16777215
  %% Unique:
  %%    _562
  _563 = bif:'=:=' _562, `2`
  br _563, ^560, ^332

560:
  %% Argument types:
  %%    _148 => {any(), any()}
  %% Aliased:
  %%    _148
  _158 = get_tuple_element _148, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158
  _559 = bif:'=:=' _158, `x3`
  br _559, ^558, ^332

558:
  %% Argument types:
  %%    _145 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _145
  _147 = get_tuple_element _145, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _147
  _555 = bif:is_tuple _147
  br _555, ^555, ^332

555:
  %% Argument types:
  %%    _147 => {...}
  %% Aliased:
  %%    _147
  _556 = bif:tuple_size _147

  %% Argument types:
  %%    _556 => 0..16777215
  %% Unique:
  %%    _556
  _557 = bif:'=:=' _556, `2`
  br _557, ^554, ^332

554:
  %% Argument types:
  %%    _147 => {any(), any()}
  %% Aliased:
  %%    _147
  _160 = get_tuple_element _147, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _160
  _553 = bif:'=:=' _160, `x4`
  br _553, ^552, ^332

552:
  %% Argument types:
  %%    _145 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _145
  _146 = get_tuple_element _145, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _146
  _551 = bif:'=:=' _146, `finalized`
  br _551, ^550, ^332

550:
  %% Argument types:
  %%    _154 => {any(), 'x1'}
  %% Aliased:
  %%    _154
  _157 = get_tuple_element _154, `0`

  %% trycatch_SUITE.erl:560
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _157, 
  %%    V
  _39 = bif:'=:=' _157, V
  br _39, ^707, ^332

707:
  %% Argument types:
  %%    _148 => {any(), 'x3'}
  %% Aliased:
  %%    _148
  _159 = get_tuple_element _148, `0`

  %% trycatch_SUITE.erl:561
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _159, 
  %%    V
  _37 = bif:'=:=' _159, V
  br _37, ^708, ^332

708:
  %% Argument types:
  %%    _147 => {any(), 'x4'}
  %% Aliased:
  %%    _147
  _161 = get_tuple_element _147, `0`

  %% trycatch_SUITE.erl:562
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _161, 
  %%    V
  _38 = bif:'=:=' _161, V
  br _38, ^335, ^332

335:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _167 = put_tuple V, `x1`

  %% Argument types:
  %%    _167 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Unique:
  %%    _167
  _168 = put_tuple `value`, _167

  %% Argument types:
  %%    _168 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _168
  _169 = put_tuple _168, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _165 = put_tuple V, `x3`

  %% Argument types:
  %%    _165 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _165
  _166 = put_tuple `exit`, _165

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _163 = put_tuple V, `x4`

  %% Argument types:
  %%    _163 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _163
  _164 = put_tuple `value`, _163

  %% trycatch_SUITE.erl:570
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _164, 
  %%    _166, 
  %%    _169
  _170 = call (`nested_of_1`/4), _169, `void`, _166, _164

  %% Aliased:
  %%    _170
  _336 = succeeded:body _170
  br _336, ^545, ^1

545:
  %% Argument types:
  %%    _170 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _170
  _174 = get_tuple_element _170, `0`

  %% Argument types:
  %%    _174 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _174
  _542 = is_tagged_tuple _174, `2`, `caught`
  br _542, ^539, ^338

539:
  %% Argument types:
  %%    _174 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _174
  _175 = get_tuple_element _174, `1`

  %% Argument types:
  %%    _175 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _175
  _536 = is_tagged_tuple _175, `2`, `exit`
  br _536, ^533, ^338

533:
  %% Argument types:
  %%    _175 => {'exit', any()}
  %% Aliased:
  %%    _175
  _177 = get_tuple_element _175, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _177
  _530 = bif:is_tuple _177
  br _530, ^530, ^338

530:
  %% Argument types:
  %%    _177 => {...}
  %% Aliased:
  %%    _177
  _531 = bif:tuple_size _177

  %% Argument types:
  %%    _531 => 0..16777215
  %% Unique:
  %%    _531
  _532 = bif:'=:=' _531, `2`
  br _532, ^529, ^338

529:
  %% Argument types:
  %%    _177 => {any(), any()}
  %% Aliased:
  %%    _177
  _179 = get_tuple_element _177, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _528 = bif:'=:=' _179, `x3`
  br _528, ^527, ^338

527:
  %% Argument types:
  %%    _170 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _170
  _173 = get_tuple_element _170, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _173
  _526 = bif:'=:=' _173, `undefined`
  br _526, ^525, ^338

525:
  %% Argument types:
  %%    _170 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _170
  _172 = get_tuple_element _170, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _522 = bif:is_tuple _172
  br _522, ^522, ^338

522:
  %% Argument types:
  %%    _172 => {...}
  %% Aliased:
  %%    _172
  _523 = bif:tuple_size _172

  %% Argument types:
  %%    _523 => 0..16777215
  %% Unique:
  %%    _523
  _524 = bif:'=:=' _523, `2`
  br _524, ^521, ^338

521:
  %% Argument types:
  %%    _172 => {any(), any()}
  %% Aliased:
  %%    _172
  _181 = get_tuple_element _172, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _181
  _520 = bif:'=:=' _181, `x4`
  br _520, ^519, ^338

519:
  %% Argument types:
  %%    _170 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _170
  _171 = get_tuple_element _170, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _171
  _518 = bif:'=:=' _171, `finalized`
  br _518, ^517, ^338

517:
  %% Argument types:
  %%    _177 => {any(), 'x3'}
  %% Aliased:
  %%    _177
  _180 = get_tuple_element _177, `0`

  %% trycatch_SUITE.erl:566
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _180, 
  %%    V
  _43 = bif:'=:=' _180, V
  br _43, ^702, ^338

702:
  %% Argument types:
  %%    _172 => {any(), 'x4'}
  %% Aliased:
  %%    _172
  _182 = get_tuple_element _172, `0`

  %% trycatch_SUITE.erl:568
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _182, 
  %%    V
  _44 = bif:'=:=' _182, V
  br _44, ^340, ^338

340:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _188 = put_tuple V, `x1`

  %% Argument types:
  %%    _188 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Unique:
  %%    _188
  _189 = put_tuple `value`, _188

  %% Argument types:
  %%    _189 => {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _189
  _190 = put_tuple _189, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _186 = put_tuple V, `x3`

  %% Argument types:
  %%    _186 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _186
  _187 = put_tuple `exit`, _186

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _184 = put_tuple V, `x4`

  %% Argument types:
  %%    _184 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _184
  _185 = put_tuple `throw`, _184

  %% trycatch_SUITE.erl:576
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _185, 
  %%    _187, 
  %%    _190
  _191 = call (`nested_of_1`/4), _190, `void`, _187, _185

  %% Aliased:
  %%    _191
  _341 = succeeded:body _191
  br _341, ^512, ^1

512:
  %% Argument types:
  %%    _191 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _191
  _195 = get_tuple_element _191, `0`

  %% Argument types:
  %%    _195 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _195
  _509 = is_tagged_tuple _195, `2`, `caught`
  br _509, ^506, ^343

506:
  %% Argument types:
  %%    _195 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _195
  _196 = get_tuple_element _195, `1`

  %% Argument types:
  %%    _196 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _196
  _503 = is_tagged_tuple _196, `2`, `throw`
  br _503, ^500, ^343

500:
  %% Argument types:
  %%    _196 => {'throw', any()}
  %% Aliased:
  %%    _196
  _198 = get_tuple_element _196, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _198
  _497 = bif:is_tuple _198
  br _497, ^497, ^343

497:
  %% Argument types:
  %%    _198 => {...}
  %% Aliased:
  %%    _198
  _498 = bif:tuple_size _198

  %% Argument types:
  %%    _498 => 0..16777215
  %% Unique:
  %%    _498
  _499 = bif:'=:=' _498, `2`
  br _499, ^496, ^343

496:
  %% Argument types:
  %%    _198 => {any(), any()}
  %% Aliased:
  %%    _198
  _200 = get_tuple_element _198, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _200
  _495 = bif:'=:=' _200, `x4`
  br _495, ^494, ^343

494:
  %% Argument types:
  %%    _191 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _191
  _194 = get_tuple_element _191, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _194
  _493 = bif:'=:=' _194, `undefined`
  br _493, ^492, ^343

492:
  %% Argument types:
  %%    _191 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _191
  _193 = get_tuple_element _191, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _193
  _491 = bif:'=:=' _193, `undefined`
  br _491, ^490, ^343

490:
  %% Argument types:
  %%    _191 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', 'undefined', any()}
  %% Aliased:
  %%    _191
  _192 = get_tuple_element _191, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _192
  _489 = bif:'=:=' _192, `finalized`
  br _489, ^488, ^343

488:
  %% Argument types:
  %%    _198 => {any(), 'x4'}
  %% Aliased:
  %%    _198
  _201 = get_tuple_element _198, `0`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _201, 
  %%    V
  _344 = bif:'=:=' _201, V
  br _344, ^344, ^343

344:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _209 = put_tuple V, `x1`

  %% Argument types:
  %%    _209 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _209
  _210 = put_tuple `error`, _209

  %% Argument types:
  %%    _210 => {'error', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _209 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _209
  %% Unique:
  %%    _210
  _211 = put_tuple _210, `error`, _209

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _206 = put_tuple V, `x2`

  %% Argument types:
  %%    _206 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}
  %% Unique:
  %%    _206
  _207 = put_tuple `value`, _206

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _204 = put_tuple V, `x3`

  %% Argument types:
  %%    _204 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _204
  _205 = put_tuple `value`, _204

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _202 = put_tuple V, `x4`

  %% Argument types:
  %%    _202 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _202
  _203 = put_tuple `value`, _202

  %% trycatch_SUITE.erl:583
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _203, 
  %%    _205, 
  %%    _207, 
  %%    _211
  _212 = call (`nested_of_1`/4), _211, _207, _205, _203

  %% Aliased:
  %%    _212
  _345 = succeeded:body _212
  br _345, ^483, ^1

483:
  %% Argument types:
  %%    _212 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _212
  _216 = get_tuple_element _212, `0`

  %% Argument types:
  %%    _216 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _216
  _480 = is_tagged_tuple _216, `2`, `value`
  br _480, ^477, ^347

477:
  %% Argument types:
  %%    _216 => {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _216
  _217 = get_tuple_element _216, `1`

  %% Argument types:
  %%    _217 => {'caught1', any()} | {'value1', any()}
  %% Aliased:
  %%    _217
  _474 = is_tagged_tuple _217, `2`, `caught1`
  br _474, ^471, ^347

471:
  %% Argument types:
  %%    _217 => {'caught1', any()}
  %% Aliased:
  %%    _217
  _219 = get_tuple_element _217, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _219
  _468 = bif:is_tuple _219
  br _468, ^468, ^347

468:
  %% Argument types:
  %%    _219 => {...}
  %% Aliased:
  %%    _219
  _469 = bif:tuple_size _219

  %% Argument types:
  %%    _469 => 0..16777215
  %% Unique:
  %%    _469
  _470 = bif:'=:=' _469, `2`
  br _470, ^467, ^347

467:
  %% Argument types:
  %%    _219 => {any(), any()}
  %% Aliased:
  %%    _219
  _221 = get_tuple_element _219, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _221
  _466 = bif:'=:=' _221, `x2`
  br _466, ^465, ^347

465:
  %% Argument types:
  %%    _212 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _212
  _215 = get_tuple_element _212, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _215
  _462 = bif:is_tuple _215
  br _462, ^462, ^347

462:
  %% Argument types:
  %%    _215 => {...}
  %% Aliased:
  %%    _215
  _463 = bif:tuple_size _215

  %% Argument types:
  %%    _463 => 0..16777215
  %% Unique:
  %%    _463
  _464 = bif:'=:=' _463, `2`
  br _464, ^461, ^347

461:
  %% Argument types:
  %%    _215 => {any(), any()}
  %% Aliased:
  %%    _215
  _223 = get_tuple_element _215, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _223
  _460 = bif:'=:=' _223, `x3`
  br _460, ^459, ^347

459:
  %% Argument types:
  %%    _212 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _212
  _214 = get_tuple_element _212, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _214
  _456 = bif:is_tuple _214
  br _456, ^456, ^347

456:
  %% Argument types:
  %%    _214 => {...}
  %% Aliased:
  %%    _214
  _457 = bif:tuple_size _214

  %% Argument types:
  %%    _457 => 0..16777215
  %% Unique:
  %%    _457
  _458 = bif:'=:=' _457, `2`
  br _458, ^455, ^347

455:
  %% Argument types:
  %%    _214 => {any(), any()}
  %% Aliased:
  %%    _214
  _225 = get_tuple_element _214, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _225
  _454 = bif:'=:=' _225, `x4`
  br _454, ^453, ^347

453:
  %% Argument types:
  %%    _212 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _212
  _213 = get_tuple_element _212, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _213
  _452 = bif:'=:=' _213, `finalized`
  br _452, ^451, ^347

451:
  %% Argument types:
  %%    _219 => {any(), 'x2'}
  %% Aliased:
  %%    _219
  _222 = get_tuple_element _219, `0`

  %% trycatch_SUITE.erl:579
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _222, 
  %%    V
  _51 = bif:'=:=' _222, V
  br _51, ^697, ^347

697:
  %% Argument types:
  %%    _215 => {any(), 'x3'}
  %% Aliased:
  %%    _215
  _224 = get_tuple_element _215, `0`

  %% trycatch_SUITE.erl:580
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _224, 
  %%    V
  _49 = bif:'=:=' _224, V
  br _49, ^698, ^347

698:
  %% Argument types:
  %%    _214 => {any(), 'x4'}
  %% Aliased:
  %%    _214
  _226 = get_tuple_element _214, `0`

  %% trycatch_SUITE.erl:581
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _226, 
  %%    V
  _50 = bif:'=:=' _226, V
  br _50, ^350, ^347

350:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _233 = put_tuple V, `x1`

  %% Argument types:
  %%    _233 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _233
  _234 = put_tuple `error`, _233

  %% Argument types:
  %%    _234 => {'error', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _233 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _233
  %% Unique:
  %%    _234
  _235 = put_tuple _234, `error`, _233

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _230 = put_tuple V, `x3`

  %% Argument types:
  %%    _230 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _230
  _231 = put_tuple `value`, _230

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _228 = put_tuple V, `x4`

  %% Argument types:
  %%    _228 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _228
  _229 = put_tuple `value`, _228

  %% trycatch_SUITE.erl:589
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _229, 
  %%    _231, 
  %%    _235
  _236 = call (`nested_of_1`/4), _235, `{add,{1,c}}`, _231, _229

  %% Aliased:
  %%    _236
  _351 = succeeded:body _236
  br _351, ^446, ^1

446:
  %% Argument types:
  %%    _236 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _236
  _240 = get_tuple_element _236, `0`

  %% Argument types:
  %%    _240 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _240
  _445 = bif:'=:=' _240, `{caught,{error,badarith}}`
  br _445, ^445, ^353

445:
  %% Argument types:
  %%    _236 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _236
  _239 = get_tuple_element _236, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _239
  _442 = bif:is_tuple _239
  br _442, ^442, ^353

442:
  %% Argument types:
  %%    _239 => {...}
  %% Aliased:
  %%    _239
  _443 = bif:tuple_size _239

  %% Argument types:
  %%    _443 => 0..16777215
  %% Unique:
  %%    _443
  _444 = bif:'=:=' _443, `2`
  br _444, ^441, ^353

441:
  %% Argument types:
  %%    _239 => {any(), any()}
  %% Aliased:
  %%    _239
  _241 = get_tuple_element _239, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _241
  _440 = bif:'=:=' _241, `x3`
  br _440, ^439, ^353

439:
  %% Argument types:
  %%    _236 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _236
  _238 = get_tuple_element _236, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _238
  _436 = bif:is_tuple _238
  br _436, ^436, ^353

436:
  %% Argument types:
  %%    _238 => {...}
  %% Aliased:
  %%    _238
  _437 = bif:tuple_size _238

  %% Argument types:
  %%    _437 => 0..16777215
  %% Unique:
  %%    _437
  _438 = bif:'=:=' _437, `2`
  br _438, ^435, ^353

435:
  %% Argument types:
  %%    _238 => {any(), any()}
  %% Aliased:
  %%    _238
  _243 = get_tuple_element _238, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _243
  _434 = bif:'=:=' _243, `x4`
  br _434, ^433, ^353

433:
  %% Argument types:
  %%    _236 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _236
  _237 = get_tuple_element _236, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _237
  _432 = bif:'=:=' _237, `finalized`
  br _432, ^431, ^353

431:
  %% Argument types:
  %%    _239 => {any(), 'x3'}
  %% Aliased:
  %%    _239
  _242 = get_tuple_element _239, `0`

  %% trycatch_SUITE.erl:586
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _242, 
  %%    V
  _55 = bif:'=:=' _242, V
  br _55, ^692, ^353

692:
  %% Argument types:
  %%    _238 => {any(), 'x4'}
  %% Aliased:
  %%    _238
  _244 = get_tuple_element _238, `0`

  %% trycatch_SUITE.erl:587
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _244, 
  %%    V
  _56 = bif:'=:=' _244, V
  br _56, ^355, ^353

355:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _249 = put_tuple V, `x1`

  %% Argument types:
  %%    _249 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _249
  _250 = put_tuple `error`, _249

  %% Argument types:
  %%    _250 => {'error', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _249 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _249
  %% Unique:
  %%    _250
  _251 = put_tuple _250, `error`, _249

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _246 = put_tuple V, `x4`

  %% Argument types:
  %%    _246 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _246
  _247 = put_tuple `value`, _246

  %% trycatch_SUITE.erl:595
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _247, 
  %%    _251
  _252 = call (`nested_of_1`/4), _251, `{add,{1,c}}`, `{'div',{17,0}}`, _247

  %% Aliased:
  %%    _252
  _356 = succeeded:body _252
  br _356, ^426, ^1

426:
  %% Argument types:
  %%    _252 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _252
  _256 = get_tuple_element _252, `0`

  %% Argument types:
  %%    _256 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _256
  _425 = bif:'=:=' _256, `{caught,{error,badarith}}`
  br _425, ^425, ^358

425:
  %% Argument types:
  %%    _252 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _252
  _255 = get_tuple_element _252, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _255
  _424 = bif:'=:=' _255, `undefined`
  br _424, ^423, ^358

423:
  %% Argument types:
  %%    _252 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _252
  _254 = get_tuple_element _252, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _254
  _420 = bif:is_tuple _254
  br _420, ^420, ^358

420:
  %% Argument types:
  %%    _254 => {...}
  %% Aliased:
  %%    _254
  _421 = bif:tuple_size _254

  %% Argument types:
  %%    _421 => 0..16777215
  %% Unique:
  %%    _421
  _422 = bif:'=:=' _421, `2`
  br _422, ^419, ^358

419:
  %% Argument types:
  %%    _254 => {any(), any()}
  %% Aliased:
  %%    _254
  _257 = get_tuple_element _254, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _257
  _418 = bif:'=:=' _257, `x4`
  br _418, ^417, ^358

417:
  %% Argument types:
  %%    _252 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _252
  _253 = get_tuple_element _252, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _253
  _416 = bif:'=:=' _253, `finalized`
  br _416, ^415, ^358

415:
  %% Argument types:
  %%    _254 => {any(), 'x4'}
  %% Aliased:
  %%    _254
  _258 = get_tuple_element _254, `0`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _258, 
  %%    V
  _359 = bif:'=:=' _258, V
  br _359, ^359, ^358

359:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _261 = put_tuple V, `x1`

  %% Argument types:
  %%    _261 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _261
  _262 = put_tuple `error`, _261

  %% Argument types:
  %%    _262 => {'error', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %%    _261 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _261
  %% Unique:
  %%    _262
  _263 = put_tuple _262, `error`, _261

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _259 = put_tuple `abs`, V

  %% trycatch_SUITE.erl:601
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _259, 
  %%    _263
  _264 = call (`nested_of_1`/4), _263, `{add,{1,c}}`, `{'div',{17,0}}`, _259

  %% Aliased:
  %%    _264
  _360 = succeeded:body _264
  br _360, ^360, ^1

360:
  %% Argument types:
  %%    _264 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _264
  _413 = bif:'=:=' _264, `{{caught,{error,badarg}},undefined,undefined,finalized}`
  br _413, ^413, ^362

413:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _267 = put_tuple V, `x3`

  %% Argument types:
  %%    _267 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}
  %% Unique:
  %%    _267
  _268 = put_tuple `value`, _267

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _265 = put_tuple V, `x4`

  %% Argument types:
  %%    _265 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _265
  _266 = put_tuple `value`, _265

  %% trycatch_SUITE.erl:608
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _266, 
  %%    _268
  _269 = call (`nested_of_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _268, _266

  %% Aliased:
  %%    _269
  _363 = succeeded:body _269
  br _363, ^408, ^1

408:
  %% Argument types:
  %%    _269 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _269
  _273 = get_tuple_element _269, `0`

  %% Argument types:
  %%    _273 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _273
  _407 = bif:'=:=' _273, `{caught,{error,badarith}}`
  br _407, ^407, ^365

407:
  %% Argument types:
  %%    _269 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _269
  _272 = get_tuple_element _269, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _272
  _404 = bif:is_tuple _272
  br _404, ^404, ^365

404:
  %% Argument types:
  %%    _272 => {...}
  %% Aliased:
  %%    _272
  _405 = bif:tuple_size _272

  %% Argument types:
  %%    _405 => 0..16777215
  %% Unique:
  %%    _405
  _406 = bif:'=:=' _405, `2`
  br _406, ^403, ^365

403:
  %% Argument types:
  %%    _272 => {any(), any()}
  %% Aliased:
  %%    _272
  _274 = get_tuple_element _272, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _274
  _402 = bif:'=:=' _274, `x3`
  br _402, ^401, ^365

401:
  %% Argument types:
  %%    _269 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _269
  _271 = get_tuple_element _269, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _271
  _398 = bif:is_tuple _271
  br _398, ^398, ^365

398:
  %% Argument types:
  %%    _271 => {...}
  %% Aliased:
  %%    _271
  _399 = bif:tuple_size _271

  %% Argument types:
  %%    _399 => 0..16777215
  %% Unique:
  %%    _399
  _400 = bif:'=:=' _399, `2`
  br _400, ^397, ^365

397:
  %% Argument types:
  %%    _271 => {any(), any()}
  %% Aliased:
  %%    _271
  _276 = get_tuple_element _271, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _276
  _396 = bif:'=:=' _276, `x4`
  br _396, ^395, ^365

395:
  %% Argument types:
  %%    _269 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _269
  _270 = get_tuple_element _269, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _270
  _394 = bif:'=:=' _270, `finalized`
  br _394, ^393, ^365

393:
  %% Argument types:
  %%    _272 => {any(), 'x3'}
  %% Aliased:
  %%    _272
  _275 = get_tuple_element _272, `0`

  %% trycatch_SUITE.erl:605
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _275, 
  %%    V
  _60 = bif:'=:=' _275, V
  br _60, ^688, ^365

688:
  %% Argument types:
  %%    _271 => {any(), 'x4'}
  %% Aliased:
  %%    _271
  _277 = get_tuple_element _271, `0`

  %% trycatch_SUITE.erl:606
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _277, 
  %%    V
  _61 = bif:'=:=' _277, V
  br _61, ^367, ^365

367:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _281 = put_tuple `abs`, V

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _279 = put_tuple V, `x4`

  %% Argument types:
  %%    _279 => {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}
  %% Unique:
  %%    _279
  _280 = put_tuple `value`, _279

  %% trycatch_SUITE.erl:614
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _280, 
  %%    _281
  _282 = call (`nested_of_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _281, _280

  %% Aliased:
  %%    _282
  _368 = succeeded:body _282
  br _368, ^388, ^1

388:
  %% Argument types:
  %%    _282 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _282
  _286 = get_tuple_element _282, `0`

  %% Argument types:
  %%    _286 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _286
  _387 = bif:'=:=' _286, `{caught,{error,badarg}}`
  br _387, ^387, ^370

387:
  %% Argument types:
  %%    _282 => {{'caught', {'error', 'badarg'}}, any(), any(), any()}
  %% Aliased:
  %%    _282
  _285 = get_tuple_element _282, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _285
  _386 = bif:'=:=' _285, `undefined`
  br _386, ^385, ^370

385:
  %% Argument types:
  %%    _282 => {{'caught', {'error', 'badarg'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _282
  _284 = get_tuple_element _282, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _284
  _382 = bif:is_tuple _284
  br _382, ^382, ^370

382:
  %% Argument types:
  %%    _284 => {...}
  %% Aliased:
  %%    _284
  _383 = bif:tuple_size _284

  %% Argument types:
  %%    _383 => 0..16777215
  %% Unique:
  %%    _383
  _384 = bif:'=:=' _383, `2`
  br _384, ^381, ^370

381:
  %% Argument types:
  %%    _284 => {any(), any()}
  %% Aliased:
  %%    _284
  _287 = get_tuple_element _284, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _287
  _380 = bif:'=:=' _287, `x4`
  br _380, ^379, ^370

379:
  %% Argument types:
  %%    _282 => {{'caught', {'error', 'badarg'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _282
  _283 = get_tuple_element _282, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _283
  _378 = bif:'=:=' _283, `finalized`
  br _378, ^377, ^370

377:
  %% Argument types:
  %%    _284 => {any(), 'x4'}
  %% Aliased:
  %%    _284
  _288 = get_tuple_element _284, `0`

  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    _288, 
  %%    V
  _371 = bif:'=:=' _288, V
  br _371, ^371, ^370

371:
  %% Argument types:
  %%    V => {nonempty_improper_list(pid(), reference()), 1.4142136}
  %% Aliased:
  %%    V
  _289 = put_tuple `abs`, V

  %% trycatch_SUITE.erl:620
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _289
  _290 = call (`nested_of_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _289, `function_clause`

  %% Aliased:
  %%    _290
  _372 = succeeded:body _290
  br _372, ^372, ^1

372:
  %% Argument types:
  %%    _290 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _290
  _375 = bif:'=:=' _290, `{{caught,{error,function_clause}},undefined,undefined,finalized}`
  br _375, ^375, ^374

375:
  %% Result type:
  %%    'ok'
  ret `ok`

374:
  %% trycatch_SUITE.erl:616
  %% Aliased:
  %%    _290
  _291 = match_fail `badmatch`, _290

  %% Unique:
  %%    _291
  _376 = succeeded:body _291
  br ^1

370:
  %% trycatch_SUITE.erl:610
  %% Aliased:
  %%    _282
  _292 = match_fail `badmatch`, _282

  %% Unique:
  %%    _292
  _392 = succeeded:body _292
  br ^1

365:
  %% trycatch_SUITE.erl:604
  %% Aliased:
  %%    _269
  _293 = match_fail `badmatch`, _269

  %% Unique:
  %%    _293
  _412 = succeeded:body _293
  br ^1

362:
  %% trycatch_SUITE.erl:597
  %% Aliased:
  %%    _264
  _294 = match_fail `badmatch`, _264

  %% Unique:
  %%    _294
  _414 = succeeded:body _294
  br ^1

358:
  %% trycatch_SUITE.erl:591
  %% Aliased:
  %%    _252
  _295 = match_fail `badmatch`, _252

  %% Unique:
  %%    _295
  _430 = succeeded:body _295
  br ^1

353:
  %% trycatch_SUITE.erl:585
  %% Aliased:
  %%    _236
  _296 = match_fail `badmatch`, _236

  %% Unique:
  %%    _296
  _450 = succeeded:body _296
  br ^1

347:
  %% trycatch_SUITE.erl:579
  %% Aliased:
  %%    _212
  _297 = match_fail `badmatch`, _212

  %% Unique:
  %%    _297
  _487 = succeeded:body _297
  br ^1

343:
  %% trycatch_SUITE.erl:572
  %% Aliased:
  %%    _191
  _298 = match_fail `badmatch`, _191

  %% Unique:
  %%    _298
  _516 = succeeded:body _298
  br ^1

338:
  %% trycatch_SUITE.erl:566
  %% Aliased:
  %%    _170
  _299 = match_fail `badmatch`, _170

  %% Unique:
  %%    _299
  _549 = succeeded:body _299
  br ^1

332:
  %% trycatch_SUITE.erl:560
  %% Aliased:
  %%    _145
  _300 = match_fail `badmatch`, _145

  %% Unique:
  %%    _300
  _592 = succeeded:body _300
  br ^1

329:
  %% trycatch_SUITE.erl:553
  %% Aliased:
  %%    _137
  _301 = match_fail `badmatch`, _137

  %% Unique:
  %%    _301
  _594 = succeeded:body _301
  br ^1

325:
  %% trycatch_SUITE.erl:547
  %% Aliased:
  %%    _124
  _302 = match_fail `badmatch`, _124

  %% Unique:
  %%    _302
  _610 = succeeded:body _302
  br ^1

319:
  %% trycatch_SUITE.erl:541
  %% Aliased:
  %%    _100
  _303 = match_fail `badmatch`, _100

  %% Unique:
  %%    _303
  _647 = succeeded:body _303
  br ^1

313:
  %% trycatch_SUITE.erl:535
  %% Aliased:
  %%    _74
  _304 = match_fail `badmatch`, _74

  %% Unique:
  %%    _304
  _684 = succeeded:body _304
  br ^1

308:
  %% trycatch_SUITE.erl:533
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_of/1-',1}}
  _305 = match_fail `function_clause`, _0

  %% Unique:
  %%    _305
  _685 = succeeded:body _305
  br ^1

1:
  _306 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _306
}

%% trycatch_SUITE.erl:624
%% Counter = 270
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
%%    _1 =>
%%     'void' | {'add', {1, 'c'}} | {'throw', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}} | {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x2'}}
%%    _2 =>
%%     {'abs', {nonempty_improper_list(pid(), reference()), 1.4142136}} | {''div'', {1, 0} | {17, 0}} | {'exit', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}} | {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x3'}}
%%    _3 =>
%%     'function_clause' | {'abs', {nonempty_improper_list(pid(), reference()), 1.4142136}} | {'add', {0, 'b'}} | {'throw', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}} | {'value', {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x4'}}
function `trycatch_SUITE`:`nested_of_1`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _0
  _60 = get_tuple_element _0, `1`

  %% trycatch_SUITE.erl:626
  _66 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _66
  _107 = succeeded:body _66
  br _107, ^107, ^1

107:
  %% trycatch_SUITE.erl:627
  _67 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _67
  _108 = succeeded:body _67
  br _108, ^108, ^1

108:
  %% trycatch_SUITE.erl:628
  _68 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _68
  _109 = succeeded:body _68
  br _109, ^263, ^1

263:
  br ^266

266:
  _119 = new_try_tag `'try'`
  br _119, ^264, ^116

264:
  br ^267

267:
  _124 = new_try_tag `'try'`
  br _124, ^265, ^121

265:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _0
  _59 = get_tuple_element _0, `2`
  br ^268

268:
  _137 = new_try_tag `'try'`
  br _137, ^262, ^134

262:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any()), 1.4142136}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}}
  %% Unique:
  %%    _0
  _61 = get_tuple_element _0, `0`
  br ^269

269:
  _142 = new_try_tag `'try'`
  br _142, ^141, ^139

141:
  %% trycatch_SUITE.erl:636
  %% Unique:
  %%    _61
  _82 = call (`foo`/1), _61

  %% Aliased:
  %%    _82
  _143 = succeeded:body _82
  br _143, ^143, ^139

143:
  %% Unique:
  %%    _142
  _157 = kill_try_tag _142

  %% Argument types:
  %%    _59 => 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _59, 
  %%    _82
  _146 = bif:'=:=' _82, _59
  br _146, ^146, ^145

146:
  %% trycatch_SUITE.erl:638
  %% Unique:
  %%    _1
  _7 = call (`foo`/1), _1

  %% Aliased:
  %%    _7
  _147 = succeeded:body _7
  br _147, ^147, ^134

147:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _84 = put_tuple `value1`, _7
  br ^140

145:
  %% trycatch_SUITE.erl:635
  %% Aliased:
  %%    _82
  _85 = match_fail `try_clause`, _82

  %% Unique:
  %%    _85
  _148 = succeeded:body _85
  br ^134

139:
  %% Unique:
  %%    _142
  _155 = landingpad `'try'`, _142

  %% Aliased:
  %%    _155
  _11 = extract _155, `0`

  %% Aliased:
  %%    _155
  _10 = extract _155, `1`

  %% Aliased:
  %%    _155
  _9 = extract _155, `2`

  %% Unique:
  %%    _142
  _156 = kill_try_tag _142
  br ^197

197:
  %% trycatch_SUITE.erl:640
  %% Argument types:
  %%    _11 => 'error' | 'exit' | 'throw'
  %%    _60 => 'error' | 'rethrow' | 'void'
  %% Unique:
  %%    _11, 
  %%    _60
  _53 = bif:'=:=' _11, _60
  br _53, ^198, ^150

198:
  %% trycatch_SUITE.erl:640
  %% Argument types:
  %%    _59 => 'try_clause' | 'void' | {{nonempty_improper_list(pid(), reference()), 1.4142136}, 'x1'}
  %% Aliased:
  %%    _10, 
  %%    _59
  _54 = bif:'=:=' _10, _59
  br _54, ^152, ^150

152:
  %% trycatch_SUITE.erl:640
  %% Unique:
  %%    _1
  _12 = call (`foo`/1), _1

  %% Aliased:
  %%    _12
  _153 = succeeded:body _12
  br _153, ^153, ^134

153:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _87 = put_tuple `caught1`, _12
  br ^140

140:
  _80 = phi { _84, ^147 }, { _87, ^153 }

  %% Unique:
  %%    _137
  _165 = kill_try_tag _137

  %% trycatch_SUITE.erl:642
  %% Unique:
  %%    _2
  _13 = call (`foo`/1), _2

  %% Aliased:
  %%    _13
  _158 = succeeded:body _13
  br _158, ^158, ^121

158:
  %% trycatch_SUITE.erl:642
  %% Aliased:
  %%    _13
  _89 = call (`erlang`:`put`/2), `nested3`, _13

  %% Aliased:
  %%    _89
  _159 = succeeded:body _89
  br _159, ^127, ^121

127:
  %% Unique:
  %%    _124
  _178 = kill_try_tag _124

  %% trycatch_SUITE.erl:645
  %% Unique:
  %%    _3
  _23 = call (`foo`/1), _3

  %% Aliased:
  %%    _23
  _171 = succeeded:body _23
  br _171, ^171, ^116

171:
  %% trycatch_SUITE.erl:645
  %% Aliased:
  %%    _23
  _94 = call (`erlang`:`put`/2), `nested4`, _23

  %% Aliased:
  %%    _94
  _172 = succeeded:body _94
  br _172, ^122, ^116

122:
  %% Unique:
  %%    _119
  _181 = kill_try_tag _119

  %% Argument types:
  %%    _80 => {'caught1', any()} | {'value1', any()}
  %% Unique:
  %%    _80
  _97 = put_tuple `value`, _80
  br ^117

150:
  %% Aliased:
  %%    _9, 
  %%    _10
  _88 = resume _9, _10

  %% Unique:
  %%    _88
  _154 = succeeded:body _88
  br ^134

134:
  %% Unique:
  %%    _137
  _163 = landingpad `'try'`, _137

  %% Aliased:
  %%    _163
  _17 = extract _163, `1`

  %% Aliased:
  %%    _163
  _16 = extract _163, `2`

  %% Unique:
  %%    _137
  _164 = kill_try_tag _137
  br ^202

202:
  %% trycatch_SUITE.erl:642
  %% Unique:
  %%    _2
  _63 = call (`foo`/1), _2

  %% Aliased:
  %%    _63
  _160 = succeeded:body _63
  br _160, ^160, ^121

160:
  %% trycatch_SUITE.erl:642
  %% Aliased:
  %%    _63
  _90 = call (`erlang`:`put`/2), `nested3`, _63

  %% Aliased:
  %%    _90
  _161 = succeeded:body _90
  br _161, ^161, ^121

161:
  %% Aliased:
  %%    _16, 
  %%    _17
  _91 = resume _16, _17

  %% Unique:
  %%    _91
  _162 = succeeded:body _91
  br ^121

121:
  %% Unique:
  %%    _124
  _176 = landingpad `'try'`, _124

  %% Aliased:
  %%    _176
  _27 = extract _176, `1`

  %% Aliased:
  %%    _176
  _26 = extract _176, `2`

  %% Unique:
  %%    _124
  _177 = kill_try_tag _124
  br ^204

204:
  %% trycatch_SUITE.erl:645
  %% Unique:
  %%    _3
  _64 = call (`foo`/1), _3

  %% Aliased:
  %%    _64
  _173 = succeeded:body _64
  br _173, ^173, ^116

173:
  %% trycatch_SUITE.erl:645
  %% Aliased:
  %%    _64
  _95 = call (`erlang`:`put`/2), `nested4`, _64

  %% Aliased:
  %%    _95
  _174 = succeeded:body _95
  br _174, ^174, ^116

174:
  %% Aliased:
  %%    _26, 
  %%    _27
  _96 = resume _26, _27

  %% Unique:
  %%    _96
  _175 = succeeded:body _96
  br ^116

116:
  %% Unique:
  %%    _119
  _179 = landingpad `'try'`, _119

  %% Aliased:
  %%    _179
  _33 = extract _179, `0`

  %% Aliased:
  %%    _179
  _32 = extract _179, `1`

  %% Unique:
  %%    _119
  _180 = kill_try_tag _119

  %% Argument types:
  %%    _33 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _32
  %% Unique:
  %%    _33
  _65 = put_tuple _33, _32

  %% Argument types:
  %%    _65 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _65
  _98 = put_tuple `caught`, _65
  br ^117

117:
  _70 = phi { _97, ^122 }, { _98, ^116 }

  %% trycatch_SUITE.erl:652
  _99 = call (`erlang`:`put`/2), `nested`, `finalized`

  %% Aliased:
  %%    _99
  _182 = succeeded:body _99
  br _182, ^207, ^1

207:
  %% trycatch_SUITE.erl:654
  _43 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _43
  _188 = succeeded:body _43
  br _188, ^188, ^1

188:
  %% trycatch_SUITE.erl:654
  _42 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _42
  _189 = succeeded:body _42
  br _189, ^189, ^1

189:
  %% trycatch_SUITE.erl:654
  _41 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _41
  _190 = succeeded:body _41
  br _190, ^190, ^1

190:
  %% Argument types:
  %%    _70 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _41, 
  %%    _42, 
  %%    _43
  %% Unique:
  %%    _70
  _102 = put_tuple _70, _43, _42, _41
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _102
  ret _102

1:
  _104 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _104
}

%% trycatch_SUITE.erl:658
%% Counter = 738
%% bs_ensure_opt: true
function `trycatch_SUITE`:`nested_catch`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _311 = bif:is_list _0
  br _311, ^311, ^310

311:
  %% trycatch_SUITE.erl:659
  _2 = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:659
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _63 = put_list _1, `[]`

  %% Argument types:
  %%    _63 => nonempty_list(pid())
  %% Aliased:
  %%    _63
  _64 = put_list `1.4142136`, _63

  %% Argument types:
  %%    _2 => reference()
  %%    _64 => nonempty_list(1.4142136 | pid())
  %% Aliased:
  %%    _64
  %% Unique:
  %%    _2
  _65 = put_list _2, _64

  %% Argument types:
  %%    _65 => nonempty_list(1.4142136 | identifier())
  %% Aliased:
  %%    _65
  V = put_tuple _65

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _73 = put_tuple V, `x1`

  %% Argument types:
  %%    _73 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _73
  _74 = put_tuple `value`, _73

  %% Argument types:
  %%    _74 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _73 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _73
  %% Unique:
  %%    _74
  _75 = put_tuple _74, `void`, _73

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _70 = put_tuple V, `x2`

  %% Argument types:
  %%    _70 => {{nonempty_list(1.4142136 | identifier())}, 'x2'}
  %% Unique:
  %%    _70
  _71 = put_tuple `value`, _70

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _68 = put_tuple V, `x3`

  %% Argument types:
  %%    _68 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _68
  _69 = put_tuple `value`, _68

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _66 = put_tuple V, `x4`

  %% Argument types:
  %%    _66 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _66
  _67 = put_tuple `value`, _66

  %% trycatch_SUITE.erl:664
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _67, 
  %%    _69, 
  %%    _71, 
  %%    _75
  _76 = call (`nested_catch_1`/4), _75, _71, _69, _67

  %% Aliased:
  %%    _76
  _313 = succeeded:body _76
  br _313, ^682, ^1

682:
  %% Argument types:
  %%    _76 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _76
  _80 = get_tuple_element _76, `0`

  %% Argument types:
  %%    _80 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _80
  _679 = is_tagged_tuple _80, `2`, `value`
  br _679, ^676, ^315

676:
  %% Argument types:
  %%    _80 => {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _80
  _81 = get_tuple_element _80, `1`

  %% Argument types:
  %%    _81 => {'caught1', any()} | {'value1', any()}
  %% Aliased:
  %%    _81
  _673 = is_tagged_tuple _81, `2`, `value1`
  br _673, ^670, ^315

670:
  %% Argument types:
  %%    _81 => {'value1', any()}
  %% Aliased:
  %%    _81
  _83 = get_tuple_element _81, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _667 = bif:is_tuple _83
  br _667, ^667, ^315

667:
  %% Argument types:
  %%    _83 => {...}
  %% Aliased:
  %%    _83
  _668 = bif:tuple_size _83

  %% Argument types:
  %%    _668 => 0..16777215
  %% Unique:
  %%    _668
  _669 = bif:'=:=' _668, `2`
  br _669, ^666, ^315

666:
  %% Argument types:
  %%    _83 => {any(), any()}
  %% Aliased:
  %%    _83
  _85 = get_tuple_element _83, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _665 = bif:'=:=' _85, `x2`
  br _665, ^664, ^315

664:
  %% Argument types:
  %%    _76 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _76
  _79 = get_tuple_element _76, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _661 = bif:is_tuple _79
  br _661, ^661, ^315

661:
  %% Argument types:
  %%    _79 => {...}
  %% Aliased:
  %%    _79
  _662 = bif:tuple_size _79

  %% Argument types:
  %%    _662 => 0..16777215
  %% Unique:
  %%    _662
  _663 = bif:'=:=' _662, `2`
  br _663, ^660, ^315

660:
  %% Argument types:
  %%    _79 => {any(), any()}
  %% Aliased:
  %%    _79
  _87 = get_tuple_element _79, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _659 = bif:'=:=' _87, `x3`
  br _659, ^658, ^315

658:
  %% Argument types:
  %%    _76 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _76
  _78 = get_tuple_element _76, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _78
  _655 = bif:is_tuple _78
  br _655, ^655, ^315

655:
  %% Argument types:
  %%    _78 => {...}
  %% Aliased:
  %%    _78
  _656 = bif:tuple_size _78

  %% Argument types:
  %%    _656 => 0..16777215
  %% Unique:
  %%    _656
  _657 = bif:'=:=' _656, `2`
  br _657, ^654, ^315

654:
  %% Argument types:
  %%    _78 => {any(), any()}
  %% Aliased:
  %%    _78
  _89 = get_tuple_element _78, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _653 = bif:'=:=' _89, `x4`
  br _653, ^652, ^315

652:
  %% Argument types:
  %%    _76 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _76
  _77 = get_tuple_element _76, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _651 = bif:'=:=' _77, `finalized`
  br _651, ^650, ^315

650:
  %% Argument types:
  %%    _83 => {any(), 'x2'}
  %% Aliased:
  %%    _83
  _86 = get_tuple_element _83, `0`

  %% trycatch_SUITE.erl:660
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _86, 
  %%    V
  _24 = bif:'=:=' _86, V
  br _24, ^721, ^315

721:
  %% Argument types:
  %%    _79 => {any(), 'x3'}
  %% Aliased:
  %%    _79
  _88 = get_tuple_element _79, `0`

  %% trycatch_SUITE.erl:661
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _88, 
  %%    V
  _22 = bif:'=:=' _88, V
  br _22, ^722, ^315

722:
  %% Argument types:
  %%    _78 => {any(), 'x4'}
  %% Aliased:
  %%    _78
  _90 = get_tuple_element _78, `0`

  %% trycatch_SUITE.erl:662
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _90, 
  %%    V
  _23 = bif:'=:=' _90, V
  br _23, ^318, ^315

318:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _99 = put_tuple V, `x1`

  %% Argument types:
  %%    _99 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _99
  _100 = put_tuple `value`, _99

  %% Argument types:
  %%    _100 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _99 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _99
  %% Unique:
  %%    _100
  _101 = put_tuple _100, `void`, _99

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _96 = put_tuple V, `x2`

  %% Argument types:
  %%    _96 => {{nonempty_list(1.4142136 | identifier())}, 'x2'}
  %% Unique:
  %%    _96
  _97 = put_tuple `throw`, _96

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _94 = put_tuple V, `x3`

  %% Argument types:
  %%    _94 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _94
  _95 = put_tuple `value`, _94

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _92 = put_tuple V, `x4`

  %% Argument types:
  %%    _92 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _92
  _93 = put_tuple `value`, _92

  %% trycatch_SUITE.erl:670
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _93, 
  %%    _95, 
  %%    _97, 
  %%    _101
  _102 = call (`nested_catch_1`/4), _101, _97, _95, _93

  %% Aliased:
  %%    _102
  _319 = succeeded:body _102
  br _319, ^645, ^1

645:
  %% Argument types:
  %%    _102 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _102
  _106 = get_tuple_element _102, `0`

  %% Argument types:
  %%    _106 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _106
  _642 = is_tagged_tuple _106, `2`, `caught`
  br _642, ^639, ^321

639:
  %% Argument types:
  %%    _106 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _106
  _107 = get_tuple_element _106, `1`

  %% Argument types:
  %%    _107 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _107
  _636 = is_tagged_tuple _107, `2`, `throw`
  br _636, ^633, ^321

633:
  %% Argument types:
  %%    _107 => {'throw', any()}
  %% Aliased:
  %%    _107
  _109 = get_tuple_element _107, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _109
  _630 = bif:is_tuple _109
  br _630, ^630, ^321

630:
  %% Argument types:
  %%    _109 => {...}
  %% Aliased:
  %%    _109
  _631 = bif:tuple_size _109

  %% Argument types:
  %%    _631 => 0..16777215
  %% Unique:
  %%    _631
  _632 = bif:'=:=' _631, `2`
  br _632, ^629, ^321

629:
  %% Argument types:
  %%    _109 => {any(), any()}
  %% Aliased:
  %%    _109
  _111 = get_tuple_element _109, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _628 = bif:'=:=' _111, `x2`
  br _628, ^627, ^321

627:
  %% Argument types:
  %%    _102 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _102
  _105 = get_tuple_element _102, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _105
  _624 = bif:is_tuple _105
  br _624, ^624, ^321

624:
  %% Argument types:
  %%    _105 => {...}
  %% Aliased:
  %%    _105
  _625 = bif:tuple_size _105

  %% Argument types:
  %%    _625 => 0..16777215
  %% Unique:
  %%    _625
  _626 = bif:'=:=' _625, `2`
  br _626, ^623, ^321

623:
  %% Argument types:
  %%    _105 => {any(), any()}
  %% Aliased:
  %%    _105
  _113 = get_tuple_element _105, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _622 = bif:'=:=' _113, `x3`
  br _622, ^621, ^321

621:
  %% Argument types:
  %%    _102 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _102
  _104 = get_tuple_element _102, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _104
  _618 = bif:is_tuple _104
  br _618, ^618, ^321

618:
  %% Argument types:
  %%    _104 => {...}
  %% Aliased:
  %%    _104
  _619 = bif:tuple_size _104

  %% Argument types:
  %%    _619 => 0..16777215
  %% Unique:
  %%    _619
  _620 = bif:'=:=' _619, `2`
  br _620, ^617, ^321

617:
  %% Argument types:
  %%    _104 => {any(), any()}
  %% Aliased:
  %%    _104
  _115 = get_tuple_element _104, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _616 = bif:'=:=' _115, `x4`
  br _616, ^615, ^321

615:
  %% Argument types:
  %%    _102 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _102
  _103 = get_tuple_element _102, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _103
  _614 = bif:'=:=' _103, `finalized`
  br _614, ^613, ^321

613:
  %% Argument types:
  %%    _109 => {any(), 'x2'}
  %% Aliased:
  %%    _109
  _112 = get_tuple_element _109, `0`

  %% trycatch_SUITE.erl:666
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _112, 
  %%    V
  _31 = bif:'=:=' _112, V
  br _31, ^715, ^321

715:
  %% Argument types:
  %%    _105 => {any(), 'x3'}
  %% Aliased:
  %%    _105
  _114 = get_tuple_element _105, `0`

  %% trycatch_SUITE.erl:667
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _114, 
  %%    V
  _29 = bif:'=:=' _114, V
  br _29, ^716, ^321

716:
  %% Argument types:
  %%    _104 => {any(), 'x4'}
  %% Aliased:
  %%    _104
  _116 = get_tuple_element _104, `0`

  %% trycatch_SUITE.erl:668
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _116, 
  %%    V
  _30 = bif:'=:=' _116, V
  br _30, ^324, ^321

324:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _123 = put_tuple V, `x1`

  %% Argument types:
  %%    _123 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _123
  _124 = put_tuple `value`, _123

  %% Argument types:
  %%    _124 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _123 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _123
  %% Unique:
  %%    _124
  _125 = put_tuple _124, `void`, _123

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _120 = put_tuple V, `x2`

  %% Argument types:
  %%    _120 => {{nonempty_list(1.4142136 | identifier())}, 'x2'}
  %% Unique:
  %%    _120
  _121 = put_tuple `throw`, _120

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _118 = put_tuple V, `x4`

  %% Argument types:
  %%    _118 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _118
  _119 = put_tuple `value`, _118

  %% trycatch_SUITE.erl:676
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _119, 
  %%    _121, 
  %%    _125
  _126 = call (`nested_catch_1`/4), _125, _121, `{'div',{1,0}}`, _119

  %% Aliased:
  %%    _126
  _325 = succeeded:body _126
  br _325, ^608, ^1

608:
  %% Argument types:
  %%    _126 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _126
  _130 = get_tuple_element _126, `0`

  %% Argument types:
  %%    _130 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _130
  _607 = bif:'=:=' _130, `{caught,{error,badarith}}`
  br _607, ^607, ^327

607:
  %% Argument types:
  %%    _126 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _126
  _129 = get_tuple_element _126, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _129
  _606 = bif:'=:=' _129, `undefined`
  br _606, ^605, ^327

605:
  %% Argument types:
  %%    _126 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _126
  _128 = get_tuple_element _126, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _602 = bif:is_tuple _128
  br _602, ^602, ^327

602:
  %% Argument types:
  %%    _128 => {...}
  %% Aliased:
  %%    _128
  _603 = bif:tuple_size _128

  %% Argument types:
  %%    _603 => 0..16777215
  %% Unique:
  %%    _603
  _604 = bif:'=:=' _603, `2`
  br _604, ^601, ^327

601:
  %% Argument types:
  %%    _128 => {any(), any()}
  %% Aliased:
  %%    _128
  _131 = get_tuple_element _128, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _131
  _600 = bif:'=:=' _131, `x4`
  br _600, ^599, ^327

599:
  %% Argument types:
  %%    _126 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _126
  _127 = get_tuple_element _126, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _127
  _598 = bif:'=:=' _127, `finalized`
  br _598, ^597, ^327

597:
  %% Argument types:
  %%    _128 => {any(), 'x4'}
  %% Aliased:
  %%    _128
  _132 = get_tuple_element _128, `0`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _132, 
  %%    V
  _328 = bif:'=:=' _132, V
  br _328, ^328, ^327

328:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _136 = put_tuple V, `x1`

  %% Argument types:
  %%    _136 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _136
  _137 = put_tuple `value`, _136

  %% Argument types:
  %%    _137 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _136 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _136
  %% Unique:
  %%    _137
  _138 = put_tuple _137, `void`, _136

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _133 = put_tuple V, `x2`

  %% Argument types:
  %%    _133 => {{nonempty_list(1.4142136 | identifier())}, 'x2'}
  %% Unique:
  %%    _133
  _134 = put_tuple `throw`, _133

  %% trycatch_SUITE.erl:682
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _134, 
  %%    _138
  _139 = call (`nested_catch_1`/4), _138, _134, `{'div',{1,0}}`, `{add,{0,b}}`

  %% Aliased:
  %%    _139
  _329 = succeeded:body _139
  br _329, ^329, ^1

329:
  %% Argument types:
  %%    _139 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _139
  _595 = bif:'=:=' _139, `{{caught,{error,badarith}},undefined,undefined,finalized}`
  br _595, ^595, ^331

595:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _144 = put_tuple V, `x1`

  %% Argument types:
  %%    _144 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Unique:
  %%    _144
  _145 = put_tuple `value`, _144

  %% Argument types:
  %%    _145 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _145
  _146 = put_tuple _145, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _142 = put_tuple V, `x3`

  %% Argument types:
  %%    _142 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _142
  _143 = put_tuple `value`, _142

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _140 = put_tuple V, `x4`

  %% Argument types:
  %%    _140 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _140
  _141 = put_tuple `value`, _140

  %% trycatch_SUITE.erl:689
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _141, 
  %%    _143, 
  %%    _146
  _147 = call (`nested_catch_1`/4), _146, `void`, _143, _141

  %% Aliased:
  %%    _147
  _332 = succeeded:body _147
  br _332, ^590, ^1

590:
  %% Argument types:
  %%    _147 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _147
  _151 = get_tuple_element _147, `0`

  %% Argument types:
  %%    _151 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _151
  _587 = is_tagged_tuple _151, `2`, `caught`
  br _587, ^584, ^334

584:
  %% Argument types:
  %%    _151 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _151
  _152 = get_tuple_element _151, `1`

  %% Argument types:
  %%    _152 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _152
  _581 = is_tagged_tuple _152, `2`, `error`
  br _581, ^578, ^334

578:
  %% Argument types:
  %%    _152 => {'error', any()}
  %% Aliased:
  %%    _152
  _154 = get_tuple_element _152, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _154
  _575 = is_tagged_tuple _154, `2`, `try_clause`
  br _575, ^572, ^334

572:
  %% Argument types:
  %%    _154 => {'try_clause', any()}
  %% Aliased:
  %%    _154
  _156 = get_tuple_element _154, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _156
  _569 = bif:is_tuple _156
  br _569, ^569, ^334

569:
  %% Argument types:
  %%    _156 => {...}
  %% Aliased:
  %%    _156
  _570 = bif:tuple_size _156

  %% Argument types:
  %%    _570 => 0..16777215
  %% Unique:
  %%    _570
  _571 = bif:'=:=' _570, `2`
  br _571, ^568, ^334

568:
  %% Argument types:
  %%    _156 => {any(), any()}
  %% Aliased:
  %%    _156
  _158 = get_tuple_element _156, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158
  _567 = bif:'=:=' _158, `x1`
  br _567, ^566, ^334

566:
  %% Argument types:
  %%    _147 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _147
  _150 = get_tuple_element _147, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _150
  _563 = bif:is_tuple _150
  br _563, ^563, ^334

563:
  %% Argument types:
  %%    _150 => {...}
  %% Aliased:
  %%    _150
  _564 = bif:tuple_size _150

  %% Argument types:
  %%    _564 => 0..16777215
  %% Unique:
  %%    _564
  _565 = bif:'=:=' _564, `2`
  br _565, ^562, ^334

562:
  %% Argument types:
  %%    _150 => {any(), any()}
  %% Aliased:
  %%    _150
  _160 = get_tuple_element _150, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _160
  _561 = bif:'=:=' _160, `x3`
  br _561, ^560, ^334

560:
  %% Argument types:
  %%    _147 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _147
  _149 = get_tuple_element _147, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _149
  _557 = bif:is_tuple _149
  br _557, ^557, ^334

557:
  %% Argument types:
  %%    _149 => {...}
  %% Aliased:
  %%    _149
  _558 = bif:tuple_size _149

  %% Argument types:
  %%    _558 => 0..16777215
  %% Unique:
  %%    _558
  _559 = bif:'=:=' _558, `2`
  br _559, ^556, ^334

556:
  %% Argument types:
  %%    _149 => {any(), any()}
  %% Aliased:
  %%    _149
  _162 = get_tuple_element _149, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _555 = bif:'=:=' _162, `x4`
  br _555, ^554, ^334

554:
  %% Argument types:
  %%    _147 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _147
  _148 = get_tuple_element _147, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _148
  _553 = bif:'=:=' _148, `finalized`
  br _553, ^552, ^334

552:
  %% Argument types:
  %%    _156 => {any(), 'x1'}
  %% Aliased:
  %%    _156
  _159 = get_tuple_element _156, `0`

  %% trycatch_SUITE.erl:685
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _159, 
  %%    V
  _39 = bif:'=:=' _159, V
  br _39, ^709, ^334

709:
  %% Argument types:
  %%    _150 => {any(), 'x3'}
  %% Aliased:
  %%    _150
  _161 = get_tuple_element _150, `0`

  %% trycatch_SUITE.erl:686
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _161, 
  %%    V
  _37 = bif:'=:=' _161, V
  br _37, ^710, ^334

710:
  %% Argument types:
  %%    _149 => {any(), 'x4'}
  %% Aliased:
  %%    _149
  _163 = get_tuple_element _149, `0`

  %% trycatch_SUITE.erl:687
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _163, 
  %%    V
  _38 = bif:'=:=' _163, V
  br _38, ^337, ^334

337:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _169 = put_tuple V, `x1`

  %% Argument types:
  %%    _169 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Unique:
  %%    _169
  _170 = put_tuple `value`, _169

  %% Argument types:
  %%    _170 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _170
  _171 = put_tuple _170, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _167 = put_tuple V, `x3`

  %% Argument types:
  %%    _167 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _167
  _168 = put_tuple `exit`, _167

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _165 = put_tuple V, `x4`

  %% Argument types:
  %%    _165 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _165
  _166 = put_tuple `value`, _165

  %% trycatch_SUITE.erl:695
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _166, 
  %%    _168, 
  %%    _171
  _172 = call (`nested_catch_1`/4), _171, `void`, _168, _166

  %% Aliased:
  %%    _172
  _338 = succeeded:body _172
  br _338, ^547, ^1

547:
  %% Argument types:
  %%    _172 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _172
  _176 = get_tuple_element _172, `0`

  %% Argument types:
  %%    _176 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _176
  _544 = is_tagged_tuple _176, `2`, `caught`
  br _544, ^541, ^340

541:
  %% Argument types:
  %%    _176 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _176
  _177 = get_tuple_element _176, `1`

  %% Argument types:
  %%    _177 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _177
  _538 = is_tagged_tuple _177, `2`, `exit`
  br _538, ^535, ^340

535:
  %% Argument types:
  %%    _177 => {'exit', any()}
  %% Aliased:
  %%    _177
  _179 = get_tuple_element _177, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _532 = bif:is_tuple _179
  br _532, ^532, ^340

532:
  %% Argument types:
  %%    _179 => {...}
  %% Aliased:
  %%    _179
  _533 = bif:tuple_size _179

  %% Argument types:
  %%    _533 => 0..16777215
  %% Unique:
  %%    _533
  _534 = bif:'=:=' _533, `2`
  br _534, ^531, ^340

531:
  %% Argument types:
  %%    _179 => {any(), any()}
  %% Aliased:
  %%    _179
  _181 = get_tuple_element _179, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _181
  _530 = bif:'=:=' _181, `x3`
  br _530, ^529, ^340

529:
  %% Argument types:
  %%    _172 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _172
  _175 = get_tuple_element _172, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _175
  _528 = bif:'=:=' _175, `undefined`
  br _528, ^527, ^340

527:
  %% Argument types:
  %%    _172 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _172
  _174 = get_tuple_element _172, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _174
  _524 = bif:is_tuple _174
  br _524, ^524, ^340

524:
  %% Argument types:
  %%    _174 => {...}
  %% Aliased:
  %%    _174
  _525 = bif:tuple_size _174

  %% Argument types:
  %%    _525 => 0..16777215
  %% Unique:
  %%    _525
  _526 = bif:'=:=' _525, `2`
  br _526, ^523, ^340

523:
  %% Argument types:
  %%    _174 => {any(), any()}
  %% Aliased:
  %%    _174
  _183 = get_tuple_element _174, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _183
  _522 = bif:'=:=' _183, `x4`
  br _522, ^521, ^340

521:
  %% Argument types:
  %%    _172 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _172
  _173 = get_tuple_element _172, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _173
  _520 = bif:'=:=' _173, `finalized`
  br _520, ^519, ^340

519:
  %% Argument types:
  %%    _179 => {any(), 'x3'}
  %% Aliased:
  %%    _179
  _182 = get_tuple_element _179, `0`

  %% trycatch_SUITE.erl:691
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _182, 
  %%    V
  _43 = bif:'=:=' _182, V
  br _43, ^704, ^340

704:
  %% Argument types:
  %%    _174 => {any(), 'x4'}
  %% Aliased:
  %%    _174
  _184 = get_tuple_element _174, `0`

  %% trycatch_SUITE.erl:693
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _184, 
  %%    V
  _44 = bif:'=:=' _184, V
  br _44, ^342, ^340

342:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _190 = put_tuple V, `x1`

  %% Argument types:
  %%    _190 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Unique:
  %%    _190
  _191 = put_tuple `value`, _190

  %% Argument types:
  %%    _191 => {'value', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _191
  _192 = put_tuple _191, `void`, `try_clause`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _188 = put_tuple V, `x3`

  %% Argument types:
  %%    _188 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _188
  _189 = put_tuple `exit`, _188

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _186 = put_tuple V, `x4`

  %% Argument types:
  %%    _186 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _186
  _187 = put_tuple `throw`, _186

  %% trycatch_SUITE.erl:701
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _187, 
  %%    _189, 
  %%    _192
  _193 = call (`nested_catch_1`/4), _192, `void`, _189, _187

  %% Aliased:
  %%    _193
  _343 = succeeded:body _193
  br _343, ^514, ^1

514:
  %% Argument types:
  %%    _193 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _193
  _197 = get_tuple_element _193, `0`

  %% Argument types:
  %%    _197 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _197
  _511 = is_tagged_tuple _197, `2`, `caught`
  br _511, ^508, ^345

508:
  %% Argument types:
  %%    _197 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _197
  _198 = get_tuple_element _197, `1`

  %% Argument types:
  %%    _198 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _198
  _505 = is_tagged_tuple _198, `2`, `throw`
  br _505, ^502, ^345

502:
  %% Argument types:
  %%    _198 => {'throw', any()}
  %% Aliased:
  %%    _198
  _200 = get_tuple_element _198, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _200
  _499 = bif:is_tuple _200
  br _499, ^499, ^345

499:
  %% Argument types:
  %%    _200 => {...}
  %% Aliased:
  %%    _200
  _500 = bif:tuple_size _200

  %% Argument types:
  %%    _500 => 0..16777215
  %% Unique:
  %%    _500
  _501 = bif:'=:=' _500, `2`
  br _501, ^498, ^345

498:
  %% Argument types:
  %%    _200 => {any(), any()}
  %% Aliased:
  %%    _200
  _202 = get_tuple_element _200, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _202
  _497 = bif:'=:=' _202, `x4`
  br _497, ^496, ^345

496:
  %% Argument types:
  %%    _193 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _193
  _196 = get_tuple_element _193, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _196
  _495 = bif:'=:=' _196, `undefined`
  br _495, ^494, ^345

494:
  %% Argument types:
  %%    _193 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _193
  _195 = get_tuple_element _193, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _195
  _493 = bif:'=:=' _195, `undefined`
  br _493, ^492, ^345

492:
  %% Argument types:
  %%    _193 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, 'undefined', 'undefined', any()}
  %% Aliased:
  %%    _193
  _194 = get_tuple_element _193, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _194
  _491 = bif:'=:=' _194, `finalized`
  br _491, ^490, ^345

490:
  %% Argument types:
  %%    _200 => {any(), 'x4'}
  %% Aliased:
  %%    _200
  _203 = get_tuple_element _200, `0`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _203, 
  %%    V
  _346 = bif:'=:=' _203, V
  br _346, ^346, ^345

346:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _211 = put_tuple V, `x1`

  %% Argument types:
  %%    _211 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _211
  _212 = put_tuple `error`, _211

  %% Argument types:
  %%    _212 => {'error', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _211 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _211
  %% Unique:
  %%    _212
  _213 = put_tuple _212, `error`, _211

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _208 = put_tuple V, `x2`

  %% Argument types:
  %%    _208 => {{nonempty_list(1.4142136 | identifier())}, 'x2'}
  %% Unique:
  %%    _208
  _209 = put_tuple `value`, _208

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _206 = put_tuple V, `x3`

  %% Argument types:
  %%    _206 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _206
  _207 = put_tuple `value`, _206

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _204 = put_tuple V, `x4`

  %% Argument types:
  %%    _204 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _204
  _205 = put_tuple `value`, _204

  %% trycatch_SUITE.erl:708
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _205, 
  %%    _207, 
  %%    _209, 
  %%    _213
  _214 = call (`nested_catch_1`/4), _213, _209, _207, _205

  %% Aliased:
  %%    _214
  _347 = succeeded:body _214
  br _347, ^485, ^1

485:
  %% Argument types:
  %%    _214 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _214
  _218 = get_tuple_element _214, `0`

  %% Argument types:
  %%    _218 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _218
  _482 = is_tagged_tuple _218, `2`, `value`
  br _482, ^479, ^349

479:
  %% Argument types:
  %%    _218 => {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _218
  _219 = get_tuple_element _218, `1`

  %% Argument types:
  %%    _219 => {'caught1', any()} | {'value1', any()}
  %% Aliased:
  %%    _219
  _476 = is_tagged_tuple _219, `2`, `caught1`
  br _476, ^473, ^349

473:
  %% Argument types:
  %%    _219 => {'caught1', any()}
  %% Aliased:
  %%    _219
  _221 = get_tuple_element _219, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _221
  _470 = bif:is_tuple _221
  br _470, ^470, ^349

470:
  %% Argument types:
  %%    _221 => {...}
  %% Aliased:
  %%    _221
  _471 = bif:tuple_size _221

  %% Argument types:
  %%    _471 => 0..16777215
  %% Unique:
  %%    _471
  _472 = bif:'=:=' _471, `2`
  br _472, ^469, ^349

469:
  %% Argument types:
  %%    _221 => {any(), any()}
  %% Aliased:
  %%    _221
  _223 = get_tuple_element _221, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _223
  _468 = bif:'=:=' _223, `x2`
  br _468, ^467, ^349

467:
  %% Argument types:
  %%    _214 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _214
  _217 = get_tuple_element _214, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _217
  _464 = bif:is_tuple _217
  br _464, ^464, ^349

464:
  %% Argument types:
  %%    _217 => {...}
  %% Aliased:
  %%    _217
  _465 = bif:tuple_size _217

  %% Argument types:
  %%    _465 => 0..16777215
  %% Unique:
  %%    _465
  _466 = bif:'=:=' _465, `2`
  br _466, ^463, ^349

463:
  %% Argument types:
  %%    _217 => {any(), any()}
  %% Aliased:
  %%    _217
  _225 = get_tuple_element _217, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _225
  _462 = bif:'=:=' _225, `x3`
  br _462, ^461, ^349

461:
  %% Argument types:
  %%    _214 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _214
  _216 = get_tuple_element _214, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _216
  _458 = bif:is_tuple _216
  br _458, ^458, ^349

458:
  %% Argument types:
  %%    _216 => {...}
  %% Aliased:
  %%    _216
  _459 = bif:tuple_size _216

  %% Argument types:
  %%    _459 => 0..16777215
  %% Unique:
  %%    _459
  _460 = bif:'=:=' _459, `2`
  br _460, ^457, ^349

457:
  %% Argument types:
  %%    _216 => {any(), any()}
  %% Aliased:
  %%    _216
  _227 = get_tuple_element _216, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _227
  _456 = bif:'=:=' _227, `x4`
  br _456, ^455, ^349

455:
  %% Argument types:
  %%    _214 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _214
  _215 = get_tuple_element _214, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _215
  _454 = bif:'=:=' _215, `finalized`
  br _454, ^453, ^349

453:
  %% Argument types:
  %%    _221 => {any(), 'x2'}
  %% Aliased:
  %%    _221
  _224 = get_tuple_element _221, `0`

  %% trycatch_SUITE.erl:704
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _224, 
  %%    V
  _51 = bif:'=:=' _224, V
  br _51, ^699, ^349

699:
  %% Argument types:
  %%    _217 => {any(), 'x3'}
  %% Aliased:
  %%    _217
  _226 = get_tuple_element _217, `0`

  %% trycatch_SUITE.erl:705
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _226, 
  %%    V
  _49 = bif:'=:=' _226, V
  br _49, ^700, ^349

700:
  %% Argument types:
  %%    _216 => {any(), 'x4'}
  %% Aliased:
  %%    _216
  _228 = get_tuple_element _216, `0`

  %% trycatch_SUITE.erl:706
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _228, 
  %%    V
  _50 = bif:'=:=' _228, V
  br _50, ^352, ^349

352:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _235 = put_tuple V, `x1`

  %% Argument types:
  %%    _235 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _235
  _236 = put_tuple `error`, _235

  %% Argument types:
  %%    _236 => {'error', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _235 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _235
  %% Unique:
  %%    _236
  _237 = put_tuple _236, `error`, _235

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _232 = put_tuple V, `x3`

  %% Argument types:
  %%    _232 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _232
  _233 = put_tuple `value`, _232

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _230 = put_tuple V, `x4`

  %% Argument types:
  %%    _230 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _230
  _231 = put_tuple `value`, _230

  %% trycatch_SUITE.erl:714
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _231, 
  %%    _233, 
  %%    _237
  _238 = call (`nested_catch_1`/4), _237, `{add,{1,c}}`, _233, _231

  %% Aliased:
  %%    _238
  _353 = succeeded:body _238
  br _353, ^448, ^1

448:
  %% Argument types:
  %%    _238 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _238
  _242 = get_tuple_element _238, `0`

  %% Argument types:
  %%    _242 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _242
  _447 = bif:'=:=' _242, `{caught,{error,badarith}}`
  br _447, ^447, ^355

447:
  %% Argument types:
  %%    _238 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _238
  _241 = get_tuple_element _238, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _241
  _444 = bif:is_tuple _241
  br _444, ^444, ^355

444:
  %% Argument types:
  %%    _241 => {...}
  %% Aliased:
  %%    _241
  _445 = bif:tuple_size _241

  %% Argument types:
  %%    _445 => 0..16777215
  %% Unique:
  %%    _445
  _446 = bif:'=:=' _445, `2`
  br _446, ^443, ^355

443:
  %% Argument types:
  %%    _241 => {any(), any()}
  %% Aliased:
  %%    _241
  _243 = get_tuple_element _241, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _243
  _442 = bif:'=:=' _243, `x3`
  br _442, ^441, ^355

441:
  %% Argument types:
  %%    _238 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _238
  _240 = get_tuple_element _238, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _240
  _438 = bif:is_tuple _240
  br _438, ^438, ^355

438:
  %% Argument types:
  %%    _240 => {...}
  %% Aliased:
  %%    _240
  _439 = bif:tuple_size _240

  %% Argument types:
  %%    _439 => 0..16777215
  %% Unique:
  %%    _439
  _440 = bif:'=:=' _439, `2`
  br _440, ^437, ^355

437:
  %% Argument types:
  %%    _240 => {any(), any()}
  %% Aliased:
  %%    _240
  _245 = get_tuple_element _240, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _245
  _436 = bif:'=:=' _245, `x4`
  br _436, ^435, ^355

435:
  %% Argument types:
  %%    _238 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _238
  _239 = get_tuple_element _238, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _239
  _434 = bif:'=:=' _239, `finalized`
  br _434, ^433, ^355

433:
  %% Argument types:
  %%    _241 => {any(), 'x3'}
  %% Aliased:
  %%    _241
  _244 = get_tuple_element _241, `0`

  %% trycatch_SUITE.erl:711
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _244, 
  %%    V
  _55 = bif:'=:=' _244, V
  br _55, ^694, ^355

694:
  %% Argument types:
  %%    _240 => {any(), 'x4'}
  %% Aliased:
  %%    _240
  _246 = get_tuple_element _240, `0`

  %% trycatch_SUITE.erl:712
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _246, 
  %%    V
  _56 = bif:'=:=' _246, V
  br _56, ^357, ^355

357:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _251 = put_tuple V, `x1`

  %% Argument types:
  %%    _251 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _251
  _252 = put_tuple `error`, _251

  %% Argument types:
  %%    _252 => {'error', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _251 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _251
  %% Unique:
  %%    _252
  _253 = put_tuple _252, `error`, _251

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _248 = put_tuple V, `x4`

  %% Argument types:
  %%    _248 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _248
  _249 = put_tuple `value`, _248

  %% trycatch_SUITE.erl:720
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _249, 
  %%    _253
  _254 = call (`nested_catch_1`/4), _253, `{add,{1,c}}`, `{'div',{17,0}}`, _249

  %% Aliased:
  %%    _254
  _358 = succeeded:body _254
  br _358, ^428, ^1

428:
  %% Argument types:
  %%    _254 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _254
  _258 = get_tuple_element _254, `0`

  %% Argument types:
  %%    _258 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _258
  _427 = bif:'=:=' _258, `{caught,{error,badarith}}`
  br _427, ^427, ^360

427:
  %% Argument types:
  %%    _254 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _254
  _257 = get_tuple_element _254, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _257
  _426 = bif:'=:=' _257, `undefined`
  br _426, ^425, ^360

425:
  %% Argument types:
  %%    _254 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _254
  _256 = get_tuple_element _254, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _256
  _422 = bif:is_tuple _256
  br _422, ^422, ^360

422:
  %% Argument types:
  %%    _256 => {...}
  %% Aliased:
  %%    _256
  _423 = bif:tuple_size _256

  %% Argument types:
  %%    _423 => 0..16777215
  %% Unique:
  %%    _423
  _424 = bif:'=:=' _423, `2`
  br _424, ^421, ^360

421:
  %% Argument types:
  %%    _256 => {any(), any()}
  %% Aliased:
  %%    _256
  _259 = get_tuple_element _256, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _259
  _420 = bif:'=:=' _259, `x4`
  br _420, ^419, ^360

419:
  %% Argument types:
  %%    _254 => {{'caught', {'error', 'badarith'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _254
  _255 = get_tuple_element _254, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _255
  _418 = bif:'=:=' _255, `finalized`
  br _418, ^417, ^360

417:
  %% Argument types:
  %%    _256 => {any(), 'x4'}
  %% Aliased:
  %%    _256
  _260 = get_tuple_element _256, `0`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _260, 
  %%    V
  _361 = bif:'=:=' _260, V
  br _361, ^361, ^360

361:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _263 = put_tuple V, `x1`

  %% Argument types:
  %%    _263 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _263
  _264 = put_tuple `error`, _263

  %% Argument types:
  %%    _264 => {'error', {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %%    _263 => {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _263
  %% Unique:
  %%    _264
  _265 = put_tuple _264, `error`, _263

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _261 = put_tuple `abs`, V

  %% trycatch_SUITE.erl:726
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _261, 
  %%    _265
  _266 = call (`nested_catch_1`/4), _265, `{add,{1,c}}`, `{'div',{17,0}}`, _261

  %% Aliased:
  %%    _266
  _362 = succeeded:body _266
  br _362, ^362, ^1

362:
  %% Argument types:
  %%    _266 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _266
  _415 = bif:'=:=' _266, `{{caught,{error,badarg}},undefined,undefined,finalized}`
  br _415, ^415, ^364

415:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _269 = put_tuple V, `x3`

  %% Argument types:
  %%    _269 => {{nonempty_list(1.4142136 | identifier())}, 'x3'}
  %% Unique:
  %%    _269
  _270 = put_tuple `value`, _269

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _267 = put_tuple V, `x4`

  %% Argument types:
  %%    _267 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _267
  _268 = put_tuple `value`, _267

  %% trycatch_SUITE.erl:733
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _268, 
  %%    _270
  _271 = call (`nested_catch_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _270, _268

  %% Aliased:
  %%    _271
  _365 = succeeded:body _271
  br _365, ^410, ^1

410:
  %% Argument types:
  %%    _271 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _271
  _275 = get_tuple_element _271, `0`

  %% Argument types:
  %%    _275 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _275
  _409 = bif:'=:=' _275, `{caught,{error,badarith}}`
  br _409, ^409, ^367

409:
  %% Argument types:
  %%    _271 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _271
  _274 = get_tuple_element _271, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _274
  _406 = bif:is_tuple _274
  br _406, ^406, ^367

406:
  %% Argument types:
  %%    _274 => {...}
  %% Aliased:
  %%    _274
  _407 = bif:tuple_size _274

  %% Argument types:
  %%    _407 => 0..16777215
  %% Unique:
  %%    _407
  _408 = bif:'=:=' _407, `2`
  br _408, ^405, ^367

405:
  %% Argument types:
  %%    _274 => {any(), any()}
  %% Aliased:
  %%    _274
  _276 = get_tuple_element _274, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _276
  _404 = bif:'=:=' _276, `x3`
  br _404, ^403, ^367

403:
  %% Argument types:
  %%    _271 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _271
  _273 = get_tuple_element _271, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _273
  _400 = bif:is_tuple _273
  br _400, ^400, ^367

400:
  %% Argument types:
  %%    _273 => {...}
  %% Aliased:
  %%    _273
  _401 = bif:tuple_size _273

  %% Argument types:
  %%    _401 => 0..16777215
  %% Unique:
  %%    _401
  _402 = bif:'=:=' _401, `2`
  br _402, ^399, ^367

399:
  %% Argument types:
  %%    _273 => {any(), any()}
  %% Aliased:
  %%    _273
  _278 = get_tuple_element _273, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _278
  _398 = bif:'=:=' _278, `x4`
  br _398, ^397, ^367

397:
  %% Argument types:
  %%    _271 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _271
  _272 = get_tuple_element _271, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _272
  _396 = bif:'=:=' _272, `finalized`
  br _396, ^395, ^367

395:
  %% Argument types:
  %%    _274 => {any(), 'x3'}
  %% Aliased:
  %%    _274
  _277 = get_tuple_element _274, `0`

  %% trycatch_SUITE.erl:730
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _277, 
  %%    V
  _60 = bif:'=:=' _277, V
  br _60, ^690, ^367

690:
  %% Argument types:
  %%    _273 => {any(), 'x4'}
  %% Aliased:
  %%    _273
  _279 = get_tuple_element _273, `0`

  %% trycatch_SUITE.erl:731
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _279, 
  %%    V
  _61 = bif:'=:=' _279, V
  br _61, ^369, ^367

369:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _283 = put_tuple `abs`, V

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _281 = put_tuple V, `x4`

  %% Argument types:
  %%    _281 => {{nonempty_list(1.4142136 | identifier())}, 'x4'}
  %% Unique:
  %%    _281
  _282 = put_tuple `value`, _281

  %% trycatch_SUITE.erl:739
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _282, 
  %%    _283
  _284 = call (`nested_catch_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _283, _282

  %% Aliased:
  %%    _284
  _370 = succeeded:body _284
  br _370, ^390, ^1

390:
  %% Argument types:
  %%    _284 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _284
  _288 = get_tuple_element _284, `0`

  %% Argument types:
  %%    _288 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _288
  _389 = bif:'=:=' _288, `{caught,{error,badarg}}`
  br _389, ^389, ^372

389:
  %% Argument types:
  %%    _284 => {{'caught', {'error', 'badarg'}}, any(), any(), any()}
  %% Aliased:
  %%    _284
  _287 = get_tuple_element _284, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _287
  _388 = bif:'=:=' _287, `undefined`
  br _388, ^387, ^372

387:
  %% Argument types:
  %%    _284 => {{'caught', {'error', 'badarg'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _284
  _286 = get_tuple_element _284, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _286
  _384 = bif:is_tuple _286
  br _384, ^384, ^372

384:
  %% Argument types:
  %%    _286 => {...}
  %% Aliased:
  %%    _286
  _385 = bif:tuple_size _286

  %% Argument types:
  %%    _385 => 0..16777215
  %% Unique:
  %%    _385
  _386 = bif:'=:=' _385, `2`
  br _386, ^383, ^372

383:
  %% Argument types:
  %%    _286 => {any(), any()}
  %% Aliased:
  %%    _286
  _289 = get_tuple_element _286, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _289
  _382 = bif:'=:=' _289, `x4`
  br _382, ^381, ^372

381:
  %% Argument types:
  %%    _284 => {{'caught', {'error', 'badarg'}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _284
  _285 = get_tuple_element _284, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _285
  _380 = bif:'=:=' _285, `finalized`
  br _380, ^379, ^372

379:
  %% Argument types:
  %%    _286 => {any(), 'x4'}
  %% Aliased:
  %%    _286
  _290 = get_tuple_element _286, `0`

  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    _290, 
  %%    V
  _373 = bif:'=:=' _290, V
  br _373, ^373, ^372

373:
  %% Argument types:
  %%    V => {nonempty_list(1.4142136 | identifier())}
  %% Aliased:
  %%    V
  _291 = put_tuple `abs`, V

  %% trycatch_SUITE.erl:745
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _291
  _292 = call (`nested_catch_1`/4), `{{add,{2,c}},rethrow,void}`, `void`, _291, `function_clause`

  %% Aliased:
  %%    _292
  _374 = succeeded:body _292
  br _374, ^374, ^1

374:
  %% Argument types:
  %%    _292 => {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _292
  _377 = bif:'=:=' _292, `{{caught,{error,function_clause}},undefined,undefined,finalized}`
  br _377, ^377, ^376

377:
  %% Result type:
  %%    'ok'
  ret `ok`

376:
  %% trycatch_SUITE.erl:741
  %% Aliased:
  %%    _292
  _293 = match_fail `badmatch`, _292

  %% Unique:
  %%    _293
  _378 = succeeded:body _293
  br ^1

372:
  %% trycatch_SUITE.erl:735
  %% Aliased:
  %%    _284
  _294 = match_fail `badmatch`, _284

  %% Unique:
  %%    _294
  _394 = succeeded:body _294
  br ^1

367:
  %% trycatch_SUITE.erl:729
  %% Aliased:
  %%    _271
  _295 = match_fail `badmatch`, _271

  %% Unique:
  %%    _295
  _414 = succeeded:body _295
  br ^1

364:
  %% trycatch_SUITE.erl:722
  %% Aliased:
  %%    _266
  _296 = match_fail `badmatch`, _266

  %% Unique:
  %%    _296
  _416 = succeeded:body _296
  br ^1

360:
  %% trycatch_SUITE.erl:716
  %% Aliased:
  %%    _254
  _297 = match_fail `badmatch`, _254

  %% Unique:
  %%    _297
  _432 = succeeded:body _297
  br ^1

355:
  %% trycatch_SUITE.erl:710
  %% Aliased:
  %%    _238
  _298 = match_fail `badmatch`, _238

  %% Unique:
  %%    _298
  _452 = succeeded:body _298
  br ^1

349:
  %% trycatch_SUITE.erl:704
  %% Aliased:
  %%    _214
  _299 = match_fail `badmatch`, _214

  %% Unique:
  %%    _299
  _489 = succeeded:body _299
  br ^1

345:
  %% trycatch_SUITE.erl:697
  %% Aliased:
  %%    _193
  _300 = match_fail `badmatch`, _193

  %% Unique:
  %%    _300
  _518 = succeeded:body _300
  br ^1

340:
  %% trycatch_SUITE.erl:691
  %% Aliased:
  %%    _172
  _301 = match_fail `badmatch`, _172

  %% Unique:
  %%    _301
  _551 = succeeded:body _301
  br ^1

334:
  %% trycatch_SUITE.erl:685
  %% Aliased:
  %%    _147
  _302 = match_fail `badmatch`, _147

  %% Unique:
  %%    _302
  _594 = succeeded:body _302
  br ^1

331:
  %% trycatch_SUITE.erl:678
  %% Aliased:
  %%    _139
  _303 = match_fail `badmatch`, _139

  %% Unique:
  %%    _303
  _596 = succeeded:body _303
  br ^1

327:
  %% trycatch_SUITE.erl:672
  %% Aliased:
  %%    _126
  _304 = match_fail `badmatch`, _126

  %% Unique:
  %%    _304
  _612 = succeeded:body _304
  br ^1

321:
  %% trycatch_SUITE.erl:666
  %% Aliased:
  %%    _102
  _305 = match_fail `badmatch`, _102

  %% Unique:
  %%    _305
  _649 = succeeded:body _305
  br ^1

315:
  %% trycatch_SUITE.erl:660
  %% Aliased:
  %%    _76
  _306 = match_fail `badmatch`, _76

  %% Unique:
  %%    _306
  _686 = succeeded:body _306
  br ^1

310:
  %% trycatch_SUITE.erl:658
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_catch/1-',1}}
  _307 = match_fail `function_clause`, _0

  %% Unique:
  %%    _307
  _687 = succeeded:body _307
  br ^1

1:
  _308 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _308
}

%% trycatch_SUITE.erl:749
%% Counter = 296
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any())}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any())}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
%%    _1 =>
%%     'void' | {'add', {1, 'c'}} | {'throw', {{nonempty_list(1.4142136 | identifier())}, 'x2'}} | {'value', {{nonempty_list(1.4142136 | identifier())}, 'x2'}}
%%    _2 =>
%%     {'abs', {nonempty_list(1.4142136 | identifier())}} | {''div'', {1, 0} | {17, 0}} | {'exit', {{nonempty_list(1.4142136 | identifier())}, 'x3'}} | {'value', {{nonempty_list(1.4142136 | identifier())}, 'x3'}}
%%    _3 =>
%%     'function_clause' | {'abs', {nonempty_list(1.4142136 | identifier())}} | {'add', {0, 'b'}} | {'throw', {{nonempty_list(1.4142136 | identifier())}, 'x4'}} | {'value', {{nonempty_list(1.4142136 | identifier())}, 'x4'}}
function `trycatch_SUITE`:`nested_catch_1`(_0, _1, _2, _3) {
0:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any())}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any())}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _0
  _69 = get_tuple_element _0, `1`

  %% trycatch_SUITE.erl:751
  _75 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _75
  _115 = succeeded:body _75
  br _115, ^115, ^1

115:
  %% trycatch_SUITE.erl:752
  _76 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _76
  _116 = succeeded:body _76
  br _116, ^116, ^1

116:
  %% trycatch_SUITE.erl:753
  _77 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _77
  _117 = succeeded:body _77
  br _117, ^117, ^1

117:
  %% trycatch_SUITE.erl:754
  Throw = call (`erlang`:`make_ref`/0)
  _128 = new_try_tag `'try'`
  br _128, ^289, ^125

289:
  br ^292

292:
  _133 = new_try_tag `'try'`
  br _133, ^290, ^130

290:
  br ^293

293:
  _138 = new_try_tag `'try'`
  br _138, ^137, ^135

137:
  %% trycatch_SUITE.erl:757
  %% Aliased:
  %%    Throw
  %% Anno: #{thrown_type => reference}
  _85 = call (`erlang`:`throw`/1), Throw

  %% Aliased:
  %%    _85
  _139 = succeeded:body _85
  br ^135

135:
  %% Unique:
  %%    _138
  _179 = landingpad `'try'`, _138

  %% Aliased:
  %%    _179
  _8 = extract _179, `0`

  %% Aliased:
  %%    _179
  _7 = extract _179, `1`

  %% Aliased:
  %%    _179
  _6 = extract _179, `2`

  %% Unique:
  %%    _138
  _180 = kill_try_tag _138

  %% Argument types:
  %%    _8 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _8
  _177 = bif:'=:=' _8, `throw`
  br _177, ^176, ^141

176:
  %% Argument types:
  %%    Throw => reference()
  %% Aliased:
  %%    _7
  %% Unique:
  %%    Throw
  _142 = bif:'=:=' _7, Throw
  br _142, ^291, ^141

291:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any())}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any())}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _0
  _68 = get_tuple_element _0, `2`
  br ^294

294:
  _147 = new_try_tag `'try'`
  br _147, ^287, ^144

287:
  %% Argument types:
  %%    _0 => {{'add', {2, 'c'}} | {'error', {{nonempty_improper_list(any(), any())}, 'x1'}} | {'value', {{nonempty_improper_list(any(), any())}, 'x1'}}, 'error' | 'rethrow' | 'void', 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}}
  %% Unique:
  %%    _0
  _70 = get_tuple_element _0, `0`
  br ^295

295:
  _152 = new_try_tag `'try'`
  br _152, ^151, ^149

151:
  %% trycatch_SUITE.erl:761
  %% Unique:
  %%    _70
  _91 = call (`foo`/1), _70

  %% Aliased:
  %%    _91
  _153 = succeeded:body _91
  br _153, ^153, ^149

153:
  %% Unique:
  %%    _152
  _167 = kill_try_tag _152

  %% Argument types:
  %%    _68 => 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _68, 
  %%    _91
  _156 = bif:'=:=' _91, _68
  br _156, ^156, ^155

156:
  %% trycatch_SUITE.erl:763
  %% Unique:
  %%    _1
  _10 = call (`foo`/1), _1

  %% Aliased:
  %%    _10
  _157 = succeeded:body _10
  br _157, ^157, ^144

157:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _93 = put_tuple `value1`, _10
  br ^150

155:
  %% trycatch_SUITE.erl:760
  %% Aliased:
  %%    _91
  _94 = match_fail `try_clause`, _91

  %% Unique:
  %%    _94
  _158 = succeeded:body _94
  br ^144

149:
  %% Unique:
  %%    _152
  _165 = landingpad `'try'`, _152

  %% Aliased:
  %%    _165
  _14 = extract _165, `0`

  %% Aliased:
  %%    _165
  _13 = extract _165, `1`

  %% Aliased:
  %%    _165
  _12 = extract _165, `2`

  %% Unique:
  %%    _152
  _166 = kill_try_tag _152
  br ^208

208:
  %% trycatch_SUITE.erl:765
  %% Argument types:
  %%    _14 => 'error' | 'exit' | 'throw'
  %%    _69 => 'error' | 'rethrow' | 'void'
  %% Unique:
  %%    _14, 
  %%    _69
  _53 = bif:'=:=' _14, _69
  br _53, ^209, ^160

209:
  %% trycatch_SUITE.erl:765
  %% Argument types:
  %%    _68 => 'try_clause' | 'void' | {{nonempty_list(1.4142136 | identifier())}, 'x1'}
  %% Aliased:
  %%    _13, 
  %%    _68
  _54 = bif:'=:=' _13, _68
  br _54, ^162, ^160

162:
  %% trycatch_SUITE.erl:765
  %% Unique:
  %%    _1
  _15 = call (`foo`/1), _1

  %% Aliased:
  %%    _15
  _163 = succeeded:body _15
  br _163, ^163, ^144

163:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _96 = put_tuple `caught1`, _15
  br ^150

150:
  _89 = phi { _93, ^157 }, { _96, ^163 }

  %% Unique:
  %%    _147
  _175 = kill_try_tag _147

  %% trycatch_SUITE.erl:767
  %% Unique:
  %%    _2
  _16 = call (`foo`/1), _2

  %% Aliased:
  %%    _16
  _168 = succeeded:body _16
  br _168, ^168, ^130

168:
  %% trycatch_SUITE.erl:767
  %% Aliased:
  %%    _16
  _98 = call (`erlang`:`put`/2), `nested3`, _16

  %% Aliased:
  %%    _98
  _169 = succeeded:body _98
  br _169, ^136, ^130

136:
  %% Unique:
  %%    _133
  _189 = kill_try_tag _133

  %% trycatch_SUITE.erl:770
  %% Unique:
  %%    _3
  _22 = call (`foo`/1), _3

  %% Aliased:
  %%    _22
  _182 = succeeded:body _22
  br _182, ^182, ^125

182:
  %% trycatch_SUITE.erl:770
  %% Aliased:
  %%    _22
  _102 = call (`erlang`:`put`/2), `nested4`, _22

  %% Aliased:
  %%    _102
  _183 = succeeded:body _102
  br _183, ^131, ^125

131:
  %% Unique:
  %%    _128
  _192 = kill_try_tag _128

  %% Argument types:
  %%    _89 => {'caught1', any()} | {'value1', any()}
  %% Unique:
  %%    _89
  _105 = put_tuple `value`, _89
  br ^126

160:
  %% Aliased:
  %%    _12, 
  %%    _13
  _97 = resume _12, _13

  %% Unique:
  %%    _97
  _164 = succeeded:body _97
  br ^144

144:
  %% Unique:
  %%    _147
  _173 = landingpad `'try'`, _147

  %% Aliased:
  %%    _173
  _20 = extract _173, `1`

  %% Aliased:
  %%    _173
  _19 = extract _173, `2`

  %% Unique:
  %%    _147
  _174 = kill_try_tag _147
  br ^213

213:
  %% trycatch_SUITE.erl:767
  %% Unique:
  %%    _2
  _72 = call (`foo`/1), _2

  %% Aliased:
  %%    _72
  _170 = succeeded:body _72
  br _170, ^170, ^130

170:
  %% trycatch_SUITE.erl:767
  %% Aliased:
  %%    _72
  _99 = call (`erlang`:`put`/2), `nested3`, _72

  %% Aliased:
  %%    _99
  _171 = succeeded:body _99
  br _171, ^171, ^130

171:
  %% Aliased:
  %%    _19, 
  %%    _20
  _100 = resume _19, _20

  %% Unique:
  %%    _100
  _172 = succeeded:body _100
  br ^130

141:
  %% Aliased:
  %%    _6, 
  %%    _7
  _101 = resume _6, _7

  %% Unique:
  %%    _101
  _178 = succeeded:body _101
  br ^130

130:
  %% Unique:
  %%    _133
  _187 = landingpad `'try'`, _133

  %% Aliased:
  %%    _187
  _26 = extract _187, `1`

  %% Aliased:
  %%    _187
  _25 = extract _187, `2`

  %% Unique:
  %%    _133
  _188 = kill_try_tag _133
  br ^215

215:
  %% trycatch_SUITE.erl:770
  %% Unique:
  %%    _3
  _73 = call (`foo`/1), _3

  %% Aliased:
  %%    _73
  _184 = succeeded:body _73
  br _184, ^184, ^125

184:
  %% trycatch_SUITE.erl:770
  %% Aliased:
  %%    _73
  _103 = call (`erlang`:`put`/2), `nested4`, _73

  %% Aliased:
  %%    _103
  _185 = succeeded:body _103
  br _185, ^185, ^125

185:
  %% Aliased:
  %%    _25, 
  %%    _26
  _104 = resume _25, _26

  %% Unique:
  %%    _104
  _186 = succeeded:body _104
  br ^125

125:
  %% Unique:
  %%    _128
  _190 = landingpad `'try'`, _128

  %% Aliased:
  %%    _190
  _32 = extract _190, `0`

  %% Aliased:
  %%    _190
  _31 = extract _190, `1`

  %% Unique:
  %%    _128
  _191 = kill_try_tag _128

  %% Argument types:
  %%    _32 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _32
  _74 = put_tuple _32, _31

  %% Argument types:
  %%    _74 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _74
  _106 = put_tuple `caught`, _74
  br ^126

126:
  _79 = phi { _105, ^131 }, { _106, ^125 }

  %% trycatch_SUITE.erl:777
  _107 = call (`erlang`:`put`/2), `nested`, `finalized`

  %% Aliased:
  %%    _107
  _193 = succeeded:body _107
  br _193, ^218, ^1

218:
  %% trycatch_SUITE.erl:779
  _42 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _42
  _199 = succeeded:body _42
  br _199, ^199, ^1

199:
  %% trycatch_SUITE.erl:779
  _41 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _41
  _200 = succeeded:body _41
  br _200, ^200, ^1

200:
  %% trycatch_SUITE.erl:779
  _40 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _40
  _201 = succeeded:body _40
  br _201, ^201, ^1

201:
  %% Argument types:
  %%    _79 => {'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}
  %% Aliased:
  %%    _40, 
  %%    _41, 
  %%    _42
  %% Unique:
  %%    _79
  _110 = put_tuple _79, _42, _41, _40
  %% Result type:
  %%    {{'caught', {'error' | 'exit' | 'throw', any()}} | {'value', {'caught1', any()} | {'value1', any()}}, any(), any(), any()}
  %% Unique:
  %%    _110
  ret _110

1:
  _112 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _112
}

%% trycatch_SUITE.erl:783
%% Counter = 485
%% bs_ensure_opt: true
function `trycatch_SUITE`:`nested_after`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _200 = bif:is_list _0
  br _200, ^200, ^199

200:
  %% trycatch_SUITE.erl:784
  _2 = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:784
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _2 => reference()
  %%    _1 => pid()
  %% Unique:
  %%    _1, 
  %%    _2
  _37 = put_tuple _2, `1.4142136`, _1

  %% Argument types:
  %%    _37 => {reference(), 1.4142136, pid()}
  %% Aliased:
  %%    _37
  V = put_list _37, `[]`

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _43 = put_tuple V, `x1`

  %% Argument types:
  %%    _43 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _43
  _44 = put_tuple `value`, _43

  %% Argument types:
  %%    _44 => {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _43 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _43
  %% Unique:
  %%    _44
  _45 = put_tuple _44, `void`, _43

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _40 = put_tuple V, `x2`

  %% Argument types:
  %%    _40 => {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}
  %% Unique:
  %%    _40
  _41 = put_tuple `value`, _40

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _38 = put_tuple V, `x3`

  %% Argument types:
  %%    _38 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _38
  _39 = put_tuple `value`, _38

  %% trycatch_SUITE.erl:789
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _39, 
  %%    _41, 
  %%    _45
  _46 = call (`nested_after_1`/3), _45, _41, _39

  %% Aliased:
  %%    _46
  _202 = succeeded:body _46
  br _202, ^202, ^1

202:
  %% Argument types:
  %%    _46 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _46
  _450 = is_tagged_tuple _46, `4`, `value`
  br _450, ^447, ^204

447:
  %% Argument types:
  %%    _46 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _46
  _49 = get_tuple_element _46, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _444 = bif:is_tuple _49
  br _444, ^444, ^204

444:
  %% Argument types:
  %%    _49 => {...}
  %% Aliased:
  %%    _49
  _445 = bif:tuple_size _49

  %% Argument types:
  %%    _445 => 0..16777215
  %% Unique:
  %%    _445
  _446 = bif:'=:=' _445, `2`
  br _446, ^443, ^204

443:
  %% Argument types:
  %%    _49 => {any(), any()}
  %% Aliased:
  %%    _49
  _51 = get_tuple_element _49, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _442 = bif:'=:=' _51, `x3`
  br _442, ^441, ^204

441:
  %% Argument types:
  %%    _46 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _46
  _48 = get_tuple_element _46, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _438 = is_tagged_tuple _48, `2`, `value1`
  br _438, ^435, ^204

435:
  %% Argument types:
  %%    _48 => {'value1', any()}
  %% Aliased:
  %%    _48
  _53 = get_tuple_element _48, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _432 = bif:is_tuple _53
  br _432, ^432, ^204

432:
  %% Argument types:
  %%    _53 => {...}
  %% Aliased:
  %%    _53
  _433 = bif:tuple_size _53

  %% Argument types:
  %%    _433 => 0..16777215
  %% Unique:
  %%    _433
  _434 = bif:'=:=' _433, `2`
  br _434, ^431, ^204

431:
  %% Argument types:
  %%    _53 => {any(), any()}
  %% Aliased:
  %%    _53
  _55 = get_tuple_element _53, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _430 = bif:'=:=' _55, `x2`
  br _430, ^429, ^204

429:
  %% Argument types:
  %%    _46 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _46
  _47 = get_tuple_element _46, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _428 = bif:'=:=' _47, `finalized`
  br _428, ^427, ^204

427:
  %% Argument types:
  %%    _49 => {any(), 'x3'}
  %% Aliased:
  %%    _49
  _52 = get_tuple_element _49, `0`

  %% trycatch_SUITE.erl:786
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _52, 
  %%    V
  _17 = bif:'=:=' _52, V
  br _17, ^473, ^204

473:
  %% Argument types:
  %%    _53 => {any(), 'x2'}
  %% Aliased:
  %%    _53
  _56 = get_tuple_element _53, `0`

  %% trycatch_SUITE.erl:787
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _56, 
  %%    V
  _18 = bif:'=:=' _56, V
  br _18, ^206, ^204

206:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _63 = put_tuple V, `x1`

  %% Argument types:
  %%    _63 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _63
  _64 = put_tuple `value`, _63

  %% Argument types:
  %%    _64 => {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _63 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _63
  %% Unique:
  %%    _64
  _65 = put_tuple _64, `void`, _63

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _60 = put_tuple V, `x2`

  %% Argument types:
  %%    _60 => {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}
  %% Unique:
  %%    _60
  _61 = put_tuple `error`, _60

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _58 = put_tuple V, `x3`

  %% Argument types:
  %%    _58 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _58
  _59 = put_tuple `value`, _58

  %% trycatch_SUITE.erl:795
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _59, 
  %%    _61, 
  %%    _65
  _66 = call (`nested_after_1`/3), _65, _61, _59

  %% Aliased:
  %%    _66
  _207 = succeeded:body _66
  br _207, ^422, ^1

422:
  %% Argument types:
  %%    _66 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _66
  _70 = get_tuple_element _66, `0`

  %% Argument types:
  %%    _70 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _70
  _419 = bif:is_tuple _70
  br _419, ^416, ^209

416:
  %% Argument types:
  %%    _70 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _70
  _71 = get_tuple_element _70, `1`

  %% Argument types:
  %%    _71 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _71
  _413 = is_tagged_tuple _71, `2`, `error`
  br _413, ^410, ^209

410:
  %% Argument types:
  %%    _71 => {'error', any()}
  %% Aliased:
  %%    _71
  _73 = get_tuple_element _71, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _407 = bif:is_tuple _73
  br _407, ^407, ^209

407:
  %% Argument types:
  %%    _73 => {...}
  %% Aliased:
  %%    _73
  _408 = bif:tuple_size _73

  %% Argument types:
  %%    _408 => 0..16777215
  %% Unique:
  %%    _408
  _409 = bif:'=:=' _408, `2`
  br _409, ^406, ^209

406:
  %% Argument types:
  %%    _73 => {any(), any()}
  %% Aliased:
  %%    _73
  _75 = get_tuple_element _73, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _405 = bif:'=:=' _75, `x2`
  br _405, ^404, ^209

404:
  %% Argument types:
  %%    _66 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _66
  _69 = get_tuple_element _66, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _401 = bif:is_tuple _69
  br _401, ^401, ^209

401:
  %% Argument types:
  %%    _69 => {...}
  %% Aliased:
  %%    _69
  _402 = bif:tuple_size _69

  %% Argument types:
  %%    _402 => 0..16777215
  %% Unique:
  %%    _402
  _403 = bif:'=:=' _402, `2`
  br _403, ^400, ^209

400:
  %% Argument types:
  %%    _69 => {any(), any()}
  %% Aliased:
  %%    _69
  _77 = get_tuple_element _69, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _399 = bif:'=:=' _77, `x3`
  br _399, ^398, ^209

398:
  %% Argument types:
  %%    _66 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _66
  _68 = get_tuple_element _66, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _397 = bif:'=:=' _68, `undefined`
  br _397, ^396, ^209

396:
  %% Argument types:
  %%    _66 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), 'undefined', any()}
  %% Aliased:
  %%    _66
  _67 = get_tuple_element _66, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _395 = bif:'=:=' _67, `finalized`
  br _395, ^394, ^209

394:
  %% Argument types:
  %%    _73 => {any(), 'x2'}
  %% Aliased:
  %%    _73
  _76 = get_tuple_element _73, `0`

  %% trycatch_SUITE.erl:791
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _76, 
  %%    V
  _21 = bif:'=:=' _76, V
  br _21, ^469, ^209

469:
  %% Argument types:
  %%    _69 => {any(), 'x3'}
  %% Aliased:
  %%    _69
  _78 = get_tuple_element _69, `0`

  %% trycatch_SUITE.erl:792
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _78, 
  %%    V
  _22 = bif:'=:=' _78, V
  br _22, ^211, ^209

211:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _85 = put_tuple V, `x1`

  %% Argument types:
  %%    _85 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _85
  _86 = put_tuple `value`, _85

  %% Argument types:
  %%    _86 => {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _85 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _85
  %% Unique:
  %%    _86
  _87 = put_tuple _86, `void`, _85

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _82 = put_tuple V, `x2`

  %% Argument types:
  %%    _82 => {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}
  %% Unique:
  %%    _82
  _83 = put_tuple `error`, _82

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _80 = put_tuple V, `x3`

  %% Argument types:
  %%    _80 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _80
  _81 = put_tuple `exit`, _80

  %% trycatch_SUITE.erl:801
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _81, 
  %%    _83, 
  %%    _87
  _88 = call (`nested_after_1`/3), _87, _83, _81

  %% Aliased:
  %%    _88
  _212 = succeeded:body _88
  br _212, ^389, ^1

389:
  %% Argument types:
  %%    _88 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _88
  _92 = get_tuple_element _88, `0`

  %% Argument types:
  %%    _92 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _92
  _386 = bif:is_tuple _92
  br _386, ^383, ^214

383:
  %% Argument types:
  %%    _92 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _92
  _93 = get_tuple_element _92, `1`

  %% Argument types:
  %%    _93 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _93
  _380 = is_tagged_tuple _93, `2`, `exit`
  br _380, ^377, ^214

377:
  %% Argument types:
  %%    _93 => {'exit', any()}
  %% Aliased:
  %%    _93
  _95 = get_tuple_element _93, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _374 = bif:is_tuple _95
  br _374, ^374, ^214

374:
  %% Argument types:
  %%    _95 => {...}
  %% Aliased:
  %%    _95
  _375 = bif:tuple_size _95

  %% Argument types:
  %%    _375 => 0..16777215
  %% Unique:
  %%    _375
  _376 = bif:'=:=' _375, `2`
  br _376, ^373, ^214

373:
  %% Argument types:
  %%    _95 => {any(), any()}
  %% Aliased:
  %%    _95
  _97 = get_tuple_element _95, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _97
  _372 = bif:'=:=' _97, `x3`
  br _372, ^371, ^214

371:
  %% Argument types:
  %%    _88 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _88
  _91 = get_tuple_element _88, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _370 = bif:'=:=' _91, `undefined`
  br _370, ^369, ^214

369:
  %% Argument types:
  %%    _88 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, 'undefined', any(), any()}
  %% Aliased:
  %%    _88
  _90 = get_tuple_element _88, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _90
  _368 = bif:'=:=' _90, `undefined`
  br _368, ^367, ^214

367:
  %% Argument types:
  %%    _88 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, 'undefined', 'undefined', any()}
  %% Aliased:
  %%    _88
  _89 = get_tuple_element _88, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _366 = bif:'=:=' _89, `finalized`
  br _366, ^365, ^214

365:
  %% Argument types:
  %%    _95 => {any(), 'x3'}
  %% Aliased:
  %%    _95
  _98 = get_tuple_element _95, `0`

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _98, 
  %%    V
  _215 = bif:'=:=' _98, V
  br _215, ^215, ^214

215:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _101 = put_tuple V, `x1`

  %% Argument types:
  %%    _101 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Unique:
  %%    _101
  _102 = put_tuple `value`, _101

  %% Argument types:
  %%    _102 => {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _102
  _103 = put_tuple _102, `void`, `try_clause`

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _99 = put_tuple V, `x3`

  %% Argument types:
  %%    _99 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _99
  _100 = put_tuple `value`, _99

  %% trycatch_SUITE.erl:808
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _100, 
  %%    _103
  _104 = call (`nested_after_1`/3), _103, `void`, _100

  %% Aliased:
  %%    _104
  _216 = succeeded:body _104
  br _216, ^360, ^1

360:
  %% Argument types:
  %%    _104 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _104
  _108 = get_tuple_element _104, `0`

  %% Argument types:
  %%    _108 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _108
  _357 = bif:is_tuple _108
  br _357, ^354, ^218

354:
  %% Argument types:
  %%    _108 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _108
  _109 = get_tuple_element _108, `1`

  %% Argument types:
  %%    _109 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _109
  _351 = is_tagged_tuple _109, `2`, `error`
  br _351, ^348, ^218

348:
  %% Argument types:
  %%    _109 => {'error', any()}
  %% Aliased:
  %%    _109
  _111 = get_tuple_element _109, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _345 = is_tagged_tuple _111, `2`, `try_clause`
  br _345, ^342, ^218

342:
  %% Argument types:
  %%    _111 => {'try_clause', any()}
  %% Aliased:
  %%    _111
  _113 = get_tuple_element _111, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _339 = bif:is_tuple _113
  br _339, ^339, ^218

339:
  %% Argument types:
  %%    _113 => {...}
  %% Aliased:
  %%    _113
  _340 = bif:tuple_size _113

  %% Argument types:
  %%    _340 => 0..16777215
  %% Unique:
  %%    _340
  _341 = bif:'=:=' _340, `2`
  br _341, ^338, ^218

338:
  %% Argument types:
  %%    _113 => {any(), any()}
  %% Aliased:
  %%    _113
  _115 = get_tuple_element _113, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _337 = bif:'=:=' _115, `x1`
  br _337, ^336, ^218

336:
  %% Argument types:
  %%    _104 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _104
  _107 = get_tuple_element _104, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _107
  _333 = bif:is_tuple _107
  br _333, ^333, ^218

333:
  %% Argument types:
  %%    _107 => {...}
  %% Aliased:
  %%    _107
  _334 = bif:tuple_size _107

  %% Argument types:
  %%    _334 => 0..16777215
  %% Unique:
  %%    _334
  _335 = bif:'=:=' _334, `2`
  br _335, ^332, ^218

332:
  %% Argument types:
  %%    _107 => {any(), any()}
  %% Aliased:
  %%    _107
  _117 = get_tuple_element _107, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _117
  _331 = bif:'=:=' _117, `x3`
  br _331, ^330, ^218

330:
  %% Argument types:
  %%    _104 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _104
  _106 = get_tuple_element _104, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _329 = bif:'=:=' _106, `undefined`
  br _329, ^328, ^218

328:
  %% Argument types:
  %%    _104 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), 'undefined', any()}
  %% Aliased:
  %%    _104
  _105 = get_tuple_element _104, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _105
  _327 = bif:'=:=' _105, `finalized`
  br _327, ^326, ^218

326:
  %% Argument types:
  %%    _113 => {any(), 'x1'}
  %% Aliased:
  %%    _113
  _116 = get_tuple_element _113, `0`

  %% trycatch_SUITE.erl:804
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _116, 
  %%    V
  _26 = bif:'=:=' _116, V
  br _26, ^465, ^218

465:
  %% Argument types:
  %%    _107 => {any(), 'x3'}
  %% Aliased:
  %%    _107
  _118 = get_tuple_element _107, `0`

  %% trycatch_SUITE.erl:805
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _118, 
  %%    V
  _27 = bif:'=:=' _118, V
  br _27, ^220, ^218

220:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _120 = put_tuple V, `x1`

  %% Argument types:
  %%    _120 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Unique:
  %%    _120
  _121 = put_tuple `value`, _120

  %% Argument types:
  %%    _121 => {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _121
  _122 = put_tuple _121, `void`, `try_clause`

  %% trycatch_SUITE.erl:814
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _122
  _123 = call (`nested_after_1`/3), _122, `void`, `{'div',{17,0}}`

  %% Aliased:
  %%    _123
  _221 = succeeded:body _123
  br _221, ^221, ^1

221:
  %% Argument types:
  %%    _123 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _123
  _324 = bif:'=:=' _123, `{{caught,{error,badarith}},undefined,undefined,finalized}`
  br _324, ^324, ^223

324:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _129 = put_tuple V, `x1`

  %% Argument types:
  %%    _129 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _129
  _130 = put_tuple `throw`, _129

  %% Argument types:
  %%    _130 => {'throw', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _129 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _129
  %% Unique:
  %%    _130
  _131 = put_tuple _130, `throw`, _129

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _126 = put_tuple V, `x2`

  %% Argument types:
  %%    _126 => {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}
  %% Unique:
  %%    _126
  _127 = put_tuple `value`, _126

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _124 = put_tuple V, `x3`

  %% Argument types:
  %%    _124 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _124
  _125 = put_tuple `value`, _124

  %% trycatch_SUITE.erl:821
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _125, 
  %%    _127, 
  %%    _131
  _132 = call (`nested_after_1`/3), _131, _127, _125

  %% Aliased:
  %%    _132
  _224 = succeeded:body _132
  br _224, ^224, ^1

224:
  %% Argument types:
  %%    _132 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _132
  _320 = is_tagged_tuple _132, `4`, `value`
  br _320, ^317, ^226

317:
  %% Argument types:
  %%    _132 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _132
  _135 = get_tuple_element _132, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _135
  _314 = bif:is_tuple _135
  br _314, ^314, ^226

314:
  %% Argument types:
  %%    _135 => {...}
  %% Aliased:
  %%    _135
  _315 = bif:tuple_size _135

  %% Argument types:
  %%    _315 => 0..16777215
  %% Unique:
  %%    _315
  _316 = bif:'=:=' _315, `2`
  br _316, ^313, ^226

313:
  %% Argument types:
  %%    _135 => {any(), any()}
  %% Aliased:
  %%    _135
  _137 = get_tuple_element _135, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _312 = bif:'=:=' _137, `x3`
  br _312, ^311, ^226

311:
  %% Argument types:
  %%    _132 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _132
  _134 = get_tuple_element _132, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _134
  _308 = is_tagged_tuple _134, `2`, `caught1`
  br _308, ^305, ^226

305:
  %% Argument types:
  %%    _134 => {'caught1', any()}
  %% Aliased:
  %%    _134
  _139 = get_tuple_element _134, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _139
  _302 = bif:is_tuple _139
  br _302, ^302, ^226

302:
  %% Argument types:
  %%    _139 => {...}
  %% Aliased:
  %%    _139
  _303 = bif:tuple_size _139

  %% Argument types:
  %%    _303 => 0..16777215
  %% Unique:
  %%    _303
  _304 = bif:'=:=' _303, `2`
  br _304, ^301, ^226

301:
  %% Argument types:
  %%    _139 => {any(), any()}
  %% Aliased:
  %%    _139
  _141 = get_tuple_element _139, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _141
  _300 = bif:'=:=' _141, `x2`
  br _300, ^299, ^226

299:
  %% Argument types:
  %%    _132 => {'value', any(), any(), any()}
  %% Aliased:
  %%    _132
  _133 = get_tuple_element _132, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _298 = bif:'=:=' _133, `finalized`
  br _298, ^297, ^226

297:
  %% Argument types:
  %%    _135 => {any(), 'x3'}
  %% Aliased:
  %%    _135
  _138 = get_tuple_element _135, `0`

  %% trycatch_SUITE.erl:818
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _138, 
  %%    V
  _30 = bif:'=:=' _138, V
  br _30, ^461, ^226

461:
  %% Argument types:
  %%    _139 => {any(), 'x2'}
  %% Aliased:
  %%    _139
  _142 = get_tuple_element _139, `0`

  %% trycatch_SUITE.erl:819
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _142, 
  %%    V
  _31 = bif:'=:=' _142, V
  br _31, ^228, ^226

228:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _147 = put_tuple V, `x1`

  %% Argument types:
  %%    _147 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _147
  _148 = put_tuple `throw`, _147

  %% Argument types:
  %%    _148 => {'throw', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _147 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _147
  %% Unique:
  %%    _148
  _149 = put_tuple _148, `throw`, _147

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _144 = put_tuple V, `x3`

  %% Argument types:
  %%    _144 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _144
  _145 = put_tuple `value`, _144

  %% trycatch_SUITE.erl:827
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _145, 
  %%    _149
  _150 = call (`nested_after_1`/3), _149, `{add,{a,b}}`, _145

  %% Aliased:
  %%    _150
  _229 = succeeded:body _150
  br _229, ^292, ^1

292:
  %% Argument types:
  %%    _150 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _150
  _154 = get_tuple_element _150, `0`

  %% Argument types:
  %%    _154 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _154
  _291 = bif:'=:=' _154, `{caught,{error,badarith}}`
  br _291, ^291, ^231

291:
  %% Argument types:
  %%    _150 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _150
  _153 = get_tuple_element _150, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _153
  _288 = bif:is_tuple _153
  br _288, ^288, ^231

288:
  %% Argument types:
  %%    _153 => {...}
  %% Aliased:
  %%    _153
  _289 = bif:tuple_size _153

  %% Argument types:
  %%    _289 => 0..16777215
  %% Unique:
  %%    _289
  _290 = bif:'=:=' _289, `2`
  br _290, ^287, ^231

287:
  %% Argument types:
  %%    _153 => {any(), any()}
  %% Aliased:
  %%    _153
  _155 = get_tuple_element _153, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _155
  _286 = bif:'=:=' _155, `x3`
  br _286, ^285, ^231

285:
  %% Argument types:
  %%    _150 => {{'caught', {'error', 'badarith'}}, any(), any(), any()}
  %% Aliased:
  %%    _150
  _152 = get_tuple_element _150, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _152
  _284 = bif:'=:=' _152, `undefined`
  br _284, ^283, ^231

283:
  %% Argument types:
  %%    _150 => {{'caught', {'error', 'badarith'}}, any(), 'undefined', any()}
  %% Aliased:
  %%    _150
  _151 = get_tuple_element _150, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _151
  _282 = bif:'=:=' _151, `finalized`
  br _282, ^281, ^231

281:
  %% Argument types:
  %%    _153 => {any(), 'x3'}
  %% Aliased:
  %%    _153
  _156 = get_tuple_element _153, `0`

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _156, 
  %%    V
  _232 = bif:'=:=' _156, V
  br _232, ^232, ^231

232:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _159 = put_tuple V, `x1`

  %% Argument types:
  %%    _159 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _159
  _160 = put_tuple `throw`, _159

  %% Argument types:
  %%    _160 => {'throw', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %%    _159 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _159
  %% Unique:
  %%    _160
  _161 = put_tuple _160, `throw`, _159

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _157 = put_tuple `abs`, V

  %% trycatch_SUITE.erl:833
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _157, 
  %%    _161
  _162 = call (`nested_after_1`/3), _161, `{add,{a,b}}`, _157

  %% Aliased:
  %%    _162
  _233 = succeeded:body _162
  br _233, ^233, ^1

233:
  %% Argument types:
  %%    _162 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _162
  _279 = bif:'=:=' _162, `{{caught,{error,badarg}},undefined,undefined,finalized}`
  br _279, ^279, ^235

279:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _165 = put_tuple V, `x1`

  %% Argument types:
  %%    _165 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Unique:
  %%    _165
  _166 = put_tuple `throw`, _165

  %% Argument types:
  %%    _166 => {'throw', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _166
  _167 = put_tuple _166, `rethrow`, `void`

  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _163 = put_tuple V, `x3`

  %% Argument types:
  %%    _163 => {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}
  %% Unique:
  %%    _163
  _164 = put_tuple `value`, _163

  %% trycatch_SUITE.erl:840
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _164, 
  %%    _167
  _168 = call (`nested_after_1`/3), _167, `void`, _164

  %% Aliased:
  %%    _168
  _236 = succeeded:body _168
  br _236, ^274, ^1

274:
  %% Argument types:
  %%    _168 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _168
  _172 = get_tuple_element _168, `0`

  %% Argument types:
  %%    _172 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _172
  _271 = bif:is_tuple _172
  br _271, ^268, ^238

268:
  %% Argument types:
  %%    _172 => {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _172
  _173 = get_tuple_element _172, `1`

  %% Argument types:
  %%    _173 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _173
  _265 = is_tagged_tuple _173, `2`, `throw`
  br _265, ^262, ^238

262:
  %% Argument types:
  %%    _173 => {'throw', any()}
  %% Aliased:
  %%    _173
  _175 = get_tuple_element _173, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _175
  _259 = bif:is_tuple _175
  br _259, ^259, ^238

259:
  %% Argument types:
  %%    _175 => {...}
  %% Aliased:
  %%    _175
  _260 = bif:tuple_size _175

  %% Argument types:
  %%    _260 => 0..16777215
  %% Unique:
  %%    _260
  _261 = bif:'=:=' _260, `2`
  br _261, ^258, ^238

258:
  %% Argument types:
  %%    _175 => {any(), any()}
  %% Aliased:
  %%    _175
  _177 = get_tuple_element _175, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _177
  _257 = bif:'=:=' _177, `x1`
  br _257, ^256, ^238

256:
  %% Argument types:
  %%    _168 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _168
  _171 = get_tuple_element _168, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _171
  _253 = bif:is_tuple _171
  br _253, ^253, ^238

253:
  %% Argument types:
  %%    _171 => {...}
  %% Aliased:
  %%    _171
  _254 = bif:tuple_size _171

  %% Argument types:
  %%    _254 => 0..16777215
  %% Unique:
  %%    _254
  _255 = bif:'=:=' _254, `2`
  br _255, ^252, ^238

252:
  %% Argument types:
  %%    _171 => {any(), any()}
  %% Aliased:
  %%    _171
  _179 = get_tuple_element _171, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _251 = bif:'=:=' _179, `x3`
  br _251, ^250, ^238

250:
  %% Argument types:
  %%    _168 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _168
  _170 = get_tuple_element _168, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _170
  _249 = bif:'=:=' _170, `undefined`
  br _249, ^248, ^238

248:
  %% Argument types:
  %%    _168 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), 'undefined', any()}
  %% Aliased:
  %%    _168
  _169 = get_tuple_element _168, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _169
  _247 = bif:'=:=' _169, `finalized`
  br _247, ^246, ^238

246:
  %% Argument types:
  %%    _175 => {any(), 'x1'}
  %% Aliased:
  %%    _175
  _178 = get_tuple_element _175, `0`

  %% trycatch_SUITE.erl:836
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _178, 
  %%    V
  _35 = bif:'=:=' _178, V
  br _35, ^457, ^238

457:
  %% Argument types:
  %%    _171 => {any(), 'x3'}
  %% Aliased:
  %%    _171
  _180 = get_tuple_element _171, `0`

  %% trycatch_SUITE.erl:837
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    _180, 
  %%    V
  _36 = bif:'=:=' _180, V
  br _36, ^240, ^238

240:
  %% Argument types:
  %%    V => nonempty_list({reference(), 1.4142136, pid()})
  %% Aliased:
  %%    V
  _182 = put_tuple V, `x1`

  %% Argument types:
  %%    _182 => {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Unique:
  %%    _182
  _183 = put_tuple `throw`, _182

  %% Argument types:
  %%    _183 => {'throw', {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _183
  _184 = put_tuple _183, `rethrow`, `void`

  %% trycatch_SUITE.erl:846
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _184
  _185 = call (`nested_after_1`/3), _184, `void`, `{'div',{1,0}}`

  %% Aliased:
  %%    _185
  _241 = succeeded:body _185
  br _241, ^241, ^1

241:
  %% Argument types:
  %%    _185 => {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Aliased:
  %%    _185
  _244 = bif:'=:=' _185, `{{caught,{error,badarith}},undefined,undefined,finalized}`
  br _244, ^244, ^243

244:
  %% Result type:
  %%    'ok'
  ret `ok`

243:
  %% trycatch_SUITE.erl:842
  %% Aliased:
  %%    _185
  _186 = match_fail `badmatch`, _185

  %% Unique:
  %%    _186
  _245 = succeeded:body _186
  br ^1

238:
  %% trycatch_SUITE.erl:836
  %% Aliased:
  %%    _168
  _187 = match_fail `badmatch`, _168

  %% Unique:
  %%    _187
  _278 = succeeded:body _187
  br ^1

235:
  %% trycatch_SUITE.erl:829
  %% Aliased:
  %%    _162
  _188 = match_fail `badmatch`, _162

  %% Unique:
  %%    _188
  _280 = succeeded:body _188
  br ^1

231:
  %% trycatch_SUITE.erl:823
  %% Aliased:
  %%    _150
  _189 = match_fail `badmatch`, _150

  %% Unique:
  %%    _189
  _296 = succeeded:body _189
  br ^1

226:
  %% trycatch_SUITE.erl:817
  %% Aliased:
  %%    _132
  _190 = match_fail `badmatch`, _132

  %% Unique:
  %%    _190
  _323 = succeeded:body _190
  br ^1

223:
  %% trycatch_SUITE.erl:810
  %% Aliased:
  %%    _123
  _191 = match_fail `badmatch`, _123

  %% Unique:
  %%    _191
  _325 = succeeded:body _191
  br ^1

218:
  %% trycatch_SUITE.erl:804
  %% Aliased:
  %%    _104
  _192 = match_fail `badmatch`, _104

  %% Unique:
  %%    _192
  _364 = succeeded:body _192
  br ^1

214:
  %% trycatch_SUITE.erl:797
  %% Aliased:
  %%    _88
  _193 = match_fail `badmatch`, _88

  %% Unique:
  %%    _193
  _393 = succeeded:body _193
  br ^1

209:
  %% trycatch_SUITE.erl:791
  %% Aliased:
  %%    _66
  _194 = match_fail `badmatch`, _66

  %% Unique:
  %%    _194
  _426 = succeeded:body _194
  br ^1

204:
  %% trycatch_SUITE.erl:785
  %% Aliased:
  %%    _46
  _195 = match_fail `badmatch`, _46

  %% Unique:
  %%    _195
  _453 = succeeded:body _195
  br ^1

199:
  %% trycatch_SUITE.erl:783
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_after/1-',1}}
  _196 = match_fail `function_clause`, _0

  %% Unique:
  %%    _196
  _454 = succeeded:body _196
  br ^1

1:
  _197 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _197
}

%% trycatch_SUITE.erl:850
%% Counter = 315
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {{'throw', {nonempty_list({...}), 'x1'}} | {'value', {nonempty_list({...}), 'x1'}}, 'rethrow' | 'throw' | 'void', 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
%%    _1 =>
%%     'void' | {'add', {'a', 'b'}} | {'error', {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}} | {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x2'}}
%%    _2 =>
%%     {'abs', nonempty_list({reference(), 1.4142136, pid()})} | {''div'', {1, 0} | {17, 0}} | {'exit', {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}} | {'value', {nonempty_list({reference(), 1.4142136, pid()}), 'x3'}}
function `trycatch_SUITE`:`nested_after_1`(_0, _1, _2) {
0:
  %% trycatch_SUITE.erl:852
  _92 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _92
  _141 = succeeded:body _92
  br _141, ^141, ^1

141:
  %% trycatch_SUITE.erl:853
  _93 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _93
  _142 = succeeded:body _93
  br _142, ^142, ^1

142:
  %% trycatch_SUITE.erl:854
  _94 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _94
  _143 = succeeded:body _94
  br _143, ^147, ^1

147:
  %% Argument types:
  %%    _0 => {{'throw', {nonempty_list({...}), 'x1'}} | {'value', {nonempty_list({...}), 'x1'}}, 'rethrow' | 'throw' | 'void', 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _0
  _72 = get_tuple_element _0, `1`
  _153 = new_try_tag `'try'`
  br _153, ^309, ^150

309:
  %% Argument types:
  %%    _0 => {{'throw', {nonempty_list({...}), 'x1'}} | {'value', {nonempty_list({...}), 'x1'}}, 'rethrow' | 'throw' | 'void', 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _0
  _71 = get_tuple_element _0, `2`
  br ^313

313:
  _163 = new_try_tag `'try'`
  br _163, ^307, ^160

307:
  %% Argument types:
  %%    _0 => {{'throw', {nonempty_list({...}), 'x1'}} | {'value', {nonempty_list({...}), 'x1'}}, 'rethrow' | 'throw' | 'void', 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}}
  %% Unique:
  %%    _0
  _73 = get_tuple_element _0, `0`
  br ^314

314:
  _168 = new_try_tag `'try'`
  br _168, ^167, ^165

167:
  %% trycatch_SUITE.erl:862
  %% Unique:
  %%    _73
  _104 = call (`foo`/1), _73

  %% Aliased:
  %%    _104
  _169 = succeeded:body _104
  br _169, ^169, ^165

169:
  %% Unique:
  %%    _168
  _183 = kill_try_tag _168

  %% Argument types:
  %%    _71 => 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _71, 
  %%    _104
  _172 = bif:'=:=' _104, _71
  br _172, ^172, ^171

172:
  %% trycatch_SUITE.erl:864
  %% Unique:
  %%    _1
  _5 = call (`foo`/1), _1

  %% Aliased:
  %%    _5
  _173 = succeeded:body _5
  br _173, ^173, ^160

173:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _106 = put_tuple `value1`, _5
  br ^166

171:
  %% trycatch_SUITE.erl:861
  %% Aliased:
  %%    _104
  _107 = match_fail `try_clause`, _104

  %% Unique:
  %%    _107
  _174 = succeeded:body _107
  br ^160

165:
  %% Unique:
  %%    _168
  _181 = landingpad `'try'`, _168

  %% Aliased:
  %%    _181
  _9 = extract _181, `0`

  %% Aliased:
  %%    _181
  _8 = extract _181, `1`

  %% Aliased:
  %%    _181
  _7 = extract _181, `2`

  %% Unique:
  %%    _168
  _182 = kill_try_tag _168
  br ^257

257:
  %% trycatch_SUITE.erl:866
  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %%    _72 => 'rethrow' | 'throw' | 'void'
  %% Unique:
  %%    _9, 
  %%    _72
  _46 = bif:'=:=' _9, _72
  br _46, ^258, ^176

258:
  %% trycatch_SUITE.erl:866
  %% Argument types:
  %%    _71 => 'try_clause' | 'void' | {nonempty_list({reference(), 1.4142136, pid()}), 'x1'}
  %% Aliased:
  %%    _8, 
  %%    _71
  _47 = bif:'=:=' _8, _71
  br _47, ^178, ^176

178:
  %% trycatch_SUITE.erl:866
  %% Unique:
  %%    _1
  _10 = call (`foo`/1), _1

  %% Aliased:
  %%    _10
  _179 = succeeded:body _10
  br _179, ^179, ^160

179:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _109 = put_tuple `caught1`, _10
  br ^166

166:
  _102 = phi { _106, ^173 }, { _109, ^179 }

  %% Unique:
  %%    _163
  _191 = kill_try_tag _163

  %% trycatch_SUITE.erl:868
  %% Unique:
  %%    _2
  _11 = call (`foo`/1), _2

  %% Aliased:
  %%    _11
  _184 = succeeded:body _11
  br _184, ^184, ^150

184:
  %% trycatch_SUITE.erl:868
  %% Aliased:
  %%    _11
  _111 = call (`erlang`:`put`/2), `nested3`, _11

  %% Aliased:
  %%    _111
  _185 = succeeded:body _111
  br _185, ^263, ^150

263:
  %% trycatch_SUITE.erl:870
  %% Unique:
  %%    _102
  _114 = call (`erlang`:`put`/2), `nested4`, _102

  %% Aliased:
  %%    _114
  _192 = succeeded:body _114
  br _192, ^156, ^150

156:
  %% Unique:
  %%    _153
  _237 = kill_try_tag _153
  br ^151

176:
  %% Aliased:
  %%    _7, 
  %%    _8
  _110 = resume _7, _8

  %% Unique:
  %%    _110
  _180 = succeeded:body _110
  br ^160

160:
  %% Unique:
  %%    _163
  _189 = landingpad `'try'`, _163

  %% Aliased:
  %%    _189
  _15 = extract _189, `1`

  %% Aliased:
  %%    _189
  _14 = extract _189, `2`

  %% Unique:
  %%    _163
  _190 = kill_try_tag _163
  br ^262

262:
  %% trycatch_SUITE.erl:868
  %% Unique:
  %%    _2
  _75 = call (`foo`/1), _2

  %% Aliased:
  %%    _75
  _186 = succeeded:body _75
  br _186, ^186, ^150

186:
  %% trycatch_SUITE.erl:868
  %% Aliased:
  %%    _75
  _112 = call (`erlang`:`put`/2), `nested3`, _75

  %% Aliased:
  %%    _112
  _187 = succeeded:body _112
  br _187, ^187, ^150

187:
  %% Aliased:
  %%    _14, 
  %%    _15
  _113 = resume _14, _15

  %% Unique:
  %%    _113
  _188 = succeeded:body _113
  br ^150

150:
  %% Unique:
  %%    _153
  _235 = landingpad `'try'`, _153

  %% Aliased:
  %%    _235
  _28 = extract _235, `0`

  %% Aliased:
  %%    _235
  _27 = extract _235, `1`

  %% Unique:
  %%    _153
  _236 = kill_try_tag _153

  %% Argument types:
  %%    _28 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _27
  %% Unique:
  %%    _28
  _91 = put_tuple _28, _27

  %% Argument types:
  %%    _91 => {'error' | 'exit' | 'throw', any()}
  %% Unique:
  %%    _91
  _132 = put_tuple `caught`, _91
  br ^151

151:
  _96 = phi { _132, ^150 }, { `value`, ^156 }

  %% trycatch_SUITE.erl:877
  _133 = call (`erlang`:`put`/2), `nested`, `finalized`

  %% Aliased:
  %%    _133
  _238 = succeeded:body _133
  br _238, ^269, ^1

269:
  %% trycatch_SUITE.erl:879
  _38 = call (`erlang`:`erase`/1), `nested3`

  %% Aliased:
  %%    _38
  _244 = succeeded:body _38
  br _244, ^244, ^1

244:
  %% trycatch_SUITE.erl:879
  _37 = call (`erlang`:`erase`/1), `nested4`

  %% Aliased:
  %%    _37
  _245 = succeeded:body _37
  br _245, ^245, ^1

245:
  %% trycatch_SUITE.erl:879
  _36 = call (`erlang`:`erase`/1), `nested`

  %% Aliased:
  %%    _36
  _246 = succeeded:body _36
  br _246, ^246, ^1

246:
  %% Argument types:
  %%    _96 => 'value' | {'caught', {'error' | 'exit' | 'throw', any()}}
  %% Aliased:
  %%    _36, 
  %%    _37, 
  %%    _38
  %% Unique:
  %%    _96
  _136 = put_tuple _96, _38, _37, _36
  %% Result type:
  %%    {'value' | {'caught', {'error' | 'exit' | 'throw', any()}}, any(), any(), any()}
  %% Unique:
  %%    _136
  ret _136

1:
  _138 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _138
}

%% trycatch_SUITE.erl:883
%% Counter = 16
%% bs_ensure_opt: true
function `trycatch_SUITE`:`nested_horrid`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% trycatch_SUITE.erl:885
  %% Result type:
  %%    {nonempty_list('true'), {nonempty_list('true' | 1.0), any()}}
  _3 = call (`nested_horrid_1`/2), `{true,void,void}`, `1.0`

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => {nonempty_list('true'), {nonempty_list('true' | 1.0), any()}}
  %% Aliased:
  %%    _3
  _13 = bif:'=:=' _3, `{[true,true],{[true,1.0],1.0}}`
  br _13, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% trycatch_SUITE.erl:884
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _14 = succeeded:body _4
  br ^1

8:
  %% trycatch_SUITE.erl:883
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_horrid/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% trycatch_SUITE.erl:888
%% Counter = 85
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'true', 'void', 'void'}
%%    _1 =>
%%     1.0
function `trycatch_SUITE`:`nested_horrid_1`(_0, _1) {
0:
  br ^84

84:
  _43 = new_try_tag `'try'`
  br _43, ^66, ^40

66:
  %% trycatch_SUITE.erl:892
  B2 = call (`foo`/1), `1.0`

  %% Aliased:
  %%    B2
  _47 = succeeded:body B2
  br _47, ^47, ^40

47:
  %% Unique:
  %%    _43
  _56 = kill_try_tag _43

  %% Argument types:
  %%    
  %% Aliased:
  %%    B2
  _31 = put_tuple `[true,1.0]`, B2

  %% Argument types:
  %%    _31 => {nonempty_list('true' | 1.0), any()}
  %% Unique:
  %%    _31
  _33 = put_tuple `[true,true]`, _31
  %% Result type:
  %%    {nonempty_list('true'), {nonempty_list('true' | 1.0), any()}}
  %% Unique:
  %%    _33
  ret _33

40:
  %% Unique:
  %%    _43
  _54 = landingpad `'try'`, _43

  %% Aliased:
  %%    _54
  _11 = extract _54, `1`

  %% Aliased:
  %%    _54
  _10 = extract _54, `2`

  %% Unique:
  %%    _43
  _55 = kill_try_tag _43
  br ^50

50:
  %% Aliased:
  %%    _10, 
  %%    _11
  _34 = resume _10, _11

  %% Unique:
  %%    _34
  _53 = succeeded:body _34
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% trycatch_SUITE.erl:906
%% Counter = 66
%% bs_ensure_opt: true
function `trycatch_SUITE`:`foo`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _53 = bif:is_tuple _0
  br _53, ^53, ^24

53:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _54 = bif:tuple_size _0

  %% Argument types:
  %%    _54 => 0..16777215
  %% Unique:
  %%    _54
  _55 = bif:'=:=' _54, `2`
  br _55, ^52, ^24

52:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _7 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _6 = get_tuple_element _0, `1`
  switch _7, ^24, [
    { `abs`, ^48 },
    { `add`, ^46 },
    { `'div'`, ^45 },
    { `error`, ^49 },
    { `exit`, ^51 },
    { `raise`, ^47 },
    { `throw`, ^50 },
    { `value`, ^44 }
  ]

44:
  %% Aliased:
  %%    _6
  ret _6

50:
  %% trycatch_SUITE.erl:916
  %% Aliased:
  %%    _6
  %% Anno: #{thrown_type => any}
  _16 = call (`erlang`:`throw`/1), _6

  %% Aliased:
  %%    _16
  _37 = succeeded:body _16
  br ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _41 = bif:is_tuple _6
  br _41, ^41, ^24

41:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _42 = bif:tuple_size _6

  %% Argument types:
  %%    _42 => 0..16777215
  %% Unique:
  %%    _42
  _43 = bif:'=:=' _42, `2`
  br _43, ^63, ^24

63:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _13 = get_tuple_element _6, `0`

  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _12 = get_tuple_element _6, `1`

  %% trycatch_SUITE.erl:920
  %% Aliased:
  %%    _12, 
  %%    _13
  _14 = call (`erlang`:`raise`/2), _13, _12

  %% Aliased:
  %%    _14
  _39 = succeeded:body _14
  br _39, ^39, ^1

39:
  %% Aliased:
  %%    _14
  ret _14

51:
  %% trycatch_SUITE.erl:918
  %% Aliased:
  %%    _6
  _15 = call (`erlang`:`exit`/1), _6

  %% Unique:
  %%    _15
  _38 = succeeded:body _15
  br ^1

49:
  %% trycatch_SUITE.erl:914
  %% Aliased:
  %%    _6
  _17 = call (`erlang`:`error`/1), _6

  %% Aliased:
  %%    _17
  _36 = succeeded:body _17
  br ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _27 = bif:is_tuple _6
  br _27, ^27, ^24

27:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _28 = bif:tuple_size _6

  %% Argument types:
  %%    _28 => 0..16777215
  %% Unique:
  %%    _28
  _29 = bif:'=:=' _28, `2`
  br _29, ^64, ^24

64:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _9 = get_tuple_element _6, `0`

  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _8 = get_tuple_element _6, `1`

  %% trycatch_SUITE.erl:908
  %% Result type:
  %%    integer()
  %% Aliased:
  %%    _8, 
  %%    _9
  _20 = call (`my_div`/2), _9, _8

  %% Unique:
  %%    _20
  _25 = succeeded:body _20
  br _25, ^25, ^1

25:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _20
  ret _20

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _32 = bif:is_tuple _6
  br _32, ^32, ^24

32:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _33 = bif:tuple_size _6

  %% Argument types:
  %%    _33 => 0..16777215
  %% Unique:
  %%    _33
  _34 = bif:'=:=' _33, `2`
  br _34, ^65, ^24

65:
  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _11 = get_tuple_element _6, `0`

  %% Argument types:
  %%    _6 => {any(), any()}
  %% Aliased:
  %%    _6
  _10 = get_tuple_element _6, `1`

  %% trycatch_SUITE.erl:910
  %% Result type:
  %%    number()
  %% Aliased:
  %%    _10, 
  %%    _11
  _19 = call (`my_add`/2), _11, _10

  %% Unique:
  %%    _19
  _30 = succeeded:body _19
  br _30, ^30, ^1

30:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _19
  ret _19

48:
  %% trycatch_SUITE.erl:912
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _6
  _18 = call (`my_abs`/1), _6

  %% Unique:
  %%    _18
  _35 = succeeded:body _18
  br _35, ^35, ^1

35:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _18
  ret _18

24:
  %% trycatch_SUITE.erl:921
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = bif:is_atom _0
  br _1, ^56, ^58

56:
  %% trycatch_SUITE.erl:906
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-foo/1-',1}}
  _21 = match_fail `function_clause`, _0

  %% Unique:
  %%    _21
  _59 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22

58:
  %% Aliased:
  %%    _0
  ret _0
}

%% trycatch_SUITE.erl:924
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`my_div`(_0, _1) {
0:
  %% trycatch_SUITE.erl:925
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = bif:'div' _0, _1

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    integer()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:927
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`my_add`(_0, _1) {
0:
  %% trycatch_SUITE.erl:928
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = bif:'+' _0, _1

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:930
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`my_abs`(_0) {
0:
  %% trycatch_SUITE.erl:930
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:abs _0

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:933
%% Counter = 36
%% bs_ensure_opt: true
function `trycatch_SUITE`:`last_call_optimization`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _18 = bif:is_list _0
  br _18, ^18, ^17

18:
  %% trycatch_SUITE.erl:934
  %% Result type:
  %%    'error'
  _7 = call (`in_tail`/1), `dum`

  %% Aliased:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^30, ^1

30:
  %% trycatch_SUITE.erl:935
  StkSize0 = call (`in_tail`/1), `0`

  %% Aliased:
  %%    StkSize0
  _22 = succeeded:body StkSize0
  br _22, ^22, ^1

22:
  %% trycatch_SUITE.erl:936
  StkSize = call (`in_tail`/1), `50000`

  %% Aliased:
  %%    StkSize
  _23 = succeeded:body StkSize
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    StkSize0
  _8 = put_list StkSize0, `[]`

  %% trycatch_SUITE.erl:937
  %% Unique:
  %%    _8
  _10 = call (`io`:`format`/2), `"StkSize0 = ~p"`, _8

  %% Aliased:
  %%    _10
  _24 = succeeded:body _10
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    StkSize
  _9 = put_list StkSize, `[]`

  %% trycatch_SUITE.erl:938
  %% Unique:
  %%    _9
  _11 = call (`io`:`format`/2), `"StkSize  = ~p"`, _9

  %% Aliased:
  %%    _11
  _25 = succeeded:body _11
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    StkSize, 
  %%    StkSize0
  _28 = bif:'=:=' StkSize0, StkSize
  br _28, ^28, ^27

28:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  %% trycatch_SUITE.erl:939
  %% Aliased:
  %%    StkSize0
  _12 = match_fail `badmatch`, StkSize0

  %% Unique:
  %%    _12
  _29 = succeeded:body _12
  br ^1

17:
  %% trycatch_SUITE.erl:933
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-last_call_optimization/1-',1}}
  _14 = match_fail `function_clause`, _0

  %% Unique:
  %%    _14
  _33 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% trycatch_SUITE.erl:942
%% Counter = 65
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'dum' | integer()
function `trycatch_SUITE`:`in_tail`(_0) {
0:
  br ^64

64:
  _29 = new_try_tag `'try'`
  br _29, ^28, ^26

28:
  %% trycatch_SUITE.erl:943
  %% Argument types:
  %%    _0 => 'dum' | integer()
  %% Unique:
  %%    _0
  _19 = bif:abs _0

  %% Unique:
  %%    _19
  _30 = succeeded:body _19
  br _30, ^30, ^26

30:
  %% Unique:
  %%    _29
  _45 = kill_try_tag _29

  %% trycatch_SUITE.erl:945
  A = call (`id`/1), `[]`

  %% Aliased:
  %%    A
  _31 = succeeded:body A
  br _31, ^31, ^1

31:
  %% trycatch_SUITE.erl:946
  B = call (`id`/1), `[]`

  %% Aliased:
  %%    B
  _32 = succeeded:body B
  br _32, ^32, ^1

32:
  %% trycatch_SUITE.erl:947
  C = call (`id`/1), `[]`

  %% Aliased:
  %%    C
  _33 = succeeded:body C
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    C
  _15 = put_list C, `[]`

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Aliased:
  %%    B
  %% Unique:
  %%    _15
  _16 = put_list B, _15

  %% Argument types:
  %%    _16 => nonempty_list(any())
  %% Aliased:
  %%    A
  %% Unique:
  %%    _16
  _17 = put_list A, _16

  %% trycatch_SUITE.erl:948
  %% Unique:
  %%    _17
  _20 = call (`id`/1), _17

  %% Aliased:
  %%    _20
  _34 = succeeded:body _20
  br _34, ^34, ^1

34:
  %% trycatch_SUITE.erl:949
  %% Unique:
  %%    _19
  _21 = call (`do_tail`/1), _19

  %% Aliased:
  %%    _21
  _35 = succeeded:body _21
  br _35, ^35, ^1

35:
  %% Aliased:
  %%    _21
  ret _21

26:
  %% Unique:
  %%    _29
  _43 = landingpad `'try'`, _29

  %% Aliased:
  %%    _43
  _8 = extract _43, `0`

  %% Aliased:
  %%    _43
  _7 = extract _43, `1`

  %% Aliased:
  %%    _43
  _6 = extract _43, `2`

  %% Unique:
  %%    _29
  _44 = kill_try_tag _29

  %% Argument types:
  %%    _8 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _8
  _41 = bif:'=:=' _8, `error`
  br _41, ^40, ^37

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _39 = bif:'=:=' _7, `badarg`
  br _39, ^38, ^37

38:
  %% Result type:
  %%    'error'
  ret `error`

37:
  %% Aliased:
  %%    _6, 
  %%    _7
  _22 = resume _6, _7

  %% Unique:
  %%    _22
  _42 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% trycatch_SUITE.erl:953
%% Counter = 14
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..'+inf'
function `trycatch_SUITE`:`do_tail`(_0) {
0:
  %% Argument types:
  %%    _0 => 0..'+inf'
  %% Unique:
  %%    _0
  _10 = bif:'=:=' _0, `0`
  br _10, ^9, ^7

9:
  %% trycatch_SUITE.erl:954
  %% Argument types:
  %%    
  _1 = bif:self

  %% trycatch_SUITE.erl:954
  %% Unique:
  %%    _1
  _3 = call (`erlang`:`process_info`/2), _1, `stack_size`

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _3
  ret _3

7:
  %% trycatch_SUITE.erl:956
  %% Argument types:
  %%    _0 => 1..'+inf'
  %% Unique:
  %%    _0
  _2 = bif:'-' _0, `1`

  %% Unique:
  %%    _2
  _11 = succeeded:body _2
  br _11, ^11, ^1

11:
  %% trycatch_SUITE.erl:956
  %% Unique:
  %%    _2
  _4 = call (`in_tail`/1), _2

  %% Aliased:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Aliased:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% trycatch_SUITE.erl:958
%% Counter = 97
%% bs_ensure_opt: true
function `trycatch_SUITE`:`bool`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _29 = bif:is_list _0
  br _29, ^29, ^28

29:
  %% trycatch_SUITE.erl:959
  %% Result type:
  %%    'error' | 'ok'
  _10 = call (`do_bool`/2), `false`, `false`

  %% Unique:
  %%    _10
  _30 = succeeded:body _10
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _10 => 'error' | 'ok'
  %% Unique:
  %%    _10
  _77 = bif:'=:=' _10, `ok`
  br _77, ^76, ^32

76:
  %% trycatch_SUITE.erl:960
  %% Result type:
  %%    'error'
  _11 = call (`do_bool`/2), `false`, `true`

  %% Unique:
  %%    _11
  _33 = succeeded:body _11
  br _33, ^73, ^1

73:
  %% trycatch_SUITE.erl:961
  %% Result type:
  %%    'error'
  _12 = call (`do_bool`/2), `true`, `false`

  %% Unique:
  %%    _12
  _36 = succeeded:body _12
  br _36, ^70, ^1

70:
  %% trycatch_SUITE.erl:962
  %% Result type:
  %%    'error'
  _13 = call (`do_bool`/2), `true`, `true`

  %% Unique:
  %%    _13
  _39 = succeeded:body _13
  br _39, ^67, ^1

67:
  %% trycatch_SUITE.erl:963
  %% Result type:
  %%    'error'
  _14 = call (`do_bool`/2), `true`, `blurf`

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br _42, ^95, ^1

95:
  br ^96

96:
  _48 = new_try_tag `'catch'`
  br _48, ^46, ^47

46:
  %% trycatch_SUITE.erl:964
  %% Result type:
  %%    none()
  _18 = call (`do_bool`/2), `blurf`, `false`

  %% Aliased:
  %%    _18
  _50 = succeeded:body _18
  br ^47

47:
  %% Unique:
  %%    _48
  _53 = landingpad `'catch'`, _48

  %% Aliased:
  %%    _53
  _51 = extract _53, `0`
  br ^45

45:
  %% Aliased:
  %%    _51
  %% Unique:
  %%    _48
  _6 = catch_end _48, _51

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _60 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _60, ^57, ^56

57:
  %% Result type:
  %%    'ok'
  ret `ok`

56:
  %% trycatch_SUITE.erl:964
  %% Aliased:
  %%    _6
  _19 = match_fail `badmatch`, _6

  %% Unique:
  %%    _19
  _63 = succeeded:body _19
  br ^1

32:
  %% trycatch_SUITE.erl:959
  _24 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _24
  _78 = succeeded:body _24
  br ^1

28:
  %% trycatch_SUITE.erl:958
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bool/1-',1}}
  _25 = match_fail `function_clause`, _0

  %% Unique:
  %%    _25
  _79 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% trycatch_SUITE.erl:968
%% Counter = 52
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'blurf' | 'false' | 'true'
%%    _1 =>
%%     'blurf' | 'false' | 'true'
function `trycatch_SUITE`:`do_bool`(_0, _1) {
0:
  %% trycatch_SUITE.erl:969
  %% Argument types:
  %%    _0 => 'blurf' | 'false' | 'true'
  %% Unique:
  %%    _0
  A = bif:'not' _0

  %% Unique:
  %%    A
  _16 = succeeded:body A
  br _16, ^50, ^1

50:
  br ^51

51:
  _21 = new_try_tag `'try'`
  br _21, ^20, ^18

20:
  %% trycatch_SUITE.erl:971
  _11 = call (`id`/1), `42`

  %% Aliased:
  %%    _11
  _22 = succeeded:body _11
  br _22, ^22, ^18

22:
  br _0, ^24, ^33

33:
  %% Argument types:
  %%    _1 => 'blurf' | 'false' | 'true'
  %% Unique:
  %%    _1
  _4 = bif:'=:=' _1, `false`
  br _4, ^23, ^24

23:
  %% Unique:
  %%    _21
  _30 = kill_try_tag _21
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% trycatch_SUITE.erl:972
  _13 = match_fail `if_clause`

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br ^18

18:
  %% Unique:
  %%    _21
  _28 = landingpad `'try'`, _21

  %% Unique:
  %%    _21
  _29 = kill_try_tag _21
  %% Result type:
  %%    'error'
  ret `error`

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% trycatch_SUITE.erl:980
%% Counter = 59
%% bs_ensure_opt: true
function `trycatch_SUITE`:`andalso_orelse`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _24 = bif:is_list _0
  br _24, ^24, ^23

24:
  %% trycatch_SUITE.erl:981
  %% Result type:
  %%    {'a' | 'b' | 'caught' | 1..16777215, 'no_tuple' | {'b'} | {'a', 42}}
  _8 = call (`andalso_orelse_1`/2), `true`, `{a,42}`

  %% Aliased:
  %%    _8
  _25 = succeeded:body _8
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _8 => {'a' | 'b' | 'caught' | 1..16777215, 'no_tuple' | {'b'} | {'a', 42}}
  %% Aliased:
  %%    _8
  _56 = bif:'=:=' _8, `{2,{a,42}}`
  br _56, ^56, ^27

56:
  %% trycatch_SUITE.erl:982
  %% Result type:
  %%    {'a' | 'b' | 'caught' | 1..16777215, 'no_tuple' | {'b'} | {'a', 42}}
  _9 = call (`andalso_orelse_1`/2), `false`, `{b}`

  %% Aliased:
  %%    _9
  _28 = succeeded:body _9
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _9 => {'a' | 'b' | 'caught' | 1..16777215, 'no_tuple' | {'b'} | {'a', 42}}
  %% Aliased:
  %%    _9
  _54 = bif:'=:=' _9, `{b,{b}}`
  br _54, ^54, ^30

54:
  %% trycatch_SUITE.erl:983
  %% Result type:
  %%    {'caught', 'no_tuple' | {'b'} | {'a', 42}}
  _10 = call (`andalso_orelse_1`/2), `false`, `no_tuple`

  %% Unique:
  %%    _10
  _31 = succeeded:body _10
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    _10 => {'caught', 'no_tuple' | {'b'} | {'a', 42}}
  %% Unique:
  %%    _10
  _52 = bif:'=:=' _10, `{caught,no_tuple}`
  br _52, ^52, ^33

52:
  %% trycatch_SUITE.erl:985
  %% Result type:
  %%    'also_ok' | 'ok'
  _11 = call (`andalso_orelse_2`/1), `{type,[a]}`

  %% Unique:
  %%    _11
  _34 = succeeded:body _11
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _11 => 'also_ok' | 'ok'
  %% Unique:
  %%    _11
  _50 = bif:'=:=' _11, `ok`
  br _50, ^49, ^36

49:
  %% trycatch_SUITE.erl:986
  %% Result type:
  %%    'also_ok' | 'ok'
  _12 = call (`andalso_orelse_2`/1), `{type,[]}`

  %% Unique:
  %%    _12
  _37 = succeeded:body _12
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    _12 => 'also_ok' | 'ok'
  %% Unique:
  %%    _12
  _47 = bif:'=:=' _12, `also_ok`
  br _47, ^46, ^39

46:
  %% trycatch_SUITE.erl:987
  %% Result type:
  %%    'also_ok' | 'ok'
  _13 = call (`andalso_orelse_2`/1), `{type,{a}}`

  %% Unique:
  %%    _13
  _40 = succeeded:body _13
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _13 => 'also_ok' | 'ok'
  %% Unique:
  %%    _13
  _44 = bif:'=:=' _13, `also_ok`
  br _44, ^43, ^42

43:
  %% Result type:
  %%    'ok'
  ret `ok`

42:
  %% trycatch_SUITE.erl:987
  _14 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _14
  _45 = succeeded:body _14
  br ^1

39:
  %% trycatch_SUITE.erl:986
  _15 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _15
  _48 = succeeded:body _15
  br ^1

36:
  %% trycatch_SUITE.erl:985
  _16 = match_fail `badmatch`, `also_ok`

  %% Unique:
  %%    _16
  _51 = succeeded:body _16
  br ^1

33:
  %% trycatch_SUITE.erl:983
  %% Unique:
  %%    _10
  _17 = match_fail `badmatch`, _10

  %% Unique:
  %%    _17
  _53 = succeeded:body _17
  br ^1

30:
  %% trycatch_SUITE.erl:982
  %% Aliased:
  %%    _9
  _18 = match_fail `badmatch`, _9

  %% Unique:
  %%    _18
  _55 = succeeded:body _18
  br ^1

27:
  %% trycatch_SUITE.erl:981
  %% Aliased:
  %%    _8
  _19 = match_fail `badmatch`, _8

  %% Unique:
  %%    _19
  _57 = succeeded:body _19
  br ^1

23:
  %% trycatch_SUITE.erl:980
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-andalso_orelse/1-',1}}
  _20 = match_fail `function_clause`, _0

  %% Unique:
  %%    _20
  _58 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% trycatch_SUITE.erl:990
%% Counter = 74
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
%%    _1 =>
%%     'no_tuple' | {'b'} | {'a', 42}
function `trycatch_SUITE`:`andalso_orelse_1`(_0, _1) {
0:
  br ^73

73:
  _34 = new_try_tag `'try'`
  br _34, ^33, ^31

33:
  br _0, ^42, ^36

42:
  %% trycatch_SUITE.erl:993
  %% Argument types:
  %%    _1 => 'no_tuple' | {'b'} | {'a', 42}
  %% Unique:
  %%    _1
  _3 = bif:element `1`, _1

  %% Aliased:
  %%    _3
  _40 = succeeded:guard _3
  br _40, ^40, ^36

40:
  %% trycatch_SUITE.erl:993
  %% Argument types:
  %%    _3 => 'a' | 'b'
  %% Unique:
  %%    _3
  _21 = bif:'=:=' _3, `a`
  br _21, ^43, ^36

43:
  %% trycatch_SUITE.erl:994
  %% Argument types:
  %%    _1 => {'b'} | {'a', 42}
  %% Unique:
  %%    _1
  _23 = bif:tuple_size _1
  br ^35

36:
  %% trycatch_SUITE.erl:996
  %% Argument types:
  %%    _1 => 'no_tuple' | {'b'} | {'a', 42}
  %% Unique:
  %%    _1
  _24 = bif:element `1`, _1

  %% Aliased:
  %%    _24
  _45 = succeeded:body _24
  br _45, ^45, ^31

45:
  br ^35

35:
  _20 = phi { _23, ^43 }, { _24, ^45 }

  %% Unique:
  %%    _34
  _53 = kill_try_tag _34

  %% Argument types:
  %%    _20 => 'a' | 'b' | 1..16777215
  %%    _1 => {'b'} | {'a', 42}
  %% Aliased:
  %%    _20
  %% Unique:
  %%    _1
  _54 = put_tuple _20, _1
  %% Result type:
  %%    {'a' | 'b' | 1..16777215, {'b'} | {'a', 42}}
  %% Unique:
  %%    _54
  ret _54

31:
  %% Unique:
  %%    _34
  _51 = landingpad `'try'`, _34

  %% Aliased:
  %%    _51
  _9 = extract _51, `0`

  %% Aliased:
  %%    _51
  _8 = extract _51, `1`

  %% Aliased:
  %%    _51
  _7 = extract _51, `2`

  %% Unique:
  %%    _34
  _52 = kill_try_tag _34

  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _9
  _49 = bif:'=:=' _9, `error`
  br _49, ^48, ^47

48:
  %% Argument types:
  %%    _1 => 'no_tuple' | {'b'} | {'a', 42}
  %% Unique:
  %%    _1
  _55 = put_tuple `caught`, _1
  %% Result type:
  %%    {'caught', 'no_tuple' | {'b'} | {'a', 42}}
  %% Unique:
  %%    _55
  ret _55

47:
  %% Aliased:
  %%    _7, 
  %%    _8
  _26 = resume _7, _8

  %% Unique:
  %%    _26
  _50 = succeeded:body _26
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% trycatch_SUITE.erl:1002
%% Counter = 52
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'type', list('a') | {'a'}}
function `trycatch_SUITE`:`andalso_orelse_2`(_0) {
0:
  %% Argument types:
  %%    _0 => {'type', list('a') | {'a'}}
  %% Unique:
  %%    _0
  _10 = get_tuple_element _0, `1`

  %% trycatch_SUITE.erl:1004
  %% Argument types:
  %%    _10 => list('a') | {'a'}
  %% Unique:
  %%    _10
  _2 = bif:length _10

  %% Unique:
  %%    _2
  _32 = succeeded:guard _2
  br _32, ^44, ^28

44:
  %% trycatch_SUITE.erl:1004
  %% Argument types:
  %%    _2 => 0..288230376151711743
  %% Unique:
  %%    _2
  _16 = bif:'>' _2, `0`
  br _16, ^35, ^28

35:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% Result type:
  %%    'also_ok'
  ret `also_ok`
}

%% trycatch_SUITE.erl:1011
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`zero`() {
0:
  %% Result type:
  %%    0.0
  ret `0.0`
}

%% trycatch_SUITE.erl:1014
%% Counter = 12
%% bs_ensure_opt: true
function `trycatch_SUITE`:`get_in_try`(_0) {
0:
  %% trycatch_SUITE.erl:1015
  _2 = call (`get_valid_line`/2), `[a]`, `[]`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _10 = bif:'=:=' _2, `undefined`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% trycatch_SUITE.erl:1015
  %% Aliased:
  %%    _2
  _3 = match_fail `badmatch`, _2

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% trycatch_SUITE.erl:1018
%% Counter = 40
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list('a')
%%    _1 =>
%%     nil()
function `trycatch_SUITE`:`get_valid_line`(_0, _1) {
0:
  %% Aliased:
  %%    _0
  _38 = is_nonempty_list _0
  br _38, ^27, ^23

27:
  %% trycatch_SUITE.erl:1020
  %% Argument types:
  %%    _0 => nonempty_list('a')
  %% Aliased:
  %%    _0
  _17 = bif:get _0
  %% Aliased:
  %%    _17
  ret _17

23:
  %% trycatch_SUITE.erl:1018
  %% Anno: #{inlined => {'-inlined-get_valid_line/2-',2}}
  _20 = match_fail `function_clause`, `[]`, _1

  %% Unique:
  %%    _20
  _39 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% trycatch_SUITE.erl:1028
%% Counter = 68
%% bs_ensure_opt: true
function `trycatch_SUITE`:`hockey`(_0) {
0:
  br ^67

67:
  _24 = new_try_tag `'catch'`
  br _24, ^22, ^23

22:
  %% trycatch_SUITE.erl:1029
  %% Result type:
  %%    'ok'
  _17 = call (`hockey`/0)

  %% Unique:
  %%    _17
  _26 = succeeded:body _17
  br _26, ^26, ^23

26:
  br ^21

23:
  %% Unique:
  %%    _24
  _29 = landingpad `'catch'`, _24

  %% Aliased:
  %%    _29
  _27 = extract _29, `0`
  br ^21

21:
  _30 = phi { _27, ^23 }, { `ok`, ^26 }

  %% Aliased:
  %%    _30
  %% Unique:
  %%    _24
  _1 = catch_end _24, _30

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _47 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _47, ^44, ^32

44:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _8 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _41 = bif:is_tuple _8
  br _41, ^41, ^32

41:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _42 = bif:tuple_size _8

  %% Argument types:
  %%    _42 => 0..16777215
  %% Unique:
  %%    _42
  _43 = bif:'=:=' _42, `2`
  br _43, ^40, ^32

40:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _37 = is_tagged_tuple _11, `2`, `badmatch`
  br _37, ^34, ^32

34:
  %% Argument types:
  %%    _8 => {any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _10
  _33 = is_nonempty_list _10
  br _33, ^33, ^32

33:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  %% trycatch_SUITE.erl:1029
  %% Aliased:
  %%    _1
  _18 = match_fail `badmatch`, _1

  %% Unique:
  %%    _18
  _50 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% trycatch_SUITE.erl:1032
%% Counter = 84
%% bs_ensure_opt: true
function `trycatch_SUITE`:`hockey`() {
0:
  br ^17

17:
  %% trycatch_SUITE.erl:1035
  _11 = peek_message `none`

  %% Aliased:
  %%    _11
  _46 = succeeded:guard _11
  br _46, ^44, ^45

44:
  _18 = remove_message

  %% Result type:
  %%    'ok'
  _1 = make_fun (`'-hockey/0-fun-0-'`/0)

  %% trycatch_SUITE.erl:1035
  %% Aliased:
  %%    _1
  _21 = match_fail `badmatch`, _1

  %% Unique:
  %%    _21
  _43 = succeeded:body _21
  br ^1

45:
  _32 = wait_timeout `0`

  %% Unique:
  %%    _32
  _33 = succeeded:body _32
  br _33, ^33, ^1

33:
  br _32, ^31, ^36

31:
  %% Result type:
  %%    'ok'
  _3 = make_fun (`'-hockey/0-fun-1-'`/0)
  _51 = new_try_tag `'try'`
  br _51, ^53, ^48

53:
  %% trycatch_SUITE.erl:1036
  %% Aliased:
  %%    _3
  _26 = match_fail `badmatch`, _3

  %% Unique:
  %%    _26
  _58 = succeeded:body _26
  br ^48

48:
  %% Unique:
  %%    _51
  _64 = landingpad `'try'`, _51

  %% Aliased:
  %%    _64
  _7 = extract _64, `0`

  %% Aliased:
  %%    _64
  _6 = extract _64, `1`

  %% Aliased:
  %%    _64
  _5 = extract _64, `2`

  %% Unique:
  %%    _51
  _65 = kill_try_tag _51

  %% Argument types:
  %%    _7 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _7
  _62 = bif:'=:=' _7, `throw`
  br _62, ^61, ^60

61:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% Aliased:
  %%    _5, 
  %%    _6
  _27 = resume _5, _6

  %% Unique:
  %%    _27
  _63 = succeeded:body _27
  br ^1

36:
  br ^17

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% trycatch_SUITE.erl:1042
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`handle_info`(_0) {
0:
  %% trycatch_SUITE.erl:1043
  %% Result type:
  %%    {'stop', {'state', 'undefined'}}
  _2 = call (`do_handle_info`/2), `{foo}`, `{state,undefined}`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1046
%% Counter = 127
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'foo'}
%%    _1 =>
%%     {'state', 'undefined'}
function `trycatch_SUITE`:`do_handle_info`(_0, _1) {
0:
  %% trycatch_SUITE.erl:1047
  %% Result type:
  %%    'ok'
  _27 = call (`handle_info_ok`/0)

  %% Unique:
  %%    _27
  _46 = succeeded:body _27
  br _46, ^125, ^1

125:
  br ^126

126:
  _60 = new_try_tag `'catch'`
  br _60, ^58, ^59

58:
  %% trycatch_SUITE.erl:1051
  %% Result type:
  %%    'ok'
  _31 = call (`handle_info_ok`/0)

  %% Unique:
  %%    _31
  _62 = succeeded:body _31
  br _62, ^62, ^59

62:
  br ^57

59:
  %% Unique:
  %%    _60
  _65 = landingpad `'catch'`, _60

  %% Aliased:
  %%    _65
  _63 = extract _65, `0`
  br ^57

57:
  _66 = phi { _63, ^59 }, { `ok`, ^62 }

  %% Aliased:
  %%    _66
  %% Unique:
  %%    _60
  _4 = catch_end _60, _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _70 = bif:'=:=' _4, `ok`
  br _70, ^69, ^68

69:
  %% Result type:
  %%    {'stop', {'state', 'undefined'}}
  ret `{stop,{state,undefined}}`

68:
  %% trycatch_SUITE.erl:1051
  %% Aliased:
  %%    _4
  _33 = match_fail `case_clause`, _4

  %% Unique:
  %%    _33
  _71 = succeeded:body _33
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% trycatch_SUITE.erl:1069
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`handle_info_ok`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% trycatch_SUITE.erl:1071
%% Counter = 49
%% bs_ensure_opt: true
function `trycatch_SUITE`:`catch_in_catch`(_0) {
0:
  %% trycatch_SUITE.erl:1072
  _13 = call (`erlang`:`process_flag`/2), `trap_exit`, `true`

  %% Aliased:
  %%    _13
  _22 = succeeded:body _13
  br _22, ^22, ^1

22:
  %% Result type:
  %%    none()
  _1 = make_fun (`'-catch_in_catch/1-fun-0-'`/0)

  %% trycatch_SUITE.erl:1073
  %% Aliased:
  %%    _1
  Pid = call (`erlang`:`spawn_link`/1), _1

  %% Aliased:
  %%    Pid
  _23 = succeeded:body Pid
  br _23, ^23, ^1

23:
  br ^8

8:
  %% trycatch_SUITE.erl:1077
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _46 = succeeded:guard _5
  br _46, ^45, ^44

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _40 = is_tagged_tuple _5, `3`, `'EXIT'`
  br _40, ^39, ^33

39:
  %% Argument types:
  %%    _5 => {''EXIT'', any(), any()}
  %% Aliased:
  %%    _5
  _11 = get_tuple_element _5, `1`

  %% Argument types:
  %%    _5 => {''EXIT'', any(), any()}
  %% Aliased:
  %%    _5
  _10 = get_tuple_element _5, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _36 = bif:'=:=' _10, `good_exit`
  br _36, ^35, ^33

35:
  %% Argument types:
  %%    Pid => pid()
  %% Aliased:
  %%    _11
  %% Unique:
  %%    Pid
  _34 = bif:'=:=' _11, Pid
  br _34, ^34, ^33

34:
  _16 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

33:
  _17 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _9 = put_list _5, `[]`

  %% trycatch_SUITE.erl:1081
  %% Unique:
  %%    _9
  _18 = call (`io`:`format`/2), `"Unexpected: ~p\n"`, _9

  %% Aliased:
  %%    _18
  _43 = succeeded:body _18
  br _43, ^43, ^1

43:
  %% Result type:
  %%    'error'
  ret `error`

44:
  _26 = wait_timeout `32000`

  %% Unique:
  %%    _26
  _27 = succeeded:body _26
  br _27, ^27, ^1

27:
  br _26, ^31, ^30

31:
  %% trycatch_SUITE.erl:1084
  _19 = call (`io`:`format`/1), `"No message received\n"`

  %% Aliased:
  %%    _19
  _29 = succeeded:body _19
  br _29, ^29, ^1

29:
  %% Result type:
  %%    'error'
  ret `error`

30:
  br ^8

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% trycatch_SUITE.erl:1088
%% Counter = 64
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'x'
function `trycatch_SUITE`:`catch_in_catch_init`(_0) {
0:
  %% trycatch_SUITE.erl:1089
  _2 = call (`erlang`:`process_flag`/2), `trap_exit`, `true`

  %% Aliased:
  %%    _2
  _10 = succeeded:body _2
  br _10, ^60, ^1

60:
  br ^62

62:
  _15 = new_try_tag `'try'`
  br _15, ^14, ^12

14:
  %% trycatch_SUITE.erl:1092
  _4 = call (`id`/1), `x`

  %% Aliased:
  %%    _4
  _16 = succeeded:body _4
  br _16, ^61, ^12

61:
  br ^63

63:
  _20 = new_try_tag `'catch'`
  br _20, ^18, ^19

18:
  %% trycatch_SUITE.erl:1093
  _7 = call (`erlang`:`exit`/1), `bar`

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br ^19

19:
  %% Unique:
  %%    _20
  _25 = landingpad `'catch'`, _20

  %% Aliased:
  %%    _25
  _23 = extract _25, `0`
  br ^17

17:
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _20
  _5 = catch_end _20, _23

  %% Unique:
  %%    _15
  _29 = kill_try_tag _15
  br ^13

12:
  %% Unique:
  %%    _15
  _27 = landingpad `'try'`, _15

  %% Unique:
  %%    _15
  _28 = kill_try_tag _15
  br ^13

13:
  %% Result type:
  %%    'ignore'
  ret `ignore`

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% trycatch_SUITE.erl:1098
%% Counter = 146
%% bs_ensure_opt: true
function `trycatch_SUITE`:`grab_bag`(_0) {
0:
  br ^144

144:
  _66 = new_try_tag `'try'`
  br _66, ^65, ^63

65:
  %% trycatch_SUITE.erl:1110
  _43 = call (`io`:`fwrite`/1), `[]`

  %% Aliased:
  %%    _43
  _67 = succeeded:body _43
  br _67, ^67, ^63

67:
  %% Unique:
  %%    _66
  _71 = kill_try_tag _66

  %% trycatch_SUITE.erl:1121
  %% Result type:
  %%    'ok' | fun((_))
  F = call (`grab_bag_1`/1), `any`

  %% Aliased:
  %%    F
  _72 = succeeded:body F
  br _72, ^72, ^1

72:
  %% trycatch_SUITE.erl:1122
  %% Argument types:
  %%    F => 'ok' | fun((_))
  %% Aliased:
  %%    F
  _34 = bif:is_function F, `1`
  br _34, ^74, ^75

74:
  %% trycatch_SUITE.erl:1125
  %% Result type:
  %%    bitstring(256,appendable)
  _35 = call (`grab_bag_2`/1), `whatever`

  %% Unique:
  %%    _35
  _79 = succeeded:body _35
  br _79, ^79, ^1

79:
  %% Argument types:
  %%    _35 => bitstring(256,appendable)
  %% Unique:
  %%    _35
  _107 = bif:'=:=' _35, `<<>>`
  br _107, ^143, ^81

143:
  br ^145

145:
  _85 = new_try_tag `'catch'`
  br _85, ^83, ^84

83:
  %% trycatch_SUITE.erl:1127
  %% Result type:
  %%    none()
  _47 = call (`grab_bag_3`/0)

  %% Aliased:
  %%    _47
  _87 = succeeded:body _47
  br ^84

84:
  %% Unique:
  %%    _85
  _90 = landingpad `'catch'`, _85

  %% Aliased:
  %%    _90
  _88 = extract _90, `0`
  br ^82

82:
  %% Aliased:
  %%    _88
  %% Unique:
  %%    _85
  _22 = catch_end _85, _88

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _103 = is_tagged_tuple _22, `2`, `'EXIT'`
  br _103, ^100, ^93

100:
  %% trycatch_SUITE.erl:1129
  _38 = call (`grab_bag_4`/0)

  %% Aliased:
  %%    _38
  _94 = succeeded:body _38
  br _94, ^94, ^1

94:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _98 = bif:'=:=' _38, `true`
  br _98, ^97, ^96

97:
  %% Result type:
  %%    'ok'
  ret `ok`

96:
  %% trycatch_SUITE.erl:1129
  %% Aliased:
  %%    _38
  _48 = match_fail `badmatch`, _38

  %% Unique:
  %%    _48
  _99 = succeeded:body _48
  br ^1

93:
  %% trycatch_SUITE.erl:1127
  %% Aliased:
  %%    _22
  _49 = match_fail `badmatch`, _22

  %% Unique:
  %%    _49
  _106 = succeeded:body _49
  br ^1

81:
  %% trycatch_SUITE.erl:1125
  %% Unique:
  %%    _35
  _50 = match_fail `badmatch`, _35

  %% Unique:
  %%    _50
  _108 = succeeded:body _50
  br ^1

75:
  %% trycatch_SUITE.erl:1122
  _45 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _45
  _78 = succeeded:body _45
  br ^1

63:
  %% Unique:
  %%    _66
  _69 = landingpad `'try'`, _66

  %% Aliased:
  %%    _69
  _14 = extract _69, `1`

  %% Aliased:
  %%    _69
  _13 = extract _69, `2`

  %% Unique:
  %%    _66
  _70 = kill_try_tag _66

  %% Aliased:
  %%    _13, 
  %%    _14
  _44 = resume _13, _14

  %% Unique:
  %%    _44
  _68 = succeeded:body _44
  br ^1

1:
  _51 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _51
}

%% trycatch_SUITE.erl:1133
%% Counter = 54
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'any'
function `trycatch_SUITE`:`grab_bag_1`(_0) {
0:
  br ^53

53:
  _23 = new_try_tag `'try'`
  br _23, ^13, ^20

13:
  _25 = wait_timeout `0`

  %% Unique:
  %%    _25
  _26 = succeeded:body _25
  br _26, ^26, ^20

26:
  br _25, ^24, ^13

24:
  %% Unique:
  %%    _23
  _36 = kill_try_tag _23
  _15 = make_fun (`id`/1)
  %% Result type:
  %%    fun((_))
  %% Aliased:
  %%    _15
  ret _15

20:
  %% Unique:
  %%    _23
  _34 = landingpad `'try'`, _23

  %% Aliased:
  %%    _34
  _3 = extract _34, `1`

  %% Aliased:
  %%    _34
  _2 = extract _34, `2`

  %% Unique:
  %%    _23
  _35 = kill_try_tag _23

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _32 = bif:'=:=' _3, `any`
  br _32, ^32, ^31

32:
  %% Result type:
  %%    'ok'
  ret `ok`

31:
  %% Aliased:
  %%    _2, 
  %%    _3
  _16 = resume _2, _3

  %% Unique:
  %%    _16
  _33 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% trycatch_SUITE.erl:1154
%% Counter = 38
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'whatever'
function `trycatch_SUITE`:`grab_bag_2`(_0) {
0:
  %% trycatch_SUITE.erl:1164
  _20 = bs_init_writable `256`
  %% Result type:
  %%    bitstring(256,appendable)
  %% Unique:
  %%    _20
  ret _20
}

%% trycatch_SUITE.erl:1172
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`grab_bag_3`() {
0:
  %% trycatch_SUITE.erl:1173
  _2 = match_fail `try_clause`, `2`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1185
%% Counter = 143
%% bs_ensure_opt: true
function `trycatch_SUITE`:`grab_bag_4`() {
0:
  br ^140

140:
  _40 = new_try_tag `'try'`
  br _40, ^39, ^37

39:
  %% trycatch_SUITE.erl:1187
  _22 = call (`erlang`:`yield`/0)

  %% Aliased:
  %%    _22
  _41 = succeeded:body _22
  br _41, ^41, ^37

41:
  %% Unique:
  %%    _40
  _91 = kill_try_tag _40
  _46 = new_try_tag `'try'`
  br _46, ^138, ^43

138:
  br ^141

141:
  _50 = new_try_tag `'catch'`
  br _50, ^48, ^49

48:
  %% trycatch_SUITE.erl:1191
  _25 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _25
  _52 = succeeded:body _25
  br ^49

49:
  %% Unique:
  %%    _50
  _55 = landingpad `'catch'`, _50

  %% Aliased:
  %%    _55
  _53 = extract _55, `0`
  br ^47

47:
  %% Aliased:
  %%    _53
  %% Unique:
  %%    _50
  _1 = catch_end _50, _53

  %% trycatch_SUITE.erl:1191
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _11 = bif:size _1

  %% Unique:
  %%    _11
  _57 = succeeded:body _11
  br _57, ^59, ^43

59:
  %% trycatch_SUITE.erl:1191
  %% Unique:
  %%    _11
  _27 = match_fail `badmatch`, _11

  %% Unique:
  %%    _27
  _61 = succeeded:body _27
  br ^43

43:
  %% Unique:
  %%    _46
  _62 = landingpad `'try'`, _46

  %% Unique:
  %%    _46
  _63 = kill_try_tag _46
  br ^44

44:
  %% Aliased:
  %%    _22
  ret _22

37:
  %% Unique:
  %%    _40
  _89 = landingpad `'try'`, _40

  %% Aliased:
  %%    _89
  _7 = extract _89, `1`

  %% Aliased:
  %%    _89
  _6 = extract _89, `2`

  %% Unique:
  %%    _40
  _90 = kill_try_tag _40
  _69 = new_try_tag `'try'`
  br _69, ^139, ^66

139:
  br ^142

142:
  _73 = new_try_tag `'catch'`
  br _73, ^71, ^72

71:
  %% trycatch_SUITE.erl:1191
  _30 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _30
  _75 = succeeded:body _30
  br ^72

72:
  %% Unique:
  %%    _73
  _78 = landingpad `'catch'`, _73

  %% Aliased:
  %%    _78
  _76 = extract _78, `0`
  br ^70

70:
  %% Aliased:
  %%    _76
  %% Unique:
  %%    _73
  _15 = catch_end _73, _76

  %% trycatch_SUITE.erl:1191
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _14 = bif:size _15

  %% Unique:
  %%    _14
  _80 = succeeded:body _14
  br _80, ^82, ^66

82:
  %% trycatch_SUITE.erl:1191
  %% Unique:
  %%    _14
  _32 = match_fail `badmatch`, _14

  %% Unique:
  %%    _32
  _84 = succeeded:body _32
  br ^66

66:
  %% Unique:
  %%    _69
  _85 = landingpad `'try'`, _69

  %% Unique:
  %%    _69
  _86 = kill_try_tag _69
  br ^67

67:
  %% Aliased:
  %%    _6, 
  %%    _7
  _33 = resume _6, _7

  %% Unique:
  %%    _33
  _88 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% trycatch_SUITE.erl:1195
%% Counter = 551
%% bs_ensure_opt: true
function `trycatch_SUITE`:`stacktrace`(_0) {
0:
  %% trycatch_SUITE.erl:1196
  _2 = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:1196
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _2 => reference()
  %%    _1 => pid()
  %% Unique:
  %%    _1, 
  %%    _2
  V = put_list _2, _1

  %% trycatch_SUITE.erl:1197
  _66 = call (`trycatch_SUITE`:`module_info`/1), `native`

  %% Aliased:
  %%    _66
  _204 = succeeded:body _66
  br _204, ^204, ^1

204:
  switch _66, ^206, [
    { `false`, ^320 },
    { `true`, ^321 }
  ]

321:
  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _100 = put_tuple `abs`, V

  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _99 = put_tuple `value`, V

  %% trycatch_SUITE.erl:1206
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Unique:
  %%    _99, 
  %%    _100
  _101 = call (`stacktrace_1`/3), _100, `error`, _99

  %% Aliased:
  %%    _101
  _269 = succeeded:body _101
  br _269, ^269, ^1

269:
  %% Argument types:
  %%    _101 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _101
  %% Anno: #{constraints => arity}
  _316 = is_tagged_tuple _101, `2`, `value2`
  br _316, ^313, ^271

313:
  %% Argument types:
  %%    _101 => {'value2', 'value1' | {'caught1', any(), any()}}
  %% Aliased:
  %%    _101
  _102 = get_tuple_element _101, `1`

  %% Argument types:
  %%    _102 => 'value1' | {'caught1', any(), any()}
  %% Aliased:
  %%    _102
  _310 = bif:is_tuple _102
  br _310, ^307, ^271

307:
  %% Argument types:
  %%    _102 => {'caught1', any(), any()}
  %% Aliased:
  %%    _102
  _105 = get_tuple_element _102, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _105
  _306 = bif:'=:=' _105, `badarg`
  br _306, ^305, ^271

305:
  %% Argument types:
  %%    _102 => {'caught1', 'badarg', any()}
  %% Aliased:
  %%    _102
  _104 = get_tuple_element _102, `2`

  %% Aliased:
  %%    _104
  _304 = is_nonempty_list _104
  br _304, ^304, ^271

304:
  %% Argument types:
  %%    _104 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _104
  _108 = get_hd _104

  %% Argument types:
  %%    
  %% Aliased:
  %%    _108
  _301 = is_tagged_tuple _108, `4`, `trycatch_SUITE`
  br _301, ^298, ^271

298:
  %% Argument types:
  %%    _108 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _108
  _111 = get_tuple_element _108, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _297 = bif:'=:=' _111, `my_abs`
  br _297, ^296, ^271

296:
  %% Argument types:
  %%    _108 => {'trycatch_SUITE', 'my_abs', any(), any()}
  %% Aliased:
  %%    _108
  _110 = get_tuple_element _108, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _110
  _295 = bif:'=:=' _110, `1`
  br _295, ^294, ^271

294:
  %% trycatch_SUITE.erl:1208
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  _113 = call (`stacktrace_1`/3), `{'div',{1,0}}`, `error`, `{add,{0,a}}`

  %% Aliased:
  %%    _113
  _272 = succeeded:body _113
  br _272, ^272, ^1

272:
  %% Argument types:
  %%    _113 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _113
  %% Anno: #{constraints => arity}
  _290 = is_tagged_tuple _113, `3`, `caught2`
  br _290, ^287, ^274

287:
  %% Argument types:
  %%    _113 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _113
  _115 = get_tuple_element _113, `1`

  %% Argument types:
  %%    _115 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _115
  _286 = bif:'=:=' _115, `{error,badarith}`
  br _286, ^286, ^274

286:
  %% Argument types:
  %%    _113 => {'caught2', {'error', 'badarith'}, any()}
  %% Aliased:
  %%    _113
  _114 = get_tuple_element _113, `2`

  %% Aliased:
  %%    _114
  _285 = is_nonempty_list _114
  br _285, ^285, ^274

285:
  %% Argument types:
  %%    _114 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _114
  _118 = get_hd _114

  %% Argument types:
  %%    
  %% Aliased:
  %%    _118
  _282 = is_tagged_tuple _118, `4`, `trycatch_SUITE`
  br _282, ^279, ^274

279:
  %% Argument types:
  %%    _118 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _118
  _121 = get_tuple_element _118, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _121
  _278 = bif:'=:=' _121, `my_add`
  br _278, ^277, ^274

277:
  %% Argument types:
  %%    _118 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _118
  _120 = get_tuple_element _118, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _120
  _276 = bif:'=:=' _120, `2`
  br _276, ^205, ^274

274:
  %% trycatch_SUITE.erl:1207
  %% Aliased:
  %%    _113
  _181 = match_fail `badmatch`, _113

  %% Unique:
  %%    _181
  _293 = succeeded:body _181
  br ^1

271:
  %% trycatch_SUITE.erl:1205
  %% Aliased:
  %%    _101
  _182 = match_fail `badmatch`, _101

  %% Unique:
  %%    _182
  _319 = succeeded:body _182
  br ^1

320:
  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _68 = put_tuple `abs`, V

  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _67 = put_tuple `value`, V

  %% trycatch_SUITE.erl:1200
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Unique:
  %%    _67, 
  %%    _68
  _69 = call (`stacktrace_1`/3), _68, `error`, _67

  %% Aliased:
  %%    _69
  _207 = succeeded:body _69
  br _207, ^207, ^1

207:
  %% Argument types:
  %%    _69 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _69
  %% Anno: #{constraints => arity}
  _265 = is_tagged_tuple _69, `2`, `value2`
  br _265, ^262, ^209

262:
  %% Argument types:
  %%    _69 => {'value2', 'value1' | {'caught1', any(), any()}}
  %% Aliased:
  %%    _69
  _70 = get_tuple_element _69, `1`

  %% Argument types:
  %%    _70 => 'value1' | {'caught1', any(), any()}
  %% Aliased:
  %%    _70
  _259 = bif:is_tuple _70
  br _259, ^256, ^209

256:
  %% Argument types:
  %%    _70 => {'caught1', any(), any()}
  %% Aliased:
  %%    _70
  _73 = get_tuple_element _70, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _255 = bif:'=:=' _73, `badarg`
  br _255, ^254, ^209

254:
  %% Argument types:
  %%    _70 => {'caught1', 'badarg', any()}
  %% Aliased:
  %%    _70
  _72 = get_tuple_element _70, `2`

  %% Aliased:
  %%    _72
  _253 = is_nonempty_list _72
  br _253, ^253, ^209

253:
  %% Argument types:
  %%    _72 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _72
  _76 = get_hd _72

  %% Argument types:
  %%    
  %% Aliased:
  %%    _76
  _250 = is_tagged_tuple _76, `4`, `erlang`
  br _250, ^247, ^209

247:
  %% Argument types:
  %%    _76 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _76
  _79 = get_tuple_element _76, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _246 = bif:'=:=' _79, `abs`
  br _246, ^245, ^209

245:
  %% Argument types:
  %%    _76 => {'erlang', 'abs', any(), any()}
  %% Aliased:
  %%    _76
  _78 = get_tuple_element _76, `2`

  %% Aliased:
  %%    _78
  _244 = is_nonempty_list _78
  br _244, ^244, ^209

244:
  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _82 = get_hd _78

  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _81 = get_tl _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _81
  _243 = bif:'=:=' _81, `[]`
  br _243, ^243, ^209

243:
  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    _82, 
  %%    V
  _210 = bif:'=:=' _82, V
  br _210, ^210, ^209

210:
  %% trycatch_SUITE.erl:1203
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  _83 = call (`stacktrace_1`/3), `{'div',{1,0}}`, `error`, `{add,{0,a}}`

  %% Aliased:
  %%    _83
  _211 = succeeded:body _83
  br _211, ^211, ^1

211:
  %% Argument types:
  %%    _83 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _83
  %% Anno: #{constraints => arity}
  _239 = is_tagged_tuple _83, `3`, `caught2`
  br _239, ^236, ^213

236:
  %% Argument types:
  %%    _83 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _83
  _85 = get_tuple_element _83, `1`

  %% Argument types:
  %%    _85 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _85
  _235 = bif:'=:=' _85, `{error,badarith}`
  br _235, ^235, ^213

235:
  %% Argument types:
  %%    _83 => {'caught2', {'error', 'badarith'}, any()}
  %% Aliased:
  %%    _83
  _84 = get_tuple_element _83, `2`

  %% Aliased:
  %%    _84
  _234 = is_nonempty_list _84
  br _234, ^234, ^213

234:
  %% Argument types:
  %%    _84 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _84
  _88 = get_hd _84

  %% Argument types:
  %%    _84 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _84
  _87 = get_tl _84

  %% Argument types:
  %%    
  %% Aliased:
  %%    _88
  _231 = is_tagged_tuple _88, `4`, `erlang`
  br _231, ^228, ^213

228:
  %% Argument types:
  %%    _88 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _88
  _91 = get_tuple_element _88, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _227 = bif:'=:=' _91, `'+'`
  br _227, ^226, ^213

226:
  %% Argument types:
  %%    _88 => {'erlang', ''+'', any(), any()}
  %% Aliased:
  %%    _88
  _90 = get_tuple_element _88, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _90
  _225 = bif:'=:=' _90, `[0,a]`
  br _225, ^225, ^213

225:
  %% Aliased:
  %%    _87
  _224 = is_nonempty_list _87
  br _224, ^224, ^213

224:
  %% Argument types:
  %%    _87 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _87
  _94 = get_hd _87

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _221 = is_tagged_tuple _94, `4`, `trycatch_SUITE`
  br _221, ^218, ^213

218:
  %% Argument types:
  %%    _94 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _94
  _97 = get_tuple_element _94, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _97
  _217 = bif:'=:=' _97, `my_add`
  br _217, ^216, ^213

216:
  %% Argument types:
  %%    _94 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _94
  _96 = get_tuple_element _94, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _215 = bif:'=:=' _96, `2`
  br _215, ^205, ^213

205:
  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _124 = put_tuple `value`, V

  %% trycatch_SUITE.erl:1211
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Unique:
  %%    _124
  _125 = call (`stacktrace_1`/3), _124, `error`, _124

  %% Aliased:
  %%    _125
  _323 = succeeded:body _125
  br _323, ^323, ^1

323:
  %% Argument types:
  %%    _125 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _125
  %% Anno: #{constraints => arity}
  _491 = is_tagged_tuple _125, `3`, `caught2`
  br _491, ^488, ^325

488:
  %% Argument types:
  %%    _125 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _125
  _127 = get_tuple_element _125, `1`

  %% Argument types:
  %%    _127 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _127
  _485 = is_tagged_tuple _127, `2`, `error`
  br _485, ^482, ^325

482:
  %% Argument types:
  %%    _127 => {'error', any()}
  %% Aliased:
  %%    _127
  _129 = get_tuple_element _127, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _129
  _479 = is_tagged_tuple _129, `2`, `try_clause`
  br _479, ^476, ^325

476:
  %% Argument types:
  %%    _125 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _125
  _126 = get_tuple_element _125, `2`

  %% Aliased:
  %%    _126
  _475 = is_nonempty_list _126
  br _475, ^475, ^325

475:
  %% Argument types:
  %%    _126 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _126
  _134 = get_hd _126

  %% Argument types:
  %%    
  %% Aliased:
  %%    _134
  _472 = is_tagged_tuple _134, `4`, `trycatch_SUITE`
  br _472, ^469, ^325

469:
  %% Argument types:
  %%    _134 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _134
  _137 = get_tuple_element _134, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _468 = bif:'=:=' _137, `stacktrace_1`
  br _468, ^467, ^325

467:
  %% Argument types:
  %%    _134 => {'trycatch_SUITE', 'stacktrace_1', any(), any()}
  %% Aliased:
  %%    _134
  _136 = get_tuple_element _134, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _466 = bif:'=:=' _136, `3`
  br _466, ^465, ^325

465:
  %% Argument types:
  %%    _129 => {'try_clause', any()}
  %% Aliased:
  %%    _129
  _131 = get_tuple_element _129, `1`

  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    _131, 
  %%    V
  _326 = bif:'=:=' _131, V
  br _326, ^326, ^325

326:
  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _140 = put_tuple `value`, V

  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    V
  _139 = put_tuple `throw`, V

  %% trycatch_SUITE.erl:1213
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Unique:
  %%    _139, 
  %%    _140
  _141 = call (`stacktrace_1`/3), _140, `error`, _139

  %% Aliased:
  %%    _141
  _327 = succeeded:body _141
  br _327, ^327, ^1

327:
  %% Argument types:
  %%    _141 => {'value2', 'value1' | {'caught1', any(), any()}} | {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _141
  %% Anno: #{constraints => arity}
  _461 = is_tagged_tuple _141, `3`, `caught2`
  br _461, ^458, ^329

458:
  %% Argument types:
  %%    _141 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _141
  _143 = get_tuple_element _141, `1`

  %% Argument types:
  %%    _143 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _143
  _455 = is_tagged_tuple _143, `2`, `throw`
  br _455, ^452, ^329

452:
  %% Argument types:
  %%    _141 => {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Aliased:
  %%    _141
  _142 = get_tuple_element _141, `2`

  %% Aliased:
  %%    _142
  _451 = is_nonempty_list _142
  br _451, ^451, ^329

451:
  %% Argument types:
  %%    _142 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _142
  _148 = get_hd _142

  %% Argument types:
  %%    
  %% Aliased:
  %%    _148
  _448 = is_tagged_tuple _148, `4`, `trycatch_SUITE`
  br _448, ^445, ^329

445:
  %% Argument types:
  %%    _148 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _148
  _151 = get_tuple_element _148, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _151
  _444 = bif:'=:=' _151, `foo`
  br _444, ^443, ^329

443:
  %% Argument types:
  %%    _148 => {'trycatch_SUITE', 'foo', any(), any()}
  %% Aliased:
  %%    _148
  _150 = get_tuple_element _148, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _150
  _442 = bif:'=:=' _150, `1`
  br _442, ^441, ^329

441:
  %% Argument types:
  %%    _143 => {'throw', any()}
  %% Aliased:
  %%    _143
  _145 = get_tuple_element _143, `1`

  %% Argument types:
  %%    V => nonempty_improper_list(reference(), pid())
  %% Aliased:
  %%    _145, 
  %%    V
  _330 = bif:'=:=' _145, V
  br _330, ^545, ^329

545:
  br ^548

548:
  _335 = new_try_tag `'try'`
  br _335, ^334, ^332

334:
  %% trycatch_SUITE.erl:1216
  %% Result type:
  %%    'ok'
  _187 = call (`stacktrace_2`/0)

  %% Unique:
  %%    _187
  _336 = succeeded:body _187
  br _336, ^336, ^332

336:
  %% Unique:
  %%    _335
  _375 = kill_try_tag _335
  br ^546

332:
  %% Unique:
  %%    _335
  _373 = landingpad `'try'`, _335

  %% Aliased:
  %%    _373
  _14 = extract _373, `0`

  %% Aliased:
  %%    _373
  _13 = extract _373, `1`

  %% Aliased:
  %%    _373
  _12 = extract _373, `2`

  %% Unique:
  %%    _335
  _374 = kill_try_tag _335

  %% Argument types:
  %%    _14 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _14
  _371 = bif:'=:=' _14, `error`
  br _371, ^370, ^338

370:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _367 = is_tagged_tuple _13, `2`, `badmatch`
  br _367, ^364, ^338

364:
  %% Aliased:
  %%    _12
  Stk2 = build_stacktrace _12

  %% Aliased:
  %%    Stk2
  _362 = is_nonempty_list Stk2
  br _362, ^362, ^340

362:
  %% Argument types:
  %%    Stk2 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk2
  _156 = get_hd Stk2

  %% Argument types:
  %%    Stk2 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk2
  _155 = get_tl Stk2

  %% Argument types:
  %%    
  %% Aliased:
  %%    _156
  _359 = is_tagged_tuple _156, `4`, `trycatch_SUITE`
  br _359, ^356, ^340

356:
  %% Argument types:
  %%    _156 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _156
  _159 = get_tuple_element _156, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _159
  _355 = bif:'=:=' _159, `stacktrace_2`
  br _355, ^354, ^340

354:
  %% Argument types:
  %%    _156 => {'trycatch_SUITE', 'stacktrace_2', any(), any()}
  %% Aliased:
  %%    _156
  _158 = get_tuple_element _156, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _158
  _353 = bif:'=:=' _158, `0`
  br _353, ^352, ^340

352:
  %% Aliased:
  %%    _155
  _351 = is_nonempty_list _155
  br _351, ^351, ^340

351:
  %% Argument types:
  %%    _155 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _155
  _162 = get_hd _155

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _348 = is_tagged_tuple _162, `4`, `trycatch_SUITE`
  br _348, ^345, ^340

345:
  %% Argument types:
  %%    _162 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _162
  _165 = get_tuple_element _162, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _165
  _344 = bif:'=:=' _165, `stacktrace`
  br _344, ^343, ^340

343:
  %% Argument types:
  %%    _162 => {'trycatch_SUITE', 'stacktrace', any(), any()}
  %% Aliased:
  %%    _162
  _164 = get_tuple_element _162, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _164
  _342 = bif:'=:=' _164, `1`
  br _342, ^546, ^340

546:
  br ^549

549:
  _380 = new_try_tag `'try'`
  br _380, ^379, ^377

379:
  %% trycatch_SUITE.erl:1225
  %% Result type:
  %%    none()
  _191 = call (`stacktrace_3`/2), `a`, `b`

  %% Aliased:
  %%    _191
  _381 = succeeded:body _191
  br ^377

377:
  %% Unique:
  %%    _380
  _422 = landingpad `'try'`, _380

  %% Aliased:
  %%    _422
  _19 = extract _422, `0`

  %% Aliased:
  %%    _422
  _18 = extract _422, `1`

  %% Aliased:
  %%    _422
  _17 = extract _422, `2`

  %% Unique:
  %%    _380
  _423 = kill_try_tag _380

  %% Argument types:
  %%    _19 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _19
  _420 = bif:'=:=' _19, `error`
  br _420, ^419, ^383

419:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _418 = bif:'=:=' _18, `function_clause`
  br _418, ^417, ^383

417:
  %% trycatch_SUITE.erl:1228
  _167 = call (`lists`:`module_info`/1), `native`

  %% Aliased:
  %%    _167
  _384 = succeeded:body _167
  br _384, ^384, ^1

384:
  switch _167, ^386, [
    { `false`, ^415 },
    { `true`, ^414 }
  ]

414:
  %% Aliased:
  %%    _17
  _174 = build_stacktrace _17

  %% Aliased:
  %%    _174
  _412 = is_nonempty_list _174
  br _412, ^412, ^401

412:
  %% Argument types:
  %%    _174 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _174
  _176 = get_hd _174

  %% Argument types:
  %%    
  %% Aliased:
  %%    _176
  _409 = is_tagged_tuple _176, `4`, `lists`
  br _409, ^406, ^401

406:
  %% Argument types:
  %%    _176 => {'lists', any(), any(), any()}
  %% Aliased:
  %%    _176
  _179 = get_tuple_element _176, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _405 = bif:'=:=' _179, `prefix`
  br _405, ^404, ^401

404:
  %% Argument types:
  %%    _176 => {'lists', 'prefix', any(), any()}
  %% Aliased:
  %%    _176
  _178 = get_tuple_element _176, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _178
  _403 = bif:'=:=' _178, `2`
  br _403, ^547, ^401

401:
  %% trycatch_SUITE.erl:1232
  %% Aliased:
  %%    _174
  _192 = match_fail `badmatch`, _174

  %% Unique:
  %%    _192
  _413 = succeeded:body _192
  br ^1

415:
  %% Aliased:
  %%    _17
  Stk3 = build_stacktrace _17

  %% Aliased:
  %%    Stk3
  _398 = is_nonempty_list Stk3
  br _398, ^398, ^388

398:
  %% Argument types:
  %%    Stk3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk3
  _169 = get_hd Stk3

  %% Argument types:
  %%    
  %% Aliased:
  %%    _169
  _395 = is_tagged_tuple _169, `4`, `lists`
  br _395, ^392, ^388

392:
  %% Argument types:
  %%    _169 => {'lists', any(), any(), any()}
  %% Aliased:
  %%    _169
  _172 = get_tuple_element _169, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _391 = bif:'=:=' _172, `prefix`
  br _391, ^390, ^388

390:
  %% Argument types:
  %%    _169 => {'lists', 'prefix', any(), any()}
  %% Aliased:
  %%    _169
  _171 = get_tuple_element _169, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _171
  _389 = bif:'=:=' _171, `[a,b]`
  br _389, ^547, ^388

547:
  br ^550

550:
  _429 = new_try_tag `'try'`
  br _429, ^428, ^426

428:
  %% trycatch_SUITE.erl:1237
  %% Anno: #{thrown_type => {t_atom,[x]}}
  _197 = call (`erlang`:`throw`/1), `x`

  %% Aliased:
  %%    _197
  _430 = succeeded:body _197
  br ^426

426:
  %% Unique:
  %%    _429
  _438 = landingpad `'try'`, _429

  %% Aliased:
  %%    _438
  _26 = extract _438, `0`

  %% Aliased:
  %%    _438
  _25 = extract _438, `1`

  %% Aliased:
  %%    _438
  _24 = extract _438, `2`

  %% Unique:
  %%    _429
  _439 = kill_try_tag _429

  %% Argument types:
  %%    _26 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _26
  _436 = bif:'=:=' _26, `throw`
  br _436, ^435, ^432

435:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _434 = bif:'=:=' _25, `x`
  br _434, ^433, ^432

433:
  %% Result type:
  %%    'ok'
  ret `ok`

432:
  %% Aliased:
  %%    _24, 
  %%    _25
  _198 = resume _24, _25

  %% Unique:
  %%    _198
  _437 = succeeded:body _198
  br ^1

388:
  %% trycatch_SUITE.erl:1230
  %% Aliased:
  %%    Stk3
  _193 = match_fail `badmatch`, Stk3

  %% Unique:
  %%    _193
  _399 = succeeded:body _193
  br ^1

386:
  %% trycatch_SUITE.erl:1228
  %% Aliased:
  %%    _167
  _194 = match_fail `case_clause`, _167

  %% Unique:
  %%    _194
  _416 = succeeded:body _194
  br ^1

383:
  %% Aliased:
  %%    _17, 
  %%    _18
  _195 = resume _17, _18

  %% Unique:
  %%    _195
  _421 = succeeded:body _195
  br ^1

340:
  %% trycatch_SUITE.erl:1219
  %% Aliased:
  %%    Stk2
  _188 = match_fail `badmatch`, Stk2

  %% Unique:
  %%    _188
  _363 = succeeded:body _188
  br ^1

338:
  %% Aliased:
  %%    _12, 
  %%    _13
  _189 = resume _12, _13

  %% Unique:
  %%    _189
  _372 = succeeded:body _189
  br ^1

329:
  %% trycatch_SUITE.erl:1212
  %% Aliased:
  %%    _141
  _199 = match_fail `badmatch`, _141

  %% Unique:
  %%    _199
  _464 = succeeded:body _199
  br ^1

325:
  %% trycatch_SUITE.erl:1210
  %% Aliased:
  %%    _125
  _200 = match_fail `badmatch`, _125

  %% Unique:
  %%    _200
  _494 = succeeded:body _200
  br ^1

213:
  %% trycatch_SUITE.erl:1201
  %% Aliased:
  %%    _83
  _183 = match_fail `badmatch`, _83

  %% Unique:
  %%    _183
  _242 = succeeded:body _183
  br ^1

209:
  %% trycatch_SUITE.erl:1199
  %% Aliased:
  %%    _69
  _184 = match_fail `badmatch`, _69

  %% Unique:
  %%    _184
  _268 = succeeded:body _184
  br ^1

206:
  %% trycatch_SUITE.erl:1197
  %% Aliased:
  %%    _66
  _185 = match_fail `case_clause`, _66

  %% Unique:
  %%    _185
  _322 = succeeded:body _185
  br ^1

1:
  _201 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _201
}

%% trycatch_SUITE.erl:1243
%% Counter = 135
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'abs', nonempty_improper_list(reference(), pid())} | {''div'', {1, 0}} | {'value', nonempty_improper_list(reference(), pid())}
%%    _1 =>
%%     'error'
%%    _2 =>
%%     {'add', {0, 'a'}} | {'throw', nonempty_improper_list(reference(), pid())} | {'value', nonempty_improper_list(reference(), pid())}
function `trycatch_SUITE`:`stacktrace_1`(_0, _1, _2) {
0:
  br ^132

132:
  _50 = new_try_tag `'try'`
  br _50, ^130, ^47

130:
  br ^133

133:
  _55 = new_try_tag `'try'`
  br _55, ^131, ^52

131:
  br ^134

134:
  _60 = new_try_tag `'try'`
  br _60, ^59, ^57

59:
  %% trycatch_SUITE.erl:1244
  %% Unique:
  %%    _0
  _33 = call (`foo`/1), _0

  %% Aliased:
  %%    _33
  _61 = succeeded:body _33
  br _61, ^61, ^57

61:
  %% Unique:
  %%    _60
  _72 = kill_try_tag _60

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _64 = bif:'=:=' _33, `error`
  br _64, ^64, ^63

64:
  br ^58

63:
  %% trycatch_SUITE.erl:1244
  %% Aliased:
  %%    _33
  _35 = match_fail `try_clause`, _33

  %% Unique:
  %%    _35
  _65 = succeeded:body _35
  br ^52

57:
  %% Unique:
  %%    _60
  _70 = landingpad `'try'`, _60

  %% Aliased:
  %%    _70
  _7 = extract _70, `0`

  %% Aliased:
  %%    _70
  _6 = extract _70, `1`

  %% Aliased:
  %%    _70
  _5 = extract _70, `2`

  %% Unique:
  %%    _60
  _71 = kill_try_tag _60

  %% Argument types:
  %%    _7 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _7
  _68 = bif:'=:=' _7, `error`
  br _68, ^68, ^67

68:
  %% Aliased:
  %%    _5
  Stk1 = build_stacktrace _5

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6, 
  %%    Stk1
  _37 = put_tuple `caught1`, _6, Stk1
  br ^58

58:
  _31 = phi { `value1`, ^64 }, { _37, ^68 }

  %% Aliased:
  %%    _55
  _78 = kill_try_tag _55

  %% trycatch_SUITE.erl:1250
  %% Aliased:
  %%    _2
  _39 = call (`foo`/1), _2

  %% Aliased:
  %%    _39
  _73 = succeeded:body _39
  br _73, ^53, ^47

53:
  %% Aliased:
  %%    _50
  _81 = kill_try_tag _50

  %% Argument types:
  %%    _31 => 'value1' | {'caught1', any(), any()}
  %% Unique:
  %%    _31
  _42 = put_tuple `value2`, _31
  %% Result type:
  %%    {'value2', 'value1' | {'caught1', any(), any()}}
  %% Unique:
  %%    _42
  ret _42

67:
  %% Aliased:
  %%    _5, 
  %%    _6
  _38 = resume _5, _6

  %% Unique:
  %%    _38
  _69 = succeeded:body _38
  br ^52

52:
  %% Unique:
  %%    _55
  _76 = landingpad `'try'`, _55

  %% Aliased:
  %%    _76
  _11 = extract _76, `1`

  %% Aliased:
  %%    _76
  _10 = extract _76, `2`

  %% Unique:
  %%    _55
  _77 = kill_try_tag _55
  br ^83

83:
  %% trycatch_SUITE.erl:1250
  %% Aliased:
  %%    _2
  _40 = call (`foo`/1), _2

  %% Aliased:
  %%    _40
  _74 = succeeded:body _40
  br _74, ^74, ^47

74:
  %% Aliased:
  %%    _10, 
  %%    _11
  _41 = resume _10, _11

  %% Unique:
  %%    _41
  _75 = succeeded:body _41
  br ^47

47:
  %% Aliased:
  %%    _50
  _79 = landingpad `'try'`, _50

  %% Aliased:
  %%    _79
  _17 = extract _79, `0`

  %% Aliased:
  %%    _79
  _16 = extract _79, `1`

  %% Aliased:
  %%    _79
  _15 = extract _79, `2`

  %% Aliased:
  %%    _50
  _80 = kill_try_tag _50

  %% Aliased:
  %%    _15
  Stk2 = build_stacktrace _15

  %% Argument types:
  %%    _17 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _16
  %% Unique:
  %%    _17
  _27 = put_tuple _17, _16

  %% Argument types:
  %%    _27 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    Stk2
  %% Unique:
  %%    _27
  _43 = put_tuple `caught2`, _27, Stk2
  %% Result type:
  %%    {'caught2', {'error' | 'exit' | 'throw', any()}, any()}
  %% Unique:
  %%    _43
  ret _43
}

%% trycatch_SUITE.erl:1258
%% Counter = 13
%% bs_ensure_opt: true
function `trycatch_SUITE`:`stacktrace_2`() {
0:
  %% trycatch_SUITE.erl:1259
  %% Argument types:
  %%    
  _0 = bif:self

  %% trycatch_SUITE.erl:1259
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`process_info`/2), _0, `current_function`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _10 = bif:'=:=' _2, `ok`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% trycatch_SUITE.erl:1259
  %% Aliased:
  %%    _2
  _3 = match_fail `badmatch`, _2

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% trycatch_SUITE.erl:1262
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
%%    _1 =>
%%     'b'
function `trycatch_SUITE`:`stacktrace_3`(_0, _1) {
0:
  %% trycatch_SUITE.erl:1263
  _2 = call (`lists`:`prefix`/2), _0, _1

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% trycatch_SUITE.erl:1265
%% Counter = 316
%% bs_ensure_opt: true
function `trycatch_SUITE`:`nested_stacktrace`(_0) {
0:
  %% trycatch_SUITE.erl:1266
  _2 = call (`erlang`:`make_ref`/0)

  %% trycatch_SUITE.erl:1266
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    _1 => pid()
  %% Unique:
  %%    _1
  _32 = put_list _1, `[]`

  %% Argument types:
  %%    _2 => reference()
  %% Unique:
  %%    _2
  _33 = put_tuple _2

  %% Argument types:
  %%    _33 => {reference()}
  %%    _32 => nonempty_list(pid())
  %% Aliased:
  %%    _32, 
  %%    _33
  V = put_list _33, _32

  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _35 = put_tuple V, `x1`

  %% Argument types:
  %%    _35 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Aliased:
  %%    _35
  _36 = put_tuple `value`, _35

  %% Argument types:
  %%    _36 => {'value', {nonempty_list({reference()} | pid()), 'x1'}}
  %%    _35 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _36
  _37 = put_tuple _36, `void`, _35

  %% trycatch_SUITE.erl:1267
  %% Result type:
  %%    'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _37
  _38 = call (`nested_stacktrace_1`/2), _37, `{void,void,void}`

  %% Aliased:
  %%    _38
  _148 = succeeded:body _38
  br _148, ^148, ^1

148:
  %% Argument types:
  %%    _38 => 'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _38
  _305 = bif:'=:=' _38, `value1`
  br _305, ^304, ^150

304:
  %% trycatch_SUITE.erl:1269
  _39 = call (`trycatch_SUITE`:`module_info`/1), `native`

  %% Aliased:
  %%    _39
  _151 = succeeded:body _39
  br _151, ^151, ^1

151:
  switch _39, ^153, [
    { `false`, ^301 },
    { `true`, ^302 }
  ]

302:
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _103 = put_tuple V, `x1`

  %% Argument types:
  %%    _103 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Unique:
  %%    _103
  _104 = put_tuple `add`, _103

  %% Argument types:
  %%    _104 => {'add', {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _104
  _105 = put_tuple _104, `error`, `badarith`

  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _100 = put_tuple V, `x2`

  %% Argument types:
  %%    _100 => {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _100
  _101 = put_tuple `value`, _100

  %% Argument types:
  %%    _101 => {'value', {nonempty_list({reference()} | pid()), 'x2'}}
  %%    _100 => {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _100
  %% Unique:
  %%    _101
  _102 = put_tuple _101, `void`, _100

  %% trycatch_SUITE.erl:1285
  %% Result type:
  %%    'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _102, 
  %%    _105
  _106 = call (`nested_stacktrace_1`/2), _105, _102

  %% Aliased:
  %%    _106
  _240 = succeeded:body _106
  br _240, ^240, ^1

240:
  %% Argument types:
  %%    _106 => 'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _106
  _297 = bif:is_tuple _106
  br _297, ^294, ^242

294:
  %% Argument types:
  %%    _106 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _106
  _108 = get_tuple_element _106, `1`

  %% Aliased:
  %%    _108
  _293 = is_nonempty_list _108
  br _293, ^293, ^242

293:
  %% Argument types:
  %%    _108 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _108
  _111 = get_hd _108

  %% Argument types:
  %%    
  %% Aliased:
  %%    _111
  _290 = is_tagged_tuple _111, `4`, `trycatch_SUITE`
  br _290, ^287, ^242

287:
  %% Argument types:
  %%    _111 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _111
  _114 = get_tuple_element _111, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _114
  _286 = bif:'=:=' _114, `my_add`
  br _286, ^285, ^242

285:
  %% Argument types:
  %%    _111 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _111
  _113 = get_tuple_element _111, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _113
  _284 = bif:'=:=' _113, `2`
  br _284, ^283, ^242

283:
  %% Argument types:
  %%    _106 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _106
  _107 = get_tuple_element _106, `2`

  %% Argument types:
  %%    _107 => 'value2' | {'caught2', any()}
  %% Aliased:
  %%    _107
  _282 = bif:'=:=' _107, `value2`
  br _282, ^281, ^242

281:
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _118 = put_tuple V, `x1`

  %% Argument types:
  %%    _118 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Unique:
  %%    _118
  _119 = put_tuple `add`, _118

  %% Argument types:
  %%    _119 => {'add', {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _119
  _120 = put_tuple _119, `error`, `badarith`

  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _116 = put_tuple `abs`, V

  %% Argument types:
  %%    _116 => {'abs', nonempty_list({reference()} | pid())}
  %% Unique:
  %%    _116
  _117 = put_tuple _116, `error`, `badarg`

  %% trycatch_SUITE.erl:1290
  %% Result type:
  %%    'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _117, 
  %%    _120
  _121 = call (`nested_stacktrace_1`/2), _120, _117

  %% Aliased:
  %%    _121
  _243 = succeeded:body _121
  br _243, ^243, ^1

243:
  %% Argument types:
  %%    _121 => 'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _121
  _277 = bif:is_tuple _121
  br _277, ^274, ^245

274:
  %% Argument types:
  %%    _121 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _121
  _123 = get_tuple_element _121, `1`

  %% Aliased:
  %%    _123
  _273 = is_nonempty_list _123
  br _273, ^273, ^245

273:
  %% Argument types:
  %%    _123 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _123
  _126 = get_hd _123

  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _270 = is_tagged_tuple _126, `4`, `trycatch_SUITE`
  br _270, ^267, ^245

267:
  %% Argument types:
  %%    _126 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _126
  _129 = get_tuple_element _126, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _129
  _266 = bif:'=:=' _129, `my_add`
  br _266, ^265, ^245

265:
  %% Argument types:
  %%    _126 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _126
  _128 = get_tuple_element _126, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _264 = bif:'=:=' _128, `2`
  br _264, ^263, ^245

263:
  %% Argument types:
  %%    _121 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _121
  _122 = get_tuple_element _121, `2`

  %% Argument types:
  %%    _122 => 'value2' | {'caught2', any()}
  %% Aliased:
  %%    _122
  _260 = bif:is_tuple _122
  br _260, ^257, ^245

257:
  %% Argument types:
  %%    _122 => {'caught2', any()}
  %% Aliased:
  %%    _122
  _131 = get_tuple_element _122, `1`

  %% Aliased:
  %%    _131
  _256 = is_nonempty_list _131
  br _256, ^256, ^245

256:
  %% Argument types:
  %%    _131 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _131
  _134 = get_hd _131

  %% Argument types:
  %%    
  %% Aliased:
  %%    _134
  _253 = is_tagged_tuple _134, `4`, `trycatch_SUITE`
  br _253, ^250, ^245

250:
  %% Argument types:
  %%    _134 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _134
  _137 = get_tuple_element _134, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _137
  _249 = bif:'=:=' _137, `my_abs`
  br _249, ^248, ^245

248:
  %% Argument types:
  %%    _134 => {'trycatch_SUITE', 'my_abs', any(), any()}
  %% Aliased:
  %%    _134
  _136 = get_tuple_element _134, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _247 = bif:'=:=' _136, `1`
  br _247, ^152, ^245

245:
  %% trycatch_SUITE.erl:1287
  %% Aliased:
  %%    _121
  _139 = match_fail `badmatch`, _121

  %% Unique:
  %%    _139
  _280 = succeeded:body _139
  br ^1

242:
  %% trycatch_SUITE.erl:1282
  %% Aliased:
  %%    _106
  _140 = match_fail `badmatch`, _106

  %% Unique:
  %%    _140
  _300 = succeeded:body _140
  br ^1

301:
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _44 = put_tuple V, `x1`

  %% Argument types:
  %%    _44 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Unique:
  %%    _44
  _45 = put_tuple `add`, _44

  %% Argument types:
  %%    _45 => {'add', {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _45
  _46 = put_tuple _45, `error`, `badarith`

  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _41 = put_tuple V, `x2`

  %% Argument types:
  %%    _41 => {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _41
  _42 = put_tuple `value`, _41

  %% Argument types:
  %%    _42 => {'value', {nonempty_list({reference()} | pid()), 'x2'}}
  %%    _41 => {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _41
  %% Unique:
  %%    _42
  _43 = put_tuple _42, `void`, _41

  %% trycatch_SUITE.erl:1274
  %% Result type:
  %%    'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _43, 
  %%    _46
  _47 = call (`nested_stacktrace_1`/2), _46, _43

  %% Aliased:
  %%    _47
  _154 = succeeded:body _47
  br _154, ^154, ^1

154:
  %% Argument types:
  %%    _47 => 'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _47
  _236 = bif:is_tuple _47
  br _236, ^233, ^156

233:
  %% Argument types:
  %%    _47 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _47
  _49 = get_tuple_element _47, `1`

  %% Aliased:
  %%    _49
  _232 = is_nonempty_list _49
  br _232, ^232, ^156

232:
  %% Argument types:
  %%    _49 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _49
  _52 = get_hd _49

  %% Argument types:
  %%    _49 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _49
  _51 = get_tl _49

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _229 = is_tagged_tuple _52, `4`, `erlang`
  br _229, ^226, ^156

226:
  %% Argument types:
  %%    _52 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _52
  _55 = get_tuple_element _52, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _225 = bif:'=:=' _55, `'+'`
  br _225, ^224, ^156

224:
  %% Argument types:
  %%    _52 => {'erlang', ''+'', any(), any()}
  %% Aliased:
  %%    _52
  _54 = get_tuple_element _52, `2`

  %% Aliased:
  %%    _54
  _223 = is_nonempty_list _54
  br _223, ^223, ^156

223:
  %% Argument types:
  %%    _54 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _54
  _58 = get_hd _54

  %% Argument types:
  %%    _54 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _54
  _57 = get_tl _54

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57
  _222 = bif:'=:=' _57, `[x1]`
  br _222, ^222, ^156

222:
  %% Aliased:
  %%    _51
  _221 = is_nonempty_list _51
  br _221, ^221, ^156

221:
  %% Argument types:
  %%    _51 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _51
  _60 = get_hd _51

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _218 = is_tagged_tuple _60, `4`, `trycatch_SUITE`
  br _218, ^215, ^156

215:
  %% Argument types:
  %%    _60 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _60
  _63 = get_tuple_element _60, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _214 = bif:'=:=' _63, `my_add`
  br _214, ^213, ^156

213:
  %% Argument types:
  %%    _60 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _60
  _62 = get_tuple_element _60, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _212 = bif:'=:=' _62, `2`
  br _212, ^211, ^156

211:
  %% Argument types:
  %%    _47 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _47
  _48 = get_tuple_element _47, `2`

  %% Argument types:
  %%    _48 => 'value2' | {'caught2', any()}
  %% Aliased:
  %%    _48
  _210 = bif:'=:=' _48, `value2`
  br _210, ^209, ^156

209:
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    _58, 
  %%    V
  _157 = bif:'=:=' _58, V
  br _157, ^157, ^156

157:
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _67 = put_tuple V, `x1`

  %% Argument types:
  %%    _67 => {nonempty_list({reference()} | pid()), 'x1'}
  %% Unique:
  %%    _67
  _68 = put_tuple `add`, _67

  %% Argument types:
  %%    _68 => {'add', {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _68
  _69 = put_tuple _68, `error`, `badarith`

  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    V
  _65 = put_tuple `abs`, V

  %% Argument types:
  %%    _65 => {'abs', nonempty_list({reference()} | pid())}
  %% Unique:
  %%    _65
  _66 = put_tuple _65, `error`, `badarg`

  %% trycatch_SUITE.erl:1279
  %% Result type:
  %%    'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _66, 
  %%    _69
  _70 = call (`nested_stacktrace_1`/2), _69, _66

  %% Aliased:
  %%    _70
  _158 = succeeded:body _70
  br _158, ^158, ^1

158:
  %% Argument types:
  %%    _70 => 'value1' | {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _70
  _205 = bif:is_tuple _70
  br _205, ^202, ^160

202:
  %% Argument types:
  %%    _70 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _70
  _72 = get_tuple_element _70, `1`

  %% Aliased:
  %%    _72
  _201 = is_nonempty_list _72
  br _201, ^201, ^160

201:
  %% Argument types:
  %%    _72 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _72
  _75 = get_hd _72

  %% Argument types:
  %%    _72 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _72
  _74 = get_tl _72

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _198 = is_tagged_tuple _75, `4`, `erlang`
  br _198, ^195, ^160

195:
  %% Argument types:
  %%    _75 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _75
  _78 = get_tuple_element _75, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _78
  _194 = bif:'=:=' _78, `'+'`
  br _194, ^193, ^160

193:
  %% Argument types:
  %%    _75 => {'erlang', ''+'', any(), any()}
  %% Aliased:
  %%    _75
  _77 = get_tuple_element _75, `2`

  %% Aliased:
  %%    _77
  _192 = is_nonempty_list _77
  br _192, ^192, ^160

192:
  %% Argument types:
  %%    _77 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _77
  _81 = get_hd _77

  %% Argument types:
  %%    _77 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _77
  _80 = get_tl _77

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _191 = bif:'=:=' _80, `[x1]`
  br _191, ^191, ^160

191:
  %% Aliased:
  %%    _74
  _190 = is_nonempty_list _74
  br _190, ^190, ^160

190:
  %% Argument types:
  %%    _74 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _74
  _83 = get_hd _74

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _187 = is_tagged_tuple _83, `4`, `trycatch_SUITE`
  br _187, ^184, ^160

184:
  %% Argument types:
  %%    _83 => {'trycatch_SUITE', any(), any(), any()}
  %% Aliased:
  %%    _83
  _86 = get_tuple_element _83, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _183 = bif:'=:=' _86, `my_add`
  br _183, ^182, ^160

182:
  %% Argument types:
  %%    _83 => {'trycatch_SUITE', 'my_add', any(), any()}
  %% Aliased:
  %%    _83
  _85 = get_tuple_element _83, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _181 = bif:'=:=' _85, `2`
  br _181, ^180, ^160

180:
  %% Argument types:
  %%    _70 => {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Aliased:
  %%    _70
  _71 = get_tuple_element _70, `2`

  %% Argument types:
  %%    _71 => 'value2' | {'caught2', any()}
  %% Aliased:
  %%    _71
  _177 = bif:is_tuple _71
  br _177, ^174, ^160

174:
  %% Argument types:
  %%    _71 => {'caught2', any()}
  %% Aliased:
  %%    _71
  _88 = get_tuple_element _71, `1`

  %% Aliased:
  %%    _88
  _173 = is_nonempty_list _88
  br _173, ^173, ^160

173:
  %% Argument types:
  %%    _88 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _88
  _91 = get_hd _88

  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _170 = is_tagged_tuple _91, `4`, `erlang`
  br _170, ^167, ^160

167:
  %% Argument types:
  %%    _91 => {'erlang', any(), any(), any()}
  %% Aliased:
  %%    _91
  _94 = get_tuple_element _91, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _166 = bif:'=:=' _94, `abs`
  br _166, ^165, ^160

165:
  %% Argument types:
  %%    _91 => {'erlang', 'abs', any(), any()}
  %% Aliased:
  %%    _91
  _93 = get_tuple_element _91, `2`

  %% Aliased:
  %%    _93
  _164 = is_nonempty_list _93
  br _164, ^164, ^160

164:
  %% Argument types:
  %%    _93 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _93
  _97 = get_hd _93

  %% Argument types:
  %%    _93 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _93
  _96 = get_tl _93

  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _163 = bif:'=:=' _96, `[]`
  br _163, ^163, ^160

163:
  %% trycatch_SUITE.erl:1277
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    _81, 
  %%    V
  _23 = bif:'=:=' _81, V
  br _23, ^309, ^160

309:
  %% trycatch_SUITE.erl:1278
  %% Argument types:
  %%    V => nonempty_list({reference()} | pid())
  %% Aliased:
  %%    _97, 
  %%    V
  _24 = bif:'=:=' _97, V
  br _24, ^152, ^160

152:
  %% Result type:
  %%    'ok'
  ret `ok`

160:
  %% trycatch_SUITE.erl:1276
  %% Aliased:
  %%    _70
  _141 = match_fail `badmatch`, _70

  %% Unique:
  %%    _141
  _208 = succeeded:body _141
  br ^1

156:
  %% trycatch_SUITE.erl:1271
  %% Aliased:
  %%    _47
  _142 = match_fail `badmatch`, _47

  %% Unique:
  %%    _142
  _239 = succeeded:body _142
  br ^1

153:
  %% trycatch_SUITE.erl:1269
  %% Aliased:
  %%    _39
  _143 = match_fail `case_clause`, _39

  %% Unique:
  %%    _143
  _303 = succeeded:body _143
  br ^1

150:
  %% trycatch_SUITE.erl:1267
  %% Aliased:
  %%    _38
  _144 = match_fail `badmatch`, _38

  %% Unique:
  %%    _144
  _306 = succeeded:body _144
  br ^1

1:
  _145 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _145
}

%% trycatch_SUITE.erl:1295
%% Counter = 111
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {{'add', {nonempty_list({...} | pid()), 'x1'}} | {'value', {nonempty_list({...} | pid()), 'x1'}}, 'error' | 'void', 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}}
%%    _1 =>
%%     {'void' | {'abs', nonempty_list({reference()} | pid())} | {'value', {nonempty_list({...} | pid()), 'x2'}}, 'error' | 'void', 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}}
function `trycatch_SUITE`:`nested_stacktrace_1`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => {{'add', {nonempty_list({...} | pid()), 'x1'}} | {'value', {nonempty_list({...} | pid()), 'x1'}}, 'error' | 'void', 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _0
  _35 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {{'add', {nonempty_list({...} | pid()), 'x1'}} | {'value', {nonempty_list({...} | pid()), 'x1'}}, 'error' | 'void', 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _0
  _34 = get_tuple_element _0, `2`

  %% Argument types:
  %%    _1 => {'void' | {'abs', nonempty_list({reference()} | pid())} | {'value', {nonempty_list({...} | pid()), 'x2'}}, 'error' | 'void', 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}}
  %% Unique:
  %%    _1
  _38 = get_tuple_element _1, `1`
  _62 = new_try_tag `'try'`
  br _62, ^61, ^59

61:
  %% Argument types:
  %%    _0 => {{'add', {nonempty_list({...} | pid()), 'x1'}} | {'value', {nonempty_list({...} | pid()), 'x1'}}, 'error' | 'void', 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}}
  %% Unique:
  %%    _0
  _36 = get_tuple_element _0, `0`

  %% trycatch_SUITE.erl:1296
  %% Unique:
  %%    _36
  _43 = call (`foo`/1), _36

  %% Aliased:
  %%    _43
  _63 = succeeded:body _43
  br _63, ^63, ^59

63:
  %% Unique:
  %%    _62
  _93 = kill_try_tag _62

  %% Argument types:
  %%    _34 => 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}
  %% Aliased:
  %%    _34, 
  %%    _43
  _66 = bif:'=:=' _43, _34
  br _66, ^66, ^65

66:
  %% Result type:
  %%    'value1'
  ret `value1`

65:
  %% trycatch_SUITE.erl:1296
  %% Aliased:
  %%    _43
  _44 = match_fail `try_clause`, _43

  %% Unique:
  %%    _44
  _67 = succeeded:body _44
  br ^1

59:
  %% Unique:
  %%    _62
  _91 = landingpad `'try'`, _62

  %% Aliased:
  %%    _91
  _6 = extract _91, `0`

  %% Aliased:
  %%    _91
  _5 = extract _91, `1`

  %% Aliased:
  %%    _91
  _4 = extract _91, `2`

  %% Unique:
  %%    _62
  _92 = kill_try_tag _62
  br ^108

108:
  %% trycatch_SUITE.erl:1299
  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %%    _35 => 'error' | 'void'
  %% Unique:
  %%    _6, 
  %%    _35
  _19 = bif:'=:=' _6, _35
  br _19, ^109, ^69

109:
  %% trycatch_SUITE.erl:1299
  %% Argument types:
  %%    _34 => 'badarith' | {nonempty_list({reference()} | pid()), 'x1'}
  %% Aliased:
  %%    _5, 
  %%    _34
  _20 = bif:'=:=' _5, _34
  br _20, ^71, ^69

71:
  %% Argument types:
  %%    _1 => {'void' | {'abs', nonempty_list({reference()} | pid())} | {'value', {nonempty_list({...} | pid()), 'x2'}}, 'error' | 'void', 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}}
  %% Unique:
  %%    _1
  _37 = get_tuple_element _1, `2`
  _76 = new_try_tag `'try'`
  br _76, ^75, ^73

75:
  %% Argument types:
  %%    _1 => {'void' | {'abs', nonempty_list({reference()} | pid())} | {'value', {nonempty_list({...} | pid()), 'x2'}}, 'error' | 'void', 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}}
  %% Unique:
  %%    _1
  _39 = get_tuple_element _1, `0`

  %% trycatch_SUITE.erl:1300
  %% Unique:
  %%    _39
  _46 = call (`foo`/1), _39

  %% Aliased:
  %%    _46
  _77 = succeeded:body _46
  br _77, ^77, ^73

77:
  %% Unique:
  %%    _76
  _89 = kill_try_tag _76

  %% Argument types:
  %%    _37 => 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _37, 
  %%    _46
  _80 = bif:'=:=' _46, _37
  br _80, ^80, ^79

80:
  br ^74

79:
  %% trycatch_SUITE.erl:1300
  %% Aliased:
  %%    _46
  _48 = match_fail `try_clause`, _46

  %% Unique:
  %%    _48
  _81 = succeeded:body _48
  br ^1

73:
  %% Unique:
  %%    _76
  _87 = landingpad `'try'`, _76

  %% Aliased:
  %%    _87
  _11 = extract _87, `0`

  %% Aliased:
  %%    _87
  _10 = extract _87, `1`

  %% Aliased:
  %%    _87
  _9 = extract _87, `2`

  %% Unique:
  %%    _76
  _88 = kill_try_tag _76
  br ^104

104:
  %% trycatch_SUITE.erl:1303
  %% Argument types:
  %%    _11 => 'error' | 'exit' | 'throw'
  %%    _38 => 'error' | 'void'
  %% Unique:
  %%    _11, 
  %%    _38
  _24 = bif:'=:=' _11, _38
  br _24, ^105, ^83

105:
  %% trycatch_SUITE.erl:1303
  %% Argument types:
  %%    _37 => 'badarg' | 'void' | {nonempty_list({reference()} | pid()), 'x2'}
  %% Aliased:
  %%    _10, 
  %%    _37
  _25 = bif:'=:=' _10, _37
  br _25, ^85, ^83

85:
  %% Aliased:
  %%    _9
  S2 = build_stacktrace _9

  %% Argument types:
  %%    
  %% Aliased:
  %%    S2
  _50 = put_tuple `caught2`, S2
  br ^74

74:
  _12 = phi { `value2`, ^80 }, { _50, ^85 }

  %% Aliased:
  %%    _4
  S1 = build_stacktrace _4

  %% Argument types:
  %%    _12 => 'value2' | {'caught2', any()}
  %% Aliased:
  %%    _12, 
  %%    S1
  _52 = put_tuple `caught1`, S1, _12
  %% Result type:
  %%    {'caught1', any(), 'value2' | {'caught2', any()}}
  %% Unique:
  %%    _52
  ret _52

83:
  %% Aliased:
  %%    _9, 
  %%    _10
  _51 = resume _9, _10

  %% Unique:
  %%    _51
  _86 = succeeded:body _51
  br ^1

69:
  %% Aliased:
  %%    _4, 
  %%    _5
  _53 = resume _4, _5

  %% Unique:
  %%    _53
  _90 = succeeded:body _53
  br ^1

1:
  _55 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _55
}

%% trycatch_SUITE.erl:1309
%% Counter = 41
%% bs_ensure_opt: true
function `trycatch_SUITE`:`raise`(_0) {
0:
  %% Result type:
  %%    none()
  _1 = make_fun (`'-raise/1-fun-0-'`/0)

  %% trycatch_SUITE.erl:1310
  %% Aliased:
  %%    _1
  _12 = call (`test_raise`/1), _1

  %% Aliased:
  %%    _12
  _22 = succeeded:body _12
  br _22, ^22, ^1

22:
  %% Result type:
  %%    number(0, '+inf')
  _3 = make_fun (`'-raise/1-fun-1-'`/0)

  %% trycatch_SUITE.erl:1311
  %% Aliased:
  %%    _3
  _14 = call (`test_raise`/1), _3

  %% Aliased:
  %%    _14
  _23 = succeeded:body _14
  br _23, ^23, ^1

23:
  %% Result type:
  %%    none()
  _4 = make_fun (`'-raise/1-fun-2-'`/0)

  %% trycatch_SUITE.erl:1312
  %% Aliased:
  %%    _4
  _16 = call (`test_raise`/1), _4

  %% Aliased:
  %%    _16
  _24 = succeeded:body _16
  br _24, ^24, ^1

24:
  %% Result type:
  %%    number(0, '+inf')
  _6 = make_fun (`'-raise/1-fun-3-'`/0)

  %% trycatch_SUITE.erl:1314
  %% Result type:
  %%    'badarg' | number(0, '+inf')
  %% Aliased:
  %%    _6
  _9 = call (`bad_raise`/1), _6

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _9 => 'badarg' | number(0, '+inf')
  %% Unique:
  %%    _9
  _35 = bif:'=:=' _9, `badarg`
  br _35, ^34, ^27

34:
  %% trycatch_SUITE.erl:1316
  %% Result type:
  %%    'error' | 'ok'
  _10 = call (`stk_used_in_bin_size`/1), `<<0,0,0,0,0,0:2>>`

  %% Unique:
  %%    _10
  _28 = succeeded:body _10
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _10 => 'error' | 'ok'
  %% Unique:
  %%    _10
  _32 = bif:'=:=' _10, `error`
  br _32, ^31, ^30

31:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% trycatch_SUITE.erl:1316
  _18 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _18
  _33 = succeeded:body _18
  br ^1

27:
  %% trycatch_SUITE.erl:1314
  %% Unique:
  %%    _9
  _19 = match_fail `badmatch`, _9

  %% Unique:
  %%    _19
  _36 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% trycatch_SUITE.erl:1319
%% Counter = 60
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(2)
function `trycatch_SUITE`:`stk_used_in_bin_size`(_0) {
0:
  br ^59

59:
  _24 = new_try_tag `'try'`
  br _24, ^23, ^21

23:
  %% trycatch_SUITE.erl:1321
  %% Anno: #{thrown_type => {t_atom,[fail]}}
  _16 = call (`erlang`:`throw`/1), `fail`

  %% Aliased:
  %%    _16
  _25 = succeeded:body _16
  br ^21

21:
  %% Unique:
  %%    _24
  _40 = landingpad `'try'`, _24

  %% Aliased:
  %%    _40
  _4 = extract _40, `0`

  %% Aliased:
  %%    _40
  _3 = extract _40, `1`

  %% Aliased:
  %%    _40
  _2 = extract _40, `2`

  %% Unique:
  %%    _24
  _41 = kill_try_tag _24

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _38 = bif:'=:=' _4, `throw`
  br _38, ^37, ^27

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _36 = bif:'=:=' _3, `fail`
  br _36, ^35, ^27

35:
  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% Argument types:
  %%    _0 => bitstring(2)
  %% Aliased:
  %%    _0
  _12 = bs_start_match `new`, _0

  %% trycatch_SUITE.erl:1327
  %% Argument types:
  %%    _12 => bs_context(2)
  %% Aliased:
  %%    _12, 
  %%    Stk
  _13 = bs_match `integer`, _12, `[unsigned,big]`, Stk, `1`

  %% Aliased:
  %%    _13
  _30 = succeeded:guard _13
  br _30, ^30, ^29

30:
  %% Aliased:
  %%    _13
  _14 = bs_extract _13

  %% Argument types:
  %%    _14 => 0..'+inf'
  %% Unique:
  %%    _14
  _33 = bif:'=:=' _14, `0`
  br _33, ^32, ^29

32:
  %% Aliased:
  %%    _13
  _31 = bs_test_tail _13, `0`
  br _31, ^31, ^29

31:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% Result type:
  %%    'error'
  ret `error`

27:
  %% Aliased:
  %%    _2, 
  %%    _3
  _17 = resume _2, _3

  %% Unique:
  %%    _17
  _39 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% trycatch_SUITE.erl:1332
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`bad_raise`(_0) {
0:
  br ^36

36:
  _14 = new_try_tag `'try'`
  br _14, ^13, ^11

13:
  %% trycatch_SUITE.erl:1334
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-raise/1-fun-3-'`/0) => fun(() -> number(0, '+inf'))
  _6 = call (`'-raise/1-fun-3-'`/0)

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br _15, ^10, ^11

10:
  %% Unique:
  %%    _14
  _19 = kill_try_tag _14
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _6
  ret _6

11:
  %% Unique:
  %%    _14
  _17 = landingpad `'try'`, _14

  %% Aliased:
  %%    _17
  _3 = extract _17, `1`

  %% Aliased:
  %%    _17
  _2 = extract _17, `2`

  %% Unique:
  %%    _14
  _18 = kill_try_tag _14

  %% Aliased:
  %%    _2, 
  %%    _3
  _7 = raw_raise `bad_class`, _3, _2

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^16, ^1

16:
  %% Result type:
  %%    'badarg'
  ret `badarg`

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% trycatch_SUITE.erl:1340
%% Counter = 12
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`test_raise`(_0) {
0:
  %% trycatch_SUITE.erl:1341
  %% Aliased:
  %%    _0
  _2 = call (`test_raise_1`/1), _0

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% trycatch_SUITE.erl:1342
  %% Result type:
  %%    nonempty_improper_list(any(), any()) | number(0, '+inf')
  %% Aliased:
  %%    _0
  _3 = call (`test_raise_2`/1), _0

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% trycatch_SUITE.erl:1343
  %% Result type:
  %%    nonempty_improper_list(any(), any()) | number(0, '+inf')
  %% Aliased:
  %%    _0
  _4 = call (`test_raise_3`/1), _0

  %% Aliased:
  %%    _4
  _10 = succeeded:body _4
  br _10, ^10, ^1

10:
  %% trycatch_SUITE.erl:1344
  %% Aliased:
  %%    _0
  _5 = call (`test_raise_4`/1), _0

  %% Aliased:
  %%    _5
  _11 = succeeded:body _5
  br _11, ^11, ^1

11:
  %% Aliased:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% trycatch_SUITE.erl:1346
%% Counter = 70
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`test_raise_1`(_0) {
0:
  %% trycatch_SUITE.erl:1347
  _19 = call (`erlang`:`erase`/1), `exception`

  %% Aliased:
  %%    _19
  _25 = succeeded:body _19
  br _25, ^68, ^1

68:
  br ^69

69:
  _30 = new_try_tag `'try'`
  br _30, ^29, ^27

29:
  %% trycatch_SUITE.erl:1349
  %% Aliased:
  %%    _0
  _21 = call (`do_test_raise_1`/1), _0

  %% Aliased:
  %%    _21
  _31 = succeeded:body _21
  br _31, ^31, ^27

31:
  %% Unique:
  %%    _30
  _45 = kill_try_tag _30
  %% Aliased:
  %%    _21
  ret _21

27:
  %% Unique:
  %%    _30
  _43 = landingpad `'try'`, _30

  %% Aliased:
  %%    _43
  _4 = extract _43, `0`

  %% Aliased:
  %%    _43
  _3 = extract _43, `1`

  %% Aliased:
  %%    _43
  _2 = extract _43, `2`

  %% Unique:
  %%    _30
  _44 = kill_try_tag _30
  br ^52

52:
  %% trycatch_SUITE.erl:1352
  _7 = call (`erlang`:`erase`/1), `exception`

  %% Aliased:
  %%    _7
  _32 = succeeded:body _7
  br _32, ^32, ^1

32:
  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _39 = bif:is_tuple _7
  br _39, ^39, ^34

39:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _40 = bif:tuple_size _7

  %% Argument types:
  %%    _40 => 0..16777215
  %% Unique:
  %%    _40
  _41 = bif:'=:=' _40, `3`
  br _41, ^38, ^34

38:
  %% Argument types:
  %%    _7 => {any(), any(), any()}
  %% Aliased:
  %%    _7
  _17 = get_tuple_element _7, `0`

  %% trycatch_SUITE.erl:1352
  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _17
  %% Unique:
  %%    _4
  _13 = bif:'=:=' _17, _4
  br _13, ^49, ^34

49:
  %% Argument types:
  %%    _7 => {'error' | 'exit' | 'throw', any(), any()}
  %% Aliased:
  %%    _7
  _16 = get_tuple_element _7, `1`

  %% trycatch_SUITE.erl:1352
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _16
  _11 = bif:'=:=' _16, _3
  br _11, ^50, ^34

50:
  %% Argument types:
  %%    _7 => {'error' | 'exit' | 'throw', any(), any()}
  %% Aliased:
  %%    _7
  _15 = get_tuple_element _7, `2`

  %% trycatch_SUITE.erl:1352
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15, 
  %%    Stk
  _12 = bif:'=:=' _15, Stk
  br _12, ^37, ^34

37:
  %% Result type:
  %%    {'error' | 'exit' | 'throw', any(), any()}
  %% Aliased:
  %%    _7
  ret _7

34:
  %% trycatch_SUITE.erl:1352
  %% Aliased:
  %%    _7
  _22 = match_fail `badmatch`, _7

  %% Unique:
  %%    _22
  _42 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% trycatch_SUITE.erl:1355
%% Counter = 41
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`do_test_raise_1`(_0) {
0:
  br ^40

40:
  _16 = new_try_tag `'try'`
  br _16, ^15, ^13

15:
  %% trycatch_SUITE.erl:1357
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _7 = call _0

  %% Aliased:
  %%    _7
  _17 = succeeded:body _7
  br _17, ^12, ^13

12:
  %% Unique:
  %%    _16
  _22 = kill_try_tag _16
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _7
  ret _7

13:
  %% Aliased:
  %%    _16
  _20 = landingpad `'try'`, _16

  %% Aliased:
  %%    _20
  _4 = extract _20, `0`

  %% Aliased:
  %%    _20
  _3 = extract _20, `1`

  %% Aliased:
  %%    _20
  _2 = extract _20, `2`

  %% Aliased:
  %%    _16
  _21 = kill_try_tag _16

  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _3, 
  %%    Stk
  %% Unique:
  %%    _4
  _5 = put_tuple _4, _3, Stk
  br ^23

23:
  %% trycatch_SUITE.erl:1361
  %% Unique:
  %%    _5
  _8 = call (`erlang`:`put`/2), `exception`, _5

  %% Aliased:
  %%    _8
  _18 = succeeded:body _8
  br _18, ^18, ^1

18:
  %% trycatch_SUITE.erl:1362
  %% Aliased:
  %%    _3, 
  %%    _4, 
  %%    Stk
  _9 = call (`erlang`:`raise`/3), _4, _3, Stk

  %% Aliased:
  %%    _9
  _19 = succeeded:body _9
  br _19, ^19, ^1

19:
  %% Aliased:
  %%    _9
  ret _9

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% trycatch_SUITE.erl:1365
%% Counter = 100
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`test_raise_2`(_0) {
0:
  %% trycatch_SUITE.erl:1366
  _30 = call (`erlang`:`erase`/1), `exception`

  %% Aliased:
  %%    _30
  _40 = succeeded:body _30
  br _40, ^98, ^1

98:
  br ^99

99:
  _45 = new_try_tag `'try'`
  br _45, ^44, ^42

44:
  %% trycatch_SUITE.erl:1368
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _0
  _32 = call (`do_test_raise_2`/1), _0

  %% Aliased:
  %%    _32
  _46 = succeeded:body _32
  br _46, ^46, ^42

46:
  %% Unique:
  %%    _45
  _77 = kill_try_tag _45
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _32
  ret _32

42:
  %% Unique:
  %%    _45
  _75 = landingpad `'try'`, _45

  %% Aliased:
  %%    _75
  _4 = extract _75, `0`

  %% Aliased:
  %%    _75
  _3 = extract _75, `1`

  %% Aliased:
  %%    _75
  _2 = extract _75, `2`

  %% Unique:
  %%    _45
  _76 = kill_try_tag _45
  br ^82

82:
  %% trycatch_SUITE.erl:1371
  _22 = call (`erlang`:`erase`/1), `exception`

  %% Aliased:
  %%    _22
  _47 = succeeded:body _22
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _71 = bif:is_tuple _22
  br _71, ^71, ^49

71:
  %% Argument types:
  %%    _22 => {...}
  %% Aliased:
  %%    _22
  _72 = bif:tuple_size _22

  %% Argument types:
  %%    _72 => 0..16777215
  %% Unique:
  %%    _72
  _73 = bif:'=:=' _72, `2`
  br _73, ^70, ^49

70:
  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _24 = get_tuple_element _22, `0`

  %% trycatch_SUITE.erl:1371
  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _4
  _15 = bif:'=:=' _24, _4
  br _15, ^80, ^49

80:
  %% Argument types:
  %%    _22 => {'error' | 'exit' | 'throw', any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% trycatch_SUITE.erl:1371
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _23
  _16 = bif:'=:=' _23, _3
  br _16, ^51, ^49

51:
  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2
  _56 = new_try_tag `'try'`
  br _56, ^55, ^53

55:
  %% trycatch_SUITE.erl:1373
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _34 = call _0

  %% Aliased:
  %%    _34
  _57 = succeeded:body _34
  br _57, ^57, ^53

57:
  %% Unique:
  %%    _56
  _69 = kill_try_tag _56
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _34
  ret _34

53:
  %% Aliased:
  %%    _56
  _67 = landingpad `'try'`, _56

  %% Aliased:
  %%    _67
  _7 = extract _67, `2`

  %% Aliased:
  %%    _56
  _68 = kill_try_tag _56

  %% Aliased:
  %%    _7
  S = build_stacktrace _7

  %% Aliased:
  %%    S
  _65 = is_nonempty_list S
  br _65, ^65, ^59

65:
  %% Argument types:
  %%    S => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    S
  _27 = get_hd S

  %% Aliased:
  %%    Stk
  _63 = is_nonempty_list Stk
  br _63, ^63, ^61

63:
  %% Argument types:
  %%    Stk => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  _29 = get_hd Stk

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27, 
  %%    _29
  _62 = bif:'=:=' _29, _27
  br _62, ^62, ^61

62:
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  ret Stk

61:
  %% trycatch_SUITE.erl:1377
  %% Aliased:
  %%    Stk
  _35 = match_fail `badmatch`, Stk

  %% Unique:
  %%    _35
  _64 = succeeded:body _35
  br ^1

59:
  %% trycatch_SUITE.erl:1376
  %% Aliased:
  %%    S
  _36 = match_fail `badmatch`, S

  %% Unique:
  %%    _36
  _66 = succeeded:body _36
  br ^1

49:
  %% trycatch_SUITE.erl:1371
  %% Aliased:
  %%    _22
  _37 = match_fail `badmatch`, _22

  %% Unique:
  %%    _37
  _74 = succeeded:body _37
  br ^1

1:
  _38 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _38
}

%% trycatch_SUITE.erl:1381
%% Counter = 41
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`do_test_raise_2`(_0) {
0:
  br ^40

40:
  _16 = new_try_tag `'try'`
  br _16, ^15, ^13

15:
  %% trycatch_SUITE.erl:1383
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _7 = call _0

  %% Aliased:
  %%    _7
  _17 = succeeded:body _7
  br _17, ^12, ^13

12:
  %% Unique:
  %%    _16
  _22 = kill_try_tag _16
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _7
  ret _7

13:
  %% Unique:
  %%    _16
  _20 = landingpad `'try'`, _16

  %% Aliased:
  %%    _20
  _4 = extract _20, `0`

  %% Aliased:
  %%    _20
  _3 = extract _20, `1`

  %% Aliased:
  %%    _20
  _2 = extract _20, `2`

  %% Unique:
  %%    _16
  _21 = kill_try_tag _16

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _4
  _5 = put_tuple _4, _3
  br ^23

23:
  %% trycatch_SUITE.erl:1389
  %% Unique:
  %%    _5
  _8 = call (`erlang`:`put`/2), `exception`, _5

  %% Aliased:
  %%    _8
  _18 = succeeded:body _8
  br _18, ^18, ^1

18:
  %% Aliased:
  %%    _2, 
  %%    _3, 
  %%    _4
  _9 = raw_raise _4, _3, _2

  %% Unique:
  %%    _9
  _19 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% trycatch_SUITE.erl:1393
%% Counter = 109
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`test_raise_3`(_0) {
0:
  br ^108

108:
  _49 = new_try_tag `'try'`
  br _49, ^48, ^46

48:
  %% trycatch_SUITE.erl:1395
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _0
  _36 = call (`do_test_raise_3`/1), _0

  %% Aliased:
  %%    _36
  _50 = succeeded:body _36
  br _50, ^50, ^46

50:
  %% Unique:
  %%    _49
  _87 = kill_try_tag _49
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _36
  ret _36

46:
  %% Unique:
  %%    _49
  _85 = landingpad `'try'`, _49

  %% Aliased:
  %%    _85
  _4 = extract _85, `0`

  %% Aliased:
  %%    _85
  _3 = extract _85, `1`

  %% Aliased:
  %%    _85
  _2 = extract _85, `2`

  %% Unique:
  %%    _49
  _86 = kill_try_tag _49

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _83 = bif:'=:=' _4, `exit`
  br _83, ^82, ^52

82:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _79 = is_tagged_tuple _3, `3`, `exception`
  br _79, ^76, ^52

76:
  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2
  _57 = new_try_tag `'try'`
  br _57, ^56, ^54

56:
  %% trycatch_SUITE.erl:1399
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _38 = call _0

  %% Aliased:
  %%    _38
  _58 = succeeded:body _38
  br _58, ^58, ^54

58:
  %% Unique:
  %%    _57
  _75 = kill_try_tag _57
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _38
  ret _38

54:
  %% Unique:
  %%    _57
  _73 = landingpad `'try'`, _57

  %% Aliased:
  %%    _73
  _8 = extract _73, `0`

  %% Aliased:
  %%    _73
  _7 = extract _73, `1`

  %% Aliased:
  %%    _73
  _6 = extract _73, `2`

  %% Unique:
  %%    _57
  _74 = kill_try_tag _57
  br ^89

89:
  %% Argument types:
  %%    _3 => {'exception', any(), any()}
  %% Aliased:
  %%    _3
  _28 = get_tuple_element _3, `1`

  %% trycatch_SUITE.erl:1401
  %% Argument types:
  %%    _8 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _28
  %% Unique:
  %%    _8
  _14 = bif:'=:=' _8, _28
  br _14, ^90, ^60

90:
  %% Argument types:
  %%    _3 => {'exception', any(), any()}
  %% Aliased:
  %%    _3
  _27 = get_tuple_element _3, `2`

  %% trycatch_SUITE.erl:1401
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7, 
  %%    _27
  _15 = bif:'=:=' _7, _27
  br _15, ^62, ^60

62:
  %% Aliased:
  %%    _6
  S = build_stacktrace _6

  %% Aliased:
  %%    S
  _70 = is_nonempty_list S
  br _70, ^70, ^64

70:
  %% Argument types:
  %%    S => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    S
  _32 = get_hd S

  %% Aliased:
  %%    Stk
  _68 = is_nonempty_list Stk
  br _68, ^68, ^66

68:
  %% Argument types:
  %%    Stk => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  _34 = get_hd Stk

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32, 
  %%    _34
  _67 = bif:'=:=' _34, _32
  br _67, ^67, ^66

67:
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  ret Stk

66:
  %% trycatch_SUITE.erl:1403
  %% Aliased:
  %%    Stk
  _39 = match_fail `badmatch`, Stk

  %% Unique:
  %%    _39
  _69 = succeeded:body _39
  br ^1

64:
  %% trycatch_SUITE.erl:1402
  %% Aliased:
  %%    S
  _40 = match_fail `badmatch`, S

  %% Unique:
  %%    _40
  _71 = succeeded:body _40
  br ^1

60:
  %% Aliased:
  %%    _6, 
  %%    _7
  _41 = resume _6, _7

  %% Unique:
  %%    _41
  _72 = succeeded:body _41
  br ^1

52:
  %% Aliased:
  %%    _2, 
  %%    _3
  _42 = resume _2, _3

  %% Unique:
  %%    _42
  _84 = succeeded:body _42
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% trycatch_SUITE.erl:1407
%% Counter = 38
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`do_test_raise_3`(_0) {
0:
  br ^37

37:
  _15 = new_try_tag `'try'`
  br _15, ^14, ^12

14:
  %% trycatch_SUITE.erl:1409
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _7 = call _0

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^11, ^12

11:
  %% Unique:
  %%    _15
  _20 = kill_try_tag _15
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _7
  ret _7

12:
  %% Unique:
  %%    _15
  _18 = landingpad `'try'`, _15

  %% Aliased:
  %%    _18
  _4 = extract _18, `0`

  %% Aliased:
  %%    _18
  _3 = extract _18, `1`

  %% Aliased:
  %%    _18
  _2 = extract _18, `2`

  %% Unique:
  %%    _15
  _19 = kill_try_tag _15

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _4
  _5 = put_tuple `exception`, _4, _3

  %% Aliased:
  %%    _2
  %% Unique:
  %%    _5
  _8 = raw_raise `exit`, _5, _2

  %% Unique:
  %%    _8
  _17 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% trycatch_SUITE.erl:1418
%% Counter = 137
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`test_raise_4`(_0) {
0:
  br ^135

135:
  _53 = new_try_tag `'try'`
  br _53, ^52, ^50

52:
  %% trycatch_SUITE.erl:1420
  %% Aliased:
  %%    _0
  _39 = call (`do_test_raise_4`/1), _0

  %% Aliased:
  %%    _39
  _54 = succeeded:body _39
  br _54, ^54, ^50

54:
  %% Unique:
  %%    _53
  _96 = kill_try_tag _53
  %% Aliased:
  %%    _39
  ret _39

50:
  %% Unique:
  %%    _53
  _94 = landingpad `'try'`, _53

  %% Aliased:
  %%    _94
  _4 = extract _94, `0`

  %% Aliased:
  %%    _94
  _3 = extract _94, `1`

  %% Aliased:
  %%    _94
  _2 = extract _94, `2`

  %% Unique:
  %%    _53
  _95 = kill_try_tag _53

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _4
  _92 = bif:'=:=' _4, `exit`
  br _92, ^91, ^56

91:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _88 = is_tagged_tuple _3, `4`, `exception`
  br _88, ^85, ^56

85:
  %% Argument types:
  %%    _3 => {'exception', any(), any(), any()}
  %% Aliased:
  %%    _3
  _28 = get_tuple_element _3, `3`

  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% trycatch_SUITE.erl:1424
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28, 
  %%    Stk
  _32 = bif:'=:=' Stk, _28
  br _32, ^134, ^58

134:
  br ^136

136:
  _63 = new_try_tag `'try'`
  br _63, ^62, ^60

62:
  %% trycatch_SUITE.erl:1426
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _41 = call _0

  %% Aliased:
  %%    _41
  _64 = succeeded:body _41
  br _64, ^64, ^60

64:
  %% Unique:
  %%    _63
  _81 = kill_try_tag _63
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _41
  ret _41

60:
  %% Unique:
  %%    _63
  _79 = landingpad `'try'`, _63

  %% Aliased:
  %%    _79
  _9 = extract _79, `0`

  %% Aliased:
  %%    _79
  _8 = extract _79, `1`

  %% Aliased:
  %%    _79
  _7 = extract _79, `2`

  %% Unique:
  %%    _63
  _80 = kill_try_tag _63
  br ^98

98:
  %% Argument types:
  %%    _3 => {'exception', any(), any(), any()}
  %% Aliased:
  %%    _3
  _30 = get_tuple_element _3, `1`

  %% trycatch_SUITE.erl:1428
  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _30
  %% Unique:
  %%    _9
  _15 = bif:'=:=' _9, _30
  br _15, ^99, ^66

99:
  %% Argument types:
  %%    _3 => {'exception', any(), any(), any()}
  %% Aliased:
  %%    _3
  _29 = get_tuple_element _3, `2`

  %% trycatch_SUITE.erl:1428
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8, 
  %%    _29
  _16 = bif:'=:=' _8, _29
  br _16, ^68, ^66

68:
  %% Aliased:
  %%    _7
  S = build_stacktrace _7

  %% Aliased:
  %%    S
  _76 = is_nonempty_list S
  br _76, ^76, ^70

76:
  %% Argument types:
  %%    S => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    S
  _35 = get_hd S

  %% Aliased:
  %%    Stk
  _74 = is_nonempty_list Stk
  br _74, ^74, ^72

74:
  %% Argument types:
  %%    Stk => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  _37 = get_hd Stk

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35, 
  %%    _37
  _73 = bif:'=:=' _37, _35
  br _73, ^73, ^72

73:
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Stk
  ret Stk

72:
  %% trycatch_SUITE.erl:1430
  %% Aliased:
  %%    Stk
  _42 = match_fail `badmatch`, Stk

  %% Unique:
  %%    _42
  _75 = succeeded:body _42
  br ^1

70:
  %% trycatch_SUITE.erl:1429
  %% Aliased:
  %%    S
  _43 = match_fail `badmatch`, S

  %% Unique:
  %%    _43
  _77 = succeeded:body _43
  br ^1

66:
  %% Aliased:
  %%    _7, 
  %%    _8
  _44 = resume _7, _8

  %% Unique:
  %%    _44
  _78 = succeeded:body _44
  br ^1

58:
  %% trycatch_SUITE.erl:1424
  _45 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _45
  _84 = succeeded:body _45
  br ^1

56:
  %% Aliased:
  %%    _2, 
  %%    _3
  _46 = resume _2, _3

  %% Unique:
  %%    _46
  _93 = succeeded:body _46
  br ^1

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% trycatch_SUITE.erl:1434
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> number(0, '+inf'))
function `trycatch_SUITE`:`do_test_raise_4`(_0) {
0:
  br ^38

38:
  _15 = new_try_tag `'try'`
  br _15, ^14, ^12

14:
  %% trycatch_SUITE.erl:1436
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    _0 => fun(() -> number(0, '+inf'))
  %% Aliased:
  %%    _0
  _7 = call _0

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^11, ^12

11:
  %% Unique:
  %%    _15
  _20 = kill_try_tag _15
  %% Result type:
  %%    number(0, '+inf')
  %% Aliased:
  %%    _7
  ret _7

12:
  %% Aliased:
  %%    _15
  _18 = landingpad `'try'`, _15

  %% Aliased:
  %%    _18
  _4 = extract _18, `0`

  %% Aliased:
  %%    _18
  _3 = extract _18, `1`

  %% Aliased:
  %%    _18
  _2 = extract _18, `2`

  %% Aliased:
  %%    _15
  _19 = kill_try_tag _15

  %% Aliased:
  %%    _2
  Stk = build_stacktrace _2

  %% Argument types:
  %%    _4 => 'error' | 'exit' | 'throw'
  %% Aliased:
  %%    _3, 
  %%    Stk
  %% Unique:
  %%    _4
  _5 = put_tuple `exception`, _4, _3, Stk
  br ^21

21:
  %% trycatch_SUITE.erl:1440
  %% Aliased:
  %%    Stk
  %% Unique:
  %%    _5
  _8 = call (`erlang`:`raise`/3), `exit`, _5, Stk

  %% Aliased:
  %%    _8
  _17 = succeeded:body _8
  br _17, ^17, ^1

17:
  %% Aliased:
  %%    _8
  ret _8

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% trycatch_SUITE.erl:1443
%% Counter = 43
%% bs_ensure_opt: true
function `trycatch_SUITE`:`no_return_in_try_block`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _18 = bif:is_list _0
  br _18, ^18, ^17

18:
  %% trycatch_SUITE.erl:1444
  %% Result type:
  %%    'gurka' | nil() | number()
  _6 = call (`no_return_in_try_block_1`/1), `0`

  %% Unique:
  %%    _6
  _19 = succeeded:body _6
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _6 => 'gurka' | nil() | number()
  %% Unique:
  %%    _6
  _40 = bif:'=:=' _6, `1.0`
  br _40, ^39, ^21

39:
  %% trycatch_SUITE.erl:1445
  %% Result type:
  %%    'gurka' | nil() | number()
  _7 = call (`no_return_in_try_block_1`/1), `0.0`

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _7 => 'gurka' | nil() | number()
  %% Unique:
  %%    _7
  _37 = bif:'=:=' _7, `1.0`
  br _37, ^36, ^24

36:
  %% trycatch_SUITE.erl:1447
  %% Result type:
  %%    'gurka' | nil() | number(0)
  _8 = call (`no_return_in_try_block_1`/1), `gurka`

  %% Unique:
  %%    _8
  _25 = succeeded:body _8
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    _8 => 'gurka' | nil() | number(0)
  %% Unique:
  %%    _8
  _34 = bif:'=:=' _8, `gurka`
  br _34, ^33, ^27

33:
  %% trycatch_SUITE.erl:1448
  %% Result type:
  %%    'gurka' | nil() | number(0)
  _9 = call (`no_return_in_try_block_1`/1), `[]`

  %% Unique:
  %%    _9
  _28 = succeeded:body _9
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    _9 => 'gurka' | nil() | number(0)
  %% Unique:
  %%    _9
  _31 = bif:'=:=' _9, `[]`
  br _31, ^31, ^30

31:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% trycatch_SUITE.erl:1448
  %% Unique:
  %%    _9
  _10 = match_fail `badmatch`, _9

  %% Unique:
  %%    _10
  _32 = succeeded:body _10
  br ^1

27:
  %% trycatch_SUITE.erl:1447
  %% Unique:
  %%    _8
  _11 = match_fail `badmatch`, _8

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br ^1

24:
  %% trycatch_SUITE.erl:1445
  %% Unique:
  %%    _7
  _12 = match_fail `badmatch`, _7

  %% Unique:
  %%    _12
  _38 = succeeded:body _12
  br ^1

21:
  %% trycatch_SUITE.erl:1444
  %% Unique:
  %%    _6
  _13 = match_fail `badmatch`, _6

  %% Unique:
  %%    _13
  _41 = succeeded:body _13
  br ^1

17:
  %% trycatch_SUITE.erl:1443
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_return_in_try_block/1-',1}}
  _14 = match_fail `function_clause`, _0

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% trycatch_SUITE.erl:1452
%% Counter = 61
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'gurka' | nil() | number(0)
function `trycatch_SUITE`:`no_return_in_try_block_1`(_0) {
0:
  br ^60

60:
  _23 = new_try_tag `'try'`
  br _23, ^22, ^20

22:
  %% Argument types:
  %%    _0 => 'gurka' | nil() | number(0)
  %% Unique:
  %%    _0
  _26 = bif:is_number _0
  br _26, ^26, ^25

26:
  %% trycatch_SUITE.erl:1455
  %% Argument types:
  %%    _0 => number(0)
  %% Unique:
  %%    _0
  _13 = bif:float _0

  %% Unique:
  %%    _13
  _27 = succeeded:body _13
  br _27, ^24, ^20

24:
  %% trycatch_SUITE.erl:1458
  %% Argument types:
  %%    _13 => float()
  %% Unique:
  %%    _13
  _56 = float:put _13

  %% trycatch_SUITE.erl:1458
  _57 = float:put `1.0`

  %% trycatch_SUITE.erl:1458
  %% Unique:
  %%    _56, 
  %%    _57
  _58 = float:'+' _56, _57

  %% Unique:
  %%    _58
  _29 = succeeded:body _58
  br _29, ^59, ^20

59:
  %% Unique:
  %%    _23
  _39 = kill_try_tag _23

  %% Unique:
  %%    _58
  _15 = float:get _58
  %% Result type:
  %%    float()
  %% Unique:
  %%    _15
  ret _15

25:
  %% trycatch_SUITE.erl:1456
  %% Result type:
  %%    none()
  _14 = call (`no_return`/0)

  %% Aliased:
  %%    _14
  _28 = succeeded:body _14
  br ^20

20:
  %% Unique:
  %%    _23
  _37 = landingpad `'try'`, _23

  %% Aliased:
  %%    _37
  _6 = extract _37, `0`

  %% Aliased:
  %%    _37
  _5 = extract _37, `1`

  %% Aliased:
  %%    _37
  _4 = extract _37, `2`

  %% Unique:
  %%    _23
  _38 = kill_try_tag _23

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _35 = bif:'=:=' _6, `throw`
  br _35, ^34, ^31

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _33 = bif:'=:=' _5, `no_return`
  br _33, ^32, ^31

32:
  %% Result type:
  %%    'gurka' | nil() | number(0)
  %% Unique:
  %%    _0
  ret _0

31:
  %% Aliased:
  %%    _4, 
  %%    _5
  _16 = resume _4, _5

  %% Unique:
  %%    _16
  _36 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% trycatch_SUITE.erl:1463
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`no_return`() {
0:
  %% trycatch_SUITE.erl:1463
  %% Anno: #{thrown_type => {t_atom,[no_return]}}
  _2 = call (`erlang`:`throw`/1), `no_return`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1465
%% Counter = 118
%% bs_ensure_opt: true
function `trycatch_SUITE`:`expression_export`(_0) {
0:
  %% trycatch_SUITE.erl:1466
  %% Result type:
  %%    42
  _18 = call (`expr_export_1`/0)

  %% Unique:
  %%    _18
  _45 = succeeded:body _18
  br _45, ^110, ^1

110:
  %% trycatch_SUITE.erl:1467
  %% Result type:
  %%    42
  _19 = call (`expr_export_2`/0)

  %% Unique:
  %%    _19
  _48 = succeeded:body _19
  br _48, ^107, ^1

107:
  %% Result type:
  %%    'bar'
  _3 = make_fun (`'-expression_export/1-fun-0-'`/0)

  %% trycatch_SUITE.erl:1469
  %% Result type:
  %%    'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _3
  _20 = call (`expr_export_3`/1), _3

  %% Aliased:
  %%    _20
  _51 = succeeded:body _20
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    _20 => 'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _20
  _105 = bif:'=:=' _20, `42`
  br _105, ^104, ^53

104:
  %% Result type:
  %%    'pub'
  _5 = make_fun (`'-expression_export/1-fun-1-'`/0)

  %% trycatch_SUITE.erl:1470
  %% Result type:
  %%    'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _5
  _21 = call (`expr_export_3`/1), _5

  %% Aliased:
  %%    _21
  _54 = succeeded:body _21
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    _21 => 'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _21
  _102 = bif:'=:=' _21, `beer`
  br _102, ^101, ^56

101:
  %% Result type:
  %%    none()
  _7 = make_fun (`'-expression_export/1-fun-2-'`/0)

  %% trycatch_SUITE.erl:1471
  %% Result type:
  %%    'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _7
  _22 = call (`expr_export_3`/1), _7

  %% Aliased:
  %%    _22
  _57 = succeeded:body _22
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    _22 => 'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _22
  _99 = bif:'=:=' _22, `{error,failed}`
  br _99, ^99, ^59

99:
  %% Result type:
  %%    42
  _9 = make_fun (`'-expression_export/1-fun-3-'`/0)

  %% trycatch_SUITE.erl:1472
  %% Result type:
  %%    'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _9
  _23 = call (`expr_export_3`/1), _9

  %% Aliased:
  %%    _23
  _60 = succeeded:body _23
  br _60, ^60, ^1

60:
  %% Argument types:
  %%    _23 => 'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _23
  _97 = bif:'=:=' _23, `is_42`
  br _97, ^96, ^62

96:
  %% Result type:
  %%    'bad'
  _11 = make_fun (`'-expression_export/1-fun-4-'`/0)

  %% trycatch_SUITE.erl:1473
  %% Result type:
  %%    'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _11
  _24 = call (`expr_export_3`/1), _11

  %% Aliased:
  %%    _24
  _63 = succeeded:body _24
  br _63, ^63, ^1

63:
  %% Argument types:
  %%    _24 => 'beer' | 'is_42' | 'no_good' | 42 | {'error', any()}
  %% Aliased:
  %%    _24
  _94 = bif:'=:=' _24, `no_good`
  br _94, ^93, ^65

93:
  %% trycatch_SUITE.erl:1475
  %% Result type:
  %%    'no_match' | bitstring(8)
  _25 = call (`expr_export_4`/1), `<<0,0,0,1>>`

  %% Aliased:
  %%    _25
  _66 = succeeded:body _25
  br _66, ^66, ^1

66:
  %% Argument types:
  %%    _25 => 'no_match' | bitstring(8)
  %% Aliased:
  %%    _25
  _91 = bif:'=:=' _25, `<<>>`
  br _91, ^91, ^68

91:
  %% trycatch_SUITE.erl:1476
  %% Result type:
  %%    'no_match' | bitstring(8)
  _26 = call (`expr_export_4`/1), `<<0,0,0,2,97,98,99,100>>`

  %% Aliased:
  %%    _26
  _69 = succeeded:body _26
  br _69, ^69, ^1

69:
  %% Argument types:
  %%    _26 => 'no_match' | bitstring(8)
  %% Aliased:
  %%    _26
  _89 = bif:'=:=' _26, `<<"abcd">>`
  br _89, ^89, ^71

89:
  %% trycatch_SUITE.erl:1477
  %% Result type:
  %%    'no_match' | bitstring(8)
  _27 = call (`expr_export_4`/1), `<<0,0,0,0>>`

  %% Aliased:
  %%    _27
  _72 = succeeded:body _27
  br _72, ^72, ^1

72:
  %% Argument types:
  %%    _27 => 'no_match' | bitstring(8)
  %% Aliased:
  %%    _27
  _87 = bif:'=:=' _27, `no_match`
  br _87, ^86, ^74

86:
  %% trycatch_SUITE.erl:1478
  %% Result type:
  %%    'no_match' | bitstring(8)
  _28 = call (`expr_export_4`/1), `<<0,0,3,9>>`

  %% Aliased:
  %%    _28
  _75 = succeeded:body _28
  br _75, ^75, ^1

75:
  %% Argument types:
  %%    _28 => 'no_match' | bitstring(8)
  %% Aliased:
  %%    _28
  _84 = bif:'=:=' _28, `no_match`
  br _84, ^83, ^77

83:
  %% trycatch_SUITE.erl:1480
  %% Result type:
  %%    {1, 2, 3}
  _29 = call (`expr_export_5`/0)

  %% Unique:
  %%    _29
  _78 = succeeded:body _29
  br _78, ^81, ^1

81:
  %% Result type:
  %%    'ok'
  ret `ok`

77:
  %% trycatch_SUITE.erl:1478
  %% Aliased:
  %%    _28
  _32 = match_fail `badmatch`, _28

  %% Unique:
  %%    _32
  _85 = succeeded:body _32
  br ^1

74:
  %% trycatch_SUITE.erl:1477
  %% Aliased:
  %%    _27
  _33 = match_fail `badmatch`, _27

  %% Unique:
  %%    _33
  _88 = succeeded:body _33
  br ^1

71:
  %% trycatch_SUITE.erl:1476
  %% Aliased:
  %%    _26
  _34 = match_fail `badmatch`, _26

  %% Unique:
  %%    _34
  _90 = succeeded:body _34
  br ^1

68:
  %% trycatch_SUITE.erl:1475
  %% Aliased:
  %%    _25
  _35 = match_fail `badmatch`, _25

  %% Unique:
  %%    _35
  _92 = succeeded:body _35
  br ^1

65:
  %% trycatch_SUITE.erl:1473
  %% Aliased:
  %%    _24
  _36 = match_fail `badmatch`, _24

  %% Unique:
  %%    _36
  _95 = succeeded:body _36
  br ^1

62:
  %% trycatch_SUITE.erl:1472
  %% Aliased:
  %%    _23
  _37 = match_fail `badmatch`, _23

  %% Unique:
  %%    _37
  _98 = succeeded:body _37
  br ^1

59:
  %% trycatch_SUITE.erl:1471
  %% Aliased:
  %%    _22
  _38 = match_fail `badmatch`, _22

  %% Unique:
  %%    _38
  _100 = succeeded:body _38
  br ^1

56:
  %% trycatch_SUITE.erl:1470
  %% Aliased:
  %%    _21
  _39 = match_fail `badmatch`, _21

  %% Unique:
  %%    _39
  _103 = succeeded:body _39
  br ^1

53:
  %% trycatch_SUITE.erl:1469
  %% Aliased:
  %%    _20
  _40 = match_fail `badmatch`, _20

  %% Unique:
  %%    _40
  _106 = succeeded:body _40
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% trycatch_SUITE.erl:1483
%% Counter = 40
%% bs_ensure_opt: true
function `trycatch_SUITE`:`expr_export_1`() {
0:
  %% Result type:
  %%    42
  ret `42`
}

%% trycatch_SUITE.erl:1490
%% Counter = 19
%% bs_ensure_opt: true
function `trycatch_SUITE`:`expr_export_2`() {
0:
  %% Result type:
  %%    42
  ret `42`
}

%% trycatch_SUITE.erl:1498
%% Counter = 58
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> 'bad' | 'bar' | 'pub' | 42)
function `trycatch_SUITE`:`expr_export_3`(_0) {
0:
  br ^57

57:
  _25 = new_try_tag `'try'`
  br _25, ^24, ^22

24:
  %% trycatch_SUITE.erl:1501
  %% Result type:
  %%    'bad' | 'bar' | 'pub' | 42
  %% Argument types:
  %%    _0 => fun(() -> 'bad' | 'bar' | 'pub' | 42)
  %% Aliased:
  %%    _0
  _14 = call _0

  %% Aliased:
  %%    _14
  _26 = succeeded:body _14
  br _26, ^26, ^22

26:
  %% Unique:
  %%    _25
  _40 = kill_try_tag _25
  %% Argument types:
  %%    
  switch _14, ^28, [
    { `bar`, ^30 },
    { `pub`, ^29 }
  ]

29:
  %% Result type:
  %%    'beer'
  ret `beer`

30:
  %% Result type:
  %%    42
  ret `42`

28:
  %% Argument types:
  %%    _14 => 'bad' | 42
  %% Aliased:
  %%    _14
  _32 = bif:'=:=' _14, `42`
  br _32, ^32, ^31

32:
  %% Result type:
  %%    'is_42'
  ret `is_42`

31:
  %% Result type:
  %%    'no_good'
  ret `no_good`

22:
  %% Unique:
  %%    _25
  _38 = landingpad `'try'`, _25

  %% Aliased:
  %%    _38
  _6 = extract _38, `0`

  %% Aliased:
  %%    _38
  _5 = extract _38, `1`

  %% Aliased:
  %%    _38
  _4 = extract _38, `2`

  %% Unique:
  %%    _25
  _39 = kill_try_tag _25

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _36 = bif:'=:=' _6, `error`
  br _36, ^35, ^34

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _17 = put_tuple `error`, _5
  %% Result type:
  %%    {'error', any()}
  %% Unique:
  %%    _17
  ret _17

34:
  %% Aliased:
  %%    _4, 
  %%    _5
  _18 = resume _4, _5

  %% Unique:
  %%    _18
  _37 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% trycatch_SUITE.erl:1512
%% Counter = 124
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(32)
function `trycatch_SUITE`:`expr_export_4`(_0) {
0:
  br ^122

122:
  _55 = new_try_tag `'try'`
  br _55, ^121, ^52

121:
  br ^123

123:
  _60 = new_try_tag `'try'`
  br _60, ^59, ^57

59:
  %% trycatch_SUITE.erl:1514
  SzSz = call (`id`/1), `32`

  %% Aliased:
  %%    SzSz
  _61 = succeeded:body SzSz
  br _61, ^61, ^57

61:
  %% Unique:
  %%    _60
  _85 = kill_try_tag _60

  %% Argument types:
  %%    _0 => bitstring(32)
  %% Aliased:
  %%    _0
  _24 = bs_start_match `new`, _0

  %% trycatch_SUITE.erl:1517
  %% Argument types:
  %%    _24 => bs_context(32)
  %% Aliased:
  %%    _24, 
  %%    SzSz
  _25 = bs_match `integer`, _24, `[unsigned,big]`, SzSz, `1`

  %% Aliased:
  %%    _25
  _65 = succeeded:guard _25
  br _65, ^65, ^79

65:
  %% Aliased:
  %%    _25
  _26 = bs_extract _25

  %% trycatch_SUITE.erl:1517
  %% Argument types:
  %%    _26 => 0..'+inf'
  %% Unique:
  %%    _26
  _3 = bif:'*' _26, `4`

  %% Unique:
  %%    _3
  _69 = succeeded:guard _3
  br _69, ^69, ^68

69:
  %% trycatch_SUITE.erl:1517
  %% Argument types:
  %%    _3 => 0..'+inf'
  %% Unique:
  %%    _3
  _43 = bif:'-' _3, `4`

  %% Aliased:
  %%    _43
  _70 = succeeded:guard _43
  br _70, ^70, ^68

70:
  br ^67

68:
  br ^67

67:
  _29 = phi { `bad_size`, ^68 }, { _43, ^70 }

  %% trycatch_SUITE.erl:1517
  %% Argument types:
  %%    _25 => bs_context(1)
  %%    _29 => 'bad_size' | integer()
  %% Aliased:
  %%    _25, 
  %%    _29
  _31 = bs_match `binary`, _25, `[unsigned,big]`, _29, `8`

  %% Aliased:
  %%    _31
  _73 = succeeded:guard _31
  br _73, ^73, ^79

73:
  %% Aliased:
  %%    _31
  _32 = bs_extract _31

  %% Aliased:
  %%    _31
  _74 = bs_test_tail _31, `0`
  br _74, ^74, ^79

74:
  br ^58

79:
  br ^58

58:
  _37 = phi { _32, ^74 }, { `no_match`, ^79 }

  %% Unique:
  %%    _55
  _89 = kill_try_tag _55
  %% Result type:
  %%    'no_match' | bitstring(8)
  %% Aliased:
  %%    _37
  ret _37

57:
  %% Unique:
  %%    _60
  _83 = landingpad `'try'`, _60

  %% Aliased:
  %%    _83
  _6 = extract _83, `1`

  %% Aliased:
  %%    _83
  _5 = extract _83, `2`

  %% Unique:
  %%    _60
  _84 = kill_try_tag _60

  %% Aliased:
  %%    _5, 
  %%    _6
  _47 = resume _5, _6

  %% Unique:
  %%    _47
  _82 = succeeded:body _47
  br ^52

52:
  %% Unique:
  %%    _55
  _87 = landingpad `'try'`, _55

  %% Aliased:
  %%    _87
  _11 = extract _87, `1`

  %% Aliased:
  %%    _87
  _10 = extract _87, `2`

  %% Unique:
  %%    _55
  _88 = kill_try_tag _55

  %% Aliased:
  %%    _10, 
  %%    _11
  _48 = resume _10, _11

  %% Unique:
  %%    _48
  _86 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% trycatch_SUITE.erl:1523
%% Counter = 52
%% bs_ensure_opt: true
function `trycatch_SUITE`:`expr_export_5`() {
0:
  %% Result type:
  %%    {1, 2, 3}
  ret `{1,2,3}`
}

%% trycatch_SUITE.erl:1537
%% Counter = 84
%% bs_ensure_opt: true
function `trycatch_SUITE`:`throw_opt_crash`(_0) {
0:
  br ^83

83:
  _42 = new_try_tag `'try'`
  br _42, ^41, ^39

41:
  %% trycatch_SUITE.erl:1539
  _3 = call (`id`/1), `false`

  %% Aliased:
  %%    _3
  _43 = succeeded:body _3
  br _43, ^43, ^39

43:
  %% trycatch_SUITE.erl:1539
  _2 = call (`id`/1), `b`

  %% Aliased:
  %%    _2
  _44 = succeeded:body _2
  br _44, ^44, ^39

44:
  %% trycatch_SUITE.erl:1539
  _1 = call (`id`/1), `c`

  %% Aliased:
  %%    _1
  _45 = succeeded:body _1
  br _45, ^45, ^39

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _17 = put_tuple `pass`, _2, _1

  %% trycatch_SUITE.erl:1539
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _17
  _30 = call (`throw_opt_crash_1`/2), _3, _17

  %% Unique:
  %%    _30
  _46 = succeeded:body _30
  br _46, ^46, ^39

46:
  %% trycatch_SUITE.erl:1540
  _5 = call (`id`/1), `false`

  %% Aliased:
  %%    _5
  _47 = succeeded:body _5
  br _47, ^47, ^39

47:
  %% trycatch_SUITE.erl:1540
  _4 = call (`id`/1), `b`

  %% Aliased:
  %%    _4
  _48 = succeeded:body _4
  br _48, ^48, ^39

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _18 = put_tuple `crash`, _4

  %% trycatch_SUITE.erl:1540
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _5
  %% Unique:
  %%    _18
  _31 = call (`throw_opt_crash_1`/2), _5, _18

  %% Unique:
  %%    _31
  _49 = succeeded:body _31
  br _49, ^49, ^39

49:
  %% Unique:
  %%    _42
  _64 = kill_try_tag _42
  %% Result type:
  %%    'ok'
  ret `ok`

39:
  %% Unique:
  %%    _42
  _62 = landingpad `'try'`, _42

  %% Aliased:
  %%    _62
  _9 = extract _62, `0`

  %% Aliased:
  %%    _62
  _8 = extract _62, `1`

  %% Aliased:
  %%    _62
  _7 = extract _62, `2`

  %% Unique:
  %%    _42
  _63 = kill_try_tag _42

  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _9
  _60 = bif:'=:=' _9, `throw`
  br _60, ^59, ^51

59:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _56 = bif:is_tuple _8
  br _56, ^56, ^51

56:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _57 = bif:tuple_size _8

  %% Argument types:
  %%    _57 => 0..16777215
  %% Unique:
  %%    _57
  _58 = bif:'=:=' _57, `3`
  br _58, ^55, ^51

55:
  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _25 = get_tuple_element _8, `0`

  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _24 = get_tuple_element _8, `1`

  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _23 = get_tuple_element _8, `2`
  switch _25, ^51, [
    { `beta`, ^53 },
    { `gamma`, ^54 },
    { `pass`, ^52 }
  ]

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23, 
  %%    _24
  _26 = put_tuple _24, _23

  %% Argument types:
  %%    _26 => {any(), any()}
  %% Unique:
  %%    _26
  _34 = put_tuple `error`, `gurka`, _26
  %% Result type:
  %%    {'error', 'gurka', {any(), any()}}
  %% Unique:
  %%    _34
  ret _34

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23, 
  %%    _24
  _28 = put_tuple _24, _23

  %% Argument types:
  %%    _28 => {any(), any()}
  %% Unique:
  %%    _28
  _32 = put_tuple `error`, `grammofon`, _28
  %% Result type:
  %%    {'error', 'grammofon', {any(), any()}}
  %% Unique:
  %%    _32
  ret _32

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23, 
  %%    _24
  _27 = put_tuple _24, _23

  %% Argument types:
  %%    _27 => {any(), any()}
  %% Unique:
  %%    _27
  _33 = put_tuple `error`, `gaffel`, _27
  %% Result type:
  %%    {'error', 'gaffel', {any(), any()}}
  %% Unique:
  %%    _33
  ret _33

51:
  %% Aliased:
  %%    _7, 
  %%    _8
  _35 = resume _7, _8

  %% Unique:
  %%    _35
  _61 = succeeded:body _35
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% trycatch_SUITE.erl:1551
%% Counter = 30
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     {'crash', any()} | {'pass', any(), any()}
function `trycatch_SUITE`:`throw_opt_crash_1`(_0, _1) {
0:
  switch _0, ^20, [
    { `false`, ^27 },
    { `true`, ^25 }
  ]

25:
  %% Argument types:
  %%    _1 => {'crash', any()} | {'pass', any(), any()}
  %% Unique:
  %%    _1
  _26 = bif:tuple_size _1
  %% Argument types:
  %%    
  switch _26, ^20, [
    { `2`, ^24 },
    { `3`, ^24 }
  ]

24:
  %% trycatch_SUITE.erl:1554
  %% Unique:
  %%    _1
  %% Anno: #{thrown_type => {t_tuple,2,false,#{1 => {t_atom,[crash,pass]}}}}
  _15 = call (`erlang`:`throw`/1), _1

  %% Aliased:
  %%    _15
  _22 = succeeded:body _15
  br ^1

27:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% trycatch_SUITE.erl:1551
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  %% Anno: #{inlined => {'-inlined-throw_opt_crash_1/2-',2}}
  _17 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _17
  _29 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% trycatch_SUITE.erl:1558
%% Counter = 89
%% bs_ensure_opt: true
function `trycatch_SUITE`:`coverage`(_0) {
0:
  br ^87

87:
  _30 = new_try_tag `'catch'`
  br _30, ^28, ^29

28:
  %% trycatch_SUITE.erl:1559
  %% Result type:
  %%    none()
  _19 = call (`coverage_1`/0)

  %% Aliased:
  %%    _19
  _32 = succeeded:body _19
  br ^29

29:
  %% Unique:
  %%    _30
  _35 = landingpad `'catch'`, _30

  %% Aliased:
  %%    _35
  _33 = extract _35, `0`
  br ^27

27:
  %% Aliased:
  %%    _33
  %% Unique:
  %%    _30
  _1 = catch_end _30, _33

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _66 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _66, ^63, ^38

63:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _9 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _60 = bif:is_tuple _9
  br _60, ^60, ^38

60:
  %% Argument types:
  %%    _9 => {...}
  %% Aliased:
  %%    _9
  _61 = bif:tuple_size _9

  %% Argument types:
  %%    _61 => 0..16777215
  %% Unique:
  %%    _61
  _62 = bif:'=:=' _61, `2`
  br _62, ^59, ^38

59:
  %% Argument types:
  %%    _9 => {any(), any()}
  %% Aliased:
  %%    _9
  _12 = get_tuple_element _9, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _58 = bif:'=:=' _12, `{badfun,true}`
  br _58, ^58, ^38

58:
  %% Argument types:
  %%    _9 => {{'badfun', 'true'}, any()}
  %% Aliased:
  %%    _9
  _11 = get_tuple_element _9, `1`

  %% Aliased:
  %%    _11
  _57 = is_nonempty_list _11
  br _57, ^70, ^38

70:
  %% trycatch_SUITE.erl:1560
  %% Result type:
  %%    'ok'
  _15 = call (`coverage_ssa_throw`/0)

  %% Unique:
  %%    _15
  _39 = succeeded:body _15
  br _39, ^54, ^1

54:
  %% trycatch_SUITE.erl:1561
  %% Result type:
  %%    'error'
  _16 = call (`coverage_pre_codegen`/0)

  %% Unique:
  %%    _16
  _42 = succeeded:body _16
  br _42, ^51, ^1

51:
  %% trycatch_SUITE.erl:1562
  _17 = call (`do_plain_catch_list`/1), `42`

  %% Aliased:
  %%    _17
  _45 = succeeded:body _17
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _49 = bif:'=:=' _17, `{a,"*"}`
  br _49, ^49, ^47

49:
  %% trycatch_SUITE.erl:1563
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _0
  _20 = call (`cover_raise`/1), _0

  %% Unique:
  %%    _20
  _48 = succeeded:body _20
  br _48, ^88, ^1

88:
  ret _20

47:
  %% trycatch_SUITE.erl:1562
  %% Aliased:
  %%    _17
  _21 = match_fail `badmatch`, _17

  %% Unique:
  %%    _21
  _50 = succeeded:body _21
  br ^1

38:
  %% trycatch_SUITE.erl:1559
  %% Aliased:
  %%    _1
  _24 = match_fail `badmatch`, _1

  %% Unique:
  %%    _24
  _69 = succeeded:body _24
  br ^1

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% trycatch_SUITE.erl:1568
%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`coverage_1`() {
0:
  %% trycatch_SUITE.erl:1569
  _2 = call (`erlang`:`error`/1), `{badfun,true}`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1583
%% Counter = 13
%% bs_ensure_opt: true
function `trycatch_SUITE`:`coverage_ssa_throw`() {
0:
  %% trycatch_SUITE.erl:1584
  %% Result type:
  %%    'ok'
  _2 = call (`cst_trivial`/0)

  %% Unique:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% trycatch_SUITE.erl:1585
  %% Result type:
  %%    'ok'
  _3 = call (`cst_raw`/0)

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% trycatch_SUITE.erl:1586
  %% Result type:
  %%    'ok'
  _4 = call (`cst_stacktrace`/0)

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br _10, ^10, ^1

10:
  %% trycatch_SUITE.erl:1587
  %% Result type:
  %%    'ok'
  _5 = call (`cst_types`/0)

  %% Unique:
  %%    _5
  _11 = succeeded:body _5
  br _11, ^12, ^1

12:
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% trycatch_SUITE.erl:1591
%% Counter = 34
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_trivial`() {
0:
  br ^33

33:
  _12 = new_try_tag `'try'`
  br _12, ^11, ^9

11:
  %% trycatch_SUITE.erl:1594
  %% Result type:
  %%    none()
  _5 = call (`cst_trivial_1`/0)

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br ^9

9:
  %% Unique:
  %%    _12
  _14 = landingpad `'try'`, _12

  %% Unique:
  %%    _12
  _15 = kill_try_tag _12
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% trycatch_SUITE.erl:1600
%% Counter = 7
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_trivial_1`() {
0:
  %% trycatch_SUITE.erl:1600
  _0 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% trycatch_SUITE.erl:1600
  %% Aliased:
  %%    _0
  %% Anno: #{thrown_type => any}
  _2 = call (`erlang`:`throw`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1602
%% Counter = 136
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_types`() {
0:
  br ^135

135:
  _56 = new_try_tag `'try'`
  br _56, ^55, ^53

55:
  %% trycatch_SUITE.erl:1605
  %% Result type:
  %%    none()
  _44 = call (`cst_types_1`/0)

  %% Aliased:
  %%    _44
  _57 = succeeded:body _44
  br ^53

53:
  %% Unique:
  %%    _56
  _86 = landingpad `'try'`, _56

  %% Aliased:
  %%    _86
  _3 = extract _86, `0`

  %% Aliased:
  %%    _86
  _2 = extract _86, `1`

  %% Aliased:
  %%    _86
  _1 = extract _86, `2`

  %% Unique:
  %%    _56
  _87 = kill_try_tag _56

  %% Argument types:
  %%    _3 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _3
  _84 = bif:'=:=' _3, `throw`
  br _84, ^83, ^59

83:
  %% trycatch_SUITE.erl:1607
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _4 = bif:is_atom _2
  br _4, ^69, ^110

110:
  %% trycatch_SUITE.erl:1608
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _5 = bif:is_bitstring _2
  br _5, ^69, ^111

111:
  %% trycatch_SUITE.erl:1609
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _6 = bif:is_binary _2
  br _6, ^69, ^112

112:
  %% trycatch_SUITE.erl:1610
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _7 = bif:is_float _2
  br _7, ^69, ^113

113:
  %% trycatch_SUITE.erl:1611
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _8 = bif:is_integer _2
  br _8, ^69, ^114

114:
  %% trycatch_SUITE.erl:1612
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _9 = bif:is_list _2
  br _9, ^69, ^115

115:
  %% trycatch_SUITE.erl:1613
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _10 = bif:is_map _2
  br _10, ^69, ^116

116:
  %% trycatch_SUITE.erl:1614
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _11 = bif:is_number _2
  br _11, ^69, ^117

117:
  %% trycatch_SUITE.erl:1615
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _12 = bif:is_tuple _2
  br _12, ^69, ^70

69:
  %% Result type:
  %%    'ok'
  ret `ok`

70:
  %% trycatch_SUITE.erl:1621
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _24 = bif:tuple_size _2

  %% Unique:
  %%    _24
  _81 = succeeded:guard _24
  br _81, ^81, ^59

81:
  %% Argument types:
  %%    _24 => 0..16777215
  %% Unique:
  %%    _24
  _82 = bif:'<' _24, `5`
  br _82, ^82, ^59

82:
  %% Result type:
  %%    'ok'
  ret `ok`

59:
  %% Aliased:
  %%    _1, 
  %%    _2
  _49 = resume _1, _2

  %% Unique:
  %%    _49
  _85 = succeeded:body _49
  br ^1

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% trycatch_SUITE.erl:1626
%% Counter = 7
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_types_1`() {
0:
  %% trycatch_SUITE.erl:1626
  _0 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% trycatch_SUITE.erl:1626
  %% Aliased:
  %%    _0
  %% Anno: #{thrown_type => any}
  _2 = call (`erlang`:`throw`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1628
%% Counter = 45
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_stacktrace`() {
0:
  br ^44

44:
  _15 = new_try_tag `'try'`
  br _15, ^14, ^12

14:
  %% trycatch_SUITE.erl:1631
  %% Result type:
  %%    none()
  _7 = call (`cst_stacktrace_1`/0)

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br ^12

12:
  %% Unique:
  %%    _15
  _24 = landingpad `'try'`, _15

  %% Aliased:
  %%    _24
  _3 = extract _24, `0`

  %% Aliased:
  %%    _24
  _2 = extract _24, `1`

  %% Aliased:
  %%    _24
  _1 = extract _24, `2`

  %% Unique:
  %%    _15
  _25 = kill_try_tag _15

  %% Argument types:
  %%    _3 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _3
  _22 = bif:'=:=' _3, `throw`
  br _22, ^21, ^18

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _20 = bif:'=:=' _2, `gurka`
  br _20, ^19, ^18

19:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% Aliased:
  %%    _1
  Stack = build_stacktrace _1

  %% trycatch_SUITE.erl:1636
  %% Aliased:
  %%    Stack
  _8 = call (`id`/1), Stack

  %% Aliased:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% trycatch_SUITE.erl:1640
%% Counter = 7
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_stacktrace_1`() {
0:
  %% trycatch_SUITE.erl:1640
  _0 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% trycatch_SUITE.erl:1640
  %% Aliased:
  %%    _0
  %% Anno: #{thrown_type => any}
  _2 = call (`erlang`:`throw`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1642
%% Counter = 44
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_raw`() {
0:
  br ^43

43:
  _15 = new_try_tag `'try'`
  br _15, ^14, ^12

14:
  %% trycatch_SUITE.erl:1645
  %% Result type:
  %%    none()
  _7 = call (`cst_raw_1`/0)

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br ^12

12:
  %% Unique:
  %%    _15
  _24 = landingpad `'try'`, _15

  %% Aliased:
  %%    _24
  _3 = extract _24, `0`

  %% Aliased:
  %%    _24
  _2 = extract _24, `1`

  %% Aliased:
  %%    _24
  _1 = extract _24, `2`

  %% Unique:
  %%    _15
  _25 = kill_try_tag _15

  %% Argument types:
  %%    _3 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _3
  _22 = bif:'=:=' _3, `throw`
  br _22, ^21, ^18

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _20 = bif:'=:=' _2, `gurka`
  br _20, ^19, ^18

19:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% Aliased:
  %%    _1
  _8 = raw_raise `error`, `dummy`, _1

  %% Unique:
  %%    _8
  _23 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% trycatch_SUITE.erl:1653
%% Counter = 7
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cst_raw_1`() {
0:
  %% trycatch_SUITE.erl:1653
  _0 = call (`id`/1), `gurka`

  %% Aliased:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% trycatch_SUITE.erl:1653
  %% Aliased:
  %%    _0
  %% Anno: #{thrown_type => any}
  _2 = call (`erlang`:`throw`/1), _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1656
%% Counter = 26
%% bs_ensure_opt: true
function `trycatch_SUITE`:`coverage_pre_codegen`() {
0:
  %% Result type:
  %%    'error'
  ret `error`
}

%% trycatch_SUITE.erl:1666
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42
function `trycatch_SUITE`:`do_plain_catch_list`(_0) {
0:
  br ^35

35:
  _11 = new_try_tag `'catch'`
  br _11, ^18, ^10

18:
  %% trycatch_SUITE.erl:1668
  _5 = call (`id`/1), `{a,"*"}`

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br _13, ^12, ^10

12:
  br ^8

10:
  %% Unique:
  %%    _11
  _16 = landingpad `'catch'`, _11

  %% Aliased:
  %%    _16
  _14 = extract _16, `0`
  br ^8

8:
  _17 = phi { _14, ^10 }, { _5, ^12 }

  %% Aliased:
  %%    _17
  %% Unique:
  %%    _11
  _3 = catch_end _11, _17
  %% Aliased:
  %%    _3
  ret _3
}

%% trycatch_SUITE.erl:1670
%% Counter = 25
%% bs_ensure_opt: true
function `trycatch_SUITE`:`cover_raise`(_0) {
0:
  %% trycatch_SUITE.erl:1671
  %% Result type:
  %%    'error' | 'undefined_class'
  %% Aliased:
  %%    _0
  UncertainClass = call (`uncertain_class`/1), _0

  %% Unique:
  %%    UncertainClass
  _11 = succeeded:body UncertainClass
  br _11, ^11, ^1

11:
  %% trycatch_SUITE.erl:1672
  %% Unique:
  %%    UncertainClass
  _5 = call (`erlang`:`raise`/3), UncertainClass, `reason`, `[]`

  %% Aliased:
  %%    _5
  _12 = succeeded:body _5
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _23 = bif:'=:=' _5, `badarg`
  br _23, ^22, ^14

22:
  %% trycatch_SUITE.erl:1673
  %% Result type:
  %%    'also_bad' | 'bad_class'
  %% Aliased:
  %%    _0
  BadClass = call (`bad_class`/1), _0

  %% Unique:
  %%    BadClass
  _15 = succeeded:body BadClass
  br _15, ^15, ^1

15:
  %% trycatch_SUITE.erl:1674
  %% Unique:
  %%    BadClass
  _6 = call (`erlang`:`raise`/3), BadClass, `reason`, `[]`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _20 = bif:'=:=' _6, `badarg`
  br _20, ^19, ^18

19:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% trycatch_SUITE.erl:1674
  %% Aliased:
  %%    _6
  _7 = match_fail `badmatch`, _6

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br ^1

14:
  %% trycatch_SUITE.erl:1672
  %% Aliased:
  %%    _5
  _8 = match_fail `badmatch`, _5

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% trycatch_SUITE.erl:1677
%% Counter = 8
%% bs_ensure_opt: true
function `trycatch_SUITE`:`uncertain_class`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:'=:=' _0, `[never_ever]`
  br _7, ^7, ^6

7:
  %% Result type:
  %%    'error'
  ret `error`

6:
  %% Result type:
  %%    'undefined_class'
  ret `undefined_class`
}

%% trycatch_SUITE.erl:1683
%% Counter = 8
%% bs_ensure_opt: true
function `trycatch_SUITE`:`bad_class`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:'=:=' _0, `[never_ever]`
  br _7, ^7, ^6

7:
  %% Result type:
  %%    'bad_class'
  ret `bad_class`

6:
  %% Result type:
  %%    'also_bad'
  ret `also_bad`
}

%% trycatch_SUITE.erl:1691
%% Counter = 104
%% bs_ensure_opt: true
function `trycatch_SUITE`:`throw_opt_funs`(_0) {
0:
  br ^102

102:
  _38 = new_try_tag `'try'`
  br _38, ^37, ^35

37:
  %% trycatch_SUITE.erl:1692
  _1 = call (`id`/1), `a`

  %% Aliased:
  %%    _1
  _39 = succeeded:body _1
  br _39, ^39, ^35

39:
  %% trycatch_SUITE.erl:1692
  %% Aliased:
  %%    _1
  _27 = call (`throw_opt_funs_1`/1), _1

  %% Aliased:
  %%    _27
  _40 = succeeded:body _27
  br _40, ^40, ^35

40:
  %% Unique:
  %%    _38
  _49 = kill_try_tag _38
  br ^36

35:
  %% Unique:
  %%    _38
  _47 = landingpad `'try'`, _38

  %% Aliased:
  %%    _47
  _5 = extract _47, `1`

  %% Unique:
  %%    _38
  _48 = kill_try_tag _38
  br ^68

68:
  %% trycatch_SUITE.erl:1695
  %% Aliased:
  %%    _5
  _21 = call (`id`/1), _5

  %% Aliased:
  %%    _21
  _41 = succeeded:body _21
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _45 = bif:'=:=' _21, `a`
  br _45, ^36, ^43

36:
  _8 = make_fun (`throw_opt_funs_1`/1)

  %% trycatch_SUITE.erl:1698
  %% Aliased:
  %%    _8
  F = call (`id`/1), _8

  %% Aliased:
  %%    F
  _50 = succeeded:body F
  br _50, ^101, ^1

101:
  br ^103

103:
  _55 = new_try_tag `'try'`
  br _55, ^54, ^52

54:
  %% trycatch_SUITE.erl:1700
  %% Argument types:
  %%    
  %% Aliased:
  %%    F
  _30 = call F, `a`

  %% Aliased:
  %%    _30
  _56 = succeeded:body _30
  br _56, ^56, ^52

56:
  %% Unique:
  %%    _55
  _65 = kill_try_tag _55
  br ^53

52:
  %% Aliased:
  %%    _55
  _63 = landingpad `'try'`, _55

  %% Aliased:
  %%    _63
  _12 = extract _63, `2`

  %% Aliased:
  %%    _55
  _64 = kill_try_tag _55

  %% Aliased:
  %%    _12
  Stack = build_stacktrace _12

  %% trycatch_SUITE.erl:1703
  %% Argument types:
  %%    
  %% Aliased:
  %%    Stack
  _15 = bif:length Stack

  %% Unique:
  %%    _15
  _57 = succeeded:body _15
  br _57, ^57, ^1

57:
  %% trycatch_SUITE.erl:1703
  %% Argument types:
  %%    _15 => 0..288230376151711743
  %% Unique:
  %%    _15
  _25 = bif:'>' _15, `0`
  br _25, ^53, ^59

53:
  %% Result type:
  %%    'ok'
  ret `ok`

59:
  %% trycatch_SUITE.erl:1703
  _31 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _31
  _62 = succeeded:body _31
  br ^1

43:
  %% trycatch_SUITE.erl:1695
  %% Aliased:
  %%    _21
  _28 = match_fail `badmatch`, _21

  %% Unique:
  %%    _28
  _46 = succeeded:body _28
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% trycatch_SUITE.erl:1708
%% Counter = 9
%% bs_ensure_opt: true
function `trycatch_SUITE`:`throw_opt_funs_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:'=:=' _0, `a`
  br _8, ^7, ^5

7:
  %% trycatch_SUITE.erl:1709
  %% Anno: #{thrown_type => {t_atom,[a]}}
  _2 = call (`erlang`:`throw`/1), `a`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3

5:
  %% Aliased:
  %%    _0
  ret _0
}

%% trycatch_SUITE.erl:1713
%% Counter = 4
%% bs_ensure_opt: true
function `trycatch_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `trycatch_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `trycatch_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `trycatch_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% trycatch_SUITE.erl:1473
%% Counter = 33
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-expression_export/1-fun-4-'`() {
0:
  %% Result type:
  %%    'bad'
  ret `bad`
}

%% trycatch_SUITE.erl:1472
%% Counter = 33
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-expression_export/1-fun-3-'`() {
0:
  %% Result type:
  %%    42
  ret `42`
}

%% trycatch_SUITE.erl:1471
%% Counter = 34
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-expression_export/1-fun-2-'`() {
0:
  %% trycatch_SUITE.erl:1471
  _30 = call (`erlang`:`error`/1), `failed`

  %% Aliased:
  %%    _30
  _33 = succeeded:body _30
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% trycatch_SUITE.erl:1470
%% Counter = 32
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-expression_export/1-fun-1-'`() {
0:
  %% Result type:
  %%    'pub'
  ret `pub`
}

%% trycatch_SUITE.erl:1469
%% Counter = 32
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-expression_export/1-fun-0-'`() {
0:
  %% Result type:
  %%    'bar'
  ret `bar`
}

%% trycatch_SUITE.erl:1314
%% Counter = 22
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-raise/1-fun-3-'`() {
0:
  %% trycatch_SUITE.erl:1314
  _5 = call (`id`/1), `x`

  %% Aliased:
  %%    _5
  _20 = succeeded:body _5
  br _20, ^20, ^1

20:
  %% trycatch_SUITE.erl:1314
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _17 = bif:abs _5

  %% Unique:
  %%    _17
  _21 = succeeded:body _17
  br _21, ^21, ^1

21:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _17
  ret _17

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% trycatch_SUITE.erl:1312
%% Counter = 19
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-raise/1-fun-2-'`() {
0:
  %% trycatch_SUITE.erl:1312
  %% Anno: #{thrown_type =>
                 {t_tuple,2,true,
                          #{1 => {t_atom,[was]},2 => {t_atom,[thrown]}}}}
  _15 = call (`erlang`:`throw`/1), `{was,thrown}`

  %% Aliased:
  %%    _15
  _18 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% trycatch_SUITE.erl:1311
%% Counter = 18
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-raise/1-fun-1-'`() {
0:
  %% trycatch_SUITE.erl:1311
  _2 = call (`id`/1), `x`

  %% Aliased:
  %%    _2
  _16 = succeeded:body _2
  br _16, ^16, ^1

16:
  %% trycatch_SUITE.erl:1311
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _13 = bif:abs _2

  %% Unique:
  %%    _13
  _17 = succeeded:body _13
  br _17, ^17, ^1

17:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _13
  ret _13

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% trycatch_SUITE.erl:1310
%% Counter = 15
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-raise/1-fun-0-'`() {
0:
  %% trycatch_SUITE.erl:1310
  _11 = call (`erlang`:`exit`/1), `{exit,tuple}`

  %% Unique:
  %%    _11
  _14 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% trycatch_SUITE.erl:1073
%% Counter = 20
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-catch_in_catch/1-fun-0-'`() {
0:
  %% trycatch_SUITE.erl:1074
  %% Result type:
  %%    'ignore'
  _14 = call (`catch_in_catch_init`/1), `x`

  %% Unique:
  %%    _14
  _18 = succeeded:body _14
  br _18, ^18, ^1

18:
  %% trycatch_SUITE.erl:1075
  _15 = call (`erlang`:`exit`/1), `good_exit`

  %% Unique:
  %%    _15
  _19 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% trycatch_SUITE.erl:1036
%% Counter = 25
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-hockey/0-fun-1-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% trycatch_SUITE.erl:1035
%% Counter = 21
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-hockey/0-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% trycatch_SUITE.erl:302
%% Counter = 79
%% bs_ensure_opt: true
%% Parameters
%%    _41 =>
%%     list('ok')
function `trycatch_SUITE`:`'-try_after_letrec/2-lc$^0/1-1-'`(_41) {
0:
  %% Aliased:
  %%    _41
  _74 = is_nonempty_list _41
  br _74, ^74, ^75

74:
  %% Argument types:
  %%    _41 => nonempty_list('ok')
  %% Aliased:
  %%    _41
  _48 = get_tl _41

  %% trycatch_SUITE.erl:302
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _48
  _67 = call (`'-try_after_letrec/2-lc$^0/1-1-'`/1), _48

  %% Unique:
  %%    _67
  _73 = succeeded:body _67
  br _73, ^73, ^1

73:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _67
  ret _67

1:
  _69 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _69

75:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% trycatch_SUITE.erl:302
%% Counter = 75
%% bs_ensure_opt: true
%% Parameters
%%    _14 =>
%%     list('ok')
function `trycatch_SUITE`:`'-try_after_letrec/2-lc$^0/1-0-'`(_14) {
0:
  %% Aliased:
  %%    _14
  _70 = is_nonempty_list _14
  br _70, ^70, ^71

70:
  %% Argument types:
  %%    _14 => nonempty_list('ok')
  %% Aliased:
  %%    _14
  _39 = get_tl _14

  %% trycatch_SUITE.erl:302
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _39
  _63 = call (`'-try_after_letrec/2-lc$^0/1-0-'`/1), _39

  %% Unique:
  %%    _63
  _69 = succeeded:body _63
  br _69, ^69, ^1

69:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _63
  ret _63

1:
  _65 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _65

71:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% trycatch_SUITE.erl:283
%% Counter = 73
%% bs_ensure_opt: true
function `trycatch_SUITE`:`'-try_after_complex/2-after$^0/0-0-'`(_1) {
0:
  %% trycatch_SUITE.erl:283
  %% Argument types:
  %%    
  _29 = bif:get `try_after`
  switch _29, ^50, [
    { `unreachable_0`, ^61 },
    { `unreachable_1`, ^62 },
    { `unreachable_2`, ^63 },
    { `unreachable_3`, ^64 },
    { `unreachable_4`, ^65 },
    { `unreachable_5`, ^66 },
    { `unreachable_6`, ^67 },
    { `unreachable_7`, ^68 },
    { `unreachable_8`, ^69 },
    { `unreachable_9`, ^70 }
  ]

70:
  %% trycatch_SUITE.erl:293
  _35 = call (`dummy`:`unreachable_9`/0)

  %% Aliased:
  %%    _35
  _60 = succeeded:body _35
  br _60, ^49, ^1

69:
  %% trycatch_SUITE.erl:292
  _36 = call (`dummy`:`unreachable_8`/0)

  %% Aliased:
  %%    _36
  _59 = succeeded:body _36
  br _59, ^49, ^1

68:
  %% trycatch_SUITE.erl:291
  _37 = call (`dummy`:`unreachable_7`/0)

  %% Aliased:
  %%    _37
  _58 = succeeded:body _37
  br _58, ^49, ^1

67:
  %% trycatch_SUITE.erl:290
  _38 = call (`dummy`:`unreachable_6`/0)

  %% Aliased:
  %%    _38
  _57 = succeeded:body _38
  br _57, ^49, ^1

66:
  %% trycatch_SUITE.erl:289
  _39 = call (`dummy`:`unreachable_5`/0)

  %% Aliased:
  %%    _39
  _56 = succeeded:body _39
  br _56, ^49, ^1

65:
  %% trycatch_SUITE.erl:288
  _40 = call (`dummy`:`unreachable_4`/0)

  %% Aliased:
  %%    _40
  _55 = succeeded:body _40
  br _55, ^49, ^1

64:
  %% trycatch_SUITE.erl:287
  _41 = call (`dummy`:`unreachable_3`/0)

  %% Aliased:
  %%    _41
  _54 = succeeded:body _41
  br _54, ^49, ^1

63:
  %% trycatch_SUITE.erl:286
  _42 = call (`dummy`:`unreachable_2`/0)

  %% Aliased:
  %%    _42
  _53 = succeeded:body _42
  br _53, ^49, ^1

62:
  %% trycatch_SUITE.erl:285
  _43 = call (`dummy`:`unreachable_1`/0)

  %% Aliased:
  %%    _43
  _52 = succeeded:body _43
  br _52, ^49, ^1

61:
  %% trycatch_SUITE.erl:284
  _44 = call (`dummy`:`unreachable_0`/0)

  %% Aliased:
  %%    _44
  _51 = succeeded:body _44
  br _51, ^49, ^1

50:
  %% trycatch_SUITE.erl:294
  %% Aliased:
  %%    _1
  _45 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _45
  _71 = succeeded:body _45
  br _71, ^49, ^1

49:
  %% trycatch_SUITE.erl:295
  %% Aliased:
  %%    _1
  _46 = call (`erlang`:`put`/2), `try_after`, _1

  %% Aliased:
  %%    _46
  _72 = succeeded:body _46
  br _72, ^72, ^1

72:
  %% Aliased:
  %%    _46
  ret _46

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}
