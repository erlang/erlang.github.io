module fun_SUITE.
exports [{all,0},
         {badarity,1},
         {badfun,1},
         {bif_fun,1},
         {call_me,1},
         {coverage,1},
         {dup1,0},
         {dup2,0},
         {duplicated_fun,1},
         {eep37,1},
         {end_per_group,2},
         {end_per_suite,1},
         {external,1},
         {groups,0},
         {init_per_group,2},
         {init_per_suite,1},
         {leaky_environment,1},
         {module_info,0},
         {module_info,1},
         {otp_7202,1},
         {overwritten_fun,1},
         {parallel_scopes,1},
         {suite,0},
         {test1,1},
         {unused_fun,1}].
attributes [].

%% fun_SUITE.erl:34
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% fun_SUITE.erl:36
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% fun_SUITE.erl:39
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [test1,overwritten_fun,otp_7202,bif_fun,external,eep37,badarity,badfun,
      duplicated_fun,unused_fun,parallel_scopes,coverage,leaky_environment]}]`
}

%% fun_SUITE.erl:46
%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`init_per_suite`(_0) {
0:
  %% fun_SUITE.erl:47
  _2 = call (`test_lib`:`recompile`/1), `fun_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% fun_SUITE.erl:50
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% fun_SUITE.erl:53
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% fun_SUITE.erl:56
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% fun_SUITE.erl:63
%% Counter = 99
%% bs_ensure_opt: true
function `fun_SUITE`:`l1`() {
0:
  br ^98

98:
  _61 = new_try_tag `'catch'`
  br _61, ^59, ^60

59:
  %% fun_SUITE.erl:66
  %% Result type:
  %%    none()
  %% Argument types:
  %%    (`'-l1/0-fun-4-'`/1) => fun((_) -> none())
  _50 = call (`'-l1/0-fun-4-'`/1), `2`

  %% Aliased:
  %%    _50
  _63 = succeeded:body _50
  br ^60

60:
  %% Unique:
  %%    _61
  _66 = landingpad `'catch'`, _61

  %% Aliased:
  %%    _66
  _64 = extract _66, `0`
  br ^58

58:
  %% Aliased:
  %%    _64
  %% Unique:
  %%    _61
  _21 = catch_end _61, _64

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _73 = is_tagged_tuple _21, `2`, `'EXIT'`
  br _73, ^79, ^69

79:
  %% Result type:
  %%    number()
  _38 = make_fun (`'-l1/0-fun-2-'`/2)

  %% fun_SUITE.erl:67
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-l1/0-fun-2-'`/2) => fun((_, _) -> number())
  %%    _38 => fun((_, _) -> number())
  %% Aliased:
  %%    _38
  _17 = call (`'-l1/0-fun-2-'`/2), _38, `5`

  %% Unique:
  %%    _17
  _77 = succeeded:body _17
  br _77, ^77, ^1

77:
  %% Result type:
  %%    number()
  _41 = make_fun (`'-l1/0-fun-0-'`/2)

  %% fun_SUITE.erl:68
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-l1/0-fun-0-'`/2) => fun((_, _) -> number())
  %%    _41 => fun((_, _) -> number())
  %% Aliased:
  %%    _41
  _54 = call (`'-l1/0-fun-0-'`/2), _41, `1`

  %% Unique:
  %%    _54
  _78 = succeeded:body _54
  br _78, ^78, ^1

78:
  %% Argument types:
  %%    _17 => number()
  %% Unique:
  %%    _17
  _44 = put_tuple _17, `"( begin F = fun ( _ , 1 ) -> 1 ; ( F , N ) -> N * F ( F , N - 1 ) end , F ( F , 5 ) end )"`, `120`

  %% Argument types:
  %%    _44 => {number(), nonempty_list(32..117), 120}
  %% Unique:
  %%    _44
  _45 = put_list _44, `[{ok,"( begin F = fun ( _ , 1 ) -> 1 ; ( F , N ) -> N * F ( F , N - 1 ) end , F ( F , 1 ) , ok end )",
      ok}]`

  %% Argument types:
  %%    _45 => nonempty_list({'ok' | number(), nonempty_list(32..117), 'ok' | 120})
  %% Unique:
  %%    _45
  _47 = put_list `{ok,"( begin G = fun ( 1 = 0 ) -> ok end , { 'EXIT' , _ } = ( catch G ( 2 ) ) , ok end )",
     ok}`, _45

  %% Argument types:
  %%    _47 => nonempty_list({'ok' | number(), nonempty_list(32..125), 'ok' | 120})
  %% Unique:
  %%    _47
  _55 = put_list `{1,"( begin _A = 3 , F = fun ( _A ) -> 1 ; ( _ ) -> 2 end , F ( 2 ) end )",1}`, _47
  %% Result type:
  %%    nonempty_list({'ok' | number(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _55
  ret _55

69:
  %% fun_SUITE.erl:66
  %% Aliased:
  %%    _21
  _51 = match_fail `badmatch`, _21

  %% Unique:
  %%    _51
  _76 = succeeded:body _51
  br ^1

1:
  _56 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _56
}

%% fun_SUITE.erl:71
%% Counter = 16
%% bs_ensure_opt: true
function `fun_SUITE`:`test1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  _3 = make_fun (`one_test`/1)

  %% fun_SUITE.erl:72
  %% Result type:
  %%    nonempty_list({'ok' | number(), nonempty_list(32..125), 'ok' | 1..120})
  _1 = call (`l1`/0)

  %% Unique:
  %%    _1
  _11 = succeeded:body _1
  br _11, ^11, ^1

11:
  %% fun_SUITE.erl:72
  %% Result type:
  %%    nonempty_list({'ok' | number(), any(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _1
  _2 = call (`eval_list`/2), _1, `[]`

  %% Unique:
  %%    _2
  _12 = succeeded:body _2
  br _12, ^12, ^1

12:
  %% fun_SUITE.erl:72
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _2
  _5 = call (`lists`:`foreach`/2), _3, _2

  %% Aliased:
  %%    _5
  _13 = succeeded:body _5
  br _13, ^13, ^1

13:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% fun_SUITE.erl:71
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-test1/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _14 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% fun_SUITE.erl:75
%% Counter = 61
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(32..125)
%%    _1 =>
%%     nil()
function `fun_SUITE`:`evaluate`(_0, _1) {
0:
  %% fun_SUITE.erl:77
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`'++'`/2), _0, `" . "`

  %% fun_SUITE.erl:77
  %% Aliased:
  %%    _2
  _10 = call (`erl_scan`:`string`/1), _2

  %% Aliased:
  %%    _10
  _29 = succeeded:body _10
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _57 = is_tagged_tuple _10, `3`, `ok`
  br _57, ^54, ^31

54:
  %% Argument types:
  %%    _10 => {'ok', any(), any()}
  %% Aliased:
  %%    _10
  _12 = get_tuple_element _10, `1`

  %% fun_SUITE.erl:78
  %% Aliased:
  %%    _12
  _14 = call (`erl_parse`:`parse_exprs`/1), _12

  %% Aliased:
  %%    _14
  _32 = succeeded:body _14
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _50 = is_tagged_tuple _14, `2`, `ok`
  br _50, ^47, ^34

47:
  %% Argument types:
  %%    _14 => {'ok', any()}
  %% Aliased:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% Aliased:
  %%    _15
  _46 = is_nonempty_list _15
  br _46, ^46, ^34

46:
  %% Argument types:
  %%    _15 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _15
  _18 = get_hd _15

  %% Argument types:
  %%    _15 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _15
  _17 = get_tl _15

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _45 = bif:'=:=' _17, `[]`
  br _45, ^45, ^34

45:
  %% fun_SUITE.erl:79
  %% Aliased:
  %%    _18
  _19 = call (`erl_eval`:`expr`/2), _18, `[]`

  %% Aliased:
  %%    _19
  _35 = succeeded:body _19
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _41 = is_tagged_tuple _19, `3`, `value`
  br _41, ^38, ^37

38:
  %% Argument types:
  %%    _19 => {'value', any(), any()}
  %% Aliased:
  %%    _19
  _21 = get_tuple_element _19, `1`
  %% Aliased:
  %%    _21
  ret _21

37:
  %% fun_SUITE.erl:79
  %% Aliased:
  %%    _19
  _23 = match_fail `case_clause`, _19

  %% Unique:
  %%    _23
  _44 = succeeded:body _23
  br ^1

34:
  %% fun_SUITE.erl:78
  %% Aliased:
  %%    _14
  _24 = match_fail `badmatch`, _14

  %% Unique:
  %%    _24
  _53 = succeeded:body _24
  br ^1

31:
  %% fun_SUITE.erl:76
  %% Aliased:
  %%    _10
  _25 = match_fail `badmatch`, _10

  %% Unique:
  %%    _25
  _60 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% fun_SUITE.erl:84
%% Counter = 57
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list({'ok' | number(), nonempty_list(32..125), 'ok' | 1..120})
%%    _1 =>
%%     nil()
function `fun_SUITE`:`eval_list`(_0, _1) {
0:
  %% Unique:
  %%    _0
  _53 = is_nonempty_list _0
  br _53, ^53, ^54

53:
  %% Argument types:
  %%    _0 => nonempty_list({'ok' | number(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _0
  _8 = get_hd _0

  %% Argument types:
  %%    _0 => nonempty_list({'ok' | number(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _0
  _7 = get_tl _0

  %% Argument types:
  %%    _8 => {'ok' | number(), nonempty_list(32..125), 'ok' | 1..120}
  %% Unique:
  %%    _8
  _10 = get_tuple_element _8, `1`
  _31 = new_try_tag `'catch'`
  br _31, ^29, ^30

29:
  %% fun_SUITE.erl:87
  %% Aliased:
  %%    _10
  _19 = call (`evaluate`/2), _10, _1

  %% Aliased:
  %%    _19
  _33 = succeeded:body _19
  br _33, ^33, ^30

33:
  br ^28

30:
  %% Unique:
  %%    _31
  _36 = landingpad `'catch'`, _31

  %% Aliased:
  %%    _36
  _34 = extract _36, `0`
  br ^28

28:
  _37 = phi { _34, ^30 }, { _19, ^33 }

  %% Aliased:
  %%    _37
  %% Unique:
  %%    _31
  _2 = catch_end _31, _37

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _45 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _45, ^42, ^39

42:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _13 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _15 = put_list _13, `[]`

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Unique:
  %%    _15
  _16 = put_list `[]`, _15

  %% Argument types:
  %%    _10 => nonempty_list(32..125)
  %%    _16 => nonempty_list(any())
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _16
  _17 = put_list _10, _16

  %% fun_SUITE.erl:89
  %% Unique:
  %%    _17
  _20 = call (`io`:`format`/2), `"Evaluation error: ~p, ~p, ~p~n"`, _17

  %% Aliased:
  %%    _20
  _40 = succeeded:body _20
  br _40, ^40, ^1

40:
  %% fun_SUITE.erl:90
  %% Aliased:
  %%    _13
  _21 = call (`erlang`:`exit`/1), _13

  %% Unique:
  %%    _21
  _41 = succeeded:body _21
  br ^1

39:
  %% fun_SUITE.erl:92
  %% Result type:
  %%    list({'ok' | number(), any(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _7
  _3 = call (`eval_list`/2), _7, `[]`

  %% Unique:
  %%    _3
  _48 = succeeded:body _3
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    _8 => {'ok' | number(), nonempty_list(32..125), 'ok' | 1..120}
  %% Unique:
  %%    _8
  _11 = get_tuple_element _8, `0`

  %% Argument types:
  %%    _8 => {'ok' | number(), nonempty_list(32..125), 'ok' | 1..120}
  %% Unique:
  %%    _8
  _9 = get_tuple_element _8, `2`

  %% Argument types:
  %%    _11 => 'ok' | number()
  %%    _10 => nonempty_list(32..125)
  %%    _9 => 'ok' | 1..120
  %% Aliased:
  %%    _2, 
  %%    _10
  %% Unique:
  %%    _9, 
  %%    _11
  _12 = put_tuple _11, _2, _10, _9

  %% Argument types:
  %%    _12 => {'ok' | number(), any(), nonempty_list(32..125), 'ok' | 1..120}
  %%    _3 => list({'ok' | number(), any(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _3, 
  %%    _12
  _22 = put_list _12, _3
  %% Result type:
  %%    nonempty_list({'ok' | number(), any(), nonempty_list(32..125), 'ok' | 1..120})
  %% Unique:
  %%    _22
  ret _22

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24

54:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% fun_SUITE.erl:95
%% Counter = 42
%% bs_ensure_opt: true
function `fun_SUITE`:`one_test`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _35 = bif:is_tuple _0
  br _35, ^35, ^22

35:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _36 = bif:tuple_size _0

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `4`
  br _37, ^34, ^22

34:
  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `2`

  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _2 = get_tuple_element _0, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _6 = put_list _2, `[]`

  %% Argument types:
  %%    _6 => nonempty_list(any())
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _6
  _7 = put_list _3, _6

  %% fun_SUITE.erl:96
  %% Unique:
  %%    _7
  _14 = call (`io`:`format`/2), `"  ~s, ~p~n"`, _7

  %% Aliased:
  %%    _14
  _23 = succeeded:body _14
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _5 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _5
  _26 = bif:'==' _5, _2
  br _26, ^24, ^25

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _8 = put_list _5, `[]`

  %% Argument types:
  %%    _8 => nonempty_list(any())
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _8
  _9 = put_list _2, _8

  %% Argument types:
  %%    _9 => nonempty_list(any())
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _9
  _10 = put_list _3, _9

  %% fun_SUITE.erl:101
  %% Unique:
  %%    _10
  _15 = call (`io`:`format`/2), `"ERROR: Compiled: ~p. Expected ~p. Got ~p.~n"`, _10

  %% Aliased:
  %%    _15
  _27 = succeeded:body _15
  br _27, ^27, ^1

27:
  %% fun_SUITE.erl:103
  _16 = call (`ct`:`fail`/1), `comp`

  %% Aliased:
  %%    _16
  _28 = succeeded:body _16
  br _28, ^24, ^1

24:
  %% Argument types:
  %%    _0 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _0
  _4 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _4
  _31 = bif:'==' _4, _2
  br _31, ^31, ^30

31:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _11 = put_list _4, `[]`

  %% Argument types:
  %%    _11 => nonempty_list(any())
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _11
  _12 = put_list _2, _11

  %% Argument types:
  %%    _12 => nonempty_list(any())
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _12
  _13 = put_list _3, _12

  %% fun_SUITE.erl:109
  %% Unique:
  %%    _13
  _17 = call (`io`:`format`/2), `"ERROR: Interpreted: ~p. Expected ~p. Got ~p.~n"`, _13

  %% Aliased:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% fun_SUITE.erl:111
  _18 = call (`ct`:`fail`/1), `comp`

  %% Aliased:
  %%    _18
  _33 = succeeded:body _18
  br _33, ^33, ^1

33:
  %% Aliased:
  %%    _18
  ret _18

22:
  %% fun_SUITE.erl:95
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-one_test/1-',1}}
  _19 = match_fail `function_clause`, _0

  %% Unique:
  %%    _19
  _38 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% fun_SUITE.erl:118
%% Counter = 33
%% bs_ensure_opt: true
function `fun_SUITE`:`overwritten_fun`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_list _0
  br _15, ^15, ^14

15:
  %% fun_SUITE.erl:119
  %% Result type:
  %%    {'a2', 'a' | {'b', 'c' | nil()}}
  _5 = call (`overwritten_fun_1`/1), `a`

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _5 => {'a2', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _5
  _30 = bif:'=:=' _5, `{a2,a}`
  br _30, ^30, ^18

30:
  %% fun_SUITE.erl:120
  %% Result type:
  %%    {'a2', 'a' | {'b', 'c' | nil()}}
  _6 = call (`overwritten_fun_1`/1), `{b,c}`

  %% Unique:
  %%    _6
  _19 = succeeded:body _6
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _6 => {'a2', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _6
  _28 = bif:'=:=' _6, `{a2,{b,c}}`
  br _28, ^28, ^21

28:
  %% fun_SUITE.erl:121
  %% Result type:
  %%    'one' | {'a2', 'a' | {'b', 'c' | nil()}}
  _7 = call (`overwritten_fun_1`/1), `{b,[]}`

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    _7 => 'one' | {'a2', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _7
  _26 = bif:'=:=' _7, `one`
  br _26, ^25, ^24

25:
  %% Result type:
  %%    'ok'
  ret `ok`

24:
  %% fun_SUITE.erl:121
  %% Unique:
  %%    _7
  _8 = match_fail `badmatch`, _7

  %% Unique:
  %%    _8
  _27 = succeeded:body _8
  br ^1

21:
  %% fun_SUITE.erl:120
  %% Unique:
  %%    _6
  _9 = match_fail `badmatch`, _6

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br ^1

18:
  %% fun_SUITE.erl:119
  %% Unique:
  %%    _5
  _10 = match_fail `badmatch`, _5

  %% Unique:
  %%    _10
  _31 = succeeded:body _10
  br ^1

14:
  %% fun_SUITE.erl:118
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-overwritten_fun/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% fun_SUITE.erl:124
%% Counter = 54
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | {'b', 'c' | nil()}
function `fun_SUITE`:`overwritten_fun_1`(_0) {
0:
  %% Argument types:
  %%    _0 => 'a' | {'b', 'c' | nil()}
  %% Unique:
  %%    _0
  _29 = bif:is_tuple _0
  br _29, ^49, ^23

49:
  %% fun_SUITE.erl:128
  %% Argument types:
  %%    _0 => {'b', 'c' | nil()}
  %% Unique:
  %%    _0
  _6 = get_tuple_element _0, `1`

  %% fun_SUITE.erl:128
  %% Argument types:
  %%    _6 => 'c' | nil()
  %% Unique:
  %%    _6
  _7 = bif:'=:=' _6, `[]`
  br _7, ^38, ^23

38:
  %% Result type:
  %%    'one'
  ret `one`

23:
  %% fun_SUITE.erl:131
  %% Result type:
  %%    {'ok', 'a' | {'b', 'c' | nil()}}
  %% Argument types:
  %%    (`'-overwritten_fun_1/1-fun-0-'`/1) => fun(() -> {'ok', 'a' | {'b', 'c' | nil()}})
  %% Unique:
  %%    _0
  _14 = call (`'-overwritten_fun_1/1-fun-0-'`/1), _0

  %% Unique:
  %%    _14
  _39 = succeeded:body _14
  br _39, ^42, ^1

42:
  %% Argument types:
  %%    _14 => {'ok', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _14
  _15 = get_tuple_element _14, `1`

  %% Argument types:
  %%    _15 => 'a' | {'b', 'c' | nil()}
  %% Unique:
  %%    _15
  _19 = put_tuple `a2`, _15
  %% Result type:
  %%    {'a2', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% fun_SUITE.erl:141
%% Counter = 10
%% bs_ensure_opt: true
function `fun_SUITE`:`otp_7202`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _7 = bif:is_list _0
  br _7, ^7, ^6

7:
  %% fun_SUITE.erl:142
  _2 = call (`otp_7202`/0)

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _2
  ret _2

6:
  %% fun_SUITE.erl:141
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-otp_7202/1-',1}}
  _3 = match_fail `function_clause`, _0

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% fun_SUITE.erl:144
%% Counter = 32
%% bs_ensure_opt: true
function `fun_SUITE`:`otp_7202`() {
0:
  %% fun_SUITE.erl:146
  %% Result type:
  %%    'no_value'
  _8 = call (`otp_7202_func`/0)

  %% Unique:
  %%    _8
  _16 = succeeded:body _8
  br _16, ^30, ^1

30:
  %% Result type:
  %%    'ok'
  _7 = make_fun (`'-otp_7202/0-fun-0-'`/2), `true`

  %% fun_SUITE.erl:150
  %% Aliased:
  %%    _7
  _13 = call (`lists`:`foreach`/2), _7, `[a]`

  %% Aliased:
  %%    _13
  _29 = succeeded:body _13
  br _29, ^29, ^1

29:
  %% Aliased:
  %%    _13
  ret _13

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% fun_SUITE.erl:159
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`otp_7202_func`() {
0:
  %% Result type:
  %%    'no_value'
  ret `no_value`
}

%% fun_SUITE.erl:162
%% Counter = 23
%% bs_ensure_opt: true
function `fun_SUITE`:`bif_fun`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _14 = bif:is_list _0
  br _14, ^22, ^13

22:
  %% fun_SUITE.erl:164
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-bif_fun/1-fun-0-'`/1) => fun((_) -> number(0, '+inf'))
  _7 = call (`'-bif_fun/1-fun-0-'`/1), `-5`

  %% Unique:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _7 => number(0, '+inf')
  %% Unique:
  %%    _7
  _19 = bif:'=:=' _7, `5`
  br _19, ^18, ^17

18:
  %% Result type:
  %%    'ok'
  ret `ok`

17:
  %% fun_SUITE.erl:164
  %% Unique:
  %%    _7
  _9 = match_fail `badmatch`, _7

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br ^1

13:
  %% fun_SUITE.erl:162
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bif_fun/1-',1}}
  _10 = match_fail `function_clause`, _0

  %% Unique:
  %%    _10
  _21 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% fun_SUITE.erl:176
%% Counter = 567
%% bs_ensure_opt: true
function `fun_SUITE`:`external`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _293 = bif:is_list _0
  br _293, ^293, ^292

293:
  %% fun_SUITE.erl:177
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  Mod = call (`id`/1), `fun_SUITE`

  %% Aliased:
  %%    Mod
  _294 = succeeded:body Mod
  br _294, ^294, ^1

294:
  %% fun_SUITE.erl:178
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  Func = call (`id`/1), `call_me`

  %% Aliased:
  %%    Func
  _295 = succeeded:body Func
  br _295, ^295, ^1

295:
  %% fun_SUITE.erl:179
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  Arity = call (`id`/1), `1`

  %% Aliased:
  %%    Arity
  _296 = succeeded:body Arity
  br _296, ^296, ^1

296:
  %% fun_SUITE.erl:181
  _190 = call (`fun_SUITE`:`call_me`/1), `{a,b}`

  %% Aliased:
  %%    _190
  _297 = succeeded:body _190
  br _297, ^297, ^1

297:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _190
  _300 = bif:'=:=' _190, `{ok,{a,b}}`
  br _300, ^484, ^299

484:
  %% fun_SUITE.erl:182
  %% Aliased:
  %%    Arity
  _13 = call (`erlang`:`make_fun`/3), `fun_SUITE`, `call_me`, Arity

  %% Aliased:
  %%    _13
  _302 = succeeded:body _13
  br _302, ^302, ^1

302:
  %% fun_SUITE.erl:182
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-1-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _13 => fun()
  %% Aliased:
  %%    _13
  _237 = call (`'-external/1-fun-1-'`/1), _13

  %% Aliased:
  %%    _237
  _303 = succeeded:body _237
  br _303, ^485, ^1

485:
  %% fun_SUITE.erl:183
  %% Aliased:
  %%    Func
  _18 = call (`erlang`:`make_fun`/3), `fun_SUITE`, Func, `1`

  %% Aliased:
  %%    _18
  _304 = succeeded:body _18
  br _304, ^304, ^1

304:
  %% fun_SUITE.erl:183
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-2-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _18 => fun((_))
  %% Aliased:
  %%    _18
  _239 = call (`'-external/1-fun-2-'`/1), _18

  %% Aliased:
  %%    _239
  _305 = succeeded:body _239
  br _305, ^486, ^1

486:
  %% fun_SUITE.erl:184
  %% Aliased:
  %%    Arity, 
  %%    Func
  _23 = call (`erlang`:`make_fun`/3), `fun_SUITE`, Func, Arity

  %% Aliased:
  %%    _23
  _306 = succeeded:body _23
  br _306, ^306, ^1

306:
  %% fun_SUITE.erl:184
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-3-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _23 => fun()
  %% Aliased:
  %%    _23
  _241 = call (`'-external/1-fun-3-'`/1), _23

  %% Aliased:
  %%    _241
  _307 = succeeded:body _241
  br _307, ^487, ^1

487:
  %% fun_SUITE.erl:185
  %% Aliased:
  %%    Mod
  _28 = call (`erlang`:`make_fun`/3), Mod, `call_me`, `1`

  %% Aliased:
  %%    _28
  _308 = succeeded:body _28
  br _308, ^308, ^1

308:
  %% fun_SUITE.erl:185
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-4-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _28 => fun((_))
  %% Aliased:
  %%    _28
  _243 = call (`'-external/1-fun-4-'`/1), _28

  %% Aliased:
  %%    _243
  _309 = succeeded:body _243
  br _309, ^488, ^1

488:
  %% fun_SUITE.erl:186
  %% Aliased:
  %%    Arity, 
  %%    Mod
  _33 = call (`erlang`:`make_fun`/3), Mod, `call_me`, Arity

  %% Aliased:
  %%    _33
  _310 = succeeded:body _33
  br _310, ^310, ^1

310:
  %% fun_SUITE.erl:186
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-5-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _33 => fun()
  %% Aliased:
  %%    _33
  _245 = call (`'-external/1-fun-5-'`/1), _33

  %% Aliased:
  %%    _245
  _311 = succeeded:body _245
  br _311, ^489, ^1

489:
  %% fun_SUITE.erl:187
  %% Aliased:
  %%    Func, 
  %%    Mod
  _38 = call (`erlang`:`make_fun`/3), Mod, Func, `1`

  %% Aliased:
  %%    _38
  _312 = succeeded:body _38
  br _312, ^312, ^1

312:
  %% fun_SUITE.erl:187
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-6-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _38 => fun((_))
  %% Aliased:
  %%    _38
  _247 = call (`'-external/1-fun-6-'`/1), _38

  %% Aliased:
  %%    _247
  _313 = succeeded:body _247
  br _313, ^490, ^1

490:
  %% fun_SUITE.erl:188
  %% Aliased:
  %%    Arity, 
  %%    Func, 
  %%    Mod
  _43 = call (`erlang`:`make_fun`/3), Mod, Func, Arity

  %% Aliased:
  %%    _43
  _314 = succeeded:body _43
  br _314, ^314, ^1

314:
  %% fun_SUITE.erl:188
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Argument types:
  %%    (`'-external/1-fun-7-'`/1) => fun((_) -> {'ok', {'a', 'b'}})
  %%    _43 => fun()
  %% Aliased:
  %%    _43
  _249 = call (`'-external/1-fun-7-'`/1), _43

  %% Aliased:
  %%    _249
  _315 = succeeded:body _249
  br _315, ^315, ^1

315:
  %% fun_SUITE.erl:190
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  ListsMod = call (`id`/1), `lists`

  %% Aliased:
  %%    ListsMod
  _316 = succeeded:body ListsMod
  br _316, ^316, ^1

316:
  %% fun_SUITE.erl:191
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  ListsMap = call (`id`/1), `map`

  %% Aliased:
  %%    ListsMap
  _317 = succeeded:body ListsMap
  br _317, ^317, ^1

317:
  %% fun_SUITE.erl:192
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  ListsArity = call (`id`/1), `2`

  %% Aliased:
  %%    ListsArity
  _318 = succeeded:body ListsArity
  br _318, ^318, ^1

318:
  Id = make_fun (`'-external/1-fun-8-'`/1)

  %% fun_SUITE.erl:194
  %% Aliased:
  %%    Id
  _191 = call (`lists`:`map`/2), Id, `[x,y]`

  %% Aliased:
  %%    _191
  _319 = succeeded:body _191
  br _319, ^319, ^1

319:
  %% Argument types:
  %%    _191 => nonempty_list(any())
  %% Aliased:
  %%    _191
  _322 = bif:'=:=' _191, `[x,y]`
  br _322, ^322, ^321

322:
  %% fun_SUITE.erl:194
  _192 = call (`erlang`:`fun_info`/2), `fun lists:map/2`, `type`

  %% Aliased:
  %%    _192
  _323 = succeeded:body _192
  br _323, ^323, ^1

323:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _192
  _326 = bif:'=:=' _192, `{type,external}`
  br _326, ^492, ^325

492:
  %% fun_SUITE.erl:195
  %% Aliased:
  %%    ListsArity
  _66 = call (`erlang`:`make_fun`/3), `lists`, `map`, ListsArity

  %% Aliased:
  %%    _66
  _329 = succeeded:body _66
  br _329, ^329, ^1

329:
  %% fun_SUITE.erl:195
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-11-'`/1) => fun((_) -> {'type', 'external'})
  %%    _66 => fun()
  %% Aliased:
  %%    _66
  _254 = call (`'-external/1-fun-11-'`/1), _66

  %% Aliased:
  %%    _254
  _330 = succeeded:body _254
  br _330, ^493, ^1

493:
  %% fun_SUITE.erl:196
  %% Aliased:
  %%    ListsMap
  _76 = call (`erlang`:`make_fun`/3), `lists`, ListsMap, `2`

  %% Aliased:
  %%    _76
  _331 = succeeded:body _76
  br _331, ^331, ^1

331:
  %% fun_SUITE.erl:196
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-13-'`/1) => fun((_) -> {'type', 'external'})
  %%    _76 => fun((_, _))
  %% Aliased:
  %%    _76
  _257 = call (`'-external/1-fun-13-'`/1), _76

  %% Aliased:
  %%    _257
  _332 = succeeded:body _257
  br _332, ^494, ^1

494:
  %% fun_SUITE.erl:197
  %% Aliased:
  %%    ListsArity, 
  %%    ListsMap
  _86 = call (`erlang`:`make_fun`/3), `lists`, ListsMap, ListsArity

  %% Aliased:
  %%    _86
  _333 = succeeded:body _86
  br _333, ^333, ^1

333:
  %% fun_SUITE.erl:197
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-15-'`/1) => fun((_) -> {'type', 'external'})
  %%    _86 => fun()
  %% Aliased:
  %%    _86
  _260 = call (`'-external/1-fun-15-'`/1), _86

  %% Aliased:
  %%    _260
  _334 = succeeded:body _260
  br _334, ^495, ^1

495:
  %% fun_SUITE.erl:198
  %% Aliased:
  %%    ListsMod
  _96 = call (`erlang`:`make_fun`/3), ListsMod, `map`, `2`

  %% Aliased:
  %%    _96
  _335 = succeeded:body _96
  br _335, ^335, ^1

335:
  %% fun_SUITE.erl:198
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-17-'`/1) => fun((_) -> {'type', 'external'})
  %%    _96 => fun((_, _))
  %% Aliased:
  %%    _96
  _263 = call (`'-external/1-fun-17-'`/1), _96

  %% Aliased:
  %%    _263
  _336 = succeeded:body _263
  br _336, ^496, ^1

496:
  %% fun_SUITE.erl:199
  %% Aliased:
  %%    ListsArity, 
  %%    ListsMod
  _106 = call (`erlang`:`make_fun`/3), ListsMod, `map`, ListsArity

  %% Aliased:
  %%    _106
  _337 = succeeded:body _106
  br _337, ^337, ^1

337:
  %% fun_SUITE.erl:199
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-19-'`/1) => fun((_) -> {'type', 'external'})
  %%    _106 => fun()
  %% Aliased:
  %%    _106
  _266 = call (`'-external/1-fun-19-'`/1), _106

  %% Aliased:
  %%    _266
  _338 = succeeded:body _266
  br _338, ^497, ^1

497:
  %% fun_SUITE.erl:200
  %% Aliased:
  %%    ListsMap, 
  %%    ListsMod
  _116 = call (`erlang`:`make_fun`/3), ListsMod, ListsMap, `2`

  %% Aliased:
  %%    _116
  _339 = succeeded:body _116
  br _339, ^339, ^1

339:
  %% fun_SUITE.erl:200
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-21-'`/1) => fun((_) -> {'type', 'external'})
  %%    _116 => fun((_, _))
  %% Aliased:
  %%    _116
  _269 = call (`'-external/1-fun-21-'`/1), _116

  %% Aliased:
  %%    _269
  _340 = succeeded:body _269
  br _340, ^498, ^1

498:
  %% fun_SUITE.erl:201
  %% Aliased:
  %%    ListsArity, 
  %%    ListsMap, 
  %%    ListsMod
  _126 = call (`erlang`:`make_fun`/3), ListsMod, ListsMap, ListsArity

  %% Aliased:
  %%    _126
  _341 = succeeded:body _126
  br _341, ^341, ^1

341:
  %% fun_SUITE.erl:201
  %% Result type:
  %%    {'type', 'external'}
  %% Argument types:
  %%    (`'-external/1-fun-23-'`/1) => fun((_) -> {'type', 'external'})
  %%    _126 => fun()
  %% Aliased:
  %%    _126
  _272 = call (`'-external/1-fun-23-'`/1), _126

  %% Aliased:
  %%    _272
  _342 = succeeded:body _272
  br _342, ^342, ^1

342:
  %% fun_SUITE.erl:204
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _131 = call (`id`/1), `fun erlang:abs/1`

  %% Aliased:
  %%    _131
  _343 = succeeded:body _131
  br _343, ^343, ^1

343:
  %% fun_SUITE.erl:204
  %% Argument types:
  %%    _131 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _131
  _207 = call _131, `-42`

  %% Aliased:
  %%    _207
  _344 = succeeded:body _207
  br _344, ^344, ^1

344:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _207
  _481 = bif:'=:=' _207, `42`
  br _481, ^480, ^346

480:
  %% fun_SUITE.erl:206
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _139 = call (`id`/1), `fun erlang:abs/1`

  %% Aliased:
  %%    _139
  _347 = succeeded:body _139
  br _347, ^347, ^1

347:
  %% fun_SUITE.erl:206
  %% Argument types:
  %%    _139 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _139
  _208 = call _139, `-42`

  %% Aliased:
  %%    _208
  _348 = succeeded:body _208
  br _348, ^348, ^1

348:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _208
  _478 = bif:'=:=' _208, `42`
  br _478, ^477, ^350

477:
  %% fun_SUITE.erl:207
  _209 = call (`lists`:`sum`/1), `[1,2,3]`

  %% Aliased:
  %%    _209
  _351 = succeeded:body _209
  br _351, ^351, ^1

351:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _209
  _475 = bif:'=:=' _209, `6`
  br _475, ^474, ^353

474:
  %% fun_SUITE.erl:208
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _144 = call (`id`/1), `fun lists:sum/1`

  %% Aliased:
  %%    _144
  _354 = succeeded:body _144
  br _354, ^354, ^1

354:
  %% fun_SUITE.erl:208
  %% Argument types:
  %%    _144 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _144
  _210 = call _144, `[1,2,3]`

  %% Aliased:
  %%    _210
  _355 = succeeded:body _210
  br _355, ^355, ^1

355:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _210
  _472 = bif:'=:=' _210, `6`
  br _472, ^559, ^357

559:
  br ^563

563:
  _361 = new_try_tag `'catch'`
  br _361, ^359, ^360

359:
  %% fun_SUITE.erl:210
  _274 = call `fun lists:sum/1`, `1`, `2`, `3`

  %% Aliased:
  %%    _274
  _363 = succeeded:body _274
  br ^360

360:
  %% Unique:
  %%    _361
  _366 = landingpad `'catch'`, _361

  %% Aliased:
  %%    _366
  _364 = extract _366, `0`
  br ^358

358:
  %% Aliased:
  %%    _364
  %% Unique:
  %%    _361
  _147 = catch_end _361, _364

  %% Argument types:
  %%    
  %% Aliased:
  %%    _147
  _467 = is_tagged_tuple _147, `2`, `'EXIT'`
  br _467, ^464, ^369

464:
  %% Argument types:
  %%    _147 => {''EXIT'', any()}
  %% Aliased:
  %%    _147
  _212 = get_tuple_element _147, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _212
  _461 = bif:is_tuple _212
  br _461, ^461, ^369

461:
  %% Argument types:
  %%    _212 => {...}
  %% Aliased:
  %%    _212
  _462 = bif:tuple_size _212

  %% Argument types:
  %%    _462 => 0..16777215
  %% Unique:
  %%    _462
  _463 = bif:'=:=' _462, `2`
  br _463, ^460, ^369

460:
  %% Argument types:
  %%    _212 => {any(), any()}
  %% Aliased:
  %%    _212
  _215 = get_tuple_element _212, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _215
  _457 = is_tagged_tuple _215, `2`, `badarity`
  br _457, ^560, ^369

560:
  br ^564

564:
  _373 = new_try_tag `'catch'`
  br _373, ^371, ^372

371:
  %% fun_SUITE.erl:211
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _150 = call (`id`/1), `fun lists:sum/1`

  %% Aliased:
  %%    _150
  _375 = succeeded:body _150
  br _375, ^375, ^372

375:
  %% fun_SUITE.erl:211
  %% Argument types:
  %%    _150 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _150
  _276 = call _150, `1`, `2`, `3`

  %% Aliased:
  %%    _276
  _376 = succeeded:body _276
  br ^372

372:
  %% Unique:
  %%    _373
  _379 = landingpad `'catch'`, _373

  %% Aliased:
  %%    _379
  _377 = extract _379, `0`
  br ^370

370:
  %% Aliased:
  %%    _377
  %% Unique:
  %%    _373
  _151 = catch_end _373, _377

  %% Argument types:
  %%    
  %% Aliased:
  %%    _151
  _450 = is_tagged_tuple _151, `2`, `'EXIT'`
  br _450, ^447, ^382

447:
  %% Argument types:
  %%    _151 => {''EXIT'', any()}
  %% Aliased:
  %%    _151
  _218 = get_tuple_element _151, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _218
  _444 = bif:is_tuple _218
  br _444, ^444, ^382

444:
  %% Argument types:
  %%    _218 => {...}
  %% Aliased:
  %%    _218
  _445 = bif:tuple_size _218

  %% Argument types:
  %%    _445 => 0..16777215
  %% Unique:
  %%    _445
  _446 = bif:'=:=' _445, `2`
  br _446, ^443, ^382

443:
  %% Argument types:
  %%    _218 => {any(), any()}
  %% Aliased:
  %%    _218
  _221 = get_tuple_element _218, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _221
  _440 = is_tagged_tuple _221, `2`, `badarity`
  br _440, ^561, ^382

561:
  br ^565

565:
  _386 = new_try_tag `'catch'`
  br _386, ^384, ^385

384:
  %% fun_SUITE.erl:212
  _278 = call `fun lists:sum/1`, `1`, `2`, `3`

  %% Aliased:
  %%    _278
  _388 = succeeded:body _278
  br ^385

385:
  %% Unique:
  %%    _386
  _391 = landingpad `'catch'`, _386

  %% Aliased:
  %%    _391
  _389 = extract _391, `0`
  br ^383

383:
  %% Aliased:
  %%    _389
  %% Unique:
  %%    _386
  _154 = catch_end _386, _389

  %% Argument types:
  %%    
  %% Aliased:
  %%    _154
  _433 = is_tagged_tuple _154, `2`, `'EXIT'`
  br _433, ^430, ^394

430:
  %% Argument types:
  %%    _154 => {''EXIT'', any()}
  %% Aliased:
  %%    _154
  _225 = get_tuple_element _154, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _225
  _427 = bif:is_tuple _225
  br _427, ^427, ^394

427:
  %% Argument types:
  %%    _225 => {...}
  %% Aliased:
  %%    _225
  _428 = bif:tuple_size _225

  %% Argument types:
  %%    _428 => 0..16777215
  %% Unique:
  %%    _428
  _429 = bif:'=:=' _428, `2`
  br _429, ^426, ^394

426:
  %% Argument types:
  %%    _225 => {any(), any()}
  %% Aliased:
  %%    _225
  _228 = get_tuple_element _225, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _228
  _423 = is_tagged_tuple _228, `2`, `badarity`
  br _423, ^562, ^394

562:
  br ^566

566:
  _398 = new_try_tag `'catch'`
  br _398, ^396, ^397

396:
  %% fun_SUITE.erl:214
  %% Result type:
  %%    none()
  _280 = call (`bad_external_fun`/0)

  %% Aliased:
  %%    _280
  _400 = succeeded:body _280
  br ^397

397:
  %% Unique:
  %%    _398
  _403 = landingpad `'catch'`, _398

  %% Aliased:
  %%    _403
  _401 = extract _403, `0`
  br ^395

395:
  %% Aliased:
  %%    _401
  %% Unique:
  %%    _398
  _156 = catch_end _398, _401

  %% Argument types:
  %%    
  %% Aliased:
  %%    _156
  _416 = is_tagged_tuple _156, `2`, `'EXIT'`
  br _416, ^413, ^406

413:
  %% Argument types:
  %%    _156 => {''EXIT'', any()}
  %% Aliased:
  %%    _156
  _231 = get_tuple_element _156, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _231
  _410 = is_tagged_tuple _231, `2`, `badarg`
  br _410, ^407, ^406

407:
  %% Result type:
  %%    'ok'
  ret `ok`

406:
  %% fun_SUITE.erl:214
  %% Aliased:
  %%    _156
  _281 = match_fail `badmatch`, _156

  %% Unique:
  %%    _281
  _419 = succeeded:body _281
  br ^1

394:
  %% fun_SUITE.erl:212
  %% Aliased:
  %%    _154
  _282 = match_fail `badmatch`, _154

  %% Unique:
  %%    _282
  _436 = succeeded:body _282
  br ^1

382:
  %% fun_SUITE.erl:211
  %% Aliased:
  %%    _151
  _283 = match_fail `badmatch`, _151

  %% Unique:
  %%    _283
  _453 = succeeded:body _283
  br ^1

369:
  %% fun_SUITE.erl:210
  %% Aliased:
  %%    _147
  _284 = match_fail `badmatch`, _147

  %% Unique:
  %%    _284
  _470 = succeeded:body _284
  br ^1

357:
  %% fun_SUITE.erl:208
  %% Aliased:
  %%    _210
  _285 = match_fail `badmatch`, _210

  %% Unique:
  %%    _285
  _473 = succeeded:body _285
  br ^1

353:
  %% fun_SUITE.erl:207
  %% Aliased:
  %%    _209
  _286 = match_fail `badmatch`, _209

  %% Unique:
  %%    _286
  _476 = succeeded:body _286
  br ^1

350:
  %% fun_SUITE.erl:206
  %% Aliased:
  %%    _208
  _287 = match_fail `badmatch`, _208

  %% Unique:
  %%    _287
  _479 = succeeded:body _287
  br ^1

346:
  %% fun_SUITE.erl:204
  %% Aliased:
  %%    _207
  _288 = match_fail `badmatch`, _207

  %% Unique:
  %%    _288
  _482 = succeeded:body _288
  br ^1

325:
  %% fun_SUITE.erl:194
  %% Aliased:
  %%    _192
  _250 = match_fail `badmatch`, _192

  %% Unique:
  %%    _250
  _327 = succeeded:body _250
  br ^1

321:
  %% fun_SUITE.erl:194
  %% Aliased:
  %%    _191
  _251 = match_fail `badmatch`, _191

  %% Unique:
  %%    _251
  _328 = succeeded:body _251
  br ^1

299:
  %% fun_SUITE.erl:181
  %% Aliased:
  %%    _190
  _235 = match_fail `badmatch`, _190

  %% Unique:
  %%    _235
  _301 = succeeded:body _235
  br ^1

292:
  %% fun_SUITE.erl:176
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-external/1-',1}}
  _289 = match_fail `function_clause`, _0

  %% Unique:
  %%    _289
  _483 = succeeded:body _289
  br ^1

1:
  _290 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _290
}

%% fun_SUITE.erl:218
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`call_me`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `ok`, _0
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _2
  ret _2
}

%% fun_SUITE.erl:221
%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`bad_external_fun`() {
0:
  %% fun_SUITE.erl:223
  _2 = call (`erlang`:`make_fun`/3), `idea`, `idea`, `idea`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% fun_SUITE.erl:227
%% Counter = 11
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37`(_0) {
0:
  %% fun_SUITE.erl:228
  %% Result type:
  %%    'ok'
  _2 = call (`eep37_basic`/0)

  %% Unique:
  %%    _2
  _7 = succeeded:body _2
  br _7, ^7, ^1

7:
  %% fun_SUITE.erl:229
  %% Result type:
  %%    'ok'
  _3 = call (`eep37_dup`/0)

  %% Unique:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% fun_SUITE.erl:230
  %% Result type:
  %%    'ok'
  _4 = call (`eep37_gh6515`/0)

  %% Unique:
  %%    _4
  _9 = succeeded:body _4
  br _9, ^10, ^1

10:
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% fun_SUITE.erl:233
%% Counter = 47
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37_basic`() {
0:
  %% fun_SUITE.erl:237
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-eep37_basic/0-Fact/1-0-'`/1) => fun((_) -> number(0, '+inf'))
  _14 = call (`'-eep37_basic/0-Fact/1-0-'`/1), `6`

  %% Unique:
  %%    _14
  _26 = succeeded:body _14
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _14 => number(0, '+inf')
  %% Unique:
  %%    _14
  _42 = bif:'=:=' _14, `720`
  br _42, ^41, ^28

41:
  %% fun_SUITE.erl:238
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-eep37_basic/0-fun-1-'`/1) => fun((_) -> number())
  _15 = call (`'-eep37_basic/0-fun-1-'`/1), `9`

  %% Unique:
  %%    _15
  _29 = succeeded:body _15
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _15 => number()
  %% Unique:
  %%    _15
  _39 = bif:'=:=' _15, `10`
  br _39, ^38, ^31

38:
  %% fun_SUITE.erl:239
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-eep37_basic/0-fun-2-'`/1) => fun((_) -> number())
  _16 = call (`'-eep37_basic/0-fun-2-'`/1), `8`

  %% Unique:
  %%    _16
  _32 = succeeded:body _16
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _16 => number()
  %% Unique:
  %%    _16
  _36 = bif:'=:=' _16, `50`
  br _36, ^35, ^34

35:
  %% Result type:
  %%    'ok'
  ret `ok`

34:
  %% fun_SUITE.erl:239
  %% Unique:
  %%    _16
  _21 = match_fail `badmatch`, _16

  %% Unique:
  %%    _21
  _37 = succeeded:body _21
  br ^1

31:
  %% fun_SUITE.erl:238
  %% Unique:
  %%    _15
  _22 = match_fail `badmatch`, _15

  %% Unique:
  %%    _22
  _40 = succeeded:body _22
  br ^1

28:
  %% fun_SUITE.erl:237
  %% Unique:
  %%    _14
  _23 = match_fail `badmatch`, _14

  %% Unique:
  %%    _23
  _43 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% fun_SUITE.erl:242
%% Counter = 24
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37_dup`() {
0:
  %% fun_SUITE.erl:243
  %% Result type:
  %%    fun(() -> 'dup1')
  _0 = call (`dup1`/0)

  %% Aliased:
  %%    _0
  _10 = succeeded:body _0
  br _10, ^10, ^1

10:
  %% fun_SUITE.erl:243
  %% Result type:
  %%    'dup1'
  %% Argument types:
  %%    (`'-dup1/0-fun-0-'`/0) => fun(() -> 'dup1')
  _4 = call (`'-dup1/0-fun-0-'`/0)

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^21, ^1

21:
  %% fun_SUITE.erl:244
  %% Result type:
  %%    fun(() -> 'dup2')
  _2 = call (`dup2`/0)

  %% Aliased:
  %%    _2
  _14 = succeeded:body _2
  br _14, ^14, ^1

14:
  %% fun_SUITE.erl:244
  %% Result type:
  %%    'dup2'
  %% Argument types:
  %%    (`'-dup2/0-fun-0-'`/0) => fun(() -> 'dup2')
  _5 = call (`'-dup2/0-fun-0-'`/0)

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^18, ^1

18:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% fun_SUITE.erl:247
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`dup1`() {
0:
  %% Result type:
  %%    'dup1'
  _2 = make_fun (`'-dup1/0-fun-0-'`/0)
  %% Result type:
  %%    fun(() -> 'dup1')
  %% Aliased:
  %%    _2
  ret _2
}

%% fun_SUITE.erl:250
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`dup2`() {
0:
  %% Result type:
  %%    'dup2'
  _2 = make_fun (`'-dup2/0-fun-0-'`/0)
  %% Result type:
  %%    fun(() -> 'dup2')
  %% Aliased:
  %%    _2
  ret _2
}

%% fun_SUITE.erl:253
%% Counter = 60
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37_gh6515`() {
0:
  %% fun_SUITE.erl:254
  %% Result type:
  %%    {0, fun(() -> fun(() -> fun(() -> fun(()))))}
  _6 = call (`eep37_gh6515_1`/0)

  %% Unique:
  %%    _6
  _24 = succeeded:body _6
  br _24, ^53, ^1

53:
  %% fun_SUITE.erl:255
  %% Result type:
  %%    fun(() -> fun(() -> fun(() -> fun(() -> fun(())))))
  %% Argument types:
  %%    (`'-eep37_gh6515_1/0-X/0-0-'`/0) => fun(() -> fun(() -> fun(() -> fun(()))))
  _9 = call (`'-eep37_gh6515_1/0-X/0-0-'`/0)

  %% Aliased:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _6 => {0, fun(() -> fun(() -> fun(() -> fun(()))))}
  %% Unique:
  %%    _6
  _7 = get_tuple_element _6, `1`

  %% Argument types:
  %%    _9 => fun(() -> fun(() -> fun(() -> fun(() -> fun(())))))
  %%    _7 => fun(() -> fun(() -> fun(() -> fun(()))))
  %% Aliased:
  %%    _7, 
  %%    _9
  _30 = bif:'=:=' _9, _7
  br _30, ^30, ^29

30:
  %% fun_SUITE.erl:257
  %% Result type:
  %%    nonempty_list(0 | fun((_) -> number(0, '+inf')))
  _10 = call (`eep37_gh6515_2`/0)

  %% Unique:
  %%    _10
  _31 = succeeded:body _10
  br _31, ^50, ^1

50:
  %% Argument types:
  %%    _10 => nonempty_list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _10
  _12 = get_hd _10

  %% Argument types:
  %%    _10 => nonempty_list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _10
  _11 = get_tl _10

  %% Argument types:
  %%    _12 => 0 | fun((_) -> number(0, '+inf'))
  %% Unique:
  %%    _12
  _49 = bif:'=:=' _12, `0`
  br _49, ^48, ^33

48:
  %% Unique:
  %%    _11
  _47 = is_nonempty_list _11
  br _47, ^47, ^33

47:
  %% Argument types:
  %%    _11 => nonempty_list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _11
  _14 = get_hd _11

  %% Argument types:
  %%    _11 => nonempty_list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _11
  _13 = get_tl _11

  %% Argument types:
  %%    _13 => list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _13
  _46 = bif:'=:=' _13, `[]`
  br _46, ^46, ^33

46:
  %% fun_SUITE.erl:258
  %% Argument types:
  %%    _14 => 0 | fun((_) -> number(0, '+inf'))
  %% Aliased:
  %%    _14
  _15 = call _14, `0`

  %% Aliased:
  %%    _15
  _34 = succeeded:body _15
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _44 = bif:'=:=' _15, `1`
  br _44, ^43, ^36

43:
  %% fun_SUITE.erl:259
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-eep37_gh6515_2/0-Fact/1-0-'`/1) => fun((_) -> number(0, '+inf'))
  _16 = call (`'-eep37_gh6515_2/0-Fact/1-0-'`/1), `5`

  %% Unique:
  %%    _16
  _37 = succeeded:body _16
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    _16 => number(0, '+inf')
  %% Unique:
  %%    _16
  _41 = bif:'=:=' _16, `120`
  br _41, ^40, ^39

40:
  %% Result type:
  %%    'ok'
  ret `ok`

39:
  %% fun_SUITE.erl:259
  %% Unique:
  %%    _16
  _17 = match_fail `badmatch`, _16

  %% Unique:
  %%    _17
  _42 = succeeded:body _17
  br ^1

36:
  %% fun_SUITE.erl:258
  %% Aliased:
  %%    _15
  _18 = match_fail `badmatch`, _15

  %% Unique:
  %%    _18
  _45 = succeeded:body _18
  br ^1

33:
  %% fun_SUITE.erl:257
  %% Unique:
  %%    _10
  _19 = match_fail `badmatch`, _10

  %% Unique:
  %%    _19
  _51 = succeeded:body _19
  br ^1

29:
  %% fun_SUITE.erl:255
  %% Aliased:
  %%    _9
  _20 = match_fail `badmatch`, _9

  %% Unique:
  %%    _20
  _52 = succeeded:body _20
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% fun_SUITE.erl:263
%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37_gh6515_1`() {
0:
  %% Result type:
  %%    fun(() -> fun(() -> fun(() -> fun(() -> fun(())))))
  _0 = make_fun (`'-eep37_gh6515_1/0-X/0-0-'`/0)

  %% Argument types:
  %%    _0 => fun(() -> fun(() -> fun(() -> fun(() -> fun(() -> fun(()))))))
  %% Aliased:
  %%    _0
  _3 = put_tuple `0`, _0
  %% Result type:
  %%    {0, fun(() -> fun(() -> fun(() -> fun(() -> fun(() -> fun(()))))))}
  %% Unique:
  %%    _3
  ret _3
}

%% fun_SUITE.erl:274
%% Counter = 11
%% bs_ensure_opt: true
function `fun_SUITE`:`eep37_gh6515_2`() {
0:
  %% Result type:
  %%    number(0, '+inf')
  _4 = make_fun (`'-eep37_gh6515_2/0-Fact/1-0-'`/1)

  %% Argument types:
  %%    _4 => fun((_) -> number(0, '+inf'))
  %% Aliased:
  %%    _4
  _5 = put_list _4, `[]`

  %% Argument types:
  %%    _5 => nonempty_list(fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _5
  _8 = put_list `0`, _5
  %% Result type:
  %%    nonempty_list(0 | fun((_) -> number(0, '+inf')))
  %% Unique:
  %%    _8
  ret _8
}

%% fun_SUITE.erl:286
%% Counter = 135
%% bs_ensure_opt: true
function `fun_SUITE`:`badarity`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _36 = bif:is_list _0
  br _36, ^36, ^35

36:
  %% Result type:
  %%    'ok'
  _1 = make_fun (`badarity`/1)
  _40 = new_try_tag `'catch'`
  br _40, ^101, ^39

101:
  %% fun_SUITE.erl:287
  %% Result type:
  %%    'ok'
  %% Argument types:
  %%    _1 => fun((_) -> 'ok')
  %% Aliased:
  %%    _1
  _27 = call _1

  %% Aliased:
  %%    _27
  _42 = succeeded:body _27
  br ^39

39:
  %% Unique:
  %%    _40
  _45 = landingpad `'catch'`, _40

  %% Aliased:
  %%    _45
  _43 = extract _45, `0`
  br ^37

37:
  %% Aliased:
  %%    _43
  %% Unique:
  %%    _40
  _2 = catch_end _40, _43

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _96 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _96, ^93, ^48

93:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _12 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _90 = bif:is_tuple _12
  br _90, ^90, ^48

90:
  %% Argument types:
  %%    _12 => {...}
  %% Aliased:
  %%    _12
  _91 = bif:tuple_size _12

  %% Argument types:
  %%    _91 => 0..16777215
  %% Unique:
  %%    _91
  _92 = bif:'=:=' _91, `2`
  br _92, ^89, ^48

89:
  %% Argument types:
  %%    _12 => {any(), any()}
  %% Aliased:
  %%    _12
  _15 = get_tuple_element _12, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _86 = is_tagged_tuple _15, `2`, `badarity`
  br _86, ^83, ^48

83:
  %% Argument types:
  %%    _15 => {'badarity', any()}
  %% Aliased:
  %%    _15
  _16 = get_tuple_element _15, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _80 = bif:is_tuple _16
  br _80, ^80, ^48

80:
  %% Argument types:
  %%    _16 => {...}
  %% Aliased:
  %%    _16
  _81 = bif:tuple_size _16

  %% Argument types:
  %%    _81 => 0..16777215
  %% Unique:
  %%    _81
  _82 = bif:'=:=' _81, `2`
  br _82, ^79, ^48

79:
  %% Argument types:
  %%    _16 => {any(), any()}
  %% Aliased:
  %%    _16
  _18 = get_tuple_element _16, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _78 = bif:'=:=' _18, `[]`
  br _78, ^78, ^48

78:
  %% Result type:
  %%    42
  _4 = make_fun (`'-badarity/1-fun-0-'`/0)
  _52 = new_try_tag `'catch'`
  br _52, ^102, ^51

102:
  %% fun_SUITE.erl:288
  %% Result type:
  %%    42
  %% Argument types:
  %%    _4 => fun(() -> 42)
  %% Aliased:
  %%    _4
  _29 = call _4, `0`

  %% Aliased:
  %%    _29
  _54 = succeeded:body _29
  br ^51

51:
  %% Unique:
  %%    _52
  _57 = landingpad `'catch'`, _52

  %% Aliased:
  %%    _57
  _55 = extract _57, `0`
  br ^49

49:
  %% Aliased:
  %%    _55
  %% Unique:
  %%    _52
  _5 = catch_end _52, _55

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _74 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _74, ^71, ^60

71:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _20 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _68 = bif:is_tuple _20
  br _68, ^68, ^60

68:
  %% Argument types:
  %%    _20 => {...}
  %% Aliased:
  %%    _20
  _69 = bif:tuple_size _20

  %% Argument types:
  %%    _69 => 0..16777215
  %% Unique:
  %%    _69
  _70 = bif:'=:=' _69, `2`
  br _70, ^67, ^60

67:
  %% Argument types:
  %%    _20 => {any(), any()}
  %% Aliased:
  %%    _20
  _23 = get_tuple_element _20, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _64 = is_tagged_tuple _23, `2`, `badarity`
  br _64, ^61, ^60

61:
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  %% fun_SUITE.erl:288
  %% Aliased:
  %%    _5
  _30 = match_fail `badmatch`, _5

  %% Unique:
  %%    _30
  _77 = succeeded:body _30
  br ^1

48:
  %% fun_SUITE.erl:287
  %% Aliased:
  %%    _2
  _31 = match_fail `badmatch`, _2

  %% Unique:
  %%    _31
  _99 = succeeded:body _31
  br ^1

35:
  %% fun_SUITE.erl:286
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-badarity/1-',1}}
  _32 = match_fail `function_clause`, _0

  %% Unique:
  %%    _32
  _100 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% fun_SUITE.erl:291
%% Counter = 301
%% bs_ensure_opt: true
function `fun_SUITE`:`badfun`(_0) {
0:
  br ^293

293:
  _58 = new_try_tag `'catch'`
  br _58, ^56, ^57

56:
  %% fun_SUITE.erl:293
  _24 = call (`erlang`:`error`/1), `{badfun,42}`

  %% Aliased:
  %%    _24
  _60 = succeeded:body _24
  br ^57

57:
  %% Unique:
  %%    _58
  _63 = landingpad `'catch'`, _58

  %% Aliased:
  %%    _63
  _61 = extract _63, `0`
  br ^55

55:
  %% Aliased:
  %%    _61
  %% Unique:
  %%    _58
  _2 = catch_end _58, _61

  %% fun_SUITE.erl:293
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _25 = call (`expect_badfun`/2), `42`, _2

  %% Aliased:
  %%    _25
  _65 = succeeded:body _25
  br _65, ^286, ^1

286:
  br ^294

294:
  _69 = new_try_tag `'catch'`
  br _69, ^67, ^68

67:
  %% fun_SUITE.erl:294
  _27 = call (`erlang`:`error`/1), `{badfun,42.0}`

  %% Aliased:
  %%    _27
  _71 = succeeded:body _27
  br ^68

68:
  %% Unique:
  %%    _69
  _74 = landingpad `'catch'`, _69

  %% Aliased:
  %%    _74
  _72 = extract _74, `0`
  br ^66

66:
  %% Aliased:
  %%    _72
  %% Unique:
  %%    _69
  _3 = catch_end _69, _72

  %% fun_SUITE.erl:294
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _28 = call (`expect_badfun`/2), `42.0`, _3

  %% Aliased:
  %%    _28
  _76 = succeeded:body _28
  br _76, ^287, ^1

287:
  br ^295

295:
  _80 = new_try_tag `'catch'`
  br _80, ^78, ^79

78:
  %% fun_SUITE.erl:295
  _30 = call (`erlang`:`error`/1), `{badfun,not_a_fun}`

  %% Aliased:
  %%    _30
  _82 = succeeded:body _30
  br ^79

79:
  %% Unique:
  %%    _80
  _85 = landingpad `'catch'`, _80

  %% Aliased:
  %%    _85
  _83 = extract _85, `0`
  br ^77

77:
  %% Aliased:
  %%    _83
  %% Unique:
  %%    _80
  _4 = catch_end _80, _83

  %% fun_SUITE.erl:295
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _31 = call (`expect_badfun`/2), `not_a_fun`, _4

  %% Aliased:
  %%    _31
  _87 = succeeded:body _31
  br _87, ^288, ^1

288:
  br ^296

296:
  _91 = new_try_tag `'catch'`
  br _91, ^89, ^90

89:
  %% fun_SUITE.erl:296
  _33 = call (`erlang`:`error`/1), `{badfun,not_a_fun}`

  %% Aliased:
  %%    _33
  _93 = succeeded:body _33
  br ^90

90:
  %% Unique:
  %%    _91
  _96 = landingpad `'catch'`, _91

  %% Aliased:
  %%    _96
  _94 = extract _96, `0`
  br ^88

88:
  %% Aliased:
  %%    _94
  %% Unique:
  %%    _91
  _5 = catch_end _91, _94

  %% fun_SUITE.erl:296
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _34 = call (`expect_badfun`/2), `not_a_fun`, _5

  %% Aliased:
  %%    _34
  _98 = succeeded:body _34
  br _98, ^289, ^1

289:
  br ^297

297:
  _102 = new_try_tag `'catch'`
  br _102, ^100, ^101

100:
  %% fun_SUITE.erl:298
  _36 = call (`erlang`:`error`/1), `{badfun,9}`

  %% Aliased:
  %%    _36
  _104 = succeeded:body _36
  br ^101

101:
  %% Unique:
  %%    _102
  _107 = landingpad `'catch'`, _102

  %% Aliased:
  %%    _107
  _105 = extract _107, `0`
  br ^99

99:
  %% Aliased:
  %%    _105
  %% Unique:
  %%    _102
  _10 = catch_end _102, _105

  %% fun_SUITE.erl:298
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _10
  _37 = call (`expect_badfun`/2), `9`, _10

  %% Aliased:
  %%    _37
  _109 = succeeded:body _37
  br _109, ^290, ^1

290:
  br ^298

298:
  _113 = new_try_tag `'catch'`
  br _113, ^111, ^112

111:
  %% fun_SUITE.erl:300
  _39 = call (`erlang`:`put`/2), `badfun`, `yes`

  %% Aliased:
  %%    _39
  _115 = succeeded:body _39
  br _115, ^115, ^112

115:
  %% fun_SUITE.erl:300
  _40 = call (`erlang`:`error`/1), `{badfun,42}`

  %% Aliased:
  %%    _40
  _116 = succeeded:body _40
  br ^112

112:
  %% Unique:
  %%    _113
  _119 = landingpad `'catch'`, _113

  %% Aliased:
  %%    _119
  _117 = extract _119, `0`
  br ^110

110:
  %% Aliased:
  %%    _117
  %% Unique:
  %%    _113
  _12 = catch_end _113, _117

  %% fun_SUITE.erl:300
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _12
  _41 = call (`expect_badfun`/2), `42`, _12

  %% Aliased:
  %%    _41
  _121 = succeeded:body _41
  br _121, ^121, ^1

121:
  %% fun_SUITE.erl:301
  _21 = call (`erlang`:`erase`/1), `badfun`

  %% Aliased:
  %%    _21
  _122 = succeeded:body _21
  br _122, ^122, ^1

122:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _155 = bif:'=:=' _21, `yes`
  br _155, ^291, ^124

291:
  br ^299

299:
  _128 = new_try_tag `'catch'`
  br _128, ^126, ^127

126:
  %% fun_SUITE.erl:303
  _43 = call (`erlang`:`put`/2), `badfun`, `of_course`

  %% Aliased:
  %%    _43
  _130 = succeeded:body _43
  br _130, ^130, ^127

130:
  %% fun_SUITE.erl:303
  _44 = call (`erlang`:`error`/1), `{badfun,not_a_fun}`

  %% Aliased:
  %%    _44
  _131 = succeeded:body _44
  br ^127

127:
  %% Unique:
  %%    _128
  _134 = landingpad `'catch'`, _128

  %% Aliased:
  %%    _134
  _132 = extract _134, `0`
  br ^125

125:
  %% Aliased:
  %%    _132
  %% Unique:
  %%    _128
  _15 = catch_end _128, _132

  %% fun_SUITE.erl:303
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _15
  _45 = call (`expect_badfun`/2), `not_a_fun`, _15

  %% Aliased:
  %%    _45
  _136 = succeeded:body _45
  br _136, ^136, ^1

136:
  %% fun_SUITE.erl:304
  _22 = call (`erlang`:`erase`/1), `badfun`

  %% Aliased:
  %%    _22
  _137 = succeeded:body _22
  br _137, ^137, ^1

137:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _152 = bif:'=:=' _22, `of_course`
  br _152, ^292, ^139

292:
  br ^300

300:
  _143 = new_try_tag `'catch'`
  br _143, ^141, ^142

141:
  %% fun_SUITE.erl:311
  %% Result type:
  %%    none()
  %% Argument types:
  %%    (`'-badfun/1-fun-0-'`/1) => fun((_) -> none())
  _49 = call (`'-badfun/1-fun-0-'`/1), `literal`

  %% Aliased:
  %%    _49
  _145 = succeeded:body _49
  br ^142

142:
  %% Unique:
  %%    _143
  _148 = landingpad `'catch'`, _143

  %% Aliased:
  %%    _148
  _146 = extract _148, `0`
  br ^140

140:
  %% Aliased:
  %%    _146
  %% Unique:
  %%    _143
  _20 = catch_end _143, _146

  %% fun_SUITE.erl:311
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _20
  _50 = call (`expect_badfun`/2), `literal`, _20

  %% Aliased:
  %%    _50
  _150 = succeeded:body _50
  br _150, ^150, ^1

150:
  %% Result type:
  %%    'ok'
  ret `ok`

139:
  %% fun_SUITE.erl:304
  %% Aliased:
  %%    _22
  _51 = match_fail `badmatch`, _22

  %% Unique:
  %%    _51
  _153 = succeeded:body _51
  br ^1

124:
  %% fun_SUITE.erl:301
  %% Aliased:
  %%    _21
  _52 = match_fail `badmatch`, _21

  %% Unique:
  %%    _52
  _156 = succeeded:body _52
  br ^1

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% fun_SUITE.erl:315
%% Counter = 35
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'literal' | 'not_a_fun' | number(9, 42)
function `fun_SUITE`:`expect_badfun`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _31 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _31, ^28, ^16

28:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _7 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _25 = bif:is_tuple _7
  br _25, ^25, ^16

25:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _26 = bif:tuple_size _7

  %% Argument types:
  %%    _26 => 0..16777215
  %% Unique:
  %%    _26
  _27 = bif:'=:=' _26, `2`
  br _27, ^24, ^16

24:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Aliased:
  %%    _7
  _10 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _21 = is_tagged_tuple _10, `2`, `badfun`
  br _21, ^18, ^16

18:
  %% Argument types:
  %%    _10 => {'badfun', any()}
  %% Aliased:
  %%    _10
  _11 = get_tuple_element _10, `1`

  %% Argument types:
  %%    _0 => 'literal' | 'not_a_fun' | number(9, 42)
  %% Aliased:
  %%    _11
  %% Unique:
  %%    _0
  _17 = bif:'=:=' _11, _0
  br _17, ^17, ^16

17:
  %% Result type:
  %%    {''EXIT'', any()}
  %% Aliased:
  %%    _1
  ret _1

16:
  %% fun_SUITE.erl:316
  %% Aliased:
  %%    _1
  _13 = match_fail `badmatch`, _1

  %% Unique:
  %%    _13
  _34 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% fun_SUITE.erl:318
%% Counter = 72
%% bs_ensure_opt: true
function `fun_SUITE`:`duplicated_fun`(_0) {
0:
  %% Result type:
  %%    'ok'
  _1 = make_fun (`duplicated_fun_helper`/1)
  _28 = new_try_tag `'try'`
  br _28, ^30, ^25

30:
  %% fun_SUITE.erl:323
  %% Aliased:
  %%    _1
  _20 = match_fail `badmatch`, _1

  %% Unique:
  %%    _20
  _35 = succeeded:body _20
  br ^25

25:
  %% Unique:
  %%    _28
  _50 = landingpad `'try'`, _28

  %% Aliased:
  %%    _50
  _6 = extract _50, `0`

  %% Aliased:
  %%    _50
  _5 = extract _50, `1`

  %% Aliased:
  %%    _50
  _4 = extract _50, `2`

  %% Unique:
  %%    _28
  _51 = kill_try_tag _28

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _48 = bif:'=:=' _6, `error`
  br _48, ^47, ^37

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _44 = is_tagged_tuple _5, `2`, `badmatch`
  br _44, ^41, ^37

41:
  %% Argument types:
  %%    _5 => {'badmatch', any()}
  %% Aliased:
  %%    _5
  _14 = get_tuple_element _5, `1`

  %% fun_SUITE.erl:326
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _7 = bif:is_function _14, `1`
  br _7, ^40, ^37

40:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% Aliased:
  %%    _4, 
  %%    _5
  _21 = resume _4, _5

  %% Unique:
  %%    _21
  _49 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% fun_SUITE.erl:330
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`duplicated_fun_helper`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% fun_SUITE.erl:334
%% Counter = 53
%% bs_ensure_opt: true
function `fun_SUITE`:`unused_fun`(_0) {
0:
  br ^52

52:
  _25 = new_try_tag `'try'`
  br _25, ^24, ^22

24:
  %% fun_SUITE.erl:336
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _16 = call (`id`/1), `ok`

  %% Aliased:
  %%    _16
  _26 = succeeded:body _16
  br _26, ^21, ^22

21:
  %% Unique:
  %%    _25
  _34 = kill_try_tag _25
  br ^23

22:
  %% Unique:
  %%    _25
  _32 = landingpad `'try'`, _25

  %% Aliased:
  %%    _32
  _6 = extract _32, `0`

  %% Aliased:
  %%    _32
  _5 = extract _32, `1`

  %% Aliased:
  %%    _32
  _4 = extract _32, `2`

  %% Unique:
  %%    _25
  _33 = kill_try_tag _25

  %% Argument types:
  %%    _6 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _6
  _30 = bif:'=:=' _6, `throw`
  br _30, ^23, ^28

23:
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  %% Aliased:
  %%    _4, 
  %%    _5
  _18 = resume _4, _5

  %% Unique:
  %%    _18
  _31 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% fun_SUITE.erl:341
%% Counter = 1463
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes`(_0) {
0:
  %% fun_SUITE.erl:342
  %% Result type:
  %%    1
  _121 = call (`parallel_scopes_1a`/0)

  %% Unique:
  %%    _121
  _333 = succeeded:body _121
  br _333, ^1052, ^1

1052:
  %% fun_SUITE.erl:343
  %% Result type:
  %%    1
  _122 = call (`parallel_scopes_1b`/0)

  %% Unique:
  %%    _122
  _336 = succeeded:body _122
  br _336, ^1415, ^1

1415:
  br ^1439

1439:
  _342 = new_try_tag `'catch'`
  br _342, ^340, ^341

340:
  %% fun_SUITE.erl:344
  %% Result type:
  %%    none()
  _239 = call (`parallel_scopes_1c`/0)

  %% Aliased:
  %%    _239
  _344 = succeeded:body _239
  br ^341

341:
  %% Unique:
  %%    _342
  _347 = landingpad `'catch'`, _342

  %% Aliased:
  %%    _347
  _345 = extract _347, `0`
  br ^339

339:
  %% Aliased:
  %%    _345
  %% Unique:
  %%    _342
  _3 = catch_end _342, _345

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _1045 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _1045, ^1042, ^350

1042:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _123 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _123
  _1039 = bif:is_tuple _123
  br _1039, ^1039, ^350

1039:
  %% Argument types:
  %%    _123 => {...}
  %% Aliased:
  %%    _123
  _1040 = bif:tuple_size _123

  %% Argument types:
  %%    _1040 => 0..16777215
  %% Unique:
  %%    _1040
  _1041 = bif:'=:=' _1040, `2`
  br _1041, ^1038, ^350

1038:
  %% Argument types:
  %%    _123 => {any(), any()}
  %% Aliased:
  %%    _123
  _126 = get_tuple_element _123, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _126
  _1037 = bif:'=:=' _126, `{badmatch,99}`
  br _1037, ^1037, ^350

1037:
  %% fun_SUITE.erl:346
  %% Result type:
  %%    10
  _127 = call (`parallel_scopes_2a`/0)

  %% Unique:
  %%    _127
  _351 = succeeded:body _127
  br _351, ^1416, ^1

1416:
  br ^1440

1440:
  _357 = new_try_tag `'catch'`
  br _357, ^355, ^356

355:
  %% fun_SUITE.erl:347
  %% Result type:
  %%    none()
  _241 = call (`parallel_scopes_2b`/0)

  %% Aliased:
  %%    _241
  _359 = succeeded:body _241
  br ^356

356:
  %% Unique:
  %%    _357
  _362 = landingpad `'catch'`, _357

  %% Aliased:
  %%    _362
  _360 = extract _362, `0`
  br ^354

354:
  %% Aliased:
  %%    _360
  %% Unique:
  %%    _357
  _6 = catch_end _357, _360

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _1030 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _1030, ^1027, ^365

1027:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _128 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _128
  _1024 = bif:is_tuple _128
  br _1024, ^1024, ^365

1024:
  %% Argument types:
  %%    _128 => {...}
  %% Aliased:
  %%    _128
  _1025 = bif:tuple_size _128

  %% Argument types:
  %%    _1025 => 0..16777215
  %% Unique:
  %%    _1025
  _1026 = bif:'=:=' _1025, `2`
  br _1026, ^1023, ^365

1023:
  %% Argument types:
  %%    _128 => {any(), any()}
  %% Aliased:
  %%    _128
  _131 = get_tuple_element _128, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _131
  _1022 = bif:'=:=' _131, `{badmatch,15}`
  br _1022, ^1022, ^365

1022:
  %% fun_SUITE.erl:348
  %% Result type:
  %%    500
  _132 = call (`parallel_scopes_2c`/2), `500`, `500`

  %% Unique:
  %%    _132
  _366 = succeeded:body _132
  br _366, ^1417, ^1

1417:
  br ^1441

1441:
  _372 = new_try_tag `'catch'`
  br _372, ^370, ^371

370:
  %% fun_SUITE.erl:349
  %% Result type:
  %%    none()
  _243 = call (`parallel_scopes_2c`/2), `500`, `1000`

  %% Aliased:
  %%    _243
  _374 = succeeded:body _243
  br ^371

371:
  %% Unique:
  %%    _372
  _377 = landingpad `'catch'`, _372

  %% Aliased:
  %%    _377
  _375 = extract _377, `0`
  br ^369

369:
  %% Aliased:
  %%    _375
  %% Unique:
  %%    _372
  _9 = catch_end _372, _375

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _1015 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _1015, ^1012, ^380

1012:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _133 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _133
  _1009 = bif:is_tuple _133
  br _1009, ^1009, ^380

1009:
  %% Argument types:
  %%    _133 => {...}
  %% Aliased:
  %%    _133
  _1010 = bif:tuple_size _133

  %% Argument types:
  %%    _1010 => 0..16777215
  %% Unique:
  %%    _1010
  _1011 = bif:'=:=' _1010, `2`
  br _1011, ^1008, ^380

1008:
  %% Argument types:
  %%    _133 => {any(), any()}
  %% Aliased:
  %%    _133
  _136 = get_tuple_element _133, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _136
  _1007 = bif:'=:=' _136, `{badmatch,1000}`
  br _1007, ^1007, ^380

1007:
  %% fun_SUITE.erl:350
  %% Result type:
  %%    600
  _137 = call (`parallel_scopes_2d`/2), `600`, `600`

  %% Unique:
  %%    _137
  _381 = succeeded:body _137
  br _381, ^1418, ^1

1418:
  br ^1442

1442:
  _387 = new_try_tag `'catch'`
  br _387, ^385, ^386

385:
  %% fun_SUITE.erl:351
  %% Result type:
  %%    none()
  _245 = call (`parallel_scopes_2d`/2), `600`, `1000`

  %% Aliased:
  %%    _245
  _389 = succeeded:body _245
  br ^386

386:
  %% Unique:
  %%    _387
  _392 = landingpad `'catch'`, _387

  %% Aliased:
  %%    _392
  _390 = extract _392, `0`
  br ^384

384:
  %% Aliased:
  %%    _390
  %% Unique:
  %%    _387
  _12 = catch_end _387, _390

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _1000 = is_tagged_tuple _12, `2`, `'EXIT'`
  br _1000, ^997, ^395

997:
  %% Argument types:
  %%    _12 => {''EXIT'', any()}
  %% Aliased:
  %%    _12
  _138 = get_tuple_element _12, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _138
  _994 = bif:is_tuple _138
  br _994, ^994, ^395

994:
  %% Argument types:
  %%    _138 => {...}
  %% Aliased:
  %%    _138
  _995 = bif:tuple_size _138

  %% Argument types:
  %%    _995 => 0..16777215
  %% Unique:
  %%    _995
  _996 = bif:'=:=' _995, `2`
  br _996, ^993, ^395

993:
  %% Argument types:
  %%    _138 => {any(), any()}
  %% Aliased:
  %%    _138
  _141 = get_tuple_element _138, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _141
  _992 = bif:'=:=' _141, `{badmatch,1000}`
  br _992, ^992, ^395

992:
  %% fun_SUITE.erl:352
  %% Result type:
  %%    {'a', 20}
  _142 = call (`parallel_scopes_2e`/2), `20`, `20`

  %% Unique:
  %%    _142
  _396 = succeeded:body _142
  br _396, ^1419, ^1

1419:
  br ^1443

1443:
  _402 = new_try_tag `'catch'`
  br _402, ^400, ^401

400:
  %% fun_SUITE.erl:353
  %% Result type:
  %%    {'a', 20}
  _247 = call (`parallel_scopes_2e`/2), `20`, `25`

  %% Unique:
  %%    _247
  _404 = succeeded:body _247
  br _404, ^404, ^401

404:
  br ^399

401:
  %% Unique:
  %%    _402
  _407 = landingpad `'catch'`, _402

  %% Aliased:
  %%    _407
  _405 = extract _407, `0`
  br ^399

399:
  _408 = phi { _405, ^401 }, { `{a,20}`, ^404 }

  %% Aliased:
  %%    _408
  %% Unique:
  %%    _402
  _15 = catch_end _402, _408

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _986 = is_tagged_tuple _15, `2`, `'EXIT'`
  br _986, ^983, ^410

983:
  %% Argument types:
  %%    _15 => {''EXIT'', any()}
  %% Aliased:
  %%    _15
  _143 = get_tuple_element _15, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _143
  _980 = bif:is_tuple _143
  br _980, ^980, ^410

980:
  %% Argument types:
  %%    _143 => {...}
  %% Aliased:
  %%    _143
  _981 = bif:tuple_size _143

  %% Argument types:
  %%    _981 => 0..16777215
  %% Unique:
  %%    _981
  _982 = bif:'=:=' _981, `2`
  br _982, ^979, ^410

979:
  %% Argument types:
  %%    _143 => {any(), any()}
  %% Aliased:
  %%    _143
  _146 = get_tuple_element _143, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _146
  _978 = bif:'=:=' _146, `{badmatch,{a,25}}`
  br _978, ^978, ^410

978:
  %% fun_SUITE.erl:355
  %% Result type:
  %%    {nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), 'a'}
  _147 = call (`parallel_scopes_3`/1), `a`

  %% Unique:
  %%    _147
  _411 = succeeded:body _147
  br _411, ^411, ^1

411:
  %% Argument types:
  %%    _147 => {nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), 'a'}
  %% Unique:
  %%    _147
  _976 = bif:'=:=' _147, `{[42,2],42,a}`
  br _976, ^976, ^413

976:
  %% fun_SUITE.erl:357
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _19 = call (`id`/1), `42`

  %% Aliased:
  %%    _19
  _414 = succeeded:body _19
  br _414, ^414, ^1

414:
  %% fun_SUITE.erl:357
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _18 = call (`id`/1), `42`

  %% Aliased:
  %%    _18
  _415 = succeeded:body _18
  br _415, ^415, ^1

415:
  %% fun_SUITE.erl:357
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _18, 
  %%    _19
  _148 = call (`parallel_scopes_4a`/2), _19, _18

  %% Aliased:
  %%    _148
  _416 = succeeded:body _148
  br _416, ^416, ^1

416:
  %% Argument types:
  %%    _148 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _148
  _974 = bif:'=:=' _148, `42`
  br _974, ^1420, ^418

1420:
  br ^1444

1444:
  _422 = new_try_tag `'catch'`
  br _422, ^420, ^421

420:
  %% fun_SUITE.erl:358
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _249 = call (`parallel_scopes_4a`/2), `42`, `77`

  %% Aliased:
  %%    _249
  _424 = succeeded:body _249
  br _424, ^424, ^421

424:
  br ^419

421:
  %% Unique:
  %%    _422
  _427 = landingpad `'catch'`, _422

  %% Aliased:
  %%    _427
  _425 = extract _427, `0`
  br ^419

419:
  _428 = phi { _425, ^421 }, { _249, ^424 }

  %% Aliased:
  %%    _428
  %% Unique:
  %%    _422
  _21 = catch_end _422, _428

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _969 = is_tagged_tuple _21, `2`, `'EXIT'`
  br _969, ^966, ^430

966:
  %% Argument types:
  %%    _21 => {''EXIT'', any()}
  %% Aliased:
  %%    _21
  _149 = get_tuple_element _21, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _149
  _963 = bif:is_tuple _149
  br _963, ^963, ^430

963:
  %% Argument types:
  %%    _149 => {...}
  %% Aliased:
  %%    _149
  _964 = bif:tuple_size _149

  %% Argument types:
  %%    _964 => 0..16777215
  %% Unique:
  %%    _964
  _965 = bif:'=:=' _964, `2`
  br _965, ^962, ^430

962:
  %% Argument types:
  %%    _149 => {any(), any()}
  %% Aliased:
  %%    _149
  _152 = get_tuple_element _149, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _152
  _961 = bif:'=:=' _152, `{badmatch,77}`
  br _961, ^961, ^430

961:
  %% fun_SUITE.erl:359
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _24 = call (`id`/1), `42`

  %% Aliased:
  %%    _24
  _431 = succeeded:body _24
  br _431, ^431, ^1

431:
  %% fun_SUITE.erl:359
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _23 = call (`id`/1), `42`

  %% Aliased:
  %%    _23
  _432 = succeeded:body _23
  br _432, ^432, ^1

432:
  %% fun_SUITE.erl:359
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _23, 
  %%    _24
  _153 = call (`parallel_scopes_4b`/2), _24, _23

  %% Aliased:
  %%    _153
  _433 = succeeded:body _153
  br _433, ^433, ^1

433:
  %% Argument types:
  %%    _153 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _153
  _959 = bif:'=:=' _153, `42`
  br _959, ^1421, ^435

1421:
  br ^1445

1445:
  _439 = new_try_tag `'catch'`
  br _439, ^437, ^438

437:
  %% fun_SUITE.erl:360
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _251 = call (`parallel_scopes_4b`/2), `42`, `77`

  %% Aliased:
  %%    _251
  _441 = succeeded:body _251
  br _441, ^441, ^438

441:
  br ^436

438:
  %% Unique:
  %%    _439
  _444 = landingpad `'catch'`, _439

  %% Aliased:
  %%    _444
  _442 = extract _444, `0`
  br ^436

436:
  _445 = phi { _442, ^438 }, { _251, ^441 }

  %% Aliased:
  %%    _445
  %% Unique:
  %%    _439
  _26 = catch_end _439, _445

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _954 = is_tagged_tuple _26, `2`, `'EXIT'`
  br _954, ^951, ^447

951:
  %% Argument types:
  %%    _26 => {''EXIT'', any()}
  %% Aliased:
  %%    _26
  _154 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _154
  _948 = bif:is_tuple _154
  br _948, ^948, ^447

948:
  %% Argument types:
  %%    _154 => {...}
  %% Aliased:
  %%    _154
  _949 = bif:tuple_size _154

  %% Argument types:
  %%    _949 => 0..16777215
  %% Unique:
  %%    _949
  _950 = bif:'=:=' _949, `2`
  br _950, ^947, ^447

947:
  %% Argument types:
  %%    _154 => {any(), any()}
  %% Aliased:
  %%    _154
  _157 = get_tuple_element _154, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _157
  _946 = bif:'=:=' _157, `{badmatch,77}`
  br _946, ^946, ^447

946:
  %% fun_SUITE.erl:361
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _29 = call (`id`/1), `same`

  %% Aliased:
  %%    _29
  _448 = succeeded:body _29
  br _448, ^448, ^1

448:
  %% fun_SUITE.erl:361
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _28 = call (`id`/1), `same`

  %% Aliased:
  %%    _28
  _449 = succeeded:body _28
  br _449, ^449, ^1

449:
  %% fun_SUITE.erl:361
  %% Result type:
  %%    nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %% Aliased:
  %%    _28, 
  %%    _29
  _158 = call (`parallel_scopes_4c`/2), _29, _28

  %% Unique:
  %%    _158
  _450 = succeeded:body _158
  br _450, ^450, ^1

450:
  %% Argument types:
  %%    _158 => nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %% Unique:
  %%    _158
  _944 = bif:'=:=' _158, `[same,2,same,2]`
  br _944, ^1422, ^452

1422:
  br ^1446

1446:
  _456 = new_try_tag `'catch'`
  br _456, ^454, ^455

454:
  %% fun_SUITE.erl:362
  %% Result type:
  %%    nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  _253 = call (`parallel_scopes_4c`/2), `42`, `55`

  %% Unique:
  %%    _253
  _458 = succeeded:body _253
  br _458, ^458, ^455

458:
  br ^453

455:
  %% Unique:
  %%    _456
  _461 = landingpad `'catch'`, _456

  %% Aliased:
  %%    _461
  _459 = extract _461, `0`
  br ^453

453:
  _462 = phi { _459, ^455 }, { _253, ^458 }

  %% Aliased:
  %%    _462
  %% Unique:
  %%    _456
  _31 = catch_end _456, _462

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _940 = is_tagged_tuple _31, `2`, `'EXIT'`
  br _940, ^937, ^464

937:
  %% Argument types:
  %%    _31 => {''EXIT'', any()}
  %% Aliased:
  %%    _31
  _159 = get_tuple_element _31, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _159
  _934 = bif:is_tuple _159
  br _934, ^934, ^464

934:
  %% Argument types:
  %%    _159 => {...}
  %% Aliased:
  %%    _159
  _935 = bif:tuple_size _159

  %% Argument types:
  %%    _935 => 0..16777215
  %% Unique:
  %%    _935
  _936 = bif:'=:=' _935, `2`
  br _936, ^933, ^464

933:
  %% Argument types:
  %%    _159 => {any(), any()}
  %% Aliased:
  %%    _159
  _162 = get_tuple_element _159, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _932 = bif:'=:=' _162, `{badmatch,55}`
  br _932, ^932, ^464

932:
  %% fun_SUITE.erl:364
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _34 = call (`id`/1), `33`

  %% Aliased:
  %%    _34
  _465 = succeeded:body _34
  br _465, ^465, ^1

465:
  %% fun_SUITE.erl:364
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _33 = call (`id`/1), `33`

  %% Aliased:
  %%    _33
  _466 = succeeded:body _33
  br _466, ^466, ^1

466:
  %% fun_SUITE.erl:364
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _33, 
  %%    _34
  _163 = call (`parallel_scopes_5`/2), _34, _33

  %% Aliased:
  %%    _163
  _467 = succeeded:body _163
  br _467, ^467, ^1

467:
  %% Argument types:
  %%    _163 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _163
  _930 = bif:'=:=' _163, `33`
  br _930, ^1423, ^469

1423:
  br ^1447

1447:
  _473 = new_try_tag `'catch'`
  br _473, ^471, ^472

471:
  %% fun_SUITE.erl:365
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _255 = call (`parallel_scopes_5`/2), `33`, `44`

  %% Aliased:
  %%    _255
  _475 = succeeded:body _255
  br _475, ^475, ^472

475:
  br ^470

472:
  %% Unique:
  %%    _473
  _478 = landingpad `'catch'`, _473

  %% Aliased:
  %%    _478
  _476 = extract _478, `0`
  br ^470

470:
  _479 = phi { _476, ^472 }, { _255, ^475 }

  %% Aliased:
  %%    _479
  %% Unique:
  %%    _473
  _36 = catch_end _473, _479

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _925 = is_tagged_tuple _36, `2`, `'EXIT'`
  br _925, ^922, ^481

922:
  %% Argument types:
  %%    _36 => {''EXIT'', any()}
  %% Aliased:
  %%    _36
  _164 = get_tuple_element _36, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _164
  _919 = bif:is_tuple _164
  br _919, ^919, ^481

919:
  %% Argument types:
  %%    _164 => {...}
  %% Aliased:
  %%    _164
  _920 = bif:tuple_size _164

  %% Argument types:
  %%    _920 => 0..16777215
  %% Unique:
  %%    _920
  _921 = bif:'=:=' _920, `2`
  br _921, ^918, ^481

918:
  %% Argument types:
  %%    _164 => {any(), any()}
  %% Aliased:
  %%    _164
  _167 = get_tuple_element _164, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _167
  _917 = bif:'=:=' _167, `{badmatch,44}`
  br _917, ^917, ^481

917:
  %% fun_SUITE.erl:367
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _39 = call (`id`/1), `99`

  %% Aliased:
  %%    _39
  _482 = succeeded:body _39
  br _482, ^482, ^1

482:
  %% fun_SUITE.erl:367
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _38 = call (`id`/1), `99`

  %% Aliased:
  %%    _38
  _483 = succeeded:body _38
  br _483, ^483, ^1

483:
  %% fun_SUITE.erl:367
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _38, 
  %%    _39
  _168 = call (`parallel_scopes_6`/2), _39, _38

  %% Aliased:
  %%    _168
  _484 = succeeded:body _168
  br _484, ^484, ^1

484:
  %% Argument types:
  %%    _168 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _168
  _915 = bif:'=:=' _168, `99`
  br _915, ^1424, ^486

1424:
  br ^1448

1448:
  _490 = new_try_tag `'catch'`
  br _490, ^488, ^489

488:
  %% fun_SUITE.erl:368
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _257 = call (`parallel_scopes_6`/2), `77`, `88`

  %% Aliased:
  %%    _257
  _492 = succeeded:body _257
  br _492, ^492, ^489

492:
  br ^487

489:
  %% Unique:
  %%    _490
  _495 = landingpad `'catch'`, _490

  %% Aliased:
  %%    _495
  _493 = extract _495, `0`
  br ^487

487:
  _496 = phi { _493, ^489 }, { _257, ^492 }

  %% Aliased:
  %%    _496
  %% Unique:
  %%    _490
  _41 = catch_end _490, _496

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _910 = is_tagged_tuple _41, `2`, `'EXIT'`
  br _910, ^907, ^498

907:
  %% Argument types:
  %%    _41 => {''EXIT'', any()}
  %% Aliased:
  %%    _41
  _169 = get_tuple_element _41, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _169
  _904 = bif:is_tuple _169
  br _904, ^904, ^498

904:
  %% Argument types:
  %%    _169 => {...}
  %% Aliased:
  %%    _169
  _905 = bif:tuple_size _169

  %% Argument types:
  %%    _905 => 0..16777215
  %% Unique:
  %%    _905
  _906 = bif:'=:=' _905, `2`
  br _906, ^903, ^498

903:
  %% Argument types:
  %%    _169 => {any(), any()}
  %% Aliased:
  %%    _169
  _172 = get_tuple_element _169, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _902 = bif:'=:=' _172, `{badmatch,88}`
  br _902, ^902, ^498

902:
  %% fun_SUITE.erl:370
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _44 = call (`id`/1), `99`

  %% Aliased:
  %%    _44
  _499 = succeeded:body _44
  br _499, ^499, ^1

499:
  %% fun_SUITE.erl:370
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _43 = call (`id`/1), `99`

  %% Aliased:
  %%    _43
  _500 = succeeded:body _43
  br _500, ^500, ^1

500:
  %% fun_SUITE.erl:370
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _43, 
  %%    _44
  _173 = call (`parallel_scopes_7`/2), _44, _43

  %% Aliased:
  %%    _173
  _501 = succeeded:body _173
  br _501, ^501, ^1

501:
  %% Argument types:
  %%    _173 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _173
  _900 = bif:'=:=' _173, `99`
  br _900, ^1425, ^503

1425:
  br ^1449

1449:
  _507 = new_try_tag `'catch'`
  br _507, ^505, ^506

505:
  %% fun_SUITE.erl:371
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _259 = call (`parallel_scopes_7`/2), `77`, `88`

  %% Aliased:
  %%    _259
  _509 = succeeded:body _259
  br _509, ^509, ^506

509:
  br ^504

506:
  %% Unique:
  %%    _507
  _512 = landingpad `'catch'`, _507

  %% Aliased:
  %%    _512
  _510 = extract _512, `0`
  br ^504

504:
  _513 = phi { _510, ^506 }, { _259, ^509 }

  %% Aliased:
  %%    _513
  %% Unique:
  %%    _507
  _46 = catch_end _507, _513

  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _895 = is_tagged_tuple _46, `2`, `'EXIT'`
  br _895, ^892, ^515

892:
  %% Argument types:
  %%    _46 => {''EXIT'', any()}
  %% Aliased:
  %%    _46
  _174 = get_tuple_element _46, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _174
  _889 = bif:is_tuple _174
  br _889, ^889, ^515

889:
  %% Argument types:
  %%    _174 => {...}
  %% Aliased:
  %%    _174
  _890 = bif:tuple_size _174

  %% Argument types:
  %%    _890 => 0..16777215
  %% Unique:
  %%    _890
  _891 = bif:'=:=' _890, `2`
  br _891, ^888, ^515

888:
  %% Argument types:
  %%    _174 => {any(), any()}
  %% Aliased:
  %%    _174
  _177 = get_tuple_element _174, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _177
  _887 = bif:'=:=' _177, `{badmatch,88}`
  br _887, ^887, ^515

887:
  %% fun_SUITE.erl:373
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _49 = call (`id`/1), `199`

  %% Aliased:
  %%    _49
  _516 = succeeded:body _49
  br _516, ^516, ^1

516:
  %% fun_SUITE.erl:373
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _48 = call (`id`/1), `199`

  %% Aliased:
  %%    _48
  _517 = succeeded:body _48
  br _517, ^517, ^1

517:
  %% fun_SUITE.erl:373
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _48, 
  %%    _49
  _178 = call (`parallel_scopes_8`/2), _49, _48

  %% Aliased:
  %%    _178
  _518 = succeeded:body _178
  br _518, ^518, ^1

518:
  %% Argument types:
  %%    _178 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _178
  _885 = bif:'=:=' _178, `199`
  br _885, ^1426, ^520

1426:
  br ^1450

1450:
  _524 = new_try_tag `'catch'`
  br _524, ^522, ^523

522:
  %% fun_SUITE.erl:374
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _52 = call (`id`/1), `199`

  %% Aliased:
  %%    _52
  _526 = succeeded:body _52
  br _526, ^526, ^523

526:
  %% fun_SUITE.erl:374
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _51 = call (`id`/1), `200`

  %% Aliased:
  %%    _51
  _527 = succeeded:body _51
  br _527, ^527, ^523

527:
  %% fun_SUITE.erl:374
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _51, 
  %%    _52
  _261 = call (`parallel_scopes_8`/2), _52, _51

  %% Aliased:
  %%    _261
  _528 = succeeded:body _261
  br _528, ^528, ^523

528:
  br ^521

523:
  %% Unique:
  %%    _524
  _531 = landingpad `'catch'`, _524

  %% Aliased:
  %%    _531
  _529 = extract _531, `0`
  br ^521

521:
  _532 = phi { _529, ^523 }, { _261, ^528 }

  %% Aliased:
  %%    _532
  %% Unique:
  %%    _524
  _53 = catch_end _524, _532

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _880 = is_tagged_tuple _53, `2`, `'EXIT'`
  br _880, ^877, ^534

877:
  %% Argument types:
  %%    _53 => {''EXIT'', any()}
  %% Aliased:
  %%    _53
  _179 = get_tuple_element _53, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _179
  _874 = bif:is_tuple _179
  br _874, ^874, ^534

874:
  %% Argument types:
  %%    _179 => {...}
  %% Aliased:
  %%    _179
  _875 = bif:tuple_size _179

  %% Argument types:
  %%    _875 => 0..16777215
  %% Unique:
  %%    _875
  _876 = bif:'=:=' _875, `2`
  br _876, ^873, ^534

873:
  %% Argument types:
  %%    _179 => {any(), any()}
  %% Aliased:
  %%    _179
  _182 = get_tuple_element _179, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _182
  _872 = bif:'=:=' _182, `{badmatch,200}`
  br _872, ^872, ^534

872:
  %% fun_SUITE.erl:376
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _58 = call (`id`/1), `299`

  %% Aliased:
  %%    _58
  _535 = succeeded:body _58
  br _535, ^535, ^1

535:
  %% fun_SUITE.erl:376
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _57 = call (`id`/1), `299`

  %% Aliased:
  %%    _57
  _536 = succeeded:body _57
  br _536, ^536, ^1

536:
  %% fun_SUITE.erl:376
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _56 = call (`id`/1), `598`

  %% Aliased:
  %%    _56
  _537 = succeeded:body _56
  br _537, ^537, ^1

537:
  %% fun_SUITE.erl:376
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))}
  %% Aliased:
  %%    _56, 
  %%    _57, 
  %%    _58
  _183 = call (`parallel_scopes_9`/3), _58, _57, _56

  %% Unique:
  %%    _183
  _538 = succeeded:body _183
  br _538, ^538, ^1

538:
  %% Argument types:
  %%    _183 => {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))}
  %% Unique:
  %%    _183
  _870 = bif:'=:=' _183, `{299,598}`
  br _870, ^1427, ^540

1427:
  br ^1451

1451:
  _544 = new_try_tag `'catch'`
  br _544, ^542, ^543

542:
  %% fun_SUITE.erl:377
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _62 = call (`id`/1), `299`

  %% Aliased:
  %%    _62
  _546 = succeeded:body _62
  br _546, ^546, ^543

546:
  %% fun_SUITE.erl:377
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _61 = call (`id`/1), `300`

  %% Aliased:
  %%    _61
  _547 = succeeded:body _61
  br _547, ^547, ^543

547:
  %% fun_SUITE.erl:377
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _60 = call (`id`/1), `0`

  %% Aliased:
  %%    _60
  _548 = succeeded:body _60
  br _548, ^548, ^543

548:
  %% fun_SUITE.erl:377
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))}
  %% Aliased:
  %%    _60, 
  %%    _61, 
  %%    _62
  _263 = call (`parallel_scopes_9`/3), _62, _61, _60

  %% Unique:
  %%    _263
  _549 = succeeded:body _263
  br _549, ^549, ^543

549:
  br ^541

543:
  %% Unique:
  %%    _544
  _552 = landingpad `'catch'`, _544

  %% Aliased:
  %%    _552
  _550 = extract _552, `0`
  br ^541

541:
  _553 = phi { _550, ^543 }, { _263, ^549 }

  %% Aliased:
  %%    _553
  %% Unique:
  %%    _544
  _63 = catch_end _544, _553

  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _866 = is_tagged_tuple _63, `2`, `'EXIT'`
  br _866, ^863, ^555

863:
  %% Argument types:
  %%    _63 => {''EXIT'', any()}
  %% Aliased:
  %%    _63
  _184 = get_tuple_element _63, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _184
  _860 = bif:is_tuple _184
  br _860, ^860, ^555

860:
  %% Argument types:
  %%    _184 => {...}
  %% Aliased:
  %%    _184
  _861 = bif:tuple_size _184

  %% Argument types:
  %%    _861 => 0..16777215
  %% Unique:
  %%    _861
  _862 = bif:'=:=' _861, `2`
  br _862, ^859, ^555

859:
  %% Argument types:
  %%    _184 => {any(), any()}
  %% Aliased:
  %%    _184
  _187 = get_tuple_element _184, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _187
  _858 = bif:'=:=' _187, `{badmatch,300}`
  br _858, ^1428, ^555

1428:
  br ^1452

1452:
  _559 = new_try_tag `'catch'`
  br _559, ^557, ^558

557:
  %% fun_SUITE.erl:378
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _67 = call (`id`/1), `299`

  %% Aliased:
  %%    _67
  _561 = succeeded:body _67
  br _561, ^561, ^558

561:
  %% fun_SUITE.erl:378
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _66 = call (`id`/1), `299`

  %% Aliased:
  %%    _66
  _562 = succeeded:body _66
  br _562, ^562, ^558

562:
  %% fun_SUITE.erl:378
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _65 = call (`id`/1), `0`

  %% Aliased:
  %%    _65
  _563 = succeeded:body _65
  br _563, ^563, ^558

563:
  %% fun_SUITE.erl:378
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))}
  %% Aliased:
  %%    _65, 
  %%    _66, 
  %%    _67
  _265 = call (`parallel_scopes_9`/3), _67, _66, _65

  %% Unique:
  %%    _265
  _564 = succeeded:body _265
  br _564, ^564, ^558

564:
  br ^556

558:
  %% Unique:
  %%    _559
  _567 = landingpad `'catch'`, _559

  %% Aliased:
  %%    _567
  _565 = extract _567, `0`
  br ^556

556:
  _568 = phi { _565, ^558 }, { _265, ^564 }

  %% Aliased:
  %%    _568
  %% Unique:
  %%    _559
  _68 = catch_end _559, _568

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _854 = is_tagged_tuple _68, `2`, `'EXIT'`
  br _854, ^851, ^570

851:
  %% Argument types:
  %%    _68 => {''EXIT'', any()}
  %% Aliased:
  %%    _68
  _188 = get_tuple_element _68, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _188
  _848 = bif:is_tuple _188
  br _848, ^848, ^570

848:
  %% Argument types:
  %%    _188 => {...}
  %% Aliased:
  %%    _188
  _849 = bif:tuple_size _188

  %% Argument types:
  %%    _849 => 0..16777215
  %% Unique:
  %%    _849
  _850 = bif:'=:=' _849, `2`
  br _850, ^847, ^570

847:
  %% Argument types:
  %%    _188 => {any(), any()}
  %% Aliased:
  %%    _188
  _191 = get_tuple_element _188, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _191
  _846 = bif:'=:=' _191, `{badmatch,0}`
  br _846, ^846, ^570

846:
  %% fun_SUITE.erl:380
  %% Result type:
  %%    333..999
  _192 = call (`parallel_scopes_10`/4), `false`, `999`, `ignored`, `999`

  %% Unique:
  %%    _192
  _571 = succeeded:body _192
  br _571, ^571, ^1

571:
  %% Argument types:
  %%    _192 => 333..999
  %% Unique:
  %%    _192
  _844 = bif:'=:=' _192, `999`
  br _844, ^1429, ^573

1429:
  br ^1453

1453:
  _577 = new_try_tag `'catch'`
  br _577, ^575, ^576

575:
  %% fun_SUITE.erl:381
  %% Result type:
  %%    333..999
  _267 = call (`parallel_scopes_10`/4), `false`, `700`, `ignored`, `700`

  %% Unique:
  %%    _267
  _579 = succeeded:body _267
  br _579, ^579, ^576

579:
  br ^574

576:
  %% Unique:
  %%    _577
  _582 = landingpad `'catch'`, _577

  %% Aliased:
  %%    _582
  _580 = extract _582, `0`
  br ^574

574:
  _583 = phi { _580, ^576 }, { _267, ^579 }

  %% Aliased:
  %%    _583
  %% Unique:
  %%    _577
  _71 = catch_end _577, _583

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _839 = is_tagged_tuple _71, `2`, `'EXIT'`
  br _839, ^836, ^585

836:
  %% Argument types:
  %%    _71 => {''EXIT'', any()}
  %% Aliased:
  %%    _71
  _193 = get_tuple_element _71, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _193
  _833 = bif:is_tuple _193
  br _833, ^833, ^585

833:
  %% Argument types:
  %%    _193 => {...}
  %% Aliased:
  %%    _193
  _834 = bif:tuple_size _193

  %% Argument types:
  %%    _834 => 0..16777215
  %% Unique:
  %%    _834
  _835 = bif:'=:=' _834, `2`
  br _835, ^832, ^585

832:
  %% Argument types:
  %%    _193 => {any(), any()}
  %% Aliased:
  %%    _193
  _196 = get_tuple_element _193, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _196
  _831 = bif:'=:=' _196, `{badmatch,999}`
  br _831, ^1430, ^585

1430:
  br ^1454

1454:
  _589 = new_try_tag `'catch'`
  br _589, ^587, ^588

587:
  %% fun_SUITE.erl:382
  %% Result type:
  %%    333..999
  _269 = call (`parallel_scopes_10`/4), `false`, `999`, `ignored`, `1000`

  %% Unique:
  %%    _269
  _591 = succeeded:body _269
  br _591, ^591, ^588

591:
  br ^586

588:
  %% Unique:
  %%    _589
  _594 = landingpad `'catch'`, _589

  %% Aliased:
  %%    _594
  _592 = extract _594, `0`
  br ^586

586:
  _595 = phi { _592, ^588 }, { _269, ^591 }

  %% Aliased:
  %%    _595
  %% Unique:
  %%    _589
  _73 = catch_end _589, _595

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _827 = is_tagged_tuple _73, `2`, `'EXIT'`
  br _827, ^824, ^597

824:
  %% Argument types:
  %%    _73 => {''EXIT'', any()}
  %% Aliased:
  %%    _73
  _197 = get_tuple_element _73, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _197
  _821 = bif:is_tuple _197
  br _821, ^821, ^597

821:
  %% Argument types:
  %%    _197 => {...}
  %% Aliased:
  %%    _197
  _822 = bif:tuple_size _197

  %% Argument types:
  %%    _822 => 0..16777215
  %% Unique:
  %%    _822
  _823 = bif:'=:=' _822, `2`
  br _823, ^820, ^597

820:
  %% Argument types:
  %%    _197 => {any(), any()}
  %% Aliased:
  %%    _197
  _200 = get_tuple_element _197, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _200
  _819 = bif:'=:=' _200, `{badmatch,1000}`
  br _819, ^819, ^597

819:
  %% fun_SUITE.erl:383
  %% Result type:
  %%    333..999
  _201 = call (`parallel_scopes_10`/4), `true`, `999`, `999`, `ignored`

  %% Unique:
  %%    _201
  _598 = succeeded:body _201
  br _598, ^598, ^1

598:
  %% Argument types:
  %%    _201 => 333..999
  %% Unique:
  %%    _201
  _817 = bif:'=:=' _201, `999`
  br _817, ^816, ^600

816:
  %% fun_SUITE.erl:384
  %% Result type:
  %%    333..999
  _202 = call (`parallel_scopes_10`/4), `true`, `333`, `333`, `ignored`

  %% Unique:
  %%    _202
  _601 = succeeded:body _202
  br _601, ^601, ^1

601:
  %% Argument types:
  %%    _202 => 333..999
  %% Unique:
  %%    _202
  _814 = bif:'=:=' _202, `333`
  br _814, ^1431, ^603

1431:
  br ^1455

1455:
  _607 = new_try_tag `'catch'`
  br _607, ^605, ^606

605:
  %% fun_SUITE.erl:385
  %% Result type:
  %%    333..999
  _271 = call (`parallel_scopes_10`/4), `true`, `900`, `901`, `ignored`

  %% Unique:
  %%    _271
  _609 = succeeded:body _271
  br _609, ^609, ^606

609:
  br ^604

606:
  %% Unique:
  %%    _607
  _612 = landingpad `'catch'`, _607

  %% Aliased:
  %%    _612
  _610 = extract _612, `0`
  br ^604

604:
  _613 = phi { _610, ^606 }, { _271, ^609 }

  %% Aliased:
  %%    _613
  %% Unique:
  %%    _607
  _77 = catch_end _607, _613

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _809 = is_tagged_tuple _77, `2`, `'EXIT'`
  br _809, ^806, ^615

806:
  %% Argument types:
  %%    _77 => {''EXIT'', any()}
  %% Aliased:
  %%    _77
  _203 = get_tuple_element _77, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _203
  _803 = bif:is_tuple _203
  br _803, ^803, ^615

803:
  %% Argument types:
  %%    _203 => {...}
  %% Aliased:
  %%    _203
  _804 = bif:tuple_size _203

  %% Argument types:
  %%    _804 => 0..16777215
  %% Unique:
  %%    _804
  _805 = bif:'=:=' _804, `2`
  br _805, ^802, ^615

802:
  %% Argument types:
  %%    _203 => {any(), any()}
  %% Aliased:
  %%    _203
  _206 = get_tuple_element _203, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _206
  _801 = bif:'=:=' _206, `{badmatch,901}`
  br _801, ^801, ^615

801:
  %% fun_SUITE.erl:387
  %% Result type:
  %%    889
  _207 = call (`parallel_scopes_11`/3), `889`, `889`, `889`

  %% Unique:
  %%    _207
  _616 = succeeded:body _207
  br _616, ^1432, ^1

1432:
  br ^1456

1456:
  _622 = new_try_tag `'catch'`
  br _622, ^620, ^621

620:
  %% fun_SUITE.erl:388
  %% Result type:
  %%    none()
  _273 = call (`parallel_scopes_11`/3), `889`, `800`, `889`

  %% Aliased:
  %%    _273
  _624 = succeeded:body _273
  br ^621

621:
  %% Unique:
  %%    _622
  _627 = landingpad `'catch'`, _622

  %% Aliased:
  %%    _627
  _625 = extract _627, `0`
  br ^619

619:
  %% Aliased:
  %%    _625
  %% Unique:
  %%    _622
  _80 = catch_end _622, _625

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _794 = is_tagged_tuple _80, `2`, `'EXIT'`
  br _794, ^791, ^630

791:
  %% Argument types:
  %%    _80 => {''EXIT'', any()}
  %% Aliased:
  %%    _80
  _208 = get_tuple_element _80, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _208
  _788 = bif:is_tuple _208
  br _788, ^788, ^630

788:
  %% Argument types:
  %%    _208 => {...}
  %% Aliased:
  %%    _208
  _789 = bif:tuple_size _208

  %% Argument types:
  %%    _789 => 0..16777215
  %% Unique:
  %%    _789
  _790 = bif:'=:=' _789, `2`
  br _790, ^787, ^630

787:
  %% Argument types:
  %%    _208 => {any(), any()}
  %% Aliased:
  %%    _208
  _211 = get_tuple_element _208, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _211
  _786 = bif:'=:=' _211, `{badmatch,800}`
  br _786, ^1433, ^630

1433:
  br ^1457

1457:
  _634 = new_try_tag `'catch'`
  br _634, ^632, ^633

632:
  %% fun_SUITE.erl:389
  %% Result type:
  %%    none()
  _275 = call (`parallel_scopes_11`/3), `889`, `889`, `810`

  %% Aliased:
  %%    _275
  _636 = succeeded:body _275
  br ^633

633:
  %% Unique:
  %%    _634
  _639 = landingpad `'catch'`, _634

  %% Aliased:
  %%    _639
  _637 = extract _639, `0`
  br ^631

631:
  %% Aliased:
  %%    _637
  %% Unique:
  %%    _634
  _82 = catch_end _634, _637

  %% Argument types:
  %%    
  %% Aliased:
  %%    _82
  _782 = is_tagged_tuple _82, `2`, `'EXIT'`
  br _782, ^779, ^642

779:
  %% Argument types:
  %%    _82 => {''EXIT'', any()}
  %% Aliased:
  %%    _82
  _212 = get_tuple_element _82, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _212
  _776 = bif:is_tuple _212
  br _776, ^776, ^642

776:
  %% Argument types:
  %%    _212 => {...}
  %% Aliased:
  %%    _212
  _777 = bif:tuple_size _212

  %% Argument types:
  %%    _777 => 0..16777215
  %% Unique:
  %%    _777
  _778 = bif:'=:=' _777, `2`
  br _778, ^775, ^642

775:
  %% Argument types:
  %%    _212 => {any(), any()}
  %% Aliased:
  %%    _212
  _215 = get_tuple_element _212, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _215
  _774 = bif:'=:=' _215, `{badmatch,810}`
  br _774, ^1434, ^642

1434:
  br ^1458

1458:
  _646 = new_try_tag `'catch'`
  br _646, ^644, ^645

644:
  %% fun_SUITE.erl:390
  %% Result type:
  %%    none()
  _277 = call (`parallel_scopes_11`/3), `a`, `a`, `a`

  %% Aliased:
  %%    _277
  _648 = succeeded:body _277
  br ^645

645:
  %% Unique:
  %%    _646
  _651 = landingpad `'catch'`, _646

  %% Aliased:
  %%    _651
  _649 = extract _651, `0`
  br ^643

643:
  %% Aliased:
  %%    _649
  %% Unique:
  %%    _646
  _84 = catch_end _646, _649

  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _770 = is_tagged_tuple _84, `2`, `'EXIT'`
  br _770, ^767, ^654

767:
  %% Argument types:
  %%    _84 => {''EXIT'', any()}
  %% Aliased:
  %%    _84
  _216 = get_tuple_element _84, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _216
  _764 = bif:is_tuple _216
  br _764, ^764, ^654

764:
  %% Argument types:
  %%    _216 => {...}
  %% Aliased:
  %%    _216
  _765 = bif:tuple_size _216

  %% Argument types:
  %%    _765 => 0..16777215
  %% Unique:
  %%    _765
  _766 = bif:'=:=' _765, `2`
  br _766, ^763, ^654

763:
  %% Argument types:
  %%    _216 => {any(), any()}
  %% Aliased:
  %%    _216
  _219 = get_tuple_element _216, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _219
  _762 = bif:'=:=' _219, `{badmatch,889}`
  br _762, ^762, ^654

762:
  %% fun_SUITE.erl:392
  %% Result type:
  %%    333
  _220 = call (`parallel_scopes_12`/3), `333`, `333`, `333`

  %% Unique:
  %%    _220
  _655 = succeeded:body _220
  br _655, ^1435, ^1

1435:
  br ^1459

1459:
  _661 = new_try_tag `'catch'`
  br _661, ^659, ^660

659:
  %% fun_SUITE.erl:393
  %% Result type:
  %%    none()
  _279 = call (`parallel_scopes_12`/3), `333`, `other`, `333`

  %% Aliased:
  %%    _279
  _663 = succeeded:body _279
  br ^660

660:
  %% Unique:
  %%    _661
  _666 = landingpad `'catch'`, _661

  %% Aliased:
  %%    _666
  _664 = extract _666, `0`
  br ^658

658:
  %% Aliased:
  %%    _664
  %% Unique:
  %%    _661
  _87 = catch_end _661, _664

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _755 = is_tagged_tuple _87, `2`, `'EXIT'`
  br _755, ^752, ^669

752:
  %% Argument types:
  %%    _87 => {''EXIT'', any()}
  %% Aliased:
  %%    _87
  _221 = get_tuple_element _87, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _221
  _749 = bif:is_tuple _221
  br _749, ^749, ^669

749:
  %% Argument types:
  %%    _221 => {...}
  %% Aliased:
  %%    _221
  _750 = bif:tuple_size _221

  %% Argument types:
  %%    _750 => 0..16777215
  %% Unique:
  %%    _750
  _751 = bif:'=:=' _750, `2`
  br _751, ^748, ^669

748:
  %% Argument types:
  %%    _221 => {any(), any()}
  %% Aliased:
  %%    _221
  _224 = get_tuple_element _221, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _224
  _747 = bif:'=:=' _224, `{badmatch,other}`
  br _747, ^1436, ^669

1436:
  br ^1460

1460:
  _673 = new_try_tag `'catch'`
  br _673, ^671, ^672

671:
  %% fun_SUITE.erl:394
  %% Result type:
  %%    none()
  _281 = call (`parallel_scopes_12`/3), `333`, `333`, `nope`

  %% Aliased:
  %%    _281
  _675 = succeeded:body _281
  br ^672

672:
  %% Unique:
  %%    _673
  _678 = landingpad `'catch'`, _673

  %% Aliased:
  %%    _678
  _676 = extract _678, `0`
  br ^670

670:
  %% Aliased:
  %%    _676
  %% Unique:
  %%    _673
  _89 = catch_end _673, _676

  %% Argument types:
  %%    
  %% Aliased:
  %%    _89
  _743 = is_tagged_tuple _89, `2`, `'EXIT'`
  br _743, ^740, ^681

740:
  %% Argument types:
  %%    _89 => {''EXIT'', any()}
  %% Aliased:
  %%    _89
  _225 = get_tuple_element _89, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _225
  _737 = bif:is_tuple _225
  br _737, ^737, ^681

737:
  %% Argument types:
  %%    _225 => {...}
  %% Aliased:
  %%    _225
  _738 = bif:tuple_size _225

  %% Argument types:
  %%    _738 => 0..16777215
  %% Unique:
  %%    _738
  _739 = bif:'=:=' _738, `2`
  br _739, ^736, ^681

736:
  %% Argument types:
  %%    _225 => {any(), any()}
  %% Aliased:
  %%    _225
  _228 = get_tuple_element _225, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _228
  _735 = bif:'=:=' _228, `{badmatch,nope}`
  br _735, ^735, ^681

735:
  %% fun_SUITE.erl:396
  %% Result type:
  %%    nonempty_list(1..100)
  _229 = call (`parallel_scopes_13`/2), `99`, `100`

  %% Unique:
  %%    _229
  _682 = succeeded:body _229
  br _682, ^682, ^1

682:
  %% Argument types:
  %%    _229 => nonempty_list(1..100)
  %% Unique:
  %%    _229
  _733 = bif:'=:=' _229, `[1,100]`
  br _733, ^1437, ^684

1437:
  br ^1461

1461:
  _688 = new_try_tag `'catch'`
  br _688, ^686, ^687

686:
  %% fun_SUITE.erl:397
  %% Result type:
  %%    none()
  _283 = call (`parallel_scopes_13`/2), `no`, `100`

  %% Aliased:
  %%    _283
  _690 = succeeded:body _283
  br ^687

687:
  %% Unique:
  %%    _688
  _693 = landingpad `'catch'`, _688

  %% Aliased:
  %%    _693
  _691 = extract _693, `0`
  br ^685

685:
  %% Aliased:
  %%    _691
  %% Unique:
  %%    _688
  _92 = catch_end _688, _691

  %% Argument types:
  %%    
  %% Aliased:
  %%    _92
  _729 = is_tagged_tuple _92, `2`, `'EXIT'`
  br _729, ^726, ^696

726:
  %% Argument types:
  %%    _92 => {''EXIT'', any()}
  %% Aliased:
  %%    _92
  _230 = get_tuple_element _92, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _230
  _723 = bif:is_tuple _230
  br _723, ^723, ^696

723:
  %% Argument types:
  %%    _230 => {...}
  %% Aliased:
  %%    _230
  _724 = bif:tuple_size _230

  %% Argument types:
  %%    _724 => 0..16777215
  %% Unique:
  %%    _724
  _725 = bif:'=:=' _724, `2`
  br _725, ^722, ^696

722:
  %% Argument types:
  %%    _230 => {any(), any()}
  %% Aliased:
  %%    _230
  _233 = get_tuple_element _230, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _233
  _721 = bif:'=:=' _233, `{badmatch,no}`
  br _721, ^1438, ^696

1438:
  br ^1462

1462:
  _700 = new_try_tag `'catch'`
  br _700, ^698, ^699

698:
  %% fun_SUITE.erl:398
  %% Result type:
  %%    none()
  _285 = call (`parallel_scopes_13`/2), `99`, `nope`

  %% Aliased:
  %%    _285
  _702 = succeeded:body _285
  br ^699

699:
  %% Unique:
  %%    _700
  _705 = landingpad `'catch'`, _700

  %% Aliased:
  %%    _705
  _703 = extract _705, `0`
  br ^697

697:
  %% Aliased:
  %%    _703
  %% Unique:
  %%    _700
  _94 = catch_end _700, _703

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _717 = is_tagged_tuple _94, `2`, `'EXIT'`
  br _717, ^714, ^708

714:
  %% Argument types:
  %%    _94 => {''EXIT'', any()}
  %% Aliased:
  %%    _94
  _234 = get_tuple_element _94, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _234
  _711 = bif:is_tuple _234
  br _711, ^711, ^708

711:
  %% Argument types:
  %%    _234 => {...}
  %% Aliased:
  %%    _234
  _712 = bif:tuple_size _234

  %% Argument types:
  %%    _712 => 0..16777215
  %% Unique:
  %%    _712
  _713 = bif:'=:=' _712, `2`
  br _713, ^710, ^708

710:
  %% Argument types:
  %%    _234 => {any(), any()}
  %% Aliased:
  %%    _234
  _237 = get_tuple_element _234, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _237
  _709 = bif:'=:=' _237, `{badmatch,nope}`
  br _709, ^709, ^708

709:
  %% Result type:
  %%    'ok'
  ret `ok`

708:
  %% fun_SUITE.erl:398
  %% Aliased:
  %%    _94
  _286 = match_fail `badmatch`, _94

  %% Unique:
  %%    _286
  _720 = succeeded:body _286
  br ^1

696:
  %% fun_SUITE.erl:397
  %% Aliased:
  %%    _92
  _287 = match_fail `badmatch`, _92

  %% Unique:
  %%    _287
  _732 = succeeded:body _287
  br ^1

684:
  %% fun_SUITE.erl:396
  %% Unique:
  %%    _229
  _288 = match_fail `badmatch`, _229

  %% Unique:
  %%    _288
  _734 = succeeded:body _288
  br ^1

681:
  %% fun_SUITE.erl:394
  %% Aliased:
  %%    _89
  _289 = match_fail `badmatch`, _89

  %% Unique:
  %%    _289
  _746 = succeeded:body _289
  br ^1

669:
  %% fun_SUITE.erl:393
  %% Aliased:
  %%    _87
  _290 = match_fail `badmatch`, _87

  %% Unique:
  %%    _290
  _758 = succeeded:body _290
  br ^1

654:
  %% fun_SUITE.erl:390
  %% Aliased:
  %%    _84
  _292 = match_fail `badmatch`, _84

  %% Unique:
  %%    _292
  _773 = succeeded:body _292
  br ^1

642:
  %% fun_SUITE.erl:389
  %% Aliased:
  %%    _82
  _293 = match_fail `badmatch`, _82

  %% Unique:
  %%    _293
  _785 = succeeded:body _293
  br ^1

630:
  %% fun_SUITE.erl:388
  %% Aliased:
  %%    _80
  _294 = match_fail `badmatch`, _80

  %% Unique:
  %%    _294
  _797 = succeeded:body _294
  br ^1

615:
  %% fun_SUITE.erl:385
  %% Aliased:
  %%    _77
  _296 = match_fail `badmatch`, _77

  %% Unique:
  %%    _296
  _812 = succeeded:body _296
  br ^1

603:
  %% fun_SUITE.erl:384
  %% Unique:
  %%    _202
  _297 = match_fail `badmatch`, _202

  %% Unique:
  %%    _297
  _815 = succeeded:body _297
  br ^1

600:
  %% fun_SUITE.erl:383
  %% Unique:
  %%    _201
  _298 = match_fail `badmatch`, _201

  %% Unique:
  %%    _298
  _818 = succeeded:body _298
  br ^1

597:
  %% fun_SUITE.erl:382
  %% Aliased:
  %%    _73
  _299 = match_fail `badmatch`, _73

  %% Unique:
  %%    _299
  _830 = succeeded:body _299
  br ^1

585:
  %% fun_SUITE.erl:381
  %% Aliased:
  %%    _71
  _300 = match_fail `badmatch`, _71

  %% Unique:
  %%    _300
  _842 = succeeded:body _300
  br ^1

573:
  %% fun_SUITE.erl:380
  %% Unique:
  %%    _192
  _301 = match_fail `badmatch`, _192

  %% Unique:
  %%    _301
  _845 = succeeded:body _301
  br ^1

570:
  %% fun_SUITE.erl:378
  %% Aliased:
  %%    _68
  _302 = match_fail `badmatch`, _68

  %% Unique:
  %%    _302
  _857 = succeeded:body _302
  br ^1

555:
  %% fun_SUITE.erl:377
  %% Aliased:
  %%    _63
  _303 = match_fail `badmatch`, _63

  %% Unique:
  %%    _303
  _869 = succeeded:body _303
  br ^1

540:
  %% fun_SUITE.erl:376
  %% Unique:
  %%    _183
  _304 = match_fail `badmatch`, _183

  %% Unique:
  %%    _304
  _871 = succeeded:body _304
  br ^1

534:
  %% fun_SUITE.erl:374
  %% Aliased:
  %%    _53
  _305 = match_fail `badmatch`, _53

  %% Unique:
  %%    _305
  _883 = succeeded:body _305
  br ^1

520:
  %% fun_SUITE.erl:373
  %% Aliased:
  %%    _178
  _306 = match_fail `badmatch`, _178

  %% Unique:
  %%    _306
  _886 = succeeded:body _306
  br ^1

515:
  %% fun_SUITE.erl:371
  %% Aliased:
  %%    _46
  _307 = match_fail `badmatch`, _46

  %% Unique:
  %%    _307
  _898 = succeeded:body _307
  br ^1

503:
  %% fun_SUITE.erl:370
  %% Aliased:
  %%    _173
  _308 = match_fail `badmatch`, _173

  %% Unique:
  %%    _308
  _901 = succeeded:body _308
  br ^1

498:
  %% fun_SUITE.erl:368
  %% Aliased:
  %%    _41
  _309 = match_fail `badmatch`, _41

  %% Unique:
  %%    _309
  _913 = succeeded:body _309
  br ^1

486:
  %% fun_SUITE.erl:367
  %% Aliased:
  %%    _168
  _310 = match_fail `badmatch`, _168

  %% Unique:
  %%    _310
  _916 = succeeded:body _310
  br ^1

481:
  %% fun_SUITE.erl:365
  %% Aliased:
  %%    _36
  _311 = match_fail `badmatch`, _36

  %% Unique:
  %%    _311
  _928 = succeeded:body _311
  br ^1

469:
  %% fun_SUITE.erl:364
  %% Aliased:
  %%    _163
  _312 = match_fail `badmatch`, _163

  %% Unique:
  %%    _312
  _931 = succeeded:body _312
  br ^1

464:
  %% fun_SUITE.erl:362
  %% Aliased:
  %%    _31
  _313 = match_fail `badmatch`, _31

  %% Unique:
  %%    _313
  _943 = succeeded:body _313
  br ^1

452:
  %% fun_SUITE.erl:361
  %% Unique:
  %%    _158
  _314 = match_fail `badmatch`, _158

  %% Unique:
  %%    _314
  _945 = succeeded:body _314
  br ^1

447:
  %% fun_SUITE.erl:360
  %% Aliased:
  %%    _26
  _315 = match_fail `badmatch`, _26

  %% Unique:
  %%    _315
  _957 = succeeded:body _315
  br ^1

435:
  %% fun_SUITE.erl:359
  %% Aliased:
  %%    _153
  _316 = match_fail `badmatch`, _153

  %% Unique:
  %%    _316
  _960 = succeeded:body _316
  br ^1

430:
  %% fun_SUITE.erl:358
  %% Aliased:
  %%    _21
  _317 = match_fail `badmatch`, _21

  %% Unique:
  %%    _317
  _972 = succeeded:body _317
  br ^1

418:
  %% fun_SUITE.erl:357
  %% Aliased:
  %%    _148
  _318 = match_fail `badmatch`, _148

  %% Unique:
  %%    _318
  _975 = succeeded:body _318
  br ^1

413:
  %% fun_SUITE.erl:355
  %% Unique:
  %%    _147
  _319 = match_fail `badmatch`, _147

  %% Unique:
  %%    _319
  _977 = succeeded:body _319
  br ^1

410:
  %% fun_SUITE.erl:353
  %% Aliased:
  %%    _15
  _320 = match_fail `badmatch`, _15

  %% Unique:
  %%    _320
  _989 = succeeded:body _320
  br ^1

395:
  %% fun_SUITE.erl:351
  %% Aliased:
  %%    _12
  _322 = match_fail `badmatch`, _12

  %% Unique:
  %%    _322
  _1003 = succeeded:body _322
  br ^1

380:
  %% fun_SUITE.erl:349
  %% Aliased:
  %%    _9
  _324 = match_fail `badmatch`, _9

  %% Unique:
  %%    _324
  _1018 = succeeded:body _324
  br ^1

365:
  %% fun_SUITE.erl:347
  %% Aliased:
  %%    _6
  _326 = match_fail `badmatch`, _6

  %% Unique:
  %%    _326
  _1033 = succeeded:body _326
  br ^1

350:
  %% fun_SUITE.erl:344
  %% Aliased:
  %%    _3
  _328 = match_fail `badmatch`, _3

  %% Unique:
  %%    _328
  _1048 = succeeded:body _328
  br ^1

1:
  _331 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _331
}

%% fun_SUITE.erl:402
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes_1a`() {
0:
  %% Result type:
  %%    1
  ret `1`
}

%% fun_SUITE.erl:407
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes_1b`() {
0:
  %% Result type:
  %%    1
  ret `1`
}

%% fun_SUITE.erl:412
%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes_1c`() {
0:
  %% fun_SUITE.erl:415
  _2 = match_fail `badmatch`, `99`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% fun_SUITE.erl:417
%% Counter = 4
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes_2a`() {
0:
  %% Result type:
  %%    10
  ret `10`
}

%% fun_SUITE.erl:424
%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`parallel_scopes_2b`() {
0:
  %% fun_SUITE.erl:429
  _2 = match_fail `badmatch`, `15`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% fun_SUITE.erl:431
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     500
%%    _1 =>
%%     500..1000
function `fun_SUITE`:`parallel_scopes_2c`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => 500..1000
  %% Unique:
  %%    _1
  _16 = bif:'=:=' _1, `500`
  br _16, ^16, ^15

16:
  %% Result type:
  %%    500
  %% Unique:
  %%    _0
  ret _0

15:
  %% fun_SUITE.erl:436
  %% Unique:
  %%    _1
  _12 = match_fail `badmatch`, _1

  %% Unique:
  %%    _12
  _17 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% fun_SUITE.erl:438
%% Counter = 25
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     600
%%    _1 =>
%%     600..1000
function `fun_SUITE`:`parallel_scopes_2d`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => 600..1000
  %% Unique:
  %%    _1
  _19 = bif:'=:=' _1, `600`
  br _19, ^22, ^18

22:
  %% Result type:
  %%    600
  %% Unique:
  %%    _0
  ret _0

18:
  %% fun_SUITE.erl:443
  %% Unique:
  %%    _1
  _15 = match_fail `badmatch`, _1

  %% Unique:
  %%    _15
  _24 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% fun_SUITE.erl:445
%% Counter = 24
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     20
%%    _1 =>
%%     20..25
function `fun_SUITE`:`parallel_scopes_2e`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => 20..25
  %% Unique:
  %%    _1
  _11 = put_tuple `a`, _1

  %% Argument types:
  %%    _11 => {'a', 20..25}
  %% Unique:
  %%    _11
  _22 = bif:'=:=' _11, `{a,20}`
  br _22, ^22, ^21

22:
  %% Result type:
  %%    {'a', 20}
  ret `{a,20}`

21:
  %% fun_SUITE.erl:450
  %% Unique:
  %%    _11
  _17 = match_fail `badmatch`, _11

  %% Unique:
  %%    _17
  _23 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% fun_SUITE.erl:452
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
function `fun_SUITE`:`parallel_scopes_3`(_0) {
0:
  %% fun_SUITE.erl:453
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _5 = call (`id`/1), `42`

  %% Aliased:
  %%    _5
  _9 = succeeded:body _5
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    _5 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _5
  L = put_list _5, `[2]`

  %% Argument types:
  %%    L => nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %%    _5 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _5
  %% Unique:
  %%    L
  _6 = put_tuple L, _5, `a`
  %% Result type:
  %%    {nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), 'a'}
  %% Unique:
  %%    _6
  ret _6

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% fun_SUITE.erl:457
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_4a`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _18 = bif:'=:=' _1, _0
  br _18, ^18, ^17

18:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0

17:
  %% fun_SUITE.erl:460
  %% Aliased:
  %%    _1
  _14 = match_fail `badmatch`, _1

  %% Unique:
  %%    _14
  _19 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% fun_SUITE.erl:464
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_4b`(_0, _1) {
0:
  %% fun_SUITE.erl:466
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _16 = call (`id`/1), `true`

  %% Aliased:
  %%    _16
  _23 = succeeded:body _16
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _16 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _16
  _27 = bif:'=:=' _16, `true`
  br _27, ^24, ^25

24:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _31 = bif:'=:=' _1, _0
  br _31, ^31, ^30

31:
  %% fun_SUITE.erl:471
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _17 = call (`id`/1), `false`

  %% Aliased:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _17 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _17
  _36 = bif:'=:=' _17, `false`
  br _36, ^33, ^34

33:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0

34:
  %% fun_SUITE.erl:471
  %% Aliased:
  %%    _17
  _19 = match_fail `case_clause`, _17

  %% Unique:
  %%    _19
  _37 = succeeded:body _19
  br ^1

30:
  %% fun_SUITE.erl:470
  %% Aliased:
  %%    _1
  _20 = match_fail `badmatch`, _1

  %% Unique:
  %%    _20
  _38 = succeeded:body _20
  br ^1

25:
  %% fun_SUITE.erl:466
  %% Aliased:
  %%    _16
  _18 = match_fail `case_clause`, _16

  %% Unique:
  %%    _18
  _28 = succeeded:body _18
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% fun_SUITE.erl:477
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_4c`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _20 = bif:'=:=' _1, _0
  br _20, ^20, ^19

20:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _1
  _13 = put_list _1, `[2]`

  %% Argument types:
  %%    _13 => nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %% Unique:
  %%    _13
  _14 = put_list `2`, _13

  %% Argument types:
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _14 => nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _14
  _15 = put_list _0, _14
  %% Result type:
  %%    nonempty_list(atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)))
  %% Unique:
  %%    _15
  ret _15

19:
  %% fun_SUITE.erl:480
  %% Aliased:
  %%    _1
  _16 = match_fail `badmatch`, _1

  %% Unique:
  %%    _16
  _21 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% fun_SUITE.erl:483
%% Counter = 40
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_5`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _25 = bif:'=:=' _1, _0
  br _25, ^25, ^24

25:
  %% fun_SUITE.erl:487
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _16 = call (`id`/1), `false`

  %% Aliased:
  %%    _16
  _26 = succeeded:body _16
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    _16 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _16
  _30 = bif:'=:=' _16, `false`
  br _30, ^36, ^28

36:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0

28:
  %% fun_SUITE.erl:487
  %% Aliased:
  %%    _16
  _19 = match_fail `case_clause`, _16

  %% Unique:
  %%    _19
  _31 = succeeded:body _19
  br ^1

24:
  %% fun_SUITE.erl:486
  %% Aliased:
  %%    _1
  _21 = match_fail `badmatch`, _1

  %% Unique:
  %%    _21
  _39 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% fun_SUITE.erl:493
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_6`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _21 = bif:'=:=' _1, _0
  br _21, ^25, ^20

25:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0

20:
  %% fun_SUITE.erl:496
  %% Aliased:
  %%    _1
  _17 = match_fail `badmatch`, _1

  %% Unique:
  %%    _17
  _28 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% fun_SUITE.erl:500
%% Counter = 29
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_7`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _21 = bif:'=:=' _1, _0
  br _21, ^25, ^20

25:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0

20:
  %% fun_SUITE.erl:503
  %% Aliased:
  %%    _1
  _17 = match_fail `badmatch`, _1

  %% Unique:
  %%    _17
  _28 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% fun_SUITE.erl:507
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_8`(_0, _1) {
0:
  %% fun_SUITE.erl:508
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  _7 = call (`id`/1), _0

  %% Aliased:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  %% fun_SUITE.erl:509
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _1
  _5 = call (`id`/1), _1

  %% Aliased:
  %%    _5
  _16 = succeeded:body _5
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _5 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _7 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _5, 
  %%    _7
  _19 = bif:'=:=' _5, _7
  br _19, ^19, ^18

19:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _7
  ret _7

18:
  %% fun_SUITE.erl:509
  %% Aliased:
  %%    _5
  _12 = match_fail `badmatch`, _5

  %% Unique:
  %%    _12
  _20 = succeeded:body _12
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% fun_SUITE.erl:512
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _1 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
%%    _2 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`parallel_scopes_9`(_0, _1, _2) {
0:
  %% fun_SUITE.erl:513
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  X = call (`id`/1), _0

  %% Aliased:
  %%    X
  _24 = succeeded:body X
  br _24, ^24, ^1

24:
  %% fun_SUITE.erl:513
  %% Argument types:
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _1 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0, 
  %%    _1
  _9 = bif:'+' _0, _1

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br _25, ^25, ^1

25:
  %% fun_SUITE.erl:513
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Unique:
  %%    _9
  _11 = call (`id`/1), _9

  %% Aliased:
  %%    _11
  _26 = succeeded:body _11
  br _26, ^26, ^1

26:
  %% fun_SUITE.erl:515
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _1
  _4 = call (`id`/1), _1

  %% Aliased:
  %%    _4
  _27 = succeeded:body _4
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _4 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    X => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _4, 
  %%    X
  _30 = bif:'=:=' _4, X
  br _30, ^30, ^29

30:
  %% Argument types:
  %%    _2 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _11 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _2, 
  %%    _11
  _33 = bif:'=:=' _2, _11
  br _33, ^33, ^32

33:
  %% Argument types:
  %%    X => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _2 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _2, 
  %%    X
  _19 = put_tuple X, _2
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))}
  %% Unique:
  %%    _19
  ret _19

32:
  %% fun_SUITE.erl:516
  %% Aliased:
  %%    _2
  _20 = match_fail `badmatch`, _2

  %% Unique:
  %%    _20
  _34 = succeeded:body _20
  br ^1

29:
  %% fun_SUITE.erl:515
  %% Aliased:
  %%    _4
  _21 = match_fail `badmatch`, _4

  %% Unique:
  %%    _21
  _35 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% fun_SUITE.erl:518
%% Counter = 57
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
%%    _1 =>
%%     333..999
%%    _2 =>
%%     'ignored' | 333..999
%%    _3 =>
%%     'ignored' | 700..1000
function `fun_SUITE`:`parallel_scopes_10`(_0, _1, _2, _3) {
0:
  %% fun_SUITE.erl:520
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Unique:
  %%    _0
  _21 = call (`id`/1), _0

  %% Aliased:
  %%    _21
  _33 = succeeded:body _21
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    
  switch _21, ^35, [
    { `false`, ^49 },
    { `true`, ^48 }
  ]

48:
  %% Argument types:
  %%    _2 => 'ignored' | 333..999
  %%    _1 => 333..999
  %% Unique:
  %%    _1, 
  %%    _2
  _38 = bif:'=:=' _2, _1
  br _38, ^54, ^37

37:
  %% fun_SUITE.erl:523
  %% Unique:
  %%    _2
  _28 = match_fail `badmatch`, _2

  %% Unique:
  %%    _28
  _39 = succeeded:body _28
  br ^1

49:
  %% Argument types:
  %%    _3 => 'ignored' | 700..1000
  %%    _1 => 333..999
  %% Unique:
  %%    _1, 
  %%    _3
  _42 = bif:'=:=' _3, _1
  br _42, ^42, ^41

42:
  %% Argument types:
  %%    _1 => 700..999
  %% Unique:
  %%    _1
  _45 = bif:'=:=' _1, `999`
  br _45, ^54, ^44

54:
  %% Result type:
  %%    333..999
  %% Unique:
  %%    _1
  ret _1

44:
  %% fun_SUITE.erl:526
  _25 = match_fail `badmatch`, `999`

  %% Unique:
  %%    _25
  _46 = succeeded:body _25
  br ^1

41:
  %% fun_SUITE.erl:525
  %% Unique:
  %%    _3
  _26 = match_fail `badmatch`, _3

  %% Unique:
  %%    _26
  _47 = succeeded:body _26
  br ^1

35:
  %% fun_SUITE.erl:520
  %% Aliased:
  %%    _21
  _29 = match_fail `case_clause`, _21

  %% Unique:
  %%    _29
  _50 = succeeded:body _29
  br ^1

1:
  _31 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _31
}

%% fun_SUITE.erl:531
%% Counter = 69
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 889
%%    _1 =>
%%     'a' | 800..889
%%    _2 =>
%%     'a' | 810..889
function `fun_SUITE`:`parallel_scopes_11`(_0, _1, _2) {
0:
  %% fun_SUITE.erl:533
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _21 = call (`id`/1), `true`

  %% Aliased:
  %%    _21
  _37 = succeeded:body _21
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  switch _21, ^39, [
    { `false`, ^57 },
    { `true`, ^60 }
  ]

60:
  %% Argument types:
  %%    _1 => 'a' | 800..889
  %%    _0 => 'a' | 889
  %% Unique:
  %%    _0, 
  %%    _1
  _42 = bif:'=:=' _1, _0
  br _42, ^42, ^41

42:
  %% Argument types:
  %%    _2 => 'a' | 810..889
  %%    _0 => 'a' | 889
  %% Unique:
  %%    _0, 
  %%    _2
  _45 = bif:'=:=' _2, _0
  br _45, ^48, ^44

48:
  %% Argument types:
  %%    _0 => 'a' | 889
  %% Unique:
  %%    _0
  _51 = bif:'=:=' _0, `889`
  br _51, ^66, ^50

66:
  %% Result type:
  %%    889
  %% Unique:
  %%    _0
  ret _0

50:
  %% fun_SUITE.erl:537
  _29 = match_fail `badmatch`, `889`

  %% Unique:
  %%    _29
  _52 = succeeded:body _29
  br ^1

44:
  %% fun_SUITE.erl:536
  %% Unique:
  %%    _2
  _31 = match_fail `badmatch`, _2

  %% Unique:
  %%    _31
  _54 = succeeded:body _31
  br ^1

41:
  %% fun_SUITE.erl:535
  %% Unique:
  %%    _1
  _32 = match_fail `badmatch`, _1

  %% Unique:
  %%    _32
  _55 = succeeded:body _32
  br ^1

57:
  %% fun_SUITE.erl:539
  _24 = match_fail `badmatch`, `cannot_happen`

  %% Unique:
  %%    _24
  _59 = succeeded:body _24
  br ^1

39:
  %% fun_SUITE.erl:533
  %% Aliased:
  %%    _21
  _33 = match_fail `case_clause`, _21

  %% Unique:
  %%    _33
  _62 = succeeded:body _33
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% fun_SUITE.erl:544
%% Counter = 63
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     333
%%    _1 =>
%%     'other' | 333
%%    _2 =>
%%     'nope' | 333
function `fun_SUITE`:`parallel_scopes_12`(_0, _1, _2) {
0:
  %% fun_SUITE.erl:546
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _21 = call (`id`/1), `true`

  %% Aliased:
  %%    _21
  _35 = succeeded:body _21
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    
  switch _21, ^37, [
    { `false`, ^51 },
    { `true`, ^54 }
  ]

54:
  %% Argument types:
  %%    _1 => 'other' | 333
  %% Unique:
  %%    _1
  _40 = bif:'=:=' _1, `333`
  br _40, ^43, ^39

43:
  %% Argument types:
  %%    _2 => 'nope' | 333
  %% Unique:
  %%    _2
  _46 = bif:'=:=' _2, `333`
  br _46, ^60, ^45

60:
  %% Result type:
  %%    333
  %% Unique:
  %%    _0
  ret _0

45:
  %% fun_SUITE.erl:550
  _28 = match_fail `badmatch`, `nope`

  %% Unique:
  %%    _28
  _47 = succeeded:body _28
  br ^1

39:
  %% fun_SUITE.erl:549
  _30 = match_fail `badmatch`, `other`

  %% Unique:
  %%    _30
  _49 = succeeded:body _30
  br ^1

51:
  %% fun_SUITE.erl:552
  _24 = match_fail `badmatch`, `cannot_happen`

  %% Unique:
  %%    _24
  _53 = succeeded:body _24
  br ^1

37:
  %% fun_SUITE.erl:546
  %% Aliased:
  %%    _21
  _31 = match_fail `case_clause`, _21

  %% Unique:
  %%    _31
  _56 = succeeded:body _31
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% fun_SUITE.erl:557
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'no' | 99
%%    _1 =>
%%     'nope' | 100
function `fun_SUITE`:`parallel_scopes_13`(_0, _1) {
0:
  %% fun_SUITE.erl:560
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _8 = call (`id`/1), `whatever`

  %% Aliased:
  %%    _8
  _15 = succeeded:body _8
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    _0 => 'no' | 99
  %% Unique:
  %%    _0
  _24 = bif:'=:=' _0, `99`
  br _24, ^23, ^17

23:
  %% Argument types:
  %%    _1 => 'nope' | 100
  %% Unique:
  %%    _1
  _21 = bif:'=:=' _1, `100`
  br _21, ^20, ^19

20:
  %% Result type:
  %%    nonempty_list(1..100)
  ret `[1,100]`

19:
  %% fun_SUITE.erl:562
  _10 = match_fail `badmatch`, `nope`

  %% Unique:
  %%    _10
  _22 = succeeded:body _10
  br ^1

17:
  %% fun_SUITE.erl:561
  _11 = match_fail `badmatch`, `no`

  %% Unique:
  %%    _11
  _25 = succeeded:body _11
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% fun_SUITE.erl:565
%% Counter = 48
%% bs_ensure_opt: true
function `fun_SUITE`:`coverage`(_0) {
0:
  %% fun_SUITE.erl:566
  %% Result type:
  %%    'ok'
  _7 = call (`coverage_1`/0)

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^45, ^1

45:
  %% fun_SUITE.erl:568
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _2 = call (`id`/1), `[1,2,3]`

  %% Aliased:
  %%    _2
  _22 = succeeded:body _2
  br _22, ^22, ^1

22:
  %% fun_SUITE.erl:568
  %% Result type:
  %%    list(number())
  %% Aliased:
  %%    _2
  _8 = call (`coverage_2`/1), _2

  %% Aliased:
  %%    _8
  _23 = succeeded:body _8
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _8 => list(number())
  %% Aliased:
  %%    _8
  _43 = bif:'=:=' _8, `[2,3,4]`
  br _43, ^43, ^25

43:
  %% fun_SUITE.erl:570
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _4 = call (`id`/1), `{[],x}`

  %% Aliased:
  %%    _4
  _26 = succeeded:body _4
  br _26, ^26, ^1

26:
  %% fun_SUITE.erl:570
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), fun(() -> 'x')}
  %% Aliased:
  %%    _4
  _9 = call (`coverage_3`/1), _4

  %% Unique:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^38, ^1

38:
  %% Argument types:
  %%    _9 => {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), fun(() -> 'x')}
  %% Unique:
  %%    _9
  _11 = get_tuple_element _9, `0`

  %% Argument types:
  %%    _11 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _11
  _37 = bif:'=:=' _11, `42`
  br _37, ^36, ^29

36:
  %% Argument types:
  %%    _9 => {42, fun(() -> 'x')}
  %% Unique:
  %%    _9
  _10 = get_tuple_element _9, `1`

  %% fun_SUITE.erl:571
  %% Result type:
  %%    'x'
  %% Argument types:
  %%    _10 => fun(() -> 'x')
  %% Aliased:
  %%    _10
  _12 = call _10

  %% Aliased:
  %%    _12
  _30 = succeeded:body _12
  br _30, ^33, ^1

33:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% fun_SUITE.erl:570
  %% Unique:
  %%    _9
  _14 = match_fail `badmatch`, _9

  %% Unique:
  %%    _14
  _42 = succeeded:body _14
  br ^1

25:
  %% fun_SUITE.erl:568
  %% Aliased:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _44 = succeeded:body _15
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% fun_SUITE.erl:575
%% Counter = 9
%% bs_ensure_opt: true
function `fun_SUITE`:`coverage_1`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% fun_SUITE.erl:584
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`coverage_2`(_0) {
0:
  %% Result type:
  %%    number()
  _3 = make_fun (`'-coverage_2/1-fun-0-'`/1)

  %% fun_SUITE.erl:587
  %% Aliased:
  %%    _0, 
  %%    _3
  _5 = call (`lists`:`map`/2), _3, _0

  %% Aliased:
  %%    _5
  _8 = succeeded:body _5
  br _8, ^8, ^1

8:
  %% Result type:
  %%    list(number())
  %% Aliased:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% fun_SUITE.erl:590
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`coverage_3`(_0) {
0:
  %% Argument types:
  %%    _0 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  _14 = bif:is_tuple _0
  br _14, ^12, ^10

12:
  %% fun_SUITE.erl:591
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  _2 = call (`id`/1), `42`

  %% Aliased:
  %%    _2
  _11 = succeeded:body _2
  br _11, ^11, ^1

11:
  %% Result type:
  %%    'x'
  _1 = make_fun (`'-coverage_3/1-fun-0-'`/1), `x`

  %% Argument types:
  %%    _2 => atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %%    _1 => fun(() -> 'x')
  %% Aliased:
  %%    _1, 
  %%    _2
  _6 = put_tuple _2, _1
  %% Result type:
  %%    {atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_)), fun(() -> 'x')}
  %% Unique:
  %%    _6
  ret _6

10:
  %% fun_SUITE.erl:590
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-coverage_3/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _17 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% fun_SUITE.erl:593
%% Counter = 64
%% bs_ensure_opt: true
function `fun_SUITE`:`leaky_environment`(_0) {
0:
  %% Result type:
  %%    number()
  G = make_fun (`'-leaky_environment/1-fun-0-'`/2)

  %% Result type:
  %%    number()
  %% Aliased:
  %%    G
  F = make_fun (`'-leaky_environment/1-fun-1-'`/2), G
  _32 = new_try_tag `'catch'`
  br _32, ^30, ^31

30:
  %% fun_SUITE.erl:596
  %% Result type:
  %%    number()
  %% Argument types:
  %%    F => fun((_) -> number())
  %% Aliased:
  %%    F
  _25 = call F, `1`, `flurb`

  %% Aliased:
  %%    _25
  _34 = succeeded:body _25
  br ^31

31:
  %% Unique:
  %%    _32
  _37 = landingpad `'catch'`, _32

  %% Aliased:
  %%    _37
  _35 = extract _37, `0`
  br ^29

29:
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _32
  _9 = catch_end _32, _35

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _59 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _59, ^56, ^40

56:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _14 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _53 = bif:is_tuple _14
  br _53, ^53, ^40

53:
  %% Argument types:
  %%    _14 => {...}
  %% Aliased:
  %%    _14
  _54 = bif:tuple_size _14

  %% Argument types:
  %%    _54 => 0..16777215
  %% Unique:
  %%    _54
  _55 = bif:'=:=' _54, `2`
  br _55, ^52, ^40

52:
  %% Argument types:
  %%    _14 => {any(), any()}
  %% Aliased:
  %%    _14
  _17 = get_tuple_element _14, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _49 = is_tagged_tuple _17, `2`, `badarity`
  br _49, ^46, ^40

46:
  %% Argument types:
  %%    _17 => {'badarity', any()}
  %% Aliased:
  %%    _17
  _18 = get_tuple_element _17, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _43 = bif:is_tuple _18
  br _43, ^43, ^40

43:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _44 = bif:tuple_size _18

  %% Argument types:
  %%    _44 => 0..16777215
  %% Unique:
  %%    _44
  _45 = bif:'=:=' _44, `2`
  br _45, ^42, ^40

42:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _20 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _41 = bif:'=:=' _20, `[1,flurb]`
  br _41, ^41, ^40

41:
  %% Result type:
  %%    'ok'
  ret `ok`

40:
  %% fun_SUITE.erl:596
  %% Aliased:
  %%    _9
  _26 = match_fail `badmatch`, _9

  %% Unique:
  %%    _26
  _62 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% fun_SUITE.erl:599
%% Counter = 4
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
function `fun_SUITE`:`id`(_0) {
0:
  %% Result type:
  %%    atom() | nonempty_list(1..3) | 0..'+inf' | {nil(), 'x'} | fun((_))
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `fun_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `fun_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `fun_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% fun_SUITE.erl:595
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    G =>
%%     fun((_, _) -> number())
function `fun_SUITE`:`'-leaky_environment/1-fun-1-'`(_6, G) {
0:
  %% fun_SUITE.erl:595
  %% Result type:
  %%    number()
  %% Argument types:
  %%    (`'-leaky_environment/1-fun-0-'`/2) => fun((_, _) -> number())
  %% Aliased:
  %%    _6
  _23 = call (`'-leaky_environment/1-fun-0-'`/2), _6, `0`

  %% Unique:
  %%    _23
  _26 = succeeded:body _23
  br _26, ^26, ^1

26:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _23
  ret _23

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% fun_SUITE.erl:594
%% Counter = 26
%% bs_ensure_opt: true
function `fun_SUITE`:`'-leaky_environment/1-fun-0-'`(_2, _1) {
0:
  %% fun_SUITE.erl:594
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _2
  _22 = bif:'+' _2, _1

  %% Unique:
  %%    _22
  _25 = succeeded:body _22
  br _25, ^25, ^1

25:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _22
  ret _22

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% fun_SUITE.erl:591
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _4 =>
%%     'x'
function `fun_SUITE`:`'-coverage_3/1-fun-0-'`(_4) {
0:
  %% Result type:
  %%    'x'
  %% Aliased:
  %%    _4
  ret _4
}

%% fun_SUITE.erl:587
%% Counter = 8
%% bs_ensure_opt: true
function `fun_SUITE`:`'-coverage_2/1-fun-0-'`(_1) {
0:
  %% fun_SUITE.erl:587
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _4 = bif:'+' _1, `1`

  %% Unique:
  %%    _4
  _7 = succeeded:body _4
  br _7, ^7, ^1

7:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% fun_SUITE.erl:308
%% Counter = 55
%% bs_ensure_opt: true
function `fun_SUITE`:`'-badfun/1-fun-0-'`(_17) {
0:
  %% Argument types:
  %%    
  %% Unique:
  %%    _17
  _53 = bif:'=:=' _17, `literal`
  br _53, ^52, ^50

52:
  %% fun_SUITE.erl:309
  _46 = call `literal`

  %% Aliased:
  %%    _46
  _51 = succeeded:body _46
  br ^1

50:
  %% fun_SUITE.erl:308
  %% Unique:
  %%    _17
  %% Anno: #{inlined => {'-badfun/1-inlined-0-',1}}
  _47 = match_fail `function_clause`, _17

  %% Unique:
  %%    _47
  _54 = succeeded:body _47
  br ^1

1:
  _48 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _48
}

%% fun_SUITE.erl:288
%% Counter = 31
%% bs_ensure_opt: true
function `fun_SUITE`:`'-badarity/1-fun-0-'`() {
0:
  %% Result type:
  %%    42
  ret `42`
}

%% fun_SUITE.erl:281
%% Counter = 20
%% bs_ensure_opt: true
function `fun_SUITE`:`'-eep37_gh6515_2/0-Fact/1-0-'`(_2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _12 = bif:'>' _2, `0`
  br _12, ^12, ^11

12:
  %% fun_SUITE.erl:282
  %% Argument types:
  %%    _2 => atom() | maybe_improper_list(any(), any()) | number(0, '+inf') | {...} | other()
  %% Aliased:
  %%    _2
  _0 = bif:'-' _2, `1`

  %% Unique:
  %%    _0
  _13 = succeeded:body _0
  br _13, ^13, ^1

13:
  %% fun_SUITE.erl:282
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-eep37_gh6515_2/0-Fact/1-0-'`/1) => fun((_) -> number(0, '+inf'))
  %%    _0 => number()
  %% Unique:
  %%    _0
  _1 = call (`'-eep37_gh6515_2/0-Fact/1-0-'`/1), _0

  %% Unique:
  %%    _1
  _14 = succeeded:body _1
  br _14, ^14, ^1

14:
  %% fun_SUITE.erl:282
  %% Argument types:
  %%    _2 => number(0, '+inf')
  %%    _1 => number(0, '+inf')
  %% Unique:
  %%    _1, 
  %%    _2
  _6 = bif:'*' _2, _1

  %% Unique:
  %%    _6
  _15 = succeeded:body _6
  br _15, ^15, ^1

15:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _6
  ret _6

11:
  %% Argument types:
  %%    _2 => number('-inf', 0)
  %% Unique:
  %%    _2
  _18 = bif:'=:=' _2, `0`
  br _18, ^17, ^16

17:
  %% Result type:
  %%    1
  ret `1`

16:
  %% fun_SUITE.erl:281
  %% Aliased:
  %%    _2
  %% Anno: #{inlined => {'-eep37_gh6515_2/0-inlined-1-',1}}
  _7 = match_fail `function_clause`, _2

  %% Unique:
  %%    _7
  _19 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% fun_SUITE.erl:270
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`'-eep37_gh6515_1/0-X/0-0-'`() {
0:
  %% Result type:
  %%    fun(() -> fun(() -> fun(() -> fun(() -> fun(())))))
  _2 = make_fun (`'-eep37_gh6515_1/0-X/0-0-'`/0)
  %% Result type:
  %%    fun(() -> fun(() -> fun(() -> fun(() -> fun(() -> fun(()))))))
  %% Aliased:
  %%    _2
  ret _2
}

%% fun_SUITE.erl:251
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`'-dup2/0-fun-0-'`() {
0:
  %% Result type:
  %%    'dup2'
  ret `dup2`
}

%% fun_SUITE.erl:248
%% Counter = 5
%% bs_ensure_opt: true
function `fun_SUITE`:`'-dup1/0-fun-0-'`() {
0:
  %% Result type:
  %%    'dup1'
  ret `dup1`
}

%% fun_SUITE.erl:236
%% Counter = 24
%% bs_ensure_opt: true
function `fun_SUITE`:`'-eep37_basic/0-fun-2-'`(_8) {
0:
  %% fun_SUITE.erl:236
  %% Argument types:
  %%    
  %% Unique:
  %%    _8
  _20 = bif:'+' _8, `42`

  %% Unique:
  %%    _20
  _23 = succeeded:body _20
  br _23, ^23, ^1

23:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _20
  ret _20

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% fun_SUITE.erl:235
%% Counter = 23
%% bs_ensure_opt: true
function `fun_SUITE`:`'-eep37_basic/0-fun-1-'`(_5) {
0:
  %% fun_SUITE.erl:235
  %% Argument types:
  %%    
  %% Unique:
  %%    _5
  _19 = bif:'+' _5, `1`

  %% Unique:
  %%    _19
  _22 = succeeded:body _19
  br _22, ^22, ^1

22:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% fun_SUITE.erl:234
%% Counter = 31
%% bs_ensure_opt: true
function `fun_SUITE`:`'-eep37_basic/0-Fact/1-0-'`(_2) {
0:
  %% Argument types:
  %%    
  %% Unique:
  %%    _2
  _23 = bif:'>' _2, `0`
  br _23, ^23, ^22

23:
  %% fun_SUITE.erl:234
  %% Argument types:
  %%    _2 => atom() | maybe_improper_list(any(), any()) | number(0, '+inf') | {...} | other()
  %% Unique:
  %%    _2
  _0 = bif:'-' _2, `1`

  %% Unique:
  %%    _0
  _24 = succeeded:body _0
  br _24, ^24, ^1

24:
  %% fun_SUITE.erl:234
  %% Result type:
  %%    number(0, '+inf')
  %% Argument types:
  %%    (`'-eep37_basic/0-Fact/1-0-'`/1) => fun((_) -> number(0, '+inf'))
  %%    _0 => number()
  %% Unique:
  %%    _0
  _1 = call (`'-eep37_basic/0-Fact/1-0-'`/1), _0

  %% Unique:
  %%    _1
  _25 = succeeded:body _1
  br _25, ^25, ^1

25:
  %% fun_SUITE.erl:234
  %% Argument types:
  %%    _2 => number(0, '+inf')
  %%    _1 => number(0, '+inf')
  %% Unique:
  %%    _1, 
  %%    _2
  _17 = bif:'*' _2, _1

  %% Unique:
  %%    _17
  _26 = succeeded:body _17
  br _26, ^26, ^1

26:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _17
  ret _17

22:
  %% Argument types:
  %%    _2 => number('-inf', 0)
  %% Unique:
  %%    _2
  _29 = bif:'=:=' _2, `0`
  br _29, ^28, ^27

28:
  %% Result type:
  %%    1
  ret `1`

27:
  %% fun_SUITE.erl:234
  %% Unique:
  %%    _2
  %% Anno: #{inlined => {'-eep37_basic/0-inlined-1-',1}}
  _18 = match_fail `function_clause`, _2

  %% Unique:
  %%    _18
  _30 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% fun_SUITE.erl:201
%% Counter = 285
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-23-'`(_123) {
0:
  _205 = make_fun (`'-external/1-fun-22-'`/1)

  %% fun_SUITE.erl:201
  %% Argument types:
  %%    _205 => fun((_))
  %% Aliased:
  %%    _123, 
  %%    _205
  _206 = call _123, _205, `[x,y]`

  %% Aliased:
  %%    _206
  _274 = succeeded:body _206
  br _274, ^274, ^1

274:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _206
  _277 = bif:'=:=' _206, `[x,y]`
  br _277, ^277, ^276

277:
  %% fun_SUITE.erl:201
  %% Aliased:
  %%    _123
  _182 = call (`erlang`:`fun_info`/2), _123, `type`

  %% Aliased:
  %%    _182
  _278 = succeeded:body _182
  br _278, ^278, ^1

278:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _182
  _281 = bif:'=:=' _182, `{type,external}`
  br _281, ^281, ^280

281:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _182
  ret _182

280:
  %% fun_SUITE.erl:201
  %% Aliased:
  %%    _182
  _270 = match_fail `badmatch`, _182

  %% Unique:
  %%    _270
  _282 = succeeded:body _270
  br ^1

276:
  %% fun_SUITE.erl:201
  %% Aliased:
  %%    _206
  _271 = match_fail `badmatch`, _206

  %% Unique:
  %%    _271
  _283 = succeeded:body _271
  br ^1

1:
  _272 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _272
}

%% fun_SUITE.erl:201
%% Counter = 272
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-22-'`(_117) {
0:
  %% Aliased:
  %%    _117
  ret _117
}

%% fun_SUITE.erl:200
%% Counter = 282
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-21-'`(_113) {
0:
  _203 = make_fun (`'-external/1-fun-20-'`/1)

  %% fun_SUITE.erl:200
  %% Argument types:
  %%    _203 => fun((_))
  %% Aliased:
  %%    _113, 
  %%    _203
  _204 = call _113, _203, `[x,y]`

  %% Aliased:
  %%    _204
  _271 = succeeded:body _204
  br _271, ^271, ^1

271:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _204
  _274 = bif:'=:=' _204, `[x,y]`
  br _274, ^274, ^273

274:
  %% fun_SUITE.erl:200
  %% Aliased:
  %%    _113
  _180 = call (`erlang`:`fun_info`/2), _113, `type`

  %% Aliased:
  %%    _180
  _275 = succeeded:body _180
  br _275, ^275, ^1

275:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _180
  _278 = bif:'=:=' _180, `{type,external}`
  br _278, ^278, ^277

278:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _180
  ret _180

277:
  %% fun_SUITE.erl:200
  %% Aliased:
  %%    _180
  _267 = match_fail `badmatch`, _180

  %% Unique:
  %%    _267
  _279 = succeeded:body _267
  br ^1

273:
  %% fun_SUITE.erl:200
  %% Aliased:
  %%    _204
  _268 = match_fail `badmatch`, _204

  %% Unique:
  %%    _268
  _280 = succeeded:body _268
  br ^1

1:
  _269 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _269
}

%% fun_SUITE.erl:200
%% Counter = 269
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-20-'`(_107) {
0:
  %% Aliased:
  %%    _107
  ret _107
}

%% fun_SUITE.erl:199
%% Counter = 279
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-19-'`(_103) {
0:
  _201 = make_fun (`'-external/1-fun-18-'`/1)

  %% fun_SUITE.erl:199
  %% Argument types:
  %%    _201 => fun((_))
  %% Aliased:
  %%    _103, 
  %%    _201
  _202 = call _103, _201, `[x,y]`

  %% Aliased:
  %%    _202
  _268 = succeeded:body _202
  br _268, ^268, ^1

268:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _202
  _271 = bif:'=:=' _202, `[x,y]`
  br _271, ^271, ^270

271:
  %% fun_SUITE.erl:199
  %% Aliased:
  %%    _103
  _178 = call (`erlang`:`fun_info`/2), _103, `type`

  %% Aliased:
  %%    _178
  _272 = succeeded:body _178
  br _272, ^272, ^1

272:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _178
  _275 = bif:'=:=' _178, `{type,external}`
  br _275, ^275, ^274

275:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _178
  ret _178

274:
  %% fun_SUITE.erl:199
  %% Aliased:
  %%    _178
  _264 = match_fail `badmatch`, _178

  %% Unique:
  %%    _264
  _276 = succeeded:body _264
  br ^1

270:
  %% fun_SUITE.erl:199
  %% Aliased:
  %%    _202
  _265 = match_fail `badmatch`, _202

  %% Unique:
  %%    _265
  _277 = succeeded:body _265
  br ^1

1:
  _266 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _266
}

%% fun_SUITE.erl:199
%% Counter = 266
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-18-'`(_97) {
0:
  %% Aliased:
  %%    _97
  ret _97
}

%% fun_SUITE.erl:198
%% Counter = 276
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-17-'`(_93) {
0:
  _199 = make_fun (`'-external/1-fun-16-'`/1)

  %% fun_SUITE.erl:198
  %% Argument types:
  %%    _199 => fun((_))
  %% Aliased:
  %%    _93, 
  %%    _199
  _200 = call _93, _199, `[x,y]`

  %% Aliased:
  %%    _200
  _265 = succeeded:body _200
  br _265, ^265, ^1

265:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _200
  _268 = bif:'=:=' _200, `[x,y]`
  br _268, ^268, ^267

268:
  %% fun_SUITE.erl:198
  %% Aliased:
  %%    _93
  _176 = call (`erlang`:`fun_info`/2), _93, `type`

  %% Aliased:
  %%    _176
  _269 = succeeded:body _176
  br _269, ^269, ^1

269:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _176
  _272 = bif:'=:=' _176, `{type,external}`
  br _272, ^272, ^271

272:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _176
  ret _176

271:
  %% fun_SUITE.erl:198
  %% Aliased:
  %%    _176
  _261 = match_fail `badmatch`, _176

  %% Unique:
  %%    _261
  _273 = succeeded:body _261
  br ^1

267:
  %% fun_SUITE.erl:198
  %% Aliased:
  %%    _200
  _262 = match_fail `badmatch`, _200

  %% Unique:
  %%    _262
  _274 = succeeded:body _262
  br ^1

1:
  _263 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _263
}

%% fun_SUITE.erl:198
%% Counter = 263
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-16-'`(_87) {
0:
  %% Aliased:
  %%    _87
  ret _87
}

%% fun_SUITE.erl:197
%% Counter = 273
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-15-'`(_83) {
0:
  _197 = make_fun (`'-external/1-fun-14-'`/1)

  %% fun_SUITE.erl:197
  %% Argument types:
  %%    _197 => fun((_))
  %% Aliased:
  %%    _83, 
  %%    _197
  _198 = call _83, _197, `[x,y]`

  %% Aliased:
  %%    _198
  _262 = succeeded:body _198
  br _262, ^262, ^1

262:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _198
  _265 = bif:'=:=' _198, `[x,y]`
  br _265, ^265, ^264

265:
  %% fun_SUITE.erl:197
  %% Aliased:
  %%    _83
  _174 = call (`erlang`:`fun_info`/2), _83, `type`

  %% Aliased:
  %%    _174
  _266 = succeeded:body _174
  br _266, ^266, ^1

266:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _174
  _269 = bif:'=:=' _174, `{type,external}`
  br _269, ^269, ^268

269:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _174
  ret _174

268:
  %% fun_SUITE.erl:197
  %% Aliased:
  %%    _174
  _258 = match_fail `badmatch`, _174

  %% Unique:
  %%    _258
  _270 = succeeded:body _258
  br ^1

264:
  %% fun_SUITE.erl:197
  %% Aliased:
  %%    _198
  _259 = match_fail `badmatch`, _198

  %% Unique:
  %%    _259
  _271 = succeeded:body _259
  br ^1

1:
  _260 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _260
}

%% fun_SUITE.erl:197
%% Counter = 260
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-14-'`(_77) {
0:
  %% Aliased:
  %%    _77
  ret _77
}

%% fun_SUITE.erl:196
%% Counter = 270
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-13-'`(_73) {
0:
  _195 = make_fun (`'-external/1-fun-12-'`/1)

  %% fun_SUITE.erl:196
  %% Argument types:
  %%    _195 => fun((_))
  %% Aliased:
  %%    _73, 
  %%    _195
  _196 = call _73, _195, `[x,y]`

  %% Aliased:
  %%    _196
  _259 = succeeded:body _196
  br _259, ^259, ^1

259:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _196
  _262 = bif:'=:=' _196, `[x,y]`
  br _262, ^262, ^261

262:
  %% fun_SUITE.erl:196
  %% Aliased:
  %%    _73
  _172 = call (`erlang`:`fun_info`/2), _73, `type`

  %% Aliased:
  %%    _172
  _263 = succeeded:body _172
  br _263, ^263, ^1

263:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _266 = bif:'=:=' _172, `{type,external}`
  br _266, ^266, ^265

266:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _172
  ret _172

265:
  %% fun_SUITE.erl:196
  %% Aliased:
  %%    _172
  _255 = match_fail `badmatch`, _172

  %% Unique:
  %%    _255
  _267 = succeeded:body _255
  br ^1

261:
  %% fun_SUITE.erl:196
  %% Aliased:
  %%    _196
  _256 = match_fail `badmatch`, _196

  %% Unique:
  %%    _256
  _268 = succeeded:body _256
  br ^1

1:
  _257 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _257
}

%% fun_SUITE.erl:196
%% Counter = 257
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-12-'`(_67) {
0:
  %% Aliased:
  %%    _67
  ret _67
}

%% fun_SUITE.erl:195
%% Counter = 267
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-11-'`(_63) {
0:
  _193 = make_fun (`'-external/1-fun-10-'`/1)

  %% fun_SUITE.erl:195
  %% Argument types:
  %%    _193 => fun((_))
  %% Aliased:
  %%    _63, 
  %%    _193
  _194 = call _63, _193, `[x,y]`

  %% Aliased:
  %%    _194
  _256 = succeeded:body _194
  br _256, ^256, ^1

256:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _194
  _259 = bif:'=:=' _194, `[x,y]`
  br _259, ^259, ^258

259:
  %% fun_SUITE.erl:195
  %% Aliased:
  %%    _63
  _170 = call (`erlang`:`fun_info`/2), _63, `type`

  %% Aliased:
  %%    _170
  _260 = succeeded:body _170
  br _260, ^260, ^1

260:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _170
  _263 = bif:'=:=' _170, `{type,external}`
  br _263, ^263, ^262

263:
  %% Result type:
  %%    {'type', 'external'}
  %% Aliased:
  %%    _170
  ret _170

262:
  %% fun_SUITE.erl:195
  %% Aliased:
  %%    _170
  _252 = match_fail `badmatch`, _170

  %% Unique:
  %%    _252
  _264 = succeeded:body _252
  br ^1

258:
  %% fun_SUITE.erl:195
  %% Aliased:
  %%    _194
  _253 = match_fail `badmatch`, _194

  %% Unique:
  %%    _253
  _265 = succeeded:body _253
  br ^1

1:
  _254 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _254
}

%% fun_SUITE.erl:195
%% Counter = 254
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-10-'`(_57) {
0:
  %% Aliased:
  %%    _57
  ret _57
}

%% fun_SUITE.erl:194
%% Counter = 252
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-8-'`(_47) {
0:
  %% Aliased:
  %%    _47
  ret _47
}

%% fun_SUITE.erl:188
%% Counter = 256
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-7-'`(_40) {
0:
  %% fun_SUITE.erl:188
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _166 = call _40, `{a,b}`

  %% Aliased:
  %%    _166
  _251 = succeeded:body _166
  br _251, ^251, ^1

251:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _166
  _254 = bif:'=:=' _166, `{ok,{a,b}}`
  br _254, ^254, ^253

254:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _166
  ret _166

253:
  %% fun_SUITE.erl:188
  %% Aliased:
  %%    _166
  _248 = match_fail `badmatch`, _166

  %% Unique:
  %%    _248
  _255 = succeeded:body _248
  br ^1

1:
  _249 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _249
}

%% fun_SUITE.erl:187
%% Counter = 254
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-6-'`(_35) {
0:
  %% fun_SUITE.erl:187
  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _165 = call _35, `{a,b}`

  %% Aliased:
  %%    _165
  _249 = succeeded:body _165
  br _249, ^249, ^1

249:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _165
  _252 = bif:'=:=' _165, `{ok,{a,b}}`
  br _252, ^252, ^251

252:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _165
  ret _165

251:
  %% fun_SUITE.erl:187
  %% Aliased:
  %%    _165
  _246 = match_fail `badmatch`, _165

  %% Unique:
  %%    _246
  _253 = succeeded:body _246
  br ^1

1:
  _247 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _247
}

%% fun_SUITE.erl:186
%% Counter = 252
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-5-'`(_30) {
0:
  %% fun_SUITE.erl:186
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _164 = call _30, `{a,b}`

  %% Aliased:
  %%    _164
  _247 = succeeded:body _164
  br _247, ^247, ^1

247:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _164
  _250 = bif:'=:=' _164, `{ok,{a,b}}`
  br _250, ^250, ^249

250:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _164
  ret _164

249:
  %% fun_SUITE.erl:186
  %% Aliased:
  %%    _164
  _244 = match_fail `badmatch`, _164

  %% Unique:
  %%    _244
  _251 = succeeded:body _244
  br ^1

1:
  _245 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _245
}

%% fun_SUITE.erl:185
%% Counter = 250
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-4-'`(_25) {
0:
  %% fun_SUITE.erl:185
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _163 = call _25, `{a,b}`

  %% Aliased:
  %%    _163
  _245 = succeeded:body _163
  br _245, ^245, ^1

245:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _163
  _248 = bif:'=:=' _163, `{ok,{a,b}}`
  br _248, ^248, ^247

248:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _163
  ret _163

247:
  %% fun_SUITE.erl:185
  %% Aliased:
  %%    _163
  _242 = match_fail `badmatch`, _163

  %% Unique:
  %%    _242
  _249 = succeeded:body _242
  br ^1

1:
  _243 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _243
}

%% fun_SUITE.erl:184
%% Counter = 248
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-3-'`(_20) {
0:
  %% fun_SUITE.erl:184
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _162 = call _20, `{a,b}`

  %% Aliased:
  %%    _162
  _243 = succeeded:body _162
  br _243, ^243, ^1

243:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _162
  _246 = bif:'=:=' _162, `{ok,{a,b}}`
  br _246, ^246, ^245

246:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _162
  ret _162

245:
  %% fun_SUITE.erl:184
  %% Aliased:
  %%    _162
  _240 = match_fail `badmatch`, _162

  %% Unique:
  %%    _240
  _247 = succeeded:body _240
  br ^1

1:
  _241 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _241
}

%% fun_SUITE.erl:183
%% Counter = 246
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-2-'`(_15) {
0:
  %% fun_SUITE.erl:183
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _161 = call _15, `{a,b}`

  %% Aliased:
  %%    _161
  _241 = succeeded:body _161
  br _241, ^241, ^1

241:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _161
  _244 = bif:'=:=' _161, `{ok,{a,b}}`
  br _244, ^244, ^243

244:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _161
  ret _161

243:
  %% fun_SUITE.erl:183
  %% Aliased:
  %%    _161
  _238 = match_fail `badmatch`, _161

  %% Unique:
  %%    _238
  _245 = succeeded:body _238
  br ^1

1:
  _239 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _239
}

%% fun_SUITE.erl:182
%% Counter = 244
%% bs_ensure_opt: true
function `fun_SUITE`:`'-external/1-fun-1-'`(_10) {
0:
  %% fun_SUITE.erl:182
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _160 = call _10, `{a,b}`

  %% Aliased:
  %%    _160
  _239 = succeeded:body _160
  br _239, ^239, ^1

239:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _160
  _242 = bif:'=:=' _160, `{ok,{a,b}}`
  br _242, ^242, ^241

242:
  %% Result type:
  %%    {'ok', {'a', 'b'}}
  %% Aliased:
  %%    _160
  ret _160

241:
  %% fun_SUITE.erl:182
  %% Aliased:
  %%    _160
  _236 = match_fail `badmatch`, _160

  %% Unique:
  %%    _236
  _243 = succeeded:body _236
  br ^1

1:
  _237 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _237
}

%% fun_SUITE.erl:163
%% Counter = 12
%% bs_ensure_opt: true
function `fun_SUITE`:`'-bif_fun/1-fun-0-'`(_1) {
0:
  %% fun_SUITE.erl:163
  %% Argument types:
  %%    
  %% Unique:
  %%    _1
  _8 = bif:abs _1

  %% Unique:
  %%    _8
  _11 = succeeded:body _8
  br _11, ^11, ^1

11:
  %% Result type:
  %%    number(0, '+inf')
  %% Unique:
  %%    _8
  ret _8

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% fun_SUITE.erl:150
%% Counter = 18
%% bs_ensure_opt: true
%% Parameters
%%    _2 =>
%%     'true'
function `fun_SUITE`:`'-otp_7202/0-fun-0-'`(_5, _2) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% fun_SUITE.erl:125
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | {'b', 'c' | nil()}
function `fun_SUITE`:`'-overwritten_fun_1/1-fun-0-'`(_0) {
0:
  %% Argument types:
  %%    _0 => 'a' | {'b', 'c' | nil()}
  %% Unique:
  %%    _0
  _17 = put_tuple `ok`, _0
  %% Result type:
  %%    {'ok', 'a' | {'b', 'c' | nil()}}
  %% Unique:
  %%    _17
  ret _17
}

%% fun_SUITE.erl:68
%% Counter = 62
%% bs_ensure_opt: true
function `fun_SUITE`:`'-l1/0-fun-0-'`(_3, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _58 = bif:'=:=' _2, `1`
  br _58, ^57, ^56

57:
  %% Result type:
  %%    1
  ret `1`

56:
  %% fun_SUITE.erl:68
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _0 = bif:'-' _2, `1`

  %% Unique:
  %%    _0
  _59 = succeeded:body _0
  br _59, ^59, ^1

59:
  %% fun_SUITE.erl:68
  %% Argument types:
  %%    _0 => number()
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _0
  _1 = call _3, _3, _0

  %% Aliased:
  %%    _1
  _60 = succeeded:body _1
  br _60, ^60, ^1

60:
  %% fun_SUITE.erl:68
  %% Argument types:
  %%    _2 => number()
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _2
  _53 = bif:'*' _2, _1

  %% Unique:
  %%    _53
  _61 = succeeded:body _53
  br _61, ^61, ^1

61:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _53
  ret _53

1:
  _54 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _54
}

%% fun_SUITE.erl:67
%% Counter = 61
%% bs_ensure_opt: true
function `fun_SUITE`:`'-l1/0-fun-2-'`(_12, _11) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _57 = bif:'=:=' _11, `1`
  br _57, ^56, ^55

56:
  %% Result type:
  %%    1
  ret `1`

55:
  %% fun_SUITE.erl:67
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _9 = bif:'-' _11, `1`

  %% Unique:
  %%    _9
  _58 = succeeded:body _9
  br _58, ^58, ^1

58:
  %% fun_SUITE.erl:67
  %% Argument types:
  %%    _9 => number()
  %% Aliased:
  %%    _12
  %% Unique:
  %%    _9
  _10 = call _12, _12, _9

  %% Aliased:
  %%    _10
  _59 = succeeded:body _10
  br _59, ^59, ^1

59:
  %% fun_SUITE.erl:67
  %% Argument types:
  %%    _11 => number()
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _11
  _52 = bif:'*' _11, _10

  %% Unique:
  %%    _52
  _60 = succeeded:body _52
  br _60, ^60, ^1

60:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _52
  ret _52

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% fun_SUITE.erl:66
%% Counter = 52
%% bs_ensure_opt: true
function `fun_SUITE`:`'-l1/0-fun-4-'`(_18) {
0:
  %% fun_SUITE.erl:66
  %% Unique:
  %%    _18
  %% Anno: #{inlined => {'-l1/0-inlined-0-',1}}
  _48 = match_fail `function_clause`, _18

  %% Unique:
  %%    _48
  _51 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}
