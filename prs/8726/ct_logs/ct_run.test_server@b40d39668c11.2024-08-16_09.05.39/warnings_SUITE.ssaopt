module warnings_SUITE.
exports [{all,0},
         {bad_apply,1},
         {bad_arith,1},
         {bin_construction,1},
         {bin_opt_info,1},
         {bit_syntax,1},
         {bool_cases,1},
         {comprehensions,1},
         {eep49,1},
         {effect,1},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {files,1},
         {groups,0},
         {guard,1},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {inline_list_funcs,1},
         {inlining,1},
         {maps,1},
         {maps_bin_opt_info,1},
         {module_info,0},
         {module_info,1},
         {no_warnings,1},
         {opportunistic_warnings,1},
         {pattern,1},
         {pattern2,1},
         {pattern3,1},
         {pattern4,1},
         {recv_opt_info,1},
         {redundant_boolean_clauses,1},
         {suite,0},
         {tuple_calls,1},
         {underscore,1}].
attributes [].

%% warnings_SUITE.erl:49
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% warnings_SUITE.erl:52
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% warnings_SUITE.erl:55
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 2}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,2}}]`
}

%% warnings_SUITE.erl:59
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% warnings_SUITE.erl:62
%% Counter = 7
%% bs_ensure_opt: true
function `warnings_SUITE`:`groups`() {
0:
  %% warnings_SUITE.erl:63
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[pattern,pattern2,pattern3,pattern4,guard,bad_arith,bool_cases,bad_apply,
  files,effect,bin_opt_info,bin_construction,comprehensions,maps,
  maps_bin_opt_info,redundant_boolean_clauses,underscore,no_warnings,
  bit_syntax,inlining,tuple_calls,recv_opt_info,opportunistic_warnings,eep49,
  inline_list_funcs]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% warnings_SUITE.erl:73
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`init_per_suite`(_0) {
0:
  %% warnings_SUITE.erl:74
  _2 = call (`test_lib`:`recompile`/1), `warnings_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:77
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% warnings_SUITE.erl:80
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% warnings_SUITE.erl:83
%% Counter = 4
%% bs_ensure_opt: true
function `warnings_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% warnings_SUITE.erl:87
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`pattern`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:107
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{pattern,<<"%% Just a comment here.\n              f(a={glurf,2}=A) -> A.\n\n              g(A) ->\n                 case A of\n                   a=[_|_] -> error;\n                   Other -> true\n                 end.\n\n              foo(X) ->\n                 a = {nisse,b} = X.\n           ">>,
           [warn_unused_vars],
           {warnings,[{{2,15},v3_core,{nomatch,pattern}},
                      {{6,20},v3_core,{nomatch,pattern}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:107
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:87
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pattern/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:110
%% Counter = 27
%% bs_ensure_opt: true
function `warnings_SUITE`:`pattern2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _15 = bif:is_list _0
  br _15, ^15, ^14

15:
  %% warnings_SUITE.erl:138
  %% Aliased:
  %%    _0
  _7 = call (`run`/2), _0, `[{pattern2,<<"f(A) -> ok;\n                f(B) -> error.\n                t(A, B, C) ->\n                  case {A,B,C} of\n                    {a,B} -> ok;\n                    {_,B} -> ok\n                  end.\n                c(E) ->\n                  case E of\n                    _ -> ok;\n                    _ -> ok\n                  end.\n           ">>,
            [nowarn_unused_vars],
            {warnings,[{{2,17},sys_core_fold,{nomatch,{shadow,1,{f,1}}}},
                       {{4,19},sys_core_fold,{nomatch,no_clause}},
                       {{5,21},sys_core_fold,{nomatch,clause_type}},
                       {{6,21},sys_core_fold,{nomatch,clause_type}},
                       {{11,21},sys_core_fold,{nomatch,{shadow,10}}}]}}]`

  %% Aliased:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _24 = bif:'=:=' _7, `[]`
  br _24, ^24, ^18

24:
  %% warnings_SUITE.erl:149
  %% Aliased:
  %%    _0
  _8 = call (`run`/2), _0, `[{pattern2,<<"f(A) -> ok;\n                f(B) -> error.\n                t(A, B, C) ->\n                  case {A,B,C} of\n                    {a,B} -> ok;\n                    {_,B} -> ok\n                  end.\n                c(E) ->\n                  case E of\n                    _ -> ok;\n                    _ -> ok\n                  end.\n           ">>,
            [nowarn_unused_vars,no_copt],
            {warnings,[{{2,17},beam_core_to_ssa,{nomatch,{shadow,1}}},
                       {{11,21},beam_core_to_ssa,{nomatch,{shadow,10}}}]}}]`

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _22 = bif:'=:=' _8, `[]`
  br _22, ^22, ^21

22:
  %% Result type:
  %%    'ok'
  ret `ok`

21:
  %% warnings_SUITE.erl:149
  %% Aliased:
  %%    _8
  _9 = match_fail `badmatch`, _8

  %% Unique:
  %%    _9
  _23 = succeeded:body _9
  br ^1

18:
  %% warnings_SUITE.erl:138
  %% Aliased:
  %%    _7
  _10 = match_fail `badmatch`, _7

  %% Unique:
  %%    _10
  _25 = succeeded:body _10
  br ^1

14:
  %% warnings_SUITE.erl:110
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pattern2/1-',1}}
  _11 = match_fail `function_clause`, _0

  %% Unique:
  %%    _11
  _26 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% warnings_SUITE.erl:152
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`pattern3`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:170
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{pattern3,<<"\n            f({A,_}) -> {ok,A};\n            f([_|_]=B) -> {ok,B};\n            f({urk,nisse}) -> urka_glurka.\n            word(<<\"AND\">>) -> <<\"and\">>;\n            word(<<\"AS\">>) -> <<\"as\">>;\n            word(<<\"A\">>) -> <<\"a\">>;\n            word(<<\"AS\">>) -> <<\"as\">>.\n           ">>,
            [nowarn_unused_vars],
            {warnings,[{{4,13},beam_core_to_ssa,{nomatch,{shadow,2}}},
                       {{8,13},beam_core_to_ssa,{nomatch,{shadow,6}}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:170
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:152
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pattern3/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:174
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`pattern4`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:231
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{pattern4,<<"\n             t() ->\n               case true of \n                 false -> a;\n                 true -> b\n               end.\n\n             fi() ->\n               case true of \n                 false -> a;\n                 false -> b\n               end,\n               case true of \n                 true -> a;\n                 true -> b;\n                 X -> X\n               end,\n               case boolean of \n                 true -> a;\n                 false -> b\n               end.\n             int() ->\n               case 42 of\n                 [a|b] -> no;\n                 <<1>> -> no;\n                 <<X>> -> no;\n                 17 -> no;\n                 [] -> no;\n                 a -> no;\n                 {a,b,c} -> no\n               end.\n             tuple() ->\n               case {x,y,z} of\n                 \"xyz\" -> no;\n                 [a|b] -> no;\n                 <<1>> -> no;\n                 <<X>> -> no;\n                 17 -> no;\n                 [] -> no;\n                 a -> no;\n                 {a,b,c} -> no;\n                 {x,y} -> no\n               end.\n           ">>,
            [nowarn_unused_vars],
            {warnings,[{{9,16},sys_core_fold,{nomatch,no_clause}},
                       {{11,18},sys_core_fold,{nomatch,shadow}},
                       {{15,18},sys_core_fold,{nomatch,shadow}},
                       {{18,16},sys_core_fold,{nomatch,no_clause}},
                       {{23,16},sys_core_fold,{nomatch,no_clause}},
                       {{33,16},sys_core_fold,{nomatch,no_clause}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:231
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:174
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-pattern4/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:235
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`guard`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:265
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{guard,<<"\n              t(A, B) when element(x, dum) -> ok.\n\n              tt(A, B) when 1 == 2 -> ok.\n\n              ttt() when element(x, dum) -> ok.\n\n              t4(T, F) when element({F}, T) -> ok.\n              t5(T, F) when element([F], T) -> ok.\n              t6(Pos, F) when element(Pos, [F]) -> ok.\n              t7(Pos) when element(Pos, []) -> ok.\n           ">>,
         [nowarn_unused_vars],
         {warnings,[{{2,28},
                     sys_core_fold,
                     {failed,{eval_failure,{erlang,element,2},badarg}}},
                    {{4,15},sys_core_fold,{nomatch,guard}},
                    {{4,15},sys_core_fold,{nomatch,no_clause}},
                    {{6,26},
                     sys_core_fold,
                     {failed,{eval_failure,{erlang,element,2},badarg}}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:265
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:235
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-guard/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:269
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`bad_arith`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:306
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{bad_arith,<<"f() ->\n                if\n                  a + 3 > 3 -> ok;\n                 true -> error\n              end.\n\n              g(A) ->\n                if\n                  is_integer(A), a + 3 > 3 -> ok;\n                  a + 3 > 42, is_integer(A) -> ok;\n                 true -> error\n              end.\n\n              h(A) ->\n                a + 3 + A.\n           ">>,
             [],
             {warnings,[{{3,21},
                         sys_core_fold,
                         {failed,{eval_failure,{erlang,'+',2},badarith}}},
                        {{9,36},
                         sys_core_fold,
                         {failed,{eval_failure,{erlang,'+',2},badarith}}},
                        {{10,21},
                         sys_core_fold,
                         {failed,{eval_failure,{erlang,'+',2},badarith}}},
                        {{15,19},
                         sys_core_fold,
                         {failed,{eval_failure,{erlang,'+',2},badarith}}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:306
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:269
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_arith/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:309
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`bool_cases`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:338
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{bool_cases,<<"\n            f(A, B) ->\n               case A > B of\n                 true -> true;\n                 false -> false;\n                 Other -> {error,not_bool}\n               end.\n\n            g(A, B) ->\n               case A =/= B of\n                 false -> false;\n                 true -> true;\n                 Other -> {error,not_bool}\n               end.\n\n            h(Bool) ->\n               case not Bool of\n                 'maybe' -> strange;\n                 false -> ok;\n                 true -> error\n               end.\n           ">>,
              [nowarn_unused_vars],
              {warnings,[{{6,18},sys_core_fold,{nomatch,shadow}},
                         {{13,18},sys_core_fold,{nomatch,shadow}},
                         {{18,18},sys_core_fold,{nomatch,clause_type}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:338
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:309
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bool_cases/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:341
%% Counter = 67
%% bs_ensure_opt: true
function `warnings_SUITE`:`bad_apply`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _25 = bif:is_list _0
  br _25, ^25, ^24

25:
  %% warnings_SUITE.erl:360
  %% Aliased:
  %%    _0
  _15 = call (`run`/2), _0, `[{bad_apply,<<"\n             t(1) -> 42:42();\n             t(2) -> erlang:42();\n             t(3) -> 42:start();\n             t(4) -> []:start();\n             t(5) -> erlang:[]();\n             t(6) -> [a,b,c]().\n           ">>,
             [],
             {warnings,[{{2,22},beam_core_to_ssa,{failed,bad_call}},
                        {{3,22},beam_core_to_ssa,{failed,bad_call}},
                        {{4,22},beam_core_to_ssa,{failed,bad_call}},
                        {{5,22},beam_core_to_ssa,{failed,bad_call}},
                        {{6,22},beam_core_to_ssa,{failed,bad_call}},
                        {{7,22},sys_core_fold,{failed,bad_call}}]}}]`

  %% Aliased:
  %%    _15
  _26 = succeeded:body _15
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _46 = bif:'=:=' _15, `[]`
  br _46, ^65, ^28

65:
  br ^66

66:
  _33 = new_try_tag `'try'`
  br _33, ^32, ^30

32:
  %% warnings_SUITE.erl:363
  _17 = call (`erlang`:`apply`/3), `erlang`, `42`, `[]`

  %% Aliased:
  %%    _17
  _34 = succeeded:body _17
  br _34, ^34, ^30

34:
  %% Unique:
  %%    _33
  _45 = kill_try_tag _33

  %% warnings_SUITE.erl:364
  _18 = call (`ct`:`fail`/1), `should_fail`

  %% Aliased:
  %%    _18
  _35 = succeeded:body _18
  br _35, ^31, ^1

30:
  %% Unique:
  %%    _33
  _43 = landingpad `'try'`, _33

  %% Aliased:
  %%    _43
  _7 = extract _43, `0`

  %% Aliased:
  %%    _43
  _6 = extract _43, `1`

  %% Aliased:
  %%    _43
  _5 = extract _43, `2`

  %% Unique:
  %%    _33
  _44 = kill_try_tag _33

  %% Argument types:
  %%    _7 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _7
  _41 = bif:'=:=' _7, `error`
  br _41, ^40, ^37

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _39 = bif:'=:=' _6, `badarg`
  br _39, ^31, ^37

31:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% Aliased:
  %%    _5, 
  %%    _6
  _19 = resume _5, _6

  %% Unique:
  %%    _19
  _42 = succeeded:body _19
  br ^1

28:
  %% warnings_SUITE.erl:360
  %% Aliased:
  %%    _15
  _20 = match_fail `badmatch`, _15

  %% Unique:
  %%    _20
  _47 = succeeded:body _20
  br ^1

24:
  %% warnings_SUITE.erl:341
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bad_apply/1-',1}}
  _21 = match_fail `function_clause`, _0

  %% Unique:
  %%    _21
  _48 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% warnings_SUITE.erl:370
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`files`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:394
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{files_1,
      <<"\n              -file(\"file1\", 14).\n\n              t1() ->\n                  1/0.\n\n              -file(\"file2\", 7).\n\n              t2() ->\n                  1/0.\n           ">>,
      [],
      {warnings,
          [{"file1",
            [{{17,20},
              sys_core_fold,
              {failed,{eval_failure,{erlang,'/',2},badarith}}}]},
           {"file2",
            [{{10,20},
              sys_core_fold,
              {failed,{eval_failure,{erlang,'/',2},badarith}}}]}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:394
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:370
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-files/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:398
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`effect`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:578
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{no_warnings,<<"\n             m1(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = 0;\n                  true -> ok\n                end,\n                ok.\n\n             m2(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz};\n                  true -> ok\n                end,\n                ok.\n\n             m3(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = [a,Sz];\n                  true -> ok\n                end,\n                ok.\n\n             m4(X, Sz, Var) ->\n                if\n                  Sz =:= 0 -> X = Var;\n                  true -> ok\n                end,\n                ok.\n\n             m5(X, Sz) ->\n                if\n                   Sz =:= 0 -> X = {a,b,c};\n                   true -> ok\n                end,\n                ok.\n\n             m6(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz,[1,2,3]};\n                  true -> ok\n                end,\n                ok.\n\n             m7(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz,[1,2,3],abs(Sz)};\n                  true -> ok\n                end,\n                ok.\n\n             m8(A, B) ->\n                case {A,B} of\n                  V -> V\n                end,\n                ok.\n\n             m9(Bs) ->\n                [{B,ok} = {B,foo:bar(B)} || B <- Bs],\n                ok.\n\n             m10(ConfigTableSize) ->\n               case ConfigTableSize of\n                 apa ->\n                   CurrentConfig = {id(camel_phase3),id(sms)},\n                   case CurrentConfig of\n                     {apa, bepa} -> ok;\n                     _ -> ok\n                   end\n               end,\n               ok.\n\n             id(I) -> I.\n             ">>,
               [],[]},
  {basic,<<"\n             t(X) ->\n               case X of\n                warn_lc ->\n                    [is_integer(Z) || Z <- [1,2,3]];\n                warn_lc_2 ->\n                    [{error,Z} || Z <- [1,2,3]];\n                warn_lc_3 ->\n                    [{error,abs(Z)} || Z <- [1,2,3]];\n                no_warn_lc ->\n                    [put(last_integer, Z) || Z <- [1,2,3]]; %no warning\n                unused_tuple_literal ->\n                    {a,b,c};\n                unused_list_literal ->\n                    [1,2,3,4];\n                unused_integer ->\n                    42;\n                unused_arith ->\n                    X*X\n               end,\n               ok.\n             ">>,
         [],
         {warnings,[{{5,22},
                     sys_core_fold,
                     {ignored,{no_effect,{erlang,is_integer,1}}}},
                    {{7,22},sys_core_fold,{ignored,useless_building}},
                    {{9,22},sys_core_fold,{ignored,useless_building}},
                    {{9,29},sys_core_fold,{ignored,{result,{erlang,abs,1}}}},
                    {{13,21},sys_core_fold,{ignored,useless_building}},
                    {{15,21},sys_core_fold,{ignored,useless_building}},
                    {{17,21},sys_core_fold,{ignored,useless_building}},
                    {{19,22},
                     sys_core_fold,
                     {ignored,{result,{erlang,'*',2}}}}]}},
  {nested,<<"\n             t(X) ->\n               case X of\n                nested ->\n                    [{ok,node(),module:foo(),self(),[time(),date()],time()},\n                     is_integer(X)];\n                unused_bit_syntax ->\n                    <<X:8>>;\n                unused_fun ->\n                    fun() -> {ok,X} end;\n                unused_named_fun ->\n                    fun F(0) -> 1;\n                        F(N) -> N*F(N-1)\n                    end;\n                unused_atom ->\n                    ignore;                             %no warning\n                unused_nil ->\n                    [];                                 %no warning\n                comp_op ->\n                    X =:= 2;\n                cookie ->\n                    erlang:get_cookie();\n                result_ignore ->\n                    _ = list_to_integer(X);\n                warn_lc_4 ->\n                    %% No warning because of assignment to _.\n                    [_ = abs(Z) || Z <- [1,2,3]]\n               end,\n               ok.\n             ">>,
          [],
          {warnings,[{{5,21},sys_core_fold,{ignored,useless_building}},
                     {{5,26},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,node,0}}}},
                     {{5,46},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,self,0}}}},
                     {{5,54},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,time,0}}}},
                     {{5,61},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,date,0}}}},
                     {{5,69},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,time,0}}}},
                     {{6,22},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,is_integer,1}}}},
                     {{8,21},sys_core_fold,{ignored,useless_building}},
                     {{10,21},sys_core_fold,{ignored,useless_building}},
                     {{12,21},sys_core_fold,{ignored,useless_building}},
                     {{20,23},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,'=:=',2}}}},
                     {{22,21},
                      sys_core_fold,
                      {ignored,{no_effect,{erlang,get_cookie,0}}}}]}},
  {seq,<<"\n             t(T) ->\n               [ {a,b,T} ],  [ {x,y,T} ],\n               ok.\n             ">>,
       [],
       {warnings,[{{3,16},sys_core_fold,{ignored,useless_building}},
                  {{3,30},sys_core_fold,{ignored,useless_building}}]}},
  {propagated_literal,<<"\n            foo(X) ->\n                Y = [$.],\n                %% There must not be a warning for constructing a term that\n                %% is never used.\n                fun() -> X = Y ++ [$.] end(),\n                ok.\n             ">>,
                      [],[]}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:578
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:398
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-effect/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:581
%% Counter = 360
%% bs_ensure_opt: true
function `warnings_SUITE`:`bin_opt_info`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _117 = bif:is_list _0
  br _117, ^354, ^116

354:
  br ^357

357:
  _121 = new_try_tag `'catch'`
  br _121, ^119, ^120

119:
  %% warnings_SUITE.erl:603
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    _0
  _105 = call (`run_test`/3), _0, `<<"\n             t1(Bin) ->\n               case Bin of\n                 _ when byte_size(Bin) > 20 -> erlang:error(too_long);\n                 <<_,T/binary>> -> t1(T);\n                 <<>> -> ok\n             end.\n\n             %% We use a tail in a BIF instruction, remote call, function\n             %% return, and an optimizable tail call for better coverage.\n             t2(<<A,B,T/bytes>>) ->\n                 if\n                     A > B -> t2(T);\n                     A =< B -> T\n                 end;\n             t2(<<_,T/bytes>>) when byte_size(T) < 4 ->\n                 foo;\n             t2(<<_,T/bytes>>) ->\n                 split_binary(T, 4).\n           ">>`, `[bin_opt_info]`

  %% Aliased:
  %%    _105
  _123 = succeeded:body _105
  br _123, ^123, ^120

123:
  br ^118

120:
  %% Unique:
  %%    _121
  _126 = landingpad `'catch'`, _121

  %% Aliased:
  %%    _126
  _124 = extract _126, `0`
  br ^118

118:
  _127 = phi { _124, ^120 }, { _105, ^123 }

  %% Aliased:
  %%    _127
  %% Unique:
  %%    _121
  _2 = catch_end _121, _127

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _304 = is_tagged_tuple _2, `2`, `warnings`
  br _304, ^301, ^129

301:
  %% Argument types:
  %%    _2 => {'warnings', any()}
  %% Aliased:
  %%    _2
  _26 = get_tuple_element _2, `1`

  %% Aliased:
  %%    _26
  _300 = is_nonempty_list _26
  br _300, ^300, ^129

300:
  %% Argument types:
  %%    _26 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _26
  _29 = get_hd _26

  %% Argument types:
  %%    _26 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _26
  _28 = get_tl _26

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _297 = bif:is_tuple _29
  br _297, ^297, ^129

297:
  %% Argument types:
  %%    _29 => {...}
  %% Aliased:
  %%    _29
  _298 = bif:tuple_size _29

  %% Argument types:
  %%    _298 => 0..16777215
  %% Unique:
  %%    _298
  _299 = bif:'=:=' _298, `3`
  br _299, ^296, ^129

296:
  %% Argument types:
  %%    _29 => {any(), any(), any()}
  %% Aliased:
  %%    _29
  _32 = get_tuple_element _29, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _295 = bif:'=:=' _32, `5`
  br _295, ^294, ^129

294:
  %% Argument types:
  %%    _29 => {5, any(), any()}
  %% Aliased:
  %%    _29
  _31 = get_tuple_element _29, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _293 = bif:'=:=' _31, `beam_ssa_bsm`
  br _293, ^292, ^129

292:
  %% Argument types:
  %%    _29 => {5, 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _29
  _30 = get_tuple_element _29, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _289 = is_tagged_tuple _30, `2`, `unsuitable_call`
  br _289, ^286, ^129

286:
  %% Argument types:
  %%    _30 => {'unsuitable_call', any()}
  %% Aliased:
  %%    _30
  _33 = get_tuple_element _30, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _283 = bif:is_tuple _33
  br _283, ^283, ^129

283:
  %% Argument types:
  %%    _33 => {...}
  %% Aliased:
  %%    _33
  _284 = bif:tuple_size _33

  %% Argument types:
  %%    _284 => 0..16777215
  %% Unique:
  %%    _284
  _285 = bif:'=:=' _284, `2`
  br _285, ^282, ^129

282:
  %% Argument types:
  %%    _33 => {any(), any()}
  %% Aliased:
  %%    _33
  _36 = get_tuple_element _33, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _281 = bif:'=:=' _36, `{b_local,{b_literal,t1},1}`
  br _281, ^281, ^129

281:
  %% Argument types:
  %%    _33 => {{'b_local', {'b_literal', 't1'}, 1}, any()}
  %% Aliased:
  %%    _33
  _35 = get_tuple_element _33, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _278 = is_tagged_tuple _35, `2`, `used_before_match`
  br _278, ^275, ^129

275:
  %% Argument types:
  %%    _35 => {'used_before_match', any()}
  %% Aliased:
  %%    _35
  _37 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _272 = is_tagged_tuple _37, `5`, `b_set`
  br _272, ^269, ^129

269:
  %% Argument types:
  %%    _37 => {'b_set', any(), any(), any(), any()}
  %% Aliased:
  %%    _37
  _40 = get_tuple_element _37, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _268 = bif:'=:=' _40, `{bif,byte_size}`
  br _268, ^268, ^129

268:
  %% Argument types:
  %%    _37 => {'b_set', any(), any(), {'bif', 'byte_size'}, any()}
  %% Aliased:
  %%    _37
  _39 = get_tuple_element _37, `4`

  %% Aliased:
  %%    _39
  _267 = is_nonempty_list _39
  br _267, ^267, ^129

267:
  %% Argument types:
  %%    _39 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _39
  _44 = get_tl _39

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _266 = bif:'=:=' _44, `[]`
  br _266, ^266, ^129

266:
  %% Aliased:
  %%    _28
  _265 = is_nonempty_list _28
  br _265, ^265, ^129

265:
  %% Argument types:
  %%    _28 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _28
  _47 = get_hd _28

  %% Argument types:
  %%    _28 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _28
  _46 = get_tl _28

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _262 = bif:is_tuple _47
  br _262, ^262, ^129

262:
  %% Argument types:
  %%    _47 => {...}
  %% Aliased:
  %%    _47
  _263 = bif:tuple_size _47

  %% Argument types:
  %%    _263 => 0..16777215
  %% Unique:
  %%    _263
  _264 = bif:'=:=' _263, `3`
  br _264, ^261, ^129

261:
  %% Argument types:
  %%    _47 => {any(), any(), any()}
  %% Aliased:
  %%    _47
  _50 = get_tuple_element _47, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _260 = bif:'=:=' _50, `5`
  br _260, ^259, ^129

259:
  %% Argument types:
  %%    _47 => {5, any(), any()}
  %% Aliased:
  %%    _47
  _49 = get_tuple_element _47, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _49
  _258 = bif:'=:=' _49, `beam_ssa_bsm`
  br _258, ^257, ^129

257:
  %% Argument types:
  %%    _47 => {5, 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _47
  _48 = get_tuple_element _47, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _254 = is_tagged_tuple _48, `3`, `binary_created`
  br _254, ^251, ^129

251:
  %% Aliased:
  %%    _46
  _250 = is_nonempty_list _46
  br _250, ^250, ^129

250:
  %% Argument types:
  %%    _46 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _46
  _55 = get_hd _46

  %% Argument types:
  %%    _46 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _46
  _54 = get_tl _46

  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _247 = bif:is_tuple _55
  br _247, ^247, ^129

247:
  %% Argument types:
  %%    _55 => {...}
  %% Aliased:
  %%    _55
  _248 = bif:tuple_size _55

  %% Argument types:
  %%    _248 => 0..16777215
  %% Unique:
  %%    _248
  _249 = bif:'=:=' _248, `3`
  br _249, ^246, ^129

246:
  %% Argument types:
  %%    _55 => {any(), any(), any()}
  %% Aliased:
  %%    _55
  _58 = get_tuple_element _55, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _245 = bif:'=:=' _58, `11`
  br _245, ^244, ^129

244:
  %% Argument types:
  %%    _55 => {11, any(), any()}
  %% Aliased:
  %%    _55
  _57 = get_tuple_element _55, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57
  _243 = bif:'=:=' _57, `beam_ssa_bsm`
  br _243, ^242, ^129

242:
  %% Argument types:
  %%    _55 => {11, 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _55
  _56 = get_tuple_element _55, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _239 = is_tagged_tuple _56, `3`, `binary_created`
  br _239, ^236, ^129

236:
  %% Aliased:
  %%    _54
  _235 = is_nonempty_list _54
  br _235, ^235, ^129

235:
  %% Argument types:
  %%    _54 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _54
  _63 = get_hd _54

  %% Argument types:
  %%    _54 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _54
  _62 = get_tl _54

  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _234 = bif:'=:=' _63, `{13,beam_ssa_bsm,context_reused}`
  br _234, ^234, ^129

234:
  %% Aliased:
  %%    _62
  _233 = is_nonempty_list _62
  br _233, ^233, ^129

233:
  %% Argument types:
  %%    _62 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _62
  _65 = get_hd _62

  %% Argument types:
  %%    _62 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _62
  _64 = get_tl _62

  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _232 = bif:'=:=' _65, `{16,beam_ssa_bsm,context_reused}`
  br _232, ^232, ^129

232:
  %% Aliased:
  %%    _64
  _231 = is_nonempty_list _64
  br _231, ^231, ^129

231:
  %% Argument types:
  %%    _64 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _64
  _67 = get_hd _64

  %% Argument types:
  %%    _64 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _64
  _66 = get_tl _64

  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _230 = bif:'=:=' _67, `{19,beam_ssa_bsm,
  {remote_call,{b_remote,{b_literal,erlang},{b_literal,split_binary},2}}}`
  br _230, ^230, ^129

230:
  %% Aliased:
  %%    _66
  _229 = is_nonempty_list _66
  br _229, ^229, ^129

229:
  %% Argument types:
  %%    _66 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _66
  _69 = get_hd _66

  %% Argument types:
  %%    _66 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _66
  _68 = get_tl _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _226 = bif:is_tuple _69
  br _226, ^226, ^129

226:
  %% Argument types:
  %%    _69 => {...}
  %% Aliased:
  %%    _69
  _227 = bif:tuple_size _69

  %% Argument types:
  %%    _227 => 0..16777215
  %% Unique:
  %%    _227
  _228 = bif:'=:=' _227, `3`
  br _228, ^225, ^129

225:
  %% Argument types:
  %%    _69 => {any(), any(), any()}
  %% Aliased:
  %%    _69
  _72 = get_tuple_element _69, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _224 = bif:'=:=' _72, `19`
  br _224, ^223, ^129

223:
  %% Argument types:
  %%    _69 => {19, any(), any()}
  %% Aliased:
  %%    _69
  _71 = get_tuple_element _69, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _222 = bif:'=:=' _71, `beam_ssa_bsm`
  br _222, ^221, ^129

221:
  %% Argument types:
  %%    _69 => {19, 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _69
  _70 = get_tuple_element _69, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _218 = is_tagged_tuple _70, `3`, `binary_created`
  br _218, ^215, ^129

215:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _214 = bif:'=:=' _68, `[]`
  br _214, ^355, ^129

355:
  br ^358

358:
  _133 = new_try_tag `'catch'`
  br _133, ^131, ^132

131:
  %% warnings_SUITE.erl:625
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    _0
  _107 = call (`run_test`/3), _0, `<<"\n             t1(Bin) ->\n               case Bin of\n                 _ when byte_size(Bin) > 20 -> erlang:error(too_long);\n                 <<_,T/binary>> -> t1(T);\n                 <<>> -> ok\n             end.\n\n             %% We use a tail in a BIF instruction, remote call, function\n             %% return, and an optimizable tail call for better coverage.\n             t2(<<A,B,T/bytes>>) ->\n                 if\n                     A > B -> t2(T);\n                     A =< B -> T\n                 end;\n             t2(<<_,T/bytes>>) when byte_size(T) < 4 ->\n                 foo;\n             t2(<<_,T/bytes>>) ->\n                 split_binary(T, 4).\n           ">>`, `[]`

  %% Aliased:
  %%    _107
  _135 = succeeded:body _107
  br _135, ^135, ^132

135:
  br ^130

132:
  %% Unique:
  %%    _133
  _138 = landingpad `'catch'`, _133

  %% Aliased:
  %%    _138
  _136 = extract _138, `0`
  br ^130

130:
  _139 = phi { _136, ^132 }, { _107, ^135 }

  %% Aliased:
  %%    _139
  %% Unique:
  %%    _133
  _5 = catch_end _133, _139

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _212 = bif:'=:=' _5, `[]`
  br _212, ^356, ^141

356:
  br ^359

359:
  _145 = new_try_tag `'catch'`
  br _145, ^143, ^144

143:
  %% warnings_SUITE.erl:655
  %% Result type:
  %%    nil() | {any(), ...}
  _109 = call (`run_forms`/2), `[{attribute,0,module,nolocation_binary},
  {attribute,0,export,[{t1,1}]},
  {function,0,t1,1,
      [{clause,0,
           [{var,0,'Bin'}],
           [],
           [{'case',0,
                {var,0,'Bin'},
                [{clause,0,
                     [{var,0,'_'}],
                     [[{op,0,'>',
                           {call,0,{atom,0,byte_size},[{var,0,'Bin'}]},
                           {integer,0,20}}]],
                     [{call,0,
                          {remote,0,{atom,0,erlang},{atom,0,error}},
                          [{atom,0,too_long}]}]},
                 {clause,0,
                     [{bin,0,
                          [{bin_element,0,{var,0,'_'},default,default},
                           {bin_element,0,{var,0,'T'},default,[binary]}]}],
                     [],
                     [{call,0,{atom,0,t1},[{var,0,'T'}]}]},
                 {clause,0,[{bin,0,[]}],[],[{atom,0,ok}]}]}]}]}]`, `[bin_opt_info]`

  %% Aliased:
  %%    _109
  _147 = succeeded:body _109
  br _147, ^147, ^144

147:
  br ^142

144:
  %% Unique:
  %%    _145
  _150 = landingpad `'catch'`, _145

  %% Aliased:
  %%    _150
  _148 = extract _150, `0`
  br ^142

142:
  _151 = phi { _148, ^144 }, { _109, ^147 }

  %% Aliased:
  %%    _151
  %% Unique:
  %%    _145
  _8 = catch_end _145, _151

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _208 = is_tagged_tuple _8, `2`, `warnings`
  br _208, ^205, ^153

205:
  %% Argument types:
  %%    _8 => {'warnings', any()}
  %% Aliased:
  %%    _8
  _76 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _76
  _204 = is_nonempty_list _76
  br _204, ^204, ^153

204:
  %% Argument types:
  %%    _76 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _76
  _79 = get_hd _76

  %% Argument types:
  %%    _76 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _76
  _78 = get_tl _76

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _201 = is_tagged_tuple _79, `3`, `none`
  br _201, ^198, ^153

198:
  %% Argument types:
  %%    _79 => {'none', any(), any()}
  %% Aliased:
  %%    _79
  _81 = get_tuple_element _79, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _81
  _197 = bif:'=:=' _81, `beam_ssa_bsm`
  br _197, ^196, ^153

196:
  %% Argument types:
  %%    _79 => {'none', 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _79
  _80 = get_tuple_element _79, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _193 = is_tagged_tuple _80, `2`, `unsuitable_call`
  br _193, ^190, ^153

190:
  %% Argument types:
  %%    _80 => {'unsuitable_call', any()}
  %% Aliased:
  %%    _80
  _83 = get_tuple_element _80, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _187 = bif:is_tuple _83
  br _187, ^187, ^153

187:
  %% Argument types:
  %%    _83 => {...}
  %% Aliased:
  %%    _83
  _188 = bif:tuple_size _83

  %% Argument types:
  %%    _188 => 0..16777215
  %% Unique:
  %%    _188
  _189 = bif:'=:=' _188, `2`
  br _189, ^186, ^153

186:
  %% Argument types:
  %%    _83 => {any(), any()}
  %% Aliased:
  %%    _83
  _86 = get_tuple_element _83, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _185 = bif:'=:=' _86, `{b_local,{b_literal,t1},1}`
  br _185, ^185, ^153

185:
  %% Argument types:
  %%    _83 => {{'b_local', {'b_literal', 't1'}, 1}, any()}
  %% Aliased:
  %%    _83
  _85 = get_tuple_element _83, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _182 = is_tagged_tuple _85, `2`, `used_before_match`
  br _182, ^179, ^153

179:
  %% Argument types:
  %%    _85 => {'used_before_match', any()}
  %% Aliased:
  %%    _85
  _87 = get_tuple_element _85, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _87
  _176 = is_tagged_tuple _87, `5`, `b_set`
  br _176, ^173, ^153

173:
  %% Argument types:
  %%    _87 => {'b_set', any(), any(), any(), any()}
  %% Aliased:
  %%    _87
  _90 = get_tuple_element _87, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _90
  _172 = bif:'=:=' _90, `{bif,byte_size}`
  br _172, ^172, ^153

172:
  %% Argument types:
  %%    _87 => {'b_set', any(), any(), {'bif', 'byte_size'}, any()}
  %% Aliased:
  %%    _87
  _89 = get_tuple_element _87, `4`

  %% Aliased:
  %%    _89
  _171 = is_nonempty_list _89
  br _171, ^171, ^153

171:
  %% Argument types:
  %%    _89 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _89
  _94 = get_tl _89

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _170 = bif:'=:=' _94, `[]`
  br _170, ^170, ^153

170:
  %% Aliased:
  %%    _78
  _169 = is_nonempty_list _78
  br _169, ^169, ^153

169:
  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _97 = get_hd _78

  %% Argument types:
  %%    _78 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _78
  _96 = get_tl _78

  %% Argument types:
  %%    
  %% Aliased:
  %%    _97
  _166 = is_tagged_tuple _97, `3`, `none`
  br _166, ^163, ^153

163:
  %% Argument types:
  %%    _97 => {'none', any(), any()}
  %% Aliased:
  %%    _97
  _99 = get_tuple_element _97, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _99
  _162 = bif:'=:=' _99, `beam_ssa_bsm`
  br _162, ^161, ^153

161:
  %% Argument types:
  %%    _97 => {'none', 'beam_ssa_bsm', any()}
  %% Aliased:
  %%    _97
  _98 = get_tuple_element _97, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _98
  _158 = is_tagged_tuple _98, `3`, `binary_created`
  br _158, ^155, ^153

155:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _96
  _154 = bif:'=:=' _96, `[]`
  br _154, ^154, ^153

154:
  %% Result type:
  %%    'ok'
  ret `ok`

153:
  %% warnings_SUITE.erl:657
  %% Aliased:
  %%    _8
  _110 = match_fail `badmatch`, _8

  %% Unique:
  %%    _110
  _211 = succeeded:body _110
  br ^1

141:
  %% warnings_SUITE.erl:625
  %% Aliased:
  %%    _5
  _111 = match_fail `badmatch`, _5

  %% Unique:
  %%    _111
  _213 = succeeded:body _111
  br ^1

129:
  %% warnings_SUITE.erl:608
  %% Aliased:
  %%    _2
  _112 = match_fail `badmatch`, _2

  %% Unique:
  %%    _112
  _307 = succeeded:body _112
  br ^1

116:
  %% warnings_SUITE.erl:581
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bin_opt_info/1-',1}}
  _113 = match_fail `function_clause`, _0

  %% Unique:
  %%    _113
  _308 = succeeded:body _113
  br ^1

1:
  _114 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _114
}

%% warnings_SUITE.erl:667
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`bin_construction`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:694
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{bin_construction,<<"\n             t() ->\n                 Bin = <<1,2,3>>,\n                 <<Bin:4/binary>>.\n\n             x() ->\n                 Bin = <<1,2,3,7:4>>,\n                 <<Bin/binary>>.\n\n             y() -> <<0.5>>.\n             z() -> <<99999999999999/utf8>>.\n             w() -> <<0.5:1/float>>.\n\n             a() ->\n               Size = bad_size,\n               <<1:Size>>.\n           ">>,
                    [],
                    {warnings,[{{4,18},
                                sys_core_fold,
                                {failed,embedded_binary_size}},
                               {{8,18},
                                sys_core_fold,
                                {failed,{embedded_unit,8,28}}},
                               {{10,21},v3_core,{failed,bad_binary}},
                               {{11,21},sys_core_fold,{failed,bad_unicode}},
                               {{12,21},sys_core_fold,{failed,bad_float_size}},
                               {{16,18},
                                beam_core_to_ssa,
                                {failed,bad_segment_size}}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:694
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:667
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bin_construction/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:698
%% Counter = 11
%% bs_ensure_opt: true
function `warnings_SUITE`:`comprehensions`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:is_list _0
  br _8, ^8, ^7

8:
  %% warnings_SUITE.erl:705
  %% Aliased:
  %%    _0
  _3 = call (`run`/2), _0, `[{tautologic_guards,<<"\n             f() -> [ true || true ].\n             g() -> << <<1>> || true >>.\n           ">>,
                     [],[]}]`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% warnings_SUITE.erl:698
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-comprehensions/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% warnings_SUITE.erl:708
%% Counter = 11
%% bs_ensure_opt: true
function `warnings_SUITE`:`maps`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:is_list _0
  br _8, ^8, ^7

8:
  %% warnings_SUITE.erl:943
  %% Aliased:
  %%    _0
  _3 = call (`run`/2), _0, `[{bad_map,<<"\n             t() ->\n                 case maybe_map of\n                     #{} -> ok;\n                     not_map -> error\n                 end.\n             x() ->\n                 case true of\n                     #{}  -> error;\n                     true -> ok\n                 end.\n           ">>,
           [],
           {warnings,[{{3,18},sys_core_fold,{nomatch,no_clause}},
                      {{9,22},sys_core_fold,{nomatch,clause_type}}]}},
  {bad_map_src1,<<"\n             t() ->\n                 M = {a,[]},\n                 {'EXIT',{badarg,_}} = (catch(M#{ a => 1 })),\n                 ok.\n           ">>,
                [],
                {warnings,[{{4,48},sys_core_fold,{failed,bad_map_update}}]}},
  {bad_map_src2,<<"\n             t() ->\n\t\t M = id({a,[]}),\n\t\t {'EXIT',{badarg,_}} = (catch(M#{ a => 1})),\n\t\t ok.\n\t     id(I) -> I.\n           ">>,
                [inline],
                []},
  {bad_map_src3,<<"\n             t() ->\n                 {'EXIT',{badarg,_}} = (catch <<>>#{ a := 1}),\n                 ok.\n           ">>,
                [],
                {warnings,[{{3,51},sys_core_fold,{failed,bad_map_update}}]}},
  {ok_map_literal_key,<<"\n             t() ->\n\t\t V = id(1),\n\t\t M = id(#{ <<$h,$i>> => V }),\n\t\t V = case M of\n\t\t    #{ <<0:257>> := Val } -> Val;\n\t\t    #{ <<$h,$i>> := Val } -> Val\n\t\t end,\n\t\t ok.\n\t     id(I) -> I.\n           ">>,
                      [],[]},
  {repeated_keys1,<<"\n             foo1() ->\n                 #{a=>1,\n                   b=> 2,\n                   a=>3}.\n             \n             bar1(M) ->\n                 M#{a=>1, b=> 2, a:=3}.\n             \n             baz1(M) ->\n                 M#{a=>1, b=> 2, a:=3}.\n             \n             foo2() ->\n                 #{\"a\"=>1, \"b\"=> 2, \"a\"=>3}.\n             \n             bar2(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             baz2(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             foo3() ->\n                 #{\"a\"=>1,\n                   \"b\"=> 2,\n                   \"a\"=>3}.\n             \n             bar3(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             baz3(M) ->\n                 M#{<<\"a\">>=>1, <<\"b\">>=> 2, <<\"a\">>:=3}.\n           ">>,
                  [],
                  {warnings,[{{3,20},v3_core,{map_key_repeated,a}},
                             {{8,21},v3_core,{map_key_repeated,a}},
                             {{11,21},v3_core,{map_key_repeated,a}},
                             {{14,20},v3_core,{map_key_repeated,"a"}},
                             {{17,21},v3_core,{map_key_repeated,"a"}},
                             {{20,21},v3_core,{map_key_repeated,"a"}},
                             {{23,20},v3_core,{map_key_repeated,"a"}},
                             {{28,21},v3_core,{map_key_repeated,"a"}},
                             {{31,21},v3_core,{map_key_repeated,<<"a">>}}]}},
  {repeated_keys2,<<"\n             foo4(K) ->\n                 #{\"a\"=>1, K => 1, \"b\"=> 2, \"a\"=>3, K=>2}.\n             \n             bar4(M,K) ->\n                 M#{a=>1, K =>1, b=> 2, a:=3, K=>2}.\n             \n             baz4(M,K) ->\n                 M#{<<\"a\">>=>1,\n                     K => 1, <<\"b\">>=> 2,\n                     <<\"a\">>:=3, K=>2}.\n             \n             foo5(K) ->\n                 #{{\"a\",1}=>1, K => 1, \"b\"=> 2, {\"a\",1}=>3, K=>2}.\n             \n             bar5(M,K) ->\n                 M#{{\"a\",<<\"b\">>}=>1, K =>1,\n                    \"b\"=> 2, {\"a\",<<\"b\">>}:=3, K=>2}.\n             \n             baz5(M,K) ->\n                 M#{{<<\"a\">>,1}=>1, K => 1,\n                    <<\"b\">>=> 2, {<<\"a\">>,1}:=3,K=>2}.\n             \n             foo6(K) ->\n                 #{#{\"a\"=>1}=>1, K => 1, \"b\"=> 2, #{\"a\"=>1}=>3, K=>2}.\n             \n             bar6(M,K) ->\n                 M#{#{\"a\"=><<\"b\">>}=>1, K =>1,\n                    \"b\"=> 2, #{\"a\"=><<\"b\">>}:=3, K=>2}.\n             \n             baz6(M,K) ->\n                 M#{#{<<\"a\">>=>1}=>1,\n                    K => 1,\n                    <<\"b\">>=> 2,\n                    #{<<\"a\">>=>1}:=3,K=>2}.\n             \n             foo7(K) ->\n                 M1 = #{#{\"a\"=>1}=>1, K => 1, \"b\"=> 2},\n                 M1#{#{\"a\"=>1}=>3, K=>2}.\n             \n             bar7(M,K) ->\n                 M1 = M#{#{\"a\"=><<\"b\">>}=>1, K =>1, \"b\"=> 2},\n                 M1#{#{\"a\"=><<\"b\">>}:=3, K=>2}.\n             \n             baz7(M,K) ->\n                 M1 = M#{#{<<\"a\">>=>1}=>1,\n                    K => 1,\n                    <<\"b\">>=> 2},\n                 M1#{#{<<\"a\">>=>1}:=3,K=>2}.\n          ">>,
                  [],
                  {warnings,[{{3,20},v3_core,{map_key_repeated,"a"}},
                             {{6,21},v3_core,{map_key_repeated,a}},
                             {{9,21},v3_core,{map_key_repeated,<<"a">>}},
                             {{14,20},v3_core,{map_key_repeated,{"a",1}}},
                             {{17,21},
                              v3_core,
                              {map_key_repeated,{"a",<<"b">>}}},
                             {{21,21},v3_core,{map_key_repeated,{<<"a">>,1}}},
                             {{25,20},v3_core,{map_key_repeated,#{"a" => 1}}},
                             {{28,21},
                              v3_core,
                              {map_key_repeated,#{"a" => <<"b">>}}},
                             {{32,21},
                              v3_core,
                              {map_key_repeated,#{<<"a">> => 1}}}]}},
  {map_nomatch,<<"match_map_1(#{}) ->\n    a;\nmatch_map_1(#{first := First}) ->\n    {b,First};\nmatch_map_1(#{first := First, second := Second}) ->\n    {c,First,Second}.\n\nmatch_map_1(#{}, A) ->\n    {a,A};\nmatch_map_1(#{first := First}, A) ->\n    {b,A,First};\nmatch_map_1(#{first := First, second := Second}, A) ->\n    {c,A,First,Second}.\n\nmatch_map_2(#{first := First}) ->\n    {b,First};\nmatch_map_2(#{first := First, second := Second}) ->\n    {c,First,Second}.\n\nmatch_map_2(#{first := First}, A, B) ->\n    {b,A,B,First};\nmatch_map_2(#{first := First, second := Second}, A, B) ->\n    {c,A,B,First,Second}.\n\nmatch_map_3([#{} | _]) ->\n    a;\nmatch_map_3([#{first := First} | _]) ->\n    {b,First};\nmatch_map_3([#{first := First, second := Second} | _]) ->\n    {c,First,Second}.\n\nmatch_map_4([#{first := First} | _]) ->\n    {b,First};\nmatch_map_4([#{first := First, second := Second} | _]) ->\n    {c,First,Second}.">>,
               [],
               {warnings,[{{3,1},beam_core_to_ssa,{nomatch,{shadow,1}}},
                          {{10,1},beam_core_to_ssa,{nomatch,{shadow,8}}},
                          {{17,1},beam_core_to_ssa,{nomatch,{shadow,15}}},
                          {{22,1},beam_core_to_ssa,{nomatch,{shadow,20}}},
                          {{27,1},beam_core_to_ssa,{nomatch,{shadow,25}}},
                          {{34,1},beam_core_to_ssa,{nomatch,{shadow,32}}}]}},
  {map_nowarn,<<"%% The compiler does not detect this shadowing.\nmatch_map_nowarn_1([#{}]) -> no;\nmatch_map_nowarn_1([#{a := A}]) -> {a,A}.\n\n%% The guard in the first clause can fail.\nmatch_map_nowarn_2(#{}, X) when is_integer(X) -> {a,X};\nmatch_map_nowarn_2(#{b := B}, X) -> {b,X,B}.\n\n%% The first clause will fail to match if the second\n%% argument is not `x`.\nmatch_map_nowarn_3(#{}, x) -> a;\nmatch_map_nowarn_3(#{b := B}, y) -> {b,B}.\n\n%% The compiler does not detect this shadowing.\nmatch_map_nowarn_4(#{}, x) -> a;\nmatch_map_nowarn_4(#{b := B}, x) -> {b,B}.">>,
              [],[]}]`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% warnings_SUITE.erl:708
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-maps/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% warnings_SUITE.erl:946
%% Counter = 17
%% bs_ensure_opt: true
function `warnings_SUITE`:`maps_bin_opt_info`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% warnings_SUITE.erl:956
  %% Aliased:
  %%    _0
  _4 = call (`run`/2), _0, `[{map_bsm,<<"\n             t1(<<0:8,7:8,T/binary>>,#{val := I}=M) ->\n                 t1(T, M#{val := I+1});\n             t1(<<_:8>>,M) ->\n                 M.\n           ">>,
           [bin_opt_info],
           {warnings,[{3,beam_ssa_bsm,context_reused}]}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% warnings_SUITE.erl:956
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% warnings_SUITE.erl:946
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-maps_bin_opt_info/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% warnings_SUITE.erl:959
%% Counter = 11
%% bs_ensure_opt: true
function `warnings_SUITE`:`redundant_boolean_clauses`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:is_list _0
  br _8, ^8, ^7

8:
  %% warnings_SUITE.erl:971
  %% Aliased:
  %%    _0
  _3 = call (`run`/2), _0, `[{redundant_boolean_clauses,
      <<"\n             t(X) ->\n                 case X == 0 of\n                     false -> no;\n                     false -> no;\n                     true -> yes\n                 end.\n           ">>,
      [],
      {warnings,[{{5,22},sys_core_fold,{nomatch,shadow}}]}}]`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% warnings_SUITE.erl:959
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-redundant_boolean_clauses/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% warnings_SUITE.erl:974
%% Counter = 70
%% bs_ensure_opt: true
function `warnings_SUITE`:`underscore`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _36 = bif:is_list _0
  br _36, ^36, ^35

36:
  %% warnings_SUITE.erl:1007
  %% Aliased:
  %%    _0
  _15 = call (`run`/2), _0, `[{underscore0,<<"\n            f(A) ->\n              _VAR1 = <<A>>,\n              _VAR2 = {ok,A},\n              _VAR3 = [A],\n              ok.\n            g(A) ->\n              _VAR1 = A/0,\n              _VAR2 = date(),\n              ok.\n            h() ->\n               _VAR1 = fun() -> ok end,\n              ok.\n            i(A) ->\n               _VAR1 = #{A=>42},\n              ok.\n\t ">>,
               [],[]}]`

  %% Aliased:
  %%    _15
  _37 = succeeded:body _15
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _61 = bif:'=:=' _15, `[]`
  br _61, ^61, ^39

61:
  %% warnings_SUITE.erl:1011
  S1 = call (`re`:`replace`/4), `<<"\n            f(A) ->\n              _VAR1 = <<A>>,\n              _VAR2 = {ok,A},\n              _VAR3 = [A],\n              ok.\n            g(A) ->\n              _VAR1 = A/0,\n              _VAR2 = date(),\n              ok.\n            h() ->\n               _VAR1 = fun() -> ok end,\n              ok.\n            i(A) ->\n               _VAR1 = #{A=>42},\n              ok.\n\t ">>`, `"_VAR\\d+"`, `"_"`, `[global]`

  %% Aliased:
  %%    S1
  _40 = succeeded:body S1
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S1
  _16 = put_list S1, `[]`

  %% warnings_SUITE.erl:1012
  %% Unique:
  %%    _16
  _25 = call (`io`:`format`/2), `"~s\n"`, _16

  %% Aliased:
  %%    _25
  _41 = succeeded:body _25
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S1
  _17 = put_tuple `underscore1`, S1, `[]`, `[]`

  %% Argument types:
  %%    _17 => {'underscore1', any(), nil(), nil()}
  %% Unique:
  %%    _17
  Ts1 = put_list _17, `[]`

  %% warnings_SUITE.erl:1014
  %% Aliased:
  %%    _0
  %% Unique:
  %%    Ts1
  _18 = call (`run`/2), _0, Ts1

  %% Aliased:
  %%    _18
  _42 = succeeded:body _18
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _59 = bif:'=:=' _18, `[]`
  br _59, ^59, ^44

59:
  %% warnings_SUITE.erl:1017
  S2 = call (`re`:`replace`/4), `<<"\n            f(A) ->\n              _VAR1 = <<A>>,\n              _VAR2 = {ok,A},\n              _VAR3 = [A],\n              ok.\n            g(A) ->\n              _VAR1 = A/0,\n              _VAR2 = date(),\n              ok.\n            h() ->\n               _VAR1 = fun() -> ok end,\n              ok.\n            i(A) ->\n               _VAR1 = #{A=>42},\n              ok.\n\t ">>`, `"_VAR\\d = "`, `"        "`, `[global]`

  %% Aliased:
  %%    S2
  _45 = succeeded:body S2
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S2
  _19 = put_list S2, `[]`

  %% warnings_SUITE.erl:1018
  %% Unique:
  %%    _19
  _26 = call (`io`:`format`/2), `"~s\n"`, _19

  %% Aliased:
  %%    _26
  _46 = succeeded:body _26
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S2
  _20 = put_tuple `underscore2`, S2, `[]`, `{warnings,[{{3,23},sys_core_fold,{ignored,useless_building}},
            {{4,23},sys_core_fold,{ignored,useless_building}},
            {{5,23},sys_core_fold,{ignored,useless_building}},
            {{8,24},sys_core_fold,{ignored,{result,{erlang,'/',2}}}},
            {{9,23},sys_core_fold,{ignored,{no_effect,{erlang,date,0}}}},
            {{12,24},sys_core_fold,{ignored,useless_building}},
            {{15,24},sys_core_fold,{ignored,useless_building}}]}`

  %% Argument types:
  %%    _20 => {'underscore2', any(), nil(), {'warnings', nonempty_list({{3, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{4, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{5, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{8, 24}, 'sys_core_fold', {'ignored', {'result', {'erlang', ''/'', 2}}}} | {{9, 23}, 'sys_core_fold', {'ignored', {'no_effect', {'erlang', 'date', 0}}}} | {{12, 24}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{15, 24}, 'sys_core_fold', {'ignored', 'useless_building'}})}}
  %% Unique:
  %%    _20
  Ts2 = put_list _20, `[]`

  %% warnings_SUITE.erl:1020
  %% Aliased:
  %%    _0
  %% Unique:
  %%    Ts2
  _21 = call (`run`/2), _0, Ts2

  %% Aliased:
  %%    _21
  _47 = succeeded:body _21
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _57 = bif:'=:=' _21, `[]`
  br _57, ^57, ^49

57:
  %% warnings_SUITE.erl:1025
  S3 = call (`re`:`replace`/4), `<<"\n            f(A) ->\n              _VAR1 = <<A>>,\n              _VAR2 = {ok,A},\n              _VAR3 = [A],\n              ok.\n            g(A) ->\n              _VAR1 = A/0,\n              _VAR2 = date(),\n              ok.\n            h() ->\n               _VAR1 = fun() -> ok end,\n              ok.\n            i(A) ->\n               _VAR1 = #{A=>42},\n              ok.\n\t ">>`, `"_(?=VAR\\d+)"`, `" "`, `[global]`

  %% Aliased:
  %%    S3
  _50 = succeeded:body S3
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S3
  _22 = put_list S3, `[]`

  %% warnings_SUITE.erl:1026
  %% Unique:
  %%    _22
  _27 = call (`io`:`format`/2), `"~s\n"`, _22

  %% Aliased:
  %%    _27
  _51 = succeeded:body _27
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    S3
  _23 = put_tuple `underscore2`, S3, `[]`, `{warnings,[{{3,23},sys_core_fold,{ignored,useless_building}},
            {{4,23},sys_core_fold,{ignored,useless_building}},
            {{5,23},sys_core_fold,{ignored,useless_building}},
            {{8,24},sys_core_fold,{ignored,{result,{erlang,'/',2}}}},
            {{9,23},sys_core_fold,{ignored,{no_effect,{erlang,date,0}}}},
            {{12,24},sys_core_fold,{ignored,useless_building}},
            {{15,24},sys_core_fold,{ignored,useless_building}}]}`

  %% Argument types:
  %%    _23 => {'underscore2', any(), nil(), {'warnings', nonempty_list({{3, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{4, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{5, 23}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{8, 24}, 'sys_core_fold', {'ignored', {'result', {'erlang', ''/'', 2}}}} | {{9, 23}, 'sys_core_fold', {'ignored', {'no_effect', {'erlang', 'date', 0}}}} | {{12, 24}, 'sys_core_fold', {'ignored', 'useless_building'}} | {{15, 24}, 'sys_core_fold', {'ignored', 'useless_building'}})}}
  %% Unique:
  %%    _23
  Ts3 = put_list _23, `[]`

  %% warnings_SUITE.erl:1028
  %% Aliased:
  %%    _0
  %% Unique:
  %%    Ts3
  _24 = call (`run`/2), _0, Ts3

  %% Aliased:
  %%    _24
  _52 = succeeded:body _24
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _55 = bif:'=:=' _24, `[]`
  br _55, ^55, ^54

55:
  %% Result type:
  %%    'ok'
  ret `ok`

54:
  %% warnings_SUITE.erl:1028
  %% Aliased:
  %%    _24
  _28 = match_fail `badmatch`, _24

  %% Unique:
  %%    _28
  _56 = succeeded:body _28
  br ^1

49:
  %% warnings_SUITE.erl:1020
  %% Aliased:
  %%    _21
  _29 = match_fail `badmatch`, _21

  %% Unique:
  %%    _29
  _58 = succeeded:body _29
  br ^1

44:
  %% warnings_SUITE.erl:1014
  %% Aliased:
  %%    _18
  _30 = match_fail `badmatch`, _18

  %% Unique:
  %%    _30
  _60 = succeeded:body _30
  br ^1

39:
  %% warnings_SUITE.erl:1007
  %% Aliased:
  %%    _15
  _31 = match_fail `badmatch`, _15

  %% Unique:
  %%    _31
  _62 = succeeded:body _31
  br ^1

35:
  %% warnings_SUITE.erl:974
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-underscore/1-',1}}
  _32 = match_fail `function_clause`, _0

  %% Unique:
  %%    _32
  _63 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% warnings_SUITE.erl:1032
%% Counter = 11
%% bs_ensure_opt: true
function `warnings_SUITE`:`no_warnings`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _8 = bif:is_list _0
  br _8, ^8, ^7

8:
  %% warnings_SUITE.erl:1064
  %% Aliased:
  %%    _0
  _3 = call (`run`/2), _0, `[{no_warnings,<<"-record(r, {s=ordsets:new(),a,b}).\n\n              a() ->\n                R = #r{},\t\t\t%No warning expected.\n                {R#r.a,R#r.b}.\n\n              b(X) ->\n                T = true,\n                Var = [X],\t\t\t%No warning expected.\n                case T of\n\t          false -> Var;\n                  true -> []\n                end.\n\n              c() ->\n                R0 = {r,\"abc\",undefined,os:timestamp()}, %No warning.\n                case R0 of\n\t          {r,V1,_V2,V3} -> {r,V1,\"def\",V3}\n                end.\n\n              d(In0, Bool) ->\n                {In1,Int} = case id(Bool) of\n                              false -> {In0,0}\n                            end,\n                [In1,Int].\n\n              id(I) -> I.\n           ">>,
               [],[]}]`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% warnings_SUITE.erl:1032
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-no_warnings/1-',1}}
  _4 = match_fail `function_clause`, _0

  %% Unique:
  %%    _4
  _10 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% warnings_SUITE.erl:1067
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`bit_syntax`(_0) {
0:
  %% warnings_SUITE.erl:1111
  %% Aliased:
  %%    _0
  _2 = call (`run`/2), _0, `[{bit_syntax,<<"\n              a(<<-1>>) -> ok;\n              a(<<1023>>) -> ok;\n              a(<<777/signed>>) -> ok;\n              a(<<a/binary>>) -> ok;\n              a(<<a/integer>>) -> ok;\n              a(<<a/float>>) -> ok;\n              a(<<a/utf8>>) -> ok;\n              a(<<a/utf16>>) -> ok;\n              a(<<a/utf32>>) -> ok;\n              a(<<a/utf32>>) -> ok.\n              b(Bin) -> Sz = bad, <<42:Sz>> = Bin.\n              c(Sz, Bin) ->\n                case Bin of\n                  <<-42:Sz/unsigned>> -> ok;\n                  <<42:Sz/float>> -> ok;\n                  <<42:Sz/binary>> -> ok\n                end.\n              d(<<16#110000/utf8>>) -> error;\n              d(_) -> ok.\n             ">>,
              [],
              {warnings,[{{2,15},sys_core_fold,{nomatch,no_clause}},
                         {{2,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_unsigned,-1}}},
                         {{3,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_truncated,unsigned,1023,8}}},
                         {{4,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_truncated,signed,777,8}}},
                         {{5,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,binary}}},
                         {{6,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,integer}}},
                         {{7,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,float}}},
                         {{8,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,utf8}}},
                         {{9,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,utf16}}},
                         {{10,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,utf32}}},
                         {{11,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,a,utf32}}},
                         {{12,35},sys_core_fold,{nomatch,no_clause}},
                         {{12,37},
                          sys_core_fold,
                          {nomatch,{bit_syntax_size,bad}}},
                         {{15,21},
                          sys_core_fold,
                          {nomatch,{bit_syntax_unsigned,-42}}},
                         {{17,21},
                          sys_core_fold,
                          {nomatch,{bit_syntax_type,42,binary}}},
                         {{19,19},
                          sys_core_fold,
                          {nomatch,{bit_syntax_unicode,1114112}}}]}}]`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1114
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`inlining`(_0) {
0:
  %% warnings_SUITE.erl:1136
  %% Aliased:
  %%    _0
  _2 = call (`run`/2), _0, `[{inlining_1,<<"-compile(inline).\n              compute1(X) -> add(X, 0).\n              add(1, 0) -> 1;\n              add(1, Y) -> 1 + Y;\n              add(X, Y) -> X + Y.\n           ">>,
              [],[]},
  {inlining_2,<<"-compile({inline,[add/2]}).\n              compute1(X) -> add(X, 0).\n              add(1, 0) -> 1;\n              add(1, Y) -> 1 + Y;\n              add(X, Y) -> X + Y.\n           ">>,
              [],[]}]`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1139
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`tuple_calls`(_0) {
0:
  %% warnings_SUITE.erl:1150
  %% Aliased:
  %%    _0
  _2 = call (`run`/2), _0, `[{inlining_1,<<"-compile(tuple_calls).\n              dispatch(X) ->\n                (list_to_atom(\"prefix_\" ++\n                atom_to_list(suffix))):doit(X).\n           ">>,
              [],[]}]`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1153
%% Counter = 194
%% bs_ensure_opt: true
function `warnings_SUITE`:`recv_opt_info`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _53 = bif:is_list _0
  br _53, ^188, ^52

188:
  br ^191

191:
  _57 = new_try_tag `'catch'`
  br _57, ^55, ^56

55:
  %% warnings_SUITE.erl:1185
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    _0
  _41 = call (`run_test`/3), _0, `<<"\n                simple_receive() ->\n                    receive\n                        Message -> handle:msg(Message)\n                    end.\n\n                selective_receive(Tag, Message) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                cross_function_receive() ->\n                    cross_function_receive_1(make_ref()).\n\n                cross_function_receive_1(Tag) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                optimized_receive(Process, Request) ->\n                    MRef = monitor(process, Process),\n                    Process ! {self(), MRef, Request},\n                    receive\n                        {MRef, Reply} ->\n                            erlang:demonitor(MRef, [flush]),\n                            handle:reply(Reply);\n                        {'DOWN', MRef, _, _, Reason} ->\n                            handle:error(Reason)\n                    end.\n           ">>`, `[recv_opt_info]`

  %% Aliased:
  %%    _41
  _59 = succeeded:body _41
  br _59, ^59, ^56

59:
  br ^54

56:
  %% Unique:
  %%    _57
  _62 = landingpad `'catch'`, _57

  %% Aliased:
  %%    _62
  _60 = extract _62, `0`
  br ^54

54:
  _63 = phi { _60, ^56 }, { _41, ^59 }

  %% Aliased:
  %%    _63
  %% Unique:
  %%    _57
  _2 = catch_end _57, _63

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _138 = is_tagged_tuple _2, `2`, `warnings`
  br _138, ^135, ^65

135:
  %% Argument types:
  %%    _2 => {'warnings', any()}
  %% Aliased:
  %%    _2
  _14 = get_tuple_element _2, `1`

  %% Aliased:
  %%    _14
  _134 = is_nonempty_list _14
  br _134, ^134, ^65

134:
  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _17 = get_hd _14

  %% Argument types:
  %%    _14 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _14
  _16 = get_tl _14

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _133 = bif:'=:=' _17, `{3,beam_ssa_recv,matches_any_message}`
  br _133, ^133, ^65

133:
  %% Aliased:
  %%    _16
  _132 = is_nonempty_list _16
  br _132, ^132, ^65

132:
  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _19 = get_hd _16

  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  _18 = get_tl _16

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _131 = bif:'=:=' _19, `{8,beam_ssa_recv,unoptimized_selective_receive}`
  br _131, ^131, ^65

131:
  %% Aliased:
  %%    _18
  _130 = is_nonempty_list _18
  br _130, ^130, ^65

130:
  %% Argument types:
  %%    _18 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _18
  _21 = get_hd _18

  %% Argument types:
  %%    _18 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _18
  _20 = get_tl _18

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _129 = bif:'=:=' _21, `{13,beam_ssa_recv,reserved_receive_marker}`
  br _129, ^129, ^65

129:
  %% Aliased:
  %%    _20
  _128 = is_nonempty_list _20
  br _128, ^128, ^65

128:
  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _23 = get_hd _20

  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _20
  _22 = get_tl _20

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _125 = bif:is_tuple _23
  br _125, ^125, ^65

125:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _126 = bif:tuple_size _23

  %% Argument types:
  %%    _126 => 0..16777215
  %% Unique:
  %%    _126
  _127 = bif:'=:=' _126, `3`
  br _127, ^124, ^65

124:
  %% Argument types:
  %%    _23 => {any(), any(), any()}
  %% Aliased:
  %%    _23
  _26 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _123 = bif:'=:=' _26, `13`
  br _123, ^122, ^65

122:
  %% Argument types:
  %%    _23 => {13, any(), any()}
  %% Aliased:
  %%    _23
  _25 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _121 = bif:'=:=' _25, `beam_ssa_recv`
  br _121, ^120, ^65

120:
  %% Argument types:
  %%    _23 => {13, 'beam_ssa_recv', any()}
  %% Aliased:
  %%    _23
  _24 = get_tuple_element _23, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _117 = is_tagged_tuple _24, `2`, `passed_marker`
  br _117, ^114, ^65

114:
  %% Aliased:
  %%    _22
  _113 = is_nonempty_list _22
  br _113, ^113, ^65

113:
  %% Argument types:
  %%    _22 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _22
  _30 = get_hd _22

  %% Argument types:
  %%    _22 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _22
  _29 = get_tl _22

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _112 = bif:'=:=' _30, `{16,beam_ssa_recv,{used_receive_marker,{parameter,1}}}`
  br _112, ^112, ^65

112:
  %% Aliased:
  %%    _29
  _111 = is_nonempty_list _29
  br _111, ^111, ^65

111:
  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _32 = get_hd _29

  %% Argument types:
  %%    _29 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _29
  _31 = get_tl _29

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _110 = bif:'=:=' _32, `{21,beam_ssa_recv,reserved_receive_marker}`
  br _110, ^110, ^65

110:
  %% Aliased:
  %%    _31
  _109 = is_nonempty_list _31
  br _109, ^109, ^65

109:
  %% Argument types:
  %%    _31 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _31
  _34 = get_hd _31

  %% Argument types:
  %%    _31 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _31
  _33 = get_tl _31

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _106 = bif:is_tuple _34
  br _106, ^106, ^65

106:
  %% Argument types:
  %%    _34 => {...}
  %% Aliased:
  %%    _34
  _107 = bif:tuple_size _34

  %% Argument types:
  %%    _107 => 0..16777215
  %% Unique:
  %%    _107
  _108 = bif:'=:=' _107, `3`
  br _108, ^105, ^65

105:
  %% Argument types:
  %%    _34 => {any(), any(), any()}
  %% Aliased:
  %%    _34
  _37 = get_tuple_element _34, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _104 = bif:'=:=' _37, `23`
  br _104, ^103, ^65

103:
  %% Argument types:
  %%    _34 => {23, any(), any()}
  %% Aliased:
  %%    _34
  _36 = get_tuple_element _34, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _36
  _102 = bif:'=:=' _36, `beam_ssa_recv`
  br _102, ^101, ^65

101:
  %% Argument types:
  %%    _34 => {23, 'beam_ssa_recv', any()}
  %% Aliased:
  %%    _34
  _35 = get_tuple_element _34, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _98 = is_tagged_tuple _35, `2`, `used_receive_marker`
  br _98, ^95, ^65

95:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _94 = bif:'=:=' _33, `[]`
  br _94, ^189, ^65

189:
  br ^192

192:
  _69 = new_try_tag `'catch'`
  br _69, ^67, ^68

67:
  %% warnings_SUITE.erl:1205
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    _0
  _43 = call (`run_test`/3), _0, `<<"\n                simple_receive() ->\n                    receive\n                        Message -> handle:msg(Message)\n                    end.\n\n                selective_receive(Tag, Message) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                cross_function_receive() ->\n                    cross_function_receive_1(make_ref()).\n\n                cross_function_receive_1(Tag) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                optimized_receive(Process, Request) ->\n                    MRef = monitor(process, Process),\n                    Process ! {self(), MRef, Request},\n                    receive\n                        {MRef, Reply} ->\n                            erlang:demonitor(MRef, [flush]),\n                            handle:reply(Reply);\n                        {'DOWN', MRef, _, _, Reason} ->\n                            handle:error(Reason)\n                    end.\n           ">>`, `[]`

  %% Aliased:
  %%    _43
  _71 = succeeded:body _43
  br _71, ^71, ^68

71:
  br ^66

68:
  %% Unique:
  %%    _69
  _74 = landingpad `'catch'`, _69

  %% Aliased:
  %%    _74
  _72 = extract _74, `0`
  br ^66

66:
  _75 = phi { _72, ^68 }, { _43, ^71 }

  %% Aliased:
  %%    _75
  %% Unique:
  %%    _69
  _5 = catch_end _69, _75

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _92 = bif:'=:=' _5, `[]`
  br _92, ^190, ^77

190:
  br ^193

193:
  _81 = new_try_tag `'catch'`
  br _81, ^79, ^80

79:
  %% warnings_SUITE.erl:1226
  %% Result type:
  %%    nil() | {any(), ...}
  _45 = call (`run_forms`/2), `[{attribute,0,module,nolocation_recv},
  {attribute,0,export,[{t1,0}]},
  {function,0,t1,0,
      [{clause,0,[],[],
           [{'receive',0,
                [{clause,0,
                     [{var,0,'Msg'}],
                     [],
                     [{call,0,
                          {remote,0,{atom,0,handle},{atom,0,msg}},
                          [{var,0,'Msg'}]}]}]}]}]}]`, `[recv_opt_info]`

  %% Aliased:
  %%    _45
  _83 = succeeded:body _45
  br _83, ^83, ^80

83:
  br ^78

80:
  %% Unique:
  %%    _81
  _86 = landingpad `'catch'`, _81

  %% Aliased:
  %%    _86
  _84 = extract _86, `0`
  br ^78

78:
  _87 = phi { _84, ^80 }, { _45, ^83 }

  %% Aliased:
  %%    _87
  %% Unique:
  %%    _81
  _8 = catch_end _81, _87

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _90 = bif:'=:=' _8, `{warnings,[{none,beam_ssa_recv,matches_any_message}]}`
  br _90, ^90, ^89

90:
  %% Result type:
  %%    'ok'
  ret `ok`

89:
  %% warnings_SUITE.erl:1227
  %% Aliased:
  %%    _8
  _46 = match_fail `badmatch`, _8

  %% Unique:
  %%    _46
  _91 = succeeded:body _46
  br ^1

77:
  %% warnings_SUITE.erl:1205
  %% Aliased:
  %%    _5
  _47 = match_fail `badmatch`, _5

  %% Unique:
  %%    _47
  _93 = succeeded:body _47
  br ^1

65:
  %% warnings_SUITE.erl:1190
  %% Aliased:
  %%    _2
  _48 = match_fail `badmatch`, _2

  %% Unique:
  %%    _48
  _141 = succeeded:body _48
  br ^1

52:
  %% warnings_SUITE.erl:1153
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-recv_opt_info/1-',1}}
  _49 = match_fail `function_clause`, _0

  %% Unique:
  %%    _49
  _142 = succeeded:body _49
  br ^1

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% warnings_SUITE.erl:1232
%% Counter = 58
%% bs_ensure_opt: true
function `warnings_SUITE`:`opportunistic_warnings`(_0) {
0:
  %% warnings_SUITE.erl:1253
  %% Aliased:
  %%    _0
  _14 = call (`run`/2), _0, `[{nothing_disabled,<<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
                    [],
                    {warnings,[{{2,17},
                                sys_core_fold,
                                {nomatch,{shadow,1,{m,1}}}},
                               {{4,24},v3_core,{failed,bad_binary}},
                               {{5,45},
                                sys_core_fold,
                                {failed,{embedded_unit,8,28}}},
                               {{6,43},
                                beam_core_to_ssa,
                                {failed,bad_segment_size}},
                               {{8,24},
                                sys_core_fold,
                                {ignored,useless_building}}]}}]`

  %% Aliased:
  %%    _14
  _28 = succeeded:body _14
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _56 = bif:'=:=' _14, `[]`
  br _56, ^56, ^30

56:
  %% warnings_SUITE.erl:1260
  %% Aliased:
  %%    _0
  _15 = call (`run`/2), _0, `[{all_disabled,<<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
                [nowarn_opportunistic],
                []}]`

  %% Aliased:
  %%    _15
  _31 = succeeded:body _15
  br _31, ^31, ^1

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _54 = bif:'=:=' _15, `[]`
  br _54, ^54, ^33

54:
  %% warnings_SUITE.erl:1271
  %% Aliased:
  %%    _0
  _16 = call (`run`/2), _0, `[{nomatch_disabled,<<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
                    [nowarn_nomatch],
                    {warnings,[{{4,24},v3_core,{failed,bad_binary}},
                               {{5,45},
                                sys_core_fold,
                                {failed,{embedded_unit,8,28}}},
                               {{6,43},
                                beam_core_to_ssa,
                                {failed,bad_segment_size}},
                               {{8,24},
                                sys_core_fold,
                                {ignored,useless_building}}]}}]`

  %% Aliased:
  %%    _16
  _34 = succeeded:body _16
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _52 = bif:'=:=' _16, `[]`
  br _52, ^52, ^36

52:
  %% warnings_SUITE.erl:1280
  %% Aliased:
  %%    _0
  _17 = call (`run`/2), _0, `[{failures_disabled,<<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
                     [nowarn_failed],
                     {warnings,[{{2,17},
                                 sys_core_fold,
                                 {nomatch,{shadow,1,{m,1}}}},
                                {{8,24},
                                 sys_core_fold,
                                 {ignored,useless_building}}]}}]`

  %% Aliased:
  %%    _17
  _37 = succeeded:body _17
  br _37, ^37, ^1

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _50 = bif:'=:=' _17, `[]`
  br _50, ^50, ^39

50:
  %% warnings_SUITE.erl:1291
  %% Aliased:
  %%    _0
  _18 = call (`run`/2), _0, `[{disabled_useless_building,
      <<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
      [nowarn_ignored],
      {warnings,
          [{{2,17},sys_core_fold,{nomatch,{shadow,1,{m,1}}}},
           {{4,24},v3_core,{failed,bad_binary}},
           {{5,45},sys_core_fold,{failed,{embedded_unit,8,28}}},
           {{6,43},beam_core_to_ssa,{failed,bad_segment_size}}]}}]`

  %% Aliased:
  %%    _18
  _40 = succeeded:body _18
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _48 = bif:'=:=' _18, `[]`
  br _48, ^48, ^42

48:
  %% warnings_SUITE.erl:1299
  %% Aliased:
  %%    _0
  _19 = call (`run`/2), _0, `[{disabled_combination,<<"m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           ">>,
                        [nowarn_ignored,nowarn_failed],
                        {warnings,[{{2,17},
                                    sys_core_fold,
                                    {nomatch,{shadow,1,{m,1}}}}]}}]`

  %% Aliased:
  %%    _19
  _43 = succeeded:body _19
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _46 = bif:'=:=' _19, `[]`
  br _46, ^46, ^45

46:
  %% Result type:
  %%    'ok'
  ret `ok`

45:
  %% warnings_SUITE.erl:1299
  %% Aliased:
  %%    _19
  _20 = match_fail `badmatch`, _19

  %% Unique:
  %%    _20
  _47 = succeeded:body _20
  br ^1

42:
  %% warnings_SUITE.erl:1291
  %% Aliased:
  %%    _18
  _21 = match_fail `badmatch`, _18

  %% Unique:
  %%    _21
  _49 = succeeded:body _21
  br ^1

39:
  %% warnings_SUITE.erl:1280
  %% Aliased:
  %%    _17
  _22 = match_fail `badmatch`, _17

  %% Unique:
  %%    _22
  _51 = succeeded:body _22
  br ^1

36:
  %% warnings_SUITE.erl:1271
  %% Aliased:
  %%    _16
  _23 = match_fail `badmatch`, _16

  %% Unique:
  %%    _23
  _53 = succeeded:body _23
  br ^1

33:
  %% warnings_SUITE.erl:1260
  %% Aliased:
  %%    _15
  _24 = match_fail `badmatch`, _15

  %% Unique:
  %%    _24
  _55 = succeeded:body _24
  br ^1

30:
  %% warnings_SUITE.erl:1253
  %% Aliased:
  %%    _14
  _25 = match_fail `badmatch`, _14

  %% Unique:
  %%    _25
  _57 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% warnings_SUITE.erl:1305
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`eep49`(_0) {
0:
  %% warnings_SUITE.erl:1322
  %% Aliased:
  %%    _0
  _2 = call (`run`/2), _0, `[{basic,<<"foo(X) ->\n                  maybe\n                      %% There should be no warning.\n                      Always ?= X,\n                      Always\n                  end.\n           ">>,
         [{feature,maybe_expr,enable}],
         []},
  {disabled,<<"foo() -> maybe.                        %Atom maybe.\n           ">>,
            [{feature,maybe_expr,disable}],
            []}]`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1326
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`inline_list_funcs`(_0) {
0:
  %% warnings_SUITE.erl:1350
  %% Aliased:
  %%    _0
  _2 = call (`run`/2), _0, `[{basic,<<"all(L) ->\n                  lists:all(fun erlang:is_integer/1, L).\n              any(L) ->\n                  lists:any(fun erlang:is_integer/1, L).\n              foreach(L) ->\n                  lists:foreach(fun erlang:is_integer/1, L).\n              map(L) ->\n                  lists:map(fun erlang:abs/1, L).\n              filter(L) ->\n                  lists:map(fun erlang:is_integer/1, L).\n              foldl(L) ->\n                  lists:foldl(fun erlang:is_function/2, L).\n              foldr(L) ->\n                  lists:foldl(fun erlang:is_function/2, L).\n              mapfoldl(L) ->\n                  lists:mapfoldl(fun erlang:is_function/2, L).\n              mapfoldr(L) ->\n                  lists:mapfoldr(fun erlang:is_function/2, L).\n              ">>,
         [inline_list_funcs],
         []}]`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1359
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     nonempty_list({atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
function `warnings_SUITE`:`run`(_0, _1) {
0:
  %% warnings_SUITE.erl:1360
  %% Aliased:
  %%    _0, 
  %%    _1
  _13 = call (`do_run`/2), _0, _1

  %% Aliased:
  %%    _13
  _19 = succeeded:body _13
  br _19, ^19, ^1

19:
  %% warnings_SUITE.erl:1363
  %% Result type:
  %%    nonempty_list({atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Aliased:
  %%    _1
  _8 = call (`'-run/2-lc$^0/1-0-'`/1), _1

  %% Unique:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^20, ^1

20:
  %% warnings_SUITE.erl:1364
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _8
  _16 = call (`do_run`/2), _0, _8

  %% Aliased:
  %%    _16
  _21 = succeeded:body _16
  br _21, ^21, ^1

21:
  %% Aliased:
  %%    _16
  ret _16

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% warnings_SUITE.erl:1366
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
function `warnings_SUITE`:`lines_only`(_0) {
0:
  %% Argument types:
  %%    _0 => {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _0
  _4 = get_tuple_element _0, `3`

  %% Argument types:
  %%    _4 => nil() | {'warnings', nonempty_list({...})}
  %% Aliased:
  %%    _4
  _20 = bif:is_tuple _4
  br _20, ^17, ^14

17:
  %% Result type:
  %%    {any(), any(), ...}
  _1 = make_fun (`lines_only_1`/1)

  %% Argument types:
  %%    _4 => {'warnings', nonempty_list({...})}
  %% Aliased:
  %%    _4
  _8 = get_tuple_element _4, `1`

  %% warnings_SUITE.erl:1367
  %% Aliased:
  %%    _1, 
  %%    _8
  Result1 = call (`lists`:`map`/2), _1, _8

  %% Aliased:
  %%    Result1
  _15 = succeeded:body Result1
  br _15, ^15, ^1

15:
  %% warnings_SUITE.erl:1368
  %% Aliased:
  %%    Result1
  _3 = call (`lists`:`usort`/1), Result1

  %% Aliased:
  %%    _3
  _16 = succeeded:body _3
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _0 => {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _0
  _7 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _0
  _6 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _0
  _5 = get_tuple_element _0, `2`

  %% Argument types:
  %%    _3 => nonempty_list({any(), any(), ...})
  %% Aliased:
  %%    _3
  Result = put_tuple `warnings`, _3

  %% Argument types:
  %%    _5 => list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'})
  %% Aliased:
  %%    _5
  _10 = put_list `{error_location,line}`, _5

  %% Argument types:
  %%    _7 => atom()
  %%    _10 => nonempty_list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'})
  %%    Result => {'warnings', nonempty_list({any(), any(), ...})}
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _7, 
  %%    _10, 
  %%    Result
  _11 = put_tuple _7, _6, _10, Result
  %% Result type:
  %%    {atom(), any(), nonempty_list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), {'warnings', nonempty_list({any(), any(), ...})}}
  %% Unique:
  %%    _11
  ret _11

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12

14:
  %% Result type:
  %%    {atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _0
  ret _0
}

%% warnings_SUITE.erl:1372
%% Counter = 49
%% bs_ensure_opt: true
function `warnings_SUITE`:`lines_only_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _46 = bif:is_tuple _0
  br _46, ^46, ^32

46:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _47 = bif:tuple_size _0
  %% Argument types:
  %%    
  switch _47, ^32, [
    { `2`, ^44 },
    { `3`, ^45 }
  ]

45:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _19 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _18 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _17 = get_tuple_element _0, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _38 = bif:is_tuple _19
  br _38, ^38, ^36

38:
  %% Argument types:
  %%    _19 => {...}
  %% Aliased:
  %%    _19
  _39 = bif:tuple_size _19

  %% Argument types:
  %%    _39 => 0..16777215
  %% Unique:
  %%    _39
  _40 = bif:'=:=' _39, `2`
  br _40, ^37, ^36

37:
  %% Argument types:
  %%    _19 => {any(), any()}
  %% Aliased:
  %%    _19
  _22 = get_tuple_element _19, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17, 
  %%    _18, 
  %%    _22
  _23 = put_tuple _22, _18, _17
  %% Result type:
  %%    {any(), any(), any()}
  %% Unique:
  %%    _23
  ret _23

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _42 = bif:is_integer _19
  br _42, ^42, ^41

42:
  %% Argument types:
  %%    _19 => integer()
  %% Aliased:
  %%    _17, 
  %%    _18
  %% Unique:
  %%    _19
  _24 = put_tuple _19, _18, _17
  %% Result type:
  %%    {integer(), any(), any()}
  %% Unique:
  %%    _24
  ret _24

41:
  %% warnings_SUITE.erl:1376
  %% Aliased:
  %%    _19
  _25 = match_fail `case_clause`, _19

  %% Unique:
  %%    _25
  _43 = succeeded:body _25
  br ^1

44:
  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _12 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {any(), any()}
  %% Aliased:
  %%    _0
  _11 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _33 = bif:is_list _11
  br _33, ^33, ^32

33:
  %% warnings_SUITE.erl:1373
  %% Result type:
  %%    list({any(), any(), ...})
  %% Aliased:
  %%    _11
  _7 = call (`'-lines_only_1/1-lc$^0/1-0-'`/1), _11

  %% Unique:
  %%    _7
  _34 = succeeded:body _7
  br _34, ^34, ^1

34:
  %% Argument types:
  %%    _7 => list({any(), any(), ...})
  %% Aliased:
  %%    _12
  %% Unique:
  %%    _7
  _28 = put_tuple _12, _7
  %% Result type:
  %%    {any(), list({any(), any(), ...})}
  %% Unique:
  %%    _28
  ret _28

32:
  %% warnings_SUITE.erl:1372
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-lines_only_1/1-',1}}
  _29 = match_fail `function_clause`, _0

  %% Unique:
  %%    _29
  _48 = succeeded:body _29
  br ^1

1:
  _30 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _30
}

%% warnings_SUITE.erl:1383
%% Counter = 31
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     nonempty_list({atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
function `warnings_SUITE`:`do_run`(_0, _1) {
0:
  %% Aliased:
  %%    _0
  F = make_fun (`'-do_run/2-fun-0-'`/3), _0

  %% warnings_SUITE.erl:1395
  %% Aliased:
  %%    _1, 
  %%    F
  _26 = call (`lists`:`foldl`/3), F, `[]`, _1

  %% Aliased:
  %%    _26
  _29 = succeeded:body _26
  br _29, ^29, ^1

29:
  %% Aliased:
  %%    _26
  ret _26

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% warnings_SUITE.erl:1399
%% Counter = 66
%% bs_ensure_opt: true
function `warnings_SUITE`:`run_test`(_0, _1, _2) {
0:
  %% warnings_SUITE.erl:1400
  _3 = call (`test_lib`:`uniq`/0)

  %% Aliased:
  %%    _3
  _35 = succeeded:body _3
  br _35, ^35, ^1

35:
  %% warnings_SUITE.erl:1400
  %% Aliased:
  %%    _3
  Module = call (`erlang`:`'++'`/2), `"warnings"`, _3

  %% warnings_SUITE.erl:1401
  %% Aliased:
  %%    Module
  Filename = call (`erlang`:`'++'`/2), Module, `".erl"`

  %% Aliased:
  %%    Filename
  _37 = succeeded:body Filename
  br _37, ^37, ^1

37:
  %% warnings_SUITE.erl:1402
  %% Aliased:
  %%    _0
  DataDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    DataDir
  _38 = succeeded:body DataDir
  br _38, ^38, ^1

38:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _15 = put_list _1, `[]`

  %% Argument types:
  %%    _15 => nonempty_list(any())
  %% Unique:
  %%    _15
  _16 = put_list `"\", 1). "`, _15

  %% Argument types:
  %%    Filename => list(any())
  %%    _16 => nonempty_list(any())
  %% Aliased:
  %%    Filename
  %% Unique:
  %%    _16
  _17 = put_list Filename, _16

  %% Argument types:
  %%    _17 => nonempty_list(any())
  %% Unique:
  %%    _17
  _18 = put_list `"). -file( \""`, _17

  %% Argument types:
  %%    _18 => nonempty_list(any())
  %% Aliased:
  %%    Module
  %% Unique:
  %%    _18
  _19 = put_list Module, _18

  %% Argument types:
  %%    _19 => nonempty_list(any())
  %% Unique:
  %%    _19
  Test1 = put_list `"-module("`, _19

  %% warnings_SUITE.erl:1404
  %% Unique:
  %%    Test1
  Test = call (`erlang`:`iolist_to_binary`/1), Test1

  %% Aliased:
  %%    Test
  _39 = succeeded:body Test
  br _39, ^39, ^1

39:
  %% warnings_SUITE.erl:1405
  %% Aliased:
  %%    DataDir, 
  %%    Filename
  File = call (`filename`:`join`/2), DataDir, Filename

  %% Aliased:
  %%    File
  _40 = succeeded:body File
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _20 = put_list `return`, _2

  %% Argument types:
  %%    _20 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _20
  _21 = put_list `export_all`, _20

  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _21
  Opts = put_list `binary`, _21

  %% warnings_SUITE.erl:1407
  %% Aliased:
  %%    File, 
  %%    Test
  _22 = call (`file`:`write_file`/2), File, Test

  %% Aliased:
  %%    _22
  _41 = succeeded:body _22
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _61 = bif:'=:=' _22, `ok`
  br _61, ^60, ^43

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _23 = put_list `report`, _2

  %% Argument types:
  %%    _23 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _23
  _24 = put_list `export_all`, _23

  %% Argument types:
  %%    _24 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _24
  _25 = put_list `binary`, _24

  %% warnings_SUITE.erl:1410
  %% Aliased:
  %%    File
  %% Unique:
  %%    _25
  _28 = call (`compile`:`file`/2), File, _25

  %% Aliased:
  %%    _28
  _44 = succeeded:body _28
  br _44, ^44, ^1

44:
  %% warnings_SUITE.erl:1413
  %% Aliased:
  %%    File
  %% Unique:
  %%    Opts
  _12 = call (`compile`:`file`/2), File, Opts

  %% Aliased:
  %%    _12
  _45 = succeeded:body _12
  br _45, ^45, ^1

45:
  %% warnings_SUITE.erl:1413
  %% Result type:
  %%    nil() | {any(), ...}
  %% Aliased:
  %%    _12
  Res = call (`get_warnings`/1), _12

  %% Aliased:
  %%    Res
  _46 = succeeded:body Res
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    Res => nil() | {any(), ...}
  %% Aliased:
  %%    Res
  _54 = bif:is_tuple Res
  br _54, ^54, ^47

54:
  %% Argument types:
  %%    Res => {any(), ...}
  %% Aliased:
  %%    Res
  _56 = is_tagged_tuple Res, `2`, `warnings`
  br _56, ^51, ^48

51:
  %% Argument types:
  %%    Res => {'warnings', any()}
  %% Aliased:
  %%    Res
  _26 = get_tuple_element Res, `1`

  %% warnings_SUITE.erl:1416
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _26, 
  %%    Test
  _29 = call (`print_warnings`/2), _26, Test

  %% Unique:
  %%    _29
  _50 = succeeded:body _29
  br _50, ^47, ^1

48:
  %% warnings_SUITE.erl:1414
  %% Aliased:
  %%    Res
  _30 = match_fail `case_clause`, Res

  %% Unique:
  %%    _30
  _58 = succeeded:body _30
  br ^1

47:
  %% warnings_SUITE.erl:1418
  %% Aliased:
  %%    File
  _31 = call (`file`:`delete`/1), File

  %% Aliased:
  %%    _31
  _59 = succeeded:body _31
  br _59, ^59, ^1

59:
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    Res
  ret Res

43:
  %% warnings_SUITE.erl:1407
  %% Aliased:
  %%    _22
  _32 = match_fail `badmatch`, _22

  %% Unique:
  %%    _32
  _62 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% warnings_SUITE.erl:1421
%% Counter = 11
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list({'attribute', 0, 'export' | 'module', 'nolocation_binary' | 'nolocation_recv' | nonempty_list({'t1', 0..1})} | {'function', 0, 't1', 0..1, nonempty_list({'clause', 0, maybe_improper_list(any(), any()), nil(), nonempty_improper_list(any(), any())})})
%%    _1 =>
%%     nonempty_list('bin_opt_info' | 'recv_opt_info')
function `warnings_SUITE`:`run_forms`(_0, _1) {
0:
  %% Argument types:
  %%    _1 => nonempty_list('bin_opt_info' | 'recv_opt_info')
  %% Unique:
  %%    _1
  _3 = put_list `return`, _1

  %% Argument types:
  %%    _3 => nonempty_list('bin_opt_info' | 'recv_opt_info' | 'return')
  %% Unique:
  %%    _3
  _4 = put_list `binary`, _3

  %% warnings_SUITE.erl:1422
  %% Unique:
  %%    _0, 
  %%    _4
  _2 = call (`compile`:`forms`/2), _0, _4

  %% Aliased:
  %%    _2
  _8 = succeeded:body _2
  br _8, ^8, ^1

8:
  %% warnings_SUITE.erl:1422
  %% Result type:
  %%    nil() | {any(), ...}
  %% Aliased:
  %%    _2
  _5 = call (`get_warnings`/1), _2

  %% Aliased:
  %%    _5
  _9 = succeeded:body _5
  br _9, ^9, ^1

9:
  %% Result type:
  %%    nil() | {any(), ...}
  %% Aliased:
  %%    _5
  ret _5

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% warnings_SUITE.erl:1424
%% Counter = 81
%% bs_ensure_opt: true
function `warnings_SUITE`:`get_warnings`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _76 = is_tagged_tuple _0, `4`, `ok`
  br _76, ^73, ^58

73:
  %% Argument types:
  %%    _0 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _0
  _23 = get_tuple_element _0, `2`

  %% Argument types:
  %%    _0 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _0
  _22 = get_tuple_element _0, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _61 = bif:'=:=' _22, `[]`
  br _61, ^61, ^59

61:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _60 = bif:is_binary _23
  br _60, ^60, ^58

60:
  %% Result type:
  %%    nil()
  ret `[]`

59:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _62 = bif:is_binary _23
  br _62, ^62, ^58

62:
  %% warnings_SUITE.erl:1433
  %% Result type:
  %%    list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _22
  _12 = call (`'-get_warnings/1-lc$^0/1-0-'`/1), _22

  %% Aliased:
  %%    _12
  _63 = succeeded:body _12
  br _63, ^63, ^1

63:
  %% Aliased:
  %%    _12
  _71 = is_nonempty_list _12
  br _71, ^71, ^65

71:
  %% Argument types:
  %%    _12 => nonempty_list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _12
  _44 = get_hd _12

  %% Argument types:
  %%    _12 => nonempty_list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _12
  _43 = get_tl _12

  %% Argument types:
  %%    _43 => list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _43
  _66 = bif:'=:=' _43, `[]`
  br _66, ^66, ^65

66:
  %% Argument types:
  %%    _44 => {any(), list({any(), any(), any()})}
  %% Unique:
  %%    _44
  _45 = get_tuple_element _44, `1`

  %% Argument types:
  %%    _45 => list({any(), any(), any()})
  %% Unique:
  %%    _45
  _53 = put_tuple `warnings`, _45
  %% Result type:
  %%    {'warnings', list({any(), any(), any()})}
  %% Unique:
  %%    _53
  ret _53

65:
  %% Argument types:
  %%    _12 => list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _12
  _41 = put_list _12, `[]`

  %% Argument types:
  %%    _41 => nonempty_list(list({any(), list({any(), any(), any()})}))
  %% Unique:
  %%    _41
  _42 = put_list `warnings`, _41

  %% warnings_SUITE.erl:1436
  %% Unique:
  %%    _42
  _54 = call (`erlang`:`list_to_tuple`/1), _42

  %% Aliased:
  %%    _54
  _72 = succeeded:body _54
  br _72, ^72, ^1

72:
  %% Result type:
  %%    {any(), ...}
  %% Aliased:
  %%    _54
  ret _54

58:
  %% warnings_SUITE.erl:1425
  %% Aliased:
  %%    _0
  _55 = match_fail `case_clause`, _0

  %% Unique:
  %%    _55
  _79 = succeeded:body _55
  br ^1

1:
  _56 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _56
}

%% warnings_SUITE.erl:1440
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     bitstring(8)
function `warnings_SUITE`:`print_warnings`(_0, _1) {
0:
  %% warnings_SUITE.erl:1441
  %% Aliased:
  %%    _1
  Lines = call (`binary`:`split`/3), _1, `<<"\n">>`, `[global]`

  %% Aliased:
  %%    Lines
  _19 = succeeded:body Lines
  br _19, ^19, ^1

19:
  %% warnings_SUITE.erl:1442
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _0, 
  %%    Lines
  _9 = call (`'-print_warnings/2-lc$^0/1-0-'`/2), _0, Lines

  %% Unique:
  %%    _9
  _20 = succeeded:body _9
  br _20, ^20, ^1

20:
  %% warnings_SUITE.erl:1443
  %% Unique:
  %%    _9
  _16 = call (`io`:`put_chars`/1), _9

  %% Aliased:
  %%    _16
  _21 = succeeded:body _16
  br _21, ^21, ^1

21:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% warnings_SUITE.erl:1446
%% Counter = 81
%% bs_ensure_opt: true
function `warnings_SUITE`:`print_warning`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _71 = bif:is_tuple _0
  br _71, ^71, ^47

71:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _72 = bif:tuple_size _0

  %% Argument types:
  %%    _72 => 0..16777215
  %% Unique:
  %%    _72
  _73 = bif:'=:=' _72, `3`
  br _73, ^70, ^47

70:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _22 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _67 = bif:is_tuple _22
  br _67, ^67, ^47

67:
  %% Argument types:
  %%    _22 => {...}
  %% Aliased:
  %%    _22
  _68 = bif:tuple_size _22

  %% Argument types:
  %%    _68 => 0..16777215
  %% Unique:
  %%    _68
  _69 = bif:'=:=' _68, `2`
  br _69, ^66, ^47

66:
  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _24 = get_tuple_element _22, `0`

  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% warnings_SUITE.erl:1447
  %% Aliased:
  %%    _1, 
  %%    _24
  Line0 = call (`lists`:`nth`/2), _24, _1

  %% Aliased:
  %%    Line0
  _48 = succeeded:body Line0
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Line0
  _26 = bs_start_match `new`, Line0

  %% Aliased:
  %%    _26
  _64 = succeeded:guard _26
  br _64, ^52, ^25

52:
  %% warnings_SUITE.erl:1448
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _42 = bif:'-' _23, `1`

  %% Aliased:
  %%    _42
  _55 = succeeded:guard _42
  br _55, ^55, ^54

55:
  br ^53

54:
  br ^53

53:
  _29 = phi { `bad_size`, ^54 }, { _42, ^55 }

  %% warnings_SUITE.erl:1448
  %% Argument types:
  %%    _26 => bs_context(1)
  %%    _29 => 'bad_size' | number()
  %% Aliased:
  %%    _26, 
  %%    _29
  _31 = bs_match `binary`, _26, `[unsigned,big]`, _29, `8`

  %% Aliased:
  %%    _31
  _58 = succeeded:guard _31
  br _58, ^58, ^25

58:
  %% Aliased:
  %%    _31
  _32 = bs_extract _31
  _79 = bs_ensure _31, `0`, `8`
  _80 = succeeded:guard _79
  br _80, ^78, ^25

78:
  %% warnings_SUITE.erl:1448
  %% Aliased:
  %%    _31
  %% Anno: #{ensured => true}
  _33 = bs_match `skip`, _79, `binary`, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _33
  _59 = succeeded:guard _33
  br _59, ^75, ^25

75:
  %% warnings_SUITE.erl:1449
  %% Aliased:
  %%    _32
  Spaces = call (`re`:`replace`/4), _32, `<<"[^\t]">>`, `<<" ">>`, `[global]`

  %% Aliased:
  %%    Spaces
  _60 = succeeded:body Spaces
  br _60, ^60, ^1

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Spaces
  CaretLine = put_list Spaces, `["^"]`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _21 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _20 = get_tuple_element _0, `2`

  %% warnings_SUITE.erl:1452
  %% Aliased:
  %%    _20
  _6 = call (_21:`format_error`/1), _20

  %% Aliased:
  %%    _6
  _61 = succeeded:body _6
  br _61, ^61, ^1

61:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _35 = put_list _6, `[]`

  %% Argument types:
  %%    _35 => nonempty_list(any())
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _35
  _36 = put_list _23, _35

  %% Argument types:
  %%    _36 => nonempty_list(any())
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _36
  _37 = put_list _24, _36

  %% warnings_SUITE.erl:1451
  %% Unique:
  %%    _37
  _7 = call (`io_lib`:`format`/2), `"~p:~p: ~ts\n"`, _37

  %% Aliased:
  %%    _7
  _62 = succeeded:body _7
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    CaretLine => nonempty_list(any())
  %% Unique:
  %%    CaretLine
  _38 = put_list CaretLine, `["\n\n"]`

  %% Argument types:
  %%    _38 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _38
  _39 = put_list `"\n"`, _38

  %% Argument types:
  %%    Line0 => bs_matchable(1)
  %%    _39 => nonempty_list(nonempty_list(any()))
  %% Aliased:
  %%    Line0
  %% Unique:
  %%    _39
  _40 = put_list Line0, _39

  %% Argument types:
  %%    _40 => nonempty_list(nonempty_list(any()) | bs_matchable(1))
  %% Aliased:
  %%    _7
  %% Unique:
  %%    _40
  _43 = put_list _7, _40
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _43
  ret _43

25:
  %% warnings_SUITE.erl:1448
  %% Aliased:
  %%    Line0
  _44 = match_fail `badmatch`, Line0

  %% Unique:
  %%    _44
  _65 = succeeded:body _44
  br ^1

1:
  _45 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _45

47:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% warnings_SUITE.erl:1458
%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`fail`() {
0:
  %% warnings_SUITE.erl:1459
  _2 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `warnings_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `warnings_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `warnings_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% warnings_SUITE.erl:1442
%% Counter = 27
%% bs_ensure_opt: true
function `warnings_SUITE`:`'-print_warnings/2-lc$^0/1-0-'`(_5, Lines) {
0:
  %% Aliased:
  %%    _5
  _22 = is_nonempty_list _5
  br _22, ^22, ^19

22:
  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _13 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _12 = get_tl _5

  %% warnings_SUITE.erl:1442
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _13, 
  %%    Lines
  _7 = call (`print_warning`/2), _13, Lines

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% warnings_SUITE.erl:1442
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _12, 
  %%    Lines
  _8 = call (`'-print_warnings/2-lc$^0/1-0-'`/2), _12, Lines

  %% Unique:
  %%    _8
  _21 = succeeded:body _8
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _7 => list(any())
  %%    _8 => list(list(any()))
  %% Unique:
  %%    _7, 
  %%    _8
  _14 = put_list _7, _8
  %% Result type:
  %%    nonempty_list(list(any()))
  %% Unique:
  %%    _14
  ret _14

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _23 = bif:'=:=' _5, `[]`
  br _23, ^23, ^18

23:
  %% Result type:
  %%    nil()
  ret `[]`

18:
  %% Argument types:
  %%    _5 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _5
  _11 = put_tuple `bad_generator`, _5

  %% warnings_SUITE.erl:1442
  %% Unique:
  %%    _11
  _15 = call (`erlang`:`error`/1), _11

  %% Aliased:
  %%    _15
  _24 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% warnings_SUITE.erl:1433
%% Counter = 70
%% bs_ensure_opt: true
function `warnings_SUITE`:`'-get_warnings/1-lc$^0/1-0-'`(_3) {
0:
  %% Aliased:
  %%    _3
  _65 = is_nonempty_list _3
  br _65, ^65, ^56

65:
  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _29 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _28 = get_tl _3

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _61 = bif:is_tuple _29
  br _61, ^61, ^57

61:
  %% Argument types:
  %%    _29 => {...}
  %% Aliased:
  %%    _29
  _62 = bif:tuple_size _29

  %% Argument types:
  %%    _62 => 0..16777215
  %% Unique:
  %%    _62
  _63 = bif:'=:=' _62, `2`
  br _63, ^60, ^57

60:
  %% Argument types:
  %%    _29 => {any(), any()}
  %% Aliased:
  %%    _29
  _31 = get_tuple_element _29, `0`

  %% Argument types:
  %%    _29 => {any(), any()}
  %% Aliased:
  %%    _29
  _30 = get_tuple_element _29, `1`

  %% warnings_SUITE.erl:1431
  %% Result type:
  %%    list({any(), any(), any()})
  %% Aliased:
  %%    _30
  _10 = call (`'-get_warnings/1-lc$^1/1-1-'`/1), _30

  %% Unique:
  %%    _10
  _58 = succeeded:body _10
  br _58, ^58, ^1

58:
  %% warnings_SUITE.erl:1433
  %% Result type:
  %%    list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _28
  _11 = call (`'-get_warnings/1-lc$^0/1-0-'`/1), _28

  %% Unique:
  %%    _11
  _59 = succeeded:body _11
  br _59, ^59, ^1

59:
  %% Argument types:
  %%    _10 => list({any(), any(), any()})
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _10
  _39 = put_tuple _31, _10

  %% Argument types:
  %%    _39 => {any(), list({any(), any(), any()})}
  %%    _11 => list({any(), list({any(), any(), any()})})
  %% Unique:
  %%    _11, 
  %%    _39
  _50 = put_list _39, _11
  %% Result type:
  %%    nonempty_list({any(), list({any(), any(), any()})})
  %% Unique:
  %%    _50
  ret _50

57:
  %% warnings_SUITE.erl:1433
  %% Result type:
  %%    list({any(), list({any(), any(), any()})})
  %% Aliased:
  %%    _28
  _51 = call (`'-get_warnings/1-lc$^0/1-0-'`/1), _28

  %% Unique:
  %%    _51
  _64 = succeeded:body _51
  br _64, ^64, ^1

64:
  %% Result type:
  %%    list({any(), list({any(), any(), any()})})
  %% Unique:
  %%    _51
  ret _51

56:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _66 = bif:'=:=' _3, `[]`
  br _66, ^66, ^55

66:
  %% Result type:
  %%    nil()
  ret `[]`

55:
  %% Argument types:
  %%    _3 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _3
  _27 = put_tuple `bad_generator`, _3

  %% warnings_SUITE.erl:1433
  %% Unique:
  %%    _27
  _52 = call (`erlang`:`error`/1), _27

  %% Aliased:
  %%    _52
  _67 = succeeded:body _52
  br ^1

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% warnings_SUITE.erl:1431
%% Counter = 66
%% bs_ensure_opt: true
function `warnings_SUITE`:`'-get_warnings/1-lc$^1/1-1-'`(_7) {
0:
  %% Aliased:
  %%    _7
  _62 = is_nonempty_list _7
  br _62, ^62, ^53

62:
  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _35 = get_hd _7

  %% Argument types:
  %%    _7 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _7
  _34 = get_tl _7

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _58 = bif:is_tuple _35
  br _58, ^58, ^54

58:
  %% Argument types:
  %%    _35 => {...}
  %% Aliased:
  %%    _35
  _59 = bif:tuple_size _35

  %% Argument types:
  %%    _59 => 0..16777215
  %% Unique:
  %%    _59
  _60 = bif:'=:=' _59, `3`
  br _60, ^57, ^54

57:
  %% Argument types:
  %%    _35 => {any(), any(), any()}
  %% Aliased:
  %%    _35
  _37 = get_tuple_element _35, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _55 = bif:'=:=' _37, `erl_lint`
  br _55, ^54, ^55

55:
  %% warnings_SUITE.erl:1431
  %% Result type:
  %%    list({any(), any(), any()})
  %% Aliased:
  %%    _34
  _9 = call (`'-get_warnings/1-lc$^1/1-1-'`/1), _34

  %% Unique:
  %%    _9
  _56 = succeeded:body _9
  br _56, ^56, ^1

56:
  %% Argument types:
  %%    _35 => {any(), any(), any()}
  %%    _9 => list({any(), any(), any()})
  %% Aliased:
  %%    _35
  %% Unique:
  %%    _9
  _47 = put_list _35, _9
  %% Result type:
  %%    nonempty_list({any(), any(), any()})
  %% Unique:
  %%    _47
  ret _47

54:
  %% warnings_SUITE.erl:1431
  %% Result type:
  %%    list({any(), any(), any()})
  %% Aliased:
  %%    _34
  _48 = call (`'-get_warnings/1-lc$^1/1-1-'`/1), _34

  %% Unique:
  %%    _48
  _61 = succeeded:body _48
  br _61, ^61, ^1

61:
  %% Result type:
  %%    list({any(), any(), any()})
  %% Unique:
  %%    _48
  ret _48

53:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _63 = bif:'=:=' _7, `[]`
  br _63, ^63, ^52

63:
  %% Result type:
  %%    nil()
  ret `[]`

52:
  %% Argument types:
  %%    _7 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _7
  _33 = put_tuple `bad_generator`, _7

  %% warnings_SUITE.erl:1431
  %% Unique:
  %%    _33
  _49 = call (`erlang`:`error`/1), _33

  %% Aliased:
  %%    _49
  _64 = succeeded:body _49
  br ^1

1:
  _50 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _50
}

%% warnings_SUITE.erl:1384
%% Counter = 69
%% bs_ensure_opt: true
function `warnings_SUITE`:`'-do_run/2-fun-0-'`(_5, _4, _0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _46 = bif:is_tuple _5
  br _46, ^46, ^28

46:
  %% Argument types:
  %%    _5 => {...}
  %% Aliased:
  %%    _5
  _47 = bif:tuple_size _5

  %% Argument types:
  %%    _47 => 0..16777215
  %% Unique:
  %%    _47
  _48 = bif:'=:=' _47, `4`
  br _48, ^45, ^28

45:
  %% Argument types:
  %%    _5 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _5
  _15 = get_tuple_element _5, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _16 = put_list _15, `[]`

  %% warnings_SUITE.erl:1385
  %% Unique:
  %%    _16
  _20 = call (`io`:`format`/2), `"### ~s\n"`, _16

  %% Aliased:
  %%    _20
  _29 = succeeded:body _20
  br _29, ^66, ^1

66:
  %% Argument types:
  %%    _5 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _5
  _14 = get_tuple_element _5, `1`

  %% Argument types:
  %%    _5 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _5
  _13 = get_tuple_element _5, `2`
  br ^68

68:
  _33 = new_try_tag `'catch'`
  br _33, ^31, ^32

31:
  %% warnings_SUITE.erl:1386
  %% Result type:
  %%    nil() | {'warnings', any()}
  %% Aliased:
  %%    _0, 
  %%    _13, 
  %%    _14
  _22 = call (`run_test`/3), _0, _14, _13

  %% Aliased:
  %%    _22
  _35 = succeeded:body _22
  br _35, ^35, ^32

35:
  br ^30

32:
  %% Unique:
  %%    _33
  _38 = landingpad `'catch'`, _33

  %% Aliased:
  %%    _38
  _36 = extract _38, `0`
  br ^30

30:
  _39 = phi { _36, ^32 }, { _22, ^35 }

  %% Aliased:
  %%    _39
  %% Unique:
  %%    _33
  _2 = catch_end _33, _39

  %% Argument types:
  %%    _5 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _5
  _12 = get_tuple_element _5, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2, 
  %%    _12
  _42 = bif:'=:=' _2, _12
  br _42, ^42, ^41

42:
  %% Aliased:
  %%    _4
  ret _4

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _17 = put_list _2, `[]`

  %% Argument types:
  %%    _17 => nonempty_list(any())
  %% Aliased:
  %%    _12
  %% Unique:
  %%    _17
  _18 = put_list _12, _17

  %% Argument types:
  %%    _18 => nonempty_list(any())
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _18
  _19 = put_list _15, _18

  %% warnings_SUITE.erl:1390
  %% Unique:
  %%    _19
  _23 = call (`io`:`format`/2), `"~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"`, _19

  %% Aliased:
  %%    _23
  _43 = succeeded:body _23
  br _43, ^43, ^1

43:
  %% warnings_SUITE.erl:1392
  _24 = call (`fail`/0)

  %% Aliased:
  %%    _24
  _44 = succeeded:body _24
  br _44, ^44, ^1

44:
  %% Aliased:
  %%    _24
  ret _24

28:
  %% warnings_SUITE.erl:1384
  %% Aliased:
  %%    _4, 
  %%    _5
  %% Anno: #{inlined => {'-do_run/2-inlined-0-',2}}
  _25 = match_fail `function_clause`, _5, _4

  %% Unique:
  %%    _25
  _49 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% warnings_SUITE.erl:1373
%% Counter = 39
%% bs_ensure_opt: true
function `warnings_SUITE`:`'-lines_only_1/1-lc$^0/1-0-'`(_3) {
0:
  %% Aliased:
  %%    _3
  _34 = is_nonempty_list _3
  br _34, ^34, ^31

34:
  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _16 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _15 = get_tl _3

  %% warnings_SUITE.erl:1373
  %% Result type:
  %%    {any(), any(), ...}
  %% Aliased:
  %%    _16
  _5 = call (`lines_only_1`/1), _16

  %% Unique:
  %%    _5
  _32 = succeeded:body _5
  br _32, ^32, ^1

32:
  %% warnings_SUITE.erl:1373
  %% Result type:
  %%    list({any(), any(), ...})
  %% Aliased:
  %%    _15
  _6 = call (`'-lines_only_1/1-lc$^0/1-0-'`/1), _15

  %% Unique:
  %%    _6
  _33 = succeeded:body _6
  br _33, ^33, ^1

33:
  %% Argument types:
  %%    _5 => {any(), any(), ...}
  %%    _6 => list({any(), any(), ...})
  %% Unique:
  %%    _5, 
  %%    _6
  _26 = put_list _5, _6
  %% Result type:
  %%    nonempty_list({any(), any(), ...})
  %% Unique:
  %%    _26
  ret _26

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _35 = bif:'=:=' _3, `[]`
  br _35, ^35, ^30

35:
  %% Result type:
  %%    nil()
  ret `[]`

30:
  %% Argument types:
  %%    _3 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _3
  _14 = put_tuple `bad_generator`, _3

  %% warnings_SUITE.erl:1373
  %% Unique:
  %%    _14
  _27 = call (`erlang`:`error`/1), _14

  %% Aliased:
  %%    _27
  _36 = succeeded:body _27
  br ^1

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% warnings_SUITE.erl:1363
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _4 =>
%%     list({atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
function `warnings_SUITE`:`'-run/2-lc$^0/1-0-'`(_4) {
0:
  %% Aliased:
  %%    _4
  _22 = is_nonempty_list _4
  br _22, ^22, ^23

22:
  %% Argument types:
  %%    _4 => nonempty_list({atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Aliased:
  %%    _4
  _12 = get_hd _4

  %% Argument types:
  %%    _4 => nonempty_list({atom(), any(), list(atom() | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Aliased:
  %%    _4
  _11 = get_tl _4

  %% warnings_SUITE.erl:1363
  %% Result type:
  %%    {atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %% Aliased:
  %%    _12
  _6 = call (`lines_only`/1), _12

  %% Aliased:
  %%    _6
  _20 = succeeded:body _6
  br _20, ^20, ^1

20:
  %% warnings_SUITE.erl:1363
  %% Result type:
  %%    list({atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Aliased:
  %%    _11
  _7 = call (`'-run/2-lc$^0/1-0-'`/1), _11

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _6 => {atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}}
  %%    _7 => list({atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _7
  _14 = put_list _6, _7
  %% Result type:
  %%    nonempty_list({atom(), any(), list(atom() | {'error_location', 'line'} | {'feature', 'maybe_expr', 'disable' | 'enable'}), nil() | {'warnings', nonempty_list({...})}})
  %% Unique:
  %%    _14
  ret _14

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16

23:
  %% Result type:
  %%    nil()
  ret `[]`
}
