{attribute,{1,1},file,{"sys_core_inline.erl",1}}.
{attribute,{43,2},module,sys_core_inline}.
{attribute,{46,2},export,[{module,2}]}.
{attribute,{48,2},import,{lists,[{member,2},{map,2},{foldl,3},{mapfoldl,3}]}}.
{attribute,{1,1},file,{"core_parse.hrl",1}}.
{attribute,
    {32,2},
    record,
    {c_alias,
        [{typed_record_field,
             {record_field,{32,19},{atom,{32,19},anno},{nil,{32,24}}},
             {type,{32,30},list,[]}},
         {typed_record_field,
             {record_field,{32,38},{atom,{32,38},var}},
             {remote_type,
                 {32,45},
                 [{atom,{32,45},cerl},{atom,{32,50},cerl},[]]}},
         {typed_record_field,
             {record_field,{33,5},{atom,{33,5},pat}},
             {remote_type,
                 {33,12},
                 [{atom,{33,12},cerl},{atom,{33,17},cerl},[]]}}]}}.
{attribute,
    {35,2},
    record,
    {c_apply,
        [{typed_record_field,
             {record_field,{35,19},{atom,{35,19},anno},{nil,{35,24}}},
             {type,{35,30},list,[]}},
         {typed_record_field,
             {record_field,{35,38},{atom,{35,38},op}},
             {remote_type,
                 {35,44},
                 [{atom,{35,44},cerl},{atom,{35,49},cerl},[]]}},
         {typed_record_field,
             {record_field,{36,5},{atom,{36,5},args}},
             {type,
                 {36,13},
                 list,
                 [{remote_type,
                      {36,14},
                      [{atom,{36,14},cerl},{atom,{36,19},cerl},[]]}]}}]}}.
{attribute,
    {38,2},
    record,
    {c_binary,
        [{typed_record_field,
             {record_field,{38,20},{atom,{38,20},anno},{nil,{38,25}}},
             {type,{38,31},list,[]}},
         {typed_record_field,
             {record_field,{38,39},{atom,{38,39},segments}},
             {type,
                 {38,51},
                 list,
                 [{remote_type,
                      {38,52},
                      [{atom,{38,52},cerl},{atom,{38,57},c_bitstr},[]]}]}}]}}.
{attribute,
    {40,2},
    record,
    {c_bitstr,
        [{typed_record_field,
             {record_field,{40,20},{atom,{40,20},anno},{nil,{40,25}}},
             {type,{40,31},list,[]}},
         {typed_record_field,
             {record_field,{40,39},{atom,{40,39},val}},
             {remote_type,
                 {40,46},
                 [{atom,{40,46},cerl},{atom,{40,51},cerl},[]]}},
         {typed_record_field,
             {record_field,{41,6},{atom,{41,6},size}},
             {remote_type,
                 {41,14},
                 [{atom,{41,14},cerl},{atom,{41,19},cerl},[]]}},
         {typed_record_field,
             {record_field,{42,6},{atom,{42,6},unit}},
             {remote_type,
                 {42,14},
                 [{atom,{42,14},cerl},{atom,{42,19},cerl},[]]}},
         {typed_record_field,
             {record_field,{43,6},{atom,{43,6},type}},
             {remote_type,
                 {43,14},
                 [{atom,{43,14},cerl},{atom,{43,19},cerl},[]]}},
         {typed_record_field,
             {record_field,{44,6},{atom,{44,6},flags}},
             {remote_type,
                 {44,15},
                 [{atom,{44,15},cerl},{atom,{44,20},cerl},[]]}}]}}.
{attribute,
    {46,2},
    record,
    {c_call,
        [{typed_record_field,
             {record_field,{46,18},{atom,{46,18},anno},{nil,{46,23}}},
             {type,{46,29},list,[]}},
         {typed_record_field,
             {record_field,{46,37},{atom,{46,37},module}},
             {remote_type,
                 {46,47},
                 [{atom,{46,47},cerl},{atom,{46,52},cerl},[]]}},
         {typed_record_field,
             {record_field,{47,4},{atom,{47,4},name}},
             {remote_type,
                 {47,12},
                 [{atom,{47,12},cerl},{atom,{47,17},cerl},[]]}},
         {typed_record_field,
             {record_field,{48,4},{atom,{48,4},args}},
             {type,
                 {48,12},
                 list,
                 [{remote_type,
                      {48,13},
                      [{atom,{48,13},cerl},{atom,{48,18},cerl},[]]}]}}]}}.
{attribute,
    {50,2},
    record,
    {c_case,
        [{typed_record_field,
             {record_field,{50,18},{atom,{50,18},anno},{nil,{50,23}}},
             {type,{50,29},list,[]}},
         {typed_record_field,
             {record_field,{50,37},{atom,{50,37},arg}},
             {remote_type,
                 {50,44},
                 [{atom,{50,44},cerl},{atom,{50,49},cerl},[]]}},
         {typed_record_field,
             {record_field,{51,4},{atom,{51,4},clauses}},
             {type,
                 {51,15},
                 list,
                 [{remote_type,
                      {51,16},
                      [{atom,{51,16},cerl},{atom,{51,21},cerl},[]]}]}}]}}.
{attribute,
    {53,2},
    record,
    {c_catch,
        [{typed_record_field,
             {record_field,{53,19},{atom,{53,19},anno},{nil,{53,24}}},
             {type,{53,30},list,[]}},
         {typed_record_field,
             {record_field,{53,38},{atom,{53,38},body}},
             {remote_type,
                 {53,46},
                 [{atom,{53,46},cerl},{atom,{53,51},cerl},[]]}}]}}.
{attribute,
    {55,2},
    record,
    {c_clause,
        [{typed_record_field,
             {record_field,{55,20},{atom,{55,20},anno},{nil,{55,25}}},
             {type,{55,31},list,[]}},
         {typed_record_field,
             {record_field,{55,39},{atom,{55,39},pats}},
             {type,
                 {55,47},
                 list,
                 [{remote_type,
                      {55,48},
                      [{atom,{55,48},cerl},{atom,{55,53},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{56,6},{atom,{56,6},guard}},
             {remote_type,
                 {56,15},
                 [{atom,{56,15},cerl},{atom,{56,20},cerl},[]]}},
         {typed_record_field,
             {record_field,{57,6},{atom,{57,6},body}},
             {type,
                 {57,14},
                 union,
                 [{remote_type,
                      {57,14},
                      [{atom,{57,14},cerl},{atom,{57,19},cerl},[]]},
                  {type,{57,28},any,[]}]}}]}}.
{attribute,
    {59,2},
    record,
    {c_cons,
        [{typed_record_field,
             {record_field,{59,18},{atom,{59,18},anno},{nil,{59,23}}},
             {type,{59,29},list,[]}},
         {typed_record_field,
             {record_field,{59,37},{atom,{59,37},hd}},
             {remote_type,
                 {59,43},
                 [{atom,{59,43},cerl},{atom,{59,48},cerl},[]]}},
         {typed_record_field,
             {record_field,{60,4},{atom,{60,4},tl}},
             {remote_type,
                 {60,10},
                 [{atom,{60,10},cerl},{atom,{60,15},cerl},[]]}}]}}.
{attribute,
    {62,2},
    record,
    {c_fun,
        [{typed_record_field,
             {record_field,{62,17},{atom,{62,17},anno},{nil,{62,22}}},
             {type,{62,28},list,[]}},
         {typed_record_field,
             {record_field,{62,36},{atom,{62,36},vars}},
             {type,
                 {62,44},
                 list,
                 [{remote_type,
                      {62,45},
                      [{atom,{62,45},cerl},{atom,{62,50},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{63,3},{atom,{63,3},body}},
             {remote_type,
                 {63,11},
                 [{atom,{63,11},cerl},{atom,{63,16},cerl},[]]}}]}}.
{attribute,
    {65,2},
    record,
    {c_let,
        [{typed_record_field,
             {record_field,{65,17},{atom,{65,17},anno},{nil,{65,22}}},
             {type,{65,28},list,[]}},
         {typed_record_field,
             {record_field,{65,36},{atom,{65,36},vars}},
             {type,
                 {65,44},
                 list,
                 [{remote_type,
                      {65,45},
                      [{atom,{65,45},cerl},{atom,{65,50},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{66,3},{atom,{66,3},arg}},
             {remote_type,
                 {66,10},
                 [{atom,{66,10},cerl},{atom,{66,15},cerl},[]]}},
         {typed_record_field,
             {record_field,{67,3},{atom,{67,3},body}},
             {remote_type,
                 {67,11},
                 [{atom,{67,11},cerl},{atom,{67,16},cerl},[]]}}]}}.
{attribute,
    {69,2},
    record,
    {c_letrec,
        [{typed_record_field,
             {record_field,{69,20},{atom,{69,20},anno},{nil,{69,25}}},
             {type,{69,31},list,[]}},
         {typed_record_field,
             {record_field,{70,20},{atom,{70,20},defs}},
             {type,
                 {70,28},
                 list,
                 [{type,
                      {70,29},
                      tuple,
                      [{remote_type,
                           {70,30},
                           [{atom,{70,30},cerl},{atom,{70,35},cerl},[]]},
                       {remote_type,
                           {70,43},
                           [{atom,{70,43},cerl},{atom,{70,48},cerl},[]]}]}]}},
         {typed_record_field,
             {record_field,{71,6},{atom,{71,6},body}},
             {remote_type,
                 {71,14},
                 [{atom,{71,14},cerl},{atom,{71,19},cerl},[]]}}]}}.
{attribute,
    {73,2},
    record,
    {c_literal,
        [{typed_record_field,
             {record_field,{73,21},{atom,{73,21},anno},{nil,{73,26}}},
             {type,{73,32},list,[]}},
         {typed_record_field,
             {record_field,{73,40},{atom,{73,40},val}},
             {type,{73,47},any,[]}}]}}.
{attribute,
    {75,2},
    record,
    {c_map,
        [{typed_record_field,
             {record_field,{75,17},{atom,{75,17},anno},{nil,{75,22}}},
             {type,{75,28},list,[]}},
         {typed_record_field,
             {record_field,
                 {76,3},
                 {atom,{76,3},arg},
                 {record,
                     {76,7},
                     c_literal,
                     [{record_field,
                          {76,18},
                          {atom,{76,18},val},
                          {map,{76,22},[]}}]}},
             {type,
                 {76,30},
                 union,
                 [{remote_type,
                      {76,30},
                      [{atom,{76,30},cerl},{atom,{76,35},c_var},[]]},
                  {remote_type,
                      {76,45},
                      [{atom,{76,45},cerl},{atom,{76,50},c_literal},[]]}]}},
         {typed_record_field,
             {record_field,{77,3},{atom,{77,3},es}},
             {type,
                 {77,9},
                 list,
                 [{remote_type,
                      {77,10},
                      [{atom,{77,10},cerl},{atom,{77,15},c_map_pair},[]]}]}},
         {typed_record_field,
             {record_field,{78,3},{atom,{78,3},is_pat},{atom,{78,10},false}},
             {type,{78,19},boolean,[]}}]}}.
{attribute,
    {80,2},
    record,
    {c_map_pair,
        [{typed_record_field,
             {record_field,{80,22},{atom,{80,22},anno},{nil,{80,27}}},
             {type,{80,33},list,[]}},
         {typed_record_field,
             {record_field,{81,15},{atom,{81,15},op}},
             {type,
                 {81,21},
                 union,
                 [{type,
                      {81,21},
                      record,
                      [{atom,{81,22},c_literal},
                       {type,
                           {81,32},
                           field_type,
                           [{atom,{81,32},val},{atom,{81,37},assoc}]}]},
                  {type,
                      {81,48},
                      record,
                      [{atom,{81,49},c_literal},
                       {type,
                           {81,59},
                           field_type,
                           [{atom,{81,59},val},{atom,{81,64},exact}]}]}]}},
         {typed_record_field,
             {record_field,{82,8},{atom,{82,8},key}},
             {type,{82,15},any,[]}},
         {typed_record_field,
             {record_field,{83,8},{atom,{83,8},val}},
             {type,{83,15},any,[]}}]}}.
{attribute,
    {85,2},
    record,
    {c_module,
        [{typed_record_field,
             {record_field,{85,20},{atom,{85,20},anno},{nil,{85,25}}},
             {type,{85,31},list,[]}},
         {typed_record_field,
             {record_field,{85,39},{atom,{85,39},name}},
             {remote_type,
                 {85,47},
                 [{atom,{85,47},cerl},{atom,{85,52},cerl},[]]}},
         {typed_record_field,
             {record_field,{86,6},{atom,{86,6},exports}},
             {type,
                 {86,17},
                 list,
                 [{remote_type,
                      {86,18},
                      [{atom,{86,18},cerl},{atom,{86,23},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{87,6},{atom,{87,6},attrs}},
             {type,
                 {87,15},
                 list,
                 [{type,
                      {87,16},
                      tuple,
                      [{remote_type,
                           {87,17},
                           [{atom,{87,17},cerl},{atom,{87,22},cerl},[]]},
                       {remote_type,
                           {87,30},
                           [{atom,{87,30},cerl},{atom,{87,35},cerl},[]]}]}]}},
         {typed_record_field,
             {record_field,{88,6},{atom,{88,6},defs}},
             {type,
                 {88,14},
                 list,
                 [{type,
                      {88,15},
                      tuple,
                      [{remote_type,
                           {88,16},
                           [{atom,{88,16},cerl},{atom,{88,21},cerl},[]]},
                       {remote_type,
                           {88,29},
                           [{atom,{88,29},cerl},
                            {atom,{88,34},cerl},
                            []]}]}]}}]}}.
{attribute,
    {90,2},
    record,
    {c_opaque,
        [{typed_record_field,
             {record_field,{90,20},{atom,{90,20},anno},{nil,{90,25}}},
             {type,{90,31},list,[]}},
         {typed_record_field,
             {record_field,{90,39},{atom,{90,39},val}},
             {type,{90,46},any,[]}}]}}.
{attribute,
    {92,2},
    record,
    {c_primop,
        [{typed_record_field,
             {record_field,{92,20},{atom,{92,20},anno},{nil,{92,25}}},
             {type,{92,31},list,[]}},
         {typed_record_field,
             {record_field,{92,39},{atom,{92,39},name}},
             {remote_type,
                 {92,47},
                 [{atom,{92,47},cerl},{atom,{92,52},cerl},[]]}},
         {typed_record_field,
             {record_field,{93,6},{atom,{93,6},args}},
             {type,
                 {93,14},
                 list,
                 [{remote_type,
                      {93,15},
                      [{atom,{93,15},cerl},{atom,{93,20},cerl},[]]}]}}]}}.
{attribute,
    {95,2},
    record,
    {c_receive,
        [{typed_record_field,
             {record_field,{95,21},{atom,{95,21},anno},{nil,{95,26}}},
             {type,{95,32},list,[]}},
         {typed_record_field,
             {record_field,{95,40},{atom,{95,40},clauses}},
             {type,
                 {95,51},
                 list,
                 [{remote_type,
                      {95,52},
                      [{atom,{95,52},cerl},{atom,{95,57},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{96,7},{atom,{96,7},timeout}},
             {remote_type,
                 {96,18},
                 [{atom,{96,18},cerl},{atom,{96,23},cerl},[]]}},
         {typed_record_field,
             {record_field,{97,7},{atom,{97,7},action}},
             {remote_type,
                 {97,17},
                 [{atom,{97,17},cerl},{atom,{97,22},cerl},[]]}}]}}.
{attribute,
    {99,2},
    record,
    {c_seq,
        [{typed_record_field,
             {record_field,{99,17},{atom,{99,17},anno},{nil,{99,22}}},
             {type,{99,28},list,[]}},
         {typed_record_field,
             {record_field,{99,36},{atom,{99,36},arg}},
             {type,
                 {99,43},
                 union,
                 [{remote_type,
                      {99,43},
                      [{atom,{99,43},cerl},{atom,{99,48},cerl},[]]},
                  {type,{99,57},any,[]}]}},
         {typed_record_field,
             {record_field,{100,3},{atom,{100,3},body}},
             {remote_type,
                 {100,11},
                 [{atom,{100,11},cerl},{atom,{100,16},cerl},[]]}}]}}.
{attribute,
    {102,2},
    record,
    {c_try,
        [{typed_record_field,
             {record_field,{102,17},{atom,{102,17},anno},{nil,{102,22}}},
             {type,{102,28},list,[]}},
         {typed_record_field,
             {record_field,{102,36},{atom,{102,36},arg}},
             {remote_type,
                 {102,43},
                 [{atom,{102,43},cerl},{atom,{102,48},cerl},[]]}},
         {typed_record_field,
             {record_field,{103,3},{atom,{103,3},vars}},
             {type,
                 {103,11},
                 list,
                 [{remote_type,
                      {103,12},
                      [{atom,{103,12},cerl},{atom,{103,17},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{104,3},{atom,{104,3},body}},
             {remote_type,
                 {104,11},
                 [{atom,{104,11},cerl},{atom,{104,16},cerl},[]]}},
         {typed_record_field,
             {record_field,{105,3},{atom,{105,3},evars}},
             {type,
                 {105,12},
                 list,
                 [{remote_type,
                      {105,13},
                      [{atom,{105,13},cerl},{atom,{105,18},cerl},[]]}]}},
         {typed_record_field,
             {record_field,{106,3},{atom,{106,3},handler}},
             {remote_type,
                 {106,14},
                 [{atom,{106,14},cerl},{atom,{106,19},cerl},[]]}}]}}.
{attribute,
    {108,2},
    record,
    {c_tuple,
        [{typed_record_field,
             {record_field,{108,19},{atom,{108,19},anno},{nil,{108,24}}},
             {type,{108,30},list,[]}},
         {typed_record_field,
             {record_field,{108,38},{atom,{108,38},es}},
             {type,
                 {108,44},
                 list,
                 [{remote_type,
                      {108,45},
                      [{atom,{108,45},cerl},{atom,{108,50},cerl},[]]}]}}]}}.
{attribute,
    {110,2},
    record,
    {c_values,
        [{typed_record_field,
             {record_field,{110,20},{atom,{110,20},anno},{nil,{110,25}}},
             {type,{110,31},list,[]}},
         {typed_record_field,
             {record_field,{110,39},{atom,{110,39},es}},
             {type,
                 {110,45},
                 list,
                 [{remote_type,
                      {110,46},
                      [{atom,{110,46},cerl},{atom,{110,51},cerl},[]]}]}}]}}.
{attribute,
    {112,2},
    record,
    {c_var,
        [{typed_record_field,
             {record_field,{112,17},{atom,{112,17},anno},{nil,{112,22}}},
             {type,{112,28},list,[]}},
         {typed_record_field,
             {record_field,{112,36},{atom,{112,36},name}},
             {remote_type,
                 {112,44},
                 [{atom,{112,44},cerl},{atom,{112,49},var_name},[]]}}]}}.
{attribute,{51,1},file,{"sys_core_inline.erl",51}}.
{attribute,{53,2},
           record,
           {inline,[{record_field,{53,18},
                                  {atom,{53,18},exports},
                                  {nil,{53,26}}},
                    {record_field,{53,29},
                                  {atom,{53,29},thresh},
                                  {integer,{53,36},0}},
                    {record_field,{53,38},
                                  {atom,{53,38},inline},
                                  {nil,{53,45}}}]}}.
{attribute,
    {56,2},
    record,
    {fstat,
        [{typed_record_field,
             {record_field,{56,17},{atom,{56,17},func}},
             {type,{56,26},atom,[]}},
         {typed_record_field,
             {record_field,{57,3},{atom,{57,3},arity}},
             {type,{57,12},byte,[]}},
         {record_field,{58,3},{atom,{58,3},def}},
         {record_field,{59,3},{atom,{59,3},weight},{integer,{59,10},0}},
         {typed_record_field,
             {record_field,{60,3},{atom,{60,3},inline},{atom,{60,10},false}},
             {type,{60,21},boolean,[]}},
         {typed_record_field,
             {record_field,{61,3},{atom,{61,3},modified},{atom,{61,12},false}},
             {type,{61,21},boolean,[]}}]}}.
{attribute,
    {64,2},
    record,
    {ifun,
        [{typed_record_field,
             {record_field,{64,16},{atom,{64,16},func}},
             {type,{64,25},atom,[]}},
         {typed_record_field,
             {record_field,{65,9},{atom,{65,9},arity}},
             {type,{65,18},byte,[]}},
         {record_field,{66,9},{atom,{66,9},vars}},
         {record_field,{67,9},{atom,{67,9},body}},
         {record_field,{68,9},{atom,{68,9},weight}}]}}.
{attribute,{70,2},
           spec,
           {{module,2},
            [{type,{70,13},
                   'fun',
                   [{type,{70,13},
                          product,
                          [{type,{70,14},record,[{atom,{70,15},c_module}]},
                           {type,{70,27},list,[{var,{70,28},'_'}]}]},
                    {type,{70,35},
                          tuple,
                          [{atom,{70,36},ok},
                           {type,{70,42},
                                 record,
                                 [{atom,{70,43},c_module}]}]}]}]}}.
{function,
 {72,1},
 module,2,
 [{clause,
   {72,1},
   [{var,{72,1},'_'},{var,{72,1},'_'}],
   [[{call,
      {72,1},
      {remote,{72,1},{atom,{72,1},fake},{atom,{72,1},is_beam_bif_info}},
      []}]],
   [{debug_line,72,1},{atom,{72,1},ignore}]},
  {clause,
   {72,1},
   [{match,
     {72,8},
     {tuple,
      {72,8},
      [{atom,{72,8},c_module},
       {var,{72,8},'_'},
       {var,{72,8},'_'},
       {var,{72,26},'Es'},
       {var,{72,8},'_'},
       {var,{72,34},'Ds0'}]},
     {var,{72,39},'Mod'}},
    {var,{72,44},'Opts'}],
   [],
   [{debug_line,73,2},
    {'case',
     {73,5},
     {call,{73,10},{atom,{73,10},inline_option},[{var,{73,24},'Opts'}]},
     [{clause,
       {74,2},
       [{tuple,{74,2},[{var,{74,3},'Thresh'},{var,{74,10},'Fs'}]}],
       [[{call,
          {74,19},
          {remote,{74,19},{atom,{74,19},erlang},{atom,{74,19},is_integer}},
          [{var,{74,30},'Thresh'}]},
         {op,{74,46},'>',{var,{74,39},'Thresh'},{integer,{74,48},0}}],
        [{op,{74,54},'=/=',{var,{74,51},'Fs'},{nil,{74,58}}}]],
       [{debug_line,75,3},
        {'case',
         {75,6},
         {call,
          {75,11},
          {remote,{75,20},{atom,{75,11},proplists},{atom,{75,21},get_bool}},
          [{atom,{75,30},verbose},{var,{75,39},'Opts'}]},
         [{clause,
           {76,3},
           [{atom,{76,3},true}],
           [],
           [{debug_line,77,4},
            {call,
             {77,7},
             {remote,{77,9},{atom,{77,7},io},{atom,{77,10},format}},
             [{block,0,
               [{string,{77,17},"Old inliner: threshold=~p functions=~p\n"}]},
              {block,0,
               [{debug_line,78,5},
                {cons,
                 {78,10},
                 {var,{78,11},'Thresh'},
                 {cons,{78,18},{var,{78,18},'Fs'},{nil,{78,20}}}}]}]}]},
          {clause,
           {79,3},
           [{atom,{79,3},false}],
           [],
           [{debug_line,79,6},{atom,{79,12},ok}]}]},
        {debug_line,81,7},
        {match,
         {81,6},
         {var,{81,6},'Ds1'},
         {call,
          {81,12},
          {atom,{81,12},inline},
          [{var,{81,19},'Ds0'},
           {block,0,
            [{tuple,
              {81,24},
              [{atom,{81,24},inline},
               {var,{81,40},'Es'},
               {var,{81,50},'Thresh'},
               {var,{81,64},'Fs'}]}]}]}},
        {debug_line,82,8},
        {tuple,
         {82,6},
         [{atom,{82,7},ok},
          {block,
           {82,10},
           [{match,{82,10},{var,{82,10},rec0},{var,{82,10},'Mod'}},
            {'case',
             {82,23},
             {var,{82,10},rec0},
             [{clause,
               {82,23},
               [{tuple,
                 {82,23},
                 [{atom,{82,23},c_module},
                  {var,{82,23},'_'},
                  {var,{82,23},'_'},
                  {var,{82,23},'_'},
                  {var,{82,23},'_'},
                  {var,{82,23},'_'}]}],
               [],
               [{call,
                 {82,23},
                 {remote,
                  {82,23},
                  {atom,{82,23},erlang},
                  {atom,{82,23},setelement}},
                 [{integer,{82,23},6},
                  {var,{82,10},rec0},
                  {var,{82,28},'Ds1'}]}]},
              {clause,
               [{generated,true},{location,{82,23}}],
               [{var,[{generated,true},{location,{82,23}}],'_'}],
               [],
               [{call,
                 [{generated,true},{location,{82,23}}],
                 {remote,
                  [{generated,true},{location,{82,23}}],
                  {atom,[{generated,true},{location,{82,23}}],erlang},
                  {atom,[{generated,true},{location,{82,23}}],error}},
                 [{tuple,
                   [{generated,true},{location,{82,23}}],
                   [{atom,[{generated,true},{location,{82,23}}],badrecord},
                    {var,{82,10},rec0}]}]}]}]}]}]}]},
      {clause,
       {83,2},
       [{var,{83,2},'_Other'}],
       [],
       [{debug_line,83,9},
        {tuple,{83,12},[{atom,{83,13},ok},{var,{83,16},'Mod'}]}]}]}]}]}.
{function,
 {86,1},
 inline_option,1,
 [{clause,
   {86,1},
   [{var,{86,1},'_'}],
   [[{call,
      {86,1},
      {remote,{86,1},{atom,{86,1},fake},{atom,{86,1},is_beam_bif_info}},
      []}]],
   [{debug_line,86,10},{atom,{86,1},ignore}]},
  {clause,
   {86,1},
   [{var,{86,15},'Opts'}],
   [],
   [{debug_line,87,11},
    {call,
     {87,5},
     {remote,{87,5},{atom,{87,5},lists},{atom,{87,5},foldl}},
     [{block,0,
       [{'fun',
         {87,11},
         {clauses,
          [{clause,
            {87,15},
            [{tuple,
              {87,16},
              [{atom,{87,17},inline},
               {match,
                {87,24},
                {tuple,{87,24},[{var,{87,25},'_'},{var,{87,27},'_'}]},
                {var,{87,30},'Val'}}]},
             {tuple,{87,36},[{var,{87,37},'T'},{var,{87,39},'Fs'}]}],
            [],
            [{debug_line,88,12},
             {tuple,
              {88,5},
              [{var,{88,6},'T'},
               {cons,{88,8},{var,{88,9},'Val'},{var,{88,13},'Fs'}}]}]},
           {clause,
            {89,8},
            [{tuple,{89,9},[{atom,{89,10},inline},{var,{89,17},'Val'}]},
             {tuple,{89,23},[{var,{89,24},'T'},{var,{89,26},'Fs'}]}],
            [[{call,
               {89,36},
               {remote,{89,36},{atom,{89,36},erlang},{atom,{89,36},is_list}},
               [{var,{89,44},'Val'}]}]],
            [{debug_line,90,13},
             {tuple,
              {90,5},
              [{var,{90,6},'T'},
               {op,{90,12},'++',{var,{90,8},'Val'},{var,{90,15},'Fs'}}]}]},
           {clause,
            {91,8},
            [{tuple,{91,9},[{atom,{91,10},inline},{var,{91,17},'Val'}]},
             {tuple,{91,23},[{var,{91,24},'_'},{var,{91,26},'Fs'}]}],
            [[{call,
               {91,36},
               {remote,
                {91,36},
                {atom,{91,36},erlang},
                {atom,{91,36},is_integer}},
               [{var,{91,47},'Val'}]}]],
            [{debug_line,92,14},
             {tuple,{92,5},[{var,{92,6},'Val'},{var,{92,10},'Fs'}]}]},
           {clause,
            {93,8},
            [{var,{93,9},'_Opt'},
             {match,
              {93,15},
              {tuple,{93,15},[{var,{93,16},'_'},{var,{93,18},'_'}]},
              {var,{93,21},'Def'}}],
            [],
            [{debug_line,93,15},{var,{93,29},'Def'}]}]}}]},
      {block,0,
       [{debug_line,94,16},
        {tuple,{94,9},[{integer,{94,10},0},{nil,{94,12}}]}]},
      {var,{94,17},'Opts'}]}]}]}.
{function,
 {99,1},
 inline,2,
 [{clause,
   {99,1},
   [{var,{99,1},'_'},{var,{99,1},'_'}],
   [[{call,
      {99,1},
      {remote,{99,1},{atom,{99,1},fake},{atom,{99,1},is_beam_bif_info}},
      []}]],
   [{debug_line,99,17},{atom,{99,1},ignore}]},
  {clause,
   {99,1},
   [{var,{99,8},'Fs0'},{var,{99,13},'St0'}],
   [],
   [{debug_line,101,18},
    {match,
     {101,5},
     {var,{101,5},'Fs1'},
     {call,
      {101,11},
      {remote,{101,11},{atom,{101,11},lists},{atom,{101,11},map}},
      [{block,0,
        [{'fun',
          {101,15},
          {clauses,
           [{clause,
             {101,19},
             [{match,
               {101,20},
               {tuple,
                {101,20},
                [{tuple,
                  {101,21},
                  [{atom,{101,21},c_var},
                   {var,{101,21},'_'},
                   {tuple,{101,33},[{var,{101,34},'F'},{var,{101,36},'A'}]}]},
                 {tuple,
                  {101,40},
                  [{atom,{101,40},c_fun},
                   {var,{101,40},'_'},
                   {var,{101,40},'_'},
                   {var,{101,52},'B'}]}]},
               {var,{101,56},'Def'}}],
             [],
             [{debug_line,102,19},
              {match,
               {102,9},
               {var,{102,9},'Weight'},
               {call,
                {102,18},
                {remote,
                 {102,28},
                 {atom,{102,18},cerl_trees},
                 {atom,{102,29},fold}},
                [{block,0,[{'fun',{102,34},{function,weight_func,2}}]},
                 {integer,{102,53},0},
                 {var,{102,56},'B'}]}},
              {debug_line,103,20},
              {tuple,
               {103,9},
               [{atom,{103,9},fstat},
                {var,{103,21},'F'},
                {var,{103,29},'A'},
                {var,{103,35},'Def'},
                {var,{103,46},'Weight'},
                {atom,{103,9},false},
                {atom,{103,9},false}]}]}]}}]},
       {var,{104,13},'Fs0'}]}},
    {debug_line,106,21},
    {match,
     {106,5},
     {tuple,{106,5},[{var,{106,6},'Fs2'},{var,{106,10},'Is0'}]},
     {call,
      {106,17},
      {remote,{106,17},{atom,{106,17},lists},{atom,{106,17},mapfoldl}},
      [{block,0,
        [{'fun',
          {106,26},
          {clauses,
           [{clause,
             {106,30},
             [{var,{106,31},'Fst'},{var,{106,36},'Ifs'}],
             [],
             [{debug_line,107,22},
              {'case',
               {107,10},
               {call,
                {107,15},
                {atom,{107,15},is_inlineable},
                [{var,{107,29},'Fst'},
                 {block,0,
                  [{'case',
                    {107,34},
                    {var,{107,34},'St0'},
                    [{clause,
                      [{generated,true},{location,{107,34}}],
                      [{tuple,
                        [{generated,true},{location,{107,34}}],
                        [{atom,{107,34},inline},
                         {var,{107,34},'_'},
                         {var,{107,34},rec1},
                         {var,{107,34},'_'}]}],
                      [],
                      [{var,{107,34},rec1}]},
                     {clause,
                      [{generated,true},{location,{107,34}}],
                      [{var,{107,34},rec1}],
                      [],
                      [{call,
                        [{generated,true},{location,{107,34}}],
                        {remote,
                         [{generated,true},{location,{107,34}}],
                         {atom,[{generated,true},{location,{107,34}}],erlang},
                         {atom,[{generated,true},{location,{107,34}}],error}},
                        [{tuple,
                          [{generated,true},{location,{107,34}}],
                          [{atom,
                            [{generated,true},{location,{107,34}}],
                            badrecord},
                           {var,{107,34},rec1}]}]}]}]}]},
                 {block,0,
                  [{debug_line,108,23},
                   {'case',
                    {108,8},
                    {var,{108,8},'St0'},
                    [{clause,
                      [{generated,true},{location,{108,8}}],
                      [{tuple,
                        [{generated,true},{location,{108,8}}],
                        [{atom,{108,8},inline},
                         {var,{108,8},'_'},
                         {var,{108,8},'_'},
                         {var,{108,8},rec2}]}],
                      [],
                      [{var,{108,8},rec2}]},
                     {clause,
                      [{generated,true},{location,{108,8}}],
                      [{var,{108,8},rec2}],
                      [],
                      [{call,
                        [{generated,true},{location,{108,8}}],
                        {remote,
                         [{generated,true},{location,{108,8}}],
                         {atom,[{generated,true},{location,{108,8}}],erlang},
                         {atom,[{generated,true},{location,{108,8}}],error}},
                        [{tuple,
                          [{generated,true},{location,{108,8}}],
                          [{atom,
                            [{generated,true},{location,{108,8}}],
                            badrecord},
                           {var,{108,8},rec2}]}]}]}]}]}]},
               [{clause,
                 {109,7},
                 [{atom,{109,7},true}],
                 [],
                 [{debug_line,110,24},
                  {match,
                   {110,11},
                   {tuple,{110,11},[{var,{110,12},'_'},{var,{110,14},'Ffun'}]},
                   {'case',
                    {110,22},
                    {var,{110,22},'Fst'},
                    [{clause,
                      [{generated,true},{location,{110,22}}],
                      [{tuple,
                        [{generated,true},{location,{110,22}}],
                        [{atom,{110,22},fstat},
                         {var,{110,22},'_'},
                         {var,{110,22},'_'},
                         {var,{110,22},rec3},
                         {var,{110,22},'_'},
                         {var,{110,22},'_'},
                         {var,{110,22},'_'}]}],
                      [],
                      [{var,{110,22},rec3}]},
                     {clause,
                      [{generated,true},{location,{110,22}}],
                      [{var,{110,22},rec3}],
                      [],
                      [{call,
                        [{generated,true},{location,{110,22}}],
                        {remote,
                         [{generated,true},{location,{110,22}}],
                         {atom,[{generated,true},{location,{110,22}}],erlang},
                         {atom,[{generated,true},{location,{110,22}}],error}},
                        [{tuple,
                          [{generated,true},{location,{110,22}}],
                          [{atom,
                            [{generated,true},{location,{110,22}}],
                            badrecord},
                           {var,{110,22},rec3}]}]}]}]}},
                  {debug_line,111,25},
                  {match,
                   {111,11},
                   {var,{111,11},'If'},
                   {tuple,
                    {111,16},
                    [{atom,{111,16},ifun},
                     {'case',
                      {111,27},
                      {var,{111,27},'Fst'},
                      [{clause,
                        [{generated,true},{location,{111,27}}],
                        [{tuple,
                          [{generated,true},{location,{111,27}}],
                          [{atom,{111,27},fstat},
                           {var,{111,27},rec4},
                           {var,{111,27},'_'},
                           {var,{111,27},'_'},
                           {var,{111,27},'_'},
                           {var,{111,27},'_'},
                           {var,{111,27},'_'}]}],
                        [],
                        [{var,{111,27},rec4}]},
                       {clause,
                        [{generated,true},{location,{111,27}}],
                        [{var,{111,27},rec4}],
                        [],
                        [{call,
                          [{generated,true},{location,{111,27}}],
                          {remote,
                           [{generated,true},{location,{111,27}}],
                           {atom,
                            [{generated,true},{location,{111,27}}],
                            erlang},
                           {atom,
                            [{generated,true},{location,{111,27}}],
                            error}},
                          [{tuple,
                            [{generated,true},{location,{111,27}}],
                            [{atom,
                              [{generated,true},{location,{111,27}}],
                              badrecord},
                             {var,{111,27},rec4}]}]}]}]},
                     {'case',
                      {112,14},
                      {var,{112,14},'Fst'},
                      [{clause,
                        [{generated,true},{location,{112,14}}],
                        [{tuple,
                          [{generated,true},{location,{112,14}}],
                          [{atom,{112,14},fstat},
                           {var,{112,14},'_'},
                           {var,{112,14},rec5},
                           {var,{112,14},'_'},
                           {var,{112,14},'_'},
                           {var,{112,14},'_'},
                           {var,{112,14},'_'}]}],
                        [],
                        [{var,{112,14},rec5}]},
                       {clause,
                        [{generated,true},{location,{112,14}}],
                        [{var,{112,14},rec5}],
                        [],
                        [{call,
                          [{generated,true},{location,{112,14}}],
                          {remote,
                           [{generated,true},{location,{112,14}}],
                           {atom,
                            [{generated,true},{location,{112,14}}],
                            erlang},
                           {atom,
                            [{generated,true},{location,{112,14}}],
                            error}},
                          [{tuple,
                            [{generated,true},{location,{112,14}}],
                            [{atom,
                              [{generated,true},{location,{112,14}}],
                              badrecord},
                             {var,{112,14},rec5}]}]}]}]},
                     {'case',
                      {113,13},
                      {var,{113,13},'Ffun'},
                      [{clause,
                        [{generated,true},{location,{113,13}}],
                        [{tuple,
                          [{generated,true},{location,{113,13}}],
                          [{atom,{113,13},c_fun},
                           {var,{113,13},'_'},
                           {var,{113,13},rec6},
                           {var,{113,13},'_'}]}],
                        [],
                        [{var,{113,13},rec6}]},
                       {clause,
                        [{generated,true},{location,{113,13}}],
                        [{var,{113,13},rec6}],
                        [],
                        [{call,
                          [{generated,true},{location,{113,13}}],
                          {remote,
                           [{generated,true},{location,{113,13}}],
                           {atom,
                            [{generated,true},{location,{113,13}}],
                            erlang},
                           {atom,
                            [{generated,true},{location,{113,13}}],
                            error}},
                          [{tuple,
                            [{generated,true},{location,{113,13}}],
                            [{atom,
                              [{generated,true},{location,{113,13}}],
                              badrecord},
                             {var,{113,13},rec6}]}]}]}]},
                     {'case',
                      {114,13},
                      {var,{114,13},'Ffun'},
                      [{clause,
                        [{generated,true},{location,{114,13}}],
                        [{tuple,
                          [{generated,true},{location,{114,13}}],
                          [{atom,{114,13},c_fun},
                           {var,{114,13},'_'},
                           {var,{114,13},'_'},
                           {var,{114,13},rec7}]}],
                        [],
                        [{var,{114,13},rec7}]},
                       {clause,
                        [{generated,true},{location,{114,13}}],
                        [{var,{114,13},rec7}],
                        [],
                        [{call,
                          [{generated,true},{location,{114,13}}],
                          {remote,
                           [{generated,true},{location,{114,13}}],
                           {atom,
                            [{generated,true},{location,{114,13}}],
                            erlang},
                           {atom,
                            [{generated,true},{location,{114,13}}],
                            error}},
                          [{tuple,
                            [{generated,true},{location,{114,13}}],
                            [{atom,
                              [{generated,true},{location,{114,13}}],
                              badrecord},
                             {var,{114,13},rec7}]}]}]}]},
                     {'case',
                      {115,15},
                      {var,{115,15},'Fst'},
                      [{clause,
                        [{generated,true},{location,{115,15}}],
                        [{tuple,
                          [{generated,true},{location,{115,15}}],
                          [{atom,{115,15},fstat},
                           {var,{115,15},'_'},
                           {var,{115,15},'_'},
                           {var,{115,15},'_'},
                           {var,{115,15},rec8},
                           {var,{115,15},'_'},
                           {var,{115,15},'_'}]}],
                        [],
                        [{var,{115,15},rec8}]},
                       {clause,
                        [{generated,true},{location,{115,15}}],
                        [{var,{115,15},rec8}],
                        [],
                        [{call,
                          [{generated,true},{location,{115,15}}],
                          {remote,
                           [{generated,true},{location,{115,15}}],
                           {atom,
                            [{generated,true},{location,{115,15}}],
                            erlang},
                           {atom,
                            [{generated,true},{location,{115,15}}],
                            error}},
                          [{tuple,
                            [{generated,true},{location,{115,15}}],
                            [{atom,
                              [{generated,true},{location,{115,15}}],
                              badrecord},
                             {var,{115,15},rec8}]}]}]}]}]}},
                  {debug_line,116,26},
                  {tuple,
                   {116,11},
                   [{block,
                     {116,12},
                     [{match,
                       {116,12},
                       {var,{116,12},rec9},
                       {var,{116,12},'Fst'}},
                      {'case',
                       {116,22},
                       {var,{116,12},rec9},
                       [{clause,
                         {116,22},
                         [{tuple,
                           {116,22},
                           [{atom,{116,22},fstat},
                            {var,{116,22},'_'},
                            {var,{116,22},'_'},
                            {var,{116,22},'_'},
                            {var,{116,22},'_'},
                            {var,{116,22},'_'},
                            {var,{116,22},'_'}]}],
                         [],
                         [{call,
                           {116,22},
                           {remote,
                            {116,22},
                            {atom,{116,22},erlang},
                            {atom,{116,22},setelement}},
                           [{integer,{116,22},6},
                            {var,{116,12},rec9},
                            {atom,{116,29},true}]}]},
                        {clause,
                         [{generated,true},{location,{116,22}}],
                         [{var,[{generated,true},{location,{116,22}}],'_'}],
                         [],
                         [{call,
                           [{generated,true},{location,{116,22}}],
                           {remote,
                            [{generated,true},{location,{116,22}}],
                            {atom,
                             [{generated,true},{location,{116,22}}],
                             erlang},
                            {atom,
                             [{generated,true},{location,{116,22}}],
                             error}},
                           [{tuple,
                             [{generated,true},{location,{116,22}}],
                             [{atom,
                               [{generated,true},{location,{116,22}}],
                               badrecord},
                              {var,{116,12},rec9}]}]}]}]}]},
                    {cons,
                     {116,35},
                     {var,{116,36},'If'},
                     {var,{116,39},'Ifs'}}]}]},
                {clause,
                 {117,7},
                 [{atom,{117,7},false}],
                 [],
                 [{debug_line,117,27},
                  {tuple,
                   {117,16},
                   [{var,{117,17},'Fst'},{var,{117,21},'Ifs'}]}]}]}]}]}}]},
       {nil,{119,14}},
       {var,{119,18},'Fs1'}]}},
    {debug_line,120,28},
    {match,
     {120,5},
     {var,{120,5},'Is1'},
     {lc,
      {120,11},
      {block,0,
       [{call,
         {120,12},
         {atom,{120,12},inline_inline},
         [{var,{120,26},'If'},{var,{120,30},'Is0'}]}]},
      [{block,0,[{atom,{120,44},true}]},
       {generate,{120,41},{var,{120,38},'If'},{var,{120,44},'Is0'}}]}},
    {debug_line,124,29},
    {match,
     {124,5},
     {var,{124,5},'Fs'},
     {lc,
      {124,10},
      {block,0,
       [{call,
         {124,11},
         {atom,{124,11},inline_func},
         [{var,{124,23},'F'},{var,{124,26},'Is1'}]}]},
      [{block,0,[{atom,{124,39},true}]},
       {generate,{124,36},{var,{124,34},'F'},{var,{124,39},'Fs2'}}]}},
    {debug_line,126,30},
    {lc,
     {126,5},
     {block,0,[{var,{126,6},'Def'}]},
     [{block,0,[{atom,{126,33},true}]},
      {generate_strict,
       {126,29},
       {tuple,
        {126,13},
        [{atom,{126,13},fstat},
         {var,{126,13},'_'},
         {var,{126,13},'_'},
         {var,{126,24},'Def'},
         {var,{126,13},'_'},
         {var,{126,13},'_'},
         {var,{126,13},'_'}]},
       {var,{126,33},'Fs'}}]}]}]}.
{function,
    {130,1},
    is_inlineable,3,
    [{clause,
         {130,1},
         [{var,{130,1},'_'},{var,{130,1},'_'},{var,{130,1},'_'}],
         [[{call,
               {130,1},
               {remote,
                   {130,1},
                   {atom,{130,1},fake},
                   {atom,{130,1},is_beam_bif_info}},
               []}]],
         [{debug_line,130,31},{atom,{130,1},ignore}]},
     {clause,
         {130,1},
         [{tuple,
              {130,15},
              [{atom,{130,15},fstat},
               {var,{130,15},'_'},
               {var,{130,15},'_'},
               {var,{130,15},'_'},
               {var,{130,29},'W'},
               {var,{130,15},'_'},
               {var,{130,15},'_'}]},
          {var,{130,33},'Thresh'},
          {var,{130,41},'_Ofs'}],
         [[{op,{130,54},'=<',{var,{130,52},'W'},{var,{130,57},'Thresh'}}]],
         [{debug_line,130,32},{atom,{130,67},true}]},
     {clause,
         {131,1},
         [{tuple,
              {131,15},
              [{atom,{131,15},fstat},
               {var,{131,27},'F'},
               {var,{131,35},'A'},
               {var,{131,15},'_'},
               {var,{131,15},'_'},
               {var,{131,15},'_'},
               {var,{131,15},'_'}]},
          {var,{131,39},'_Thresh'},
          {var,{131,48},'Ofs'}],
         [],
         [{debug_line,132,33},
          {call,
              {132,5},
              {remote,{132,5},{atom,{132,5},lists},{atom,{132,5},member}},
              [{block,0,
                   [{tuple,{132,12},[{var,{132,13},'F'},{var,{132,15},'A'}]}]},
               {var,{132,19},'Ofs'}]}]}]}.
{function,
 {139,1},
 inline_inline,2,
 [{clause,
   {139,1},
   [{var,{139,1},'_'},{var,{139,1},'_'}],
   [[{call,
      {139,1},
      {remote,{139,1},{atom,{139,1},fake},{atom,{139,1},is_beam_bif_info}},
      []}]],
   [{debug_line,139,34},{atom,{139,1},ignore}]},
  {clause,
   {139,1},
   [{match,
     {139,15},
     {tuple,
      {139,15},
      [{atom,{139,15},ifun},
       {var,{139,15},'_'},
       {var,{139,15},'_'},
       {var,{139,15},'_'},
       {var,{139,26},'B'},
       {var,{139,35},'Iw'}]},
     {var,{139,39},'If'}},
    {var,{139,43},'Is'}],
   [],
   [{debug_line,140,35},
    {match,
     {140,5},
     {var,{140,5},'Inline'},
     {'fun',
      {140,14},
      {clauses,
       [{clause,
         {140,18},
         [{match,
           {140,19},
           {tuple,
            {140,19},
            [{atom,{140,19},c_apply},
             {var,{140,19},'_'},
             {tuple,
              {140,31},
              [{atom,{140,31},c_var},
               {var,{140,31},'_'},
               {tuple,{140,43},[{var,{140,44},'F'},{var,{140,46},'A'}]}]},
             {var,{140,55},'As'}]},
           {var,{140,59},'Call'}}],
         [],
         [{debug_line,141,36},
          {'case',
           {141,8},
           {call,
            {141,13},
            {atom,{141,13},find_inl},
            [{var,{141,22},'F'},{var,{141,25},'A'},{var,{141,28},'Is'}]},
           [{clause,
             {142,5},
             [{tuple,
               {142,5},
               [{atom,{142,5},ifun},
                {var,{142,5},'_'},
                {var,{142,5},'_'},
                {var,{142,16},'Vs'},
                {var,{142,24},'B2'},
                {var,{142,34},'W'}]}],
             [[{op,{142,44},'<',{var,{142,42},'W'},{var,{142,46},'Iw'}}]],
             [{debug_line,143,37},
              {tuple,
               {143,9},
               [{atom,{143,9},c_let},
                {nil,{143,9}},
                {var,{143,21},'Vs'},
                {call,
                 {144,14},
                 {atom,{144,14},kill_id_anns},
                 [{block,0,
                   [{debug_line,144,38},
                    {call,
                     {144,27},
                     {remote,
                      {144,35},
                      {atom,{144,27},core_lib},
                      {atom,{144,36},make_values}},
                     [{var,{144,48},'As'}]}]}]},
                {call,
                 {145,14},
                 {atom,{145,14},kill_id_anns},
                 [{var,{145,27},'B2'}]}]}]},
            {clause,
             {146,5},
             [{var,{146,5},'_Other'}],
             [],
             [{debug_line,146,39},{var,{146,15},'Call'}]}]}]},
        {clause,
         {148,4},
         [{var,{148,5},'Core'}],
         [],
         [{debug_line,148,40},{var,{148,14},'Core'}]}]}}},
    {debug_line,150,41},
    {block,
     {150,5},
     [{match,
       {150,13},
       {var,{150,13},rec10},
       {call,
        {150,18},
        {remote,{150,28},{atom,{150,18},cerl_trees},{atom,{150,29},map}},
        [{var,{150,33},'Inline'},{var,{150,41},'B'}]}},
      {match,{150,5},{var,{150,5},rec11},{var,{150,5},'If'}},
      {'case',
       {150,13},
       {var,{150,5},rec11},
       [{clause,
         {150,13},
         [{tuple,
           {150,13},
           [{atom,{150,13},ifun},
            {var,{150,13},'_'},
            {var,{150,13},'_'},
            {var,{150,13},'_'},
            {var,{150,13},'_'},
            {var,{150,13},'_'}]}],
         [],
         [{call,
           {150,13},
           {remote,{150,13},{atom,{150,13},erlang},{atom,{150,13},setelement}},
           [{integer,{150,13},5},{var,{150,5},rec11},{var,{150,13},rec10}]}]},
        {clause,
         [{generated,true},{location,{150,13}}],
         [{var,[{generated,true},{location,{150,13}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{150,13}}],
           {remote,
            [{generated,true},{location,{150,13}}],
            {atom,[{generated,true},{location,{150,13}}],erlang},
            {atom,[{generated,true},{location,{150,13}}],error}},
           [{tuple,
             [{generated,true},{location,{150,13}}],
             [{atom,[{generated,true},{location,{150,13}}],badrecord},
              {var,{150,5},rec11}]}]}]}]}]}]}]}.
{function,
 {156,1},
 inline_func,2,
 [{clause,
   {156,1},
   [{var,{156,1},'_'},{var,{156,1},'_'}],
   [[{call,
      {156,1},
      {remote,{156,1},{atom,{156,1},fake},{atom,{156,1},is_beam_bif_info}},
      []}]],
   [{debug_line,156,42},{atom,{156,1},ignore}]},
  {clause,
   {156,1},
   [{match,
     {156,13},
     {tuple,
      {156,13},
      [{atom,{156,13},fstat},
       {var,{156,13},'_'},
       {var,{156,13},'_'},
       {tuple,{156,24},[{var,{156,25},'Name'},{var,{156,30},'F0'}]},
       {var,{156,13},'_'},
       {var,{156,13},'_'},
       {var,{156,13},'_'}]},
     {var,{156,35},'Fstat'}},
    {var,{156,42},'Is'}],
   [],
   [{debug_line,157,43},
    {match,
     {157,5},
     {var,{157,5},'Inline'},
     {'fun',
      {157,14},
      {clauses,
       [{clause,
         {157,18},
         [{match,
           {157,19},
           {tuple,
            {157,19},
            [{atom,{157,19},c_apply},
             {var,{157,19},'_'},
             {tuple,
              {157,31},
              [{atom,{157,31},c_var},
               {var,{157,31},'_'},
               {tuple,{157,43},[{var,{157,44},'F'},{var,{157,46},'A'}]}]},
             {var,{157,55},'As'}]},
           {var,{157,59},'Call'}},
          {var,{157,65},'Mod'}],
         [],
         [{debug_line,158,44},
          {'case',
           {158,8},
           {call,
            {158,13},
            {atom,{158,13},find_inl},
            [{var,{158,22},'F'},{var,{158,25},'A'},{var,{158,28},'Is'}]},
           [{clause,
             {159,5},
             [{tuple,
               {159,5},
               [{atom,{159,5},ifun},
                {var,{159,5},'_'},
                {var,{159,5},'_'},
                {var,{159,16},'Vs'},
                {var,{159,24},'B'},
                {var,{159,5},'_'}]}],
             [],
             [{debug_line,160,45},
              {tuple,
               {160,9},
               [{tuple,
                 {160,10},
                 [{atom,{160,10},c_let},
                  {nil,{160,10}},
                  {var,{160,22},'Vs'},
                  {call,
                   {161,14},
                   {atom,{161,14},kill_id_anns},
                   [{block,0,
                     [{debug_line,161,46},
                      {call,
                       {161,27},
                       {remote,
                        {161,35},
                        {atom,{161,27},core_lib},
                        {atom,{161,36},make_values}},
                       [{var,{161,48},'As'}]}]}]},
                  {call,
                   {162,15},
                   {atom,{162,15},kill_id_anns},
                   [{var,{162,28},'B'}]}]},
                {atom,{163,10},true}]}]},
            {clause,
             {164,5},
             [{var,{164,5},'_Other'}],
             [],
             [{debug_line,164,47},
              {tuple,
               {164,15},
               [{var,{164,16},'Call'},{var,{164,21},'Mod'}]}]}]}]},
        {clause,
         {166,4},
         [{var,{166,5},'Core'},{var,{166,11},'Mod'}],
         [],
         [{debug_line,166,48},
          {tuple,{166,19},[{var,{166,20},'Core'},{var,{166,25},'Mod'}]}]}]}}},
    {debug_line,168,49},
    {match,
     {168,5},
     {tuple,{168,5},[{var,{168,6},'F1'},{var,{168,9},'Mod'}]},
     {call,
      {168,16},
      {remote,{168,26},{atom,{168,16},cerl_trees},{atom,{168,27},mapfold}},
      [{var,{168,35},'Inline'},{atom,{168,43},false},{var,{168,50},'F0'}]}},
    {debug_line,169,50},
    {block,
     {169,5},
     [{match,
       {169,17},
       {var,{169,17},rec12},
       {tuple,{169,21},[{var,{169,22},'Name'},{var,{169,27},'F1'}]}},
      {match,{169,5},{var,{169,5},rec13},{var,{169,5},'Fstat'}},
      {'case',
       {169,17},
       {var,{169,5},rec13},
       [{clause,
         {169,17},
         [{tuple,
           {169,17},
           [{atom,{169,17},fstat},
            {var,{169,17},'_'},
            {var,{169,17},'_'},
            {var,{169,17},'_'},
            {var,{169,17},'_'},
            {var,{169,17},'_'},
            {var,{169,17},'_'}]}],
         [],
         [{call,
           {169,17},
           {remote,{169,17},{atom,{169,17},erlang},{atom,{169,17},setelement}},
           [{integer,{169,17},4},
            {call,
             {169,31},
             {remote,
              {169,31},
              {atom,{169,31},erlang},
              {atom,{169,31},setelement}},
             [{integer,{169,31},7},{var,{169,5},rec13},{var,{169,40},'Mod'}]},
            {var,{169,17},rec12}]}]},
        {clause,
         [{generated,true},{location,{169,17}}],
         [{var,[{generated,true},{location,{169,17}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{169,17}}],
           {remote,
            [{generated,true},{location,{169,17}}],
            {atom,[{generated,true},{location,{169,17}}],erlang},
            {atom,[{generated,true},{location,{169,17}}],error}},
           [{tuple,
             [{generated,true},{location,{169,17}}],
             [{atom,[{generated,true},{location,{169,17}}],badrecord},
              {var,{169,5},rec13}]}]}]}]}]}]}]}.
{function,{171,1},
          weight_func,2,
          [{clause,{171,1},
                   [{var,{171,1},'_'},{var,{171,1},'_'}],
                   [[{call,{171,1},
                           {remote,{171,1},
                                   {atom,{171,1},fake},
                                   {atom,{171,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,171,51},{atom,{171,1},ignore}]},
           {clause,{171,1},
                   [{var,{171,13},'_Core'},{var,{171,20},'Acc'}],
                   [],
                   [{debug_line,171,52},
                    {op,{171,32},
                        '+',
                        {var,{171,28},'Acc'},
                        {integer,{171,34},1}}]}]}.
{function,
    {175,1},
    find_inl,3,
    [{clause,
         {175,1},
         [{var,{175,1},'_'},{var,{175,1},'_'},{var,{175,1},'_'}],
         [[{call,
               {175,1},
               {remote,
                   {175,1},
                   {atom,{175,1},fake},
                   {atom,{175,1},is_beam_bif_info}},
               []}]],
         [{debug_line,175,53},{atom,{175,1},ignore}]},
     {clause,
         {175,1},
         [{var,{175,10},'F'},
          {var,{175,13},'A'},
          {cons,
              {175,16},
              {match,
                  {175,17},
                  {tuple,
                      {175,17},
                      [{atom,{175,17},ifun},
                       {var,{175,28},'F'},
                       {var,{175,36},'A'},
                       {var,{175,17},'_'},
                       {var,{175,17},'_'},
                       {var,{175,17},'_'}]},
                  {var,{175,39},'If'}},
              {var,{175,42},'_'}}],
         [],
         [{debug_line,175,54},{var,{175,49},'If'}]},
     {clause,
         {176,1},
         [{var,{176,10},'F'},
          {var,{176,13},'A'},
          {cons,{176,16},{var,{176,17},'_'},{var,{176,19},'Is'}}],
         [],
         [{debug_line,176,55},
          {call,
              {176,27},
              {atom,{176,27},find_inl},
              [{var,{176,36},'F'},{var,{176,39},'A'},{var,{176,42},'Is'}]}]},
     {clause,
         {177,1},
         [{var,{177,10},'_'},{var,{177,13},'_'},{nil,{177,16}}],
         [],
         [{debug_line,177,56},{atom,{177,23},no}]}]}.
{function,
 {181,1},
 kill_id_anns,1,
 [{clause,
   {181,1},
   [{var,{181,1},'_'}],
   [[{call,
      {181,1},
      {remote,{181,1},{atom,{181,1},fake},{atom,{181,1},is_beam_bif_info}},
      []}]],
   [{debug_line,181,57},{atom,{181,1},ignore}]},
  {clause,
   {181,1},
   [{var,{181,14},'Body'}],
   [],
   [{debug_line,182,58},
    {call,
     {182,5},
     {remote,{182,15},{atom,{182,5},cerl_trees},{atom,{182,16},map}},
     [{block,0,
       [{'fun',
         {182,20},
         {clauses,
          [{clause,
            {182,23},
            [{match,
              {182,24},
              {tuple,
               {182,24},
               [{atom,{182,24},c_fun},
                {var,{182,36},'A0'},
                {var,{182,24},'_'},
                {var,{182,24},'_'}]},
              {var,{182,40},'CFun'}}],
            [],
            [{debug_line,183,59},
             {match,
              {183,7},
              {var,{183,7},'A'},
              {call,
               {183,11},
               {atom,{183,11},kill_id_anns_1},
               [{var,{183,26},'A0'}]}},
             {debug_line,184,60},
             {block,
              {184,7},
              [{match,{184,7},{var,{184,7},rec14},{var,{184,7},'CFun'}},
               {'case',
                {184,18},
                {var,{184,7},rec14},
                [{clause,
                  {184,18},
                  [{tuple,
                    {184,18},
                    [{atom,{184,18},c_fun},
                     {var,{184,18},'_'},
                     {var,{184,18},'_'},
                     {var,{184,18},'_'}]}],
                  [],
                  [{call,
                    {184,18},
                    {remote,
                     {184,18},
                     {atom,{184,18},erlang},
                     {atom,{184,18},setelement}},
                    [{integer,{184,18},2},
                     {var,{184,7},rec14},
                     {var,{184,23},'A'}]}]},
                 {clause,
                  [{generated,true},{location,{184,18}}],
                  [{var,[{generated,true},{location,{184,18}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{184,18}}],
                    {remote,
                     [{generated,true},{location,{184,18}}],
                     {atom,[{generated,true},{location,{184,18}}],erlang},
                     {atom,[{generated,true},{location,{184,18}}],error}},
                    [{tuple,
                      [{generated,true},{location,{184,18}}],
                      [{atom,[{generated,true},{location,{184,18}}],badrecord},
                       {var,{184,7},rec14}]}]}]}]}]}]},
           {clause,
            {185,23},
            [{match,
              {185,24},
              {tuple,
               {185,24},
               [{atom,{185,24},c_var},{var,{185,36},'A0'},{var,{185,24},'_'}]},
              {var,{185,40},'Var'}}],
            [],
            [{debug_line,186,61},
             {match,
              {186,7},
              {var,{186,7},'A'},
              {call,
               {186,11},
               {atom,{186,11},kill_id_anns_1},
               [{var,{186,26},'A0'}]}},
             {debug_line,187,62},
             {block,
              {187,7},
              [{match,{187,7},{var,{187,7},rec15},{var,{187,7},'Var'}},
               {'case',
                {187,17},
                {var,{187,7},rec15},
                [{clause,
                  {187,17},
                  [{tuple,
                    {187,17},
                    [{atom,{187,17},c_var},
                     {var,{187,17},'_'},
                     {var,{187,17},'_'}]}],
                  [],
                  [{call,
                    {187,17},
                    {remote,
                     {187,17},
                     {atom,{187,17},erlang},
                     {atom,{187,17},setelement}},
                    [{integer,{187,17},2},
                     {var,{187,7},rec15},
                     {var,{187,22},'A'}]}]},
                 {clause,
                  [{generated,true},{location,{187,17}}],
                  [{var,[{generated,true},{location,{187,17}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{187,17}}],
                    {remote,
                     [{generated,true},{location,{187,17}}],
                     {atom,[{generated,true},{location,{187,17}}],erlang},
                     {atom,[{generated,true},{location,{187,17}}],error}},
                    [{tuple,
                      [{generated,true},{location,{187,17}}],
                      [{atom,[{generated,true},{location,{187,17}}],badrecord},
                       {var,{187,7},rec15}]}]}]}]}]}]},
           {clause,
            {188,9},
            [{var,{188,10},'Expr'}],
            [],
            [{debug_line,191,63},
             {match,
              {191,7},
              {var,{191,7},'A'},
              {call,
               {191,11},
               {atom,{191,11},compiler_generated},
               [{block,0,
                 [{call,
                   {191,30},
                   {remote,
                    {191,34},
                    {atom,{191,30},cerl},
                    {atom,{191,35},get_ann}},
                   [{var,{191,43},'Expr'}]}]}]}},
             {debug_line,192,64},
             {call,
              {192,7},
              {remote,{192,11},{atom,{192,7},cerl},{atom,{192,12},set_ann}},
              [{var,{192,20},'Expr'},{var,{192,26},'A'}]}]}]}}]},
      {var,{193,11},'Body'}]}]}]}.
{function,{195,1},
          kill_id_anns_1,1,
          [{clause,{195,1},
                   [{var,{195,1},'_'}],
                   [[{call,{195,1},
                           {remote,{195,1},
                                   {atom,{195,1},fake},
                                   {atom,{195,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,195,65},{atom,{195,1},ignore}]},
           {clause,{195,1},
                   [{cons,{195,16},
                          {tuple,{195,17},
                                 [{atom,{195,18},id},{var,{195,23},'_'}]},
                          {var,{195,26},'As'}}],
                   [],
                   [{debug_line,196,66},
                    {call,{196,5},
                          {atom,{196,5},kill_id_anns_1},
                          [{var,{196,20},'As'}]}]},
           {clause,{197,1},
                   [{cons,{197,16},{var,{197,17},'A'},{var,{197,19},'As'}}],
                   [],
                   [{debug_line,198,67},
                    {cons,{198,5},
                          {var,{198,6},'A'},
                          {call,{198,8},
                                {atom,{198,8},kill_id_anns_1},
                                [{var,{198,23},'As'}]}}]},
           {clause,{199,1},
                   [{nil,{199,16}}],
                   [],
                   [{debug_line,199,68},{nil,{199,23}}]}]}.
{function,{201,1},
          compiler_generated,1,
          [{clause,{201,1},
                   [{var,{201,1},'_'}],
                   [[{call,{201,1},
                           {remote,{201,1},
                                   {atom,{201,1},fake},
                                   {atom,{201,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,201,69},{atom,{201,1},ignore}]},
           {clause,{201,1},
                   [{match,{201,20},
                           {cons,{201,20},
                                 {atom,{201,21},compiler_generated},
                                 {var,{201,40},'_'}},
                           {var,{201,43},'Anno'}}],
                   [],
                   [{debug_line,202,70},{var,{202,5},'Anno'}]},
           {clause,{203,1},
                   [{var,{203,20},'Anno'}],
                   [],
                   [{debug_line,204,71},
                    {cons,{204,5},
                          {atom,{204,6},compiler_generated},
                          {op,{204,30},
                              '--',
                              {var,{204,25},'Anno'},
                              {cons,{204,33},
                                    {atom,{204,34},compiler_generated},
                                    {nil,{204,52}}}}}]}]}.
{eof,{205,1}}.
