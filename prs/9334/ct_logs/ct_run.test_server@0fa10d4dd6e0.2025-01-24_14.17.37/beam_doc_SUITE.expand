{attribute,{1,1},file,{"beam_doc_SUITE.erl",1}}.
{attribute,{2,2},module,beam_doc_SUITE}.
{attribute,{3,2},
           export,
           [{all,0},
            {groups,0},
            {init_per_group,2},
            {end_per_group,2},
            {singleton_moduledoc,1},
            {singleton_doc,1},
            {docmodule_with_doc_attributes,1},
            {hide_moduledoc,1},
            {docformat,1},
            {singleton_docformat,1},
            {singleton_meta,1},
            {source_path,1},
            {behaviours,1},
            {slogan,1},
            {types_and_opaques,1},
            {callback,1},
            {hide_moduledoc2,1},
            {private_types,1},
            {export_all,1},
            {equiv,1},
            {spec,1},
            {deprecated,1},
            {warn_missing_doc,1},
            {doc_with_file,1},
            {doc_with_file_error,1},
            {all_string_formats,1},
            {docs_from_ast,1},
            {spec_switch_order,1},
            {user_defined_type,1},
            {skip_doc,1},
            {no_doc_attributes,1},
            {converted_metadata,1},
            {converted_metadata_warnings,1}]}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,99,111,109,109,
             111,110,95,116,101,115,116,45,49,46,50,55,46,54,47,105,110,99,
             108,117,100,101,47,99,116,46,104,114,108],
            1}}.
{attribute,{13,1},file,{"beam_doc_SUITE.erl",13}}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,107,101,114,
             110,101,108,45,49,48,46,50,46,49,47,105,110,99,108,117,100,101,
             47,101,101,112,52,56,46,104,114,108],
            1}}.
{attribute,
    {3,2},
    record,
    {docs_v1,
        [{record_field,{3,19},{atom,{3,19},anno}},
         {record_field,
             {4,19},
             {atom,{4,19},beam_language},
             {atom,{4,35},erlang}},
         {record_field,
             {5,19},
             {atom,{5,19},format},
             {bin,
                 {5,29},
                 [{bin_element,
                      {5,29},
                      {string,{5,29},"application/erlang+html"},
                      default,default}]}},
         {record_field,{6,19},{atom,{6,19},module_doc}},
         {record_field,
             {7,19},
             {atom,{7,19},metadata},
             {map,
                 {7,30},
                 [{map_field_assoc,
                      {7,45},
                      {atom,{7,33},otp_doc_vsn},
                      {tuple,
                          {7,49},
                          [{integer,{7,49},1},
                           {integer,{7,49},0},
                           {integer,{7,49},0}]}}]}},
         {record_field,{8,19},{atom,{8,19},docs}}]}}.
{attribute,
    {10,2},
    record,
    {docs_v1_entry,
        [{record_field,{10,25},{atom,{10,25},kind_name_arity}},
         {record_field,{11,25},{atom,{11,25},anno}},
         {record_field,{12,25},{atom,{12,25},signature}},
         {record_field,{13,25},{atom,{13,25},doc}},
         {record_field,{14,25},{atom,{14,25},metadata}}]}}.
{attribute,{14,1},file,{"beam_doc_SUITE.erl",14}}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,115,116,100,
             108,105,98,45,54,46,50,47,105,110,99,108,117,100,101,47,97,115,
             115,101,114,116,46,104,114,108],
            1}}.
{attribute,{15,1},file,{"beam_doc_SUITE.erl",15}}.
{function,
    {18,1},
    all,0,
    [{clause,
         {18,1},
         [],
         [[{call,
               {18,1},
               {remote,
                   {18,1},
                   {atom,{18,1},fake},
                   {atom,{18,1},is_beam_bif_info}},
               []}]],
         [{debug_line,18,1},{atom,{18,1},ignore}]},
     {clause,
         {18,1},
         [],[],
         [{debug_line,19,2},
          {cons,
              {19,5},
              {tuple,
                  {19,6},
                  [{atom,{19,7},group},
                   {atom,{19,14},documentation_generation_tests}]},
              {cons,{19,47},{atom,{19,47},doc_with_file},{nil,{19,60}}}}]}]}.
{function,
    {21,1},
    groups,0,
    [{clause,
         {21,1},
         [],
         [[{call,
               {21,1},
               {remote,
                   {21,1},
                   {atom,{21,1},fake},
                   {atom,{21,1},is_beam_bif_info}},
               []}]],
         [{debug_line,21,3},{atom,{21,1},ignore}]},
     {clause,
         {21,1},
         [],[],
         [{debug_line,22,4},
          {cons,
              {22,5},
              {tuple,
                  {22,6},
                  [{atom,{22,7},documentation_generation_tests},
                   {cons,{22,39},{atom,{22,40},parallel},{nil,{22,48}}},
                   {call,
                       {22,51},
                       {atom,{22,51},documentation_generation_tests},
                       []}]},
              {nil,{22,84}}}]}]}.
{function,{24,1},
          init_per_group,2,
          [{clause,{24,1},
                   [{var,{24,1},'_'},{var,{24,1},'_'}],
                   [[{call,{24,1},
                           {remote,{24,1},
                                   {atom,{24,1},fake},
                                   {atom,{24,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,24,5},{atom,{24,1},ignore}]},
           {clause,{24,1},
                   [{var,{24,16},'_'},{var,{24,19},'Config'}],
                   [],
                   [{debug_line,25,6},{var,{25,5},'Config'}]}]}.
{function,{27,1},
          end_per_group,2,
          [{clause,{27,1},
                   [{var,{27,1},'_'},{var,{27,1},'_'}],
                   [[{call,{27,1},
                           {remote,{27,1},
                                   {atom,{27,1},fake},
                                   {atom,{27,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,27,7},{atom,{27,1},ignore}]},
           {clause,{27,1},
                   [{var,{27,15},'_'},{var,{27,18},'_Config'}],
                   [],
                   [{debug_line,28,8},{atom,{28,5},ok}]}]}.
{function,
 {30,1},
 documentation_generation_tests,0,
 [{clause,
   {30,1},
   [],
   [[{call,
      {30,1},
      {remote,{30,1},{atom,{30,1},fake},{atom,{30,1},is_beam_bif_info}},
      []}]],
   [{debug_line,30,9},{atom,{30,1},ignore}]},
  {clause,
   {30,1},
   [],[],
   [{debug_line,31,10},
    {cons,
     {31,5},
     {atom,{31,6},singleton_moduledoc},
     {cons,
      {32,6},
      {atom,{32,6},singleton_doc},
      {cons,
       {33,6},
       {atom,{33,6},docmodule_with_doc_attributes},
       {cons,
        {34,6},
        {atom,{34,6},hide_moduledoc},
        {cons,
         {35,6},
         {atom,{35,6},hide_moduledoc2},
         {cons,
          {36,6},
          {atom,{36,6},docformat},
          {cons,
           {37,6},
           {atom,{37,6},singleton_docformat},
           {cons,
            {38,6},
            {atom,{38,6},singleton_meta},
            {cons,
             {39,6},
             {atom,{39,6},source_path},
             {cons,
              {40,6},
              {atom,{40,6},behaviours},
              {cons,
               {41,6},
               {atom,{41,6},slogan},
               {cons,
                {42,6},
                {atom,{42,6},types_and_opaques},
                {cons,
                 {43,6},
                 {atom,{43,6},callback},
                 {cons,
                  {44,6},
                  {atom,{44,6},private_types},
                  {cons,
                   {45,6},
                   {atom,{45,6},export_all},
                   {cons,
                    {46,6},
                    {atom,{46,6},equiv},
                    {cons,
                     {47,6},
                     {atom,{47,6},spec},
                     {cons,
                      {48,6},
                      {atom,{48,6},deprecated},
                      {cons,
                       {49,6},
                       {atom,{49,6},warn_missing_doc},
                       {cons,
                        {50,6},
                        {atom,{50,6},doc_with_file_error},
                        {cons,
                         {51,6},
                         {atom,{51,6},all_string_formats},
                         {cons,
                          {52,6},
                          {atom,{52,6},spec_switch_order},
                          {cons,
                           {53,6},
                           {atom,{53,6},docs_from_ast},
                           {cons,
                            {54,6},
                            {atom,{54,6},user_defined_type},
                            {cons,
                             {55,6},
                             {atom,{55,6},skip_doc},
                             {cons,
                              {56,6},
                              {atom,{56,6},no_doc_attributes},
                              {cons,
                               {57,6},
                               {atom,{57,6},converted_metadata},
                               {cons,
                                {58,6},
                                {atom,{58,6},converted_metadata_warnings},
                                {nil,{59,5}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}]}]}.
{function,
    {61,1},
    singleton_moduledoc,1,
    [{clause,
         {61,1},
         [{var,{61,1},'_'}],
         [[{call,
               {61,1},
               {remote,
                   {61,1},
                   {atom,{61,1},fake},
                   {atom,{61,1},is_beam_bif_info}},
               []}]],
         [{debug_line,61,11},{atom,{61,1},ignore}]},
     {clause,
         {61,1},
         [{var,{61,21},'Conf'}],
         [],
         [{debug_line,62,12},
          {match,
              {62,5},
              {var,{62,5},'ModuleName'},
              {string,{62,18},"singletonmoduledoc"}},
          {debug_line,63,13},
          {match,
              {63,5},
              {tuple,{63,5},[{atom,{63,6},ok},{var,{63,10},'ModName'}]},
              {call,
                  {63,21},
                  {atom,{63,21},default_compile_file},
                  [{var,{63,42},'Conf'},{var,{63,48},'ModuleName'}]}},
          {debug_line,65,14},
          {match,
              {65,5},
              {var,{65,5},'Mime'},
              {bin,
                  {65,12},
                  [{bin_element,
                       {65,14},
                       {string,{65,14},"text/markdown"},
                       default,default}]}},
          {debug_line,66,15},
          {match,
              {66,5},
              {var,{66,5},'ModuleDoc'},
              {map,
                  {66,17},
                  [{map_field_assoc,
                       {66,28},
                       {bin,
                           {66,19},
                           [{bin_element,
                                {66,21},
                                {string,{66,21},"en"},
                                default,default}]},
                       {bin,
                           {66,31},
                           [{bin_element,
                                {66,33},
                                {string,{66,33},"Moduledoc test module"},
                                default,default}]}}]}},
          {debug_line,67,16},
          {match,
              {67,5},
              {tuple,
                  {67,5},
                  [{atom,{67,6},ok},
                   {tuple,
                       {67,10},
                       [{atom,{67,11},docs_v1},
                        {var,{67,20},'_'},
                        {var,{67,22},'_'},
                        {var,{67,25},'Mime'},
                        {var,{67,30},'ModuleDoc'},
                        {var,{67,41},'_'},
                        {var,{67,43},'_'}]}]},
              {call,
                  {67,49},
                  {remote,{67,53},{atom,{67,49},code},{atom,{67,54},get_doc}},
                  [{var,{67,62},'ModName'}]}},
          {debug_line,68,17},
          {atom,{68,5},ok}]}]}.
{function,
 {70,1},
 singleton_doc,1,
 [{clause,
   {70,1},
   [{var,{70,1},'_'}],
   [[{call,
      {70,1},
      {remote,{70,1},{atom,{70,1},fake},{atom,{70,1},is_beam_bif_info}},
      []}]],
   [{debug_line,70,18},{atom,{70,1},ignore}]},
  {clause,
   {70,1},
   [{var,{70,15},'Conf'}],
   [],
   [{debug_line,71,19},
    {match,{71,5},{var,{71,5},'ModuleName'},{string,{71,18},"singletondoc"}},
    {debug_line,72,20},
    {match,
     {72,5},
     {tuple,{72,5},[{atom,{72,6},ok},{var,{72,10},'ModName'}]},
     {call,
      {72,21},
      {atom,{72,21},default_compile_file},
      [{var,{72,42},'Conf'},{var,{72,48},'ModuleName'}]}},
    {debug_line,73,21},
    {match,
     {73,5},
     {var,{73,5},'Mime'},
     {bin,
      {73,12},
      [{bin_element,
        {73,14},
        {string,{73,14},"text/markdown"},
        default,default}]}},
    {debug_line,74,22},
    {match,
     {74,5},
     {var,{74,5},'Doc'},
     {map,
      {74,11},
      [{map_field_assoc,
        {74,22},
        {bin,
         {74,13},
         [{bin_element,{74,15},{string,{74,15},"en"},default,default}]},
        {bin,
         {74,25},
         [{bin_element,
           {74,27},
           {string,{74,27},"Doc test module"},
           default,default}]}}]}},
    {debug_line,75,23},
    {match,
     {75,5},
     {var,{75,5},'FooDoc'},
     {map,
      {75,14},
      [{map_field_assoc,
        {75,25},
        {bin,
         {75,16},
         [{bin_element,{75,18},{string,{75,18},"en"},default,default}]},
        {bin,
         {75,28},
         [{bin_element,
           {75,30},
           {string,{75,30},"Tests multi-clauses"},
           default,default}]}}]}},
    {debug_line,76,24},
    {match,
     {76,5},
     {tuple,
      {76,5},
      [{atom,{76,6},ok},
       {tuple,
        {76,10},
        [{atom,{76,11},docs_v1},
         {integer,{76,20},1},
         {var,{76,22},'_'},
         {var,{76,25},'Mime'},
         {atom,{76,31},none},
         {var,{76,37},'_'},
         {cons,
          {77,11},
          {tuple,
           {77,12},
           [{tuple,
             {77,13},
             [{atom,{77,14},function},{atom,{77,24},foo},{integer,{77,28},1}]},
            {var,{77,31},'_'},
            {cons,
             {77,34},
             {bin,
              {77,35},
              [{bin_element,
                {77,37},
                {string,{77,37},"foo(ok)"},
                default,default}]},
             {nil,{77,48}}},
            {var,{77,51},'FooDoc'},
            {var,{77,59},'_'}]},
          {cons,
           {78,12},
           {tuple,
            {78,12},
            [{tuple,
              {78,13},
              [{atom,{78,14},function},
               {atom,{78,24},main},
               {integer,{78,29},0}]},
             {var,{78,32},'_'},
             {cons,
              {78,35},
              {bin,
               {78,36},
               [{bin_element,
                 {78,38},
                 {string,{78,38},"main()"},
                 default,default}]},
              {nil,{78,48}}},
             {var,{78,51},'Doc'},
             {var,{78,56},'_'}]},
           {nil,{78,58}}}}]}]},
     {call,
      {78,64},
      {remote,{78,68},{atom,{78,64},code},{atom,{78,69},get_doc}},
      [{var,{78,77},'ModName'}]}},
    {debug_line,79,25},
    {atom,{79,5},ok}]}]}.
{function,
 {81,1},
 docmodule_with_doc_attributes,1,
 [{clause,
   {81,1},
   [{var,{81,1},'_'}],
   [[{call,
      {81,1},
      {remote,{81,1},{atom,{81,1},fake},{atom,{81,1},is_beam_bif_info}},
      []}]],
   [{debug_line,81,26},{atom,{81,1},ignore}]},
  {clause,
   {81,1},
   [{var,{81,31},'Conf'}],
   [],
   [{debug_line,82,27},
    {match,
     {82,5},
     {var,{82,5},'ModuleName'},
     {string,{82,18},"docmodule_with_doc_attributes"}},
    {debug_line,83,28},
    {match,
     {83,5},
     {tuple,{83,5},[{atom,{83,6},ok},{var,{83,10},'ModName'}]},
     {call,
      {83,21},
      {atom,{83,21},default_compile_file},
      [{var,{83,42},'Conf'},{var,{83,48},'ModuleName'}]}},
    {debug_line,84,29},
    {match,
     {84,5},
     {var,{84,5},'Mime'},
     {bin,
      {84,12},
      [{bin_element,
        {84,14},
        {string,{84,14},"text/markdown"},
        default,default}]}},
    {debug_line,85,30},
    {match,
     {85,5},
     {var,{85,5},'ModuleDoc'},
     {map,
      {85,17},
      [{map_field_assoc,
        {85,28},
        {bin,
         {85,19},
         [{bin_element,{85,21},{string,{85,21},"en"},default,default}]},
        {bin,
         {85,31},
         [{bin_element,
           {85,33},
           {string,{85,33},"Moduledoc test module"},
           default,default}]}}]}},
    {debug_line,86,31},
    {match,
     {86,5},
     {var,{86,5},'Doc'},
     {map,
      {86,11},
      [{map_field_assoc,
        {86,22},
        {bin,
         {86,13},
         [{bin_element,{86,15},{string,{86,15},"en"},default,default}]},
        {bin,
         {86,25},
         [{bin_element,
           {86,27},
           {string,{86,27},"Doc test module"},
           default,default}]}}]}},
    {debug_line,87,32},
    {match,
     {87,5},
     {var,{87,5},'FileDocs'},
     {map,
      {87,17},
      [{map_field_assoc,
        {87,28},
        {bin,
         {87,19},
         [{bin_element,{87,21},{string,{87,21},"en"},default,default}]},
        {bin,
         {87,31},
         [{bin_element,
           {87,33},
           {string,{87,33},"# README\n\nThis is a test"},
           default,default}]}}]}},
    {debug_line,88,33},
    {match,
     {88,5},
     {tuple,
      {88,5},
      [{atom,{88,6},ok},
       {tuple,
        {88,10},
        [{atom,{88,10},docs_v1},
         {var,{88,27},'ModuleAnno'},
         {atom,{89,36},erlang},
         {var,{90,29},'Mime'},
         {var,{91,33},'ModuleDoc'},
         {map,{92,31},[]},
         {var,{93,27},'Docs'}]}]},
     {call,
      {94,23},
      {remote,{94,27},{atom,{94,23},code},{atom,{94,28},get_doc}},
      [{var,{94,36},'ModName'}]}},
    {debug_line,97,34},
    {match,
     {97,5},
     {cons,
      {97,5},
      {tuple,
       {97,6},
       [{tuple,
         {97,7},
         [{atom,{97,8},function},
          {atom,{97,17},no_docs_multi},
          {integer,{97,31},1}]},
        {var,{97,34},'NoDocsMultiAnno'},
        {cons,
         {97,50},
         {bin,
          {97,51},
          [{bin_element,
            {97,53},
            {string,{97,53},"no_docs_multi/1"},
            default,default}]},
         {nil,{97,72}}},
        {atom,{97,74},none},
        {map,{97,79},[]}]},
      {cons,
       {98,6},
       {tuple,
        {98,6},
        [{tuple,
          {98,7},
          [{atom,{98,8},function},
           {atom,{98,17},with_file_docs},
           {integer,{98,32},0}]},
         {var,{98,35},'FileDocsAnno'},
         {cons,
          {98,49},
          {bin,
           {98,50},
           [{bin_element,
             {98,52},
             {string,{98,52},"with_file_docs()"},
             default,default}]},
          {nil,{98,72}}},
         {var,{98,74},'FileDocs'},
         {map,{98,83},[]}]},
       {cons,
        {99,6},
        {tuple,
         {99,6},
         [{tuple,
           {99,7},
           [{atom,{99,8},function},
            {atom,{99,17},no_docs},
            {integer,{99,25},0}]},
          {var,{99,28},'NoDocsAnno'},
          {cons,
           {99,40},
           {bin,
            {99,41},
            [{bin_element,
              {99,43},
              {string,{99,43},"no_docs()"},
              default,default}]},
           {nil,{99,56}}},
          {atom,{99,58},none},
          {map,{99,63},[]}]},
        {cons,
         {100,6},
         {tuple,
          {100,6},
          [{tuple,
            {100,7},
            [{atom,{100,8},function},{atom,{100,17},ok},{integer,{100,20},0}]},
           {var,{100,24},'OkAnno'},
           {cons,
            {100,32},
            {bin,
             {100,33},
             [{bin_element,
               {100,35},
               {string,{100,35},"ok()"},
               default,default}]},
            {nil,{100,43}}},
           {atom,{100,45},none},
           {map,
            {100,50},
            [{map_field_exact,
              {100,60},
              {atom,{100,52},authors},
              {string,{100,63},"Someone"}}]}]},
         {cons,
          {101,6},
          {tuple,
           {101,6},
           [{tuple,
             {101,7},
             [{atom,{101,8},function},
              {atom,{101,18},main},
              {var,{101,23},'_'}]},
            {var,{101,26},'MainAnno'},
            {var,{101,36},'_'},
            {var,{101,39},'Doc'},
            {var,{101,44},'_'}]},
          {nil,{101,46}}}}}}},
     {var,{101,50},'Docs'}},
    {debug_line,103,35},
    {block,
     {103,6},
     [{call,
       {103,6},
       {'fun',
        {103,6},
        {clauses,
         [{clause,
           {103,6},
           [],[],
           [{match,{103,6},{var,{103,6},'X__X'},{integer,{103,18},5}},
            {'case',
             {103,18},
             {call,
              {103,21},
              {remote,{103,29},{atom,{103,21},erl_anno},{atom,{103,30},line}},
              [{var,{103,35},'ModuleAnno'}]},
             [{clause,
               {103,45},
               [{var,{103,45},'X__X'}],
               [],
               [{atom,{103,45},ok}]},
              {clause,
               {103,45},
               [{var,{103,45},'X__V'}],
               [],
               [{call,
                 {103,45},
                 {remote,
                  {103,45},
                  {atom,{103,45},erlang},
                  {atom,{103,45},error}},
                 [{block,0,
                   [{tuple,
                     {103,45},
                     [{atom,{103,45},assertEqual},
                      {cons,
                       {103,45},
                       {tuple,
                        {103,45},
                        [{atom,{103,45},module},
                         {atom,{103,45},beam_doc_SUITE}]},
                       {cons,
                        {103,45},
                        {tuple,
                         {103,45},
                         [{atom,{103,45},line},{integer,{103,45},103}]},
                        {cons,
                         {103,45},
                         {tuple,
                          {103,45},
                          [{atom,{103,45},expression},
                           {string,
                            {103,45},
                            "erl_anno : line ( ModuleAnno )"}]},
                         {cons,
                          {103,45},
                          {tuple,
                           {103,45},
                           [{atom,{103,45},expected},{var,{103,45},'X__X'}]},
                          {cons,
                           {103,45},
                           {tuple,
                            {103,45},
                            [{atom,{103,45},value},{var,{103,45},'X__V'}]},
                           {nil,{103,45}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,104,36},
    {block,
     {104,6},
     [{call,
       {104,6},
       {'fun',
        {104,6},
        {clauses,
         [{clause,
           {104,6},
           [],[],
           [{match,{104,6},{var,{104,6},'X__X'},{integer,{104,18},10}},
            {'case',
             {104,18},
             {call,
              {104,22},
              {remote,{104,30},{atom,{104,22},erl_anno},{atom,{104,31},line}},
              [{var,{104,36},'MainAnno'}]},
             [{clause,
               {104,44},
               [{var,{104,44},'X__X'}],
               [],
               [{atom,{104,44},ok}]},
              {clause,
               {104,44},
               [{var,{104,44},'X__V'}],
               [],
               [{call,
                 {104,44},
                 {remote,
                  {104,44},
                  {atom,{104,44},erlang},
                  {atom,{104,44},error}},
                 [{block,0,
                   [{tuple,
                     {104,44},
                     [{atom,{104,44},assertEqual},
                      {cons,
                       {104,44},
                       {tuple,
                        {104,44},
                        [{atom,{104,44},module},
                         {atom,{104,44},beam_doc_SUITE}]},
                       {cons,
                        {104,44},
                        {tuple,
                         {104,44},
                         [{atom,{104,44},line},{integer,{104,44},104}]},
                        {cons,
                         {104,44},
                         {tuple,
                          {104,44},
                          [{atom,{104,44},expression},
                           {string,{104,44},"erl_anno : line ( MainAnno )"}]},
                         {cons,
                          {104,44},
                          {tuple,
                           {104,44},
                           [{atom,{104,44},expected},{var,{104,44},'X__X'}]},
                          {cons,
                           {104,44},
                           {tuple,
                            {104,44},
                            [{atom,{104,44},value},{var,{104,44},'X__V'}]},
                           {nil,{104,44}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,105,37},
    {block,
     {105,6},
     [{call,
       {105,6},
       {'fun',
        {105,6},
        {clauses,
         [{clause,
           {105,6},
           [],[],
           [{match,{105,6},{var,{105,6},'X__X'},{integer,{105,18},18}},
            {'case',
             {105,18},
             {call,
              {105,22},
              {remote,{105,30},{atom,{105,22},erl_anno},{atom,{105,31},line}},
              [{var,{105,36},'OkAnno'}]},
             [{clause,
               {105,42},
               [{var,{105,42},'X__X'}],
               [],
               [{atom,{105,42},ok}]},
              {clause,
               {105,42},
               [{var,{105,42},'X__V'}],
               [],
               [{call,
                 {105,42},
                 {remote,
                  {105,42},
                  {atom,{105,42},erlang},
                  {atom,{105,42},error}},
                 [{block,0,
                   [{tuple,
                     {105,42},
                     [{atom,{105,42},assertEqual},
                      {cons,
                       {105,42},
                       {tuple,
                        {105,42},
                        [{atom,{105,42},module},
                         {atom,{105,42},beam_doc_SUITE}]},
                       {cons,
                        {105,42},
                        {tuple,
                         {105,42},
                         [{atom,{105,42},line},{integer,{105,42},105}]},
                        {cons,
                         {105,42},
                         {tuple,
                          {105,42},
                          [{atom,{105,42},expression},
                           {string,{105,42},"erl_anno : line ( OkAnno )"}]},
                         {cons,
                          {105,42},
                          {tuple,
                           {105,42},
                           [{atom,{105,42},expected},{var,{105,42},'X__X'}]},
                          {cons,
                           {105,42},
                           {tuple,
                            {105,42},
                            [{atom,{105,42},value},{var,{105,42},'X__V'}]},
                           {nil,{105,42}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,106,38},
    {block,
     {106,6},
     [{call,
       {106,6},
       {'fun',
        {106,6},
        {clauses,
         [{clause,
           {106,6},
           [],[],
           [{match,{106,6},{var,{106,6},'X__X'},{integer,{106,18},21}},
            {'case',
             {106,18},
             {call,
              {106,22},
              {remote,{106,30},{atom,{106,22},erl_anno},{atom,{106,31},line}},
              [{var,{106,36},'NoDocsAnno'}]},
             [{clause,
               {106,46},
               [{var,{106,46},'X__X'}],
               [],
               [{atom,{106,46},ok}]},
              {clause,
               {106,46},
               [{var,{106,46},'X__V'}],
               [],
               [{call,
                 {106,46},
                 {remote,
                  {106,46},
                  {atom,{106,46},erlang},
                  {atom,{106,46},error}},
                 [{block,0,
                   [{tuple,
                     {106,46},
                     [{atom,{106,46},assertEqual},
                      {cons,
                       {106,46},
                       {tuple,
                        {106,46},
                        [{atom,{106,46},module},
                         {atom,{106,46},beam_doc_SUITE}]},
                       {cons,
                        {106,46},
                        {tuple,
                         {106,46},
                         [{atom,{106,46},line},{integer,{106,46},106}]},
                        {cons,
                         {106,46},
                         {tuple,
                          {106,46},
                          [{atom,{106,46},expression},
                           {string,
                            {106,46},
                            "erl_anno : line ( NoDocsAnno )"}]},
                         {cons,
                          {106,46},
                          {tuple,
                           {106,46},
                           [{atom,{106,46},expected},{var,{106,46},'X__X'}]},
                          {cons,
                           {106,46},
                           {tuple,
                            {106,46},
                            [{atom,{106,46},value},{var,{106,46},'X__V'}]},
                           {nil,{106,46}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,107,39},
    {block,
     {107,6},
     [{call,
       {107,6},
       {'fun',
        {107,6},
        {clauses,
         [{clause,
           {107,6},
           [],[],
           [{match,{107,6},{var,{107,6},'X__X'},{integer,{107,18},1}},
            {'case',
             {107,18},
             {call,
              {107,21},
              {remote,{107,29},{atom,{107,21},erl_anno},{atom,{107,30},line}},
              [{var,{107,35},'FileDocsAnno'}]},
             [{clause,
               {107,47},
               [{var,{107,47},'X__X'}],
               [],
               [{atom,{107,47},ok}]},
              {clause,
               {107,47},
               [{var,{107,47},'X__V'}],
               [],
               [{call,
                 {107,47},
                 {remote,
                  {107,47},
                  {atom,{107,47},erlang},
                  {atom,{107,47},error}},
                 [{block,0,
                   [{tuple,
                     {107,47},
                     [{atom,{107,47},assertEqual},
                      {cons,
                       {107,47},
                       {tuple,
                        {107,47},
                        [{atom,{107,47},module},
                         {atom,{107,47},beam_doc_SUITE}]},
                       {cons,
                        {107,47},
                        {tuple,
                         {107,47},
                         [{atom,{107,47},line},{integer,{107,47},107}]},
                        {cons,
                         {107,47},
                         {tuple,
                          {107,47},
                          [{atom,{107,47},expression},
                           {string,
                            {107,47},
                            "erl_anno : line ( FileDocsAnno )"}]},
                         {cons,
                          {107,47},
                          {tuple,
                           {107,47},
                           [{atom,{107,47},expected},{var,{107,47},'X__X'}]},
                          {cons,
                           {107,47},
                           {tuple,
                            {107,47},
                            [{atom,{107,47},value},{var,{107,47},'X__V'}]},
                           {nil,{107,47}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,108,40},
    {block,
     {108,6},
     [{call,
       {108,6},
       {'fun',
        {108,6},
        {clauses,
         [{clause,
           {108,6},
           [],[],
           [{match,{108,6},{var,{108,6},'X__X'},{string,{108,18},"README"}},
            {'case',
             {108,18},
             {call,
              {108,28},
              {remote,
               {108,36},
               {atom,{108,28},filename},
               {atom,{108,37},basename}},
              [{block,0,
                [{call,
                  {108,46},
                  {remote,
                   {108,54},
                   {atom,{108,46},erl_anno},
                   {atom,{108,55},file}},
                  [{var,{108,60},'FileDocsAnno'}]}]}]},
             [{clause,
               {108,73},
               [{var,{108,73},'X__X'}],
               [],
               [{atom,{108,73},ok}]},
              {clause,
               {108,73},
               [{var,{108,73},'X__V'}],
               [],
               [{call,
                 {108,73},
                 {remote,
                  {108,73},
                  {atom,{108,73},erlang},
                  {atom,{108,73},error}},
                 [{block,0,
                   [{tuple,
                     {108,73},
                     [{atom,{108,73},assertEqual},
                      {cons,
                       {108,73},
                       {tuple,
                        {108,73},
                        [{atom,{108,73},module},
                         {atom,{108,73},beam_doc_SUITE}]},
                       {cons,
                        {108,73},
                        {tuple,
                         {108,73},
                         [{atom,{108,73},line},{integer,{108,73},108}]},
                        {cons,
                         {108,73},
                         {tuple,
                          {108,73},
                          [{atom,{108,73},expression},
                           {string,
                            {108,73},
                            "filename : basename ( erl_anno : file ( FileDocsAnno ) )"}]},
                         {cons,
                          {108,73},
                          {tuple,
                           {108,73},
                           [{atom,{108,73},expected},{var,{108,73},'X__X'}]},
                          {cons,
                           {108,73},
                           {tuple,
                            {108,73},
                            [{atom,{108,73},value},{var,{108,73},'X__V'}]},
                           {nil,{108,73}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,109,41},
    {block,
     {109,6},
     [{call,
       {109,6},
       {'fun',
        {109,6},
        {clauses,
         [{clause,
           {109,6},
           [],[],
           [{match,{109,6},{var,{109,6},'X__X'},{integer,{109,18},28}},
            {'case',
             {109,18},
             {call,
              {109,22},
              {remote,{109,30},{atom,{109,22},erl_anno},{atom,{109,31},line}},
              [{var,{109,36},'NoDocsMultiAnno'}]},
             [{clause,
               {109,51},
               [{var,{109,51},'X__X'}],
               [],
               [{atom,{109,51},ok}]},
              {clause,
               {109,51},
               [{var,{109,51},'X__V'}],
               [],
               [{call,
                 {109,51},
                 {remote,
                  {109,51},
                  {atom,{109,51},erlang},
                  {atom,{109,51},error}},
                 [{block,0,
                   [{tuple,
                     {109,51},
                     [{atom,{109,51},assertEqual},
                      {cons,
                       {109,51},
                       {tuple,
                        {109,51},
                        [{atom,{109,51},module},
                         {atom,{109,51},beam_doc_SUITE}]},
                       {cons,
                        {109,51},
                        {tuple,
                         {109,51},
                         [{atom,{109,51},line},{integer,{109,51},109}]},
                        {cons,
                         {109,51},
                         {tuple,
                          {109,51},
                          [{atom,{109,51},expression},
                           {string,
                            {109,51},
                            "erl_anno : line ( NoDocsMultiAnno )"}]},
                         {cons,
                          {109,51},
                          {tuple,
                           {109,51},
                           [{atom,{109,51},expected},{var,{109,51},'X__X'}]},
                          {cons,
                           {109,51},
                           {tuple,
                            {109,51},
                            [{atom,{109,51},value},{var,{109,51},'X__V'}]},
                           {nil,{109,51}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,111,42},
    {atom,{111,5},ok}]}]}.
{function,
 {113,1},
 hide_moduledoc,1,
 [{clause,
   {113,1},
   [{var,{113,1},'_'}],
   [[{call,
      {113,1},
      {remote,{113,1},{atom,{113,1},fake},{atom,{113,1},is_beam_bif_info}},
      []}]],
   [{debug_line,113,43},{atom,{113,1},ignore}]},
  {clause,
   {113,1},
   [{var,{113,16},'Conf'}],
   [],
   [{debug_line,114,44},
    {match,
     {114,5},
     {tuple,{114,5},[{atom,{114,6},ok},{var,{114,10},'ModName'}]},
     {call,
      {114,21},
      {atom,{114,21},default_compile_file},
      [{var,{114,42},'Conf'},{block,0,[{string,{114,48},"hide_moduledoc"}]}]}},
    {debug_line,115,45},
    {match,
     {115,5},
     {tuple,
      {115,5},
      [{atom,{115,6},ok},
       {tuple,
        {115,10},
        [{atom,{115,11},docs_v1},
         {var,{115,20},'_'},
         {var,{115,22},'_'},
         {var,{115,25},'_Mime'},
         {atom,{115,32},hidden},
         {var,{115,40},'_'},
         {cons,
          {116,11},
          {tuple,
           {116,12},
           [{tuple,
             {116,13},
             [{atom,{116,14},function},
              {atom,{116,24},main},
              {integer,{116,30},0}]},
            {var,{116,34},'_'},
            {cons,
             {116,37},
             {bin,
              {116,38},
              [{bin_element,
                {116,40},
                {string,{116,40},"main()"},
                default,default}]},
             {nil,{116,50}}},
            {map,
             {117,13},
             [{map_field_exact,
               {117,25},
               {bin,
                {117,16},
                [{bin_element,
                  {117,18},
                  {string,{117,18},"en"},
                  default,default}]},
               {bin,
                {117,28},
                [{bin_element,
                  {117,30},
                  {string,{117,30},"Doc test module"},
                  default,default}]}}]},
            {map,{117,53},[]}]},
          {nil,{117,57}}}]}]},
     {call,
      {117,63},
      {remote,{117,67},{atom,{117,63},code},{atom,{117,68},get_doc}},
      [{var,{117,76},'ModName'}]}},
    {debug_line,118,46},
    {atom,{118,5},ok}]}]}.
{function,
 {121,1},
 hide_moduledoc2,1,
 [{clause,
   {121,1},
   [{var,{121,1},'_'}],
   [[{call,
      {121,1},
      {remote,{121,1},{atom,{121,1},fake},{atom,{121,1},is_beam_bif_info}},
      []}]],
   [{debug_line,121,47},{atom,{121,1},ignore}]},
  {clause,
   {121,1},
   [{var,{121,17},'Conf'}],
   [],
   [{debug_line,122,48},
    {match,
     {122,5},
     {var,{122,5},'ModuleName'},
     {call,
      {122,19},
      {remote,{122,19},{atom,{122,19},erlang},{atom,{122,19},atom_to_list}},
      [{atom,{122,19},hide_moduledoc2}]}},
    {debug_line,123,49},
    {match,
     {123,5},
     {tuple,{123,5},[{atom,{123,6},ok},{var,{123,10},'ModName'}]},
     {call,
      {123,21},
      {atom,{123,21},default_compile_file},
      [{var,{123,42},'Conf'},{var,{123,48},'ModuleName'}]}},
    {debug_line,124,50},
    {match,
     {124,5},
     {tuple,
      {124,5},
      [{atom,{124,6},ok},
       {tuple,
        {124,10},
        [{atom,{124,11},docs_v1},
         {var,{124,20},'_'},
         {var,{124,22},'_'},
         {var,{124,25},'_Mime'},
         {atom,{124,32},hidden},
         {var,{124,40},'_'},
         {cons,
          {125,11},
          {tuple,
           {125,12},
           [{tuple,
             {125,13},
             [{atom,{125,14},function},
              {atom,{125,23},handle_call},
              {integer,{125,35},1}]},
            {tuple,{125,38},[{integer,{125,39},16},{integer,{125,42},2}]},
            {cons,
             {125,45},
             {bin,
              {125,46},
              [{bin_element,
                {125,48},
                {string,{125,48},"handle_call/1"},
                default,default}]},
             {nil,{125,65}}},
            {atom,{125,67},hidden},
            {map,{125,74},[]}]},
          {cons,
           {126,12},
           {tuple,
            {126,12},
            [{tuple,
              {126,13},
              [{atom,{126,14},function},
               {atom,{126,24},main},
               {integer,{126,30},0}]},
             {var,{126,34},'_'},
             {cons,
              {126,37},
              {bin,
               {126,38},
               [{bin_element,
                 {126,40},
                 {string,{126,40},"main()"},
                 default,default}]},
              {nil,{126,50}}},
             {atom,{126,53},hidden},
             {map,{126,61},[]}]},
           {nil,{126,65}}}}]}]},
     {call,
      {126,71},
      {remote,{126,75},{atom,{126,71},code},{atom,{126,76},get_doc}},
      [{var,{126,84},'ModName'}]}},
    {debug_line,127,51},
    {atom,{127,5},ok}]}]}.
{function,
    {129,1},
    docformat,1,
    [{clause,
         {129,1},
         [{var,{129,1},'_'}],
         [[{call,
               {129,1},
               {remote,
                   {129,1},
                   {atom,{129,1},fake},
                   {atom,{129,1},is_beam_bif_info}},
               []}]],
         [{debug_line,129,52},{atom,{129,1},ignore}]},
     {clause,
         {129,1},
         [{var,{129,11},'Conf'}],
         [],
         [{debug_line,130,53},
          {match,
              {130,5},
              {tuple,{130,5},[{atom,{130,6},ok},{var,{130,10},'ModName'}]},
              {call,
                  {130,21},
                  {atom,{130,21},default_compile_file},
                  [{var,{130,42},'Conf'},
                   {block,0,[{string,{130,48},"docformat"}]}]}},
          {debug_line,131,54},
          {match,
              {131,5},
              {var,{131,5},'ModuleDoc'},
              {map,
                  {131,17},
                  [{map_field_assoc,
                       {131,28},
                       {bin,
                           {131,19},
                           [{bin_element,
                                {131,21},
                                {string,{131,21},"en"},
                                default,default}]},
                       {bin,
                           {131,31},
                           [{bin_element,
                                {131,33},
                                {string,{131,33},"Moduledoc test module"},
                                default,default}]}}]}},
          {debug_line,132,55},
          {match,
              {132,5},
              {var,{132,5},'Doc'},
              {map,
                  {132,11},
                  [{map_field_assoc,
                       {132,22},
                       {bin,
                           {132,13},
                           [{bin_element,
                                {132,15},
                                {string,{132,15},"en"},
                                default,default}]},
                       {bin,
                           {132,25},
                           [{bin_element,
                                {132,27},
                                {string,{132,27},"Doc test module"},
                                default,default}]}}]}},
          {debug_line,133,56},
          {match,
              {133,5},
              {tuple,
                  {133,5},
                  [{atom,{133,6},ok},
                   {tuple,
                       {133,10},
                       [{atom,{133,11},docs_v1},
                        {var,{133,20},'_'},
                        {var,{133,22},'_'},
                        {bin,
                            {133,25},
                            [{bin_element,
                                 {133,27},
                                 {string,{133,27},"text/asciidoc"},
                                 default,default}]},
                        {var,{133,46},'ModuleDoc'},
                        {var,{133,57},'Meta'},
                        {cons,
                            {134,11},
                            {tuple,
                                {134,12},
                                [{tuple,
                                     {134,13},
                                     [{atom,{134,14},function},
                                      {atom,{134,24},main},
                                      {var,{134,29},'_'}]},
                                 {var,{134,32},'_'},
                                 {var,{134,35},'_'},
                                 {var,{134,38},'Doc'},
                                 {var,{134,43},'_'}]},
                            {nil,{134,45}}}]}]},
              {call,
                  {134,51},
                  {remote,
                      {134,55},
                      {atom,{134,51},code},
                      {atom,{134,56},get_doc}},
                  [{var,{134,64},'ModName'}]}},
          {debug_line,135,57},
          {match,
              {135,5},
              {map,
                  {135,5},
                  [{map_field_exact,
                       {135,14},
                       {atom,{135,7},format},
                       {bin,
                           {135,17},
                           [{bin_element,
                                {135,18},
                                {string,{135,18},"text/asciidoc"},
                                default,
                                [utf8]}]}},
                   {map_field_exact,
                       {135,46},
                       {atom,{135,35},deprecated},
                       {bin,
                           {135,49},
                           [{bin_element,
                                {135,50},
                                {string,{135,50},"Use something else"},
                                default,
                                [utf8]}]}},
                   {map_field_exact,
                       {135,84},
                       {atom,{135,72},otp_doc_vsn},
                       {tuple,
                           {135,87},
                           [{integer,{135,88},1},
                            {integer,{135,90},0},
                            {integer,{135,92},0}]}},
                   {map_field_exact,
                       {135,102},
                       {atom,{135,96},since},
                       {bin,
                           {135,105},
                           [{bin_element,
                                {135,106},
                                {string,{135,106},"1.0"},
                                default,
                                [utf8]}]}}]},
              {var,{135,115},'Meta'}},
          {debug_line,136,58},
          {atom,{136,5},ok}]}]}.
{function,
 {138,1},
 singleton_docformat,1,
 [{clause,
   {138,1},
   [{var,{138,1},'_'}],
   [[{call,
      {138,1},
      {remote,{138,1},{atom,{138,1},fake},{atom,{138,1},is_beam_bif_info}},
      []}]],
   [{debug_line,138,59},{atom,{138,1},ignore}]},
  {clause,
   {138,1},
   [{var,{138,21},'Conf'}],
   [],
   [{debug_line,139,60},
    {match,
     {139,5},
     {tuple,{139,5},[{atom,{139,6},ok},{var,{139,10},'ModName'}]},
     {call,
      {139,21},
      {atom,{139,21},default_compile_file},
      [{var,{139,42},'Conf'},
       {block,0,[{string,{139,48},"singleton_docformat"}]}]}},
    {debug_line,140,61},
    {match,
     {140,5},
     {var,{140,5},'ModuleDoc'},
     {map,
      {140,17},
      [{map_field_assoc,
        {140,28},
        {bin,
         {140,19},
         [{bin_element,{140,21},{string,{140,21},"en"},default,default}]},
        {bin,
         {140,31},
         [{bin_element,
           {140,33},
           {string,{140,33},"Moduledoc test module"},
           default,default}]}}]}},
    {debug_line,141,62},
    {match,
     {141,5},
     {var,{141,5},'Doc'},
     {map,
      {141,11},
      [{map_field_assoc,
        {141,22},
        {bin,
         {141,13},
         [{bin_element,{141,15},{string,{141,15},"en"},default,default}]},
        {bin,
         {141,25},
         [{bin_element,
           {141,27},
           {string,{141,27},"Doc test module\n\nMore info here"},
           default,default}]}}]}},
    {debug_line,142,63},
    {match,
     {142,5},
     {tuple,
      {142,5},
      [{atom,{142,6},ok},
       {tuple,
        {142,10},
        [{atom,{142,11},docs_v1},
         {var,{142,20},'_'},
         {atom,{142,22},erlang},
         {bin,
          {142,30},
          [{bin_element,
            {142,32},
            {string,{142,32},"text/asciidoc"},
            default,default}]},
         {var,{142,51},'ModuleDoc'},
         {var,{142,62},'Meta'},
         {cons,
          {143,11},
          {tuple,
           {143,12},
           [{tuple,
             {143,13},
             [{atom,{143,14},function},
              {atom,{143,24},main},
              {integer,{143,29},0}]},
            {var,{143,32},'_'},
            {cons,
             {143,35},
             {bin,
              {143,36},
              [{bin_element,
                {143,38},
                {string,{143,38},"main()"},
                default,default}]},
             {nil,{143,48}}},
            {var,{143,51},'Doc'},
            {var,{143,56},'FunMeta'}]},
          {nil,{143,64}}}]}]},
     {call,
      {143,70},
      {remote,{143,74},{atom,{143,70},code},{atom,{143,75},get_doc}},
      [{var,{143,83},'ModName'}]}},
    {debug_line,144,64},
    {match,
     {144,5},
     {map,
      {144,5},
      [{map_field_exact,
        {144,14},
        {atom,{144,7},format},
        {bin,
         {144,17},
         [{bin_element,
           {144,19},
           {string,{144,19},"text/asciidoc"},
           default,default}]}},
       {map_field_exact,
        {145,18},
        {atom,{145,7},deprecated},
        {bin,
         {145,21},
         [{bin_element,
           {145,22},
           {string,{145,22},"Use something else"},
           default,
           [utf8]}]}},
       {map_field_exact,
        {146,19},
        {atom,{146,7},otp_doc_vsn},
        {tuple,
         {146,22},
         [{integer,{146,23},1},{integer,{146,25},0},{integer,{146,27},0}]}},
       {map_field_exact,
        {147,13},
        {atom,{147,7},since},
        {bin,
         {147,16},
         [{bin_element,{147,17},{string,{147,17},"1.0"},default,[utf8]}]}}]},
     {var,{147,26},'Meta'}},
    {debug_line,148,65},
    {match,
     {148,5},
     {map,
      {148,5},
      [{map_field_exact,
        {148,15},
        {atom,{148,7},authors},
        {cons,
         {148,18},
         {bin,
          {148,19},
          [{bin_element,
            {148,21},
            {string,{148,21},"Beep Bop"},
            default,default}]},
         {nil,{148,33}}}},
       {map_field_exact,
        {148,42},
        {atom,{148,36},equiv},
        {bin,
         {148,45},
         [{bin_element,{148,47},{string,{148,47},"main/3"},default,default}]}},
       {map_field_exact,
        {148,65},
        {atom,{148,59},since},
        {bin,
         {148,68},
         [{bin_element,{148,69},{string,{148,69},"1.0"},default,[utf8]}]}}]},
     {var,{148,78},'FunMeta'}},
    {debug_line,149,66},
    {atom,{149,5},ok}]}]}.
{function,
 {151,1},
 singleton_meta,1,
 [{clause,
   {151,1},
   [{var,{151,1},'_'}],
   [[{call,
      {151,1},
      {remote,{151,1},{atom,{151,1},fake},{atom,{151,1},is_beam_bif_info}},
      []}]],
   [{debug_line,151,67},{atom,{151,1},ignore}]},
  {clause,
   {151,1},
   [{var,{151,16},'Conf'}],
   [],
   [{debug_line,152,68},
    {match,
     {152,5},
     {var,{152,5},'ModuleName'},
     {call,
      {152,19},
      {remote,{152,19},{atom,{152,19},erlang},{atom,{152,19},atom_to_list}},
      [{atom,{152,19},singleton_meta}]}},
    {debug_line,153,69},
    {match,
     {153,5},
     {tuple,{153,5},[{atom,{153,6},ok},{var,{153,10},'ModName'}]},
     {call,
      {153,21},
      {atom,{153,21},default_compile_file},
      [{var,{153,42},'Conf'},{var,{153,48},'ModuleName'}]}},
    {debug_line,154,70},
    {match,
     {154,5},
     {var,{154,5},'DocMain1'},
     {map,
      {154,16},
      [{map_field_assoc,
        {154,27},
        {bin,
         {154,18},
         [{bin_element,{154,20},{string,{154,20},"en"},default,default}]},
        {bin,
         {154,30},
         [{bin_element,
           {154,32},
           {string,{154,32},"Returns always ok."},
           default,default}]}}]}},
    {debug_line,155,71},
    {match,
     {155,5},
     {var,{155,5},'Meta'},
     {map,
      {155,12},
      [{map_field_assoc,
        {155,22},
        {atom,{155,14},authors},
        {cons,
         {155,25},
         {bin,
          {155,26},
          [{bin_element,
            {155,28},
            {string,{155,28},"Beep Bop"},
            default,default}]},
         {nil,{155,40}}}},
       {map_field_assoc,
        {155,49},
        {atom,{155,43},equiv},
        {bin,
         {155,52},
         [{bin_element,{155,54},{string,{155,54},"main/3"},default,default}]}},
       {map_field_assoc,
        {155,72},
        {atom,{155,66},since},
        {bin,
         {155,75},
         [{bin_element,{155,76},{string,{155,76},"1.0"},default,[utf8]}]}},
       {map_field_assoc,
        {155,95},
        {atom,{155,83},source_anno},
        {tuple,{155,98},[{integer,{155,99},9},{integer,{155,102},1}]}}]}},
    {debug_line,156,72},
    {match,
     {156,5},
     {tuple,
      {156,5},
      [{atom,{156,6},ok},
       {tuple,
        {156,10},
        [{atom,{156,11},docs_v1},
         {var,{156,20},'_'},
         {atom,{156,22},erlang},
         {bin,
          {156,30},
          [{bin_element,
            {156,32},
            {string,{156,32},"text/markdown"},
            default,default}]},
         {atom,{156,51},none},
         {map,
          {156,57},
          [{map_field_exact,
            {156,66},
            {atom,{156,60},since},
            {bin,
             {156,69},
             [{bin_element,{156,70},{string,{156,70},"1.0"},default,[utf8]}]}},
           {map_field_exact,
            {156,89},
            {atom,{156,77},source_anno},
            {tuple,{156,92},[{integer,{156,93},1},{integer,{156,96},2}]}}]},
         {cons,
          {157,11},
          {tuple,
           {157,12},
           [{tuple,
             {157,13},
             [{atom,{157,14},function},
              {atom,{157,24},main1},
              {integer,{157,30},0}]},
            {var,{157,33},'_'},
            {cons,
             {157,36},
             {bin,
              {157,37},
              [{bin_element,
                {157,39},
                {string,{157,39},"main1()"},
                default,default}]},
             {nil,{157,50}}},
            {var,{157,53},'DocMain1'},
            {map,
             {157,63},
             [{map_field_exact,
               {157,71},
               {atom,{157,65},equiv},
               {bin,
                {157,74},
                [{bin_element,
                  {157,76},
                  {string,{157,76},"main(_)"},
                  default,default}]}},
              {map_field_exact,
               {158,71},
               {atom,{158,65},since},
               {bin,
                {158,74},
                [{bin_element,
                  {158,75},
                  {string,{158,75},"1.1"},
                  default,
                  [utf8]}]}},
              {map_field_exact,
               {159,77},
               {atom,{159,65},source_anno},
               {tuple,
                {159,80},
                [{integer,{159,81},19},{integer,{159,85},1}]}}]}]},
          {cons,
           {160,12},
           {tuple,
            {160,12},
            [{tuple,
              {160,13},
              [{atom,{160,14},function},
               {atom,{160,24},main},
               {integer,{160,29},0}]},
             {var,{160,32},'_'},
             {cons,
              {160,35},
              {bin,
               {160,36},
               [{bin_element,
                 {160,38},
                 {string,{160,38},"main()"},
                 default,default}]},
              {nil,{160,48}}},
             {atom,{160,51},none},
             {var,{160,57},'Meta'}]},
           {nil,{160,62}}}}]}]},
     {call,
      {161,11},
      {remote,{161,15},{atom,{161,11},code},{atom,{161,16},get_doc}},
      [{var,{161,24},'ModName'}]}},
    {debug_line,162,73},
    {atom,{162,5},ok}]}]}.
{function,
    {164,1},
    source_path,1,
    [{clause,
         {164,1},
         [{var,{164,1},'_'}],
         [[{call,
               {164,1},
               {remote,
                   {164,1},
                   {atom,{164,1},fake},
                   {atom,{164,1},is_beam_bif_info}},
               []}]],
         [{debug_line,164,74},{atom,{164,1},ignore}]},
     {clause,
         {164,1},
         [{var,{164,13},'Conf'}],
         [],
         [{debug_line,165,75},
          {match,
              {165,5},
              {var,{165,5},'ModuleName'},
              {call,
                  {165,19},
                  {remote,
                      {165,19},
                      {atom,{165,19},erlang},
                      {atom,{165,19},atom_to_list}},
                  [{atom,{165,19},source_path}]}},
          {debug_line,167,76},
          {match,
              {167,5},
              {var,{167,5},'FilePath'},
              {call,
                  {167,16},
                  {remote,
                      {167,24},
                      {atom,{167,16},filename},
                      {atom,{167,25},absname}},
                  [{block,0,
                       [{call,
                            {167,33},
                            {atom,{167,33},data_file_path},
                            [{var,{167,48},'Conf'},
                             {var,{167,54},'ModuleName'}]}]}]}},
          {debug_line,168,77},
          {match,
              {168,5},
              {tuple,{168,5},[{atom,{168,6},ok},{var,{168,10},'ModName'}]},
              {call,
                  {168,21},
                  {atom,{168,21},default_compile_file},
                  [{var,{168,42},'Conf'},{var,{168,48},'ModuleName'}]}},
          {debug_line,169,78},
          {match,
              {169,5},
              {tuple,
                  {169,5},
                  [{atom,{169,6},ok},
                   {tuple,
                       {169,10},
                       [{atom,{169,11},docs_v1},
                        {var,{169,20},'_'},
                        {var,{169,23},'_'},
                        {var,{169,26},'_'},
                        {var,{169,29},'_'},
                        {var,{169,32},'Meta1'},
                        {var,{169,39},'_'}]}]},
              {call,
                  {169,45},
                  {remote,
                      {169,49},
                      {atom,{169,45},code},
                      {atom,{169,50},get_doc}},
                  [{var,{169,58},'ModName'}]}},
          {debug_line,170,79},
          {match,
              {170,5},
              {map,
                  {170,5},
                  [{map_field_exact,
                       {170,19},
                       {atom,{170,7},source_path},
                       {var,{170,22},'FilePath'}}]},
              {var,{170,34},'Meta1'}},
          {debug_line,172,80},
          {match,
              {172,5},
              {tuple,{172,5},[{atom,{172,6},ok},{var,{172,10},'ModName'}]},
              {call,
                  {172,21},
                  {atom,{172,21},default_compile_file},
                  [{var,{172,42},'Conf'},
                   {var,{172,48},'ModuleName'},
                   {block,0,
                       [{cons,
                            {172,60},
                            {atom,{172,61},deterministic},
                            {nil,{172,74}}}]}]}},
          {debug_line,173,81},
          {match,
              {173,5},
              {tuple,
                  {173,5},
                  [{atom,{173,6},ok},
                   {tuple,
                       {173,10},
                       [{atom,{173,11},docs_v1},
                        {var,{173,20},'_'},
                        {var,{173,23},'_'},
                        {var,{173,26},'_'},
                        {var,{173,29},'_'},
                        {var,{173,32},'Meta2'},
                        {var,{173,39},'_'}]}]},
              {call,
                  {173,45},
                  {remote,
                      {173,49},
                      {atom,{173,45},code},
                      {atom,{173,50},get_doc}},
                  [{var,{173,58},'ModName'}]}},
          {debug_line,174,82},
          {match,
              {174,5},
              {atom,{174,5},false},
              {call,
                  {174,13},
                  {remote,
                      {174,13},
                      {atom,{174,13},erlang},
                      {atom,{174,13},is_map_key}},
                  [{atom,{174,24},source_path},{var,{174,37},'Meta2'}]}},
          {debug_line,175,83},
          {atom,{175,5},ok}]}]}.
{function,
 {177,1},
 behaviours,1,
 [{clause,
   {177,1},
   [{var,{177,1},'_'}],
   [[{call,
      {177,1},
      {remote,{177,1},{atom,{177,1},fake},{atom,{177,1},is_beam_bif_info}},
      []}]],
   [{debug_line,177,84},{atom,{177,1},ignore}]},
  {clause,
   {177,1},
   [{var,{177,12},'Conf'}],
   [],
   [{debug_line,178,85},
    {match,
     {178,5},
     {var,{178,5},'ModuleName'},
     {call,
      {178,19},
      {remote,{178,19},{atom,{178,19},erlang},{atom,{178,19},atom_to_list}},
      [{atom,{178,19},behaviours}]}},
    {debug_line,179,86},
    {match,
     {179,5},
     {tuple,{179,5},[{atom,{179,6},ok},{var,{179,10},'ModName'}]},
     {call,
      {179,21},
      {atom,{179,21},default_compile_file},
      [{var,{179,42},'Conf'},{var,{179,48},'ModuleName'}]}},
    {debug_line,180,87},
    {match,
     {180,5},
     {tuple,
      {180,5},
      [{atom,{180,6},ok},
       {tuple,
        {180,10},
        [{atom,{180,11},docs_v1},
         {var,{180,20},'_'},
         {var,{180,23},'_'},
         {var,{180,26},'_'},
         {var,{180,29},'_'},
         {map,
          {180,32},
          [{map_field_exact,
            {180,45},
            {atom,{180,34},behaviours},
            {cons,
             {180,48},
             {atom,{180,49},gen_event},
             {cons,{180,60},{atom,{180,60},gen_server},{nil,{180,70}}}}}]},
         {var,{180,74},'_'}]}]},
     {call,
      {180,80},
      {remote,{180,84},{atom,{180,80},code},{atom,{180,85},get_doc}},
      [{var,{180,93},'ModName'}]}},
    {debug_line,181,88},
    {atom,{181,5},ok}]}]}.
{function,
 {183,1},
 slogan,1,
 [{clause,
   {183,1},
   [{var,{183,1},'_'}],
   [[{call,
      {183,1},
      {remote,{183,1},{atom,{183,1},fake},{atom,{183,1},is_beam_bif_info}},
      []}]],
   [{debug_line,183,89},{atom,{183,1},ignore}]},
  {clause,
   {183,1},
   [{var,{183,8},'Conf'}],
   [],
   [{debug_line,184,90},
    {match,
     {184,3},
     {var,{184,3},'ModuleName'},
     {call,
      {184,17},
      {remote,{184,17},{atom,{184,17},erlang},{atom,{184,17},atom_to_list}},
      [{atom,{184,17},slogan}]}},
    {debug_line,185,91},
    {match,
     {185,3},
     {tuple,{185,3},[{atom,{185,4},ok},{var,{185,8},'ModName'}]},
     {call,
      {185,19},
      {atom,{185,19},default_compile_file},
      [{var,{185,40},'Conf'},{var,{185,46},'ModuleName'}]}},
    {debug_line,186,92},
    {match,
     {186,3},
     {var,{186,3},'Doc'},
     {map,
      {186,9},
      [{map_field_assoc,
        {186,20},
        {bin,
         {186,11},
         [{bin_element,{186,13},{string,{186,13},"en"},default,default}]},
        {bin,
         {186,23},
         [{bin_element,
           {186,25},
           {string,{186,25},"Returns ok."},
           default,default}]}}]}},
    {debug_line,187,93},
    {match,
     {187,3},
     {var,{187,3},'BarDoc'},
     {map,
      {187,12},
      [{map_field_assoc,
        {187,24},
        {bin,
         {187,15},
         [{bin_element,{187,17},{string,{187,17},"en"},default,default}]},
        {bin,
         {187,27},
         [{bin_element,
           {187,29},
           {string,{187,29},"foo()\nNot a slogan since foo =/= bar"},
           default,default}]}}]}},
    {debug_line,188,94},
    {match,
     {188,3},
     {var,{188,3},'NoSloganDoc'},
     {map,
      {188,17},
      [{map_field_assoc,
        {188,29},
        {bin,
         {188,20},
         [{bin_element,{188,22},{string,{188,22},"en"},default,default}]},
        {bin,
         {188,32},
         [{bin_element,
           {188,34},
           {string,{188,34},"Not a slogan\n\nTests slogans in multi-clause"},
           default,default}]}}]}},
    {debug_line,189,95},
    {match,
     {189,3},
     {tuple,
      {189,3},
      [{atom,{189,4},ok},
       {tuple,
        {189,8},
        [{atom,{189,9},docs_v1},
         {var,{189,18},'_'},
         {var,{189,20},'_'},
         {var,{189,23},'_'},
         {atom,{189,26},none},
         {var,{189,32},'_'},
         {cons,
          {190,11},
          {var,{190,12},'Connect'},
          {cons,
           {190,21},
           {var,{190,21},'MulticlauseSloganIgnored'},
           {cons,
            {190,47},
            {var,{190,47},'SpecNoDocSlogan'},
            {cons,
             {190,64},
             {var,{190,64},'NoDocSlogan'},
             {cons,
              {191,12},
              {var,{191,12},'Slogan2'},
              {cons,
               {191,21},
               {var,{191,21},'Slogan1'},
               {cons,
                {191,30},
                {var,{191,30},'NoSlogan'},
                {cons,
                 {191,40},
                 {var,{191,40},'Bar'},
                 {cons,
                  {191,45},
                  {var,{191,45},'Main'},
                  {nil,{191,49}}}}}}}}}}}]}]},
     {call,
      {191,55},
      {remote,{191,59},{atom,{191,55},code},{atom,{191,60},get_doc}},
      [{var,{191,68},'ModName'}]}},
    {debug_line,193,96},
    {match,
     {193,3},
     {tuple,
      {193,3},
      [{tuple,
        {193,4},
        [{atom,{193,5},function},
         {atom,{193,14},connect},
         {integer,{193,22},2}]},
       {var,{193,25},'_'},
       {cons,
        {194,4},
        {bin,
         {194,5},
         [{bin_element,
           {194,7},
           {string,{194,7},"connect(TCPSocket, TLSOptions)"},
           default,default}]},
        {nil,{194,41}}},
       {atom,{194,43},none},
       {map,
        {194,48},
        [{map_field_exact,
          {194,56},
          {atom,{194,50},equiv},
          {bin,
           {194,59},
           [{bin_element,
             {194,61},
             {string,{194,61},"connect/3"},
             default,default}]}},
         {map_field_exact,
          {194,81},
          {atom,{194,75},since},
          {bin,
           {194,84},
           [{bin_element,
             {194,86},
             {string,{194,86},"OTP R14B"},
             default,default}]}}]}]},
     {var,{194,103},'Connect'}},
    {debug_line,195,97},
    {match,
     {195,3},
     {tuple,
      {195,3},
      [{tuple,
        {195,4},
        [{atom,{195,5},function},
         {atom,{195,14},spec_multiclause_slogan_ignored},
         {integer,{195,46},1}]},
       {var,{195,49},'_'},
       {cons,
        {195,51},
        {bin,
         {195,52},
         [{bin_element,
           {195,54},
           {string,{195,54},"spec_multiclause_slogan_ignored(X)"},
           default,default}]},
        {nil,{195,92}}},
       {atom,{195,94},none},
       {map,{195,99},[]}]},
     {var,{195,106},'MulticlauseSloganIgnored'}},
    {debug_line,196,98},
    {match,
     {196,3},
     {tuple,
      {196,3},
      [{tuple,
        {196,4},
        [{atom,{196,5},function},
         {atom,{196,15},spec_no_doc_slogan},
         {integer,{196,35},1}]},
       {var,{196,39},'_'},
       {cons,
        {196,42},
        {bin,
         {196,43},
         [{bin_element,
           {196,45},
           {string,{196,45},"spec_no_doc_slogan(Y)"},
           default,default}]},
        {nil,{196,70}}},
       {atom,{196,73},none},
       {map,{196,79},[]}]},
     {var,{196,86},'SpecNoDocSlogan'}},
    {debug_line,197,99},
    {match,
     {197,3},
     {tuple,
      {197,3},
      [{tuple,
        {197,4},
        [{atom,{197,5},function},
         {atom,{197,15},no_doc_slogan},
         {integer,{197,30},1}]},
       {var,{197,34},'_'},
       {cons,
        {197,37},
        {bin,
         {197,38},
         [{bin_element,
           {197,40},
           {string,{197,40},"no_doc_slogan(X)"},
           default,default}]},
        {nil,{197,60}}},
       {atom,{197,63},none},
       {map,{197,69},[]}]},
     {var,{197,75},'NoDocSlogan'}},
    {debug_line,198,100},
    {match,
     {198,3},
     {tuple,
      {198,3},
      [{tuple,
        {198,4},
        [{atom,{198,5},function},
         {atom,{198,15},spec_slogan},
         {integer,{198,28},2}]},
       {var,{198,32},'_'},
       {cons,
        {198,35},
        {bin,
         {198,36},
         [{bin_element,
           {198,38},
           {string,{198,38},"spec_slogan(Y, Z)"},
           default,default}]},
        {nil,{198,59}}},
       {var,{198,62},'_'},
       {map,{198,65},[]}]},
     {var,{198,72},'Slogan2'}},
    {debug_line,199,101},
    {match,
     {199,3},
     {tuple,
      {199,3},
      [{tuple,
        {199,4},
        [{atom,{199,5},function},
         {atom,{199,15},spec_slogan},
         {integer,{199,28},1}]},
       {var,{199,32},'_'},
       {cons,
        {199,35},
        {bin,
         {199,36},
         [{bin_element,
           {199,38},
           {string,{199,38},"spec_slogan(Y)"},
           default,default}]},
        {nil,{199,56}}},
       {var,{199,59},'_'},
       {map,{199,62},[]}]},
     {var,{199,69},'Slogan1'}},
    {debug_line,200,102},
    {match,
     {200,3},
     {tuple,
      {200,3},
      [{tuple,
        {200,4},
        [{atom,{200,5},function},
         {atom,{200,15},no_slogan},
         {integer,{200,25},1}]},
       {var,{200,28},'_'},
       {cons,
        {200,30},
        {bin,
         {200,31},
         [{bin_element,
           {200,33},
           {string,{200,33},"no_slogan/1"},
           default,default}]},
        {nil,{200,48}}},
       {var,{200,51},'NoSloganDoc'},
       {map,{200,64},[]}]},
     {var,{200,71},'NoSlogan'}},
    {debug_line,201,103},
    {match,
     {201,3},
     {tuple,
      {201,3},
      [{tuple,
        {201,4},
        [{atom,{201,5},function},{atom,{201,15},bar},{integer,{201,19},0}]},
       {var,{201,22},'_'},
       {cons,
        {201,24},
        {bin,
         {201,25},
         [{bin_element,{201,27},{string,{201,27},"bar()"},default,default}]},
        {nil,{201,36}}},
       {var,{201,39},'BarDoc'},
       {map,{201,47},[]}]},
     {var,{201,54},'Bar'}},
    {debug_line,202,104},
    {match,
     {202,3},
     {tuple,
      {202,3},
      [{tuple,
        {202,4},
        [{atom,{202,5},function},{atom,{202,15},main},{integer,{202,20},1}]},
       {var,{202,23},'_'},
       {cons,
        {202,25},
        {bin,
         {202,26},
         [{bin_element,
           {202,28},
           {string,{202,28},"main(Foo)"},
           default,default}]},
        {nil,{202,41}}},
       {var,{202,44},'Doc'},
       {map,{202,49},[]}]},
     {var,{202,56},'Main'}},
    {debug_line,203,105},
    {atom,{203,3},ok}]}]}.
{function,
 {205,1},
 types_and_opaques,1,
 [{clause,
   {205,1},
   [{var,{205,1},'_'}],
   [[{call,
      {205,1},
      {remote,{205,1},{atom,{205,1},fake},{atom,{205,1},is_beam_bif_info}},
      []}]],
   [{debug_line,205,106},{atom,{205,1},ignore}]},
  {clause,
   {205,1},
   [{var,{205,19},'Conf'}],
   [],
   [{debug_line,206,107},
    {match,
     {206,5},
     {var,{206,5},'ModuleName'},
     {call,
      {206,19},
      {remote,{206,19},{atom,{206,19},erlang},{atom,{206,19},atom_to_list}},
      [{atom,{206,19},types_and_opaques}]}},
    {debug_line,207,108},
    {match,
     {207,5},
     {tuple,
      {207,5},
      [{atom,{207,6},ok},{var,{207,10},'ModName'},{var,{207,19},'Warnings'}]},
     {call,
      {207,31},
      {atom,{207,31},default_compile_file},
      [{var,{207,52},'Conf'},
       {var,{207,58},'ModuleName'},
       {block,0,
        [{cons,{207,70},{atom,{207,71},return_warnings},{nil,{207,86}}}]}]}},
    {debug_line,208,109},
    {match,
     {208,5},
     {var,{208,5},'TypeDoc'},
     {map,
      {208,15},
      [{map_field_assoc,
        {208,26},
        {bin,
         {208,17},
         [{bin_element,{208,19},{string,{208,19},"en"},default,default}]},
        {bin,
         {208,29},
         [{bin_element,
           {208,31},
           {string,{208,31},"Represents the name of a person."},
           default,default}]}}]}},
    {debug_line,209,110},
    {match,
     {209,5},
     {var,{209,5},'GenericsDoc'},
     {map,
      {209,19},
      [{map_field_assoc,
        {209,30},
        {bin,
         {209,21},
         [{bin_element,{209,23},{string,{209,23},"en"},default,default}]},
        {bin,
         {209,33},
         [{bin_element,
           {209,35},
           {string,{209,35},"Tests generics"},
           default,default}]}}]}},
    {debug_line,210,111},
    {match,
     {210,5},
     {var,{210,5},'OpaqueDoc'},
     {map,
      {210,17},
      [{map_field_assoc,
        {210,28},
        {bin,
         {210,19},
         [{bin_element,{210,21},{string,{210,21},"en"},default,default}]},
        {bin,
         {211,23},
         [{bin_element,
           {211,25},
           {string,
            {211,25},
            "Represents the name of a person that cannot be named."},
           default,default}]}}]}},
    {debug_line,212,112},
    {match,
     {212,5},
     {var,{212,5},'MaybeOpaqueDoc'},
     {map,
      {212,22},
      [{map_field_assoc,
        {212,33},
        {bin,
         {212,24},
         [{bin_element,{212,26},{string,{212,26},"en"},default,default}]},
        {bin,
         {212,36},
         [{bin_element,
           {212,38},
           {string,
            {212,38},
            "mmaybe(X) ::= nothing | X.\n\nRepresents a maybe type."},
           default,default}]}}]}},
    {debug_line,214,113},
    {match,
     {214,5},
     {tuple,
      {214,5},
      [{atom,{214,6},ok},
       {tuple,
        {214,10},
        [{atom,{214,11},docs_v1},
         {var,{214,20},'_'},
         {var,{214,22},'_'},
         {var,{214,25},'_'},
         {atom,{214,28},none},
         {var,{214,34},'_'},
         {cons,
          {215,11},
          {var,{216,12},'Public'},
          {cons,
           {216,20},
           {var,{216,20},'Intermediate'},
           {cons,
            {216,34},
            {var,{216,34},'HiddenNoWarnType'},
            {cons,
             {216,52},
             {var,{216,52},'HiddenType'},
             {cons,
              {216,64},
              {var,{216,64},'OtherPrivateType'},
              {cons,
               {216,82},
               {var,{216,82},'MyPrivateType'},
               {cons,
                {217,12},
                {var,{217,12},'MyMap'},
                {cons,
                 {217,19},
                 {var,{217,19},'StateEnter'},
                 {cons,
                  {217,31},
                  {var,{217,31},'CallbackMode'},
                  {cons,
                   {217,44},
                   {var,{217,44},'CallbackResult'},
                   {cons,
                    {217,60},
                    {var,{217,60},'EncodingFunc'},
                    {cons,
                     {217,74},
                     {var,{217,74},'Three'},
                     {cons,
                      {218,12},
                      {var,{218,12},'Two'},
                      {cons,
                       {218,17},
                       {var,{218,17},'One'},
                       {cons,
                        {218,22},
                        {var,{218,22},'Hidden'},
                        {cons,
                         {218,30},
                         {var,{218,30},'HiddenFalse'},
                         {cons,
                          {218,43},
                          {var,{218,43},'MMaybe'},
                          {cons,
                           {218,51},
                           {var,{218,51},'Unnamed'},
                           {cons,
                            {218,60},
                            {var,{218,60},'Param'},
                            {cons,
                             {218,66},
                             {var,{218,66},'NatNumber'},
                             {cons,
                              {218,77},
                              {var,{218,77},'Name'},
                              {cons,
                               {219,12},
                               {var,{219,12},'HiddenIncludedType'},
                               {cons,
                                {221,12},
                                {var,{221,12},'UsesPublic'},
                                {cons,
                                 {221,24},
                                 {var,{221,24},'Ignore'},
                                 {cons,
                                  {221,32},
                                  {var,{221,32},'MapFun'},
                                  {cons,
                                   {221,40},
                                   {var,{221,40},'PrivateEncoding'},
                                   {cons,
                                    {221,57},
                                    {var,{221,57},'Foo'},
                                    {nil,
                                     {222,11}}}}}}}}}}}}}}}}}}}}}}}}}}}}}]}]},
     {call,
      {222,17},
      {remote,{222,21},{atom,{222,17},code},{atom,{222,22},get_doc}},
      [{var,{222,30},'ModName'}]}},
    {debug_line,224,114},
    {match,
     {224,5},
     {tuple,
      {224,5},
      [{tuple,
        {224,6},
        [{atom,{224,7},type},{atom,{224,12},public},{integer,{224,19},0}]},
       {tuple,{224,22},[{integer,{224,23},125},{integer,{224,27},2}]},
       {cons,
        {224,30},
        {bin,
         {224,31},
         [{bin_element,
           {224,33},
           {string,{224,33},"public()"},
           default,default}]},
        {nil,{224,45}}},
       {atom,{224,47},none},
       {map,
        {224,52},
        [{map_field_exact,
          {224,63},
          {atom,{224,54},exported},
          {atom,{224,66},true}},
         {map_field_exact,
          {224,84},
          {atom,{224,72},source_anno},
          {tuple,{224,87},[{integer,{224,88},125},{integer,{224,93},2}]}}]}]},
     {var,{224,100},'Public'}},
    {debug_line,225,115},
    {match,
     {225,5},
     {tuple,
      {225,5},
      [{tuple,
        {225,6},
        [{atom,{225,7},type},
         {atom,{225,12},intermediate},
         {integer,{225,25},0}]},
       {tuple,{225,28},[{integer,{225,29},124},{integer,{225,33},2}]},
       {cons,
        {225,36},
        {bin,
         {225,37},
         [{bin_element,
           {225,39},
           {string,{225,39},"intermediate()"},
           default,default}]},
        {nil,{225,57}}},
       {atom,{225,59},none},
       {map,
        {225,64},
        [{map_field_exact,
          {225,75},
          {atom,{225,66},exported},
          {atom,{225,78},false}}]}]},
     {var,{225,88},'Intermediate'}},
    {debug_line,226,116},
    {match,
     {226,5},
     {tuple,
      {226,5},
      [{tuple,
        {226,6},
        [{atom,{226,7},type},
         {atom,{226,12},hidden_nowarn_type},
         {integer,{226,31},0}]},
       {tuple,{226,34},[{integer,{226,35},120},{integer,{226,39},2}]},
       {cons,
        {226,42},
        {bin,
         {226,43},
         [{bin_element,
           {226,45},
           {string,{226,45},"hidden_nowarn_type()"},
           default,default}]},
        {nil,{226,69}}},
       {atom,{226,71},hidden},
       {map,
        {226,78},
        [{map_field_exact,
          {226,89},
          {atom,{226,80},exported},
          {atom,{226,92},false}}]}]},
     {var,{226,102},'HiddenNoWarnType'}},
    {debug_line,227,117},
    {match,
     {227,5},
     {tuple,
      {227,5},
      [{tuple,
        {227,6},
        [{atom,{227,7},type},
         {atom,{227,12},hidden_type},
         {integer,{227,24},0}]},
       {tuple,{227,27},[{integer,{227,28},117},{integer,{227,32},2}]},
       {cons,
        {227,35},
        {bin,
         {227,36},
         [{bin_element,
           {227,38},
           {string,{227,38},"hidden_type()"},
           default,default}]},
        {nil,{227,55}}},
       {atom,{227,57},hidden},
       {map,
        {227,64},
        [{map_field_exact,
          {227,75},
          {atom,{227,66},exported},
          {atom,{227,78},false}}]}]},
     {var,{227,88},'HiddenType'}},
    {debug_line,228,118},
    {match,
     {228,5},
     {tuple,
      {228,5},
      [{tuple,
        {228,6},
        [{atom,{228,7},type},
         {atom,{228,12},my_other_private_type},
         {integer,{228,34},0}]},
       {var,{228,37},'MyOtherPrivateTypeLine'},
       {cons,
        {229,15},
        {bin,
         {229,16},
         [{bin_element,
           {229,18},
           {string,{229,18},"my_other_private_type()"},
           default,default}]},
        {nil,{229,45}}},
       {atom,{229,47},none},
       {map,
        {229,52},
        [{map_field_exact,
          {229,63},
          {atom,{229,54},exported},
          {atom,{229,66},false}}]}]},
     {var,{229,76},'OtherPrivateType'}},
    {debug_line,230,119},
    {match,
     {230,5},
     {tuple,
      {230,5},
      [{tuple,
        {230,6},
        [{atom,{230,7},type},
         {atom,{230,12},my_private_type},
         {integer,{230,28},0}]},
       {var,{230,31},'MyPrivateTypeLine'},
       {cons,
        {231,6},
        {bin,
         {231,7},
         [{bin_element,
           {231,9},
           {string,{231,9},"my_private_type()"},
           default,default}]},
        {nil,{231,30}}},
       {atom,{231,32},none},
       {map,
        {231,37},
        [{map_field_exact,
          {231,48},
          {atom,{231,39},exported},
          {atom,{231,51},false}}]}]},
     {var,{231,61},'MyPrivateType'}},
    {debug_line,232,120},
    {match,
     {232,5},
     {tuple,
      {232,5},
      [{tuple,
        {232,6},
        [{atom,{232,7},type},{atom,{232,12},mymap},{integer,{232,18},0}]},
       {var,{232,21},'MyMapLine'},
       {cons,
        {232,31},
        {bin,
         {232,32},
         [{bin_element,{232,34},{string,{232,34},"mymap()"},default,default}]},
        {nil,{232,45}}},
       {atom,{232,47},none},
       {map,
        {232,52},
        [{map_field_exact,
          {232,63},
          {atom,{232,54},exported},
          {atom,{232,66},false}}]}]},
     {var,{232,76},'MyMap'}},
    {debug_line,233,121},
    {match,
     {233,5},
     {tuple,
      {233,5},
      [{tuple,
        {233,6},
        [{atom,{233,7},type},
         {atom,{233,12},state_enter},
         {integer,{233,24},0}]},
       {var,{233,27},'StateEnterLine'},
       {cons,
        {233,42},
        {bin,
         {233,43},
         [{bin_element,
           {233,45},
           {string,{233,45},"state_enter()"},
           default,default}]},
        {nil,{233,62}}},
       {atom,{233,64},none},
       {map,
        {233,69},
        [{map_field_exact,
          {233,80},
          {atom,{233,71},exported},
          {atom,{233,83},false}}]}]},
     {var,{233,91},'StateEnter'}},
    {debug_line,234,122},
    {match,
     {234,5},
     {tuple,
      {234,5},
      [{tuple,
        {234,6},
        [{atom,{234,7},type},
         {atom,{234,12},callback_mode},
         {integer,{234,26},0}]},
       {var,{234,29},'CallbackModeLine'},
       {cons,
        {234,47},
        {bin,
         {234,48},
         [{bin_element,
           {234,50},
           {string,{234,50},"callback_mode()"},
           default,default}]},
        {nil,{234,69}}},
       {atom,{234,71},none},
       {map,
        {234,76},
        [{map_field_exact,
          {234,87},
          {atom,{234,78},exported},
          {atom,{234,90},false}}]}]},
     {var,{234,100},'CallbackMode'}},
    {debug_line,235,123},
    {match,
     {235,5},
     {tuple,
      {235,5},
      [{tuple,
        {235,6},
        [{atom,{235,7},type},
         {atom,{235,12},callback_mode_result},
         {integer,{235,33},0}]},
       {var,{235,36},'CallbackResultLine'},
       {cons,
        {236,16},
        {bin,
         {236,17},
         [{bin_element,
           {236,19},
           {string,{236,19},"callback_mode_result()"},
           default,default}]},
        {nil,{236,45}}},
       {atom,{236,47},none},
       {map,
        {236,52},
        [{map_field_exact,
          {236,63},
          {atom,{236,54},exported},
          {atom,{236,66},true}}]}]},
     {var,{236,75},'CallbackResult'}},
    {debug_line,237,124},
    {match,
     {237,5},
     {tuple,
      {237,5},
      [{tuple,
        {237,6},
        [{atom,{237,7},type},
         {atom,{237,12},encoding_func},
         {integer,{237,26},0}]},
       {var,{237,29},'_'},
       {cons,
        {237,31},
        {bin,
         {237,32},
         [{bin_element,
           {237,34},
           {string,{237,34},"encoding_func()"},
           default,default}]},
        {nil,{237,53}}},
       {atom,{237,55},none},
       {map,
        {237,60},
        [{map_field_exact,
          {237,71},
          {atom,{237,62},exported},
          {atom,{237,74},false}}]}]},
     {var,{237,84},'EncodingFunc'}},
    {debug_line,238,125},
    {match,
     {238,5},
     {tuple,
      {238,5},
      [{tuple,
        {238,6},
        [{atom,{238,7},type},{atom,{238,12},three},{integer,{238,18},0}]},
       {var,{238,21},'_'},
       {cons,
        {238,23},
        {bin,
         {238,24},
         [{bin_element,{238,26},{string,{238,26},"three()"},default,default}]},
        {nil,{238,37}}},
       {atom,{238,39},none},
       {map,
        {238,44},
        [{map_field_exact,
          {238,55},
          {atom,{238,46},exported},
          {atom,{238,58},false}}]}]},
     {var,{238,68},'Three'}},
    {debug_line,239,126},
    {match,
     {239,5},
     {tuple,
      {239,5},
      [{tuple,
        {239,6},
        [{atom,{239,7},type},{atom,{239,12},two},{integer,{239,16},0}]},
       {var,{239,19},'_'},
       {cons,
        {239,21},
        {bin,
         {239,22},
         [{bin_element,{239,24},{string,{239,24},"two()"},default,default}]},
        {nil,{239,33}}},
       {atom,{239,35},none},
       {map,
        {239,40},
        [{map_field_exact,
          {239,51},
          {atom,{239,42},exported},
          {atom,{239,54},false}}]}]},
     {var,{239,64},'Two'}},
    {debug_line,240,127},
    {match,
     {240,5},
     {tuple,
      {240,5},
      [{tuple,
        {240,6},
        [{atom,{240,7},type},{atom,{240,12},one},{integer,{240,16},0}]},
       {var,{240,19},'_'},
       {cons,
        {240,21},
        {bin,
         {240,22},
         [{bin_element,{240,24},{string,{240,24},"one()"},default,default}]},
        {nil,{240,33}}},
       {atom,{240,35},none},
       {map,
        {240,40},
        [{map_field_exact,
          {240,51},
          {atom,{240,42},exported},
          {atom,{240,54},false}}]}]},
     {var,{240,64},'One'}},
    {debug_line,241,128},
    {match,
     {241,5},
     {tuple,
      {241,5},
      [{tuple,
        {241,6},
        [{atom,{241,7},type},{atom,{241,12},hidden},{integer,{241,19},0}]},
       {var,{241,22},'_'},
       {cons,
        {241,24},
        {bin,
         {241,25},
         [{bin_element,
           {241,27},
           {string,{241,27},"hidden()"},
           default,default}]},
        {nil,{241,39}}},
       {atom,{241,41},hidden},
       {map,
        {241,48},
        [{map_field_exact,
          {241,59},
          {atom,{241,50},exported},
          {atom,{241,62},true}}]}]},
     {var,{241,71},'Hidden'}},
    {debug_line,242,129},
    {match,
     {242,5},
     {tuple,
      {242,5},
      [{tuple,
        {242,6},
        [{atom,{242,7},type},
         {atom,{242,12},hidden_false},
         {integer,{242,25},0}]},
       {var,{242,28},'_'},
       {cons,
        {242,30},
        {bin,
         {242,31},
         [{bin_element,
           {242,33},
           {string,{242,33},"hidden_false()"},
           default,default}]},
        {nil,{242,51}}},
       {atom,{242,53},hidden},
       {map,
        {243,6},
        [{map_field_exact,
          {243,17},
          {atom,{243,8},exported},
          {atom,{243,20},true}},
         {map_field_exact,
          {243,34},
          {atom,{243,26},authors},
          {string,{243,37},"Someone else"}}]}]},
     {var,{243,56},'HiddenFalse'}},
    {debug_line,244,130},
    {match,
     {244,5},
     {tuple,
      {244,5},
      [{tuple,
        {244,6},
        [{atom,{244,7},type},{atom,{244,13},mmaybe},{integer,{244,20},1}]},
       {var,{244,23},'_'},
       {cons,
        {244,25},
        {bin,
         {244,26},
         [{bin_element,
           {244,28},
           {string,{244,28},"mmaybe(X)"},
           default,default}]},
        {nil,{244,41}}},
       {var,{244,44},'MaybeOpaqueDoc'},
       {map,
        {244,60},
        [{map_field_exact,
          {244,70},
          {atom,{244,62},authors},
          {string,{244,73},"Someone else"}},
         {map_field_exact,
          {244,98},
          {atom,{244,89},exported},
          {atom,{244,101},true}}]}]},
     {var,{244,110},'MMaybe'}},
    {debug_line,245,131},
    {match,
     {245,5},
     {tuple,
      {245,5},
      [{tuple,
        {245,6},
        [{atom,{245,7},type},{atom,{245,13},unnamed},{integer,{245,21},0}]},
       {tuple,{245,24},[{integer,{245,25},30},{integer,{245,28},2}]},
       {cons,
        {245,31},
        {bin,
         {245,32},
         [{bin_element,
           {245,34},
           {string,{245,34},"unnamed()"},
           default,default}]},
        {nil,{245,47}}},
       {var,{245,50},'OpaqueDoc'},
       {map,
        {246,6},
        [{map_field_exact,
          {246,14},
          {atom,{246,8},equiv},
          {bin,
           {246,17},
           [{bin_element,
             {246,19},
             {string,{246,19},"non_neg_integer()"},
             default,default}]}},
         {map_field_exact,
          {246,51},
          {atom,{246,42},exported},
          {atom,{246,54},true}}]}]},
     {var,{246,63},'Unnamed'}},
    {debug_line,247,132},
    {match,
     {247,5},
     {tuple,
      {247,5},
      [{tuple,
        {247,6},
        [{atom,{247,7},type},{atom,{247,13},param},{integer,{247,19},1}]},
       {var,{247,22},'_'},
       {cons,
        {247,24},
        {bin,
         {247,25},
         [{bin_element,
           {247,27},
           {string,{247,27},"param(X)"},
           default,default}]},
        {nil,{247,39}}},
       {var,{247,42},'GenericsDoc'},
       {map,
        {248,6},
        [{map_field_exact,
          {248,14},
          {atom,{248,8},equiv},
          {bin,
           {248,17},
           [{bin_element,
             {248,19},
             {string,{248,19},"madeup()"},
             default,default}]}},
         {map_field_exact,
          {248,42},
          {atom,{248,33},exported},
          {atom,{248,45},true}}]}]},
     {var,{248,54},'Param'}},
    {debug_line,249,133},
    {match,
     {249,5},
     {tuple,
      {249,5},
      [{tuple,
        {249,6},
        [{atom,{249,7},type},
         {atom,{249,13},natural_number},
         {integer,{249,28},0}]},
       {var,{249,31},'_'},
       {cons,
        {249,33},
        {bin,
         {249,34},
         [{bin_element,
           {249,36},
           {string,{249,36},"natural_number()"},
           default,default}]},
        {nil,{249,56}}},
       {atom,{249,59},none},
       {map,
        {249,65},
        [{map_field_exact,
          {249,73},
          {atom,{249,67},since},
          {bin,
           {249,76},
           [{bin_element,{249,77},{string,{249,77},"1.0"},default,[utf8]}]}},
         {map_field_exact,
          {249,90},
          {atom,{249,84},equiv},
          {bin,
           {249,93},
           [{bin_element,
             {249,95},
             {string,{249,95},"non_neg_integer/0"},
             default,default}]}},
         {map_field_exact,
          {249,127},
          {atom,{249,118},exported},
          {atom,{249,130},true}}]}]},
     {var,{249,139},'NatNumber'}},
    {debug_line,250,134},
    {match,
     {250,5},
     {tuple,
      {250,5},
      [{tuple,
        {250,6},
        [{atom,{250,7},type},{atom,{250,13},name},{integer,{250,18},1}]},
       {var,{250,21},'_'},
       {cons,
        {250,23},
        {bin,
         {250,24},
         [{bin_element,{250,26},{string,{250,26},"name(_)"},default,default}]},
        {nil,{250,37}}},
       {var,{250,40},'TypeDoc'},
       {map,
        {250,49},
        [{map_field_exact,
          {250,60},
          {atom,{250,51},exported},
          {atom,{250,63},true}}]}]},
     {var,{250,72},'Name'}},
    {debug_line,251,135},
    {match,
     {251,5},
     {tuple,
      {251,5},
      [{tuple,
        {251,6},
        [{atom,{251,7},type},
         {atom,{251,13},hidden_included_type},
         {integer,{251,35},0}]},
       {var,{251,39},'_'},
       {var,{251,42},'_'},
       {atom,{251,45},hidden},
       {map,
        {251,53},
        [{map_field_exact,
          {251,64},
          {atom,{251,55},exported},
          {atom,{251,67},false}}]}]},
     {var,{251,78},'HiddenIncludedType'}},
    {debug_line,253,136},
    {match,
     {253,5},
     {tuple,
      {253,5},
      [{tuple,
        {253,6},
        [{atom,{253,7},function},
         {atom,{253,16},uses_public},
         {integer,{253,28},0}]},
       {tuple,{253,31},[{integer,{253,32},128},{integer,{253,36},1}]},
       {cons,
        {253,39},
        {bin,
         {253,40},
         [{bin_element,
           {253,42},
           {string,{253,42},"uses_public()"},
           default,default}]},
        {nil,{253,59}}},
       {atom,{253,61},none},
       {map,{253,66},[]}]},
     {var,{253,73},'UsesPublic'}},
    {debug_line,254,137},
    {match,
     {254,5},
     {tuple,
      {254,5},
      [{tuple,
        {254,6},
        [{atom,{254,7},function},
         {atom,{254,16},ignore_type_from_hidden_fun},
         {integer,{254,44},0}]},
       {var,{254,47},'_'},
       {cons,
        {254,49},
        {bin,
         {254,50},
         [{bin_element,
           {254,52},
           {string,{254,52},"ignore_type_from_hidden_fun()"},
           default,default}]},
        {nil,{254,85}}},
       {atom,{254,87},hidden},
       {map,{254,94},[]}]},
     {var,{254,101},'Ignore'}},
    {debug_line,255,138},
    {match,
     {255,5},
     {tuple,
      {255,5},
      [{tuple,
        {255,6},
        [{atom,{255,7},function},
         {atom,{255,16},map_fun},
         {integer,{255,24},0}]},
       {var,{255,27},'_'},
       {cons,
        {255,29},
        {bin,
         {255,30},
         [{bin_element,
           {255,32},
           {string,{255,32},"map_fun()"},
           default,default}]},
        {nil,{255,45}}},
       {atom,{255,47},none},
       {map,{255,52},[]}]},
     {var,{255,59},'MapFun'}},
    {debug_line,256,139},
    {match,
     {256,5},
     {tuple,
      {256,5},
      [{tuple,
        {256,6},
        [{atom,{256,7},function},
         {atom,{256,16},private_encoding_func},
         {integer,{256,38},2}]},
       {var,{256,41},'_'},
       {cons,
        {256,43},
        {bin,
         {256,44},
         [{bin_element,
           {256,46},
           {string,{256,46},"private_encoding_func(Data, Options)"},
           default,default}]},
        {nil,{256,86}}},
       {atom,{256,88},none},
       {map,{256,93},[]}]},
     {var,{256,100},'PrivateEncoding'}},
    {debug_line,257,140},
    {match,
     {257,5},
     {tuple,
      {257,5},
      [{tuple,
        {257,6},
        [{atom,{257,7},function},{atom,{257,16},foo},{integer,{257,20},0}]},
       {var,{257,23},'_'},
       {cons,
        {257,25},
        {bin,
         {257,26},
         [{bin_element,{257,28},{string,{257,28},"foo()"},default,default}]},
        {nil,{257,37}}},
       {atom,{257,39},none},
       {map,{257,44},[]}]},
     {var,{257,51},'Foo'}},
    {debug_line,259,141},
    {block,
     {259,6},
     [{call,
       {259,6},
       {'fun',
        {259,6},
        {clauses,
         [{clause,
           {259,6},
           [],[],
           [{match,{259,6},{var,{259,6},'X__X'},{integer,{259,18},103}},
            {'case',
             {259,18},
             {call,
              {259,23},
              {remote,{259,31},{atom,{259,23},erl_anno},{atom,{259,32},line}},
              [{var,{259,37},'MyOtherPrivateTypeLine'}]},
             [{clause,
               {259,59},
               [{var,{259,59},'X__X'}],
               [],
               [{atom,{259,59},ok}]},
              {clause,
               {259,59},
               [{var,{259,59},'X__V'}],
               [],
               [{call,
                 {259,59},
                 {remote,
                  {259,59},
                  {atom,{259,59},erlang},
                  {atom,{259,59},error}},
                 [{block,0,
                   [{tuple,
                     {259,59},
                     [{atom,{259,59},assertEqual},
                      {cons,
                       {259,59},
                       {tuple,
                        {259,59},
                        [{atom,{259,59},module},
                         {atom,{259,59},beam_doc_SUITE}]},
                       {cons,
                        {259,59},
                        {tuple,
                         {259,59},
                         [{atom,{259,59},line},{integer,{259,59},259}]},
                        {cons,
                         {259,59},
                         {tuple,
                          {259,59},
                          [{atom,{259,59},expression},
                           {string,
                            {259,59},
                            "erl_anno : line ( MyOtherPrivateTypeLine )"}]},
                         {cons,
                          {259,59},
                          {tuple,
                           {259,59},
                           [{atom,{259,59},expected},{var,{259,59},'X__X'}]},
                          {cons,
                           {259,59},
                           {tuple,
                            {259,59},
                            [{atom,{259,59},value},{var,{259,59},'X__V'}]},
                           {nil,{259,59}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,260,142},
    {block,
     {260,6},
     [{call,
       {260,6},
       {'fun',
        {260,6},
        {clauses,
         [{clause,
           {260,6},
           [],[],
           [{match,{260,6},{var,{260,6},'X__X'},{integer,{260,18},102}},
            {'case',
             {260,18},
             {call,
              {260,23},
              {remote,{260,31},{atom,{260,23},erl_anno},{atom,{260,32},line}},
              [{var,{260,37},'MyPrivateTypeLine'}]},
             [{clause,
               {260,54},
               [{var,{260,54},'X__X'}],
               [],
               [{atom,{260,54},ok}]},
              {clause,
               {260,54},
               [{var,{260,54},'X__V'}],
               [],
               [{call,
                 {260,54},
                 {remote,
                  {260,54},
                  {atom,{260,54},erlang},
                  {atom,{260,54},error}},
                 [{block,0,
                   [{tuple,
                     {260,54},
                     [{atom,{260,54},assertEqual},
                      {cons,
                       {260,54},
                       {tuple,
                        {260,54},
                        [{atom,{260,54},module},
                         {atom,{260,54},beam_doc_SUITE}]},
                       {cons,
                        {260,54},
                        {tuple,
                         {260,54},
                         [{atom,{260,54},line},{integer,{260,54},260}]},
                        {cons,
                         {260,54},
                         {tuple,
                          {260,54},
                          [{atom,{260,54},expression},
                           {string,
                            {260,54},
                            "erl_anno : line ( MyPrivateTypeLine )"}]},
                         {cons,
                          {260,54},
                          {tuple,
                           {260,54},
                           [{atom,{260,54},expected},{var,{260,54},'X__X'}]},
                          {cons,
                           {260,54},
                           {tuple,
                            {260,54},
                            [{atom,{260,54},value},{var,{260,54},'X__V'}]},
                           {nil,{260,54}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,261,143},
    {block,
     {261,6},
     [{call,
       {261,6},
       {'fun',
        {261,6},
        {clauses,
         [{clause,
           {261,6},
           [],[],
           [{match,{261,6},{var,{261,6},'X__X'},{integer,{261,18},99}},
            {'case',
             {261,18},
             {call,
              {261,22},
              {remote,{261,30},{atom,{261,22},erl_anno},{atom,{261,31},line}},
              [{var,{261,36},'MyMapLine'}]},
             [{clause,
               {261,45},
               [{var,{261,45},'X__X'}],
               [],
               [{atom,{261,45},ok}]},
              {clause,
               {261,45},
               [{var,{261,45},'X__V'}],
               [],
               [{call,
                 {261,45},
                 {remote,
                  {261,45},
                  {atom,{261,45},erlang},
                  {atom,{261,45},error}},
                 [{block,0,
                   [{tuple,
                     {261,45},
                     [{atom,{261,45},assertEqual},
                      {cons,
                       {261,45},
                       {tuple,
                        {261,45},
                        [{atom,{261,45},module},
                         {atom,{261,45},beam_doc_SUITE}]},
                       {cons,
                        {261,45},
                        {tuple,
                         {261,45},
                         [{atom,{261,45},line},{integer,{261,45},261}]},
                        {cons,
                         {261,45},
                         {tuple,
                          {261,45},
                          [{atom,{261,45},expression},
                           {string,{261,45},"erl_anno : line ( MyMapLine )"}]},
                         {cons,
                          {261,45},
                          {tuple,
                           {261,45},
                           [{atom,{261,45},expected},{var,{261,45},'X__X'}]},
                          {cons,
                           {261,45},
                           {tuple,
                            {261,45},
                            [{atom,{261,45},value},{var,{261,45},'X__V'}]},
                           {nil,{261,45}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,262,144},
    {block,
     {262,6},
     [{call,
       {262,6},
       {'fun',
        {262,6},
        {clauses,
         [{clause,
           {262,6},
           [],[],
           [{match,{262,6},{var,{262,6},'X__X'},{integer,{262,18},96}},
            {'case',
             {262,18},
             {call,
              {262,22},
              {remote,{262,30},{atom,{262,22},erl_anno},{atom,{262,31},line}},
              [{var,{262,36},'StateEnterLine'}]},
             [{clause,
               {262,50},
               [{var,{262,50},'X__X'}],
               [],
               [{atom,{262,50},ok}]},
              {clause,
               {262,50},
               [{var,{262,50},'X__V'}],
               [],
               [{call,
                 {262,50},
                 {remote,
                  {262,50},
                  {atom,{262,50},erlang},
                  {atom,{262,50},error}},
                 [{block,0,
                   [{tuple,
                     {262,50},
                     [{atom,{262,50},assertEqual},
                      {cons,
                       {262,50},
                       {tuple,
                        {262,50},
                        [{atom,{262,50},module},
                         {atom,{262,50},beam_doc_SUITE}]},
                       {cons,
                        {262,50},
                        {tuple,
                         {262,50},
                         [{atom,{262,50},line},{integer,{262,50},262}]},
                        {cons,
                         {262,50},
                         {tuple,
                          {262,50},
                          [{atom,{262,50},expression},
                           {string,
                            {262,50},
                            "erl_anno : line ( StateEnterLine )"}]},
                         {cons,
                          {262,50},
                          {tuple,
                           {262,50},
                           [{atom,{262,50},expected},{var,{262,50},'X__X'}]},
                          {cons,
                           {262,50},
                           {tuple,
                            {262,50},
                            [{atom,{262,50},value},{var,{262,50},'X__V'}]},
                           {nil,{262,50}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,263,145},
    {block,
     {263,6},
     [{call,
       {263,6},
       {'fun',
        {263,6},
        {clauses,
         [{clause,
           {263,6},
           [],[],
           [{match,{263,6},{var,{263,6},'X__X'},{integer,{263,18},95}},
            {'case',
             {263,18},
             {call,
              {263,22},
              {remote,{263,30},{atom,{263,22},erl_anno},{atom,{263,31},line}},
              [{var,{263,36},'CallbackModeLine'}]},
             [{clause,
               {263,52},
               [{var,{263,52},'X__X'}],
               [],
               [{atom,{263,52},ok}]},
              {clause,
               {263,52},
               [{var,{263,52},'X__V'}],
               [],
               [{call,
                 {263,52},
                 {remote,
                  {263,52},
                  {atom,{263,52},erlang},
                  {atom,{263,52},error}},
                 [{block,0,
                   [{tuple,
                     {263,52},
                     [{atom,{263,52},assertEqual},
                      {cons,
                       {263,52},
                       {tuple,
                        {263,52},
                        [{atom,{263,52},module},
                         {atom,{263,52},beam_doc_SUITE}]},
                       {cons,
                        {263,52},
                        {tuple,
                         {263,52},
                         [{atom,{263,52},line},{integer,{263,52},263}]},
                        {cons,
                         {263,52},
                         {tuple,
                          {263,52},
                          [{atom,{263,52},expression},
                           {string,
                            {263,52},
                            "erl_anno : line ( CallbackModeLine )"}]},
                         {cons,
                          {263,52},
                          {tuple,
                           {263,52},
                           [{atom,{263,52},expected},{var,{263,52},'X__X'}]},
                          {cons,
                           {263,52},
                           {tuple,
                            {263,52},
                            [{atom,{263,52},value},{var,{263,52},'X__V'}]},
                           {nil,{263,52}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,264,146},
    {block,
     {264,6},
     [{call,
       {264,6},
       {'fun',
        {264,6},
        {clauses,
         [{clause,
           {264,6},
           [],[],
           [{match,{264,6},{var,{264,6},'X__X'},{integer,{264,18},93}},
            {'case',
             {264,18},
             {call,
              {264,22},
              {remote,{264,30},{atom,{264,22},erl_anno},{atom,{264,31},line}},
              [{var,{264,36},'CallbackResultLine'}]},
             [{clause,
               {264,54},
               [{var,{264,54},'X__X'}],
               [],
               [{atom,{264,54},ok}]},
              {clause,
               {264,54},
               [{var,{264,54},'X__V'}],
               [],
               [{call,
                 {264,54},
                 {remote,
                  {264,54},
                  {atom,{264,54},erlang},
                  {atom,{264,54},error}},
                 [{block,0,
                   [{tuple,
                     {264,54},
                     [{atom,{264,54},assertEqual},
                      {cons,
                       {264,54},
                       {tuple,
                        {264,54},
                        [{atom,{264,54},module},
                         {atom,{264,54},beam_doc_SUITE}]},
                       {cons,
                        {264,54},
                        {tuple,
                         {264,54},
                         [{atom,{264,54},line},{integer,{264,54},264}]},
                        {cons,
                         {264,54},
                         {tuple,
                          {264,54},
                          [{atom,{264,54},expression},
                           {string,
                            {264,54},
                            "erl_anno : line ( CallbackResultLine )"}]},
                         {cons,
                          {264,54},
                          {tuple,
                           {264,54},
                           [{atom,{264,54},expected},{var,{264,54},'X__X'}]},
                          {cons,
                           {264,54},
                           {tuple,
                            {264,54},
                            [{atom,{264,54},value},{var,{264,54},'X__V'}]},
                           {nil,{264,54}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,266,147},
    {match,
     {266,5},
     {cons,
      {266,5},
      {tuple,{266,6},[{var,{266,7},'File'},{var,{266,13},'Ws'}]},
      {cons,
       {266,18},
       {tuple,{266,18},[{var,{266,19},'HrlFile'},{var,{266,28},'HrlWs'}]},
       {nil,{266,34}}}},
     {var,{266,38},'Warnings'}},
    {debug_line,267,148},
    {block,
     {267,6},
     [{call,
       {267,6},
       {'fun',
        {267,6},
        {clauses,
         [{clause,
           {267,6},
           [],[],
           [{match,
             {267,6},
             {var,{267,6},'X__X'},
             {string,{267,18},"types_and_opaques.erl"}},
            {'case',
             {267,18},
             {call,
              {267,43},
              {remote,
               {267,51},
               {atom,{267,43},filename},
               {atom,{267,52},basename}},
              [{var,{267,61},'File'}]},
             [{clause,
               {267,65},
               [{var,{267,65},'X__X'}],
               [],
               [{atom,{267,65},ok}]},
              {clause,
               {267,65},
               [{var,{267,65},'X__V'}],
               [],
               [{call,
                 {267,65},
                 {remote,
                  {267,65},
                  {atom,{267,65},erlang},
                  {atom,{267,65},error}},
                 [{block,0,
                   [{tuple,
                     {267,65},
                     [{atom,{267,65},assertEqual},
                      {cons,
                       {267,65},
                       {tuple,
                        {267,65},
                        [{atom,{267,65},module},
                         {atom,{267,65},beam_doc_SUITE}]},
                       {cons,
                        {267,65},
                        {tuple,
                         {267,65},
                         [{atom,{267,65},line},{integer,{267,65},267}]},
                        {cons,
                         {267,65},
                         {tuple,
                          {267,65},
                          [{atom,{267,65},expression},
                           {string,{267,65},"filename : basename ( File )"}]},
                         {cons,
                          {267,65},
                          {tuple,
                           {267,65},
                           [{atom,{267,65},expected},{var,{267,65},'X__X'}]},
                          {cons,
                           {267,65},
                           {tuple,
                            {267,65},
                            [{atom,{267,65},value},{var,{267,65},'X__V'}]},
                           {nil,{267,65}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,268,149},
    {block,
     {268,6},
     [{call,
       {268,6},
       {'fun',
        {268,6},
        {clauses,
         [{clause,
           {268,6},
           [],[],
           [{match,
             {268,6},
             {var,{268,6},'X__X'},
             {tuple,
              {268,18},
              [{tuple,{268,19},[{integer,{268,20},117},{integer,{268,24},2}]},
               {atom,{268,28},beam_doc},
               {tuple,
                {269,19},
                [{atom,{269,20},hidden_type_used_in_exported_fun},
                 {tuple,
                  {269,53},
                  [{atom,{269,54},hidden_type},{integer,{269,66},0}]}]}]}},
            {debug_line,269,150},
            {'case',
             {269,69},
             {call,
              {269,72},
              {remote,{269,77},{atom,{269,72},lists},{atom,{269,78},nth}},
              [{integer,{269,82},4},{var,{269,85},'Ws'}]},
             [{clause,
               {269,87},
               [{var,{269,87},'X__X'}],
               [],
               [{atom,{269,87},ok}]},
              {clause,
               {269,87},
               [{var,{269,87},'X__V'}],
               [],
               [{call,
                 {269,87},
                 {remote,
                  {269,87},
                  {atom,{269,87},erlang},
                  {atom,{269,87},error}},
                 [{block,0,
                   [{tuple,
                     {269,87},
                     [{atom,{269,87},assertEqual},
                      {cons,
                       {269,87},
                       {tuple,
                        {269,87},
                        [{atom,{269,87},module},
                         {atom,{269,87},beam_doc_SUITE}]},
                       {cons,
                        {269,87},
                        {tuple,
                         {269,87},
                         [{atom,{269,87},line},{integer,{269,87},269}]},
                        {cons,
                         {269,87},
                         {tuple,
                          {269,87},
                          [{atom,{269,87},expression},
                           {string,{269,87},"lists : nth ( 4 , Ws )"}]},
                         {cons,
                          {269,87},
                          {tuple,
                           {269,87},
                           [{atom,{269,87},expected},{var,{269,87},'X__X'}]},
                          {cons,
                           {269,87},
                           {tuple,
                            {269,87},
                            [{atom,{269,87},value},{var,{269,87},'X__V'}]},
                           {nil,{269,87}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,271,151},
    {block,
     {271,6},
     [{call,
       {271,6},
       {'fun',
        {271,6},
        {clauses,
         [{clause,
           {271,6},
           [],[],
           [{match,
             {271,6},
             {var,{271,6},'X__X'},
             {string,{271,18},"types_and_opaques.hrl"}},
            {'case',
             {271,18},
             {call,
              {271,43},
              {remote,
               {271,51},
               {atom,{271,43},filename},
               {atom,{271,52},basename}},
              [{var,{271,61},'HrlFile'}]},
             [{clause,
               {271,68},
               [{var,{271,68},'X__X'}],
               [],
               [{atom,{271,68},ok}]},
              {clause,
               {271,68},
               [{var,{271,68},'X__V'}],
               [],
               [{call,
                 {271,68},
                 {remote,
                  {271,68},
                  {atom,{271,68},erlang},
                  {atom,{271,68},error}},
                 [{block,0,
                   [{tuple,
                     {271,68},
                     [{atom,{271,68},assertEqual},
                      {cons,
                       {271,68},
                       {tuple,
                        {271,68},
                        [{atom,{271,68},module},
                         {atom,{271,68},beam_doc_SUITE}]},
                       {cons,
                        {271,68},
                        {tuple,
                         {271,68},
                         [{atom,{271,68},line},{integer,{271,68},271}]},
                        {cons,
                         {271,68},
                         {tuple,
                          {271,68},
                          [{atom,{271,68},expression},
                           {string,
                            {271,68},
                            "filename : basename ( HrlFile )"}]},
                         {cons,
                          {271,68},
                          {tuple,
                           {271,68},
                           [{atom,{271,68},expected},{var,{271,68},'X__X'}]},
                          {cons,
                           {271,68},
                           {tuple,
                            {271,68},
                            [{atom,{271,68},value},{var,{271,68},'X__V'}]},
                           {nil,{271,68}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,272,152},
    {block,
     {272,6},
     [{call,
       {272,6},
       {'fun',
        {272,6},
        {clauses,
         [{clause,
           {272,6},
           [],[],
           [{match,
             {272,6},
             {var,{272,6},'X__X'},
             {tuple,
              {272,18},
              [{tuple,{272,19},[{integer,{272,20},1},{integer,{272,22},2}]},
               {atom,{272,26},beam_doc},
               {tuple,
                {273,19},
                [{atom,{273,20},hidden_type_used_in_exported_fun},
                 {tuple,
                  {273,53},
                  [{atom,{273,54},hidden_included_type},
                   {integer,{273,75},0}]}]}]}},
            {debug_line,273,153},
            {'case',
             {273,78},
             {call,
              {273,81},
              {remote,{273,86},{atom,{273,81},lists},{atom,{273,87},nth}},
              [{integer,{273,91},1},{var,{273,94},'HrlWs'}]},
             [{clause,
               {273,99},
               [{var,{273,99},'X__X'}],
               [],
               [{atom,{273,99},ok}]},
              {clause,
               {273,99},
               [{var,{273,99},'X__V'}],
               [],
               [{call,
                 {273,99},
                 {remote,
                  {273,99},
                  {atom,{273,99},erlang},
                  {atom,{273,99},error}},
                 [{block,0,
                   [{tuple,
                     {273,99},
                     [{atom,{273,99},assertEqual},
                      {cons,
                       {273,99},
                       {tuple,
                        {273,99},
                        [{atom,{273,99},module},
                         {atom,{273,99},beam_doc_SUITE}]},
                       {cons,
                        {273,99},
                        {tuple,
                         {273,99},
                         [{atom,{273,99},line},{integer,{273,99},273}]},
                        {cons,
                         {273,99},
                         {tuple,
                          {273,99},
                          [{atom,{273,99},expression},
                           {string,{273,99},"lists : nth ( 1 , HrlWs )"}]},
                         {cons,
                          {273,99},
                          {tuple,
                           {273,99},
                           [{atom,{273,99},expected},{var,{273,99},'X__X'}]},
                          {cons,
                           {273,99},
                           {tuple,
                            {273,99},
                            [{atom,{273,99},value},{var,{273,99},'X__V'}]},
                           {nil,{273,99}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,275,154},
    {match,
     {275,5},
     {tuple,
      {275,5},
      [{atom,{275,6},ok},
       {var,{275,10},'ModName'},
       {cons,{275,19},{var,{275,20},'_'},{nil,{275,21}}}]},
     {call,
      {276,9},
      {atom,{276,9},default_compile_file},
      [{var,{276,30},'Conf'},
       {var,{276,36},'ModuleName'},
       {block,0,
        [{debug_line,276,155},
         {cons,
          {276,48},
          {atom,{276,49},return_warnings},
          {cons,
           {276,66},
           {atom,{276,66},nowarn_hidden_doc},
           {cons,
            {276,85},
            {atom,{276,85},nowarn_unused_type},
            {nil,{276,103}}}}}]}]}},
    {debug_line,278,156},
    {atom,{278,5},ok}]}]}.
{function,
 {280,1},
 callback,1,
 [{clause,
   {280,1},
   [{var,{280,1},'_'}],
   [[{call,
      {280,1},
      {remote,{280,1},{atom,{280,1},fake},{atom,{280,1},is_beam_bif_info}},
      []}]],
   [{debug_line,280,157},{atom,{280,1},ignore}]},
  {clause,
   {280,1},
   [{var,{280,10},'Conf'}],
   [],
   [{debug_line,281,158},
    {match,
     {281,5},
     {var,{281,5},'ModuleName'},
     {call,
      {281,19},
      {remote,{281,19},{atom,{281,19},erlang},{atom,{281,19},atom_to_list}},
      [{atom,{281,19},callback}]}},
    {debug_line,282,159},
    {match,
     {282,5},
     {tuple,
      {282,5},
      [{atom,{282,6},ok},
       {var,{282,10},'ModName'},
       {cons,
        {282,19},
        {tuple,{282,20},[{var,{282,21},'File'},{var,{282,26},'Warnings'}]},
        {nil,{282,35}}}]},
     {call,
      {283,9},
      {atom,{283,9},default_compile_file},
      [{var,{283,30},'Conf'},
       {var,{283,36},'ModuleName'},
       {block,0,
        [{debug_line,283,160},
         {cons,
          {283,48},
          {atom,{283,49},return_warnings},
          {cons,{283,66},{atom,{283,66},report},{nil,{283,72}}}}]}]}},
    {debug_line,284,161},
    {match,
     {284,5},
     {var,{284,5},'Doc'},
     {map,
      {284,11},
      [{map_field_assoc,
        {284,22},
        {bin,
         {284,13},
         [{bin_element,{284,15},{string,{284,15},"en"},default,default}]},
        {bin,
         {284,25},
         [{bin_element,
           {284,27},
           {string,{284,27},"Callback fn that always returns ok."},
           default,default}]}}]}},
    {debug_line,285,162},
    {match,
     {285,5},
     {var,{285,5},'ImpCallback'},
     {map,
      {285,19},
      [{map_field_assoc,
        {285,30},
        {bin,
         {285,21},
         [{bin_element,{285,23},{string,{285,23},"en"},default,default}]},
        {bin,
         {285,33},
         [{bin_element,
           {285,35},
           {string,{285,35},"This is a test"},
           default,default}]}}]}},
    {debug_line,286,163},
    {match,
     {286,5},
     {var,{286,5},'FunctionDoc'},
     {map,
      {286,19},
      [{map_field_assoc,
        {286,30},
        {bin,
         {286,21},
         [{bin_element,{286,23},{string,{286,23},"en"},default,default}]},
        {bin,
         {286,33},
         [{bin_element,
           {286,35},
           {string,{286,35},"all_ok()\n\nCalls all_ok/0"},
           default,default}]}}]}},
    {debug_line,287,164},
    {match,
     {287,5},
     {var,{287,5},'ChangeOrder'},
     {map,
      {287,19},
      [{map_field_assoc,
        {287,30},
        {bin,
         {287,21},
         [{bin_element,{287,23},{string,{287,23},"en"},default,default}]},
        {bin,
         {287,33},
         [{bin_element,
           {287,35},
           {string,{287,35},"Test changing order"},
           default,default}]}}]}},
    {debug_line,288,165},
    {match,
     {288,5},
     {tuple,
      {288,5},
      [{atom,{288,6},ok},
       {tuple,
        {288,10},
        [{atom,{288,11},docs_v1},
         {var,{288,20},'_'},
         {var,{288,22},'_'},
         {var,{288,25},'_'},
         {atom,{288,28},none},
         {var,{288,34},'_'},
         {cons,
          {289,11},
          {tuple,
           {289,12},
           [{tuple,
             {289,13},
             [{atom,{289,14},callback},
              {atom,{289,23},nowarn},
              {integer,{289,30},1}]},
            {tuple,{289,33},[{integer,{289,34},39},{integer,{289,37},2}]},
            {cons,
             {289,40},
             {bin,
              {289,41},
              [{bin_element,
                {289,43},
                {string,{289,43},"nowarn(Arg)"},
                default,default}]},
             {nil,{289,58}}},
            {atom,{289,60},hidden},
            {map,
             {289,67},
             [{map_field_exact,
               {289,81},
               {atom,{289,69},source_anno},
               {tuple,
                {289,84},
                [{integer,{289,85},41},{integer,{289,89},2}]}}]}]},
          {cons,
           {290,12},
           {tuple,
            {290,12},
            [{tuple,
              {290,13},
              [{atom,{290,14},callback},
               {atom,{290,23},warn},
               {integer,{290,28},0}]},
             {tuple,{290,31},[{integer,{290,32},36},{integer,{290,35},2}]},
             {cons,
              {290,38},
              {bin,
               {290,39},
               [{bin_element,
                 {290,41},
                 {string,{290,41},"warn()"},
                 default,default}]},
              {nil,{290,51}}},
             {atom,{290,53},hidden},
             {map,{290,60},[]}]},
           {cons,
            {291,12},
            {tuple,
             {291,12},
             [{tuple,
               {291,13},
               [{atom,{291,14},callback},
                {atom,{291,23},bounded},
                {integer,{291,31},1}]},
              {var,{291,34},'_'},
              {cons,
               {291,36},
               {bin,
                {291,37},
                [{bin_element,
                  {291,39},
                  {string,{291,39},"bounded(X)"},
                  default,default}]},
               {nil,{291,53}}},
              {atom,{291,55},none},
              {map,{291,60},[]}]},
            {cons,
             {292,12},
             {tuple,
              {292,12},
              [{tuple,
                {292,13},
                [{atom,{292,14},callback},
                 {atom,{292,23},multi},
                 {integer,{292,29},1}]},
               {var,{292,32},'_'},
               {cons,
                {292,34},
                {bin,
                 {292,35},
                 [{bin_element,
                   {292,37},
                   {string,{292,37},"multi(Argument)"},
                   default,default}]},
                {nil,{292,56}}},
               {map,
                {293,13},
                [{map_field_exact,
                  {293,25},
                  {bin,
                   {293,16},
                   [{bin_element,
                     {293,18},
                     {string,{293,18},"en"},
                     default,default}]},
                  {bin,
                   {293,28},
                   [{bin_element,
                     {293,30},
                     {string,
                      {293,30},
                      "A multiclause callback with slogan docs"},
                     default,default}]}}]},
               {map,{293,76},[]}]},
             {cons,
              {294,12},
              {tuple,
               {294,12},
               [{tuple,
                 {294,13},
                 [{atom,{294,14},callback},
                  {atom,{294,23},multi_no_slogan},
                  {integer,{294,39},1}]},
                {var,{294,42},'_'},
                {cons,
                 {294,44},
                 {bin,
                  {294,45},
                  [{bin_element,
                    {294,47},
                    {string,{294,47},"multi_no_slogan/1"},
                    default,default}]},
                 {nil,{294,68}}},
                {atom,{294,70},none},
                {map,{294,75},[]}]},
              {cons,
               {295,12},
               {tuple,
                {295,12},
                [{tuple,
                  {295,13},
                  [{atom,{295,14},callback},
                   {atom,{295,23},ann},
                   {integer,{295,27},1}]},
                 {var,{295,30},'_'},
                 {cons,
                  {295,32},
                  {bin,
                   {295,33},
                   [{bin_element,
                     {295,35},
                     {string,{295,35},"ann(X)"},
                     default,default}]},
                  {nil,{295,45}}},
                 {atom,{295,47},none},
                 {map,{295,52},[]}]},
               {cons,
                {296,12},
                {tuple,
                 {296,12},
                 [{tuple,
                   {296,13},
                   [{atom,{296,14},callback},
                    {atom,{296,23},param},
                    {integer,{296,29},1}]},
                  {var,{296,32},'_'},
                  {cons,
                   {296,34},
                   {bin,
                    {296,35},
                    [{bin_element,
                      {296,37},
                      {string,{296,37},"param(X)"},
                      default,default}]},
                   {nil,{296,49}}},
                  {atom,{296,51},none},
                  {map,{296,56},[]}]},
                {cons,
                 {297,12},
                 {tuple,
                  {297,12},
                  [{tuple,
                    {297,13},
                    [{atom,{297,14},callback},
                     {atom,{297,24},change_order},
                     {integer,{297,37},0}]},
                   {var,{297,40},'_'},
                   {cons,
                    {297,42},
                    {bin,
                     {297,43},
                     [{bin_element,
                       {297,45},
                       {string,{297,45},"change_order()"},
                       default,default}]},
                    {nil,{297,63}}},
                   {var,{297,66},'ChangeOrder'},
                   {map,
                    {298,13},
                    [{map_field_exact,
                      {298,21},
                      {atom,{298,15},equiv},
                      {bin,
                       {298,24},
                       [{bin_element,
                         {298,26},
                         {string,{298,26},"ok()"},
                         default,default}]}}]}]},
                 {cons,
                  {299,12},
                  {tuple,
                   {299,12},
                   [{tuple,
                     {299,13},
                     [{atom,{299,14},callback},
                      {atom,{299,24},all_ok},
                      {integer,{299,31},0}]},
                    {var,{299,34},'_'},
                    {cons,
                     {299,36},
                     {bin,
                      {299,37},
                      [{bin_element,
                        {299,39},
                        {string,{299,39},"all_ok()"},
                        default,default}]},
                     {nil,{299,51}}},
                    {var,{299,54},'Doc'},
                    {map,{299,59},[]}]},
                  {cons,
                   {300,12},
                   {tuple,
                    {300,12},
                    [{tuple,
                      {300,13},
                      [{atom,{300,14},function},
                       {atom,{300,24},main2},
                       {integer,{300,30},0}]},
                     {var,{300,33},'_'},
                     {cons,
                      {300,35},
                      {bin,
                       {300,36},
                       [{bin_element,
                         {300,38},
                         {string,{300,38},"main2()"},
                         default,default}]},
                      {nil,{300,49}}},
                     {map,
                      {300,52},
                      [{map_field_exact,
                        {300,63},
                        {bin,
                         {300,54},
                         [{bin_element,
                           {300,56},
                           {string,{300,56},"en"},
                           default,default}]},
                        {bin,
                         {300,66},
                         [{bin_element,
                           {300,68},
                           {string,{300,68},"Second main"},
                           default,default}]}}]},
                     {map,
                      {301,13},
                      [{map_field_exact,
                        {301,21},
                        {atom,{301,15},equiv},
                        {bin,
                         {301,24},
                         [{bin_element,
                           {301,26},
                           {string,{301,26},"main()"},
                           default,default}]}}]}]},
                   {cons,
                    {302,12},
                    {tuple,
                     {302,12},
                     [{tuple,
                       {302,13},
                       [{atom,{302,14},function},
                        {atom,{302,24},main},
                        {integer,{302,29},0}]},
                      {var,{302,32},'_'},
                      {cons,
                       {302,34},
                       {bin,
                        {302,35},
                        [{bin_element,
                          {302,37},
                          {string,{302,37},"main()"},
                          default,default}]},
                       {nil,{302,47}}},
                      {var,{302,50},'FunctionDoc'},
                      {map,{302,63},[]}]},
                    {cons,
                     {303,12},
                     {tuple,
                      {303,12},
                      [{tuple,
                        {303,13},
                        [{atom,{303,14},function},
                         {atom,{303,24},all_ok},
                         {integer,{303,31},0}]},
                       {var,{303,34},'_'},
                       {cons,
                        {303,37},
                        {bin,
                         {303,38},
                         [{bin_element,
                           {303,40},
                           {string,{303,40},"all_ok()"},
                           default,default}]},
                        {nil,{303,52}}},
                       {var,{303,54},'ImpCallback'},
                       {map,
                        {304,13},
                        [{map_field_exact,
                          {304,21},
                          {atom,{304,15},equiv},
                          {bin,
                           {304,24},
                           [{bin_element,
                             {304,26},
                             {string,{304,26},"ok/0"},
                             default,default}]}}]}]},
                     {nil,{305,11}}}}}}}}}}}}}}]}]},
     {call,
      {305,17},
      {remote,{305,21},{atom,{305,17},code},{atom,{305,22},get_doc}},
      [{var,{305,30},'ModName'}]}},
    {debug_line,307,166},
    {block,
     {307,6},
     [{call,
       {307,6},
       {'fun',
        {307,6},
        {clauses,
         [{clause,
           {307,6},
           [],[],
           [{match,
             {307,6},
             {var,{307,6},'X__X'},
             {string,{307,18},"callback.erl"}},
            {'case',
             {307,18},
             {call,
              {307,34},
              {remote,
               {307,42},
               {atom,{307,34},filename},
               {atom,{307,43},basename}},
              [{var,{307,52},'File'}]},
             [{clause,
               {307,56},
               [{var,{307,56},'X__X'}],
               [],
               [{atom,{307,56},ok}]},
              {clause,
               {307,56},
               [{var,{307,56},'X__V'}],
               [],
               [{call,
                 {307,56},
                 {remote,
                  {307,56},
                  {atom,{307,56},erlang},
                  {atom,{307,56},error}},
                 [{block,0,
                   [{tuple,
                     {307,56},
                     [{atom,{307,56},assertEqual},
                      {cons,
                       {307,56},
                       {tuple,
                        {307,56},
                        [{atom,{307,56},module},
                         {atom,{307,56},beam_doc_SUITE}]},
                       {cons,
                        {307,56},
                        {tuple,
                         {307,56},
                         [{atom,{307,56},line},{integer,{307,56},307}]},
                        {cons,
                         {307,56},
                         {tuple,
                          {307,56},
                          [{atom,{307,56},expression},
                           {string,{307,56},"filename : basename ( File )"}]},
                         {cons,
                          {307,56},
                          {tuple,
                           {307,56},
                           [{atom,{307,56},expected},{var,{307,56},'X__X'}]},
                          {cons,
                           {307,56},
                           {tuple,
                            {307,56},
                            [{atom,{307,56},value},{var,{307,56},'X__V'}]},
                           {nil,{307,56}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,308,167},
    {call,
     {308,5},
     {remote,{308,7},{atom,{308,5},io},{atom,{308,8},format}},
     [{block,0,[{string,{308,15},"Warnings: ~p~n"}]},
      {block,0,[{cons,{308,33},{var,{308,34},'Warnings'},{nil,{308,42}}}]}]},
    {debug_line,309,168},
    {block,
     {309,6},
     [{call,
       {309,6},
       {'fun',
        {309,6},
        {clauses,
         [{clause,
           {309,6},
           [],[],
           [{match,{309,6},{var,{309,6},'X__X'},{integer,{309,18},1}},
            {'case',
             {309,18},
             {call,
              {309,21},
              {remote,{309,21},{atom,{309,21},erlang},{atom,{309,21},length}},
              [{var,{309,28},'Warnings'}]},
             [{clause,
               {309,36},
               [{var,{309,36},'X__X'}],
               [],
               [{atom,{309,36},ok}]},
              {clause,
               {309,36},
               [{var,{309,36},'X__V'}],
               [],
               [{call,
                 {309,36},
                 {remote,
                  {309,36},
                  {atom,{309,36},erlang},
                  {atom,{309,36},error}},
                 [{block,0,
                   [{tuple,
                     {309,36},
                     [{atom,{309,36},assertEqual},
                      {cons,
                       {309,36},
                       {tuple,
                        {309,36},
                        [{atom,{309,36},module},
                         {atom,{309,36},beam_doc_SUITE}]},
                       {cons,
                        {309,36},
                        {tuple,
                         {309,36},
                         [{atom,{309,36},line},{integer,{309,36},309}]},
                        {cons,
                         {309,36},
                         {tuple,
                          {309,36},
                          [{atom,{309,36},expression},
                           {string,{309,36},"length ( Warnings )"}]},
                         {cons,
                          {309,36},
                          {tuple,
                           {309,36},
                           [{atom,{309,36},expected},{var,{309,36},'X__X'}]},
                          {cons,
                           {309,36},
                           {tuple,
                            {309,36},
                            [{atom,{309,36},value},{var,{309,36},'X__V'}]},
                           {nil,{309,36}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,310,169},
    {block,
     {310,6},
     [{call,
       {310,6},
       {'fun',
        {310,6},
        {clauses,
         [{clause,
           {310,6},
           [],[],
           [{'case',
             {310,6},
             {call,
              {310,64},
              {remote,{310,69},{atom,{310,64},lists},{atom,{310,70},nth}},
              [{integer,{310,74},1},{var,{310,77},'Warnings'}]},
             [{clause,
               {310,18},
               [{tuple,
                 {310,18},
                 [{tuple,
                   {310,19},
                   [{integer,{310,20},36},{integer,{310,23},2}]},
                  {atom,{310,26},beam_doc},
                  {tuple,
                   {310,35},
                   [{atom,{310,36},hidden_callback},
                    {tuple,
                     {310,52},
                     [{atom,{310,53},warn},{integer,{310,58},0}]}]}]}],
               [],
               [{atom,{310,61},ok}]},
              {clause,
               {310,61},
               [{var,{310,61},'X__V'}],
               [],
               [{call,
                 {310,61},
                 {remote,
                  {310,61},
                  {atom,{310,61},erlang},
                  {atom,{310,61},error}},
                 [{block,0,
                   [{tuple,
                     {310,61},
                     [{atom,{310,61},assertMatch},
                      {cons,
                       {310,61},
                       {tuple,
                        {310,61},
                        [{atom,{310,61},module},
                         {atom,{310,61},beam_doc_SUITE}]},
                       {cons,
                        {310,61},
                        {tuple,
                         {310,61},
                         [{atom,{310,61},line},{integer,{310,61},310}]},
                        {cons,
                         {310,61},
                         {tuple,
                          {310,61},
                          [{atom,{310,61},expression},
                           {string,{310,61},"lists : nth ( 1 , Warnings )"}]},
                         {cons,
                          {310,61},
                          {tuple,
                           {310,61},
                           [{atom,{310,61},pattern},
                            {string,
                             {310,61},
                             "{ { 36 , 2 } , beam_doc , { hidden_callback , { warn , 0 } } }"}]},
                          {cons,
                           {310,61},
                           {tuple,
                            {310,61},
                            [{atom,{310,61},value},{var,{310,61},'X__V'}]},
                           {nil,{310,61}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,312,170},
    {match,
     {312,5},
     {tuple,
      {312,5},
      [{atom,{312,6},ok},{var,{312,10},'ModName'},{nil,{312,19}}]},
     {call,
      {313,9},
      {atom,{313,9},default_compile_file},
      [{var,{313,30},'Conf'},
       {var,{313,36},'ModuleName'},
       {block,0,
        [{debug_line,313,171},
         {cons,
          {313,48},
          {atom,{313,49},return_warnings},
          {cons,
           {313,66},
           {atom,{313,66},report},
           {cons,
            {313,74},
            {atom,{313,74},nowarn_hidden_doc},
            {nil,{313,91}}}}}]}]}},
    {debug_line,315,172},
    {atom,{315,5},ok}]}]}.
{function,
 {317,1},
 private_types,1,
 [{clause,
   {317,1},
   [{var,{317,1},'_'}],
   [[{call,
      {317,1},
      {remote,{317,1},{atom,{317,1},fake},{atom,{317,1},is_beam_bif_info}},
      []}]],
   [{debug_line,317,173},{atom,{317,1},ignore}]},
  {clause,
   {317,1},
   [{var,{317,15},'Conf'}],
   [],
   [{debug_line,318,174},
    {match,
     {318,5},
     {var,{318,5},'ModuleName'},
     {call,
      {318,19},
      {remote,{318,19},{atom,{318,19},erlang},{atom,{318,19},atom_to_list}},
      [{atom,{318,19},private_types}]}},
    {debug_line,319,175},
    {match,
     {319,5},
     {tuple,{319,5},[{atom,{319,6},ok},{var,{319,10},'ModName'}]},
     {call,
      {319,21},
      {atom,{319,21},default_compile_file},
      [{var,{319,42},'Conf'},{var,{319,48},'ModuleName'}]}},
    {debug_line,321,176},
    {match,
     {321,5},
     {tuple,
      {321,5},
      [{atom,{321,6},ok},
       {tuple,
        {321,10},
        [{atom,{321,11},docs_v1},
         {var,{321,20},'_'},
         {var,{321,22},'_'},
         {var,{321,25},'_'},
         {atom,{321,28},none},
         {var,{321,34},'_'},
         {cons,
          {322,11},
          {var,{324,12},'RemoteTypeT'},
          {cons,
           {324,25},
           {var,{324,25},'TupleT'},
           {cons,
            {324,33},
            {var,{324,33},'RecordAT'},
            {cons,
             {324,43},
             {var,{324,43},'RecordInlineT'},
             {cons,
              {325,12},
              {var,{325,12},'MapValue2T'},
              {cons,
               {325,24},
               {var,{325,24},'MapKey2T'},
               {cons,
                {325,34},
                {var,{325,34},'MapValueT'},
                {cons,
                 {325,45},
                 {var,{325,45},'MapKeyT'},
                 {cons,
                  {326,12},
                  {var,{326,12},'FunRet2T'},
                  {cons,
                   {326,22},
                   {var,{326,22},'FunRetT'},
                   {cons,
                    {326,31},
                    {var,{326,31},'FunT'},
                    {cons,
                     {326,37},
                     {var,{326,37},'Complex'},
                     {cons,
                      {326,46},
                      {var,{326,46},'BoundedRetT'},
                      {cons,
                       {327,12},
                       {var,{327,12},'ArgT'},
                       {cons,
                        {327,18},
                        {var,{327,18},'BoundedArgT'},
                        {cons,
                         {327,31},
                         {var,{327,31},'Private'},
                         {cons,
                          {327,40},
                          {var,{327,40},'HiddenExportT'},
                          {cons,
                           {327,55},
                           {var,{327,55},'PrivateCBT'},
                           {cons,
                            {328,12},
                            {var,{328,12},'OpaqueT'},
                            {cons,
                             {328,21},
                             {var,{328,21},'PublicT'},
                             {cons,
                              {328,30},
                              {var,{328,30},'PrivateT'},
                              {cons,
                               {330,12},
                               {var,{330,12},'CBar'},
                               {cons,
                                {332,12},
                                {var,{332,12},'Bounded'},
                                {cons,
                                 {332,21},
                                 {var,{332,21},'HiddenTypeExposed'},
                                 {cons,
                                  {332,40},
                                  {var,{332,40},'Hidden'},
                                  {cons,
                                   {332,48},
                                   {var,{332,48},'Bar'},
                                   {nil,
                                    {332,51}}}}}}}}}}}}}}}}}}}}}}}}}}}}]}]},
     {call,
      {332,57},
      {remote,{332,61},{atom,{332,57},code},{atom,{332,62},get_doc}},
      [{var,{332,70},'ModName'}]}},
    {debug_line,334,177},
    {block,
     {334,6},
     [{call,
       {334,6},
       {'fun',
        {334,6},
        {clauses,
         [{clause,
           {334,6},
           [],[],
           [{'case',
             {334,6},
             {var,{334,77},'RemoteTypeT'},
             [{clause,
               {334,18},
               [{tuple,
                 {334,18},
                 [{tuple,
                   {334,19},
                   [{atom,{334,20},type},
                    {atom,{334,25},remote_type_t},
                    {integer,{334,39},1}]},
                  {var,{334,43},'_'},
                  {var,{334,46},'_'},
                  {atom,{334,49},none},
                  {map,
                   {334,55},
                   [{map_field_exact,
                     {334,66},
                     {atom,{334,57},exported},
                     {atom,{334,69},false}}]}]}],
               [],
               [{atom,{334,75},ok}]},
              {clause,
               {334,75},
               [{var,{334,75},'X__V'}],
               [],
               [{call,
                 {334,75},
                 {remote,
                  {334,75},
                  {atom,{334,75},erlang},
                  {atom,{334,75},error}},
                 [{block,0,
                   [{tuple,
                     {334,75},
                     [{atom,{334,75},assertMatch},
                      {cons,
                       {334,75},
                       {tuple,
                        {334,75},
                        [{atom,{334,75},module},
                         {atom,{334,75},beam_doc_SUITE}]},
                       {cons,
                        {334,75},
                        {tuple,
                         {334,75},
                         [{atom,{334,75},line},{integer,{334,75},334}]},
                        {cons,
                         {334,75},
                         {tuple,
                          {334,75},
                          [{atom,{334,75},expression},
                           {string,{334,75},"RemoteTypeT"}]},
                         {cons,
                          {334,75},
                          {tuple,
                           {334,75},
                           [{atom,{334,75},pattern},
                            {string,
                             {334,75},
                             "{ { type , remote_type_t , 1 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {334,75},
                           {tuple,
                            {334,75},
                            [{atom,{334,75},value},{var,{334,75},'X__V'}]},
                           {nil,{334,75}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,335,178},
    {block,
     {335,6},
     [{call,
       {335,6},
       {'fun',
        {335,6},
        {clauses,
         [{clause,
           {335,6},
           [],[],
           [{'case',
             {335,6},
             {var,{335,71},'TupleT'},
             [{clause,
               {335,18},
               [{tuple,
                 {335,18},
                 [{tuple,
                   {335,19},
                   [{atom,{335,20},type},
                    {atom,{335,25},tuple_t},
                    {integer,{335,33},0}]},
                  {var,{335,37},'_'},
                  {var,{335,40},'_'},
                  {atom,{335,43},none},
                  {map,
                   {335,49},
                   [{map_field_exact,
                     {335,60},
                     {atom,{335,51},exported},
                     {atom,{335,63},false}}]}]}],
               [],
               [{atom,{335,69},ok}]},
              {clause,
               {335,69},
               [{var,{335,69},'X__V'}],
               [],
               [{call,
                 {335,69},
                 {remote,
                  {335,69},
                  {atom,{335,69},erlang},
                  {atom,{335,69},error}},
                 [{block,0,
                   [{tuple,
                     {335,69},
                     [{atom,{335,69},assertMatch},
                      {cons,
                       {335,69},
                       {tuple,
                        {335,69},
                        [{atom,{335,69},module},
                         {atom,{335,69},beam_doc_SUITE}]},
                       {cons,
                        {335,69},
                        {tuple,
                         {335,69},
                         [{atom,{335,69},line},{integer,{335,69},335}]},
                        {cons,
                         {335,69},
                         {tuple,
                          {335,69},
                          [{atom,{335,69},expression},
                           {string,{335,69},"TupleT"}]},
                         {cons,
                          {335,69},
                          {tuple,
                           {335,69},
                           [{atom,{335,69},pattern},
                            {string,
                             {335,69},
                             "{ { type , tuple_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {335,69},
                           {tuple,
                            {335,69},
                            [{atom,{335,69},value},{var,{335,69},'X__V'}]},
                           {nil,{335,69}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,336,179},
    {block,
     {336,6},
     [{call,
       {336,6},
       {'fun',
        {336,6},
        {clauses,
         [{clause,
           {336,6},
           [],[],
           [{'case',
             {336,6},
             {var,{336,74},'RecordAT'},
             [{clause,
               {336,18},
               [{tuple,
                 {336,18},
                 [{tuple,
                   {336,19},
                   [{atom,{336,20},type},
                    {atom,{336,25},record_a_t},
                    {integer,{336,36},0}]},
                  {var,{336,40},'_'},
                  {var,{336,43},'_'},
                  {atom,{336,46},none},
                  {map,
                   {336,52},
                   [{map_field_exact,
                     {336,63},
                     {atom,{336,54},exported},
                     {atom,{336,66},false}}]}]}],
               [],
               [{atom,{336,72},ok}]},
              {clause,
               {336,72},
               [{var,{336,72},'X__V'}],
               [],
               [{call,
                 {336,72},
                 {remote,
                  {336,72},
                  {atom,{336,72},erlang},
                  {atom,{336,72},error}},
                 [{block,0,
                   [{tuple,
                     {336,72},
                     [{atom,{336,72},assertMatch},
                      {cons,
                       {336,72},
                       {tuple,
                        {336,72},
                        [{atom,{336,72},module},
                         {atom,{336,72},beam_doc_SUITE}]},
                       {cons,
                        {336,72},
                        {tuple,
                         {336,72},
                         [{atom,{336,72},line},{integer,{336,72},336}]},
                        {cons,
                         {336,72},
                         {tuple,
                          {336,72},
                          [{atom,{336,72},expression},
                           {string,{336,72},"RecordAT"}]},
                         {cons,
                          {336,72},
                          {tuple,
                           {336,72},
                           [{atom,{336,72},pattern},
                            {string,
                             {336,72},
                             "{ { type , record_a_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {336,72},
                           {tuple,
                            {336,72},
                            [{atom,{336,72},value},{var,{336,72},'X__V'}]},
                           {nil,{336,72}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,337,180},
    {block,
     {337,6},
     [{call,
       {337,6},
       {'fun',
        {337,6},
        {clauses,
         [{clause,
           {337,6},
           [],[],
           [{'case',
             {337,6},
             {var,{337,79},'RecordInlineT'},
             [{clause,
               {337,18},
               [{tuple,
                 {337,18},
                 [{tuple,
                   {337,19},
                   [{atom,{337,20},type},
                    {atom,{337,25},record_inline_t},
                    {integer,{337,41},0}]},
                  {var,{337,45},'_'},
                  {var,{337,48},'_'},
                  {atom,{337,51},none},
                  {map,
                   {337,57},
                   [{map_field_exact,
                     {337,68},
                     {atom,{337,59},exported},
                     {atom,{337,71},false}}]}]}],
               [],
               [{atom,{337,77},ok}]},
              {clause,
               {337,77},
               [{var,{337,77},'X__V'}],
               [],
               [{call,
                 {337,77},
                 {remote,
                  {337,77},
                  {atom,{337,77},erlang},
                  {atom,{337,77},error}},
                 [{block,0,
                   [{tuple,
                     {337,77},
                     [{atom,{337,77},assertMatch},
                      {cons,
                       {337,77},
                       {tuple,
                        {337,77},
                        [{atom,{337,77},module},
                         {atom,{337,77},beam_doc_SUITE}]},
                       {cons,
                        {337,77},
                        {tuple,
                         {337,77},
                         [{atom,{337,77},line},{integer,{337,77},337}]},
                        {cons,
                         {337,77},
                         {tuple,
                          {337,77},
                          [{atom,{337,77},expression},
                           {string,{337,77},"RecordInlineT"}]},
                         {cons,
                          {337,77},
                          {tuple,
                           {337,77},
                           [{atom,{337,77},pattern},
                            {string,
                             {337,77},
                             "{ { type , record_inline_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {337,77},
                           {tuple,
                            {337,77},
                            [{atom,{337,77},value},{var,{337,77},'X__V'}]},
                           {nil,{337,77}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,338,181},
    {block,
     {338,6},
     [{call,
       {338,6},
       {'fun',
        {338,6},
        {clauses,
         [{clause,
           {338,6},
           [],[],
           [{'case',
             {338,6},
             {var,{338,77},'MapValue2T'},
             [{clause,
               {338,18},
               [{tuple,
                 {338,18},
                 [{tuple,
                   {338,19},
                   [{atom,{338,20},type},
                    {atom,{338,25},map_value_2_t},
                    {integer,{338,39},0}]},
                  {var,{338,43},'_'},
                  {var,{338,46},'_'},
                  {atom,{338,49},none},
                  {map,
                   {338,55},
                   [{map_field_exact,
                     {338,66},
                     {atom,{338,57},exported},
                     {atom,{338,69},false}}]}]}],
               [],
               [{atom,{338,75},ok}]},
              {clause,
               {338,75},
               [{var,{338,75},'X__V'}],
               [],
               [{call,
                 {338,75},
                 {remote,
                  {338,75},
                  {atom,{338,75},erlang},
                  {atom,{338,75},error}},
                 [{block,0,
                   [{tuple,
                     {338,75},
                     [{atom,{338,75},assertMatch},
                      {cons,
                       {338,75},
                       {tuple,
                        {338,75},
                        [{atom,{338,75},module},
                         {atom,{338,75},beam_doc_SUITE}]},
                       {cons,
                        {338,75},
                        {tuple,
                         {338,75},
                         [{atom,{338,75},line},{integer,{338,75},338}]},
                        {cons,
                         {338,75},
                         {tuple,
                          {338,75},
                          [{atom,{338,75},expression},
                           {string,{338,75},"MapValue2T"}]},
                         {cons,
                          {338,75},
                          {tuple,
                           {338,75},
                           [{atom,{338,75},pattern},
                            {string,
                             {338,75},
                             "{ { type , map_value_2_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {338,75},
                           {tuple,
                            {338,75},
                            [{atom,{338,75},value},{var,{338,75},'X__V'}]},
                           {nil,{338,75}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,339,182},
    {block,
     {339,6},
     [{call,
       {339,6},
       {'fun',
        {339,6},
        {clauses,
         [{clause,
           {339,6},
           [],[],
           [{'case',
             {339,6},
             {var,{339,75},'MapKey2T'},
             [{clause,
               {339,18},
               [{tuple,
                 {339,18},
                 [{tuple,
                   {339,19},
                   [{atom,{339,20},type},
                    {atom,{339,25},map_key_2_t},
                    {integer,{339,37},0}]},
                  {var,{339,41},'_'},
                  {var,{339,44},'_'},
                  {atom,{339,47},none},
                  {map,
                   {339,53},
                   [{map_field_exact,
                     {339,64},
                     {atom,{339,55},exported},
                     {atom,{339,67},false}}]}]}],
               [],
               [{atom,{339,73},ok}]},
              {clause,
               {339,73},
               [{var,{339,73},'X__V'}],
               [],
               [{call,
                 {339,73},
                 {remote,
                  {339,73},
                  {atom,{339,73},erlang},
                  {atom,{339,73},error}},
                 [{block,0,
                   [{tuple,
                     {339,73},
                     [{atom,{339,73},assertMatch},
                      {cons,
                       {339,73},
                       {tuple,
                        {339,73},
                        [{atom,{339,73},module},
                         {atom,{339,73},beam_doc_SUITE}]},
                       {cons,
                        {339,73},
                        {tuple,
                         {339,73},
                         [{atom,{339,73},line},{integer,{339,73},339}]},
                        {cons,
                         {339,73},
                         {tuple,
                          {339,73},
                          [{atom,{339,73},expression},
                           {string,{339,73},"MapKey2T"}]},
                         {cons,
                          {339,73},
                          {tuple,
                           {339,73},
                           [{atom,{339,73},pattern},
                            {string,
                             {339,73},
                             "{ { type , map_key_2_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {339,73},
                           {tuple,
                            {339,73},
                            [{atom,{339,73},value},{var,{339,73},'X__V'}]},
                           {nil,{339,73}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,340,183},
    {block,
     {340,6},
     [{call,
       {340,6},
       {'fun',
        {340,6},
        {clauses,
         [{clause,
           {340,6},
           [],[],
           [{'case',
             {340,6},
             {var,{340,75},'MapValueT'},
             [{clause,
               {340,18},
               [{tuple,
                 {340,18},
                 [{tuple,
                   {340,19},
                   [{atom,{340,20},type},
                    {atom,{340,25},map_value_t},
                    {integer,{340,37},0}]},
                  {var,{340,41},'_'},
                  {var,{340,44},'_'},
                  {atom,{340,47},none},
                  {map,
                   {340,53},
                   [{map_field_exact,
                     {340,64},
                     {atom,{340,55},exported},
                     {atom,{340,67},false}}]}]}],
               [],
               [{atom,{340,73},ok}]},
              {clause,
               {340,73},
               [{var,{340,73},'X__V'}],
               [],
               [{call,
                 {340,73},
                 {remote,
                  {340,73},
                  {atom,{340,73},erlang},
                  {atom,{340,73},error}},
                 [{block,0,
                   [{tuple,
                     {340,73},
                     [{atom,{340,73},assertMatch},
                      {cons,
                       {340,73},
                       {tuple,
                        {340,73},
                        [{atom,{340,73},module},
                         {atom,{340,73},beam_doc_SUITE}]},
                       {cons,
                        {340,73},
                        {tuple,
                         {340,73},
                         [{atom,{340,73},line},{integer,{340,73},340}]},
                        {cons,
                         {340,73},
                         {tuple,
                          {340,73},
                          [{atom,{340,73},expression},
                           {string,{340,73},"MapValueT"}]},
                         {cons,
                          {340,73},
                          {tuple,
                           {340,73},
                           [{atom,{340,73},pattern},
                            {string,
                             {340,73},
                             "{ { type , map_value_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {340,73},
                           {tuple,
                            {340,73},
                            [{atom,{340,73},value},{var,{340,73},'X__V'}]},
                           {nil,{340,73}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,341,184},
    {block,
     {341,6},
     [{call,
       {341,6},
       {'fun',
        {341,6},
        {clauses,
         [{clause,
           {341,6},
           [],[],
           [{'case',
             {341,6},
             {var,{341,73},'MapKeyT'},
             [{clause,
               {341,18},
               [{tuple,
                 {341,18},
                 [{tuple,
                   {341,19},
                   [{atom,{341,20},type},
                    {atom,{341,25},map_key_t},
                    {integer,{341,35},0}]},
                  {var,{341,39},'_'},
                  {var,{341,42},'_'},
                  {atom,{341,45},none},
                  {map,
                   {341,51},
                   [{map_field_exact,
                     {341,62},
                     {atom,{341,53},exported},
                     {atom,{341,65},false}}]}]}],
               [],
               [{atom,{341,71},ok}]},
              {clause,
               {341,71},
               [{var,{341,71},'X__V'}],
               [],
               [{call,
                 {341,71},
                 {remote,
                  {341,71},
                  {atom,{341,71},erlang},
                  {atom,{341,71},error}},
                 [{block,0,
                   [{tuple,
                     {341,71},
                     [{atom,{341,71},assertMatch},
                      {cons,
                       {341,71},
                       {tuple,
                        {341,71},
                        [{atom,{341,71},module},
                         {atom,{341,71},beam_doc_SUITE}]},
                       {cons,
                        {341,71},
                        {tuple,
                         {341,71},
                         [{atom,{341,71},line},{integer,{341,71},341}]},
                        {cons,
                         {341,71},
                         {tuple,
                          {341,71},
                          [{atom,{341,71},expression},
                           {string,{341,71},"MapKeyT"}]},
                         {cons,
                          {341,71},
                          {tuple,
                           {341,71},
                           [{atom,{341,71},pattern},
                            {string,
                             {341,71},
                             "{ { type , map_key_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {341,71},
                           {tuple,
                            {341,71},
                            [{atom,{341,71},value},{var,{341,71},'X__V'}]},
                           {nil,{341,71}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,342,185},
    {block,
     {342,6},
     [{call,
       {342,6},
       {'fun',
        {342,6},
        {clauses,
         [{clause,
           {342,6},
           [],[],
           [{'case',
             {342,6},
             {var,{342,75},'FunRet2T'},
             [{clause,
               {342,18},
               [{tuple,
                 {342,18},
                 [{tuple,
                   {342,19},
                   [{atom,{342,20},type},
                    {atom,{342,25},fun_ret_2_t},
                    {integer,{342,37},0}]},
                  {var,{342,41},'_'},
                  {var,{342,44},'_'},
                  {atom,{342,47},none},
                  {map,
                   {342,53},
                   [{map_field_exact,
                     {342,64},
                     {atom,{342,55},exported},
                     {atom,{342,67},false}}]}]}],
               [],
               [{atom,{342,73},ok}]},
              {clause,
               {342,73},
               [{var,{342,73},'X__V'}],
               [],
               [{call,
                 {342,73},
                 {remote,
                  {342,73},
                  {atom,{342,73},erlang},
                  {atom,{342,73},error}},
                 [{block,0,
                   [{tuple,
                     {342,73},
                     [{atom,{342,73},assertMatch},
                      {cons,
                       {342,73},
                       {tuple,
                        {342,73},
                        [{atom,{342,73},module},
                         {atom,{342,73},beam_doc_SUITE}]},
                       {cons,
                        {342,73},
                        {tuple,
                         {342,73},
                         [{atom,{342,73},line},{integer,{342,73},342}]},
                        {cons,
                         {342,73},
                         {tuple,
                          {342,73},
                          [{atom,{342,73},expression},
                           {string,{342,73},"FunRet2T"}]},
                         {cons,
                          {342,73},
                          {tuple,
                           {342,73},
                           [{atom,{342,73},pattern},
                            {string,
                             {342,73},
                             "{ { type , fun_ret_2_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {342,73},
                           {tuple,
                            {342,73},
                            [{atom,{342,73},value},{var,{342,73},'X__V'}]},
                           {nil,{342,73}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,343,186},
    {block,
     {343,6},
     [{call,
       {343,6},
       {'fun',
        {343,6},
        {clauses,
         [{clause,
           {343,6},
           [],[],
           [{'case',
             {343,6},
             {var,{343,73},'FunRetT'},
             [{clause,
               {343,18},
               [{tuple,
                 {343,18},
                 [{tuple,
                   {343,19},
                   [{atom,{343,20},type},
                    {atom,{343,25},fun_ret_t},
                    {integer,{343,35},0}]},
                  {var,{343,39},'_'},
                  {var,{343,42},'_'},
                  {atom,{343,45},none},
                  {map,
                   {343,51},
                   [{map_field_exact,
                     {343,62},
                     {atom,{343,53},exported},
                     {atom,{343,65},false}}]}]}],
               [],
               [{atom,{343,71},ok}]},
              {clause,
               {343,71},
               [{var,{343,71},'X__V'}],
               [],
               [{call,
                 {343,71},
                 {remote,
                  {343,71},
                  {atom,{343,71},erlang},
                  {atom,{343,71},error}},
                 [{block,0,
                   [{tuple,
                     {343,71},
                     [{atom,{343,71},assertMatch},
                      {cons,
                       {343,71},
                       {tuple,
                        {343,71},
                        [{atom,{343,71},module},
                         {atom,{343,71},beam_doc_SUITE}]},
                       {cons,
                        {343,71},
                        {tuple,
                         {343,71},
                         [{atom,{343,71},line},{integer,{343,71},343}]},
                        {cons,
                         {343,71},
                         {tuple,
                          {343,71},
                          [{atom,{343,71},expression},
                           {string,{343,71},"FunRetT"}]},
                         {cons,
                          {343,71},
                          {tuple,
                           {343,71},
                           [{atom,{343,71},pattern},
                            {string,
                             {343,71},
                             "{ { type , fun_ret_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {343,71},
                           {tuple,
                            {343,71},
                            [{atom,{343,71},value},{var,{343,71},'X__V'}]},
                           {nil,{343,71}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,344,187},
    {block,
     {344,6},
     [{call,
       {344,6},
       {'fun',
        {344,6},
        {clauses,
         [{clause,
           {344,6},
           [],[],
           [{'case',
             {344,6},
             {var,{344,69},'FunT'},
             [{clause,
               {344,18},
               [{tuple,
                 {344,18},
                 [{tuple,
                   {344,19},
                   [{atom,{344,20},type},
                    {atom,{344,25},fun_t},
                    {integer,{344,31},0}]},
                  {var,{344,35},'_'},
                  {var,{344,38},'_'},
                  {atom,{344,41},none},
                  {map,
                   {344,47},
                   [{map_field_exact,
                     {344,58},
                     {atom,{344,49},exported},
                     {atom,{344,61},false}}]}]}],
               [],
               [{atom,{344,67},ok}]},
              {clause,
               {344,67},
               [{var,{344,67},'X__V'}],
               [],
               [{call,
                 {344,67},
                 {remote,
                  {344,67},
                  {atom,{344,67},erlang},
                  {atom,{344,67},error}},
                 [{block,0,
                   [{tuple,
                     {344,67},
                     [{atom,{344,67},assertMatch},
                      {cons,
                       {344,67},
                       {tuple,
                        {344,67},
                        [{atom,{344,67},module},
                         {atom,{344,67},beam_doc_SUITE}]},
                       {cons,
                        {344,67},
                        {tuple,
                         {344,67},
                         [{atom,{344,67},line},{integer,{344,67},344}]},
                        {cons,
                         {344,67},
                         {tuple,
                          {344,67},
                          [{atom,{344,67},expression},
                           {string,{344,67},"FunT"}]},
                         {cons,
                          {344,67},
                          {tuple,
                           {344,67},
                           [{atom,{344,67},pattern},
                            {string,
                             {344,67},
                             "{ { type , fun_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {344,67},
                           {tuple,
                            {344,67},
                            [{atom,{344,67},value},{var,{344,67},'X__V'}]},
                           {nil,{344,67}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,345,188},
    {block,
     {345,6},
     [{call,
       {345,6},
       {'fun',
        {345,6},
        {clauses,
         [{clause,
           {345,6},
           [],[],
           [{'case',
             {345,6},
             {var,{345,70},'Complex'},
             [{clause,
               {345,18},
               [{tuple,
                 {345,18},
                 [{tuple,
                   {345,19},
                   [{atom,{345,20},type},
                    {atom,{345,25},complex},
                    {integer,{345,33},1}]},
                  {var,{345,37},'_'},
                  {var,{345,40},'_'},
                  {atom,{345,43},none},
                  {map,
                   {345,49},
                   [{map_field_exact,
                     {345,60},
                     {atom,{345,51},exported},
                     {atom,{345,63},true}}]}]}],
               [],
               [{atom,{345,68},ok}]},
              {clause,
               {345,68},
               [{var,{345,68},'X__V'}],
               [],
               [{call,
                 {345,68},
                 {remote,
                  {345,68},
                  {atom,{345,68},erlang},
                  {atom,{345,68},error}},
                 [{block,0,
                   [{tuple,
                     {345,68},
                     [{atom,{345,68},assertMatch},
                      {cons,
                       {345,68},
                       {tuple,
                        {345,68},
                        [{atom,{345,68},module},
                         {atom,{345,68},beam_doc_SUITE}]},
                       {cons,
                        {345,68},
                        {tuple,
                         {345,68},
                         [{atom,{345,68},line},{integer,{345,68},345}]},
                        {cons,
                         {345,68},
                         {tuple,
                          {345,68},
                          [{atom,{345,68},expression},
                           {string,{345,68},"Complex"}]},
                         {cons,
                          {345,68},
                          {tuple,
                           {345,68},
                           [{atom,{345,68},pattern},
                            {string,
                             {345,68},
                             "{ { type , complex , 1 } , _ , _ , none , # { exported := true } }"}]},
                          {cons,
                           {345,68},
                           {tuple,
                            {345,68},
                            [{atom,{345,68},value},{var,{345,68},'X__V'}]},
                           {nil,{345,68}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,346,189},
    {block,
     {346,6},
     [{call,
       {346,6},
       {'fun',
        {346,6},
        {clauses,
         [{clause,
           {346,6},
           [],[],
           [{'case',
             {346,6},
             {var,{346,77},'BoundedRetT'},
             [{clause,
               {346,18},
               [{tuple,
                 {346,18},
                 [{tuple,
                   {346,19},
                   [{atom,{346,20},type},
                    {atom,{346,25},bounded_ret_t},
                    {integer,{346,39},0}]},
                  {var,{346,43},'_'},
                  {var,{346,46},'_'},
                  {atom,{346,49},none},
                  {map,
                   {346,55},
                   [{map_field_exact,
                     {346,66},
                     {atom,{346,57},exported},
                     {atom,{346,69},false}}]}]}],
               [],
               [{atom,{346,75},ok}]},
              {clause,
               {346,75},
               [{var,{346,75},'X__V'}],
               [],
               [{call,
                 {346,75},
                 {remote,
                  {346,75},
                  {atom,{346,75},erlang},
                  {atom,{346,75},error}},
                 [{block,0,
                   [{tuple,
                     {346,75},
                     [{atom,{346,75},assertMatch},
                      {cons,
                       {346,75},
                       {tuple,
                        {346,75},
                        [{atom,{346,75},module},
                         {atom,{346,75},beam_doc_SUITE}]},
                       {cons,
                        {346,75},
                        {tuple,
                         {346,75},
                         [{atom,{346,75},line},{integer,{346,75},346}]},
                        {cons,
                         {346,75},
                         {tuple,
                          {346,75},
                          [{atom,{346,75},expression},
                           {string,{346,75},"BoundedRetT"}]},
                         {cons,
                          {346,75},
                          {tuple,
                           {346,75},
                           [{atom,{346,75},pattern},
                            {string,
                             {346,75},
                             "{ { type , bounded_ret_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {346,75},
                           {tuple,
                            {346,75},
                            [{atom,{346,75},value},{var,{346,75},'X__V'}]},
                           {nil,{346,75}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,347,190},
    {block,
     {347,6},
     [{call,
       {347,6},
       {'fun',
        {347,6},
        {clauses,
         [{clause,
           {347,6},
           [],[],
           [{'case',
             {347,6},
             {var,{347,69},'ArgT'},
             [{clause,
               {347,18},
               [{tuple,
                 {347,18},
                 [{tuple,
                   {347,19},
                   [{atom,{347,20},type},
                    {atom,{347,25},arg_t},
                    {integer,{347,31},0}]},
                  {var,{347,35},'_'},
                  {var,{347,38},'_'},
                  {atom,{347,41},none},
                  {map,
                   {347,47},
                   [{map_field_exact,
                     {347,58},
                     {atom,{347,49},exported},
                     {atom,{347,61},false}}]}]}],
               [],
               [{atom,{347,67},ok}]},
              {clause,
               {347,67},
               [{var,{347,67},'X__V'}],
               [],
               [{call,
                 {347,67},
                 {remote,
                  {347,67},
                  {atom,{347,67},erlang},
                  {atom,{347,67},error}},
                 [{block,0,
                   [{tuple,
                     {347,67},
                     [{atom,{347,67},assertMatch},
                      {cons,
                       {347,67},
                       {tuple,
                        {347,67},
                        [{atom,{347,67},module},
                         {atom,{347,67},beam_doc_SUITE}]},
                       {cons,
                        {347,67},
                        {tuple,
                         {347,67},
                         [{atom,{347,67},line},{integer,{347,67},347}]},
                        {cons,
                         {347,67},
                         {tuple,
                          {347,67},
                          [{atom,{347,67},expression},
                           {string,{347,67},"ArgT"}]},
                         {cons,
                          {347,67},
                          {tuple,
                           {347,67},
                           [{atom,{347,67},pattern},
                            {string,
                             {347,67},
                             "{ { type , arg_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {347,67},
                           {tuple,
                            {347,67},
                            [{atom,{347,67},value},{var,{347,67},'X__V'}]},
                           {nil,{347,67}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,348,191},
    {block,
     {348,6},
     [{call,
       {348,6},
       {'fun',
        {348,6},
        {clauses,
         [{clause,
           {348,6},
           [],[],
           [{'case',
             {348,6},
             {var,{348,77},'BoundedArgT'},
             [{clause,
               {348,18},
               [{tuple,
                 {348,18},
                 [{tuple,
                   {348,19},
                   [{atom,{348,20},type},
                    {atom,{348,25},bounded_arg_t},
                    {integer,{348,39},0}]},
                  {var,{348,43},'_'},
                  {var,{348,46},'_'},
                  {atom,{348,49},none},
                  {map,
                   {348,55},
                   [{map_field_exact,
                     {348,66},
                     {atom,{348,57},exported},
                     {atom,{348,69},false}}]}]}],
               [],
               [{atom,{348,75},ok}]},
              {clause,
               {348,75},
               [{var,{348,75},'X__V'}],
               [],
               [{call,
                 {348,75},
                 {remote,
                  {348,75},
                  {atom,{348,75},erlang},
                  {atom,{348,75},error}},
                 [{block,0,
                   [{tuple,
                     {348,75},
                     [{atom,{348,75},assertMatch},
                      {cons,
                       {348,75},
                       {tuple,
                        {348,75},
                        [{atom,{348,75},module},
                         {atom,{348,75},beam_doc_SUITE}]},
                       {cons,
                        {348,75},
                        {tuple,
                         {348,75},
                         [{atom,{348,75},line},{integer,{348,75},348}]},
                        {cons,
                         {348,75},
                         {tuple,
                          {348,75},
                          [{atom,{348,75},expression},
                           {string,{348,75},"BoundedArgT"}]},
                         {cons,
                          {348,75},
                          {tuple,
                           {348,75},
                           [{atom,{348,75},pattern},
                            {string,
                             {348,75},
                             "{ { type , bounded_arg_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {348,75},
                           {tuple,
                            {348,75},
                            [{atom,{348,75},value},{var,{348,75},'X__V'}]},
                           {nil,{348,75}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,349,192},
    {block,
     {349,6},
     [{call,
       {349,6},
       {'fun',
        {349,6},
        {clauses,
         [{clause,
           {349,6},
           [],[],
           [{'case',
             {349,6},
             {var,{349,94},'Private'},
             [{clause,
               {349,18},
               [{tuple,
                 {349,18},
                 [{tuple,
                   {349,19},
                   [{atom,{349,20},type},
                    {atom,{349,25},private},
                    {integer,{349,33},0}]},
                  {tuple,
                   {349,37},
                   [{integer,{349,38},30},{integer,{349,41},2}]},
                  {cons,
                   {349,45},
                   {bin,
                    {349,46},
                    [{bin_element,
                      {349,48},
                      {string,{349,48},"private()"},
                      default,default}]},
                   {nil,{349,61}}},
                  {atom,{349,64},hidden},
                  {map,
                   {349,72},
                   [{map_field_exact,
                     {349,83},
                     {atom,{349,74},exported},
                     {atom,{349,86},false}}]}]}],
               [],
               [{atom,{349,92},ok}]},
              {clause,
               {349,92},
               [{var,{349,92},'X__V'}],
               [],
               [{call,
                 {349,92},
                 {remote,
                  {349,92},
                  {atom,{349,92},erlang},
                  {atom,{349,92},error}},
                 [{block,0,
                   [{tuple,
                     {349,92},
                     [{atom,{349,92},assertMatch},
                      {cons,
                       {349,92},
                       {tuple,
                        {349,92},
                        [{atom,{349,92},module},
                         {atom,{349,92},beam_doc_SUITE}]},
                       {cons,
                        {349,92},
                        {tuple,
                         {349,92},
                         [{atom,{349,92},line},{integer,{349,92},349}]},
                        {cons,
                         {349,92},
                         {tuple,
                          {349,92},
                          [{atom,{349,92},expression},
                           {string,{349,92},"Private"}]},
                         {cons,
                          {349,92},
                          {tuple,
                           {349,92},
                           [{atom,{349,92},pattern},
                            {string,
                             {349,92},
                             "{ { type , private , 0 } , { 30 , 2 } , [ << \"private()\" >> ] , hidden , # { exported := false } }"}]},
                          {cons,
                           {349,92},
                           {tuple,
                            {349,92},
                            [{atom,{349,92},value},{var,{349,92},'X__V'}]},
                           {nil,{349,92}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,350,193},
    {block,
     {350,6},
     [{call,
       {350,6},
       {'fun',
        {350,6},
        {clauses,
         [{clause,
           {350,6},
           [],[],
           [{'case',
             {350,6},
             {var,{350,100},'HiddenExportT'},
             [{clause,
               {350,18},
               [{tuple,
                 {350,18},
                 [{tuple,
                   {350,19},
                   [{atom,{350,20},type},
                    {atom,{350,25},hidden_export_t},
                    {integer,{350,41},0}]},
                  {var,{350,44},'_'},
                  {cons,
                   {350,46},
                   {bin,
                    {350,47},
                    [{bin_element,
                      {350,49},
                      {string,{350,49},"hidden_export_t()"},
                      default,default}]},
                   {nil,{350,70}}},
                  {atom,{350,72},hidden},
                  {map,
                   {350,79},
                   [{map_field_exact,
                     {350,90},
                     {atom,{350,81},exported},
                     {atom,{350,93},true}}]}]}],
               [],
               [{atom,{350,98},ok}]},
              {clause,
               {350,98},
               [{var,{350,98},'X__V'}],
               [],
               [{call,
                 {350,98},
                 {remote,
                  {350,98},
                  {atom,{350,98},erlang},
                  {atom,{350,98},error}},
                 [{block,0,
                   [{tuple,
                     {350,98},
                     [{atom,{350,98},assertMatch},
                      {cons,
                       {350,98},
                       {tuple,
                        {350,98},
                        [{atom,{350,98},module},
                         {atom,{350,98},beam_doc_SUITE}]},
                       {cons,
                        {350,98},
                        {tuple,
                         {350,98},
                         [{atom,{350,98},line},{integer,{350,98},350}]},
                        {cons,
                         {350,98},
                         {tuple,
                          {350,98},
                          [{atom,{350,98},expression},
                           {string,{350,98},"HiddenExportT"}]},
                         {cons,
                          {350,98},
                          {tuple,
                           {350,98},
                           [{atom,{350,98},pattern},
                            {string,
                             {350,98},
                             "{ { type , hidden_export_t , 0 } , _ , [ << \"hidden_export_t()\" >> ] , hidden , # { exported := true } }"}]},
                          {cons,
                           {350,98},
                           {tuple,
                            {350,98},
                            [{atom,{350,98},value},{var,{350,98},'X__V'}]},
                           {nil,{350,98}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,351,194},
    {block,
     {351,6},
     [{call,
       {351,6},
       {'fun',
        {351,6},
        {clauses,
         [{clause,
           {351,6},
           [],[],
           [{'case',
             {351,6},
             {var,{351,72},'PrivateCBT'},
             [{clause,
               {351,18},
               [{tuple,
                 {351,18},
                 [{tuple,
                   {351,19},
                   [{atom,{351,20},type},
                    {atom,{351,25},private_cb_t},
                    {integer,{351,38},0}]},
                  {var,{351,41},'_'},
                  {var,{351,43},'_'},
                  {atom,{351,45},none},
                  {map,
                   {351,50},
                   [{map_field_exact,
                     {351,61},
                     {atom,{351,52},exported},
                     {atom,{351,64},false}}]}]}],
               [],
               [{atom,{351,70},ok}]},
              {clause,
               {351,70},
               [{var,{351,70},'X__V'}],
               [],
               [{call,
                 {351,70},
                 {remote,
                  {351,70},
                  {atom,{351,70},erlang},
                  {atom,{351,70},error}},
                 [{block,0,
                   [{tuple,
                     {351,70},
                     [{atom,{351,70},assertMatch},
                      {cons,
                       {351,70},
                       {tuple,
                        {351,70},
                        [{atom,{351,70},module},
                         {atom,{351,70},beam_doc_SUITE}]},
                       {cons,
                        {351,70},
                        {tuple,
                         {351,70},
                         [{atom,{351,70},line},{integer,{351,70},351}]},
                        {cons,
                         {351,70},
                         {tuple,
                          {351,70},
                          [{atom,{351,70},expression},
                           {string,{351,70},"PrivateCBT"}]},
                         {cons,
                          {351,70},
                          {tuple,
                           {351,70},
                           [{atom,{351,70},pattern},
                            {string,
                             {351,70},
                             "{ { type , private_cb_t , 0 } , _ , _ , none , # { exported := false } }"}]},
                          {cons,
                           {351,70},
                           {tuple,
                            {351,70},
                            [{atom,{351,70},value},{var,{351,70},'X__V'}]},
                           {nil,{351,70}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,352,195},
    {block,
     {352,6},
     [{call,
       {352,6},
       {'fun',
        {352,6},
        {clauses,
         [{clause,
           {352,6},
           [],[],
           [{'case',
             {352,6},
             {var,{352,87},'OpaqueT'},
             [{clause,
               {352,18},
               [{tuple,
                 {352,18},
                 [{tuple,
                   {352,19},
                   [{atom,{352,20},type},
                    {atom,{352,25},opaque_t},
                    {integer,{352,34},0}]},
                  {var,{352,37},'_'},
                  {cons,
                   {352,40},
                   {bin,
                    {352,41},
                    [{bin_element,
                      {352,43},
                      {string,{352,43},"opaque_t()"},
                      default,default}]},
                   {nil,{352,57}}},
                  {atom,{352,60},none},
                  {map,
                   {352,65},
                   [{map_field_exact,
                     {352,77},
                     {atom,{352,68},exported},
                     {atom,{352,80},true}}]}]}],
               [],
               [{atom,{352,85},ok}]},
              {clause,
               {352,85},
               [{var,{352,85},'X__V'}],
               [],
               [{call,
                 {352,85},
                 {remote,
                  {352,85},
                  {atom,{352,85},erlang},
                  {atom,{352,85},error}},
                 [{block,0,
                   [{tuple,
                     {352,85},
                     [{atom,{352,85},assertMatch},
                      {cons,
                       {352,85},
                       {tuple,
                        {352,85},
                        [{atom,{352,85},module},
                         {atom,{352,85},beam_doc_SUITE}]},
                       {cons,
                        {352,85},
                        {tuple,
                         {352,85},
                         [{atom,{352,85},line},{integer,{352,85},352}]},
                        {cons,
                         {352,85},
                         {tuple,
                          {352,85},
                          [{atom,{352,85},expression},
                           {string,{352,85},"OpaqueT"}]},
                         {cons,
                          {352,85},
                          {tuple,
                           {352,85},
                           [{atom,{352,85},pattern},
                            {string,
                             {352,85},
                             "{ { type , opaque_t , 0 } , _ , [ << \"opaque_t()\" >> ] , none , # { exported := true } }"}]},
                          {cons,
                           {352,85},
                           {tuple,
                            {352,85},
                            [{atom,{352,85},value},{var,{352,85},'X__V'}]},
                           {nil,{352,85}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,353,196},
    {block,
     {353,6},
     [{call,
       {353,6},
       {'fun',
        {353,6},
        {clauses,
         [{clause,
           {353,6},
           [],[],
           [{'case',
             {353,6},
             {var,{353,87},'PublicT'},
             [{clause,
               {353,18},
               [{tuple,
                 {353,18},
                 [{tuple,
                   {353,19},
                   [{atom,{353,20},type},
                    {atom,{353,25},public_t},
                    {integer,{353,34},0}]},
                  {var,{353,37},'_'},
                  {cons,
                   {353,40},
                   {bin,
                    {353,41},
                    [{bin_element,
                      {353,43},
                      {string,{353,43},"public_t()"},
                      default,default}]},
                   {nil,{353,57}}},
                  {atom,{353,60},none},
                  {map,
                   {353,65},
                   [{map_field_exact,
                     {353,77},
                     {atom,{353,68},exported},
                     {atom,{353,80},true}}]}]}],
               [],
               [{atom,{353,85},ok}]},
              {clause,
               {353,85},
               [{var,{353,85},'X__V'}],
               [],
               [{call,
                 {353,85},
                 {remote,
                  {353,85},
                  {atom,{353,85},erlang},
                  {atom,{353,85},error}},
                 [{block,0,
                   [{tuple,
                     {353,85},
                     [{atom,{353,85},assertMatch},
                      {cons,
                       {353,85},
                       {tuple,
                        {353,85},
                        [{atom,{353,85},module},
                         {atom,{353,85},beam_doc_SUITE}]},
                       {cons,
                        {353,85},
                        {tuple,
                         {353,85},
                         [{atom,{353,85},line},{integer,{353,85},353}]},
                        {cons,
                         {353,85},
                         {tuple,
                          {353,85},
                          [{atom,{353,85},expression},
                           {string,{353,85},"PublicT"}]},
                         {cons,
                          {353,85},
                          {tuple,
                           {353,85},
                           [{atom,{353,85},pattern},
                            {string,
                             {353,85},
                             "{ { type , public_t , 0 } , _ , [ << \"public_t()\" >> ] , none , # { exported := true } }"}]},
                          {cons,
                           {353,85},
                           {tuple,
                            {353,85},
                            [{atom,{353,85},value},{var,{353,85},'X__V'}]},
                           {nil,{353,85}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,354,197},
    {block,
     {354,6},
     [{call,
       {354,6},
       {'fun',
        {354,6},
        {clauses,
         [{clause,
           {354,6},
           [],[],
           [{'case',
             {354,6},
             {var,{354,90},'PrivateT'},
             [{clause,
               {354,18},
               [{tuple,
                 {354,18},
                 [{tuple,
                   {354,19},
                   [{atom,{354,20},type},
                    {atom,{354,25},private_t},
                    {integer,{354,35},0}]},
                  {var,{354,38},'_'},
                  {cons,
                   {354,41},
                   {bin,
                    {354,42},
                    [{bin_element,
                      {354,44},
                      {string,{354,44},"private_t()"},
                      default,default}]},
                   {nil,{354,59}}},
                  {atom,{354,62},none},
                  {map,
                   {354,67},
                   [{map_field_exact,
                     {354,79},
                     {atom,{354,70},exported},
                     {atom,{354,82},false}}]}]}],
               [],
               [{atom,{354,88},ok}]},
              {clause,
               {354,88},
               [{var,{354,88},'X__V'}],
               [],
               [{call,
                 {354,88},
                 {remote,
                  {354,88},
                  {atom,{354,88},erlang},
                  {atom,{354,88},error}},
                 [{block,0,
                   [{tuple,
                     {354,88},
                     [{atom,{354,88},assertMatch},
                      {cons,
                       {354,88},
                       {tuple,
                        {354,88},
                        [{atom,{354,88},module},
                         {atom,{354,88},beam_doc_SUITE}]},
                       {cons,
                        {354,88},
                        {tuple,
                         {354,88},
                         [{atom,{354,88},line},{integer,{354,88},354}]},
                        {cons,
                         {354,88},
                         {tuple,
                          {354,88},
                          [{atom,{354,88},expression},
                           {string,{354,88},"PrivateT"}]},
                         {cons,
                          {354,88},
                          {tuple,
                           {354,88},
                           [{atom,{354,88},pattern},
                            {string,
                             {354,88},
                             "{ { type , private_t , 0 } , _ , [ << \"private_t()\" >> ] , none , # { exported := false } }"}]},
                          {cons,
                           {354,88},
                           {tuple,
                            {354,88},
                            [{atom,{354,88},value},{var,{354,88},'X__V'}]},
                           {nil,{354,88}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,355,198},
    {block,
     {355,6},
     [{call,
       {355,6},
       {'fun',
        {355,6},
        {clauses,
         [{clause,
           {355,6},
           [],[],
           [{'case',
             {355,6},
             {var,{355,50},'CBar'},
             [{clause,
               {355,18},
               [{tuple,
                 {355,18},
                 [{tuple,
                   {355,19},
                   [{atom,{355,20},callback},
                    {atom,{355,29},bar},
                    {integer,{355,33},1}]},
                  {var,{355,36},'_'},
                  {var,{355,38},'_'},
                  {atom,{355,40},none},
                  {map,{355,45},[]}]}],
               [],
               [{atom,{355,48},ok}]},
              {clause,
               {355,48},
               [{var,{355,48},'X__V'}],
               [],
               [{call,
                 {355,48},
                 {remote,
                  {355,48},
                  {atom,{355,48},erlang},
                  {atom,{355,48},error}},
                 [{block,0,
                   [{tuple,
                     {355,48},
                     [{atom,{355,48},assertMatch},
                      {cons,
                       {355,48},
                       {tuple,
                        {355,48},
                        [{atom,{355,48},module},
                         {atom,{355,48},beam_doc_SUITE}]},
                       {cons,
                        {355,48},
                        {tuple,
                         {355,48},
                         [{atom,{355,48},line},{integer,{355,48},355}]},
                        {cons,
                         {355,48},
                         {tuple,
                          {355,48},
                          [{atom,{355,48},expression},
                           {string,{355,48},"CBar"}]},
                         {cons,
                          {355,48},
                          {tuple,
                           {355,48},
                           [{atom,{355,48},pattern},
                            {string,
                             {355,48},
                             "{ { callback , bar , 1 } , _ , _ , none , # { } }"}]},
                          {cons,
                           {355,48},
                           {tuple,
                            {355,48},
                            [{atom,{355,48},value},{var,{355,48},'X__V'}]},
                           {nil,{355,48}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,356,199},
    {block,
     {356,6},
     [{call,
       {356,6},
       {'fun',
        {356,6},
        {clauses,
         [{clause,
           {356,6},
           [],[],
           [{'case',
             {356,6},
             {var,{356,54},'Bounded'},
             [{clause,
               {356,18},
               [{tuple,
                 {356,18},
                 [{tuple,
                   {356,19},
                   [{atom,{356,20},function},
                    {atom,{356,29},bounded},
                    {integer,{356,37},2}]},
                  {var,{356,40},'_'},
                  {var,{356,42},'_'},
                  {atom,{356,44},none},
                  {map,{356,49},[]}]}],
               [],
               [{atom,{356,52},ok}]},
              {clause,
               {356,52},
               [{var,{356,52},'X__V'}],
               [],
               [{call,
                 {356,52},
                 {remote,
                  {356,52},
                  {atom,{356,52},erlang},
                  {atom,{356,52},error}},
                 [{block,0,
                   [{tuple,
                     {356,52},
                     [{atom,{356,52},assertMatch},
                      {cons,
                       {356,52},
                       {tuple,
                        {356,52},
                        [{atom,{356,52},module},
                         {atom,{356,52},beam_doc_SUITE}]},
                       {cons,
                        {356,52},
                        {tuple,
                         {356,52},
                         [{atom,{356,52},line},{integer,{356,52},356}]},
                        {cons,
                         {356,52},
                         {tuple,
                          {356,52},
                          [{atom,{356,52},expression},
                           {string,{356,52},"Bounded"}]},
                         {cons,
                          {356,52},
                          {tuple,
                           {356,52},
                           [{atom,{356,52},pattern},
                            {string,
                             {356,52},
                             "{ { function , bounded , 2 } , _ , _ , none , # { } }"}]},
                          {cons,
                           {356,52},
                           {tuple,
                            {356,52},
                            [{atom,{356,52},value},{var,{356,52},'X__V'}]},
                           {nil,{356,52}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,357,200},
    {block,
     {357,6},
     [{call,
       {357,6},
       {'fun',
        {357,6},
        {clauses,
         [{clause,
           {357,6},
           [],[],
           [{'case',
             {357,6},
             {var,{357,99},'HiddenTypeExposed'},
             [{clause,
               {357,18},
               [{tuple,
                 {357,18},
                 [{tuple,
                   {357,19},
                   [{atom,{357,20},function},
                    {atom,{357,29},hidden_type_exposed},
                    {integer,{357,49},0}]},
                  {tuple,
                   {357,52},
                   [{integer,{357,53},34},{integer,{357,56},1}]},
                  {cons,
                   {357,59},
                   {bin,
                    {357,60},
                    [{bin_element,
                      {357,62},
                      {string,{357,62},"hidden_type_exposed()"},
                      default,default}]},
                   {nil,{357,87}}},
                  {atom,{357,89},none},
                  {map,{357,94},[]}]}],
               [],
               [{atom,{357,97},ok}]},
              {clause,
               {357,97},
               [{var,{357,97},'X__V'}],
               [],
               [{call,
                 {357,97},
                 {remote,
                  {357,97},
                  {atom,{357,97},erlang},
                  {atom,{357,97},error}},
                 [{block,0,
                   [{tuple,
                     {357,97},
                     [{atom,{357,97},assertMatch},
                      {cons,
                       {357,97},
                       {tuple,
                        {357,97},
                        [{atom,{357,97},module},
                         {atom,{357,97},beam_doc_SUITE}]},
                       {cons,
                        {357,97},
                        {tuple,
                         {357,97},
                         [{atom,{357,97},line},{integer,{357,97},357}]},
                        {cons,
                         {357,97},
                         {tuple,
                          {357,97},
                          [{atom,{357,97},expression},
                           {string,{357,97},"HiddenTypeExposed"}]},
                         {cons,
                          {357,97},
                          {tuple,
                           {357,97},
                           [{atom,{357,97},pattern},
                            {string,
                             {357,97},
                             "{ { function , hidden_type_exposed , 0 } , { 34 , 1 } , [ << \"hidden_type_exposed()\" >> ] , none , # { } }"}]},
                          {cons,
                           {357,97},
                           {tuple,
                            {357,97},
                            [{atom,{357,97},value},{var,{357,97},'X__V'}]},
                           {nil,{357,97}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,358,201},
    {block,
     {358,6},
     [{call,
       {358,6},
       {'fun',
        {358,6},
        {clauses,
         [{clause,
           {358,6},
           [],[],
           [{'case',
             {358,6},
             {var,{358,70},'Hidden'},
             [{clause,
               {358,18},
               [{tuple,
                 {358,18},
                 [{tuple,
                   {358,19},
                   [{atom,{358,20},function},
                    {atom,{358,29},hidden},
                    {integer,{358,36},0}]},
                  {var,{358,39},'_'},
                  {cons,
                   {358,41},
                   {bin,
                    {358,42},
                    [{bin_element,
                      {358,44},
                      {string,{358,44},"hidden()"},
                      default,default}]},
                   {nil,{358,56}}},
                  {atom,{358,58},hidden},
                  {map,{358,65},[]}]}],
               [],
               [{atom,{358,68},ok}]},
              {clause,
               {358,68},
               [{var,{358,68},'X__V'}],
               [],
               [{call,
                 {358,68},
                 {remote,
                  {358,68},
                  {atom,{358,68},erlang},
                  {atom,{358,68},error}},
                 [{block,0,
                   [{tuple,
                     {358,68},
                     [{atom,{358,68},assertMatch},
                      {cons,
                       {358,68},
                       {tuple,
                        {358,68},
                        [{atom,{358,68},module},
                         {atom,{358,68},beam_doc_SUITE}]},
                       {cons,
                        {358,68},
                        {tuple,
                         {358,68},
                         [{atom,{358,68},line},{integer,{358,68},358}]},
                        {cons,
                         {358,68},
                         {tuple,
                          {358,68},
                          [{atom,{358,68},expression},
                           {string,{358,68},"Hidden"}]},
                         {cons,
                          {358,68},
                          {tuple,
                           {358,68},
                           [{atom,{358,68},pattern},
                            {string,
                             {358,68},
                             "{ { function , hidden , 0 } , _ , [ << \"hidden()\" >> ] , hidden , # { } }"}]},
                          {cons,
                           {358,68},
                           {tuple,
                            {358,68},
                            [{atom,{358,68},value},{var,{358,68},'X__V'}]},
                           {nil,{358,68}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,359,202},
    {block,
     {359,6},
     [{call,
       {359,6},
       {'fun',
        {359,6},
        {clauses,
         [{clause,
           {359,6},
           [],[],
           [{'case',
             {359,6},
             {var,{359,62},'Bar'},
             [{clause,
               {359,18},
               [{tuple,
                 {359,18},
                 [{tuple,
                   {359,19},
                   [{atom,{359,20},function},
                    {atom,{359,29},bar},
                    {integer,{359,33},0}]},
                  {var,{359,36},'_'},
                  {cons,
                   {359,38},
                   {bin,
                    {359,39},
                    [{bin_element,
                      {359,41},
                      {string,{359,41},"bar()"},
                      default,default}]},
                   {nil,{359,50}}},
                  {atom,{359,52},none},
                  {map,{359,57},[]}]}],
               [],
               [{atom,{359,60},ok}]},
              {clause,
               {359,60},
               [{var,{359,60},'X__V'}],
               [],
               [{call,
                 {359,60},
                 {remote,
                  {359,60},
                  {atom,{359,60},erlang},
                  {atom,{359,60},error}},
                 [{block,0,
                   [{tuple,
                     {359,60},
                     [{atom,{359,60},assertMatch},
                      {cons,
                       {359,60},
                       {tuple,
                        {359,60},
                        [{atom,{359,60},module},
                         {atom,{359,60},beam_doc_SUITE}]},
                       {cons,
                        {359,60},
                        {tuple,
                         {359,60},
                         [{atom,{359,60},line},{integer,{359,60},359}]},
                        {cons,
                         {359,60},
                         {tuple,
                          {359,60},
                          [{atom,{359,60},expression},
                           {string,{359,60},"Bar"}]},
                         {cons,
                          {359,60},
                          {tuple,
                           {359,60},
                           [{atom,{359,60},pattern},
                            {string,
                             {359,60},
                             "{ { function , bar , 0 } , _ , [ << \"bar()\" >> ] , none , # { } }"}]},
                          {cons,
                           {359,60},
                           {tuple,
                            {359,60},
                            [{atom,{359,60},value},{var,{359,60},'X__V'}]},
                           {nil,{359,60}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,361,203},
    {atom,{361,5},ok}]}]}.
{function,
 {364,1},
 export_all,1,
 [{clause,
   {364,1},
   [{var,{364,1},'_'}],
   [[{call,
      {364,1},
      {remote,{364,1},{atom,{364,1},fake},{atom,{364,1},is_beam_bif_info}},
      []}]],
   [{debug_line,364,204},{atom,{364,1},ignore}]},
  {clause,
   {364,1},
   [{var,{364,12},'Conf'}],
   [],
   [{debug_line,365,205},
    {match,
     {365,5},
     {var,{365,5},'ModuleName'},
     {call,
      {365,19},
      {remote,{365,19},{atom,{365,19},erlang},{atom,{365,19},atom_to_list}},
      [{atom,{365,19},export_all}]}},
    {debug_line,366,206},
    {match,
     {366,5},
     {tuple,{366,5},[{atom,{366,6},ok},{var,{366,10},'ModName'}]},
     {call,
      {366,21},
      {atom,{366,21},default_compile_file},
      [{var,{366,42},'Conf'},{var,{366,48},'ModuleName'}]}},
    {debug_line,367,207},
    {match,
     {367,5},
     {var,{367,5},'ImpCallback'},
     {map,
      {367,19},
      [{map_field_assoc,
        {367,30},
        {bin,
         {367,21},
         [{bin_element,{367,23},{string,{367,23},"en"},default,default}]},
        {bin,
         {367,33},
         [{bin_element,
           {367,35},
           {string,{367,35},"This is a test"},
           default,default}]}}]}},
    {debug_line,368,208},
    {match,
     {368,5},
     {var,{368,5},'FunctionDoc'},
     {map,
      {368,19},
      [{map_field_assoc,
        {368,30},
        {bin,
         {368,21},
         [{bin_element,{368,23},{string,{368,23},"en"},default,default}]},
        {bin,
         {368,33},
         [{bin_element,
           {368,35},
           {string,{368,35},"all_ok()\n\nCalls all_ok/0"},
           default,default}]}}]}},
    {debug_line,369,209},
    {match,
     {369,5},
     {tuple,
      {369,5},
      [{atom,{369,6},ok},
       {tuple,
        {369,10},
        [{atom,{369,11},docs_v1},
         {var,{369,20},'_'},
         {var,{369,22},'_'},
         {var,{369,25},'_'},
         {atom,{369,28},none},
         {var,{369,34},'_'},
         {cons,
          {370,11},
          {tuple,
           {370,12},
           [{tuple,
             {370,13},
             [{atom,{370,14},function},
              {atom,{370,24},main2},
              {integer,{370,30},0}]},
            {var,{370,33},'_'},
            {cons,
             {370,35},
             {bin,
              {370,36},
              [{bin_element,
                {370,38},
                {string,{370,38},"main2()"},
                default,default}]},
             {nil,{370,49}}},
            {map,
             {370,52},
             [{map_field_exact,
               {370,63},
               {bin,
                {370,54},
                [{bin_element,
                  {370,56},
                  {string,{370,56},"en"},
                  default,default}]},
               {bin,
                {370,66},
                [{bin_element,
                  {370,68},
                  {string,{370,68},"Second main"},
                  default,default}]}}]},
            {map,
             {371,13},
             [{map_field_exact,
               {371,21},
               {atom,{371,15},equiv},
               {bin,
                {371,24},
                [{bin_element,
                  {371,26},
                  {string,{371,26},"main()"},
                  default,default}]}}]}]},
          {cons,
           {372,12},
           {tuple,
            {372,12},
            [{tuple,
              {372,13},
              [{atom,{372,14},function},
               {atom,{372,24},main},
               {integer,{372,29},0}]},
             {var,{372,32},'_'},
             {cons,
              {372,34},
              {bin,
               {372,35},
               [{bin_element,
                 {372,37},
                 {string,{372,37},"main()"},
                 default,default}]},
              {nil,{372,47}}},
             {var,{372,50},'FunctionDoc'},
             {map,{372,63},[]}]},
           {cons,
            {373,12},
            {tuple,
             {373,12},
             [{tuple,
               {373,13},
               [{atom,{373,14},function},
                {atom,{373,24},all_ok},
                {integer,{373,31},0}]},
              {var,{373,34},'_'},
              {cons,
               {373,37},
               {bin,
                {373,38},
                [{bin_element,
                  {373,40},
                  {string,{373,40},"all_ok()"},
                  default,default}]},
               {nil,{373,52}}},
              {var,{373,54},'ImpCallback'},
              {map,
               {374,13},
               [{map_field_exact,
                 {374,21},
                 {atom,{374,15},equiv},
                 {bin,
                  {374,24},
                  [{bin_element,
                    {374,26},
                    {string,{374,26},"ok/0"},
                    default,default}]}}]}]},
            {nil,{375,11}}}}}]}]},
     {call,
      {375,17},
      {remote,{375,21},{atom,{375,17},code},{atom,{375,22},get_doc}},
      [{var,{375,30},'ModName'}]}},
    {debug_line,376,210},
    {atom,{376,5},ok}]}]}.
{function,
 {378,1},
 equiv,1,
 [{clause,
   {378,1},
   [{var,{378,1},'_'}],
   [[{call,
      {378,1},
      {remote,{378,1},{atom,{378,1},fake},{atom,{378,1},is_beam_bif_info}},
      []}]],
   [{debug_line,378,211},{atom,{378,1},ignore}]},
  {clause,
   {378,1},
   [{var,{378,7},'Conf'}],
   [],
   [{debug_line,379,212},
    {match,
     {379,5},
     {var,{379,5},'ModuleName'},
     {call,
      {379,19},
      {remote,{379,19},{atom,{379,19},erlang},{atom,{379,19},atom_to_list}},
      [{atom,{379,19},equiv}]}},
    {debug_line,380,213},
    {match,
     {380,5},
     {tuple,{380,5},[{atom,{380,6},ok},{var,{380,10},'ModName'}]},
     {call,
      {380,21},
      {atom,{380,21},default_compile_file},
      [{var,{380,42},'Conf'},{var,{380,48},'ModuleName'}]}},
    {debug_line,381,214},
    {match,
     {381,5},
     {tuple,
      {381,5},
      [{atom,{381,6},ok},
       {tuple,
        {381,10},
        [{atom,{381,11},docs_v1},
         {var,{381,20},'_'},
         {var,{381,22},'_'},
         {var,{381,25},'_'},
         {atom,{381,28},none},
         {var,{381,34},'_'},
         {cons,
          {382,11},
          {tuple,
           {382,12},
           [{tuple,
             {382,13},
             [{atom,{382,14},function},
              {atom,{382,24},main},
              {integer,{382,30},2}]},
            {var,{382,33},'_'},
            {cons,
             {382,35},
             {bin,
              {382,36},
              [{bin_element,
                {382,38},
                {string,{382,38},"main(A, B)"},
                default,default}]},
             {nil,{382,52}}},
            {atom,{382,55},none},
            {map,{383,13},[]}]},
          {cons,
           {384,13},
           {tuple,
            {384,13},
            [{tuple,
              {384,14},
              [{atom,{384,15},function},
               {atom,{384,25},main},
               {integer,{384,31},1}]},
             {var,{384,34},'_'},
             {cons,
              {384,36},
              {bin,
               {384,37},
               [{bin_element,
                 {384,39},
                 {string,{384,39},"main(A)"},
                 default,default}]},
              {nil,{384,50}}},
             {atom,{384,53},none},
             {map,
              {385,14},
              [{map_field_exact,
                {385,23},
                {atom,{385,17},equiv},
                {bin,
                 {385,26},
                 [{bin_element,
                   {385,28},
                   {string,{385,28},"main(A, 1)"},
                   default,default}]}}]}]},
           {nil,{386,11}}}}]}]},
     {call,
      {386,17},
      {remote,{386,21},{atom,{386,17},code},{atom,{386,22},get_doc}},
      [{var,{386,30},'ModName'}]}},
    {debug_line,387,215},
    {atom,{387,5},ok}]}]}.
{function,
 {389,1},
 spec,1,
 [{clause,
   {389,1},
   [{var,{389,1},'_'}],
   [[{call,
      {389,1},
      {remote,{389,1},{atom,{389,1},fake},{atom,{389,1},is_beam_bif_info}},
      []}]],
   [{debug_line,389,216},{atom,{389,1},ignore}]},
  {clause,
   {389,1},
   [{var,{389,6},'Conf'}],
   [],
   [{debug_line,390,217},
    {match,
     {390,5},
     {var,{390,5},'ModuleName'},
     {call,
      {390,19},
      {remote,{390,19},{atom,{390,19},erlang},{atom,{390,19},atom_to_list}},
      [{atom,{390,19},spec}]}},
    {debug_line,391,218},
    {match,
     {391,5},
     {tuple,{391,5},[{atom,{391,6},ok},{var,{391,10},'ModName'}]},
     {call,
      {391,21},
      {atom,{391,21},default_compile_file},
      [{var,{391,42},'Conf'},{var,{391,48},'ModuleName'}]}},
    {debug_line,392,219},
    {match,
     {392,5},
     {tuple,
      {392,5},
      [{atom,{392,6},ok},
       {tuple,
        {392,10},
        [{atom,{392,11},docs_v1},
         {var,{392,20},'_'},
         {var,{392,22},'_'},
         {var,{392,25},'_'},
         {map,
          {392,28},
          [{map_field_exact,
            {392,37},
            {bin,
             {392,31},
             [{bin_element,{392,32},{string,{392,32},"en"},default,[utf8]}]},
            {bin,
             {392,40},
             [{bin_element,{392,41},{string,{392,41},[]},default,[utf8]}]}}]},
         {var,{392,47},'_'},
         {cons,
          {393,11},
          {tuple,
           {393,12},
           [{tuple,
             {393,13},
             [{atom,{393,14},type},{atom,{393,19},no},{integer,{393,22},0}]},
            {var,{393,25},'_'},
            {cons,
             {393,27},
             {bin,
              {393,28},
              [{bin_element,
                {393,30},
                {string,{393,30},"no()"},
                default,default}]},
             {nil,{393,38}}},
            {atom,{393,40},none},
            {map,
             {393,45},
             [{map_field_exact,
               {393,56},
               {atom,{393,47},exported},
               {atom,{393,59},false}}]}]},
          {cons,
           {394,12},
           {tuple,
            {394,12},
            [{tuple,
              {394,13},
              [{atom,{394,14},type},{atom,{394,19},yes},{integer,{394,23},0}]},
             {var,{394,26},'_'},
             {cons,
              {394,28},
              {bin,
               {394,29},
               [{bin_element,
                 {394,31},
                 {string,{394,31},"yes()"},
                 default,default}]},
              {nil,{394,40}}},
             {atom,{394,42},none},
             {map,
              {394,47},
              [{map_field_exact,
                {394,58},
                {atom,{394,49},exported},
                {atom,{394,61},false}}]}]},
           {cons,
            {395,12},
            {tuple,
             {395,12},
             [{tuple,
               {395,13},
               [{atom,{395,14},callback},
                {atom,{395,23},me},
                {integer,{395,26},1}]},
              {var,{395,29},'_'},
              {cons,
               {395,31},
               {bin,
                {395,32},
                [{bin_element,
                  {395,34},
                  {string,{395,34},"me/1"},
                  default,default}]},
               {nil,{395,42}}},
              {atom,{395,44},none},
              {map,{395,49},[]}]},
            {cons,
             {396,12},
             {tuple,
              {396,12},
              [{tuple,
                {396,13},
                [{atom,{396,14},function},
                 {atom,{396,23},baz},
                 {integer,{396,27},1}]},
               {var,{396,30},'_'},
               {cons,
                {396,32},
                {bin,
                 {396,33},
                 [{bin_element,
                   {396,35},
                   {string,{396,35},"baz(X)"},
                   default,default}]},
                {nil,{396,45}}},
               {atom,{396,47},none},
               {map,{396,52},[]}]},
             {cons,
              {397,12},
              {tuple,
               {397,12},
               [{tuple,
                 {397,13},
                 [{atom,{397,14},function},
                  {atom,{397,23},foo},
                  {integer,{397,27},1}]},
                {var,{397,30},'_'},
                {cons,
                 {397,32},
                 {bin,
                  {397,33},
                  [{bin_element,
                    {397,35},
                    {string,{397,35},"foo(X)"},
                    default,default}]},
                 {nil,{397,45}}},
                {atom,{397,47},none},
                {map,{397,52},[]}]},
              {nil,{397,56}}}}}}}]}]},
     {call,
      {397,62},
      {remote,{397,66},{atom,{397,62},code},{atom,{397,67},get_doc}},
      [{var,{397,75},'ModName'}]}},
    {debug_line,398,220},
    {atom,{398,5},ok}]}]}.
{function,
 {400,1},
 user_defined_type,1,
 [{clause,
   {400,1},
   [{var,{400,1},'_'}],
   [[{call,
      {400,1},
      {remote,{400,1},{atom,{400,1},fake},{atom,{400,1},is_beam_bif_info}},
      []}]],
   [{debug_line,400,221},{atom,{400,1},ignore}]},
  {clause,
   {400,1},
   [{var,{400,19},'Conf'}],
   [],
   [{debug_line,401,222},
    {match,
     {401,5},
     {var,{401,5},'ModuleName'},
     {call,
      {401,19},
      {remote,{401,19},{atom,{401,19},erlang},{atom,{401,19},atom_to_list}},
      [{atom,{401,19},user_defined_type}]}},
    {debug_line,402,223},
    {match,
     {402,5},
     {tuple,{402,5},[{atom,{402,6},ok},{var,{402,10},'ModName'}]},
     {call,
      {402,21},
      {atom,{402,21},default_compile_file},
      [{var,{402,42},'Conf'},{var,{402,48},'ModuleName'}]}},
    {debug_line,403,224},
    {match,
     {403,5},
     {tuple,
      {403,5},
      [{atom,{403,6},ok},
       {tuple,
        {403,10},
        [{atom,{403,11},docs_v1},
         {var,{403,20},'_'},
         {var,{403,22},'_'},
         {var,{403,25},'_'},
         {map,
          {403,28},
          [{map_field_exact,
            {403,37},
            {bin,
             {403,31},
             [{bin_element,{403,32},{string,{403,32},"en"},default,[utf8]}]},
            {bin,
             {403,40},
             [{bin_element,{403,41},{string,{403,41},[]},default,[utf8]}]}}]},
         {var,{403,47},'_'},
         {nil,{403,50}}]}]},
     {call,
      {403,57},
      {remote,{403,61},{atom,{403,57},code},{atom,{403,62},get_doc}},
      [{var,{403,70},'ModName'}]}},
    {debug_line,404,225},
    {atom,{404,5},ok}]}]}.
{function,
 {406,1},
 deprecated,1,
 [{clause,
   {406,1},
   [{var,{406,1},'_'}],
   [[{call,
      {406,1},
      {remote,{406,1},{atom,{406,1},fake},{atom,{406,1},is_beam_bif_info}},
      []}]],
   [{debug_line,406,226},{atom,{406,1},ignore}]},
  {clause,
   {406,1},
   [{var,{406,12},'Conf'}],
   [],
   [{debug_line,407,227},
    {match,
     {407,5},
     {var,{407,5},'ModuleName'},
     {call,
      {407,19},
      {remote,{407,19},{atom,{407,19},erlang},{atom,{407,19},atom_to_list}},
      [{atom,{407,19},deprecated}]}},
    {debug_line,408,228},
    {match,
     {408,5},
     {tuple,{408,5},[{atom,{408,6},ok},{var,{408,10},'ModName'}]},
     {call,
      {408,21},
      {atom,{408,21},default_compile_file},
      [{var,{408,42},'Conf'},{var,{408,48},'ModuleName'}]}},
    {debug_line,409,229},
    {match,
     {409,5},
     {tuple,
      {409,5},
      [{atom,{409,6},ok},
       {tuple,
        {409,10},
        [{atom,{409,11},docs_v1},
         {var,{409,20},'_'},
         {var,{409,22},'_'},
         {var,{409,25},'_'},
         {atom,{409,28},none},
         {var,{409,34},'_'},
         {cons,
          {410,11},
          {tuple,
           {410,12},
           [{tuple,
             {410,13},
             [{atom,{410,14},type},{atom,{410,19},test},{integer,{410,24},1}]},
            {var,{410,27},'_'},
            {cons,
             {410,29},
             {bin,
              {410,30},
              [{bin_element,
                {410,32},
                {string,{410,32},"test(N)"},
                default,default}]},
             {nil,{410,43}}},
            {atom,{410,45},none},
            {map,
             {410,50},
             [{map_field_exact,
               {410,63},
               {atom,{410,52},deprecated},
               {bin,
                {410,66},
                [{bin_element,
                  {410,68},
                  {string,
                   {410,68},
                   "the type deprecated:test(_) is deprecated; Deprecation reason"},
                  default,default}]}}]}]},
          {cons,
           {411,12},
           {tuple,
            {411,12},
            [{tuple,
              {411,13},
              [{atom,{411,14},type},
               {atom,{411,19},test},
               {integer,{411,24},0}]},
             {var,{411,27},'_'},
             {cons,
              {411,29},
              {bin,
               {411,30},
               [{bin_element,
                 {411,32},
                 {string,{411,32},"test()"},
                 default,default}]},
              {nil,{411,42}}},
             {atom,{411,44},none},
             {map,
              {411,49},
              [{map_field_exact,
                {411,62},
                {atom,{411,51},deprecated},
                {bin,
                 {411,65},
                 [{bin_element,
                   {411,67},
                   {string,
                    {411,67},
                    "the type deprecated:test() is deprecated; see the documentation for details"},
                   default,default}]}}]}]},
           {cons,
            {412,12},
            {tuple,
             {412,12},
             [{tuple,
               {412,13},
               [{atom,{412,14},callback},
                {atom,{412,23},test},
                {integer,{412,28},1}]},
              {var,{412,31},'_'},
              {cons,
               {412,33},
               {bin,
                {412,34},
                [{bin_element,
                  {412,36},
                  {string,{412,36},"test(N)"},
                  default,default}]},
               {nil,{412,47}}},
              {atom,{412,49},none},
              {map,
               {412,54},
               [{map_field_exact,
                 {412,67},
                 {atom,{412,56},deprecated},
                 {bin,
                  {412,70},
                  [{bin_element,
                    {412,72},
                    {string,
                     {412,72},
                     "the callback deprecated:test(_) is deprecated; Deprecation reason"},
                    default,default}]}}]}]},
            {cons,
             {413,12},
             {tuple,
              {413,12},
              [{tuple,
                {413,13},
                [{atom,{413,14},callback},
                 {atom,{413,23},test},
                 {integer,{413,28},0}]},
               {var,{413,31},'_'},
               {cons,
                {413,33},
                {bin,
                 {413,34},
                 [{bin_element,
                   {413,36},
                   {string,{413,36},"test()"},
                   default,default}]},
                {nil,{413,46}}},
               {atom,{413,48},none},
               {map,
                {413,53},
                [{map_field_exact,
                  {413,66},
                  {atom,{413,55},deprecated},
                  {bin,
                   {413,69},
                   [{bin_element,
                     {413,71},
                     {string,{413,71},"Meta reason"},
                     default,default}]}}]}]},
             {cons,
              {414,12},
              {tuple,
               {414,12},
               [{tuple,
                 {414,13},
                 [{atom,{414,14},function},
                  {atom,{414,23},test},
                  {integer,{414,28},2}]},
                {var,{414,31},'_'},
                {cons,
                 {414,33},
                 {bin,
                  {414,34},
                  [{bin_element,
                    {414,36},
                    {string,{414,36},"test(N, M)"},
                    default,default}]},
                 {nil,{414,50}}},
                {atom,{414,52},none},
                {map,
                 {414,57},
                 [{map_field_exact,
                   {414,70},
                   {atom,{414,59},deprecated},
                   {bin,
                    {414,73},
                    [{bin_element,
                      {414,75},
                      {string,{414,75},"Meta reason"},
                      default,default}]}}]}]},
              {cons,
               {415,12},
               {tuple,
                {415,12},
                [{tuple,
                  {415,13},
                  [{atom,{415,14},function},
                   {atom,{415,23},test},
                   {integer,{415,28},1}]},
                 {var,{415,31},'_'},
                 {cons,
                  {415,33},
                  {bin,
                   {415,34},
                   [{bin_element,
                     {415,36},
                     {string,{415,36},"test(N)"},
                     default,default}]},
                  {nil,{415,47}}},
                 {atom,{415,49},none},
                 {map,
                  {415,54},
                  [{map_field_exact,
                    {415,67},
                    {atom,{415,56},deprecated},
                    {bin,
                     {415,70},
                     [{bin_element,
                       {415,72},
                       {string,
                        {415,72},
                        "deprecated:test/1 is deprecated; Deprecation reason"},
                       default,default}]}}]}]},
               {cons,
                {416,12},
                {tuple,
                 {416,12},
                 [{tuple,
                   {416,13},
                   [{atom,{416,14},function},
                    {atom,{416,23},test},
                    {integer,{416,28},0}]},
                  {var,{416,31},'_'},
                  {cons,
                   {416,33},
                   {bin,
                    {416,34},
                    [{bin_element,
                      {416,36},
                      {string,{416,36},"test()"},
                      default,default}]},
                   {nil,{416,46}}},
                  {atom,{416,48},none},
                  {map,
                   {416,53},
                   [{map_field_exact,
                     {416,66},
                     {atom,{416,55},deprecated},
                     {bin,
                      {416,69},
                      [{bin_element,
                        {416,71},
                        {string,
                         {416,71},
                         "deprecated:test/0 is deprecated; see the documentation for details"},
                        default,default}]}}]}]},
                {nil,{416,143}}}}}}}}}]}]},
     {call,
      {417,9},
      {remote,{417,13},{atom,{417,9},code},{atom,{417,14},get_doc}},
      [{var,{417,22},'ModName'}]}},
    {debug_line,419,230},
    {match,
     {419,5},
     {tuple,{419,5},[{atom,{419,6},ok},{var,{419,10},'ModName'}]},
     {call,
      {419,21},
      {atom,{419,21},default_compile_file},
      [{var,{419,42},'Conf'},
       {var,{419,48},'ModuleName'},
       {block,0,
        [{cons,
          {419,60},
          {tuple,{419,61},[{atom,{419,62},d},{atom,{419,64},'TEST_WILDCARD'}]},
          {cons,
           {420,61},
           {tuple,
            {420,61},
            [{atom,{420,62},d},
             {atom,{420,65},'REASON'},
             {atom,{420,75},next_major_release}]},
           {nil,{420,94}}}}]}]}},
    {debug_line,421,231},
    {match,
     {421,5},
     {tuple,
      {421,5},
      [{atom,{421,6},ok},
       {tuple,
        {421,10},
        [{atom,{421,11},docs_v1},
         {var,{421,20},'_'},
         {var,{421,22},'_'},
         {var,{421,25},'_'},
         {atom,{421,28},none},
         {var,{421,34},'_'},
         {cons,
          {422,11},
          {tuple,
           {422,12},
           [{tuple,
             {422,13},
             [{atom,{422,14},type},{atom,{422,19},test},{integer,{422,24},1}]},
            {var,{422,27},'_'},
            {cons,
             {422,29},
             {bin,
              {422,30},
              [{bin_element,
                {422,32},
                {string,{422,32},"test(N)"},
                default,default}]},
             {nil,{422,43}}},
            {atom,{422,45},none},
            {map,
             {422,50},
             [{map_field_exact,
               {422,63},
               {atom,{422,52},deprecated},
               {bin,
                {422,66},
                [{bin_element,
                  {422,68},
                  {string,
                   {422,68},
                   "the type deprecated:test(_) is deprecated; see the documentation for details"},
                  default,default}]}}]}]},
          {cons,
           {423,12},
           {tuple,
            {423,12},
            [{tuple,
              {423,13},
              [{atom,{423,14},type},
               {atom,{423,19},test},
               {integer,{423,24},0}]},
             {var,{423,27},'_'},
             {cons,
              {423,29},
              {bin,
               {423,30},
               [{bin_element,
                 {423,32},
                 {string,{423,32},"test()"},
                 default,default}]},
              {nil,{423,42}}},
             {atom,{423,44},none},
             {map,
              {423,49},
              [{map_field_exact,
                {423,62},
                {atom,{423,51},deprecated},
                {bin,
                 {423,65},
                 [{bin_element,
                   {423,67},
                   {string,
                    {423,67},
                    "the type deprecated:test() is deprecated; see the documentation for details"},
                   default,default}]}}]}]},
           {cons,
            {424,12},
            {tuple,
             {424,12},
             [{tuple,
               {424,13},
               [{atom,{424,14},callback},
                {atom,{424,23},test},
                {integer,{424,28},1}]},
              {var,{424,31},'_'},
              {cons,
               {424,33},
               {bin,
                {424,34},
                [{bin_element,
                  {424,36},
                  {string,{424,36},"test(N)"},
                  default,default}]},
               {nil,{424,47}}},
              {atom,{424,49},none},
              {map,
               {424,54},
               [{map_field_exact,
                 {424,67},
                 {atom,{424,56},deprecated},
                 {bin,
                  {424,70},
                  [{bin_element,
                    {424,72},
                    {string,
                     {424,72},
                     "the callback deprecated:test(_) is deprecated; will be removed in the next major release. See the documentation for details"},
                    default,default}]}}]}]},
            {cons,
             {425,12},
             {tuple,
              {425,12},
              [{tuple,
                {425,13},
                [{atom,{425,14},callback},
                 {atom,{425,23},test},
                 {integer,{425,28},0}]},
               {var,{425,31},'_'},
               {cons,
                {425,33},
                {bin,
                 {425,34},
                 [{bin_element,
                   {425,36},
                   {string,{425,36},"test()"},
                   default,default}]},
                {nil,{425,46}}},
               {atom,{425,48},none},
               {map,
                {425,53},
                [{map_field_exact,
                  {425,66},
                  {atom,{425,55},deprecated},
                  {bin,
                   {425,69},
                   [{bin_element,
                     {425,71},
                     {string,{425,71},"Meta reason"},
                     default,default}]}}]}]},
             {cons,
              {426,12},
              {tuple,
               {426,12},
               [{tuple,
                 {426,13},
                 [{atom,{426,14},function},
                  {atom,{426,23},test},
                  {integer,{426,28},2}]},
                {var,{426,31},'_'},
                {cons,
                 {426,33},
                 {bin,
                  {426,34},
                  [{bin_element,
                    {426,36},
                    {string,{426,36},"test(N, M)"},
                    default,default}]},
                 {nil,{426,50}}},
                {atom,{426,52},none},
                {map,
                 {426,57},
                 [{map_field_exact,
                   {426,70},
                   {atom,{426,59},deprecated},
                   {bin,
                    {426,73},
                    [{bin_element,
                      {426,75},
                      {string,{426,75},"Meta reason"},
                      default,default}]}}]}]},
              {cons,
               {427,12},
               {tuple,
                {427,12},
                [{tuple,
                  {427,13},
                  [{atom,{427,14},function},
                   {atom,{427,23},test},
                   {integer,{427,28},1}]},
                 {var,{427,31},'_'},
                 {cons,
                  {427,33},
                  {bin,
                   {427,34},
                   [{bin_element,
                     {427,36},
                     {string,{427,36},"test(N)"},
                     default,default}]},
                  {nil,{427,47}}},
                 {atom,{427,49},none},
                 {map,
                  {427,54},
                  [{map_field_exact,
                    {427,67},
                    {atom,{427,56},deprecated},
                    {bin,
                     {427,70},
                     [{bin_element,
                       {427,72},
                       {string,
                        {427,72},
                        "deprecated:test/1 is deprecated; will be removed in the next major release. See the documentation for details"},
                       default,default}]}}]}]},
               {cons,
                {428,12},
                {tuple,
                 {428,12},
                 [{tuple,
                   {428,13},
                   [{atom,{428,14},function},
                    {atom,{428,23},test},
                    {integer,{428,28},0}]},
                  {var,{428,31},'_'},
                  {cons,
                   {428,33},
                   {bin,
                    {428,34},
                    [{bin_element,
                      {428,36},
                      {string,{428,36},"test()"},
                      default,default}]},
                   {nil,{428,46}}},
                  {atom,{428,48},none},
                  {map,
                   {428,53},
                   [{map_field_exact,
                     {428,66},
                     {atom,{428,55},deprecated},
                     {bin,
                      {428,69},
                      [{bin_element,
                        {428,71},
                        {string,
                         {428,71},
                         "deprecated:test/0 is deprecated; see the documentation for details"},
                        default,default}]}}]}]},
                {nil,{428,143}}}}}}}}}]}]},
     {call,
      {429,9},
      {remote,{429,13},{atom,{429,9},code},{atom,{429,14},get_doc}},
      [{var,{429,22},'ModName'}]}},
    {debug_line,431,232},
    {match,
     {431,5},
     {tuple,{431,5},[{atom,{431,6},ok},{var,{431,10},'ModName'}]},
     {call,
      {431,21},
      {atom,{431,21},default_compile_file},
      [{var,{431,42},'Conf'},
       {var,{431,48},'ModuleName'},
       {block,0,
        [{cons,
          {431,60},
          {tuple,{431,61},[{atom,{431,62},d},{atom,{431,64},'ALL_WILDCARD'}]},
          {cons,
           {432,61},
           {tuple,
            {432,61},
            [{atom,{432,62},d},
             {atom,{432,64},'REASON'},
             {atom,{432,73},next_version}]},
           {cons,
            {433,61},
            {tuple,
             {433,61},
             [{atom,{433,62},d},
              {atom,{433,64},'TREASON'},
              {atom,{433,74},eventually}]},
            {nil,{433,85}}}}}]}]}},
    {debug_line,434,233},
    {match,
     {434,5},
     {tuple,
      {434,5},
      [{atom,{434,6},ok},
       {tuple,
        {434,10},
        [{atom,{434,11},docs_v1},
         {var,{434,20},'_'},
         {var,{434,22},'_'},
         {var,{434,25},'_'},
         {atom,{434,28},none},
         {var,{434,34},'_'},
         {cons,
          {435,11},
          {tuple,
           {435,12},
           [{tuple,
             {435,13},
             [{atom,{435,14},type},{atom,{435,19},test},{integer,{435,24},1}]},
            {var,{435,27},'_'},
            {cons,
             {435,29},
             {bin,
              {435,30},
              [{bin_element,
                {435,32},
                {string,{435,32},"test(N)"},
                default,default}]},
             {nil,{435,43}}},
            {atom,{435,45},none},
            {map,
             {435,50},
             [{map_field_exact,
               {435,63},
               {atom,{435,52},deprecated},
               {bin,
                {435,66},
                [{bin_element,
                  {435,68},
                  {string,
                   {435,68},
                   "the type deprecated:test(_) is deprecated; will be removed in a future release. See the documentation for details"},
                  default,default}]}}]}]},
          {cons,
           {436,12},
           {tuple,
            {436,12},
            [{tuple,
              {436,13},
              [{atom,{436,14},type},
               {atom,{436,19},test},
               {integer,{436,24},0}]},
             {var,{436,27},'_'},
             {cons,
              {436,29},
              {bin,
               {436,30},
               [{bin_element,
                 {436,32},
                 {string,{436,32},"test()"},
                 default,default}]},
              {nil,{436,42}}},
             {atom,{436,44},none},
             {map,
              {436,49},
              [{map_field_exact,
                {436,62},
                {atom,{436,51},deprecated},
                {bin,
                 {436,65},
                 [{bin_element,
                   {436,67},
                   {string,
                    {436,67},
                    "the type deprecated:test() is deprecated; see the documentation for details"},
                   default,default}]}}]}]},
           {cons,
            {437,12},
            {tuple,
             {437,12},
             [{tuple,
               {437,13},
               [{atom,{437,14},callback},
                {atom,{437,23},test},
                {integer,{437,28},1}]},
              {var,{437,31},'_'},
              {cons,
               {437,33},
               {bin,
                {437,34},
                [{bin_element,
                  {437,36},
                  {string,{437,36},"test(N)"},
                  default,default}]},
               {nil,{437,47}}},
              {atom,{437,49},none},
              {map,
               {437,54},
               [{map_field_exact,
                 {437,67},
                 {atom,{437,56},deprecated},
                 {bin,
                  {437,70},
                  [{bin_element,
                    {437,72},
                    {string,
                     {437,72},
                     "the callback deprecated:test(_) is deprecated; will be removed in the next version. See the documentation for details"},
                    default,default}]}}]}]},
            {cons,
             {438,12},
             {tuple,
              {438,12},
              [{tuple,
                {438,13},
                [{atom,{438,14},callback},
                 {atom,{438,23},test},
                 {integer,{438,28},0}]},
               {var,{438,31},'_'},
               {cons,
                {438,33},
                {bin,
                 {438,34},
                 [{bin_element,
                   {438,36},
                   {string,{438,36},"test()"},
                   default,default}]},
                {nil,{438,46}}},
               {atom,{438,48},none},
               {map,
                {438,53},
                [{map_field_exact,
                  {438,66},
                  {atom,{438,55},deprecated},
                  {bin,
                   {438,69},
                   [{bin_element,
                     {438,71},
                     {string,{438,71},"Meta reason"},
                     default,default}]}}]}]},
             {cons,
              {439,12},
              {tuple,
               {439,12},
               [{tuple,
                 {439,13},
                 [{atom,{439,14},function},
                  {atom,{439,23},test},
                  {integer,{439,28},2}]},
                {var,{439,31},'_'},
                {cons,
                 {439,33},
                 {bin,
                  {439,34},
                  [{bin_element,
                    {439,36},
                    {string,{439,36},"test(N, M)"},
                    default,default}]},
                 {nil,{439,50}}},
                {atom,{439,52},none},
                {map,
                 {439,57},
                 [{map_field_exact,
                   {439,70},
                   {atom,{439,59},deprecated},
                   {bin,
                    {439,73},
                    [{bin_element,
                      {439,75},
                      {string,{439,75},"Meta reason"},
                      default,default}]}}]}]},
              {cons,
               {440,12},
               {tuple,
                {440,12},
                [{tuple,
                  {440,13},
                  [{atom,{440,14},function},
                   {atom,{440,23},test},
                   {integer,{440,28},1}]},
                 {var,{440,31},'_'},
                 {cons,
                  {440,33},
                  {bin,
                   {440,34},
                   [{bin_element,
                     {440,36},
                     {string,{440,36},"test(N)"},
                     default,default}]},
                  {nil,{440,47}}},
                 {atom,{440,49},none},
                 {map,
                  {440,54},
                  [{map_field_exact,
                    {440,67},
                    {atom,{440,56},deprecated},
                    {bin,
                     {440,70},
                     [{bin_element,
                       {440,72},
                       {string,
                        {440,72},
                        "deprecated:test/1 is deprecated; will be removed in the next version. See the documentation for details"},
                       default,default}]}}]}]},
               {cons,
                {441,12},
                {tuple,
                 {441,12},
                 [{tuple,
                   {441,13},
                   [{atom,{441,14},function},
                    {atom,{441,23},test},
                    {integer,{441,28},0}]},
                  {var,{441,31},'_'},
                  {cons,
                   {441,33},
                   {bin,
                    {441,34},
                    [{bin_element,
                      {441,36},
                      {string,{441,36},"test()"},
                      default,default}]},
                   {nil,{441,46}}},
                  {atom,{441,48},none},
                  {map,
                   {441,53},
                   [{map_field_exact,
                     {441,66},
                     {atom,{441,55},deprecated},
                     {bin,
                      {441,69},
                      [{bin_element,
                        {441,71},
                        {string,
                         {441,71},
                         "deprecated:test/0 is deprecated; see the documentation for details"},
                        default,default}]}}]}]},
                {nil,{441,143}}}}}}}}}]}]},
     {call,
      {442,9},
      {remote,{442,13},{atom,{442,9},code},{atom,{442,14},get_doc}},
      [{var,{442,22},'ModName'}]}},
    {debug_line,443,234},
    {atom,{443,5},ok}]}]}.
{function,
    {445,1},
    warn_missing_doc,1,
    [{clause,
         {445,1},
         [{var,{445,1},'_'}],
         [[{call,
               {445,1},
               {remote,
                   {445,1},
                   {atom,{445,1},fake},
                   {atom,{445,1},is_beam_bif_info}},
               []}]],
         [{debug_line,445,235},{atom,{445,1},ignore}]},
     {clause,
         {445,1},
         [{var,{445,18},'Conf'}],
         [],
         [{debug_line,447,236},
          {call,
              {447,5},
              {atom,{447,5},warn_missing_doc},
              [{var,{447,22},'Conf'},
               {block,0,
                   [{cons,
                        {447,28},
                        {atom,{447,29},function},
                        {cons,
                            {447,39},
                            {atom,{447,39},type},
                            {cons,
                                {447,45},
                                {atom,{447,45},callback},
                                {nil,{447,53}}}}}]},
               {block,0,
                   [{cons,
                        {447,56},
                        {atom,{447,57},warn_missing_doc},
                        {nil,{447,73}}}]}]},
          {debug_line,448,237},
          {call,
              {448,5},
              {atom,{448,5},warn_missing_doc},
              [{var,{448,22},'Conf'},
               {block,0,
                   [{cons,{448,28},{atom,{448,29},function},{nil,{448,37}}}]},
               {block,0,
                   [{cons,
                        {448,40},
                        {atom,{448,41},warn_missing_doc_functions},
                        {nil,{448,67}}}]}]},
          {debug_line,449,238},
          {call,
              {449,5},
              {atom,{449,5},warn_missing_doc},
              [{var,{449,22},'Conf'},
               {block,0,
                   [{cons,
                        {449,28},
                        {atom,{449,29},function},
                        {cons,{449,39},{atom,{449,39},type},{nil,{449,43}}}}]},
               {block,0,
                   [{cons,
                        {449,46},
                        {atom,{449,47},warn_missing_doc_functions},
                        {cons,
                            {449,75},
                            {atom,{449,75},warn_missing_doc_types},
                            {nil,{449,97}}}}]}]},
          {debug_line,450,239},
          {call,
              {450,5},
              {atom,{450,5},warn_missing_doc},
              [{var,{450,22},'Conf'},
               {block,0,
                   [{cons,
                        {450,28},
                        {atom,{450,29},type},
                        {cons,
                            {450,35},
                            {atom,{450,35},callback},
                            {nil,{450,43}}}}]},
               {block,0,
                   [{cons,
                        {450,46},
                        {atom,{450,47},warn_missing_doc_types},
                        {cons,
                            {450,71},
                            {atom,{450,71},warn_missing_doc_callbacks},
                            {nil,{450,97}}}}]}]},
          {debug_line,451,240},
          {call,
              {451,5},
              {atom,{451,5},warn_missing_doc},
              [{var,{451,22},'Conf'},
               {block,0,
                   [{cons,{451,28},{atom,{451,29},callback},{nil,{451,37}}}]},
               {block,0,
                   [{cons,
                        {451,40},
                        {atom,{451,41},warn_missing_doc_callbacks},
                        {nil,{451,67}}}]}]},
          {debug_line,453,241},
          {call,
              {453,5},
              {atom,{453,5},warn_missing_doc},
              [{var,{453,22},'Conf'},
               {block,0,
                   [{cons,
                        {453,28},
                        {atom,{453,29},type},
                        {cons,
                            {453,35},
                            {atom,{453,35},callback},
                            {nil,{453,43}}}}]},
               {block,0,
                   [{cons,
                        {453,46},
                        {atom,{453,47},warn_missing_doc},
                        {cons,
                            {453,65},
                            {atom,{453,65},nowarn_missing_doc_functions},
                            {nil,{453,93}}}}]}]},
          {debug_line,454,242},
          {call,
              {454,5},
              {atom,{454,5},warn_missing_doc},
              [{var,{454,22},'Conf'},
               {block,0,
                   [{cons,
                        {454,28},
                        {atom,{454,29},function},
                        {cons,
                            {454,39},
                            {atom,{454,39},callback},
                            {nil,{454,47}}}}]},
               {block,0,
                   [{cons,
                        {454,50},
                        {atom,{454,51},warn_missing_doc},
                        {cons,
                            {454,69},
                            {atom,{454,69},nowarn_missing_doc_types},
                            {nil,{454,93}}}}]}]},
          {debug_line,455,243},
          {call,
              {455,5},
              {atom,{455,5},warn_missing_doc},
              [{var,{455,22},'Conf'},
               {block,0,[{cons,{455,28},{atom,{455,29},type},{nil,{455,33}}}]},
               {block,0,
                   [{cons,
                        {455,36},
                        {atom,{455,37},warn_missing_doc},
                        {cons,
                            {455,55},
                            {atom,{455,55},nowarn_missing_doc_callbacks},
                            {cons,
                                {455,85},
                                {atom,{455,85},nowarn_missing_doc_functions},
                                {nil,{455,113}}}}}]}]},
          {debug_line,456,244},
          {call,
              {456,5},
              {atom,{456,5},warn_missing_doc},
              [{var,{456,22},'Conf'},
               {nil,{456,28}},
               {block,0,
                   [{cons,
                        {456,32},
                        {atom,{456,33},warn_missing_doc_functions},
                        {cons,
                            {456,61},
                            {atom,{456,61},nowarn_missing_doc},
                            {nil,{456,79}}}}]}]},
          {debug_line,458,245},
          {atom,{458,5},ok}]}]}.
{function,
 {460,1},
 warn_missing_doc,3,
 [{clause,
   {460,1},
   [{var,{460,1},'_'},{var,{460,1},'_'},{var,{460,1},'_'}],
   [[{call,
      {460,1},
      {remote,{460,1},{atom,{460,1},fake},{atom,{460,1},is_beam_bif_info}},
      []}]],
   [{debug_line,460,246},{atom,{460,1},ignore}]},
  {clause,
   {460,1},
   [{var,{460,18},'Conf'},
    {var,{460,24},'ExpectedWarnings'},
    {var,{460,42},'Options'}],
   [],
   [{debug_line,461,247},
    {match,
     {461,5},
     {var,{461,5},'ModuleName'},
     {call,
      {461,19},
      {remote,{461,19},{atom,{461,19},erlang},{atom,{461,19},atom_to_list}},
      [{atom,{461,19},warn_missing_doc}]}},
    {debug_line,462,248},
    {match,
     {462,5},
     {tuple,
      {462,5},
      [{atom,{462,6},ok},{var,{462,10},'ModName'},{var,{462,19},'Ws'}]},
     {call,
      {463,9},
      {atom,{463,9},default_compile_file},
      [{var,{463,30},'Conf'},
       {var,{463,36},'ModuleName'},
       {block,0,
        [{debug_line,463,249},
         {cons,
          {463,48},
          {atom,{463,49},return_warnings},
          {cons,
           {463,66},
           {atom,{463,66},report},
           {var,{463,75},'Options'}}}]}]}},
    {debug_line,465,250},
    {match,
     {465,5},
     {tuple,
      {465,5},
      [{atom,{465,6},ok},
       {tuple,
        {465,10},
        [{atom,{465,11},docs_v1},
         {var,{465,20},'_'},
         {var,{465,22},'_'},
         {var,{465,25},'_'},
         {atom,{465,28},none},
         {var,{465,34},'_'},
         {cons,
          {466,11},
          {tuple,
           {466,12},
           [{tuple,
             {466,13},
             [{atom,{466,14},type},{atom,{466,19},test},{integer,{466,24},1}]},
            {var,{466,27},'_'},
            {cons,
             {466,29},
             {bin,
              {466,30},
              [{bin_element,
                {466,32},
                {string,{466,32},"test(N)"},
                default,default}]},
             {nil,{466,43}}},
            {atom,{466,45},none},
            {var,{466,50},'_'}]},
          {cons,
           {467,12},
           {tuple,
            {467,12},
            [{tuple,
              {467,13},
              [{atom,{467,14},type},
               {atom,{467,19},test},
               {integer,{467,24},0}]},
             {var,{467,27},'_'},
             {cons,
              {467,29},
              {bin,
               {467,30},
               [{bin_element,
                 {467,32},
                 {string,{467,32},"test()"},
                 default,default}]},
              {nil,{467,42}}},
             {atom,{467,44},none},
             {var,{467,49},'_'}]},
           {cons,
            {468,12},
            {tuple,
             {468,12},
             [{tuple,
               {468,13},
               [{atom,{468,14},callback},
                {atom,{468,23},test},
                {integer,{468,28},0}]},
              {var,{468,31},'_'},
              {cons,
               {468,33},
               {bin,
                {468,34},
                [{bin_element,
                  {468,36},
                  {string,{468,36},"test()"},
                  default,default}]},
               {nil,{468,46}}},
              {atom,{468,48},none},
              {var,{468,53},'_'}]},
            {cons,
             {469,12},
             {tuple,
              {469,12},
              [{tuple,
                {469,13},
                [{atom,{469,14},function},
                 {atom,{469,23},test},
                 {integer,{469,28},1}]},
               {var,{469,31},'_'},
               {cons,
                {469,33},
                {bin,
                 {469,34},
                 [{bin_element,
                   {469,36},
                   {string,{469,36},"test(N)"},
                   default,default}]},
                {nil,{469,47}}},
               {atom,{469,49},none},
               {var,{469,54},'_'}]},
             {cons,
              {470,12},
              {tuple,
               {470,12},
               [{tuple,
                 {470,13},
                 [{atom,{470,14},function},
                  {atom,{470,23},test},
                  {integer,{470,28},0}]},
                {var,{470,31},'_'},
                {cons,
                 {470,33},
                 {bin,
                  {470,34},
                  [{bin_element,
                    {470,36},
                    {string,{470,36},"test()"},
                    default,default}]},
                 {nil,{470,46}}},
                {atom,{470,48},none},
                {var,{470,53},'_'}]},
              {cons,
               {471,12},
               {tuple,
                {471,12},
                [{tuple,
                  {471,13},
                  [{atom,{471,14},function},
                   {atom,{471,23},test},
                   {integer,{471,28},2}]},
                 {var,{471,31},'_'},
                 {cons,
                  {471,33},
                  {bin,
                   {471,34},
                   [{bin_element,
                     {471,36},
                     {string,{471,36},"test(N, M)"},
                     default,default}]},
                  {nil,{471,50}}},
                 {atom,{471,52},none},
                 {var,{471,57},'_'}]},
               {nil,{471,59}}}}}}}}]}]},
     {call,
      {472,9},
      {remote,{472,13},{atom,{472,9},code},{atom,{472,14},get_doc}},
      [{var,{472,22},'ModName'}]}},
    {debug_line,474,251},
    {'case',
     {474,5},
     {var,{474,10},'ExpectedWarnings'},
     [{clause,
       {475,9},
       [{nil,{475,9}}],
       [],
       [{debug_line,476,252},
        {block,
         {476,14},
         [{call,
           {476,14},
           {'fun',
            {476,14},
            {clauses,
             [{clause,
               {476,14},
               [],[],
               [{match,{476,14},{var,{476,14},'X__X'},{nil,{476,26}}},
                {'case',
                 {476,27},
                 {var,{476,29},'Ws'},
                 [{clause,
                   {476,29},
                   [{var,{476,29},'X__X'}],
                   [],
                   [{atom,{476,29},ok}]},
                  {clause,
                   {476,29},
                   [{var,{476,29},'X__V'}],
                   [],
                   [{call,
                     {476,29},
                     {remote,
                      {476,29},
                      {atom,{476,29},erlang},
                      {atom,{476,29},error}},
                     [{block,0,
                       [{tuple,
                         {476,29},
                         [{atom,{476,29},assertEqual},
                          {cons,
                           {476,29},
                           {tuple,
                            {476,29},
                            [{atom,{476,29},module},
                             {atom,{476,29},beam_doc_SUITE}]},
                           {cons,
                            {476,29},
                            {tuple,
                             {476,29},
                             [{atom,{476,29},line},{integer,{476,29},476}]},
                            {cons,
                             {476,29},
                             {tuple,
                              {476,29},
                              [{atom,{476,29},expression},
                               {string,{476,29},"Ws"}]},
                             {cons,
                              {476,29},
                              {tuple,
                               {476,29},
                               [{atom,{476,29},expected},
                                {var,{476,29},'X__X'}]},
                              {cons,
                               {476,29},
                               {tuple,
                                {476,29},
                                [{atom,{476,29},value},{var,{476,29},'X__V'}]},
                               {nil,{476,29}}}}}}}]}]}]}]}]}]}]}},
           []}]}]},
      {clause,
       {477,9},
       [{var,{477,9},'_'}],
       [],
       [{debug_line,478,253},
        {match,
         {478,13},
         {cons,
          {478,13},
          {tuple,{478,14},[{var,{478,15},'File'},{var,{478,20},'Warnings'}]},
          {var,{478,32},'Hrl'}},
         {var,{478,39},'Ws'}},
        {debug_line,479,254},
        {match,
         {479,13},
         {var,{479,13},'ExpectedWarningCount'},
         {op,
          {479,38},
          '+',
          {integer,{479,36},1},
          {call,
           {479,40},
           {remote,{479,45},{atom,{479,40},lists},{atom,{479,46},sum}},
           [{block,0,
             [{debug_line,480,255},
              {call,
               {480,42},
               {remote,{480,47},{atom,{480,42},lists},{atom,{480,48},flatten}},
               [{block,0,
                 [{debug_line,481,256},
                  {cons,
                   {481,44},
                   {lc,
                    {481,45},
                    {block,0,[{integer,{481,46},2}]},
                    [{block,0,[{atom,{481,51},true}]},
                     {call,
                      {481,51},
                      {remote,
                       {481,56},
                       {atom,{481,51},lists},
                       {atom,{481,57},member}},
                      [{atom,{481,64},type},
                       {var,{481,70},'ExpectedWarnings'}]}]},
                   {cons,
                    {482,45},
                    {lc,
                     {482,45},
                     {block,0,[{debug_line,482,257},{integer,{482,46},1}]},
                     [{block,0,[{atom,{482,51},true}]},
                      {call,
                       {482,51},
                       {remote,
                        {482,56},
                        {atom,{482,51},lists},
                        {atom,{482,57},member}},
                       [{atom,{482,64},callback},
                        {var,{482,74},'ExpectedWarnings'}]}]},
                    {cons,
                     {483,45},
                     {lc,
                      {483,45},
                      {block,0,[{debug_line,483,258},{integer,{483,46},2}]},
                      [{block,0,[{atom,{483,51},true}]},
                       {call,
                        {483,51},
                        {remote,
                         {483,56},
                         {atom,{483,51},lists},
                         {atom,{483,57},member}},
                        [{atom,{483,64},function},
                         {var,{483,74},'ExpectedWarnings'}]}]},
                     {nil,{483,92}}}}}]}]}]}]}}},
        {debug_line,485,259},
        {block,
         {485,14},
         [{call,
           {485,14},
           {'fun',
            {485,14},
            {clauses,
             [{clause,
               {485,14},
               [],[],
               [{match,
                 {485,14},
                 {var,{485,14},'X__X'},
                 {string,{485,26},"warn_missing_doc.erl"}},
                {'case',
                 {485,26},
                 {call,
                  {485,50},
                  {remote,
                   {485,58},
                   {atom,{485,50},filename},
                   {atom,{485,59},basename}},
                  [{var,{485,68},'File'}]},
                 [{clause,
                   {485,72},
                   [{var,{485,72},'X__X'}],
                   [],
                   [{atom,{485,72},ok}]},
                  {clause,
                   {485,72},
                   [{var,{485,72},'X__V'}],
                   [],
                   [{call,
                     {485,72},
                     {remote,
                      {485,72},
                      {atom,{485,72},erlang},
                      {atom,{485,72},error}},
                     [{block,0,
                       [{tuple,
                         {485,72},
                         [{atom,{485,72},assertEqual},
                          {cons,
                           {485,72},
                           {tuple,
                            {485,72},
                            [{atom,{485,72},module},
                             {atom,{485,72},beam_doc_SUITE}]},
                           {cons,
                            {485,72},
                            {tuple,
                             {485,72},
                             [{atom,{485,72},line},{integer,{485,72},485}]},
                            {cons,
                             {485,72},
                             {tuple,
                              {485,72},
                              [{atom,{485,72},expression},
                               {string,
                                {485,72},
                                "filename : basename ( File )"}]},
                             {cons,
                              {485,72},
                              {tuple,
                               {485,72},
                               [{atom,{485,72},expected},
                                {var,{485,72},'X__X'}]},
                              {cons,
                               {485,72},
                               {tuple,
                                {485,72},
                                [{atom,{485,72},value},{var,{485,72},'X__V'}]},
                               {nil,{485,72}}}}}}}]}]}]}]}]}]}]}},
           []}]},
        {debug_line,486,260},
        {block,
         {486,14},
         [{call,
           {486,14},
           {'fun',
            {486,14},
            {clauses,
             [{clause,
               {486,14},
               [],[],
               [{match,
                 {486,14},
                 {var,{486,14},'X__X'},
                 {var,{486,26},'ExpectedWarningCount'}},
                {'case',
                 {486,26},
                 {call,
                  {486,48},
                  {remote,
                   {486,48},
                   {atom,{486,48},erlang},
                   {atom,{486,48},length}},
                  [{var,{486,55},'Warnings'}]},
                 [{clause,
                   {486,63},
                   [{var,{486,63},'X__X'}],
                   [],
                   [{atom,{486,63},ok}]},
                  {clause,
                   {486,63},
                   [{var,{486,63},'X__V'}],
                   [],
                   [{call,
                     {486,63},
                     {remote,
                      {486,63},
                      {atom,{486,63},erlang},
                      {atom,{486,63},error}},
                     [{block,0,
                       [{tuple,
                         {486,63},
                         [{atom,{486,63},assertEqual},
                          {cons,
                           {486,63},
                           {tuple,
                            {486,63},
                            [{atom,{486,63},module},
                             {atom,{486,63},beam_doc_SUITE}]},
                           {cons,
                            {486,63},
                            {tuple,
                             {486,63},
                             [{atom,{486,63},line},{integer,{486,63},486}]},
                            {cons,
                             {486,63},
                             {tuple,
                              {486,63},
                              [{atom,{486,63},expression},
                               {string,{486,63},"length ( Warnings )"}]},
                             {cons,
                              {486,63},
                              {tuple,
                               {486,63},
                               [{atom,{486,63},expected},
                                {var,{486,63},'X__X'}]},
                              {cons,
                               {486,63},
                               {tuple,
                                {486,63},
                                [{atom,{486,63},value},{var,{486,63},'X__V'}]},
                               {nil,{486,63}}}}}}}]}]}]}]}]}]}]}},
           []}]},
        {debug_line,487,261},
        {block,
         {487,14},
         [{call,
           {487,14},
           {'fun',
            {487,14},
            {clauses,
             [{clause,
               {487,14},
               [],[],
               [{'case',
                 {487,14},
                 {call,
                  {487,60},
                  {remote,{487,65},{atom,{487,60},lists},{atom,{487,66},nth}},
                  [{integer,{487,70},1},{var,{487,73},'Warnings'}]},
                 [{clause,
                   {487,26},
                   [{tuple,
                     {487,26},
                     [{integer,{487,27},1},
                      {atom,{487,30},beam_doc},
                      {atom,{487,40},missing_moduledoc}]}],
                   [],
                   [{atom,{487,57},ok}]},
                  {clause,
                   {487,57},
                   [{var,{487,57},'X__V'}],
                   [],
                   [{call,
                     {487,57},
                     {remote,
                      {487,57},
                      {atom,{487,57},erlang},
                      {atom,{487,57},error}},
                     [{block,0,
                       [{tuple,
                         {487,57},
                         [{atom,{487,57},assertMatch},
                          {cons,
                           {487,57},
                           {tuple,
                            {487,57},
                            [{atom,{487,57},module},
                             {atom,{487,57},beam_doc_SUITE}]},
                           {cons,
                            {487,57},
                            {tuple,
                             {487,57},
                             [{atom,{487,57},line},{integer,{487,57},487}]},
                            {cons,
                             {487,57},
                             {tuple,
                              {487,57},
                              [{atom,{487,57},expression},
                               {string,
                                {487,57},
                                "lists : nth ( 1 , Warnings )"}]},
                             {cons,
                              {487,57},
                              {tuple,
                               {487,57},
                               [{atom,{487,57},pattern},
                                {string,
                                 {487,57},
                                 "{ 1 , beam_doc , missing_moduledoc }"}]},
                              {cons,
                               {487,57},
                               {tuple,
                                {487,57},
                                [{atom,{487,57},value},{var,{487,57},'X__V'}]},
                               {nil,{487,57}}}}}}}]}]}]}]}]}]}]}},
           []}]},
        {debug_line,488,262},
        {match,
         {488,13},
         {var,{488,13},'TypePos'},
         {'case',
          {489,17},
          {call,
           {489,22},
           {remote,{489,27},{atom,{489,22},lists},{atom,{489,28},member}},
           [{atom,{489,35},type},{var,{489,41},'ExpectedWarnings'}]},
          [{clause,
            {490,21},
            [{atom,{490,21},true}],
            [],
            [{debug_line,491,263},
             {block,
              {491,26},
              [{call,
                {491,26},
                {'fun',
                 {491,26},
                 {clauses,
                  [{clause,
                    {491,26},
                    [],[],
                    [{'case',
                      {491,26},
                      {call,
                       {491,87},
                       {remote,
                        {491,92},
                        {atom,{491,87},lists},
                        {atom,{491,93},nth}},
                       [{integer,{491,97},2},{var,{491,100},'Warnings'}]},
                      [{clause,
                        {491,38},
                        [{tuple,
                          {491,38},
                          [{tuple,
                            {491,39},
                            [{integer,{491,40},6},{integer,{491,42},2}]},
                           {atom,{491,46},beam_doc},
                           {tuple,
                            {491,56},
                            [{atom,{491,57},missing_doc},
                             {tuple,
                              {491,70},
                              [{atom,{491,71},type},
                               {atom,{491,76},test},
                               {integer,{491,81},0}]}]}]}],
                        [],
                        [{atom,{491,84},ok}]},
                       {clause,
                        {491,84},
                        [{var,{491,84},'X__V'}],
                        [],
                        [{call,
                          {491,84},
                          {remote,
                           {491,84},
                           {atom,{491,84},erlang},
                           {atom,{491,84},error}},
                          [{block,0,
                            [{tuple,
                              {491,84},
                              [{atom,{491,84},assertMatch},
                               {cons,
                                {491,84},
                                {tuple,
                                 {491,84},
                                 [{atom,{491,84},module},
                                  {atom,{491,84},beam_doc_SUITE}]},
                                {cons,
                                 {491,84},
                                 {tuple,
                                  {491,84},
                                  [{atom,{491,84},line},
                                   {integer,{491,84},491}]},
                                 {cons,
                                  {491,84},
                                  {tuple,
                                   {491,84},
                                   [{atom,{491,84},expression},
                                    {string,
                                     {491,84},
                                     "lists : nth ( 2 , Warnings )"}]},
                                  {cons,
                                   {491,84},
                                   {tuple,
                                    {491,84},
                                    [{atom,{491,84},pattern},
                                     {string,
                                      {491,84},
                                      "{ { 6 , 2 } , beam_doc , { missing_doc , { type , test , 0 } } }"}]},
                                   {cons,
                                    {491,84},
                                    {tuple,
                                     {491,84},
                                     [{atom,{491,84},value},
                                      {var,{491,84},'X__V'}]},
                                    {nil,{491,84}}}}}}}]}]}]}]}]}]}]}},
                []}]},
             {debug_line,492,264},
             {block,
              {492,26},
              [{call,
                {492,26},
                {'fun',
                 {492,26},
                 {clauses,
                  [{clause,
                    {492,26},
                    [],[],
                    [{'case',
                      {492,26},
                      {call,
                       {492,87},
                       {remote,
                        {492,92},
                        {atom,{492,87},lists},
                        {atom,{492,93},nth}},
                       [{integer,{492,97},3},{var,{492,100},'Warnings'}]},
                      [{clause,
                        {492,38},
                        [{tuple,
                          {492,38},
                          [{tuple,
                            {492,39},
                            [{integer,{492,40},7},{integer,{492,42},2}]},
                           {atom,{492,46},beam_doc},
                           {tuple,
                            {492,56},
                            [{atom,{492,57},missing_doc},
                             {tuple,
                              {492,70},
                              [{atom,{492,71},type},
                               {atom,{492,76},test},
                               {integer,{492,81},1}]}]}]}],
                        [],
                        [{atom,{492,84},ok}]},
                       {clause,
                        {492,84},
                        [{var,{492,84},'X__V'}],
                        [],
                        [{call,
                          {492,84},
                          {remote,
                           {492,84},
                           {atom,{492,84},erlang},
                           {atom,{492,84},error}},
                          [{block,0,
                            [{tuple,
                              {492,84},
                              [{atom,{492,84},assertMatch},
                               {cons,
                                {492,84},
                                {tuple,
                                 {492,84},
                                 [{atom,{492,84},module},
                                  {atom,{492,84},beam_doc_SUITE}]},
                                {cons,
                                 {492,84},
                                 {tuple,
                                  {492,84},
                                  [{atom,{492,84},line},
                                   {integer,{492,84},492}]},
                                 {cons,
                                  {492,84},
                                  {tuple,
                                   {492,84},
                                   [{atom,{492,84},expression},
                                    {string,
                                     {492,84},
                                     "lists : nth ( 3 , Warnings )"}]},
                                  {cons,
                                   {492,84},
                                   {tuple,
                                    {492,84},
                                    [{atom,{492,84},pattern},
                                     {string,
                                      {492,84},
                                      "{ { 7 , 2 } , beam_doc , { missing_doc , { type , test , 1 } } }"}]},
                                   {cons,
                                    {492,84},
                                    {tuple,
                                     {492,84},
                                     [{atom,{492,84},value},
                                      {var,{492,84},'X__V'}]},
                                    {nil,{492,84}}}}}}}]}]}]}]}]}]}]}},
                []}]},
             {debug_line,493,265},
             {integer,{493,25},4}]},
           {clause,
            {494,21},
            [{atom,{494,21},false}],
            [],
            [{debug_line,495,266},{integer,{495,25},2}]}]}},
        {debug_line,498,267},
        {match,
         {498,13},
         {var,{498,13},'CBPos'},
         {'case',
          {499,17},
          {call,
           {499,22},
           {remote,{499,27},{atom,{499,22},lists},{atom,{499,28},member}},
           [{atom,{499,35},callback},{var,{499,45},'ExpectedWarnings'}]},
          [{clause,
            {500,21},
            [{atom,{500,21},true}],
            [],
            [{debug_line,501,268},
             {block,
              {501,26},
              [{call,
                {501,26},
                {'fun',
                 {501,26},
                 {clauses,
                  [{clause,
                    {501,26},
                    [],[],
                    [{'case',
                      {501,26},
                      {call,
                       {501,91},
                       {remote,
                        {501,96},
                        {atom,{501,91},lists},
                        {atom,{501,97},nth}},
                       [{var,{501,101},'TypePos'},{var,{501,110},'Warnings'}]},
                      [{clause,
                        {501,38},
                        [{tuple,
                          {501,38},
                          [{tuple,
                            {501,39},
                            [{integer,{501,40},9},{integer,{501,42},2}]},
                           {atom,{501,46},beam_doc},
                           {tuple,
                            {501,56},
                            [{atom,{501,57},missing_doc},
                             {tuple,
                              {501,70},
                              [{atom,{501,71},callback},
                               {atom,{501,80},test},
                               {integer,{501,85},0}]}]}]}],
                        [],
                        [{atom,{501,88},ok}]},
                       {clause,
                        {501,88},
                        [{var,{501,88},'X__V'}],
                        [],
                        [{call,
                          {501,88},
                          {remote,
                           {501,88},
                           {atom,{501,88},erlang},
                           {atom,{501,88},error}},
                          [{block,0,
                            [{tuple,
                              {501,88},
                              [{atom,{501,88},assertMatch},
                               {cons,
                                {501,88},
                                {tuple,
                                 {501,88},
                                 [{atom,{501,88},module},
                                  {atom,{501,88},beam_doc_SUITE}]},
                                {cons,
                                 {501,88},
                                 {tuple,
                                  {501,88},
                                  [{atom,{501,88},line},
                                   {integer,{501,88},501}]},
                                 {cons,
                                  {501,88},
                                  {tuple,
                                   {501,88},
                                   [{atom,{501,88},expression},
                                    {string,
                                     {501,88},
                                     "lists : nth ( TypePos , Warnings )"}]},
                                  {cons,
                                   {501,88},
                                   {tuple,
                                    {501,88},
                                    [{atom,{501,88},pattern},
                                     {string,
                                      {501,88},
                                      "{ { 9 , 2 } , beam_doc , { missing_doc , { callback , test , 0 } } }"}]},
                                   {cons,
                                    {501,88},
                                    {tuple,
                                     {501,88},
                                     [{atom,{501,88},value},
                                      {var,{501,88},'X__V'}]},
                                    {nil,{501,88}}}}}}}]}]}]}]}]}]}]}},
                []}]},
             {debug_line,502,269},
             {op,{502,33},'+',{var,{502,25},'TypePos'},{integer,{502,35},1}}]},
           {clause,
            {503,21},
            [{atom,{503,21},false}],
            [],
            [{debug_line,504,270},{var,{504,25},'TypePos'}]}]}},
        {debug_line,507,271},
        {'case',
         {507,13},
         {call,
          {507,18},
          {remote,{507,23},{atom,{507,18},lists},{atom,{507,24},member}},
          [{atom,{507,31},function},{var,{507,41},'ExpectedWarnings'}]},
         [{clause,
           {508,17},
           [{atom,{508,17},true}],
           [],
           [{debug_line,509,272},
            {block,
             {509,22},
             [{call,
               {509,22},
               {'fun',
                {509,22},
                {clauses,
                 [{clause,
                   {509,22},
                   [],[],
                   [{'case',
                     {509,22},
                     {call,
                      {509,88},
                      {remote,
                       {509,93},
                       {atom,{509,88},lists},
                       {atom,{509,94},nth}},
                      [{var,{509,98},'CBPos'},{var,{509,105},'Warnings'}]},
                     [{clause,
                       {509,34},
                       [{tuple,
                         {509,34},
                         [{tuple,
                           {509,35},
                           [{integer,{509,36},13},{integer,{509,39},1}]},
                          {atom,{509,43},beam_doc},
                          {tuple,
                           {509,53},
                           [{atom,{509,54},missing_doc},
                            {tuple,
                             {509,67},
                             [{atom,{509,68},function},
                              {atom,{509,77},test},
                              {integer,{509,82},0}]}]}]}],
                       [],
                       [{atom,{509,85},ok}]},
                      {clause,
                       {509,85},
                       [{var,{509,85},'X__V'}],
                       [],
                       [{call,
                         {509,85},
                         {remote,
                          {509,85},
                          {atom,{509,85},erlang},
                          {atom,{509,85},error}},
                         [{block,0,
                           [{tuple,
                             {509,85},
                             [{atom,{509,85},assertMatch},
                              {cons,
                               {509,85},
                               {tuple,
                                {509,85},
                                [{atom,{509,85},module},
                                 {atom,{509,85},beam_doc_SUITE}]},
                               {cons,
                                {509,85},
                                {tuple,
                                 {509,85},
                                 [{atom,{509,85},line},
                                  {integer,{509,85},509}]},
                                {cons,
                                 {509,85},
                                 {tuple,
                                  {509,85},
                                  [{atom,{509,85},expression},
                                   {string,
                                    {509,85},
                                    "lists : nth ( CBPos , Warnings )"}]},
                                 {cons,
                                  {509,85},
                                  {tuple,
                                   {509,85},
                                   [{atom,{509,85},pattern},
                                    {string,
                                     {509,85},
                                     "{ { 13 , 1 } , beam_doc , { missing_doc , { function , test , 0 } } }"}]},
                                  {cons,
                                   {509,85},
                                   {tuple,
                                    {509,85},
                                    [{atom,{509,85},value},
                                     {var,{509,85},'X__V'}]},
                                   {nil,{509,85}}}}}}}]}]}]}]}]}]}]}},
               []}]},
            {debug_line,510,273},
            {block,
             {510,22},
             [{call,
               {510,22},
               {'fun',
                {510,22},
                {clauses,
                 [{clause,
                   {510,22},
                   [],[],
                   [{'case',
                     {510,22},
                     {call,
                      {510,88},
                      {remote,
                       {510,93},
                       {atom,{510,88},lists},
                       {atom,{510,94},nth}},
                      [{block,0,
                        [{op,
                          {510,103},
                          '+',
                          {var,{510,98},'CBPos'},
                          {integer,{510,104},1}}]},
                       {var,{510,107},'Warnings'}]},
                     [{clause,
                       {510,34},
                       [{tuple,
                         {510,34},
                         [{tuple,
                           {510,35},
                           [{integer,{510,36},14},{integer,{510,39},1}]},
                          {atom,{510,43},beam_doc},
                          {tuple,
                           {510,53},
                           [{atom,{510,54},missing_doc},
                            {tuple,
                             {510,67},
                             [{atom,{510,68},function},
                              {atom,{510,77},test},
                              {integer,{510,82},1}]}]}]}],
                       [],
                       [{atom,{510,85},ok}]},
                      {clause,
                       {510,85},
                       [{var,{510,85},'X__V'}],
                       [],
                       [{call,
                         {510,85},
                         {remote,
                          {510,85},
                          {atom,{510,85},erlang},
                          {atom,{510,85},error}},
                         [{block,0,
                           [{tuple,
                             {510,85},
                             [{atom,{510,85},assertMatch},
                              {cons,
                               {510,85},
                               {tuple,
                                {510,85},
                                [{atom,{510,85},module},
                                 {atom,{510,85},beam_doc_SUITE}]},
                               {cons,
                                {510,85},
                                {tuple,
                                 {510,85},
                                 [{atom,{510,85},line},
                                  {integer,{510,85},510}]},
                                {cons,
                                 {510,85},
                                 {tuple,
                                  {510,85},
                                  [{atom,{510,85},expression},
                                   {string,
                                    {510,85},
                                    "lists : nth ( CBPos + 1 , Warnings )"}]},
                                 {cons,
                                  {510,85},
                                  {tuple,
                                   {510,85},
                                   [{atom,{510,85},pattern},
                                    {string,
                                     {510,85},
                                     "{ { 14 , 1 } , beam_doc , { missing_doc , { function , test , 1 } } }"}]},
                                  {cons,
                                   {510,85},
                                   {tuple,
                                    {510,85},
                                    [{atom,{510,85},value},
                                     {var,{510,85},'X__V'}]},
                                   {nil,{510,85}}}}}}}]}]}]}]}]}]}]}},
               []}]},
            {debug_line,511,274},
            {match,
             {511,21},
             {cons,
              {511,21},
              {tuple,
               {511,22},
               [{var,{511,23},'HrlFile'},{var,{511,32},'HrlWarnings'}]},
              {nil,{511,44}}},
             {var,{511,48},'Hrl'}},
            {debug_line,512,275},
            {block,
             {512,22},
             [{call,
               {512,22},
               {'fun',
                {512,22},
                {clauses,
                 [{clause,
                   {512,22},
                   [],[],
                   [{match,
                     {512,22},
                     {var,{512,22},'X__X'},
                     {string,{512,34},"warn_missing_doc.hrl"}},
                    {'case',
                     {512,34},
                     {call,
                      {512,58},
                      {remote,
                       {512,66},
                       {atom,{512,58},filename},
                       {atom,{512,67},basename}},
                      [{var,{512,76},'HrlFile'}]},
                     [{clause,
                       {512,83},
                       [{var,{512,83},'X__X'}],
                       [],
                       [{atom,{512,83},ok}]},
                      {clause,
                       {512,83},
                       [{var,{512,83},'X__V'}],
                       [],
                       [{call,
                         {512,83},
                         {remote,
                          {512,83},
                          {atom,{512,83},erlang},
                          {atom,{512,83},error}},
                         [{block,0,
                           [{tuple,
                             {512,83},
                             [{atom,{512,83},assertEqual},
                              {cons,
                               {512,83},
                               {tuple,
                                {512,83},
                                [{atom,{512,83},module},
                                 {atom,{512,83},beam_doc_SUITE}]},
                               {cons,
                                {512,83},
                                {tuple,
                                 {512,83},
                                 [{atom,{512,83},line},
                                  {integer,{512,83},512}]},
                                {cons,
                                 {512,83},
                                 {tuple,
                                  {512,83},
                                  [{atom,{512,83},expression},
                                   {string,
                                    {512,83},
                                    "filename : basename ( HrlFile )"}]},
                                 {cons,
                                  {512,83},
                                  {tuple,
                                   {512,83},
                                   [{atom,{512,83},expected},
                                    {var,{512,83},'X__X'}]},
                                  {cons,
                                   {512,83},
                                   {tuple,
                                    {512,83},
                                    [{atom,{512,83},value},
                                     {var,{512,83},'X__V'}]},
                                   {nil,{512,83}}}}}}}]}]}]}]}]}]}]}},
               []}]},
            {debug_line,513,276},
            {block,
             {513,22},
             [{call,
               {513,22},
               {'fun',
                {513,22},
                {clauses,
                 [{clause,
                   {513,22},
                   [],[],
                   [{match,
                     {513,22},
                     {var,{513,22},'X__X'},
                     {integer,{513,34},1}},
                    {'case',
                     {513,34},
                     {call,
                      {513,37},
                      {remote,
                       {513,37},
                       {atom,{513,37},erlang},
                       {atom,{513,37},length}},
                      [{var,{513,44},'HrlWarnings'}]},
                     [{clause,
                       {513,55},
                       [{var,{513,55},'X__X'}],
                       [],
                       [{atom,{513,55},ok}]},
                      {clause,
                       {513,55},
                       [{var,{513,55},'X__V'}],
                       [],
                       [{call,
                         {513,55},
                         {remote,
                          {513,55},
                          {atom,{513,55},erlang},
                          {atom,{513,55},error}},
                         [{block,0,
                           [{tuple,
                             {513,55},
                             [{atom,{513,55},assertEqual},
                              {cons,
                               {513,55},
                               {tuple,
                                {513,55},
                                [{atom,{513,55},module},
                                 {atom,{513,55},beam_doc_SUITE}]},
                               {cons,
                                {513,55},
                                {tuple,
                                 {513,55},
                                 [{atom,{513,55},line},
                                  {integer,{513,55},513}]},
                                {cons,
                                 {513,55},
                                 {tuple,
                                  {513,55},
                                  [{atom,{513,55},expression},
                                   {string,
                                    {513,55},
                                    "length ( HrlWarnings )"}]},
                                 {cons,
                                  {513,55},
                                  {tuple,
                                   {513,55},
                                   [{atom,{513,55},expected},
                                    {var,{513,55},'X__X'}]},
                                  {cons,
                                   {513,55},
                                   {tuple,
                                    {513,55},
                                    [{atom,{513,55},value},
                                     {var,{513,55},'X__V'}]},
                                   {nil,{513,55}}}}}}}]}]}]}]}]}]}]}},
               []}]},
            {debug_line,514,277},
            {block,
             {514,22},
             [{call,
               {514,22},
               {'fun',
                {514,22},
                {clauses,
                 [{clause,
                   {514,22},
                   [],[],
                   [{'case',
                     {514,22},
                     {call,
                      {514,87},
                      {remote,
                       {514,92},
                       {atom,{514,87},lists},
                       {atom,{514,93},nth}},
                      [{integer,{514,97},1},{var,{514,100},'HrlWarnings'}]},
                     [{clause,
                       {514,34},
                       [{tuple,
                         {514,34},
                         [{tuple,
                           {514,35},
                           [{integer,{514,36},2},{integer,{514,38},1}]},
                          {atom,{514,42},beam_doc},
                          {tuple,
                           {514,52},
                           [{atom,{514,53},missing_doc},
                            {tuple,
                             {514,66},
                             [{atom,{514,67},function},
                              {atom,{514,76},test},
                              {integer,{514,81},2}]}]}]}],
                       [],
                       [{atom,{514,84},ok}]},
                      {clause,
                       {514,84},
                       [{var,{514,84},'X__V'}],
                       [],
                       [{call,
                         {514,84},
                         {remote,
                          {514,84},
                          {atom,{514,84},erlang},
                          {atom,{514,84},error}},
                         [{block,0,
                           [{tuple,
                             {514,84},
                             [{atom,{514,84},assertMatch},
                              {cons,
                               {514,84},
                               {tuple,
                                {514,84},
                                [{atom,{514,84},module},
                                 {atom,{514,84},beam_doc_SUITE}]},
                               {cons,
                                {514,84},
                                {tuple,
                                 {514,84},
                                 [{atom,{514,84},line},
                                  {integer,{514,84},514}]},
                                {cons,
                                 {514,84},
                                 {tuple,
                                  {514,84},
                                  [{atom,{514,84},expression},
                                   {string,
                                    {514,84},
                                    "lists : nth ( 1 , HrlWarnings )"}]},
                                 {cons,
                                  {514,84},
                                  {tuple,
                                   {514,84},
                                   [{atom,{514,84},pattern},
                                    {string,
                                     {514,84},
                                     "{ { 2 , 1 } , beam_doc , { missing_doc , { function , test , 2 } } }"}]},
                                  {cons,
                                   {514,84},
                                   {tuple,
                                    {514,84},
                                    [{atom,{514,84},value},
                                     {var,{514,84},'X__V'}]},
                                   {nil,{514,84}}}}}}}]}]}]}]}]}]}]}},
               []}]}]},
          {clause,
           {515,17},
           [{atom,{515,17},false}],
           [],
           [{debug_line,516,278},{atom,{516,21},ok}]}]}]}]}]}]}.
{function,
 {520,1},
 doc_with_file,1,
 [{clause,
   {520,1},
   [{var,{520,1},'_'}],
   [[{call,
      {520,1},
      {remote,{520,1},{atom,{520,1},fake},{atom,{520,1},is_beam_bif_info}},
      []}]],
   [{debug_line,520,279},{atom,{520,1},ignore}]},
  {clause,
   {520,1},
   [{var,{520,15},'Conf'}],
   [],
   [{debug_line,521,280},
    {match,
     {521,5},
     {var,{521,5},'ModuleName'},
     {call,
      {521,19},
      {remote,{521,19},{atom,{521,19},erlang},{atom,{521,19},atom_to_list}},
      [{atom,{521,19},doc_with_file}]}},
    {debug_line,522,281},
    {match,
     {522,5},
     {tuple,{522,5},[{atom,{522,6},ok},{var,{522,10},'Cwd'}]},
     {call,
      {522,17},
      {remote,{522,21},{atom,{522,17},file},{atom,{522,22},get_cwd}},
      []}},
    {debug_line,523,282},
    {'try',
     {523,5},
     [{debug_line,524,283},
      {match,
       {524,9},
       {atom,{524,9},ok},
       {call,
        {524,14},
        {remote,{524,18},{atom,{524,14},file},{atom,{524,19},set_cwd}},
        [{block,0,
          [{call,
            {524,27},
            {remote,
             {524,36},
             {atom,{524,27},proplists},
             {atom,{524,37},get_value}},
            [{atom,{524,47},data_dir},{var,{524,57},'Conf'}]}]}]}},
      {debug_line,525,284},
      {match,
       {525,9},
       {tuple,{525,9},[{atom,{525,10},ok},{var,{525,14},'ModName'}]},
       {call,
        {525,25},
        {atom,{525,25},default_compile_file},
        [{var,{525,46},'Conf'},
         {var,{525,52},'ModuleName'},
         {block,0,
          [{cons,
            {525,64},
            {tuple,{525,65},[{atom,{525,66},i},{string,{525,69},"./folder"}]},
            {nil,{525,80}}}]}]}},
      {debug_line,526,285},
      {match,
       {526,9},
       {tuple,
        {526,9},
        [{atom,{526,10},ok},
         {tuple,
          {526,14},
          [{atom,{526,15},docs_v1},
           {var,{526,24},'ModuleAnno'},
           {var,{526,35},'_'},
           {var,{526,38},'_'},
           {map,
            {526,41},
            [{map_field_exact,
              {526,52},
              {bin,
               {526,43},
               [{bin_element,
                 {526,45},
                 {string,{526,45},"en"},
                 default,default}]},
              {bin,
               {526,55},
               [{bin_element,
                 {526,57},
                 {string,{526,57},"# README\n\nThis is a test"},
                 default,default}]}}]},
           {var,{526,90},'_'},
           {cons,
            {527,15},
            {tuple,
             {527,16},
             [{tuple,
               {527,17},
               [{atom,{527,18},type},
                {atom,{527,23},bar},
                {integer,{527,27},1}]},
              {var,{527,30},'_'},
              {cons,
               {527,32},
               {bin,
                {527,33},
                [{bin_element,
                  {527,35},
                  {string,{527,35},"bar(X)"},
                  default,default}]},
               {nil,{527,45}}},
              {atom,{527,47},none},
              {map,
               {527,52},
               [{map_field_exact,
                 {527,63},
                 {atom,{527,54},exported},
                 {atom,{527,66},false}}]}]},
            {cons,
             {528,16},
             {tuple,
              {528,16},
              [{tuple,
                {528,17},
                [{atom,{528,18},type},
                 {atom,{528,23},foo},
                 {integer,{528,27},1}]},
               {var,{528,30},'_'},
               {cons,
                {528,32},
                {bin,
                 {528,33},
                 [{bin_element,
                   {528,35},
                   {string,{528,35},"foo(X)"},
                   default,default}]},
                {nil,{528,45}}},
               {atom,{528,47},none},
               {map,
                {528,52},
                [{map_field_exact,
                  {528,63},
                  {atom,{528,54},exported},
                  {atom,{528,66},true}}]}]},
             {cons,
              {529,16},
              {tuple,
               {529,16},
               [{tuple,
                 {529,17},
                 [{atom,{529,18},type},
                  {atom,{529,23},private_type_exported},
                  {integer,{529,45},0}]},
                {var,{529,48},'_'},
                {cons,
                 {529,50},
                 {bin,
                  {529,51},
                  [{bin_element,
                    {529,53},
                    {string,{529,53},"private_type_exported()"},
                    default,default}]},
                 {nil,{529,80}}},
                {map,
                 {530,17},
                 [{map_field_exact,
                   {530,28},
                   {bin,
                    {530,19},
                    [{bin_element,
                      {530,21},
                      {string,{530,21},"en"},
                      default,default}]},
                   {bin,
                    {530,31},
                    [{bin_element,
                      {530,33},
                      {string,{530,33},"# TYPES\n\nTest"},
                      default,default}]}}]},
                {map,
                 {530,55},
                 [{map_field_exact,
                   {530,66},
                   {atom,{530,57},exported},
                   {atom,{530,69},false}}]}]},
              {cons,
               {531,16},
               {tuple,
                {531,16},
                [{tuple,
                  {531,17},
                  [{atom,{531,18},function},
                   {atom,{531,27},main2},
                   {integer,{531,33},1}]},
                 {var,{531,36},'Main2Anno'},
                 {cons,
                  {531,46},
                  {bin,
                   {531,47},
                   [{bin_element,
                     {531,49},
                     {string,{531,49},"main2(I)"},
                     default,default}]},
                  {nil,{531,61}}},
                 {map,
                  {532,17},
                  [{map_field_exact,
                    {532,28},
                    {bin,
                     {532,19},
                     [{bin_element,
                       {532,21},
                       {string,{532,21},"en"},
                       default,default}]},
                    {bin,
                     {532,31},
                     [{bin_element,
                       {532,33},
                       {string,
                        {532,33},
                        "# File\n\ntesting fetching docs from other folders"},
                       default,default}]}}]},
                 {map,{532,90},[]}]},
               {cons,
                {533,16},
                {tuple,
                 {533,16},
                 [{tuple,
                   {533,17},
                   [{atom,{533,18},function},
                    {atom,{533,27},main},
                    {integer,{533,32},1}]},
                  {var,{533,35},'_'},
                  {cons,
                   {533,37},
                   {bin,
                    {533,38},
                    [{bin_element,
                      {533,40},
                      {string,{533,40},"main(Var)"},
                      default,default}]},
                   {nil,{533,53}}},
                  {map,
                   {534,17},
                   [{map_field_exact,
                     {534,28},
                     {bin,
                      {534,19},
                      [{bin_element,
                        {534,21},
                        {string,{534,21},"en"},
                        default,default}]},
                     {bin,
                      {534,31},
                      [{bin_element,
                        {534,33},
                        {string,{534,33},"# Fun\n\nTest importing function"},
                        default,default}]}}]},
                  {map,{534,71},[]}]},
                {nil,{534,75}}}}}}}]}]},
       {call,
        {534,81},
        {remote,{534,85},{atom,{534,81},code},{atom,{534,86},get_doc}},
        [{var,{534,94},'ModName'}]}},
      {debug_line,536,286},
      {block,
       {536,10},
       [{call,
         {536,10},
         {'fun',
          {536,10},
          {clauses,
           [{clause,
             {536,10},
             [],[],
             [{match,{536,10},{var,{536,10},'X__X'},{integer,{536,22},1}},
              {'case',
               {536,22},
               {call,
                {536,25},
                {remote,
                 {536,33},
                 {atom,{536,25},erl_anno},
                 {atom,{536,34},line}},
                [{var,{536,39},'ModuleAnno'}]},
               [{clause,
                 {536,49},
                 [{var,{536,49},'X__X'}],
                 [],
                 [{atom,{536,49},ok}]},
                {clause,
                 {536,49},
                 [{var,{536,49},'X__V'}],
                 [],
                 [{call,
                   {536,49},
                   {remote,
                    {536,49},
                    {atom,{536,49},erlang},
                    {atom,{536,49},error}},
                   [{block,0,
                     [{tuple,
                       {536,49},
                       [{atom,{536,49},assertEqual},
                        {cons,
                         {536,49},
                         {tuple,
                          {536,49},
                          [{atom,{536,49},module},
                           {atom,{536,49},beam_doc_SUITE}]},
                         {cons,
                          {536,49},
                          {tuple,
                           {536,49},
                           [{atom,{536,49},line},{integer,{536,49},536}]},
                          {cons,
                           {536,49},
                           {tuple,
                            {536,49},
                            [{atom,{536,49},expression},
                             {string,
                              {536,49},
                              "erl_anno : line ( ModuleAnno )"}]},
                           {cons,
                            {536,49},
                            {tuple,
                             {536,49},
                             [{atom,{536,49},expected},{var,{536,49},'X__X'}]},
                            {cons,
                             {536,49},
                             {tuple,
                              {536,49},
                              [{atom,{536,49},value},{var,{536,49},'X__V'}]},
                             {nil,{536,49}}}}}}}]}]}]}]}]}]}]}},
         []}]},
      {debug_line,537,287},
      {block,
       {537,10},
       [{call,
         {537,10},
         {'fun',
          {537,10},
          {clauses,
           [{clause,
             {537,10},
             [],[],
             [{match,{537,10},{var,{537,10},'X__X'},{integer,{537,22},1}},
              {'case',
               {537,22},
               {call,
                {537,25},
                {remote,
                 {537,33},
                 {atom,{537,25},erl_anno},
                 {atom,{537,34},line}},
                [{var,{537,39},'Main2Anno'}]},
               [{clause,
                 {537,48},
                 [{var,{537,48},'X__X'}],
                 [],
                 [{atom,{537,48},ok}]},
                {clause,
                 {537,48},
                 [{var,{537,48},'X__V'}],
                 [],
                 [{call,
                   {537,48},
                   {remote,
                    {537,48},
                    {atom,{537,48},erlang},
                    {atom,{537,48},error}},
                   [{block,0,
                     [{tuple,
                       {537,48},
                       [{atom,{537,48},assertEqual},
                        {cons,
                         {537,48},
                         {tuple,
                          {537,48},
                          [{atom,{537,48},module},
                           {atom,{537,48},beam_doc_SUITE}]},
                         {cons,
                          {537,48},
                          {tuple,
                           {537,48},
                           [{atom,{537,48},line},{integer,{537,48},537}]},
                          {cons,
                           {537,48},
                           {tuple,
                            {537,48},
                            [{atom,{537,48},expression},
                             {string,
                              {537,48},
                              "erl_anno : line ( Main2Anno )"}]},
                           {cons,
                            {537,48},
                            {tuple,
                             {537,48},
                             [{atom,{537,48},expected},{var,{537,48},'X__X'}]},
                            {cons,
                             {537,48},
                             {tuple,
                              {537,48},
                              [{atom,{537,48},value},{var,{537,48},'X__V'}]},
                             {nil,{537,48}}}}}}}]}]}]}]}]}]}]}},
         []}]},
      {debug_line,538,288},
      {block,
       {538,10},
       [{call,
         {538,10},
         {'fun',
          {538,10},
          {clauses,
           [{clause,
             {538,10},
             [],[],
             [{match,
               {538,10},
               {var,{538,10},'X__X'},
               {string,{538,22},"./folder/FILE"}},
              {'case',
               {538,22},
               {call,
                {538,39},
                {remote,
                 {538,47},
                 {atom,{538,39},erl_anno},
                 {atom,{538,48},file}},
                [{var,{538,53},'Main2Anno'}]},
               [{clause,
                 {538,62},
                 [{var,{538,62},'X__X'}],
                 [],
                 [{atom,{538,62},ok}]},
                {clause,
                 {538,62},
                 [{var,{538,62},'X__V'}],
                 [],
                 [{call,
                   {538,62},
                   {remote,
                    {538,62},
                    {atom,{538,62},erlang},
                    {atom,{538,62},error}},
                   [{block,0,
                     [{tuple,
                       {538,62},
                       [{atom,{538,62},assertEqual},
                        {cons,
                         {538,62},
                         {tuple,
                          {538,62},
                          [{atom,{538,62},module},
                           {atom,{538,62},beam_doc_SUITE}]},
                         {cons,
                          {538,62},
                          {tuple,
                           {538,62},
                           [{atom,{538,62},line},{integer,{538,62},538}]},
                          {cons,
                           {538,62},
                           {tuple,
                            {538,62},
                            [{atom,{538,62},expression},
                             {string,
                              {538,62},
                              "erl_anno : file ( Main2Anno )"}]},
                           {cons,
                            {538,62},
                            {tuple,
                             {538,62},
                             [{atom,{538,62},expected},{var,{538,62},'X__X'}]},
                            {cons,
                             {538,62},
                             {tuple,
                              {538,62},
                              [{atom,{538,62},value},{var,{538,62},'X__V'}]},
                             {nil,{538,62}}}}}}}]}]}]}]}]}]}]}},
         []}]},
      {debug_line,539,289},
      {atom,{539,9},ok}],
     [],[],
     [{debug_line,541,290},
      {match,
       {541,9},
       {atom,{541,9},ok},
       {call,
        {541,14},
        {remote,{541,18},{atom,{541,14},file},{atom,{541,19},set_cwd}},
        [{var,{541,27},'Cwd'}]}}]}]}]}.
{function,
 {544,1},
 doc_with_file_error,1,
 [{clause,
   {544,1},
   [{var,{544,1},'_'}],
   [[{call,
      {544,1},
      {remote,{544,1},{atom,{544,1},fake},{atom,{544,1},is_beam_bif_info}},
      []}]],
   [{debug_line,544,291},{atom,{544,1},ignore}]},
  {clause,
   {544,1},
   [{var,{544,21},'Conf'}],
   [],
   [{debug_line,545,292},
    {match,
     {545,5},
     {var,{545,5},'ModuleName'},
     {call,
      {545,19},
      {remote,{545,19},{atom,{545,19},erlang},{atom,{545,19},atom_to_list}},
      [{atom,{545,19},doc_with_file_error}]}},
    {debug_line,546,293},
    {match,
     {546,5},
     {tuple,
      {546,5},
      [{atom,{546,6},ok},{var,{546,10},'_'},{var,{546,13},'Warnings'}]},
     {call,
      {546,25},
      {atom,{546,25},default_compile_file},
      [{var,{546,46},'Conf'},
       {var,{546,52},'ModuleName'},
       {block,0,
        [{cons,{546,64},{atom,{546,65},return_warnings},{nil,{546,80}}}]}]}},
    {debug_line,548,294},
    {match,
     {548,5},
     {cons,
      {548,5},
      {tuple,
       {548,6},
       [{var,{548,7},'File'},
        {cons,
         {549,7},
         {tuple,
          {549,8},
          [{tuple,{549,9},[{integer,{549,10},6},{integer,{549,12},2}]},
           {atom,{549,15},epp},
           {tuple,
            {549,19},
            [{atom,{549,20},moduledoc},
             {atom,{549,30},file},
             {string,{549,35},"doesnotexist"}]}]},
         {cons,
          {550,8},
          {tuple,
           {550,8},
           [{tuple,{550,9},[{integer,{550,10},8},{integer,{550,12},2}]},
            {atom,{550,15},epp},
            {tuple,
             {550,19},
             [{atom,{550,20},doc},
              {atom,{550,24},file},
              {string,{550,29},"doesnotexist"}]}]},
          {cons,
           {551,8},
           {tuple,
            {551,8},
            [{tuple,{551,9},[{integer,{551,10},11},{integer,{551,13},2}]},
             {atom,{551,16},epp},
             {tuple,
              {551,20},
              [{atom,{551,21},doc},
               {atom,{551,25},file},
               {string,{551,30},"doesnotexist"}]}]},
           {nil,{551,46}}}}}]},
      {nil,{551,48}}},
     {var,{551,52},'Warnings'}},
    {debug_line,553,295},
    {block,
     {553,6},
     [{call,
       {553,6},
       {'fun',
        {553,6},
        {clauses,
         [{clause,
           {553,6},
           [],[],
           [{match,
             {553,6},
             {var,{553,6},'X__X'},
             {string,{553,18},"doc_with_file_error.erl"}},
            {'case',
             {553,18},
             {call,
              {553,45},
              {remote,
               {553,53},
               {atom,{553,45},filename},
               {atom,{553,54},basename}},
              [{var,{553,63},'File'}]},
             [{clause,
               {553,67},
               [{var,{553,67},'X__X'}],
               [],
               [{atom,{553,67},ok}]},
              {clause,
               {553,67},
               [{var,{553,67},'X__V'}],
               [],
               [{call,
                 {553,67},
                 {remote,
                  {553,67},
                  {atom,{553,67},erlang},
                  {atom,{553,67},error}},
                 [{block,0,
                   [{tuple,
                     {553,67},
                     [{atom,{553,67},assertEqual},
                      {cons,
                       {553,67},
                       {tuple,
                        {553,67},
                        [{atom,{553,67},module},
                         {atom,{553,67},beam_doc_SUITE}]},
                       {cons,
                        {553,67},
                        {tuple,
                         {553,67},
                         [{atom,{553,67},line},{integer,{553,67},553}]},
                        {cons,
                         {553,67},
                         {tuple,
                          {553,67},
                          [{atom,{553,67},expression},
                           {string,{553,67},"filename : basename ( File )"}]},
                         {cons,
                          {553,67},
                          {tuple,
                           {553,67},
                           [{atom,{553,67},expected},{var,{553,67},'X__X'}]},
                          {cons,
                           {553,67},
                           {tuple,
                            {553,67},
                            [{atom,{553,67},value},{var,{553,67},'X__V'}]},
                           {nil,{553,67}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,555,296},
    {match,
     {555,5},
     {tuple,{555,5},[{atom,{555,6},ok},{var,{555,10},'_'}]},
     {call,
      {555,15},
      {atom,{555,15},default_compile_file},
      [{var,{555,36},'Conf'},
       {var,{555,42},'ModuleName'},
       {block,0,[{cons,{555,54},{atom,{555,55},report},{nil,{555,61}}}]}]}},
    {debug_line,557,297},
    {atom,{557,5},ok}]}]}.
{function,
 {559,1},
 all_string_formats,1,
 [{clause,
   {559,1},
   [{var,{559,1},'_'}],
   [[{call,
      {559,1},
      {remote,{559,1},{atom,{559,1},fake},{atom,{559,1},is_beam_bif_info}},
      []}]],
   [{debug_line,559,298},{atom,{559,1},ignore}]},
  {clause,
   {559,1},
   [{var,{559,20},'Conf'}],
   [],
   [{debug_line,560,299},
    {match,
     {560,5},
     {var,{560,5},'ModuleName'},
     {call,
      {560,19},
      {remote,{560,19},{atom,{560,19},erlang},{atom,{560,19},atom_to_list}},
      [{atom,{560,19},all_string_formats}]}},
    {debug_line,561,300},
    {match,
     {561,5},
     {tuple,{561,5},[{atom,{561,6},ok},{var,{561,10},'ModName'}]},
     {call,
      {561,21},
      {atom,{561,21},default_compile_file},
      [{var,{561,42},'Conf'},{var,{561,48},'ModuleName'}]}},
    {debug_line,563,301},
    {match,
     {563,5},
     {tuple,
      {563,5},
      [{atom,{563,6},ok},
       {tuple,
        {563,10},
        [{atom,{563,11},docs_v1},
         {var,{563,20},'_ModuleAnno'},
         {var,{563,32},'_'},
         {var,{563,35},'_'},
         {map,
          {563,38},
          [{map_field_exact,
            {563,49},
            {bin,
             {563,40},
             [{bin_element,{563,42},{string,{563,42},"en"},default,default}]},
            {bin,
             {563,52},
             [{bin_element,
               {563,54},
               {string,{563,54},"Moduledoc test module"},
               default,default}]}}]},
         {var,{563,82},'_'},
         {cons,
          {564,15},
          {tuple,
           {565,16},
           [{tuple,
             {565,17},
             [{atom,{565,18},function},
              {atom,{565,27},six},
              {integer,{565,31},0}]},
            {var,{565,34},'_'},
            {var,{565,36},'_'},
            {map,
             {565,39},
             [{map_field_exact,
               {565,50},
               {bin,
                {565,41},
                [{bin_element,
                  {565,43},
                  {string,{565,43},"en"},
                  default,default}]},
               {bin,
                {565,53},
                [{bin_element,
                  {565,55},
                  {string,{565,55},"all_string_formats-all_string_formats"},
                  default,default}]}}]},
            {map,{565,99},[]}]},
          {cons,
           {566,16},
           {tuple,
            {566,16},
            [{tuple,
              {566,17},
              [{atom,{566,18},function},
               {atom,{566,27},five},
               {integer,{566,32},0}]},
             {var,{566,35},'_'},
             {var,{566,37},'_'},
             {map,
              {566,40},
              [{map_field_exact,
                {566,51},
                {bin,
                 {566,42},
                 [{bin_element,
                   {566,44},
                   {string,{566,44},"en"},
                   default,default}]},
                {bin,
                 {566,54},
                 [{bin_element,
                   {566,56},
                   {string,{566,56},"all_string_formats-Doc module"},
                   default,default}]}}]},
             {map,{566,92},[]}]},
           {cons,
            {567,16},
            {tuple,
             {567,16},
             [{tuple,
               {567,17},
               [{atom,{567,18},function},
                {atom,{567,27},four},
                {integer,{567,32},0}]},
              {var,{567,35},'_'},
              {var,{567,37},'_'},
              {map,
               {567,40},
               [{map_field_exact,
                 {567,51},
                 {bin,
                  {567,42},
                  [{bin_element,
                    {567,44},
                    {string,{567,44},"en"},
                    default,default}]},
                 {bin,
                  {567,54},
                  [{bin_element,
                    {567,56},
                    {string,{567,56},"Doc test mödule"},
                    default,
                    [utf8]}]}}]},
              {map,{567,83},[]}]},
            {cons,
             {568,16},
             {tuple,
              {568,16},
              [{tuple,
                {568,17},
                [{atom,{568,18},function},
                 {atom,{568,27},three},
                 {integer,{568,33},0}]},
               {var,{568,36},'_'},
               {var,{568,38},'_'},
               {map,
                {568,41},
                [{map_field_exact,
                  {568,52},
                  {bin,
                   {568,43},
                   [{bin_element,
                     {568,45},
                     {string,{568,45},"en"},
                     default,default}]},
                  {bin,
                   {568,55},
                   [{bin_element,
                     {568,57},
                     {string,{568,57},"Doctestmodule"},
                     default,default}]}}]},
               {map,{568,77},[]}]},
             {cons,
              {569,16},
              {tuple,
               {569,16},
               [{tuple,
                 {569,17},
                 [{atom,{569,18},function},
                  {atom,{569,27},two},
                  {integer,{569,31},0}]},
                {var,{569,34},'_'},
                {var,{569,36},'_'},
                {map,
                 {569,39},
                 [{map_field_exact,
                   {569,50},
                   {bin,
                    {569,41},
                    [{bin_element,
                      {569,43},
                      {string,{569,43},"en"},
                      default,default}]},
                   {bin,
                    {569,53},
                    [{bin_element,
                      {569,55},
                      {string,{569,55},"Doc test module"},
                      default,default}]}}]},
                {map,{569,77},[]}]},
              {cons,
               {570,16},
               {tuple,
                {570,16},
                [{tuple,
                  {570,17},
                  [{atom,{570,18},function},
                   {atom,{570,27},one},
                   {integer,{570,31},0}]},
                 {var,{570,34},'_'},
                 {var,{570,36},'_'},
                 {map,
                  {570,39},
                  [{map_field_exact,
                    {570,50},
                    {bin,
                     {570,41},
                     [{bin_element,
                       {570,43},
                       {string,{570,43},"en"},
                       default,default}]},
                    {bin,
                     {570,53},
                     [{bin_element,
                       {570,55},
                       {string,{570,55},"Doc test module"},
                       default,default}]}}]},
                 {map,{570,77},[]}]},
               {nil,{571,15}}}}}}}}]}]},
     {call,
      {571,21},
      {remote,{571,25},{atom,{571,21},code},{atom,{571,26},get_doc}},
      [{var,{571,34},'ModName'}]}},
    {debug_line,572,302},
    {atom,{572,5},ok}]}]}.
{function,
 {574,1},
 spec_switch_order,1,
 [{clause,
   {574,1},
   [{var,{574,1},'_'}],
   [[{call,
      {574,1},
      {remote,{574,1},{atom,{574,1},fake},{atom,{574,1},is_beam_bif_info}},
      []}]],
   [{debug_line,574,303},{atom,{574,1},ignore}]},
  {clause,
   {574,1},
   [{var,{574,19},'Conf'}],
   [],
   [{debug_line,575,304},
    {match,
     {575,3},
     {var,{575,3},'ModuleName'},
     {call,
      {575,17},
      {remote,{575,17},{atom,{575,17},erlang},{atom,{575,17},atom_to_list}},
      [{atom,{575,17},spec_switch_order}]}},
    {debug_line,576,305},
    {match,
     {576,5},
     {tuple,{576,5},[{atom,{576,6},ok},{var,{576,10},'ModName'}]},
     {call,
      {576,21},
      {atom,{576,21},default_compile_file},
      [{var,{576,42},'Conf'},{var,{576,48},'ModuleName'}]}},
    {debug_line,578,306},
    {match,
     {578,5},
     {tuple,
      {578,5},
      [{atom,{578,6},ok},
       {tuple,
        {578,10},
        [{atom,{578,11},docs_v1},
         {var,{578,20},'_ModuleAnno'},
         {var,{578,32},'_'},
         {var,{578,35},'_'},
         {var,{578,38},'_'},
         {var,{578,41},'_'},
         {cons,
          {579,11},
          {var,{579,12},'NotFalse'},
          {cons,
           {579,22},
           {var,{579,22},'Other'},
           {cons,
            {579,29},
            {var,{579,29},'Bar'},
            {cons,{579,34},{var,{579,34},'Foo'},{nil,{579,37}}}}}}]}]},
     {call,
      {579,43},
      {remote,{579,47},{atom,{579,43},code},{atom,{579,48},get_doc}},
      [{var,{579,56},'ModName'}]}},
    {debug_line,580,307},
    {match,
     {580,3},
     {tuple,
      {580,3},
      [{tuple,
        {580,4},
        [{atom,{580,5},function},
         {atom,{580,14},not_false},
         {integer,{580,24},0}]},
       {tuple,{580,28},[{integer,{580,29},52},{integer,{580,32},1}]},
       {cons,
        {580,36},
        {bin,
         {580,37},
         [{bin_element,
           {580,39},
           {string,{580,39},"not_false()"},
           default,default}]},
        {nil,{580,54}}},
       {atom,{580,57},none},
       {map,{580,62},[]}]},
     {var,{580,69},'NotFalse'}},
    {debug_line,581,308},
    {match,
     {581,3},
     {tuple,
      {581,3},
      [{tuple,
        {581,4},
        [{atom,{581,5},function},{atom,{581,14},other},{integer,{581,20},0}]},
       {tuple,{581,23},[{integer,{581,24},36},{integer,{581,27},2}]},
       {cons,
        {581,30},
        {bin,
         {581,31},
         [{bin_element,{581,33},{string,{581,33},"other()"},default,default}]},
        {nil,{581,44}}},
       {atom,{581,46},hidden},
       {map,{581,53},[]}]},
     {var,{581,60},'Other'}},
    {debug_line,582,309},
    {match,
     {582,3},
     {tuple,
      {582,3},
      [{tuple,
        {582,4},
        [{atom,{582,5},function},{atom,{582,14},bar},{integer,{582,18},1}]},
       {tuple,{582,21},[{integer,{582,22},30},{integer,{582,25},2}]},
       {cons,
        {582,28},
        {bin,
         {582,29},
         [{bin_element,{582,31},{string,{582,31},"bar(X)"},default,default}]},
        {nil,{582,41}}},
       {atom,{582,43},hidden},
       {map,{582,50},[]}]},
     {var,{582,57},'Bar'}},
    {debug_line,583,310},
    {match,
     {583,3},
     {tuple,
      {583,3},
      [{tuple,
        {583,4},
        [{atom,{583,5},function},{atom,{583,14},foo},{integer,{583,18},1}]},
       {tuple,{583,22},[{integer,{583,23},22},{integer,{583,27},2}]},
       {cons,
        {583,31},
        {bin,
         {583,32},
         [{bin_element,
           {583,34},
           {string,{583,34},"foo(Var)"},
           default,default}]},
        {nil,{583,46}}},
       {map,
        {583,49},
        [{map_field_exact,
          {583,61},
          {bin,
           {583,52},
           [{bin_element,{583,54},{string,{583,54},"en"},default,default}]},
          {bin,
           {583,64},
           [{bin_element,
             {583,66},
             {string,{583,66},"Foo does X"},
             default,default}]}}]},
       {map,{583,84},[]}]},
     {var,{583,91},'Foo'}}]}]}.
{function,
 {585,1},
 skip_doc,1,
 [{clause,
   {585,1},
   [{var,{585,1},'_'}],
   [[{call,
      {585,1},
      {remote,{585,1},{atom,{585,1},fake},{atom,{585,1},is_beam_bif_info}},
      []}]],
   [{debug_line,585,311},{atom,{585,1},ignore}]},
  {clause,
   {585,1},
   [{var,{585,10},'Conf'}],
   [],
   [{debug_line,586,312},
    {match,
     {586,3},
     {var,{586,3},'ModuleName'},
     {call,
      {586,16},
      {remote,{586,16},{atom,{586,16},erlang},{atom,{586,16},atom_to_list}},
      [{atom,{586,16},skip_doc}]}},
    {debug_line,587,313},
    {match,
     {587,3},
     {tuple,{587,3},[{atom,{587,4},ok},{var,{587,8},'ModName'}]},
     {call,
      {587,19},
      {atom,{587,19},default_compile_file},
      [{var,{587,40},'Conf'},
       {var,{587,46},'ModuleName'},
       {block,0,[{cons,{587,58},{atom,{587,59},no_docs},{nil,{587,66}}}]}]}},
    {debug_line,589,314},
    {match,
     {589,3},
     {tuple,
      {589,3},
      [{atom,{589,4},ok},
       {tuple,
        {589,7},
        [{atom,{589,8},docs_v1},
         {integer,{589,16},0},
         {atom,{589,18},erlang},
         {bin,
          {589,25},
          [{bin_element,
            {589,27},
            {string,{589,27},"application/erlang+html"},
            default,default}]},
         {atom,{589,55},none},
         {map,
          {590,6},
          [{map_field_exact,
            {590,18},
            {atom,{590,8},generated},
            {atom,{590,21},true}},
           {map_field_exact,
            {591,20},
            {atom,{591,8},otp_doc_vsn},
            {tuple,
             {591,23},
             [{integer,{591,24},1},
              {integer,{591,26},0},
              {integer,{591,28},0}]}}]},
         {cons,
          {592,8},
          {tuple,
           {592,9},
           [{tuple,
             {592,10},
             [{atom,{592,11},function},
              {atom,{592,20},main},
              {integer,{592,25},0}]},
            {tuple,{592,28},[{integer,{592,29},8},{integer,{592,31},1}]},
            {cons,
             {592,34},
             {bin,
              {592,35},
              [{bin_element,
                {592,37},
                {string,{592,37},"main/0"},
                default,default}]},
             {nil,{592,47}}},
            {atom,{592,49},none},
            {map,{592,54},[]}]},
          {cons,
           {593,9},
           {tuple,
            {593,9},
            [{tuple,
              {593,10},
              [{atom,{593,11},function},
               {atom,{593,20},foo},
               {integer,{593,24},1}]},
             {tuple,{593,27},[{integer,{593,28},16},{integer,{593,31},1}]},
             {cons,
              {593,34},
              {bin,
               {593,35},
               [{bin_element,
                 {593,37},
                 {string,{593,37},"foo/1"},
                 default,default}]},
              {nil,{593,46}}},
             {atom,{593,48},none},
             {map,{593,53},[]}]},
           {nil,{593,57}}}}]}]},
     {call,
      {593,63},
      {remote,{593,67},{atom,{593,63},code},{atom,{593,68},get_doc}},
      [{var,{593,76},'ModName'}]}},
    {debug_line,595,315},
    {match,
     {595,3},
     {tuple,{595,3},[{atom,{595,4},error},{atom,{595,11},missing}]},
     {call,
      {596,7},
      {remote,{596,11},{atom,{596,7},code},{atom,{596,12},get_doc}},
      [{var,{596,20},'ModName'},
       {block,0,
        [{debug_line,596,316},
         {map,
          {596,29},
          [{map_field_assoc,
            {596,40},
            {atom,{596,32},sources},
            {cons,{596,43},{atom,{596,44},eep48},{nil,{596,49}}}}]}]}]}},
    {debug_line,598,317},
    {match,
     {598,3},
     {tuple,{598,3},[{atom,{598,4},ok},{var,{598,8},'_ModName'}]},
     {call,
      {598,20},
      {atom,{598,20},compile_file},
      [{var,{598,33},'Conf'},
       {var,{598,39},'ModuleName'},
       {block,0,
        [{cons,
          {598,51},
          {atom,{598,52},report},
          {cons,
           {598,60},
           {atom,{598,60},return_errors},
           {cons,{598,75},{atom,{598,75},no_docs},{nil,{598,82}}}}}]}]}},
    {debug_line,599,318},
    {match,
     {599,3},
     {tuple,{599,3},[{atom,{599,4},error},{atom,{599,11},missing}]},
     {call,
      {599,22},
      {remote,{599,26},{atom,{599,22},code},{atom,{599,27},get_doc}},
      [{var,{599,35},'ModName'}]}},
    {debug_line,600,319},
    {atom,{600,3},ok}]}]}.
{function,
    {602,1},
    no_doc_attributes,1,
    [{clause,
         {602,1},
         [{var,{602,1},'_'}],
         [[{call,
               {602,1},
               {remote,
                   {602,1},
                   {atom,{602,1},fake},
                   {atom,{602,1},is_beam_bif_info}},
               []}]],
         [{debug_line,602,320},{atom,{602,1},ignore}]},
     {clause,
         {602,1},
         [{var,{602,19},'Conf'}],
         [],
         [{debug_line,603,321},
          {match,
              {603,3},
              {var,{603,3},'ModuleName'},
              {call,
                  {603,16},
                  {remote,
                      {603,16},
                      {atom,{603,16},erlang},
                      {atom,{603,16},atom_to_list}},
                  [{atom,{603,16},no_doc_attributes}]}},
          {debug_line,604,322},
          {match,
              {604,3},
              {tuple,{604,3},[{atom,{604,4},ok},{var,{604,8},'ModName'}]},
              {call,
                  {604,19},
                  {atom,{604,19},default_compile_file},
                  [{var,{604,40},'Conf'},
                   {var,{604,46},'ModuleName'},
                   {nil,{604,58}}]}},
          {debug_line,606,323},
          {match,
              {606,3},
              {tuple,{606,3},[{atom,{606,4},error},{atom,{606,11},missing}]},
              {call,
                  {607,7},
                  {remote,
                      {607,11},
                      {atom,{607,7},code},
                      {atom,{607,12},get_doc}},
                  [{var,{607,20},'ModName'},
                   {block,0,
                       [{debug_line,607,324},
                        {map,
                            {607,29},
                            [{map_field_assoc,
                                 {607,40},
                                 {atom,{607,32},sources},
                                 {cons,
                                     {607,43},
                                     {atom,{607,44},eep48},
                                     {nil,{607,49}}}}]}]}]}},
          {debug_line,609,325},
          {atom,{609,3},ok}]}]}.
{function,
 {611,1},
 docs_from_ast,1,
 [{clause,
   {611,1},
   [{var,{611,1},'_'}],
   [[{call,
      {611,1},
      {remote,{611,1},{atom,{611,1},fake},{atom,{611,1},is_beam_bif_info}},
      []}]],
   [{debug_line,611,326},{atom,{611,1},ignore}]},
  {clause,
   {611,1},
   [{var,{611,15},'_Conf'}],
   [],
   [{debug_line,612,327},
    {match,
     {612,5},
     {var,{612,5},'Code'},
     {string,
      {612,12},
      "-module(test).\n-moduledoc \"moduledoc\".\n-export([main/0]).\n-doc \"main\".\nmain() -> ok."}},
    {debug_line,620,328},
    {match,
     {620,5},
     {tuple,
      {620,5},
      [{atom,{620,6},ok},{atom,{620,10},test},{var,{620,16},'BeamCode'}]},
     {call,
      {620,28},
      {remote,{620,35},{atom,{620,28},compile},{atom,{620,36},forms}},
      [{block,0,
        [{call,
          {620,42},
          {atom,{620,42},scan_and_parse},
          [{var,{620,57},'Code'}]}]},
       {block,0,
        [{cons,{620,63},{atom,{620,64},debug_info},{nil,{620,74}}}]}]}},
    {debug_line,621,329},
    {match,
     {621,5},
     {tuple,
      {621,5},
      [{atom,{621,6},ok},
       {tuple,
        {621,10},
        [{atom,{621,11},test},
         {cons,
          {621,17},
          {tuple,
           {621,18},
           [{atom,{621,19},documentation},{var,{621,34},'Docs'}]},
          {nil,{621,40}}}]}]},
     {call,
      {621,46},
      {remote,{621,54},{atom,{621,46},beam_lib},{atom,{621,55},chunks}},
      [{var,{621,62},'BeamCode'},
       {block,0,
        [{cons,{621,72},{atom,{621,73},documentation},{nil,{621,86}}}]}]}},
    {debug_line,623,330},
    {block,
     {623,6},
     [{call,
       {623,6},
       {'fun',
        {623,6},
        {clauses,
         [{clause,
           {623,6},
           [],[],
           [{'case',
             {623,6},
             {var,{627,8},'Docs'},
             [{clause,
               {624,8},
               [{tuple,
                 {624,8},
                 [{atom,{624,8},docs_v1},
                  {integer,{625,25},2},
                  {var,{624,8},'_'},
                  {var,{624,8},'_'},
                  {map,
                   {624,31},
                   [{map_field_exact,
                     {624,43},
                     {bin,
                      {624,34},
                      [{bin_element,
                        {624,36},
                        {string,{624,36},"en"},
                        default,default}]},
                     {bin,
                      {624,46},
                      [{bin_element,
                        {624,48},
                        {string,{624,48},"moduledoc"},
                        default,default}]}}]},
                  {var,{624,8},'_'},
                  {cons,
                   {626,25},
                   {tuple,
                    {626,26},
                    [{tuple,
                      {626,27},
                      [{atom,{626,28},function},
                       {atom,{626,37},main},
                       {integer,{626,42},0}]},
                     {integer,{626,46},4},
                     {var,{626,49},'_'},
                     {map,
                      {626,52},
                      [{map_field_exact,
                        {626,64},
                        {bin,
                         {626,55},
                         [{bin_element,
                           {626,57},
                           {string,{626,57},"en"},
                           default,default}]},
                        {bin,
                         {626,67},
                         [{bin_element,
                           {626,69},
                           {string,{626,69},"main"},
                           default,default}]}}]},
                     {var,{626,81},'_'}]},
                   {nil,{626,83}}}]}],
               [],
               [{debug_line,626,331},{atom,{626,84},ok}]},
              {clause,
               {626,84},
               [{var,{626,84},'X__V'}],
               [],
               [{debug_line,626,332},
                {call,
                 {626,84},
                 {remote,
                  {626,84},
                  {atom,{626,84},erlang},
                  {atom,{626,84},error}},
                 [{block,0,
                   [{tuple,
                     {626,84},
                     [{atom,{626,84},assertMatch},
                      {cons,
                       {626,84},
                       {tuple,
                        {626,84},
                        [{atom,{626,84},module},
                         {atom,{626,84},beam_doc_SUITE}]},
                       {cons,
                        {626,84},
                        {tuple,
                         {626,84},
                         [{atom,{626,84},line},{integer,{626,84},626}]},
                        {cons,
                         {626,84},
                         {tuple,
                          {626,84},
                          [{atom,{626,84},expression},
                           {string,{626,84},"Docs"}]},
                         {cons,
                          {626,84},
                          {tuple,
                           {626,84},
                           [{atom,{626,84},pattern},
                            {string,
                             {626,84},
                             "# docs_v1 { module_doc = # { << \"en\" >> := << \"moduledoc\" >> } , anno = 2 , docs = [ { { function , main , 0 } , 4 , _ , # { << \"en\" >> := << \"main\" >> } , _ } ] }"}]},
                          {cons,
                           {626,84},
                           {tuple,
                            {626,84},
                            [{atom,{626,84},value},{var,{626,84},'X__V'}]},
                           {nil,{626,84}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,629,333},
    {call,
     {629,5},
     {atom,{629,5},check_no_doc_attributes},
     [{var,{629,29},'BeamCode'}]},
    {debug_line,631,334},
    {match,
     {631,5},
     {tuple,
      {631,5},
      [{atom,{631,6},ok},
       {atom,{631,10},test},
       {var,{631,16},'BeamCodeWSource'}]},
     {call,
      {631,35},
      {remote,{631,42},{atom,{631,35},compile},{atom,{631,43},forms}},
      [{block,0,
        [{call,
          {631,49},
          {atom,{631,49},scan_and_parse},
          [{var,{631,64},'Code'}]}]},
       {block,0,
        [{cons,
          {631,70},
          {atom,{631,71},beam_docs},
          {cons,
           {631,82},
           {atom,{631,82},debug_info},
           {cons,
            {631,94},
            {tuple,
             {631,94},
             [{atom,{631,95},source},{string,{631,103},"test.erl"}]},
            {nil,{631,114}}}}}]}]}},
    {debug_line,632,335},
    {match,
     {632,5},
     {tuple,
      {632,5},
      [{atom,{632,6},ok},
       {tuple,
        {632,10},
        [{atom,{632,11},test},
         {cons,
          {632,17},
          {tuple,
           {632,18},
           [{atom,{632,19},documentation},{var,{632,34},'DocsWSource'}]},
          {nil,{632,47}}}]}]},
     {call,
      {632,53},
      {remote,{632,61},{atom,{632,53},beam_lib},{atom,{632,62},chunks}},
      [{var,{632,69},'BeamCodeWSource'},
       {block,0,
        [{cons,{632,86},{atom,{632,87},documentation},{nil,{632,100}}}]}]}},
    {debug_line,634,336},
    {block,
     {634,6},
     [{call,
       {634,6},
       {'fun',
        {634,6},
        {clauses,
         [{clause,
           {634,6},
           [],[],
           [{'case',
             {634,6},
             {var,{639,8},'DocsWSource'},
             [{clause,
               {635,8},
               [{tuple,
                 {635,8},
                 [{atom,{635,8},docs_v1},
                  {integer,{636,25},2},
                  {var,{635,8},'_'},
                  {var,{635,8},'_'},
                  {map,
                   {635,31},
                   [{map_field_exact,
                     {635,43},
                     {bin,
                      {635,34},
                      [{bin_element,
                        {635,36},
                        {string,{635,36},"en"},
                        default,default}]},
                     {bin,
                      {635,46},
                      [{bin_element,
                        {635,48},
                        {string,{635,48},"moduledoc"},
                        default,default}]}}]},
                  {var,{635,8},'_'},
                  {cons,
                   {637,25},
                   {tuple,
                    {637,26},
                    [{tuple,
                      {637,27},
                      [{atom,{637,28},function},
                       {atom,{637,37},main},
                       {integer,{637,42},0}]},
                     {integer,{637,46},4},
                     {var,{638,27},'_'},
                     {map,
                      {638,30},
                      [{map_field_exact,
                        {638,42},
                        {bin,
                         {638,33},
                         [{bin_element,
                           {638,35},
                           {string,{638,35},"en"},
                           default,default}]},
                        {bin,
                         {638,45},
                         [{bin_element,
                           {638,47},
                           {string,{638,47},"main"},
                           default,default}]}}]},
                     {var,{638,59},'_'}]},
                   {nil,{638,61}}}]}],
               [],
               [{debug_line,638,337},{atom,{638,62},ok}]},
              {clause,
               {638,62},
               [{var,{638,62},'X__V'}],
               [],
               [{debug_line,638,338},
                {call,
                 {638,62},
                 {remote,
                  {638,62},
                  {atom,{638,62},erlang},
                  {atom,{638,62},error}},
                 [{block,0,
                   [{tuple,
                     {638,62},
                     [{atom,{638,62},assertMatch},
                      {cons,
                       {638,62},
                       {tuple,
                        {638,62},
                        [{atom,{638,62},module},
                         {atom,{638,62},beam_doc_SUITE}]},
                       {cons,
                        {638,62},
                        {tuple,
                         {638,62},
                         [{atom,{638,62},line},{integer,{638,62},638}]},
                        {cons,
                         {638,62},
                         {tuple,
                          {638,62},
                          [{atom,{638,62},expression},
                           {string,{638,62},"DocsWSource"}]},
                         {cons,
                          {638,62},
                          {tuple,
                           {638,62},
                           [{atom,{638,62},pattern},
                            {string,
                             {638,62},
                             "# docs_v1 { module_doc = # { << \"en\" >> := << \"moduledoc\" >> } , anno = 2 , docs = [ { { function , main , 0 } , 4 , _ , # { << \"en\" >> := << \"main\" >> } , _ } ] }"}]},
                          {cons,
                           {638,62},
                           {tuple,
                            {638,62},
                            [{atom,{638,62},value},{var,{638,62},'X__V'}]},
                           {nil,{638,62}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,640,339},
    {call,
     {640,5},
     {atom,{640,5},check_no_doc_attributes},
     [{var,{640,29},'BeamCodeWSource'}]},
    {debug_line,641,340},
    {atom,{641,5},ok}]}]}.
{function,
 {644,1},
 converted_metadata,1,
 [{clause,
   {644,1},
   [{var,{644,1},'_'}],
   [[{call,
      {644,1},
      {remote,{644,1},{atom,{644,1},fake},{atom,{644,1},is_beam_bif_info}},
      []}]],
   [{debug_line,644,341},{atom,{644,1},ignore}]},
  {clause,
   {644,1},
   [{var,{644,20},'Config'}],
   [],
   [{debug_line,645,342},
    {match,
     {645,5},
     {var,{645,5},'ModuleName'},
     {call,
      {645,19},
      {remote,{645,19},{atom,{645,19},erlang},{atom,{645,19},atom_to_list}},
      [{atom,{645,19},converted_metadata}]}},
    {debug_line,646,343},
    {match,
     {646,5},
     {tuple,
      {646,5},
      [{atom,{646,6},ok},{var,{646,10},'ModName'},{nil,{646,19}}]},
     {call,
      {646,25},
      {atom,{646,25},default_compile_file},
      [{var,{646,46},'Config'},
       {var,{646,54},'ModuleName'},
       {block,0,
        [{cons,
          {646,66},
          {atom,{646,67},return_warnings},
          {cons,{646,84},{atom,{646,84},report},{nil,{646,90}}}}]}]}},
    {debug_line,648,344},
    {match,
     {648,5},
     {tuple,
      {648,5},
      [{atom,{648,6},ok},
       {tuple,
        {648,10},
        [{atom,{648,11},docs_v1},
         {var,{648,20},'_ModuleAnno'},
         {var,{648,32},'_'},
         {var,{648,35},'_'},
         {var,{648,38},'_'},
         {var,{648,41},'DocMetadata'},
         {cons,{649,11},{var,{649,12},'Test'},{nil,{649,16}}}]}]},
     {call,
      {649,22},
      {remote,{649,26},{atom,{649,22},code},{atom,{649,27},get_doc}},
      [{var,{649,35},'ModName'}]}},
    {debug_line,650,345},
    {block,
     {650,6},
     [{call,
       {650,6},
       {'fun',
        {650,6},
        {clauses,
         [{clause,
           {650,6},
           [],[],
           [{'case',
             {650,6},
             {var,{650,44},'DocMetadata'},
             [{clause,
               {650,18},
               [{map,
                 {650,18},
                 [{map_field_exact,
                   {650,28},
                   {atom,{650,21},format},
                   {bin,
                    {650,31},
                    [{bin_element,
                      {650,32},
                      {string,{650,32},"custom"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{650,41},ok}]},
              {clause,
               {650,41},
               [{var,{650,41},'X__V'}],
               [],
               [{call,
                 {650,41},
                 {remote,
                  {650,41},
                  {atom,{650,41},erlang},
                  {atom,{650,41},error}},
                 [{block,0,
                   [{tuple,
                     {650,41},
                     [{atom,{650,41},assertMatch},
                      {cons,
                       {650,41},
                       {tuple,
                        {650,41},
                        [{atom,{650,41},module},
                         {atom,{650,41},beam_doc_SUITE}]},
                       {cons,
                        {650,41},
                        {tuple,
                         {650,41},
                         [{atom,{650,41},line},{integer,{650,41},650}]},
                        {cons,
                         {650,41},
                         {tuple,
                          {650,41},
                          [{atom,{650,41},expression},
                           {string,{650,41},"DocMetadata"}]},
                         {cons,
                          {650,41},
                          {tuple,
                           {650,41},
                           [{atom,{650,41},pattern},
                            {string,
                             {650,41},
                             "# { format := '' \"custom\" [] }"}]},
                          {cons,
                           {650,41},
                           {tuple,
                            {650,41},
                            [{atom,{650,41},value},{var,{650,41},'X__V'}]},
                           {nil,{650,41}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,651,346},
    {block,
     {651,6},
     [{call,
       {651,6},
       {'fun',
        {651,6},
        {clauses,
         [{clause,
           {651,6},
           [],[],
           [{'case',
             {651,6},
             {var,{651,40},'DocMetadata'},
             [{clause,
               {651,18},
               [{map,
                 {651,18},
                 [{map_field_exact,
                   {651,27},
                   {atom,{651,21},since},
                   {bin,
                    {651,30},
                    [{bin_element,
                      {651,31},
                      {string,{651,31},"1.0"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{651,37},ok}]},
              {clause,
               {651,37},
               [{var,{651,37},'X__V'}],
               [],
               [{call,
                 {651,37},
                 {remote,
                  {651,37},
                  {atom,{651,37},erlang},
                  {atom,{651,37},error}},
                 [{block,0,
                   [{tuple,
                     {651,37},
                     [{atom,{651,37},assertMatch},
                      {cons,
                       {651,37},
                       {tuple,
                        {651,37},
                        [{atom,{651,37},module},
                         {atom,{651,37},beam_doc_SUITE}]},
                       {cons,
                        {651,37},
                        {tuple,
                         {651,37},
                         [{atom,{651,37},line},{integer,{651,37},651}]},
                        {cons,
                         {651,37},
                         {tuple,
                          {651,37},
                          [{atom,{651,37},expression},
                           {string,{651,37},"DocMetadata"}]},
                         {cons,
                          {651,37},
                          {tuple,
                           {651,37},
                           [{atom,{651,37},pattern},
                            {string,{651,37},"# { since := '' \"1.0\" [] }"}]},
                          {cons,
                           {651,37},
                           {tuple,
                            {651,37},
                            [{atom,{651,37},value},{var,{651,37},'X__V'}]},
                           {nil,{651,37}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,652,347},
    {block,
     {652,6},
     [{call,
       {652,6},
       {'fun',
        {652,6},
        {clauses,
         [{clause,
           {652,6},
           [],[],
           [{'case',
             {652,6},
             {var,{652,45},'DocMetadata'},
             [{clause,
               {652,18},
               [{map,
                 {652,18},
                 [{map_field_exact,
                   {652,32},
                   {atom,{652,21},deprecated},
                   {bin,
                    {652,35},
                    [{bin_element,
                      {652,36},
                      {string,{652,36},"yes"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{652,42},ok}]},
              {clause,
               {652,42},
               [{var,{652,42},'X__V'}],
               [],
               [{call,
                 {652,42},
                 {remote,
                  {652,42},
                  {atom,{652,42},erlang},
                  {atom,{652,42},error}},
                 [{block,0,
                   [{tuple,
                     {652,42},
                     [{atom,{652,42},assertMatch},
                      {cons,
                       {652,42},
                       {tuple,
                        {652,42},
                        [{atom,{652,42},module},
                         {atom,{652,42},beam_doc_SUITE}]},
                       {cons,
                        {652,42},
                        {tuple,
                         {652,42},
                         [{atom,{652,42},line},{integer,{652,42},652}]},
                        {cons,
                         {652,42},
                         {tuple,
                          {652,42},
                          [{atom,{652,42},expression},
                           {string,{652,42},"DocMetadata"}]},
                         {cons,
                          {652,42},
                          {tuple,
                           {652,42},
                           [{atom,{652,42},pattern},
                            {string,
                             {652,42},
                             "# { deprecated := '' \"yes\" [] }"}]},
                          {cons,
                           {652,42},
                           {tuple,
                            {652,42},
                            [{atom,{652,42},value},{var,{652,42},'X__V'}]},
                           {nil,{652,42}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,653,348},
    {block,
     {653,6},
     [{call,
       {653,6},
       {'fun',
        {653,6},
        {clauses,
         [{clause,
           {653,6},
           [],[],
           [{'case',
             {653,6},
             {var,{653,58},'DocMetadata'},
             [{clause,
               {653,18},
               [{map,
                 {653,18},
                 [{map_field_exact,
                   {653,29},
                   {atom,{653,21},authors},
                   {cons,
                    {653,32},
                    {bin,
                     {653,33},
                     [{bin_element,
                       {653,34},
                       {string,{653,34},"me"},
                       default,
                       [utf8]}]},
                    {cons,
                     {653,39},
                     {bin,
                      {653,39},
                      [{bin_element,
                        {653,40},
                        {string,{653,40},"myself"},
                        default,
                        [utf8]}]},
                     {cons,
                      {653,49},
                      {bin,
                       {653,49},
                       [{bin_element,
                         {653,50},
                         {string,{653,50},"I"},
                         default,
                         [utf8]}]},
                      {nil,{653,53}}}}}}]}],
               [],
               [{atom,{653,55},ok}]},
              {clause,
               {653,55},
               [{var,{653,55},'X__V'}],
               [],
               [{call,
                 {653,55},
                 {remote,
                  {653,55},
                  {atom,{653,55},erlang},
                  {atom,{653,55},error}},
                 [{block,0,
                   [{tuple,
                     {653,55},
                     [{atom,{653,55},assertMatch},
                      {cons,
                       {653,55},
                       {tuple,
                        {653,55},
                        [{atom,{653,55},module},
                         {atom,{653,55},beam_doc_SUITE}]},
                       {cons,
                        {653,55},
                        {tuple,
                         {653,55},
                         [{atom,{653,55},line},{integer,{653,55},653}]},
                        {cons,
                         {653,55},
                         {tuple,
                          {653,55},
                          [{atom,{653,55},expression},
                           {string,{653,55},"DocMetadata"}]},
                         {cons,
                          {653,55},
                          {tuple,
                           {653,55},
                           [{atom,{653,55},pattern},
                            {string,
                             {653,55},
                             "# { authors := [ '' \"me\" [] , '' \"myself\" [] , '' \"I\" [] ] }"}]},
                          {cons,
                           {653,55},
                           {tuple,
                            {653,55},
                            [{atom,{653,55},value},{var,{653,55},'X__V'}]},
                           {nil,{653,55}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,654,349},
    {match,
     {654,5},
     {tuple,
      {654,5},
      [{tuple,
        {654,6},
        [{atom,{654,7},function},{atom,{654,16},test},{integer,{654,21},0}]},
       {var,{654,25},'_'},
       {cons,{654,28},{var,{654,29},'_'},{nil,{654,30}}},
       {atom,{654,33},none},
       {var,{654,38},'TestMetadata'}]},
     {var,{654,54},'Test'}},
    {debug_line,655,350},
    {block,
     {655,6},
     [{call,
       {655,6},
       {'fun',
        {655,6},
        {clauses,
         [{clause,
           {655,6},
           [],[],
           [{'case',
             {655,6},
             {var,{655,40},'TestMetadata'},
             [{clause,
               {655,18},
               [{map,
                 {655,18},
                 [{map_field_exact,
                   {655,27},
                   {atom,{655,21},since},
                   {bin,
                    {655,30},
                    [{bin_element,
                      {655,31},
                      {string,{655,31},"1.0"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{655,37},ok}]},
              {clause,
               {655,37},
               [{var,{655,37},'X__V'}],
               [],
               [{call,
                 {655,37},
                 {remote,
                  {655,37},
                  {atom,{655,37},erlang},
                  {atom,{655,37},error}},
                 [{block,0,
                   [{tuple,
                     {655,37},
                     [{atom,{655,37},assertMatch},
                      {cons,
                       {655,37},
                       {tuple,
                        {655,37},
                        [{atom,{655,37},module},
                         {atom,{655,37},beam_doc_SUITE}]},
                       {cons,
                        {655,37},
                        {tuple,
                         {655,37},
                         [{atom,{655,37},line},{integer,{655,37},655}]},
                        {cons,
                         {655,37},
                         {tuple,
                          {655,37},
                          [{atom,{655,37},expression},
                           {string,{655,37},"TestMetadata"}]},
                         {cons,
                          {655,37},
                          {tuple,
                           {655,37},
                           [{atom,{655,37},pattern},
                            {string,{655,37},"# { since := '' \"1.0\" [] }"}]},
                          {cons,
                           {655,37},
                           {tuple,
                            {655,37},
                            [{atom,{655,37},value},{var,{655,37},'X__V'}]},
                           {nil,{655,37}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,656,351},
    {block,
     {656,6},
     [{call,
       {656,6},
       {'fun',
        {656,6},
        {clauses,
         [{clause,
           {656,6},
           [],[],
           [{'case',
             {656,6},
             {var,{656,45},'TestMetadata'},
             [{clause,
               {656,18},
               [{map,
                 {656,18},
                 [{map_field_exact,
                   {656,32},
                   {atom,{656,21},deprecated},
                   {bin,
                    {656,35},
                    [{bin_element,
                      {656,36},
                      {string,{656,36},"yes"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{656,42},ok}]},
              {clause,
               {656,42},
               [{var,{656,42},'X__V'}],
               [],
               [{call,
                 {656,42},
                 {remote,
                  {656,42},
                  {atom,{656,42},erlang},
                  {atom,{656,42},error}},
                 [{block,0,
                   [{tuple,
                     {656,42},
                     [{atom,{656,42},assertMatch},
                      {cons,
                       {656,42},
                       {tuple,
                        {656,42},
                        [{atom,{656,42},module},
                         {atom,{656,42},beam_doc_SUITE}]},
                       {cons,
                        {656,42},
                        {tuple,
                         {656,42},
                         [{atom,{656,42},line},{integer,{656,42},656}]},
                        {cons,
                         {656,42},
                         {tuple,
                          {656,42},
                          [{atom,{656,42},expression},
                           {string,{656,42},"TestMetadata"}]},
                         {cons,
                          {656,42},
                          {tuple,
                           {656,42},
                           [{atom,{656,42},pattern},
                            {string,
                             {656,42},
                             "# { deprecated := '' \"yes\" [] }"}]},
                          {cons,
                           {656,42},
                           {tuple,
                            {656,42},
                            [{atom,{656,42},value},{var,{656,42},'X__V'}]},
                           {nil,{656,42}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,657,352},
    {block,
     {657,6},
     [{call,
       {657,6},
       {'fun',
        {657,6},
        {clauses,
         [{clause,
           {657,6},
           [],[],
           [{'case',
             {657,6},
             {var,{657,42},'TestMetadata'},
             [{clause,
               {657,18},
               [{map,
                 {657,18},
                 [{map_field_exact,
                   {657,27},
                   {atom,{657,21},equiv},
                   {bin,
                    {657,30},
                    [{bin_element,
                      {657,31},
                      {string,{657,31},"other"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{657,39},ok}]},
              {clause,
               {657,39},
               [{var,{657,39},'X__V'}],
               [],
               [{call,
                 {657,39},
                 {remote,
                  {657,39},
                  {atom,{657,39},erlang},
                  {atom,{657,39},error}},
                 [{block,0,
                   [{tuple,
                     {657,39},
                     [{atom,{657,39},assertMatch},
                      {cons,
                       {657,39},
                       {tuple,
                        {657,39},
                        [{atom,{657,39},module},
                         {atom,{657,39},beam_doc_SUITE}]},
                       {cons,
                        {657,39},
                        {tuple,
                         {657,39},
                         [{atom,{657,39},line},{integer,{657,39},657}]},
                        {cons,
                         {657,39},
                         {tuple,
                          {657,39},
                          [{atom,{657,39},expression},
                           {string,{657,39},"TestMetadata"}]},
                         {cons,
                          {657,39},
                          {tuple,
                           {657,39},
                           [{atom,{657,39},pattern},
                            {string,
                             {657,39},
                             "# { equiv := '' \"other\" [] }"}]},
                          {cons,
                           {657,39},
                           {tuple,
                            {657,39},
                            [{atom,{657,39},value},{var,{657,39},'X__V'}]},
                           {nil,{657,39}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,658,353},
    {block,
     {658,6},
     [{call,
       {658,6},
       {'fun',
        {658,6},
        {clauses,
         [{clause,
           {658,6},
           [],[],
           [{'case',
             {658,6},
             {var,{658,47},'TestMetadata'},
             [{clause,
               {658,18},
               [{map,
                 {658,18},
                 [{map_field_exact,
                   {658,27},
                   {atom,{658,21},group},
                   {bin,
                    {658,30},
                    [{bin_element,
                      {658,31},
                      {string,{658,31},"collection"},
                      default,
                      [utf8]}]}}]}],
               [],
               [{atom,{658,44},ok}]},
              {clause,
               {658,44},
               [{var,{658,44},'X__V'}],
               [],
               [{call,
                 {658,44},
                 {remote,
                  {658,44},
                  {atom,{658,44},erlang},
                  {atom,{658,44},error}},
                 [{block,0,
                   [{tuple,
                     {658,44},
                     [{atom,{658,44},assertMatch},
                      {cons,
                       {658,44},
                       {tuple,
                        {658,44},
                        [{atom,{658,44},module},
                         {atom,{658,44},beam_doc_SUITE}]},
                       {cons,
                        {658,44},
                        {tuple,
                         {658,44},
                         [{atom,{658,44},line},{integer,{658,44},658}]},
                        {cons,
                         {658,44},
                         {tuple,
                          {658,44},
                          [{atom,{658,44},expression},
                           {string,{658,44},"TestMetadata"}]},
                         {cons,
                          {658,44},
                          {tuple,
                           {658,44},
                           [{atom,{658,44},pattern},
                            {string,
                             {658,44},
                             "# { group := '' \"collection\" [] }"}]},
                          {cons,
                           {658,44},
                           {tuple,
                            {658,44},
                            [{atom,{658,44},value},{var,{658,44},'X__V'}]},
                           {nil,{658,44}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,660,354},
    {atom,{660,5},ok}]}]}.
{function,
 {662,1},
 converted_metadata_warnings,1,
 [{clause,
   {662,1},
   [{var,{662,1},'_'}],
   [[{call,
      {662,1},
      {remote,{662,1},{atom,{662,1},fake},{atom,{662,1},is_beam_bif_info}},
      []}]],
   [{debug_line,662,355},{atom,{662,1},ignore}]},
  {clause,
   {662,1},
   [{var,{662,29},'Config'}],
   [],
   [{debug_line,663,356},
    {match,
     {663,5},
     {var,{663,5},'ModuleName'},
     {call,
      {663,19},
      {remote,{663,19},{atom,{663,19},erlang},{atom,{663,19},atom_to_list}},
      [{atom,{663,19},converted_metadata_warnings}]}},
    {debug_line,664,357},
    {match,
     {664,5},
     {tuple,
      {664,5},
      [{atom,{664,6},ok},{var,{664,10},'ModName'},{var,{664,19},'Ws'}]},
     {call,
      {664,25},
      {atom,{664,25},default_compile_file},
      [{var,{664,46},'Config'},
       {var,{664,54},'ModuleName'},
       {block,0,
        [{cons,
          {664,66},
          {atom,{664,67},return_warnings},
          {cons,{664,84},{atom,{664,84},report},{nil,{664,90}}}}]}]}},
    {debug_line,666,358},
    {match,
     {666,5},
     {tuple,
      {666,5},
      [{atom,{666,6},ok},
       {tuple,
        {666,10},
        [{atom,{666,11},docs_v1},
         {var,{666,20},'_ModuleAnno'},
         {var,{666,32},'_'},
         {var,{666,35},'_'},
         {var,{666,38},'_'},
         {var,{666,41},'DocMetadata'},
         {cons,{667,11},{var,{667,12},'Test'},{nil,{667,16}}}]}]},
     {call,
      {667,22},
      {remote,{667,26},{atom,{667,22},code},{atom,{667,27},get_doc}},
      [{var,{667,35},'ModName'}]}},
    {debug_line,668,359},
    {block,
     {668,6},
     [{call,
       {668,6},
       {'fun',
        {668,6},
        {clauses,
         [{clause,
           {668,6},
           [],[],
           [{'case',
             {668,6},
             {var,{668,41},'DocMetadata'},
             [{clause,
               {668,18},
               [{map,
                 {668,18},
                 [{map_field_exact,
                   {668,28},
                   {atom,{668,21},format},
                   {atom,{668,31},custom}}]}],
               [],
               [{atom,{668,38},ok}]},
              {clause,
               {668,38},
               [{var,{668,38},'X__V'}],
               [],
               [{call,
                 {668,38},
                 {remote,
                  {668,38},
                  {atom,{668,38},erlang},
                  {atom,{668,38},error}},
                 [{block,0,
                   [{tuple,
                     {668,38},
                     [{atom,{668,38},assertMatch},
                      {cons,
                       {668,38},
                       {tuple,
                        {668,38},
                        [{atom,{668,38},module},
                         {atom,{668,38},beam_doc_SUITE}]},
                       {cons,
                        {668,38},
                        {tuple,
                         {668,38},
                         [{atom,{668,38},line},{integer,{668,38},668}]},
                        {cons,
                         {668,38},
                         {tuple,
                          {668,38},
                          [{atom,{668,38},expression},
                           {string,{668,38},"DocMetadata"}]},
                         {cons,
                          {668,38},
                          {tuple,
                           {668,38},
                           [{atom,{668,38},pattern},
                            {string,{668,38},"# { format := custom }"}]},
                          {cons,
                           {668,38},
                           {tuple,
                            {668,38},
                            [{atom,{668,38},value},{var,{668,38},'X__V'}]},
                           {nil,{668,38}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,669,360},
    {block,
     {669,6},
     [{call,
       {669,6},
       {'fun',
        {669,6},
        {clauses,
         [{clause,
           {669,6},
           [],[],
           [{'case',
             {669,6},
             {var,{669,37},'DocMetadata'},
             [{clause,
               {669,18},
               [{map,
                 {669,18},
                 [{map_field_exact,
                   {669,27},
                   {atom,{669,21},since},
                   {float,{669,30},1.0}}]}],
               [],
               [{atom,{669,34},ok}]},
              {clause,
               {669,34},
               [{var,{669,34},'X__V'}],
               [],
               [{call,
                 {669,34},
                 {remote,
                  {669,34},
                  {atom,{669,34},erlang},
                  {atom,{669,34},error}},
                 [{block,0,
                   [{tuple,
                     {669,34},
                     [{atom,{669,34},assertMatch},
                      {cons,
                       {669,34},
                       {tuple,
                        {669,34},
                        [{atom,{669,34},module},
                         {atom,{669,34},beam_doc_SUITE}]},
                       {cons,
                        {669,34},
                        {tuple,
                         {669,34},
                         [{atom,{669,34},line},{integer,{669,34},669}]},
                        {cons,
                         {669,34},
                         {tuple,
                          {669,34},
                          [{atom,{669,34},expression},
                           {string,{669,34},"DocMetadata"}]},
                         {cons,
                          {669,34},
                          {tuple,
                           {669,34},
                           [{atom,{669,34},pattern},
                            {string,{669,34},"# { since := 1.0 }"}]},
                          {cons,
                           {669,34},
                           {tuple,
                            {669,34},
                            [{atom,{669,34},value},{var,{669,34},'X__V'}]},
                           {nil,{669,34}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,670,361},
    {block,
     {670,6},
     [{call,
       {670,6},
       {'fun',
        {670,6},
        {clauses,
         [{clause,
           {670,6},
           [],[],
           [{'case',
             {670,6},
             {var,{670,42},'DocMetadata'},
             [{clause,
               {670,18},
               [{map,
                 {670,18},
                 [{map_field_exact,
                   {670,32},
                   {atom,{670,21},deprecated},
                   {atom,{670,35},yes}}]}],
               [],
               [{atom,{670,39},ok}]},
              {clause,
               {670,39},
               [{var,{670,39},'X__V'}],
               [],
               [{call,
                 {670,39},
                 {remote,
                  {670,39},
                  {atom,{670,39},erlang},
                  {atom,{670,39},error}},
                 [{block,0,
                   [{tuple,
                     {670,39},
                     [{atom,{670,39},assertMatch},
                      {cons,
                       {670,39},
                       {tuple,
                        {670,39},
                        [{atom,{670,39},module},
                         {atom,{670,39},beam_doc_SUITE}]},
                       {cons,
                        {670,39},
                        {tuple,
                         {670,39},
                         [{atom,{670,39},line},{integer,{670,39},670}]},
                        {cons,
                         {670,39},
                         {tuple,
                          {670,39},
                          [{atom,{670,39},expression},
                           {string,{670,39},"DocMetadata"}]},
                         {cons,
                          {670,39},
                          {tuple,
                           {670,39},
                           [{atom,{670,39},pattern},
                            {string,{670,39},"# { deprecated := yes }"}]},
                          {cons,
                           {670,39},
                           {tuple,
                            {670,39},
                            [{atom,{670,39},value},{var,{670,39},'X__V'}]},
                           {nil,{670,39}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,671,362},
    {block,
     {671,6},
     [{call,
       {671,6},
       {'fun',
        {671,6},
        {clauses,
         [{clause,
           {671,6},
           [],[],
           [{'case',
             {671,6},
             {var,{671,55},'DocMetadata'},
             [{clause,
               {671,18},
               [{map,
                 {671,18},
                 [{map_field_exact,
                   {671,29},
                   {atom,{671,21},authors},
                   {cons,
                    {671,32},
                    {atom,{671,33},me},
                    {cons,
                     {671,36},
                     {cons,{671,36},{atom,{671,37},myself},{nil,{671,43}}},
                     {cons,
                      {671,45},
                      {tuple,{671,45},[{atom,{671,46},'I'}]},
                      {nil,{671,50}}}}}}]}],
               [],
               [{atom,{671,52},ok}]},
              {clause,
               {671,52},
               [{var,{671,52},'X__V'}],
               [],
               [{call,
                 {671,52},
                 {remote,
                  {671,52},
                  {atom,{671,52},erlang},
                  {atom,{671,52},error}},
                 [{block,0,
                   [{tuple,
                     {671,52},
                     [{atom,{671,52},assertMatch},
                      {cons,
                       {671,52},
                       {tuple,
                        {671,52},
                        [{atom,{671,52},module},
                         {atom,{671,52},beam_doc_SUITE}]},
                       {cons,
                        {671,52},
                        {tuple,
                         {671,52},
                         [{atom,{671,52},line},{integer,{671,52},671}]},
                        {cons,
                         {671,52},
                         {tuple,
                          {671,52},
                          [{atom,{671,52},expression},
                           {string,{671,52},"DocMetadata"}]},
                         {cons,
                          {671,52},
                          {tuple,
                           {671,52},
                           [{atom,{671,52},pattern},
                            {string,
                             {671,52},
                             "# { authors := [ me , [ myself ] , { 'I' } ] }"}]},
                          {cons,
                           {671,52},
                           {tuple,
                            {671,52},
                            [{atom,{671,52},value},{var,{671,52},'X__V'}]},
                           {nil,{671,52}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,673,363},
    {match,
     {673,5},
     {tuple,
      {673,5},
      [{tuple,
        {673,6},
        [{atom,{673,7},function},{atom,{673,16},test},{integer,{673,21},0}]},
       {var,{673,25},'_'},
       {cons,{673,28},{var,{673,29},'_'},{nil,{673,30}}},
       {atom,{673,33},none},
       {var,{673,38},'TestMetadata'}]},
     {var,{673,54},'Test'}},
    {debug_line,674,364},
    {block,
     {674,6},
     [{call,
       {674,6},
       {'fun',
        {674,6},
        {clauses,
         [{clause,
           {674,6},
           [],[],
           [{'case',
             {674,6},
             {var,{674,37},'TestMetadata'},
             [{clause,
               {674,18},
               [{map,
                 {674,18},
                 [{map_field_exact,
                   {674,27},
                   {atom,{674,21},since},
                   {float,{674,30},1.0}}]}],
               [],
               [{atom,{674,34},ok}]},
              {clause,
               {674,34},
               [{var,{674,34},'X__V'}],
               [],
               [{call,
                 {674,34},
                 {remote,
                  {674,34},
                  {atom,{674,34},erlang},
                  {atom,{674,34},error}},
                 [{block,0,
                   [{tuple,
                     {674,34},
                     [{atom,{674,34},assertMatch},
                      {cons,
                       {674,34},
                       {tuple,
                        {674,34},
                        [{atom,{674,34},module},
                         {atom,{674,34},beam_doc_SUITE}]},
                       {cons,
                        {674,34},
                        {tuple,
                         {674,34},
                         [{atom,{674,34},line},{integer,{674,34},674}]},
                        {cons,
                         {674,34},
                         {tuple,
                          {674,34},
                          [{atom,{674,34},expression},
                           {string,{674,34},"TestMetadata"}]},
                         {cons,
                          {674,34},
                          {tuple,
                           {674,34},
                           [{atom,{674,34},pattern},
                            {string,{674,34},"# { since := 1.0 }"}]},
                          {cons,
                           {674,34},
                           {tuple,
                            {674,34},
                            [{atom,{674,34},value},{var,{674,34},'X__V'}]},
                           {nil,{674,34}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,675,365},
    {block,
     {675,6},
     [{call,
       {675,6},
       {'fun',
        {675,6},
        {clauses,
         [{clause,
           {675,6},
           [],[],
           [{'case',
             {675,6},
             {var,{675,42},'TestMetadata'},
             [{clause,
               {675,18},
               [{map,
                 {675,18},
                 [{map_field_exact,
                   {675,32},
                   {atom,{675,21},deprecated},
                   {atom,{675,35},yes}}]}],
               [],
               [{atom,{675,39},ok}]},
              {clause,
               {675,39},
               [{var,{675,39},'X__V'}],
               [],
               [{call,
                 {675,39},
                 {remote,
                  {675,39},
                  {atom,{675,39},erlang},
                  {atom,{675,39},error}},
                 [{block,0,
                   [{tuple,
                     {675,39},
                     [{atom,{675,39},assertMatch},
                      {cons,
                       {675,39},
                       {tuple,
                        {675,39},
                        [{atom,{675,39},module},
                         {atom,{675,39},beam_doc_SUITE}]},
                       {cons,
                        {675,39},
                        {tuple,
                         {675,39},
                         [{atom,{675,39},line},{integer,{675,39},675}]},
                        {cons,
                         {675,39},
                         {tuple,
                          {675,39},
                          [{atom,{675,39},expression},
                           {string,{675,39},"TestMetadata"}]},
                         {cons,
                          {675,39},
                          {tuple,
                           {675,39},
                           [{atom,{675,39},pattern},
                            {string,{675,39},"# { deprecated := yes }"}]},
                          {cons,
                           {675,39},
                           {tuple,
                            {675,39},
                            [{atom,{675,39},value},{var,{675,39},'X__V'}]},
                           {nil,{675,39}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,676,366},
    {block,
     {676,6},
     [{call,
       {676,6},
       {'fun',
        {676,6},
        {clauses,
         [{clause,
           {676,6},
           [],[],
           [{'case',
             {676,6},
             {var,{676,39},'TestMetadata'},
             [{clause,
               {676,18},
               [{map,
                 {676,18},
                 [{map_field_exact,
                   {676,27},
                   {atom,{676,21},equiv},
                   {atom,{676,30},other}}]}],
               [],
               [{atom,{676,36},ok}]},
              {clause,
               {676,36},
               [{var,{676,36},'X__V'}],
               [],
               [{call,
                 {676,36},
                 {remote,
                  {676,36},
                  {atom,{676,36},erlang},
                  {atom,{676,36},error}},
                 [{block,0,
                   [{tuple,
                     {676,36},
                     [{atom,{676,36},assertMatch},
                      {cons,
                       {676,36},
                       {tuple,
                        {676,36},
                        [{atom,{676,36},module},
                         {atom,{676,36},beam_doc_SUITE}]},
                       {cons,
                        {676,36},
                        {tuple,
                         {676,36},
                         [{atom,{676,36},line},{integer,{676,36},676}]},
                        {cons,
                         {676,36},
                         {tuple,
                          {676,36},
                          [{atom,{676,36},expression},
                           {string,{676,36},"TestMetadata"}]},
                         {cons,
                          {676,36},
                          {tuple,
                           {676,36},
                           [{atom,{676,36},pattern},
                            {string,{676,36},"# { equiv := other }"}]},
                          {cons,
                           {676,36},
                           {tuple,
                            {676,36},
                            [{atom,{676,36},value},{var,{676,36},'X__V'}]},
                           {nil,{676,36}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,677,367},
    {block,
     {677,6},
     [{call,
       {677,6},
       {'fun',
        {677,6},
        {clauses,
         [{clause,
           {677,6},
           [],[],
           [{'case',
             {677,6},
             {var,{677,44},'TestMetadata'},
             [{clause,
               {677,18},
               [{map,
                 {677,18},
                 [{map_field_exact,
                   {677,27},
                   {atom,{677,21},group},
                   {atom,{677,30},collection}}]}],
               [],
               [{atom,{677,41},ok}]},
              {clause,
               {677,41},
               [{var,{677,41},'X__V'}],
               [],
               [{call,
                 {677,41},
                 {remote,
                  {677,41},
                  {atom,{677,41},erlang},
                  {atom,{677,41},error}},
                 [{block,0,
                   [{tuple,
                     {677,41},
                     [{atom,{677,41},assertMatch},
                      {cons,
                       {677,41},
                       {tuple,
                        {677,41},
                        [{atom,{677,41},module},
                         {atom,{677,41},beam_doc_SUITE}]},
                       {cons,
                        {677,41},
                        {tuple,
                         {677,41},
                         [{atom,{677,41},line},{integer,{677,41},677}]},
                        {cons,
                         {677,41},
                         {tuple,
                          {677,41},
                          [{atom,{677,41},expression},
                           {string,{677,41},"TestMetadata"}]},
                         {cons,
                          {677,41},
                          {tuple,
                           {677,41},
                           [{atom,{677,41},pattern},
                            {string,{677,41},"# { group := collection }"}]},
                          {cons,
                           {677,41},
                           {tuple,
                            {677,41},
                            [{atom,{677,41},value},{var,{677,41},'X__V'}]},
                           {nil,{677,41}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,679,368},
    {match,
     {679,5},
     {cons,
      {679,5},
      {tuple,
       {679,6},
       [{var,{679,7},'_File'},
        {cons,
         {680,9},
         {var,{680,10},'Authors'},
         {cons,
          {680,19},
          {var,{680,19},'ModDocDeprecated'},
          {cons,
           {680,37},
           {var,{680,37},'Format'},
           {cons,
            {680,45},
            {var,{680,45},'ModDocSince'},
            {cons,
             {681,10},
             {var,{681,10},'DocDeprecated'},
             {cons,
              {681,25},
              {var,{681,25},'Equiv'},
              {cons,
               {681,32},
               {var,{681,32},'Group'},
               {cons,
                {681,39},
                {var,{681,39},'DocSinse'},
                {nil,{681,47}}}}}}}}}}]},
      {nil,{681,49}}},
     {var,{681,53},'Ws'}},
    {debug_line,683,369},
    {match,
     {683,5},
     {var,{683,5},'ModDocAnno'},
     {tuple,{683,18},[{integer,{683,19},3},{integer,{683,21},2}]}},
    {debug_line,684,370},
    {block,
     {684,6},
     [{call,
       {684,6},
       {'fun',
        {684,6},
        {clauses,
         [{clause,
           {684,6},
           [],[],
           [{'case',
             {684,6},
             {var,{684,71},'Authors'},
             [{clause,
               {684,18},
               [{tuple,
                 {684,18},
                 [{var,{684,19},'ModDocAnno'},
                  {atom,{684,31},beam_doc},
                  {tuple,
                   {684,41},
                   [{atom,{684,42},invalid_metadata},
                    {atom,{684,60},authors}]}]}],
               [],
               [{atom,{684,68},ok}]},
              {clause,
               {684,68},
               [{var,{684,68},'X__V'}],
               [],
               [{call,
                 {684,68},
                 {remote,
                  {684,68},
                  {atom,{684,68},erlang},
                  {atom,{684,68},error}},
                 [{block,0,
                   [{tuple,
                     {684,68},
                     [{atom,{684,68},assertMatch},
                      {cons,
                       {684,68},
                       {tuple,
                        {684,68},
                        [{atom,{684,68},module},
                         {atom,{684,68},beam_doc_SUITE}]},
                       {cons,
                        {684,68},
                        {tuple,
                         {684,68},
                         [{atom,{684,68},line},{integer,{684,68},684}]},
                        {cons,
                         {684,68},
                         {tuple,
                          {684,68},
                          [{atom,{684,68},expression},
                           {string,{684,68},"Authors"}]},
                         {cons,
                          {684,68},
                          {tuple,
                           {684,68},
                           [{atom,{684,68},pattern},
                            {string,
                             {684,68},
                             "{ ModDocAnno , beam_doc , { invalid_metadata , authors } }"}]},
                          {cons,
                           {684,68},
                           {tuple,
                            {684,68},
                            [{atom,{684,68},value},{var,{684,68},'X__V'}]},
                           {nil,{684,68}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,685,371},
    {block,
     {685,6},
     [{call,
       {685,6},
       {'fun',
        {685,6},
        {clauses,
         [{clause,
           {685,6},
           [],[],
           [{'case',
             {685,6},
             {var,{685,74},'ModDocDeprecated'},
             [{clause,
               {685,18},
               [{tuple,
                 {685,18},
                 [{var,{685,19},'ModDocAnno'},
                  {atom,{685,31},beam_doc},
                  {tuple,
                   {685,41},
                   [{atom,{685,42},invalid_metadata},
                    {atom,{685,60},deprecated}]}]}],
               [],
               [{atom,{685,71},ok}]},
              {clause,
               {685,71},
               [{var,{685,71},'X__V'}],
               [],
               [{call,
                 {685,71},
                 {remote,
                  {685,71},
                  {atom,{685,71},erlang},
                  {atom,{685,71},error}},
                 [{block,0,
                   [{tuple,
                     {685,71},
                     [{atom,{685,71},assertMatch},
                      {cons,
                       {685,71},
                       {tuple,
                        {685,71},
                        [{atom,{685,71},module},
                         {atom,{685,71},beam_doc_SUITE}]},
                       {cons,
                        {685,71},
                        {tuple,
                         {685,71},
                         [{atom,{685,71},line},{integer,{685,71},685}]},
                        {cons,
                         {685,71},
                         {tuple,
                          {685,71},
                          [{atom,{685,71},expression},
                           {string,{685,71},"ModDocDeprecated"}]},
                         {cons,
                          {685,71},
                          {tuple,
                           {685,71},
                           [{atom,{685,71},pattern},
                            {string,
                             {685,71},
                             "{ ModDocAnno , beam_doc , { invalid_metadata , deprecated } }"}]},
                          {cons,
                           {685,71},
                           {tuple,
                            {685,71},
                            [{atom,{685,71},value},{var,{685,71},'X__V'}]},
                           {nil,{685,71}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,686,372},
    {block,
     {686,6},
     [{call,
       {686,6},
       {'fun',
        {686,6},
        {clauses,
         [{clause,
           {686,6},
           [],[],
           [{'case',
             {686,6},
             {var,{686,70},'Format'},
             [{clause,
               {686,18},
               [{tuple,
                 {686,18},
                 [{var,{686,19},'ModDocAnno'},
                  {atom,{686,31},beam_doc},
                  {tuple,
                   {686,41},
                   [{atom,{686,42},invalid_metadata},
                    {atom,{686,60},format}]}]}],
               [],
               [{atom,{686,67},ok}]},
              {clause,
               {686,67},
               [{var,{686,67},'X__V'}],
               [],
               [{call,
                 {686,67},
                 {remote,
                  {686,67},
                  {atom,{686,67},erlang},
                  {atom,{686,67},error}},
                 [{block,0,
                   [{tuple,
                     {686,67},
                     [{atom,{686,67},assertMatch},
                      {cons,
                       {686,67},
                       {tuple,
                        {686,67},
                        [{atom,{686,67},module},
                         {atom,{686,67},beam_doc_SUITE}]},
                       {cons,
                        {686,67},
                        {tuple,
                         {686,67},
                         [{atom,{686,67},line},{integer,{686,67},686}]},
                        {cons,
                         {686,67},
                         {tuple,
                          {686,67},
                          [{atom,{686,67},expression},
                           {string,{686,67},"Format"}]},
                         {cons,
                          {686,67},
                          {tuple,
                           {686,67},
                           [{atom,{686,67},pattern},
                            {string,
                             {686,67},
                             "{ ModDocAnno , beam_doc , { invalid_metadata , format } }"}]},
                          {cons,
                           {686,67},
                           {tuple,
                            {686,67},
                            [{atom,{686,67},value},{var,{686,67},'X__V'}]},
                           {nil,{686,67}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,687,373},
    {block,
     {687,6},
     [{call,
       {687,6},
       {'fun',
        {687,6},
        {clauses,
         [{clause,
           {687,6},
           [],[],
           [{'case',
             {687,6},
             {var,{687,69},'ModDocSince'},
             [{clause,
               {687,18},
               [{tuple,
                 {687,18},
                 [{var,{687,19},'ModDocAnno'},
                  {atom,{687,31},beam_doc},
                  {tuple,
                   {687,41},
                   [{atom,{687,42},invalid_metadata},
                    {atom,{687,60},since}]}]}],
               [],
               [{atom,{687,66},ok}]},
              {clause,
               {687,66},
               [{var,{687,66},'X__V'}],
               [],
               [{call,
                 {687,66},
                 {remote,
                  {687,66},
                  {atom,{687,66},erlang},
                  {atom,{687,66},error}},
                 [{block,0,
                   [{tuple,
                     {687,66},
                     [{atom,{687,66},assertMatch},
                      {cons,
                       {687,66},
                       {tuple,
                        {687,66},
                        [{atom,{687,66},module},
                         {atom,{687,66},beam_doc_SUITE}]},
                       {cons,
                        {687,66},
                        {tuple,
                         {687,66},
                         [{atom,{687,66},line},{integer,{687,66},687}]},
                        {cons,
                         {687,66},
                         {tuple,
                          {687,66},
                          [{atom,{687,66},expression},
                           {string,{687,66},"ModDocSince"}]},
                         {cons,
                          {687,66},
                          {tuple,
                           {687,66},
                           [{atom,{687,66},pattern},
                            {string,
                             {687,66},
                             "{ ModDocAnno , beam_doc , { invalid_metadata , since } }"}]},
                          {cons,
                           {687,66},
                           {tuple,
                            {687,66},
                            [{atom,{687,66},value},{var,{687,66},'X__V'}]},
                           {nil,{687,66}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,689,374},
    {match,
     {689,5},
     {var,{689,5},'DocAnno'},
     {tuple,{689,15},[{integer,{689,16},9},{integer,{689,18},2}]}},
    {debug_line,690,375},
    {block,
     {690,6},
     [{call,
       {690,6},
       {'fun',
        {690,6},
        {clauses,
         [{clause,
           {690,6},
           [],[],
           [{'case',
             {690,6},
             {var,{690,71},'DocDeprecated'},
             [{clause,
               {690,18},
               [{tuple,
                 {690,18},
                 [{var,{690,19},'DocAnno'},
                  {atom,{690,28},beam_doc},
                  {tuple,
                   {690,38},
                   [{atom,{690,39},invalid_metadata},
                    {atom,{690,57},deprecated}]}]}],
               [],
               [{atom,{690,68},ok}]},
              {clause,
               {690,68},
               [{var,{690,68},'X__V'}],
               [],
               [{call,
                 {690,68},
                 {remote,
                  {690,68},
                  {atom,{690,68},erlang},
                  {atom,{690,68},error}},
                 [{block,0,
                   [{tuple,
                     {690,68},
                     [{atom,{690,68},assertMatch},
                      {cons,
                       {690,68},
                       {tuple,
                        {690,68},
                        [{atom,{690,68},module},
                         {atom,{690,68},beam_doc_SUITE}]},
                       {cons,
                        {690,68},
                        {tuple,
                         {690,68},
                         [{atom,{690,68},line},{integer,{690,68},690}]},
                        {cons,
                         {690,68},
                         {tuple,
                          {690,68},
                          [{atom,{690,68},expression},
                           {string,{690,68},"DocDeprecated"}]},
                         {cons,
                          {690,68},
                          {tuple,
                           {690,68},
                           [{atom,{690,68},pattern},
                            {string,
                             {690,68},
                             "{ DocAnno , beam_doc , { invalid_metadata , deprecated } }"}]},
                          {cons,
                           {690,68},
                           {tuple,
                            {690,68},
                            [{atom,{690,68},value},{var,{690,68},'X__V'}]},
                           {nil,{690,68}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,691,376},
    {block,
     {691,6},
     [{call,
       {691,6},
       {'fun',
        {691,6},
        {clauses,
         [{clause,
           {691,6},
           [],[],
           [{'case',
             {691,6},
             {var,{691,66},'Equiv'},
             [{clause,
               {691,18},
               [{tuple,
                 {691,18},
                 [{var,{691,19},'DocAnno'},
                  {atom,{691,28},beam_doc},
                  {tuple,
                   {691,38},
                   [{atom,{691,39},invalid_metadata},
                    {atom,{691,57},equiv}]}]}],
               [],
               [{atom,{691,63},ok}]},
              {clause,
               {691,63},
               [{var,{691,63},'X__V'}],
               [],
               [{call,
                 {691,63},
                 {remote,
                  {691,63},
                  {atom,{691,63},erlang},
                  {atom,{691,63},error}},
                 [{block,0,
                   [{tuple,
                     {691,63},
                     [{atom,{691,63},assertMatch},
                      {cons,
                       {691,63},
                       {tuple,
                        {691,63},
                        [{atom,{691,63},module},
                         {atom,{691,63},beam_doc_SUITE}]},
                       {cons,
                        {691,63},
                        {tuple,
                         {691,63},
                         [{atom,{691,63},line},{integer,{691,63},691}]},
                        {cons,
                         {691,63},
                         {tuple,
                          {691,63},
                          [{atom,{691,63},expression},
                           {string,{691,63},"Equiv"}]},
                         {cons,
                          {691,63},
                          {tuple,
                           {691,63},
                           [{atom,{691,63},pattern},
                            {string,
                             {691,63},
                             "{ DocAnno , beam_doc , { invalid_metadata , equiv } }"}]},
                          {cons,
                           {691,63},
                           {tuple,
                            {691,63},
                            [{atom,{691,63},value},{var,{691,63},'X__V'}]},
                           {nil,{691,63}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,692,377},
    {block,
     {692,6},
     [{call,
       {692,6},
       {'fun',
        {692,6},
        {clauses,
         [{clause,
           {692,6},
           [],[],
           [{'case',
             {692,6},
             {var,{692,66},'Group'},
             [{clause,
               {692,18},
               [{tuple,
                 {692,18},
                 [{var,{692,19},'DocAnno'},
                  {atom,{692,28},beam_doc},
                  {tuple,
                   {692,38},
                   [{atom,{692,39},invalid_metadata},
                    {atom,{692,57},group}]}]}],
               [],
               [{atom,{692,63},ok}]},
              {clause,
               {692,63},
               [{var,{692,63},'X__V'}],
               [],
               [{call,
                 {692,63},
                 {remote,
                  {692,63},
                  {atom,{692,63},erlang},
                  {atom,{692,63},error}},
                 [{block,0,
                   [{tuple,
                     {692,63},
                     [{atom,{692,63},assertMatch},
                      {cons,
                       {692,63},
                       {tuple,
                        {692,63},
                        [{atom,{692,63},module},
                         {atom,{692,63},beam_doc_SUITE}]},
                       {cons,
                        {692,63},
                        {tuple,
                         {692,63},
                         [{atom,{692,63},line},{integer,{692,63},692}]},
                        {cons,
                         {692,63},
                         {tuple,
                          {692,63},
                          [{atom,{692,63},expression},
                           {string,{692,63},"Group"}]},
                         {cons,
                          {692,63},
                          {tuple,
                           {692,63},
                           [{atom,{692,63},pattern},
                            {string,
                             {692,63},
                             "{ DocAnno , beam_doc , { invalid_metadata , group } }"}]},
                          {cons,
                           {692,63},
                           {tuple,
                            {692,63},
                            [{atom,{692,63},value},{var,{692,63},'X__V'}]},
                           {nil,{692,63}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,693,378},
    {block,
     {693,6},
     [{call,
       {693,6},
       {'fun',
        {693,6},
        {clauses,
         [{clause,
           {693,6},
           [],[],
           [{'case',
             {693,6},
             {var,{693,66},'DocSinse'},
             [{clause,
               {693,18},
               [{tuple,
                 {693,18},
                 [{var,{693,19},'DocAnno'},
                  {atom,{693,28},beam_doc},
                  {tuple,
                   {693,38},
                   [{atom,{693,39},invalid_metadata},
                    {atom,{693,57},since}]}]}],
               [],
               [{atom,{693,63},ok}]},
              {clause,
               {693,63},
               [{var,{693,63},'X__V'}],
               [],
               [{call,
                 {693,63},
                 {remote,
                  {693,63},
                  {atom,{693,63},erlang},
                  {atom,{693,63},error}},
                 [{block,0,
                   [{tuple,
                     {693,63},
                     [{atom,{693,63},assertMatch},
                      {cons,
                       {693,63},
                       {tuple,
                        {693,63},
                        [{atom,{693,63},module},
                         {atom,{693,63},beam_doc_SUITE}]},
                       {cons,
                        {693,63},
                        {tuple,
                         {693,63},
                         [{atom,{693,63},line},{integer,{693,63},693}]},
                        {cons,
                         {693,63},
                         {tuple,
                          {693,63},
                          [{atom,{693,63},expression},
                           {string,{693,63},"DocSinse"}]},
                         {cons,
                          {693,63},
                          {tuple,
                           {693,63},
                           [{atom,{693,63},pattern},
                            {string,
                             {693,63},
                             "{ DocAnno , beam_doc , { invalid_metadata , since } }"}]},
                          {cons,
                           {693,63},
                           {tuple,
                            {693,63},
                            [{atom,{693,63},value},{var,{693,63},'X__V'}]},
                           {nil,{693,63}}}}}}}]}]}]}]}]}]}]}},
       []}]},
    {debug_line,695,379},
    {atom,{695,5},ok}]}]}.
{function,
    {697,1},
    scan_and_parse,1,
    [{clause,
         {697,1},
         [{var,{697,1},'_'}],
         [[{call,
               {697,1},
               {remote,
                   {697,1},
                   {atom,{697,1},fake},
                   {atom,{697,1},is_beam_bif_info}},
               []}]],
         [{debug_line,697,380},{atom,{697,1},ignore}]},
     {clause,
         {697,1},
         [{var,{697,16},'Code'}],
         [],
         [{debug_line,698,381},
          {match,
              {698,5},
              {tuple,
                  {698,5},
                  [{atom,{698,6},ok},
                   {var,{698,10},'Toks'},
                   {var,{698,16},'_'}]},
              {call,
                  {698,21},
                  {remote,
                      {698,29},
                      {atom,{698,21},erl_scan},
                      {atom,{698,30},string}},
                  [{var,{698,37},'Code'}]}},
          {debug_line,699,382},
          {call,{699,5},{atom,{699,5},parse},[{var,{699,11},'Toks'}]}]}]}.
{function,
 {701,1},
 parse,1,
 [{clause,
   {701,1},
   [{var,{701,1},'_'}],
   [[{call,
      {701,1},
      {remote,{701,1},{atom,{701,1},fake},{atom,{701,1},is_beam_bif_info}},
      []}]],
   [{debug_line,701,383},{atom,{701,1},ignore}]},
  {clause,{701,1},[{nil,{701,7}}],[],[{debug_line,701,384},{nil,{701,14}}]},
  {clause,
   {702,1},
   [{var,{702,7},'Toks'}],
   [],
   [{debug_line,703,385},
    {match,
     {703,5},
     {tuple,
      {703,5},
      [{var,{703,6},'Form'},
       {cons,{703,12},{var,{703,13},'Dot'},{var,{703,19},'Rest'}}]},
     {call,
      {703,28},
      {remote,{703,33},{atom,{703,28},lists},{atom,{703,34},splitwith}},
      [{block,0,
        [{'fun',
          {703,44},
          {clauses,
           [{clause,
             {703,47},
             [{var,{703,48},'E'}],
             [],
             [{op,
               {703,67},
               '=/=',
               {call,
                {703,54},
                {remote,
                 {703,54},
                 {atom,{703,54},erlang},
                 {atom,{703,54},element}},
                [{integer,{703,62},1},{var,{703,64},'E'}]},
               {atom,{703,71},dot}}]}]}}]},
       {var,{703,80},'Toks'}]}},
    {debug_line,704,386},
    {match,
     {704,5},
     {tuple,{704,5},[{atom,{704,6},ok},{var,{704,10},'F'}]},
     {call,
      {704,15},
      {remote,{704,24},{atom,{704,15},erl_parse},{atom,{704,25},parse_form}},
      [{block,0,
        [{op,
          {704,41},
          '++',
          {var,{704,36},'Form'},
          {cons,{704,44},{var,{704,45},'Dot'},{nil,{704,48}}}}]}]}},
    {debug_line,705,387},
    {cons,
     {705,5},
     {var,{705,6},'F'},
     {call,{705,10},{atom,{705,10},parse},[{var,{705,16},'Rest'}]}}]}]}.
{function,
 {707,1},
 compile_file,3,
 [{clause,
   {707,1},
   [{var,{707,1},'_'},{var,{707,1},'_'},{var,{707,1},'_'}],
   [[{call,
      {707,1},
      {remote,{707,1},{atom,{707,1},fake},{atom,{707,1},is_beam_bif_info}},
      []}]],
   [{debug_line,707,388},{atom,{707,1},ignore}]},
  {clause,
   {707,1},
   [{var,{707,14},'Conf'},
    {var,{707,20},'ModuleName'},
    {var,{707,32},'ExtraOpts'}],
   [],
   [{debug_line,708,389},
    {match,
     {708,5},
     {var,{708,5},'Filename'},
     {call,
      {708,16},
      {atom,{708,16},data_file_path},
      [{var,{708,31},'Conf'},{var,{708,37},'ModuleName'}]}},
    {debug_line,709,390},
    {call,
     {709,5},
     {remote,{709,7},{atom,{709,5},io},{atom,{709,8},format}},
     [{block,0,[{string,{709,15},"Compiling: ~ts~n~p~n"}]},
      {block,0,
       [{cons,
         {709,38},
         {var,{709,39},'Filename'},
         {cons,{709,49},{var,{709,49},'ExtraOpts'},{nil,{709,58}}}}]}]},
    {debug_line,710,391},
    {'case',
     {710,5},
     {call,
      {710,10},
      {remote,{710,17},{atom,{710,10},compile},{atom,{710,18},file}},
      [{var,{710,23},'Filename'},{var,{710,33},'ExtraOpts'}]},
     [{clause,
       {711,9},
       [{var,{711,9},'Res'}],
       [[{op,
          {711,34},
          '=:=',
          {call,
           {711,18},
           {remote,{711,18},{atom,{711,18},erlang},{atom,{711,18},element}},
           [{integer,{711,26},1},{var,{711,29},'Res'}]},
          {atom,{711,38},ok}}]],
       [{debug_line,712,392},
        {match,
         {712,13},
         {var,{712,13},'ModName'},
         {call,
          {712,23},
          {remote,{712,23},{atom,{712,23},erlang},{atom,{712,23},element}},
          [{integer,{712,31},2},{var,{712,34},'Res'}]}},
        {debug_line,713,393},
        {'case',
         {713,13},
         {call,
          {713,18},
          {remote,{713,23},{atom,{713,18},lists},{atom,{713,24},search}},
          [{block,0,
            [{'fun',
              {713,31},
              {clauses,
               [{clause,
                 {713,35},
                 [{var,{713,36},'X'}],
                 [],
                 [{op,
                   {713,44},
                   '=:=',
                   {var,{713,42},'X'},
                   {atom,{713,48},no_docs}}]}]}}]},
           {var,{713,61},'ExtraOpts'}]},
         [{clause,
           {714,15},
           [{atom,{714,15},false}],
           [[{op,
              {714,44},
              '>',
              {call,
               {714,26},
               {remote,{714,26},{atom,{714,26},erlang},{atom,{714,26},length}},
               [{var,{714,33},'ExtraOpts'}]},
              {integer,{714,46},0}}]],
           [{debug_line,715,394},
            {call,
             {715,17},
             {atom,{715,17},check_no_doc_attributes},
             [{block,0,
               [{call,
                 {715,41},
                 {remote,{715,45},{atom,{715,41},code},{atom,{715,46},which}},
                 [{var,{715,52},'ModName'}]}]}]},
            {debug_line,716,395},
            {var,{716,17},'Res'}]},
          {clause,
           {717,15},
           [{var,{717,15},'_'}],
           [],
           [{debug_line,718,396},{var,{718,17},'Res'}]}]}]},
      {clause,
       {720,9},
       [{var,{720,9},'Else'}],
       [],
       [{debug_line,721,397},{var,{721,13},'Else'}]}]}]}]}.
{function,
    {724,1},
    data_file_path,2,
    [{clause,
         {724,1},
         [{var,{724,1},'_'},{var,{724,1},'_'}],
         [[{call,
               {724,1},
               {remote,
                   {724,1},
                   {atom,{724,1},fake},
                   {atom,{724,1},is_beam_bif_info}},
               []}]],
         [{debug_line,724,398},{atom,{724,1},ignore}]},
     {clause,
         {724,1},
         [{var,{724,16},'Conf'},{var,{724,22},'ModuleName'}],
         [],
         [{debug_line,725,399},
          {match,
              {725,5},
              {var,{725,5},'ErlModName'},
              {op,{725,29},
                  '++',
                  {var,{725,18},'ModuleName'},
                  {string,{725,32},".erl"}}},
          {debug_line,726,400},
          {call,
              {726,5},
              {remote,{726,13},{atom,{726,5},filename},{atom,{726,14},join}},
              [{block,0,
                   [{call,
                        {726,19},
                        {remote,
                            {726,28},
                            {atom,{726,19},proplists},
                            {atom,{726,29},get_value}},
                        [{atom,{726,39},data_dir},{var,{726,49},'Conf'}]}]},
               {var,{726,56},'ErlModName'}]}]}]}.
{function,{728,1},
          default_compile_file,2,
          [{clause,{728,1},
                   [{var,{728,1},'_'},{var,{728,1},'_'}],
                   [[{call,{728,1},
                           {remote,{728,1},
                                   {atom,{728,1},fake},
                                   {atom,{728,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,728,401},{atom,{728,1},ignore}]},
           {clause,{728,1},
                   [{var,{728,22},'Conf'},{var,{728,28},'ModuleName'}],
                   [],
                   [{debug_line,729,402},
                    {call,{729,3},
                          {atom,{729,3},default_compile_file},
                          [{var,{729,24},'Conf'},
                           {var,{729,30},'ModuleName'},
                           {nil,{729,42}}]}]}]}.
{function,
    {730,1},
    default_compile_file,3,
    [{clause,
         {730,1},
         [{var,{730,1},'_'},{var,{730,1},'_'},{var,{730,1},'_'}],
         [[{call,
               {730,1},
               {remote,
                   {730,1},
                   {atom,{730,1},fake},
                   {atom,{730,1},is_beam_bif_info}},
               []}]],
         [{debug_line,730,403},{atom,{730,1},ignore}]},
     {clause,
         {730,1},
         [{var,{730,22},'Conf'},
          {var,{730,28},'ModuleName'},
          {var,{730,40},'ExtraOpts'}],
         [],
         [{debug_line,731,404},
          {call,
              {731,3},
              {atom,{731,3},compile_file},
              [{var,{731,16},'Conf'},
               {var,{731,22},'ModuleName'},
               {block,0,
                   [{op,{731,70},
                        '++',
                        {cons,
                            {731,34},
                            {atom,{731,35},report},
                            {cons,
                                {731,43},
                                {atom,{731,43},return_errors},
                                {cons,
                                    {731,58},
                                    {atom,{731,58},debug_info},
                                    {nil,{731,68}}}}},
                        {var,{731,73},'ExtraOpts'}}]}]}]}]}.
{function,
 {735,1},
 check_no_doc_attributes,1,
 [{clause,
   {735,1},
   [{var,{735,1},'_'}],
   [[{call,
      {735,1},
      {remote,{735,1},{atom,{735,1},fake},{atom,{735,1},is_beam_bif_info}},
      []}]],
   [{debug_line,735,405},{atom,{735,1},ignore}]},
  {clause,
   {735,1},
   [{var,{735,25},'Mod'}],
   [],
   [{debug_line,736,406},
    {match,
     {736,5},
     {tuple,
      {736,5},
      [{atom,{736,6},ok},
       {tuple,
        {736,10},
        [{var,{736,11},'_ModName'},
         {cons,
          {737,11},
          {tuple,
           {737,12},
           [{atom,{737,13},debug_info},
            {tuple,
             {738,13},
             [{atom,{738,14},debug_info_v1},
              {atom,{738,28},erl_abstract_code},
              {tuple,
               {739,14},
               [{var,{739,15},'AST'},{var,{739,20},'Opts'}]}]}]},
          {nil,{739,27}}}]}]},
     {call,
      {739,33},
      {remote,{739,41},{atom,{739,33},beam_lib},{atom,{739,42},chunks}},
      [{var,{739,49},'Mod'},
       {block,0,
        [{debug_line,739,407},
         {cons,{739,54},{atom,{739,55},debug_info},{nil,{739,65}}}]}]}},
    {debug_line,740,408},
    {match,
     {740,5},
     {atom,{740,5},false},
     {call,
      {740,13},
      {remote,{740,18},{atom,{740,13},lists},{atom,{740,19},search}},
      [{block,0,
        [{debug_line,741,409},
         {'fun',
          {741,15},
          {clauses,
           [{clause,
             {741,18},
             [{var,{741,19},'E'}],
             [],
             [{debug_line,742,410},
              {'case',
               {742,36},
               {op,
                {742,36},
                '==',
                {call,
                 {742,23},
                 {remote,
                  {742,23},
                  {atom,{742,23},erlang},
                  {atom,{742,23},element}},
                 [{integer,{742,31},1},{var,{742,33},'E'}]},
                {atom,{742,39},attribute}},
               [{clause,
                 {742,36},
                 [{atom,{742,36},true}],
                 [],
                 [{debug_line,744,411},
                  {'case',
                   {744,43},
                   {op,
                    {744,43},
                    '==',
                    {call,
                     {744,30},
                     {remote,
                      {744,30},
                      {atom,{744,30},erlang},
                      {atom,{744,30},element}},
                     [{integer,{744,38},3},{var,{744,40},'E'}]},
                    {atom,{744,46},doc}},
                   [{clause,
                     {744,43},
                     [{atom,{744,43},true}],
                     [],
                     [{atom,{744,43},true}]},
                    {clause,
                     {744,43},
                     [{atom,{744,43},false}],
                     [],
                     [{op,
                       {744,70},
                       '==',
                       {call,
                        {744,57},
                        {remote,
                         {744,57},
                         {atom,{744,57},erlang},
                         {atom,{744,57},element}},
                        [{integer,{744,65},3},{var,{744,67},'E'}]},
                       {atom,{744,73},moduledoc}}]},
                    {clause,
                     [{generated,true},{location,{744,43}}],
                     [{var,{744,43},cov1}],
                     [],
                     [{call,
                       {744,43},
                       {remote,
                        {744,43},
                        {atom,{744,43},erlang},
                        {atom,{744,43},error}},
                       [{block,0,
                         [{tuple,
                           {744,43},
                           [{atom,{744,43},badarg},
                            {var,{744,43},cov1}]}]}]}]}]}]},
                {clause,
                 {742,36},
                 [{atom,{742,36},false}],
                 [],
                 [{atom,{742,36},false}]},
                {clause,
                 [{generated,true},{location,{742,36}}],
                 [{var,{742,36},cov2}],
                 [],
                 [{call,
                   {742,36},
                   {remote,
                    {742,36},
                    {atom,{742,36},erlang},
                    {atom,{742,36},error}},
                   [{block,0,
                     [{tuple,
                       {742,36},
                       [{atom,{742,36},badarg},
                        {var,{742,36},cov2}]}]}]}]}]}]}]}}]},
       {var,{745,20},'AST'}]}},
    {debug_line,746,412},
    {match,
     {746,5},
     {atom,{746,5},false},
     {call,
      {746,13},
      {remote,{746,18},{atom,{746,13},lists},{atom,{746,19},member}},
      [{atom,{746,26},no_docs},{var,{746,35},'Opts'}]}},
    {debug_line,747,413},
    {atom,{747,5},ok}]}]}.
{eof,{748,1}}.
