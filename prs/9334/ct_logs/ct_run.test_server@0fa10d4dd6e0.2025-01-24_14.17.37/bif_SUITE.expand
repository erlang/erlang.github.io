{attribute,{1,1},file,{"bif_SUITE.erl",1}}.
{attribute,{20,2},module,bif_SUITE}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,115,121,110,
             116,97,120,95,116,111,111,108,115,45,51,46,50,46,49,47,105,110,
             99,108,117,100,101,47,109,101,114,108,46,104,114,108],
            1}}.
{attribute,{23,1},file,{"bif_SUITE.erl",23}}.
{attribute,{24,2},
           export,
           [{all,0},
            {suite,0},
            {groups,0},
            {init_per_suite,1},
            {end_per_suite,1},
            {init_per_group,2},
            {end_per_group,2},
            {unsafe_get_list,1},
            {beam_validator,1},
            {trunc_and_friends,1},
            {cover_safe_and_pure_bifs,1},
            {cover_trim,1},
            {head_tail,1},
            {min_max,1},
            {non_throwing,1}]}.
{function,
    {33,1},
    suite,0,
    [{clause,
         {33,1},
         [],
         [[{call,
               {33,1},
               {remote,
                   {33,1},
                   {atom,{33,1},fake},
                   {atom,{33,1},is_beam_bif_info}},
               []}]],
         [{debug_line,33,1},{atom,{33,1},ignore}]},
     {clause,
         {33,1},
         [],[],
         [{debug_line,34,2},
          {cons,
              {34,5},
              {tuple,
                  {34,6},
                  [{atom,{34,7},ct_hooks},
                   {cons,{34,16},{atom,{34,17},ts_install_cth},{nil,0}}]},
              {nil,0}}]}]}.
{function,{36,1},
          all,0,
          [{clause,{36,1},
                   [],
                   [[{call,{36,1},
                           {remote,{36,1},
                                   {atom,{36,1},fake},
                                   {atom,{36,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,36,3},{atom,{36,1},ignore}]},
           {clause,{36,1},
                   [],[],
                   [{debug_line,37,4},
                    {cons,{37,5},
                          {tuple,{37,6},
                                 [{atom,{37,7},group},{atom,{37,13},p}]},
                          {nil,0}}]}]}.
{function,
 {39,1},
 groups,0,
 [{clause,
   {39,1},
   [],
   [[{call,
      {39,1},
      {remote,{39,1},{atom,{39,1},fake},{atom,{39,1},is_beam_bif_info}},
      []}]],
   [{debug_line,39,5},{atom,{39,1},ignore}]},
  {clause,
   {39,1},
   [],[],
   [{debug_line,40,6},
    {cons,
     {40,5},
     {tuple,
      {40,6},
      [{atom,{40,7},p},
       {call,
        {40,9},
        {remote,{40,17},{atom,{40,9},test_lib},{atom,{40,18},parallel}},
        []},
       {cons,
        {41,7},
        {atom,{41,8},beam_validator},
        {cons,
         {42,8},
         {atom,{42,8},unsafe_get_list},
         {cons,
          {43,8},
          {atom,{43,8},trunc_and_friends},
          {cons,
           {44,8},
           {atom,{44,8},cover_safe_and_pure_bifs},
           {cons,
            {45,8},
            {atom,{45,8},cover_trim},
            {cons,
             {46,8},
             {atom,{46,8},head_tail},
             {cons,
              {47,8},
              {atom,{47,8},min_max},
              {cons,{48,8},{atom,{48,8},non_throwing},{nil,0}}}}}}}}}]},
     {nil,0}}]}]}.
{function,{51,1},
          init_per_suite,1,
          [{clause,{51,1},
                   [{var,{51,1},'_'}],
                   [[{call,{51,1},
                           {remote,{51,1},
                                   {atom,{51,1},fake},
                                   {atom,{51,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,51,7},{atom,{51,1},ignore}]},
           {clause,{51,1},
                   [{var,{51,16},'Config'}],
                   [],
                   [{debug_line,52,8},
                    {match,{52,5},
                           {var,{52,5},'_'},
                           {call,{52,9},
                                 {atom,{52,9},id},
                                 [{var,{52,12},'Config'}]}},
                    {debug_line,53,9},
                    {call,{53,5},
                          {remote,{53,13},
                                  {atom,{53,5},test_lib},
                                  {atom,{53,14},recompile}},
                          [{atom,{53,25},bif_SUITE}]},
                    {debug_line,54,10},
                    {var,{54,5},'Config'}]}]}.
{function,{56,1},
          end_per_suite,1,
          [{clause,{56,1},
                   [{var,{56,1},'_'}],
                   [[{call,{56,1},
                           {remote,{56,1},
                                   {atom,{56,1},fake},
                                   {atom,{56,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,56,11},{atom,{56,1},ignore}]},
           {clause,{56,1},
                   [{var,{56,15},'_Config'}],
                   [],
                   [{debug_line,57,12},{atom,{57,5},ok}]}]}.
{function,{59,1},
          init_per_group,2,
          [{clause,{59,1},
                   [{var,{59,1},'_'},{var,{59,1},'_'}],
                   [[{call,{59,1},
                           {remote,{59,1},
                                   {atom,{59,1},fake},
                                   {atom,{59,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,59,13},{atom,{59,1},ignore}]},
           {clause,{59,1},
                   [{var,{59,16},'_GroupName'},{var,{59,28},'Config'}],
                   [],
                   [{debug_line,60,14},{var,{60,5},'Config'}]}]}.
{function,{62,1},
          end_per_group,2,
          [{clause,{62,1},
                   [{var,{62,1},'_'},{var,{62,1},'_'}],
                   [[{call,{62,1},
                           {remote,{62,1},
                                   {atom,{62,1},fake},
                                   {atom,{62,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,62,15},{atom,{62,1},ignore}]},
           {clause,{62,1},
                   [{var,{62,15},'_GroupName'},{var,{62,27},'Config'}],
                   [],
                   [{debug_line,63,16},{var,{63,5},'Config'}]}]}.
{function,
    {65,1},
    unsafe_get_list,1,
    [{clause,
         {65,1},
         [{var,{65,1},'_'}],
         [[{call,
               {65,1},
               {remote,
                   {65,1},
                   {atom,{65,1},fake},
                   {atom,{65,1},is_beam_bif_info}},
               []}]],
         [{debug_line,65,17},{atom,{65,1},ignore}]},
     {clause,
         {65,1},
         [{var,{65,17},'_Config'}],
         [],
         [{debug_line,66,18},
          {match,
              {66,5},
              {cons,
                  {66,5},
                  {cons,{66,6},{integer,{66,7},1},{nil,0}},
                  {cons,
                      {66,11},
                      {cons,{66,11},{integer,{66,12},1},{nil,0}},
                      {cons,
                          {66,16},
                          {cons,{66,16},{integer,{66,17},1},{nil,0}},
                          {nil,0}}}},
              {call,
                  {66,23},
                  {atom,{66,23},create_rows},
                  [{block,0,
                       [{call,
                            {66,35},
                            {atom,{66,35},id},
                            [{integer,{66,38},3}]}]}]}},
          {debug_line,67,19},
          {atom,{67,5},ok}]}]}.
{function,
    {69,1},
    create_rows,1,
    [{clause,
         {69,1},
         [{var,{69,1},'_'}],
         [[{call,
               {69,1},
               {remote,
                   {69,1},
                   {atom,{69,1},fake},
                   {atom,{69,1},is_beam_bif_info}},
               []}]],
         [{debug_line,69,20},{atom,{69,1},ignore}]},
     {clause,
         {69,1},
         [{var,{69,13},'Num'}],
         [],
         [{debug_line,69,21},
          {call,
              {69,21},
              {atom,{69,21},create_rows},
              [{var,{69,33},'Num'},
               {block,0,
                   [{cons,
                        {69,38},
                        {cons,{69,39},{integer,{69,40},1},{nil,0}},
                        {nil,0}}]}]}]}]}.
{function,
    {71,1},
    create_rows,2,
    [{clause,
         {71,1},
         [{var,{71,1},'_'},{var,{71,1},'_'}],
         [[{call,
               {71,1},
               {remote,
                   {71,1},
                   {atom,{71,1},fake},
                   {atom,{71,1},is_beam_bif_info}},
               []}]],
         [{debug_line,71,22},{atom,{71,1},ignore}]},
     {clause,
         {71,1},
         [{integer,{71,13},1},{var,{71,16},'Rows'}],
         [],
         [{debug_line,72,23},{var,{72,5},'Rows'}]},
     {clause,
         {73,1},
         [{var,{73,13},'Num'},
          {match,
              {73,18},
              {cons,{73,18},{var,{73,19},'PrevRow'},{var,{73,29},'_'}},
              {var,{73,34},'Rows'}}],
         [],
         [{debug_line,74,24},
          {match,
              {74,5},
              {cons,{74,5},{var,{74,6},'_PrevRowH'},{var,{74,18},'PrevRowT'}},
              {var,{74,30},'PrevRow'}},
          {debug_line,75,25},
          {match,
              {75,5},
              {nil,{75,5}},
              {call,
                  {75,10},
                  {atom,{75,10},first},
                  [{var,{75,16},'PrevRowT'},{var,{75,26},'PrevRow'}]}},
          {debug_line,76,26},
          {call,
              {76,5},
              {atom,{76,5},create_rows},
              [{block,0,
                   [{op,{76,21},'-',{var,{76,17},'Num'},{integer,{76,23},1}}]},
               {block,0,
                   [{cons,
                        {76,26},
                        {cons,{76,27},{integer,{76,28},1},{nil,0}},
                        {var,{76,33},'Rows'}}]}]}]}]}.
{function,{78,1},
          first,2,
          [{clause,{78,1},
                   [{var,{78,1},'_'},{var,{78,1},'_'}],
                   [[{call,{78,1},
                           {remote,{78,1},
                                   {atom,{78,1},fake},
                                   {atom,{78,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,78,27},{atom,{78,1},ignore}]},
           {clause,{78,1},
                   [{var,{78,7},'Fst'},{var,{78,12},'_Snd'}],
                   [],
                   [{debug_line,78,28},{var,{78,21},'Fst'}]}]}.
{function,
    {82,1},
    beam_validator,1,
    [{clause,
         {82,1},
         [{var,{82,1},'_'}],
         [[{call,
               {82,1},
               {remote,
                   {82,1},
                   {atom,{82,1},fake},
                   {atom,{82,1},is_beam_bif_info}},
               []}]],
         [{debug_line,82,29},{atom,{82,1},ignore}]},
     {clause,
         {82,1},
         [{var,{82,16},'Config'}],
         [],
         [{debug_line,83,30},
          {match,
              {83,5},
              {cons,
                  {83,5},
                  {atom,{83,6},false},
                  {cons,{83,12},{var,{83,12},'Config'},{nil,0}}},
              {call,{83,22},{atom,{83,22},food},[{var,{83,27},'Config'}]}},
          {debug_line,85,31},
          {match,
              {85,5},
              {atom,{85,5},true},
              {call,
                  {85,12},
                  {remote,
                      {85,12},
                      {atom,{85,12},erlang},
                      {atom,{85,12},is_number}},
                  [{float,{85,22},42.0}]}},
          {debug_line,86,32},
          {match,
              {86,5},
              {atom,{86,5},false},
              {call,
                  {86,13},
                  {remote,
                      {86,13},
                      {atom,{86,13},erlang},
                      {atom,{86,13},is_port}},
                  [{var,{86,21},'Config'}]}},
          {debug_line,88,33},
          {atom,{88,5},ok}]}]}.
{function,
    {90,1},
    food,1,
    [{clause,
         {90,1},
         [{var,{90,1},'_'}],
         [[{call,
               {90,1},
               {remote,
                   {90,1},
                   {atom,{90,1},fake},
                   {atom,{90,1},is_beam_bif_info}},
               []}]],
         [{debug_line,90,34},{atom,{90,1},ignore}]},
     {clause,
         {90,1},
         [{var,{90,6},'Curriculum'}],
         [],
         [{debug_line,91,35},
          {cons,
              {91,5},
              {'try',
                  {91,6},
                  [{debug_line,92,36},
                   {call,
                       {92,3},
                       {remote,
                           {92,3},
                           {atom,{92,3},erlang},
                           {atom,{92,3},is_bitstring}},
                       [{atom,{92,16},functions}]}],
                  [],
                  [{clause,
                       {93,12},
                       [{tuple,
                            {93,12},
                            [{atom,{93,12},throw},
                             {var,{93,12},'_'},
                             {var,{93,12},'_'}]}],
                       [],
                       [{debug_line,94,37},{integer,{94,7},0}]}],
                  []},
              {cons,{95,11},{var,{95,11},'Curriculum'},{nil,0}}}]}]}.
{function,
 {98,1},
 trunc_and_friends,1,
 [{clause,
   {98,1},
   [{var,{98,1},'_'}],
   [[{call,
      {98,1},
      {remote,{98,1},{atom,{98,1},fake},{atom,{98,1},is_beam_bif_info}},
      []}]],
   [{debug_line,98,38},{atom,{98,1},ignore}]},
  {clause,
   {98,1},
   [{var,{98,19},'_Config'}],
   [],
   [{debug_line,99,39},
    {match,
     {99,5},
     {var,{99,5},'Bifs'},
     {cons,
      {99,12},
      {atom,{99,13},trunc},
      {cons,
       {99,19},
       {atom,{99,19},round},
       {cons,
        {99,25},
        {atom,{99,25},floor},
        {cons,{99,31},{atom,{99,31},ceil},{nil,0}}}}}},
    {debug_line,100,40},
    {match,
     {100,5},
     {var,{100,5},'Fs'},
     {call,
      {100,10},
      {atom,{100,10},trunc_and_friends_1},
      [{var,{100,30},'Bifs'}]}},
    {debug_line,101,41},
    {match,{101,5},{var,{101,5},'Mod'},{atom,{101,12},trunc_and_friends}},
    {debug_line,102,42},
    {match,
     {102,5},
     {var,{102,5},'Calls'},
     {lc,
      {102,13},
      {block,
       {102,14},
       [{debug_line,103,43},
        {match,
         {103,4},
         {var,{103,4},'Atom'},
         {call,
          {103,11},
          {remote,
           {103,21},
           {atom,{103,11},erl_syntax},
           {atom,{103,22},function_name}},
          [{var,{103,36},'N'}]}},
        {debug_line,104,44},
        {call,
         {104,5},
         {remote,{104,9},{atom,{104,5},merl},{atom,{104,10},tree}},
         [{block,0,
           [{debug_line,0,45},
            {tuple,0,
             [{atom,0,template},
              {atom,0,application},
              {tuple,0,[{atom,0,attr},{integer,0,104},{nil,0},{atom,0,none}]},
              {cons,0,
               {cons,0,{var,0,'Atom'},{nil,0}},
               {cons,0,{nil,0},{nil,0}}}]}]}]}]},
      [{block,0,[{debug_line,105,46},{atom,{105,19},true}]},
       {generate,{105,16},{var,{105,14},'N'},{var,{105,19},'Fs'}}]}},
    {debug_line,106,47},
    {match,
     {106,5},
     {var,{106,5},'Tree'},
     {op,
      {109,25},
      '++',
      {call,
       {106,13},
       {remote,{106,17},{atom,{106,13},merl},{atom,{106,18},tree}},
       [{block,0,
         [{cons,
           {106,23},
           {tuple,0,
            [{atom,0,template},
             {atom,0,attribute},
             {tuple,0,[{atom,0,attr},{integer,0,106},{nil,0},{atom,0,none}]},
             {cons,0,
              {cons,0,
               {tuple,0,
                [{atom,0,tree},
                 {atom,0,atom},
                 {tuple,0,
                  [{atom,0,attr},{integer,0,106},{nil,0},{atom,0,none}]},
                 {atom,0,module}]},
               {nil,0}},
              {cons,0,
               {cons,0,
                {call,0,
                 {remote,0,{atom,0,merl},{atom,0,term}},
                 [{var,0,'Mod'}]},
                {nil,0}},
               {nil,0}}}]},
           {cons,0,
            {tuple,0,
             [{atom,0,attribute},
              {integer,0,107},
              {atom,0,export},
              {cons,0,{tuple,0,[{atom,0,test},{integer,0,0}]},{nil,0}}]},
            {cons,0,
             {tuple,0,
              [{atom,0,template},
               {atom,0,function},
               {tuple,0,[{atom,0,attr},{integer,0,108},{nil,0},{atom,0,none}]},
               {cons,0,
                {cons,0,
                 {tuple,0,
                  [{atom,0,tree},
                   {atom,0,atom},
                   {tuple,0,
                    [{atom,0,attr},{integer,0,108},{nil,0},{atom,0,none}]},
                   {atom,0,test}]},
                 {nil,0}},
                {cons,0,
                 {cons,0,
                  {tuple,0,
                   [{atom,0,template},
                    {atom,0,clause},
                    {tuple,0,
                     [{atom,0,attr},{integer,0,108},{nil,0},{atom,0,none}]},
                    {cons,0,
                     {nil,0},
                     {cons,0,
                      {nil,0},
                      {cons,0,
                       {cons,0,
                        {var,0,'Calls'},
                        {cons,0,
                         {tuple,0,[{atom,0,atom},{integer,0,108},{atom,0,ok}]},
                         {nil,0}}},
                       {nil,0}}}}]},
                  {nil,0}},
                 {nil,0}}}]},
             {cons,0,
              {tuple,0,
               [{atom,0,function},
                {integer,0,109},
                {atom,0,id},
                {integer,0,1},
                {cons,0,
                 {tuple,0,
                  [{atom,0,clause},
                   {integer,0,109},
                   {cons,0,
                    {tuple,0,[{atom,0,var},{integer,0,109},{atom,0,'I'}]},
                    {nil,0}},
                   {nil,0},
                   {cons,0,
                    {tuple,0,[{atom,0,var},{integer,0,109},{atom,0,'I'}]},
                    {nil,0}}]},
                 {nil,0}}]},
              {nil,0}}}}}]}]},
      {var,{109,28},'Fs'}}},
    {debug_line,110,48},
    {call,
     {110,5},
     {remote,{110,9},{atom,{110,5},merl},{atom,{110,10},print}},
     [{var,{110,16},'Tree'}]},
    {debug_line,111,49},
    {match,
     {111,5},
     {var,{111,5},'Opts'},
     {call,
      {111,12},
      {remote,{111,20},{atom,{111,12},test_lib},{atom,{111,21},opt_opts}},
      [{atom,{111,31},bif_SUITE}]}},
    {debug_line,112,50},
    {match,
     {112,5},
     {tuple,{112,5},[{atom,{112,6},ok},{var,{112,9},'_Bin'}]},
     {call,
      {112,17},
      {remote,{112,21},{atom,{112,17},merl},{atom,{112,22},compile_and_load}},
      [{var,{112,39},'Tree'},{var,{112,45},'Opts'}]}},
    {debug_line,113,51},
    {call,{113,5},{remote,{113,8},{var,{113,5},'Mod'},{atom,{113,9},test}},[]},
    {debug_line,114,52},
    {atom,{114,5},ok}]}]}.
{function,
 {116,1},
 trunc_and_friends_1,1,
 [{clause,
   {116,1},
   [{var,{116,1},'_'}],
   [[{call,
      {116,1},
      {remote,{116,1},{atom,{116,1},fake},{atom,{116,1},is_beam_bif_info}},
      []}]],
   [{debug_line,116,53},{atom,{116,1},ignore}]},
  {clause,
   {116,1},
   [{cons,{116,21},{var,{116,22},'F'},{var,{116,24},'Fs'}}],
   [],
   [{debug_line,117,54},
    {match,
     {117,5},
     {var,{117,5},'Func'},
     {call,
      {117,12},
      {remote,{117,12},{atom,{117,12},erlang},{atom,{117,12},list_to_atom}},
      [{block,0,
        [{op,
          {117,28},
          '++',
          {string,{117,25},"f"},
          {call,
           {117,30},
           {remote,
            {117,30},
            {atom,{117,30},erlang},
            {atom,{117,30},integer_to_list}},
           [{block,0,
             [{call,
               {117,46},
               {remote,{117,46},{atom,{117,46},erlang},{atom,{117,46},length}},
               [{var,{117,53},'Fs'}]}]}]}}]}]}},
    {debug_line,118,55},
    {cons,
     {118,5},
     {call,
      {118,6},
      {atom,{118,6},trunc_template},
      [{var,{118,21},'Func'},{var,{118,27},'F'}]},
     {call,
      {118,30},
      {atom,{118,30},trunc_and_friends_1},
      [{var,{118,50},'Fs'}]}}]},
  {clause,{119,1},[{nil,{119,21}}],[],[{debug_line,119,56},{nil,{119,28}}]}]}.
{function,
 {121,1},
 trunc_template,2,
 [{clause,
   {121,1},
   [{var,{121,1},'_'},{var,{121,1},'_'}],
   [[{call,
      {121,1},
      {remote,{121,1},{atom,{121,1},fake},{atom,{121,1},is_beam_bif_info}},
      []}]],
   [{debug_line,121,57},{atom,{121,1},ignore}]},
  {clause,
   {121,1},
   [{var,{121,16},'Func'},{var,{121,22},'Bif'}],
   [],
   [{debug_line,122,58},
    {match,{122,5},{var,{122,5},'Val'},{float,{122,11},42.77}},
    {debug_line,123,59},
    {match,
     {123,5},
     {var,{123,5},'Res'},
     {call,
      {123,11},
      {remote,{123,17},{atom,{123,11},erlang},{var,{123,18},'Bif'}},
      [{var,{123,22},'Val'}]}},
    {debug_line,124,60},
    {match,
     {124,5},
     {var,{124,5},'FloatRes'},
     {call,
      {124,16},
      {remote,{124,16},{atom,{124,16},erlang},{atom,{124,16},float}},
      [{var,{124,22},'Res'}]}},
    {debug_line,125,61},
    {call,
     {125,6},
     {remote,{125,10},{atom,{125,6},merl},{atom,{125,11},tree}},
     [{block,0,
       [{debug_line,0,62},
        {tuple,0,
         [{atom,0,template},
          {atom,0,function},
          {tuple,0,[{atom,0,attr},{integer,0,125},{nil,0},{atom,0,none}]},
          {cons,0,
           {cons,0,
            {call,0,{remote,0,{atom,0,merl},{atom,0,term}},[{var,0,'Func'}]},
            {nil,0}},
           {cons,0,
            {cons,0,
             {tuple,0,
              [{atom,0,template},
               {atom,0,clause},
               {tuple,0,[{atom,0,attr},{integer,0,125},{nil,0},{atom,0,none}]},
               {cons,0,
                {nil,0},
                {cons,0,
                 {nil,0},
                 {cons,0,
                  {cons,0,
                   {tuple,0,
                    [{atom,0,template},
                     {atom,0,match_expr},
                     {tuple,0,
                      [{atom,0,attr},{integer,0,126},{nil,0},{atom,0,none}]},
                     {cons,0,
                      {cons,0,
                       {tuple,0,[{atom,0,var},{integer,0,126},{atom,0,'Var'}]},
                       {nil,0}},
                      {cons,0,
                       {cons,0,
                        {tuple,0,
                         [{atom,0,template},
                          {atom,0,application},
                          {tuple,0,
                           [{atom,0,attr},
                            {integer,0,126},
                            {nil,0},
                            {atom,0,none}]},
                          {cons,0,
                           {cons,0,
                            {tuple,0,
                             [{atom,0,atom},{integer,0,126},{atom,0,id}]},
                            {nil,0}},
                           {cons,0,
                            {cons,0,
                             {call,0,
                              {remote,0,{atom,0,merl},{atom,0,term}},
                              [{var,0,'Val'}]},
                             {nil,0}},
                            {nil,0}}}]},
                        {nil,0}},
                       {nil,0}}}]},
                   {cons,0,
                    {tuple,0,
                     [{atom,0,template},
                      {atom,0,if_expr},
                      {tuple,0,
                       [{atom,0,attr},{integer,0,127},{nil,0},{atom,0,none}]},
                      {cons,0,
                       {cons,0,
                        {tuple,0,
                         [{atom,0,template},
                          {atom,0,clause},
                          {tuple,0,
                           [{atom,0,attr},
                            {integer,0,127},
                            {nil,0},
                            {atom,0,none}]},
                          {cons,0,
                           {nil,0},
                           {cons,0,
                            {cons,0,
                             {tuple,0,
                              [{atom,0,template},
                               {atom,0,disjunction},
                               {tuple,0,
                                [{atom,0,attr},
                                 {integer,0,0},
                                 {nil,0},
                                 {atom,0,none}]},
                               {cons,0,
                                {cons,0,
                                 {tuple,0,
                                  [{atom,0,template},
                                   {atom,0,conjunction},
                                   {tuple,0,
                                    [{atom,0,attr},
                                     {integer,0,0},
                                     {nil,0},
                                     {atom,0,none}]},
                                   {cons,0,
                                    {cons,0,
                                     {tuple,0,
                                      [{atom,0,template},
                                       {atom,0,infix_expr},
                                       {tuple,0,
                                        [{atom,0,attr},
                                         {integer,0,127},
                                         {nil,0},
                                         {atom,0,none}]},
                                       {cons,0,
                                        {cons,0,
                                         {tuple,0,
                                          [{atom,0,template},
                                           {atom,0,application},
                                           {tuple,0,
                                            [{atom,0,attr},
                                             {integer,0,127},
                                             {nil,0},
                                             {atom,0,none}]},
                                           {cons,0,
                                            {cons,0,
                                             {call,0,
                                              {remote,0,
                                               {atom,0,merl},
                                               {atom,0,term}},
                                              [{var,0,'Bif'}]},
                                             {nil,0}},
                                            {cons,0,
                                             {cons,0,
                                              {tuple,0,
                                               [{atom,0,var},
                                                {integer,0,127},
                                                {atom,0,'Var'}]},
                                              {nil,0}},
                                             {nil,0}}}]},
                                         {nil,0}},
                                        {cons,0,
                                         {cons,0,
                                          {tuple,0,
                                           [{atom,0,tree},
                                            {atom,0,operator},
                                            {tuple,0,
                                             [{atom,0,attr},
                                              {integer,0,127},
                                              {nil,0},
                                              {atom,0,none}]},
                                            {atom,0,'=:='}]},
                                          {nil,0}},
                                         {cons,0,
                                          {cons,0,
                                           {call,0,
                                            {remote,0,
                                             {atom,0,merl},
                                             {atom,0,term}},
                                            [{var,0,'Res'}]},
                                           {nil,0}},
                                          {nil,0}}}}]},
                                     {nil,0}},
                                    {nil,0}}]},
                                 {nil,0}},
                                {nil,0}}]},
                             {nil,0}},
                            {cons,0,
                             {cons,0,
                              {tuple,0,
                               [{atom,0,atom},{integer,0,127},{atom,0,ok}]},
                              {nil,0}},
                             {nil,0}}}}]},
                        {nil,0}},
                       {nil,0}}]},
                    {cons,0,
                     {tuple,0,
                      [{atom,0,template},
                       {atom,0,if_expr},
                       {tuple,0,
                        [{atom,0,attr},{integer,0,128},{nil,0},{atom,0,none}]},
                       {cons,0,
                        {cons,0,
                         {tuple,0,
                          [{atom,0,template},
                           {atom,0,clause},
                           {tuple,0,
                            [{atom,0,attr},
                             {integer,0,128},
                             {nil,0},
                             {atom,0,none}]},
                           {cons,0,
                            {nil,0},
                            {cons,0,
                             {cons,0,
                              {tuple,0,
                               [{atom,0,template},
                                {atom,0,disjunction},
                                {tuple,0,
                                 [{atom,0,attr},
                                  {integer,0,0},
                                  {nil,0},
                                  {atom,0,none}]},
                                {cons,0,
                                 {cons,0,
                                  {tuple,0,
                                   [{atom,0,template},
                                    {atom,0,conjunction},
                                    {tuple,0,
                                     [{atom,0,attr},
                                      {integer,0,0},
                                      {nil,0},
                                      {atom,0,none}]},
                                    {cons,0,
                                     {cons,0,
                                      {tuple,0,
                                       [{atom,0,template},
                                        {atom,0,infix_expr},
                                        {tuple,0,
                                         [{atom,0,attr},
                                          {integer,0,128},
                                          {nil,0},
                                          {atom,0,none}]},
                                        {cons,0,
                                         {cons,0,
                                          {tuple,0,
                                           [{atom,0,template},
                                            {atom,0,application},
                                            {tuple,0,
                                             [{atom,0,attr},
                                              {integer,0,128},
                                              {nil,0},
                                              {atom,0,none}]},
                                            {cons,0,
                                             {cons,0,
                                              {call,0,
                                               {remote,0,
                                                {atom,0,merl},
                                                {atom,0,term}},
                                               [{var,0,'Bif'}]},
                                              {nil,0}},
                                             {cons,0,
                                              {cons,0,
                                               {tuple,0,
                                                [{atom,0,var},
                                                 {integer,0,128},
                                                 {atom,0,'Var'}]},
                                               {nil,0}},
                                              {nil,0}}}]},
                                          {nil,0}},
                                         {cons,0,
                                          {cons,0,
                                           {tuple,0,
                                            [{atom,0,tree},
                                             {atom,0,operator},
                                             {tuple,0,
                                              [{atom,0,attr},
                                               {integer,0,128},
                                               {nil,0},
                                               {atom,0,none}]},
                                             {atom,0,'=='}]},
                                           {nil,0}},
                                          {cons,0,
                                           {cons,0,
                                            {call,0,
                                             {remote,0,
                                              {atom,0,merl},
                                              {atom,0,term}},
                                             [{var,0,'FloatRes'}]},
                                            {nil,0}},
                                           {nil,0}}}}]},
                                      {nil,0}},
                                     {nil,0}}]},
                                  {nil,0}},
                                 {nil,0}}]},
                              {nil,0}},
                             {cons,0,
                              {cons,0,
                               {tuple,0,
                                [{atom,0,atom},{integer,0,128},{atom,0,ok}]},
                               {nil,0}},
                              {nil,0}}}}]},
                         {nil,0}},
                        {nil,0}}]},
                     {cons,0,
                      {tuple,0,
                       [{atom,0,template},
                        {atom,0,if_expr},
                        {tuple,0,
                         [{atom,0,attr},
                          {integer,0,129},
                          {nil,0},
                          {atom,0,none}]},
                        {cons,0,
                         {cons,0,
                          {tuple,0,
                           [{atom,0,template},
                            {atom,0,clause},
                            {tuple,0,
                             [{atom,0,attr},
                              {integer,0,129},
                              {nil,0},
                              {atom,0,none}]},
                            {cons,0,
                             {nil,0},
                             {cons,0,
                              {cons,0,
                               {tuple,0,
                                [{atom,0,template},
                                 {atom,0,disjunction},
                                 {tuple,0,
                                  [{atom,0,attr},
                                   {integer,0,0},
                                   {nil,0},
                                   {atom,0,none}]},
                                 {cons,0,
                                  {cons,0,
                                   {tuple,0,
                                    [{atom,0,template},
                                     {atom,0,conjunction},
                                     {tuple,0,
                                      [{atom,0,attr},
                                       {integer,0,0},
                                       {nil,0},
                                       {atom,0,none}]},
                                     {cons,0,
                                      {cons,0,
                                       {tuple,0,
                                        [{atom,0,template},
                                         {atom,0,infix_expr},
                                         {tuple,0,
                                          [{atom,0,attr},
                                           {integer,0,129},
                                           {nil,0},
                                           {atom,0,none}]},
                                         {cons,0,
                                          {cons,0,
                                           {tuple,0,
                                            [{atom,0,template},
                                             {atom,0,application},
                                             {tuple,0,
                                              [{atom,0,attr},
                                               {integer,0,129},
                                               {nil,0},
                                               {atom,0,none}]},
                                             {cons,0,
                                              {cons,0,
                                               {call,0,
                                                {remote,0,
                                                 {atom,0,merl},
                                                 {atom,0,term}},
                                                [{var,0,'Bif'}]},
                                               {nil,0}},
                                              {cons,0,
                                               {cons,0,
                                                {tuple,0,
                                                 [{atom,0,var},
                                                  {integer,0,129},
                                                  {atom,0,'Var'}]},
                                                {nil,0}},
                                               {nil,0}}}]},
                                           {nil,0}},
                                          {cons,0,
                                           {cons,0,
                                            {tuple,0,
                                             [{atom,0,tree},
                                              {atom,0,operator},
                                              {tuple,0,
                                               [{atom,0,attr},
                                                {integer,0,129},
                                                {nil,0},
                                                {atom,0,none}]},
                                              {atom,0,'=='}]},
                                            {nil,0}},
                                           {cons,0,
                                            {cons,0,
                                             {call,0,
                                              {remote,0,
                                               {atom,0,merl},
                                               {atom,0,term}},
                                              [{var,0,'Res'}]},
                                             {nil,0}},
                                            {nil,0}}}}]},
                                       {nil,0}},
                                      {nil,0}}]},
                                   {nil,0}},
                                  {nil,0}}]},
                               {nil,0}},
                              {cons,0,
                               {cons,0,
                                {tuple,0,
                                 [{atom,0,atom},{integer,0,129},{atom,0,ok}]},
                                {nil,0}},
                               {nil,0}}}}]},
                          {nil,0}},
                         {nil,0}}]},
                      {cons,0,
                       {tuple,0,
                        [{atom,0,template},
                         {atom,0,match_expr},
                         {tuple,0,
                          [{atom,0,attr},
                           {integer,0,130},
                           {nil,0},
                           {atom,0,none}]},
                         {cons,0,
                          {cons,0,
                           {call,0,
                            {remote,0,{atom,0,merl},{atom,0,term}},
                            [{var,0,'Res'}]},
                           {nil,0}},
                          {cons,0,
                           {cons,0,
                            {tuple,0,
                             [{atom,0,template},
                              {atom,0,application},
                              {tuple,0,
                               [{atom,0,attr},
                                {integer,0,130},
                                {nil,0},
                                {atom,0,none}]},
                              {cons,0,
                               {cons,0,
                                {call,0,
                                 {remote,0,{atom,0,merl},{atom,0,term}},
                                 [{var,0,'Bif'}]},
                                {nil,0}},
                               {cons,0,
                                {cons,0,
                                 {tuple,0,
                                  [{atom,0,var},
                                   {integer,0,130},
                                   {atom,0,'Var'}]},
                                 {nil,0}},
                                {nil,0}}}]},
                            {nil,0}},
                           {nil,0}}}]},
                       {cons,0,
                        {tuple,0,
                         [{atom,0,template},
                          {atom,0,try_expr},
                          {tuple,0,
                           [{atom,0,attr},
                            {integer,0,131},
                            {nil,0},
                            {atom,0,none}]},
                          {cons,0,
                           {cons,0,
                            {tuple,0,
                             [{atom,0,template},
                              {atom,0,block_expr},
                              {tuple,0,
                               [{atom,0,attr},
                                {integer,0,131},
                                {nil,0},
                                {atom,0,none}]},
                              {cons,0,
                               {cons,0,
                                {tuple,0,
                                 [{atom,0,template},
                                  {atom,0,application},
                                  {tuple,0,
                                   [{atom,0,attr},
                                    {integer,0,131},
                                    {nil,0},
                                    {atom,0,none}]},
                                  {cons,0,
                                   {cons,0,
                                    {call,0,
                                     {remote,0,{atom,0,merl},{atom,0,term}},
                                     [{var,0,'Bif'}]},
                                    {nil,0}},
                                   {cons,0,
                                    {cons,0,
                                     {tuple,0,
                                      [{atom,0,atom},
                                       {integer,0,131},
                                       {atom,0,a}]},
                                     {nil,0}},
                                    {nil,0}}}]},
                                {cons,0,
                                 {tuple,0,
                                  [{atom,0,atom},{integer,0,131},{atom,0,ok}]},
                                 {nil,0}}},
                               {nil,0}}]},
                            {nil,0}},
                           {cons,0,
                            {nil,0},
                            {cons,0,
                             {cons,0,
                              {tuple,0,
                               [{atom,0,clause},
                                {integer,0,132},
                                {cons,0,
                                 {tuple,0,
                                  [{atom,0,tree},
                                   {atom,0,class_qualifier},
                                   {tuple,0,
                                    [{atom,0,attr},
                                     {integer,0,0},
                                     {nil,0},
                                     {atom,0,none}]},
                                   {tuple,0,
                                    [{atom,0,class_qualifier},
                                     {tuple,0,
                                      [{atom,0,atom},
                                       {integer,0,132},
                                       {atom,0,error}]},
                                     {tuple,0,
                                      [{atom,0,atom},
                                       {integer,0,132},
                                       {atom,0,badarg}]},
                                     {tuple,0,
                                      [{atom,0,var},
                                       {integer,0,132},
                                       {atom,0,'_'}]}]}]},
                                 {nil,0}},
                                {nil,0},
                                {cons,0,
                                 {tuple,0,
                                  [{atom,0,atom},{integer,0,132},{atom,0,ok}]},
                                 {nil,0}}]},
                              {nil,0}},
                             {cons,0,{nil,0},{nil,0}}}}}]},
                        {cons,0,
                         {tuple,0,[{atom,0,atom},{integer,0,133},{atom,0,ok}]},
                         {nil,0}}}}}}}},
                  {nil,0}}}}]},
             {nil,0}},
            {nil,0}}}]}]}]}]}]}.
{function,
    {135,1},
    cover_safe_and_pure_bifs,1,
    [{clause,
         {135,1},
         [{var,{135,1},'_'}],
         [[{call,
               {135,1},
               {remote,
                   {135,1},
                   {atom,{135,1},fake},
                   {atom,{135,1},is_beam_bif_info}},
               []}]],
         [{debug_line,135,63},{atom,{135,1},ignore}]},
     {clause,
         {135,1},
         [{var,{135,26},'Config'}],
         [],
         [{debug_line,136,64},
          {match,
              {136,5},
              {var,{136,5},'_'},
              {call,
                  {136,9},
                  {remote,{136,9},{atom,{136,9},erlang},{atom,{136,9},get}},
                  []}},
          {debug_line,137,65},
          {match,
              {137,5},
              {var,{137,5},'_'},
              {call,
                  {137,9},
                  {remote,
                      {137,9},
                      {atom,{137,9},erlang},
                      {atom,{137,9},get_keys}},
                  [{atom,{137,18},a}]}},
          {debug_line,138,66},
          {match,
              {138,5},
              {var,{138,5},'_'},
              {call,
                  {138,9},
                  {remote,
                      {138,9},
                      {atom,{138,9},erlang},
                      {atom,{138,9},group_leader}},
                  []}},
          {debug_line,139,67},
          {match,
              {139,5},
              {var,{139,5},'_'},
              {call,
                  {139,9},
                  {remote,
                      {139,9},
                      {atom,{139,9},erlang},
                      {atom,{139,9},is_alive}},
                  []}},
          {debug_line,140,68},
          {match,
              {140,5},
              {var,{140,5},'_'},
              {call,
                  {140,9},
                  {remote,{140,9},{atom,{140,9},erlang},{atom,{140,9},min}},
                  [{var,{140,13},'Config'},{nil,{140,21}}]}},
          {debug_line,141,69},
          {match,
              {141,5},
              {var,{141,5},'_'},
              {call,
                  {141,9},
                  {remote,{141,9},{atom,{141,9},erlang},{atom,{141,9},nodes}},
                  []}},
          {debug_line,142,70},
          {match,
              {142,5},
              {var,{142,5},'_'},
              {call,
                  {142,9},
                  {remote,
                      {142,15},
                      {atom,{142,9},erlang},
                      {atom,{142,16},ports}},
                  []}},
          {debug_line,143,71},
          {match,
              {143,5},
              {var,{143,5},'_'},
              {call,
                  {143,9},
                  {remote,
                      {143,9},
                      {atom,{143,9},erlang},
                      {atom,{143,9},pre_loaded}},
                  []}},
          {debug_line,144,72},
          {match,
              {144,5},
              {var,{144,5},'_'},
              {call,
                  {144,9},
                  {remote,
                      {144,9},
                      {atom,{144,9},erlang},
                      {atom,{144,9},processes}},
                  []}},
          {debug_line,145,73},
          {match,
              {145,5},
              {var,{145,5},'_'},
              {call,
                  {145,9},
                  {remote,
                      {145,9},
                      {atom,{145,9},erlang},
                      {atom,{145,9},registered}},
                  []}},
          {debug_line,146,74},
          {match,
              {146,5},
              {var,{146,5},'_'},
              {call,
                  {146,9},
                  {remote,
                      {146,9},
                      {atom,{146,9},erlang},
                      {atom,{146,9},term_to_binary}},
                  [{var,{146,24},'Config'}]}},
          {debug_line,147,75},
          {match,
              {147,5},
              {integer,{147,5},42},
              {call,
                  {147,10},
                  {remote,
                      {147,10},
                      {atom,{147,10},erlang},
                      {atom,{147,10},list_to_integer}},
                  [{block,0,[{string,{147,26},"2A"}]},{integer,{147,32},16}]}},
          {debug_line,148,76},
          {match,
              {148,5},
              {atom,{148,5},a},
              {call,
                  {148,9},
                  {remote,
                      {148,9},
                      {atom,{148,9},erlang},
                      {atom,{148,9},binary_to_atom}},
                  [{block,0,
                       [{call,
                            {148,24},
                            {remote,
                                {148,24},
                                {atom,{148,24},erlang},
                                {atom,{148,24},atom_to_binary}},
                            [{atom,{148,39},a}]}]}]}},
          {debug_line,150,77},
          {atom,{150,5},ok}]}]}.
{function,
    {152,1},
    cover_trim,1,
    [{clause,
         {152,1},
         [{var,{152,1},'_'}],
         [[{call,
               {152,1},
               {remote,
                   {152,1},
                   {atom,{152,1},fake},
                   {atom,{152,1},is_beam_bif_info}},
               []}]],
         [{debug_line,152,78},{atom,{152,1},ignore}]},
     {clause,
         {152,1},
         [{var,{152,12},'_Config'}],
         [],
         [{debug_line,153,79},
          {match,
              {153,5},
              {atom,{153,5},ok},
              {call,
                  {153,10},
                  {atom,{153,10},cover_trim_1},
                  [{block,0,
                       [{bin,
                            {153,23},
                            [{bin_element,
                                 {153,25},
                                 {string,{153,25},"abc"},
                                 default,default}]}]},
                   {block,0,
                       [{call,
                            {153,34},
                            {atom,{153,34},id},
                            [{block,0,
                                 [{cons,
                                      {153,37},
                                      {integer,{153,38},42},
                                      {nil,0}}]}]}]}]}},
          {debug_line,154,80},
          {match,
              {154,5},
              {atom,{154,5},ok},
              {call,
                  {154,10},
                  {atom,{154,10},cover_trim_1},
                  [{block,0,
                       [{tuple,
                            {154,23},
                            [{atom,{154,24},a},
                             {atom,{154,26},b},
                             {atom,{154,28},c}]}]},
                   {block,0,
                       [{call,
                            {154,32},
                            {atom,{154,32},id},
                            [{block,0,
                                 [{cons,
                                      {154,35},
                                      {integer,{154,36},42},
                                      {nil,0}}]}]}]}]}},
          {debug_line,156,81},
          {match,
              {156,5},
              {atom,{156,5},true},
              {call,
                  {156,12},
                  {atom,{156,12},cover_trim_2},
                  [{block,0,[{string,{156,25},"keep-alive"}]},
                   {block,0,[{string,{156,39},"1"}]}]}},
          {debug_line,157,82},
          {match,
              {157,5},
              {atom,{157,5},false},
              {call,
                  {157,13},
                  {atom,{157,13},cover_trim_2},
                  [{block,0,[{string,{157,26},"keep-alive"}]},
                   {block,0,[{string,{157,40},"0"}]}]}},
          {debug_line,158,83},
          {match,
              {158,5},
              {atom,{158,5},false},
              {call,
                  {158,13},
                  {atom,{158,13},cover_trim_2},
                  [{block,0,[{string,{158,26},"other"}]},
                   {block,0,[{string,{158,35},"1"}]}]}},
          {debug_line,159,84},
          {match,
              {159,5},
              {atom,{159,5},false},
              {call,
                  {159,13},
                  {atom,{159,13},cover_trim_2},
                  [{block,0,[{string,{159,26},"other"}]},
                   {block,0,[{string,{159,35},"0"}]}]}},
          {debug_line,161,85},
          {match,
              {161,5},
              {atom,{161,5},true},
              {call,
                  {161,12},
                  {atom,{161,12},cover_trim_3},
                  [{block,0,[{string,{161,25},"keep-alive"}]},
                   {block,0,[{op,{161,39},'-',{integer,{161,40},1}}]}]}},
          {debug_line,162,86},
          {match,
              {162,5},
              {atom,{162,5},false},
              {call,
                  {162,13},
                  {atom,{162,13},cover_trim_3},
                  [{block,0,[{string,{162,26},"keep-alive"}]},
                   {integer,{162,40},100}]}},
          {debug_line,163,87},
          {match,
              {163,5},
              {atom,{163,5},false},
              {call,
                  {163,13},
                  {atom,{163,13},cover_trim_3},
                  [{block,0,[{string,{163,26},"other"}]},
                   {block,0,[{op,{163,35},'-',{integer,{163,36},10}}]}]}},
          {debug_line,164,88},
          {match,
              {164,5},
              {atom,{164,5},false},
              {call,
                  {164,13},
                  {atom,{164,13},cover_trim_3},
                  [{block,0,[{string,{164,26},"other"}]},
                   {block,0,[{op,{164,35},'-',{integer,{164,36},100}}]}]}},
          {debug_line,166,89},
          {atom,{166,5},ok}]}]}.
{function,
    {168,1},
    cover_trim_1,2,
    [{clause,
         {168,1},
         [{var,{168,1},'_'},{var,{168,1},'_'}],
         [[{call,
               {168,1},
               {remote,
                   {168,1},
                   {atom,{168,1},fake},
                   {atom,{168,1},is_beam_bif_info}},
               []}]],
         [{debug_line,168,90},{atom,{168,1},ignore}]},
     {clause,
         {168,1},
         [{var,{168,14},'Something'},{var,{168,25},'V'}],
         [],
         [{debug_line,169,91},
          {call,{169,5},{atom,{169,5},id},[{var,{169,8},'Something'}]},
          {debug_line,170,92},
          {call,{170,5},{atom,{170,5},id},[{var,{170,8},'Something'}]},
          {debug_line,171,93},
          {'if',
              {171,5},
              [{clause,
                   {172,9},
                   [],
                   [[{op,{172,15},
                         '=:=',
                         {call,
                             {172,9},
                             {remote,
                                 {172,9},
                                 {atom,{172,9},erlang},
                                 {atom,{172,9},hd}},
                             [{var,{172,12},'V'}]},
                         {integer,{172,19},42}}]],
                   [{debug_line,173,94},{atom,{173,13},ok}]}]}]}]}.
{function,
    {176,1},
    cover_trim_2,2,
    [{clause,
         {176,1},
         [{var,{176,1},'_'},{var,{176,1},'_'}],
         [[{call,
               {176,1},
               {remote,
                   {176,1},
                   {atom,{176,1},fake},
                   {atom,{176,1},is_beam_bif_info}},
               []}]],
         [{debug_line,176,95},{atom,{176,1},ignore}]},
     {clause,
         {176,1},
         [{var,{176,14},'Header'},{var,{176,22},'NList'}],
         [],
         [{debug_line,177,96},
          {call,{177,5},{atom,{177,5},id},[{integer,{177,8},0}]},
          {debug_line,178,97},
          {'case',
              {178,5},
              {call,{178,10},{atom,{178,10},id},[{var,{178,13},'Header'}]},
              [{clause,
                   {179,9},
                   [{string,{179,9},"keep-alive"}],
                   [[{op,{179,37},
                         '>=',
                         {call,
                             {179,27},
                             {remote,
                                 {179,27},
                                 {atom,{179,27},erlang},
                                 {atom,{179,27},hd}},
                             [{var,{179,30},'NList'}]},
                         {char,{179,40},49}}]],
                   [{debug_line,180,98},{atom,{180,13},true}]},
               {clause,
                   {181,9},
                   [{var,{181,9},'_Connect'}],
                   [],
                   [{debug_line,182,99},{atom,{182,13},false}]}]}]}]}.
{function,
    {185,1},
    cover_trim_3,2,
    [{clause,
         {185,1},
         [{var,{185,1},'_'},{var,{185,1},'_'}],
         [[{call,
               {185,1},
               {remote,
                   {185,1},
                   {atom,{185,1},fake},
                   {atom,{185,1},is_beam_bif_info}},
               []}]],
         [{debug_line,185,100},{atom,{185,1},ignore}]},
     {clause,
         {185,1},
         [{var,{185,14},'Header'},{var,{185,22},'N'}],
         [],
         [{debug_line,186,101},
          {call,{186,5},{atom,{186,5},id},[{integer,{186,8},0}]},
          {debug_line,187,102},
          {'case',
              {187,5},
              {call,{187,10},{atom,{187,10},id},[{var,{187,13},'Header'}]},
              [{clause,
                   {188,9},
                   [{string,{188,9},"keep-alive"}],
                   [[{op,{188,34},
                         '<',
                         {call,
                             {188,27},
                             {remote,
                                 {188,27},
                                 {atom,{188,27},erlang},
                                 {atom,{188,27},abs}},
                             [{var,{188,31},'N'}]},
                         {integer,{188,36},42}}]],
                   [{debug_line,189,103},{atom,{189,13},true}]},
               {clause,
                   {190,9},
                   [{var,{190,9},'_Connect'}],
                   [],
                   [{debug_line,191,104},{atom,{191,13},false}]}]}]}]}.
{function,
    {196,1},
    head_tail,1,
    [{clause,
         {196,1},
         [{var,{196,1},'_'}],
         [[{call,
               {196,1},
               {remote,
                   {196,1},
                   {atom,{196,1},fake},
                   {atom,{196,1},is_beam_bif_info}},
               []}]],
         [{debug_line,196,105},{atom,{196,1},ignore}]},
     {clause,
         {196,1},
         [{var,{196,11},'_Config'}],
         [],
         [{debug_line,197,106},
          {match,
              {197,5},
              {tuple,{197,5},[{integer,{197,6},1},{atom,{197,9},ok}]},
              {call,{197,15},{atom,{197,15},head_case},[]}},
          {debug_line,198,107},
          {match,
              {198,5},
              {tuple,{198,5},[{integer,{198,6},1},{atom,{198,9},ok}]},
              {call,{198,15},{atom,{198,15},tail_case},[]}},
          {debug_line,200,108},
          {match,
              {200,5},
              {integer,{200,5},1},
              {call,
                  {200,9},
                  {remote,{200,9},{atom,{200,9},erlang},{atom,{200,9},hd}},
                  [{block,0,
                       [{call,
                            {200,12},
                            {atom,{200,12},id},
                            [{block,0,
                                 [{cons,
                                      {200,15},
                                      {integer,{200,16},1},
                                      {nil,0}}]}]}]}]}},
          {debug_line,201,109},
          {match,
              {201,5},
              {nil,{201,5}},
              {call,
                  {201,10},
                  {remote,{201,10},{atom,{201,10},erlang},{atom,{201,10},tl}},
                  [{block,0,
                       [{call,
                            {201,13},
                            {atom,{201,13},id},
                            [{block,0,
                                 [{cons,
                                      {201,16},
                                      {integer,{201,17},1},
                                      {nil,0}}]}]}]}]}},
          {debug_line,203,110},
          {atom,{203,5},ok}]}]}.
{function,
    {205,1},
    head_case,0,
    [{clause,
         {205,1},
         [],
         [[{call,
               {205,1},
               {remote,
                   {205,1},
                   {atom,{205,1},fake},
                   {atom,{205,1},is_beam_bif_info}},
               []}]],
         [{debug_line,205,111},{atom,{205,1},ignore}]},
     {clause,
         {205,1},
         [],[],
         [{debug_line,206,112},
          {'case',
              {206,5},
              {integer,{206,10},1},
              [{clause,
                   {207,9},
                   [{var,{207,9},'X'}],
                   [[{call,
                         {207,16},
                         {remote,
                             {207,16},
                             {atom,{207,16},erlang},
                             {atom,{207,16},hd}},
                         [{var,{207,19},'X'}]}]],
                   [{debug_line,207,113},{atom,{207,25},blurf}]},
               {clause,
                   {208,9},
                   [{var,{208,9},'X'}],
                   [],
                   [{debug_line,208,114},
                    {tuple,
                        {208,14},
                        [{var,{208,15},'X'},{atom,{208,18},ok}]}]}]}]}]}.
{function,
    {211,1},
    tail_case,0,
    [{clause,
         {211,1},
         [],
         [[{call,
               {211,1},
               {remote,
                   {211,1},
                   {atom,{211,1},fake},
                   {atom,{211,1},is_beam_bif_info}},
               []}]],
         [{debug_line,211,115},{atom,{211,1},ignore}]},
     {clause,
         {211,1},
         [],[],
         [{debug_line,212,116},
          {'case',
              {212,5},
              {integer,{212,10},1},
              [{clause,
                   {213,9},
                   [{var,{213,9},'X'}],
                   [[{call,
                         {213,16},
                         {remote,
                             {213,16},
                             {atom,{213,16},erlang},
                             {atom,{213,16},tl}},
                         [{var,{213,19},'X'}]}]],
                   [{debug_line,213,117},{atom,{213,25},blurf}]},
               {clause,
                   {214,9},
                   [{var,{214,9},'X'}],
                   [],
                   [{debug_line,214,118},
                    {tuple,
                        {214,14},
                        [{var,{214,15},'X'},{atom,{214,18},ok}]}]}]}]}]}.
{function,
    {217,1},
    min_max,1,
    [{clause,
         {217,1},
         [{var,{217,1},'_'}],
         [[{call,
               {217,1},
               {remote,
                   {217,1},
                   {atom,{217,1},fake},
                   {atom,{217,1},is_beam_bif_info}},
               []}]],
         [{debug_line,217,119},{atom,{217,1},ignore}]},
     {clause,
         {217,1},
         [{var,{217,9},'_Config'}],
         [],
         [{debug_line,218,120},
          {match,
              {218,5},
              {var,{218,5},'False'},
              {call,{218,13},{atom,{218,13},id},[{atom,{218,16},false}]}},
          {debug_line,219,121},
          {match,
              {219,5},
              {var,{219,5},'True'},
              {call,{219,12},{atom,{219,12},id},[{atom,{219,15},true}]}},
          {debug_line,221,122},
          {match,
              {221,5},
              {atom,{221,5},false},
              {call,
                  {221,13},
                  {atom,{221,13},bool_min_false},
                  [{var,{221,28},'False'},{var,{221,35},'False'}]}},
          {debug_line,222,123},
          {match,
              {222,5},
              {atom,{222,5},false},
              {call,
                  {222,13},
                  {atom,{222,13},bool_min_false},
                  [{var,{222,28},'False'},{var,{222,35},'True'}]}},
          {debug_line,223,124},
          {match,
              {223,5},
              {atom,{223,5},false},
              {call,
                  {223,13},
                  {atom,{223,13},bool_min_false},
                  [{var,{223,28},'True'},{var,{223,34},'False'}]}},
          {debug_line,224,125},
          {match,
              {224,5},
              {atom,{224,5},true},
              {call,
                  {224,12},
                  {atom,{224,12},bool_min_true},
                  [{var,{224,26},'True'},{var,{224,32},'True'}]}},
          {debug_line,226,126},
          {match,
              {226,5},
              {atom,{226,5},false},
              {call,
                  {226,13},
                  {atom,{226,13},bool_max_false},
                  [{var,{226,28},'False'},{var,{226,35},'False'}]}},
          {debug_line,227,127},
          {match,
              {227,5},
              {atom,{227,5},true},
              {call,
                  {227,12},
                  {atom,{227,12},bool_max_true},
                  [{var,{227,26},'False'},{var,{227,33},'True'}]}},
          {debug_line,228,128},
          {match,
              {228,5},
              {atom,{228,5},true},
              {call,
                  {228,12},
                  {atom,{228,12},bool_max_true},
                  [{var,{228,26},'True'},{var,{228,32},'False'}]}},
          {debug_line,229,129},
          {match,
              {229,5},
              {atom,{229,5},true},
              {call,
                  {229,12},
                  {atom,{229,12},bool_max_true},
                  [{var,{229,26},'True'},{var,{229,32},'True'}]}},
          {debug_line,231,130},
          {match,
              {231,5},
              {integer,{231,5},11},
              {call,
                  {231,10},
                  {atom,{231,10},min_increment},
                  [{integer,{231,24},100}]}},
          {debug_line,232,131},
          {match,
              {232,5},
              {integer,{232,5},11},
              {call,
                  {232,10},
                  {atom,{232,10},min_increment},
                  [{integer,{232,24},10}]}},
          {debug_line,233,132},
          {match,
              {233,5},
              {integer,{233,5},10},
              {call,
                  {233,10},
                  {atom,{233,10},min_increment},
                  [{integer,{233,24},9}]}},
          {debug_line,234,133},
          {match,
              {234,5},
              {integer,{234,5},1},
              {call,
                  {234,9},
                  {atom,{234,9},min_increment},
                  [{integer,{234,23},0}]}},
          {debug_line,235,134},
          {match,
              {235,5},
              {integer,{235,5},0},
              {call,
                  {235,9},
                  {atom,{235,9},min_increment},
                  [{block,0,[{op,{235,23},'-',{integer,{235,24},1}}]}]}},
          {debug_line,236,135},
          {match,
              {236,5},
              {integer,{236,5},11},
              {call,
                  {236,10},
                  {atom,{236,10},min_increment},
                  [{atom,{236,24},a}]}},
          {debug_line,238,136},
          {match,
              {238,5},
              {tuple,{238,5},[{integer,{238,6},42},{integer,{238,9},42}]},
              {call,
                  {238,15},
                  {atom,{238,15},max_number},
                  [{block,0,
                       [{call,
                            {238,26},
                            {atom,{238,26},id},
                            [{integer,{238,29},42}]}]}]}},
          {debug_line,239,137},
          {match,
              {239,5},
              {tuple,{239,5},[{integer,{239,6},42},{float,{239,9},42.0}]},
              {call,
                  {239,17},
                  {atom,{239,17},max_number},
                  [{block,0,
                       [{call,
                            {239,28},
                            {atom,{239,28},id},
                            [{float,{239,31},42.0}]}]}]}},
          {debug_line,240,138},
          {match,
              {240,5},
              {tuple,
                  {240,5},
                  [{op,{240,6},'-',{integer,{240,7},1}},{integer,{240,9},1}]},
              {call,
                  {240,14},
                  {atom,{240,14},max_number},
                  [{block,0,
                       [{call,
                            {240,25},
                            {atom,{240,25},id},
                            [{block,0,
                                 [{op,{240,28},
                                      '-',
                                      {integer,{240,29},1}}]}]}]}]}},
          {debug_line,241,139},
          {match,
              {241,5},
              {tuple,
                  {241,5},
                  [{op,{241,6},'-',{integer,{241,7},1}},{integer,{241,9},1}]},
              {call,
                  {241,14},
                  {atom,{241,14},max_number},
                  [{block,0,
                       [{call,
                            {241,25},
                            {atom,{241,25},id},
                            [{block,0,
                                 [{op,{241,28},
                                      '-',
                                      {float,{241,29},1.0}}]}]}]}]}},
          {debug_line,243,140},
          {match,
              {243,5},
              {integer,{243,5},100},
              {call,
                  {243,11},
                  {atom,{243,11},int_clamped_add},
                  [{block,0,[{op,{243,27},'-',{integer,{243,28},1}}]}]}},
          {debug_line,244,141},
          {match,
              {244,5},
              {integer,{244,5},100},
              {call,
                  {244,11},
                  {atom,{244,11},int_clamped_add},
                  [{integer,{244,27},0}]}},
          {debug_line,245,142},
          {match,
              {245,5},
              {integer,{245,5},105},
              {call,
                  {245,11},
                  {atom,{245,11},int_clamped_add},
                  [{integer,{245,27},5}]}},
          {debug_line,246,143},
          {match,
              {246,5},
              {integer,{246,5},110},
              {call,
                  {246,11},
                  {atom,{246,11},int_clamped_add},
                  [{integer,{246,27},10}]}},
          {debug_line,247,144},
          {match,
              {247,5},
              {integer,{247,5},110},
              {call,
                  {247,11},
                  {atom,{247,11},int_clamped_add},
                  [{integer,{247,27},11}]}},
          {debug_line,249,145},
          {match,
              {249,5},
              {integer,{249,5},100},
              {call,
                  {249,11},
                  {atom,{249,11},num_clamped_add},
                  [{block,0,[{op,{249,27},'-',{integer,{249,28},1}}]}]}},
          {debug_line,250,146},
          {match,
              {250,5},
              {integer,{250,5},100},
              {call,
                  {250,11},
                  {atom,{250,11},num_clamped_add},
                  [{integer,{250,27},0}]}},
          {debug_line,251,147},
          {match,
              {251,5},
              {integer,{251,5},105},
              {call,
                  {251,11},
                  {atom,{251,11},num_clamped_add},
                  [{integer,{251,27},5}]}},
          {debug_line,252,148},
          {match,
              {252,5},
              {integer,{252,5},110},
              {call,
                  {252,11},
                  {atom,{252,11},num_clamped_add},
                  [{integer,{252,27},10}]}},
          {debug_line,253,149},
          {match,
              {253,5},
              {integer,{253,5},110},
              {call,
                  {253,11},
                  {atom,{253,11},num_clamped_add},
                  [{integer,{253,27},11}]}},
          {debug_line,255,150},
          {match,
              {255,5},
              {integer,{255,5},105},
              {call,
                  {255,11},
                  {atom,{255,11},num_clamped_add},
                  [{integer,{255,27},5}]}},
          {debug_line,256,151},
          {match,
              {256,5},
              {float,{256,5},105.0},
              {call,
                  {256,13},
                  {atom,{256,13},num_clamped_add},
                  [{float,{256,29},5.0}]}},
          {debug_line,257,152},
          {match,
              {257,5},
              {integer,{257,5},110},
              {call,
                  {257,11},
                  {atom,{257,11},num_clamped_add},
                  [{atom,{257,27},a}]}},
          {debug_line,258,153},
          {match,
              {258,5},
              {integer,{258,5},110},
              {call,
                  {258,11},
                  {atom,{258,11},num_clamped_add},
                  [{block,0,
                       [{tuple,
                            {258,27},
                            [{atom,{258,28},a},
                             {atom,{258,30},b},
                             {atom,{258,32},c}]}]}]}},
          {debug_line,259,154},
          {match,
              {259,5},
              {integer,{259,5},110},
              {call,
                  {259,11},
                  {atom,{259,11},num_clamped_add},
                  [{block,0,
                       [{tuple,
                            {259,27},
                            [{atom,{259,28},a},
                             {atom,{259,30},b},
                             {atom,{259,32},c}]}]}]}},
          {debug_line,261,155},
          {atom,{261,5},ok}]}]}.
{function,
    {266,1},
    bool_min_false,2,
    [{clause,
         {266,1},
         [{var,{266,1},'_'},{var,{266,1},'_'}],
         [[{call,
               {266,1},
               {remote,
                   {266,1},
                   {atom,{266,1},fake},
                   {atom,{266,1},is_beam_bif_info}},
               []}]],
         [{debug_line,266,156},{atom,{266,1},ignore}]},
     {clause,
         {266,1},
         [{var,{266,16},'A'},{var,{266,19},'B'}],
         [[{call,
               {266,27},
               {remote,
                   {266,27},
                   {atom,{266,27},erlang},
                   {atom,{266,27},is_boolean}},
               [{var,{266,38},'A'}]},
           {call,
               {266,42},
               {remote,
                   {266,42},
                   {atom,{266,42},erlang},
                   {atom,{266,42},is_boolean}},
               [{var,{266,53},'B'}]}]],
         [{debug_line,267,157},
          {match,
              {267,5},
              {atom,{267,5},false},
              {call,
                  {267,13},
                  {remote,{267,13},{atom,{267,13},erlang},{atom,{267,13},min}},
                  [{var,{267,17},'A'},{var,{267,20},'B'}]}}]}]}.
{function,
    {269,1},
    bool_min_true,2,
    [{clause,
         {269,1},
         [{var,{269,1},'_'},{var,{269,1},'_'}],
         [[{call,
               {269,1},
               {remote,
                   {269,1},
                   {atom,{269,1},fake},
                   {atom,{269,1},is_beam_bif_info}},
               []}]],
         [{debug_line,269,158},{atom,{269,1},ignore}]},
     {clause,
         {269,1},
         [{var,{269,15},'A'},{var,{269,18},'B'}],
         [[{call,
               {269,26},
               {remote,
                   {269,26},
                   {atom,{269,26},erlang},
                   {atom,{269,26},is_boolean}},
               [{var,{269,37},'A'}]},
           {call,
               {269,41},
               {remote,
                   {269,41},
                   {atom,{269,41},erlang},
                   {atom,{269,41},is_boolean}},
               [{var,{269,52},'B'}]}]],
         [{debug_line,270,159},
          {match,
              {270,5},
              {atom,{270,5},true},
              {call,
                  {270,12},
                  {remote,{270,12},{atom,{270,12},erlang},{atom,{270,12},min}},
                  [{var,{270,16},'A'},{var,{270,19},'B'}]}}]}]}.
{function,
    {272,1},
    bool_max_false,2,
    [{clause,
         {272,1},
         [{var,{272,1},'_'},{var,{272,1},'_'}],
         [[{call,
               {272,1},
               {remote,
                   {272,1},
                   {atom,{272,1},fake},
                   {atom,{272,1},is_beam_bif_info}},
               []}]],
         [{debug_line,272,160},{atom,{272,1},ignore}]},
     {clause,
         {272,1},
         [{var,{272,16},'A'},{var,{272,19},'B'}],
         [[{call,
               {272,27},
               {remote,
                   {272,27},
                   {atom,{272,27},erlang},
                   {atom,{272,27},is_boolean}},
               [{var,{272,38},'A'}]},
           {call,
               {272,42},
               {remote,
                   {272,42},
                   {atom,{272,42},erlang},
                   {atom,{272,42},is_boolean}},
               [{var,{272,53},'B'}]}]],
         [{debug_line,273,161},
          {match,
              {273,5},
              {atom,{273,5},false},
              {call,
                  {273,13},
                  {remote,{273,13},{atom,{273,13},erlang},{atom,{273,13},max}},
                  [{var,{273,17},'A'},{var,{273,20},'B'}]}}]}]}.
{function,
    {275,1},
    bool_max_true,2,
    [{clause,
         {275,1},
         [{var,{275,1},'_'},{var,{275,1},'_'}],
         [[{call,
               {275,1},
               {remote,
                   {275,1},
                   {atom,{275,1},fake},
                   {atom,{275,1},is_beam_bif_info}},
               []}]],
         [{debug_line,275,162},{atom,{275,1},ignore}]},
     {clause,
         {275,1},
         [{var,{275,15},'A'},{var,{275,18},'B'}],
         [[{call,
               {275,26},
               {remote,
                   {275,26},
                   {atom,{275,26},erlang},
                   {atom,{275,26},is_boolean}},
               [{var,{275,37},'B'}]}]],
         [{debug_line,276,163},
          {match,
              {276,5},
              {atom,{276,5},true},
              {call,
                  {276,12},
                  {remote,{276,12},{atom,{276,12},erlang},{atom,{276,12},max}},
                  [{var,{276,16},'A'},{var,{276,19},'B'}]}},
          {debug_line,277,164},
          {'if',
              {277,5},
              [{clause,
                   {278,9},
                   [],
                   [[{call,
                         {278,9},
                         {remote,
                             {278,9},
                             {atom,{278,9},erlang},
                             {atom,{278,9},is_boolean}},
                         [{var,{278,20},'A'}]}]],
                   [{debug_line,279,165},
                    {match,
                        {279,13},
                        {atom,{279,13},true},
                        {call,
                            {279,20},
                            {remote,
                                {279,20},
                                {atom,{279,20},erlang},
                                {atom,{279,20},max}},
                            [{var,{279,24},'A'},{var,{279,27},'B'}]}}]}]}]}]}.
{function,
    {282,1},
    max_number,1,
    [{clause,
         {282,1},
         [{var,{282,1},'_'}],
         [[{call,
               {282,1},
               {remote,
                   {282,1},
                   {atom,{282,1},fake},
                   {atom,{282,1},is_beam_bif_info}},
               []}]],
         [{debug_line,282,166},{atom,{282,1},ignore}]},
     {clause,
         {282,1},
         [{var,{282,12},'A'}],
         [],
         [{debug_line,283,167},
          {match,
              {283,5},
              {var,{283,5},'Res'},
              {tuple,
                  {283,11},
                  [{call,
                       {283,12},
                       {remote,
                           {283,12},
                           {atom,{283,12},erlang},
                           {atom,{283,12},trunc}},
                       [{var,{283,18},'A'}]},
                   {call,
                       {283,22},
                       {remote,
                           {283,22},
                           {atom,{283,22},erlang},
                           {atom,{283,22},max}},
                       [{var,{283,26},'A'},{integer,{283,29},1}]}]}},
          {debug_line,284,168},
          {match,
              {284,5},
              {var,{284,5},'Res'},
              {tuple,
                  {284,11},
                  [{call,
                       {284,12},
                       {remote,
                           {284,12},
                           {atom,{284,12},erlang},
                           {atom,{284,12},trunc}},
                       [{var,{284,18},'A'}]},
                   {call,
                       {284,22},
                       {remote,
                           {284,22},
                           {atom,{284,22},erlang},
                           {atom,{284,22},max}},
                       [{integer,{284,26},1},{var,{284,29},'A'}]}]}}]}]}.
{function,
    {286,1},
    min_increment,1,
    [{clause,
         {286,1},
         [{var,{286,1},'_'}],
         [[{call,
               {286,1},
               {remote,
                   {286,1},
                   {atom,{286,1},fake},
                   {atom,{286,1},is_beam_bif_info}},
               []}]],
         [{debug_line,286,169},{atom,{286,1},ignore}]},
     {clause,
         {286,1},
         [{var,{286,15},'A'}],
         [],
         [{debug_line,287,170},
          {match,
              {287,5},
              {var,{287,5},'Res'},
              {op,{287,22},
                  '+',
                  {call,
                      {287,11},
                      {remote,
                          {287,11},
                          {atom,{287,11},erlang},
                          {atom,{287,11},min}},
                      [{integer,{287,15},10},{var,{287,19},'A'}]},
                  {integer,{287,24},1}}},
          {debug_line,288,171},
          {match,
              {288,5},
              {var,{288,5},'Res'},
              {op,{288,22},
                  '+',
                  {call,
                      {288,11},
                      {remote,
                          {288,11},
                          {atom,{288,11},erlang},
                          {atom,{288,11},min}},
                      [{var,{288,15},'A'},{integer,{288,18},10}]},
                  {integer,{288,24},1}}},
          {debug_line,289,172},
          {match,
              {289,5},
              {var,{289,5},'Res'},
              {op,{289,26},
                  '+',
                  {call,
                      {289,11},
                      {remote,
                          {289,11},
                          {atom,{289,11},erlang},
                          {atom,{289,11},min}},
                      [{block,0,
                           [{call,
                                {289,15},
                                {atom,{289,15},id},
                                [{var,{289,18},'A'}]}]},
                       {integer,{289,22},10}]},
                  {integer,{289,28},1}}}]}]}.
{function,
    {291,1},
    int_clamped_add,1,
    [{clause,
         {291,1},
         [{var,{291,1},'_'}],
         [[{call,
               {291,1},
               {remote,
                   {291,1},
                   {atom,{291,1},fake},
                   {atom,{291,1},is_beam_bif_info}},
               []}]],
         [{debug_line,291,173},{atom,{291,1},ignore}]},
     {clause,
         {291,1},
         [{var,{291,17},'A'}],
         [[{call,
               {291,25},
               {remote,
                   {291,25},
                   {atom,{291,25},erlang},
                   {atom,{291,25},is_integer}},
               [{var,{291,36},'A'}]}]],
         [{debug_line,292,174},
          {op,{292,24},
              '+',
              {call,
                  {292,5},
                  {remote,{292,5},{atom,{292,5},erlang},{atom,{292,5},min}},
                  [{block,0,
                       [{call,
                            {292,9},
                            {remote,
                                {292,9},
                                {atom,{292,9},erlang},
                                {atom,{292,9},max}},
                            [{var,{292,13},'A'},{integer,{292,16},0}]}]},
                   {integer,{292,20},10}]},
              {integer,{292,26},100}}]}]}.
{function,
    {294,1},
    num_clamped_add,1,
    [{clause,
         {294,1},
         [{var,{294,1},'_'}],
         [[{call,
               {294,1},
               {remote,
                   {294,1},
                   {atom,{294,1},fake},
                   {atom,{294,1},is_beam_bif_info}},
               []}]],
         [{debug_line,294,175},{atom,{294,1},ignore}]},
     {clause,
         {294,1},
         [{var,{294,17},'A'}],
         [],
         [{debug_line,295,176},
          {op,{295,24},
              '+',
              {call,
                  {295,5},
                  {remote,{295,5},{atom,{295,5},erlang},{atom,{295,5},min}},
                  [{block,0,
                       [{call,
                            {295,9},
                            {remote,
                                {295,9},
                                {atom,{295,9},erlang},
                                {atom,{295,9},max}},
                            [{var,{295,13},'A'},{integer,{295,16},0}]}]},
                   {integer,{295,20},10}]},
              {integer,{295,26},100}}]}]}.
{function,
    {297,1},
    non_throwing,1,
    [{clause,
         {297,1},
         [{var,{297,1},'_'}],
         [[{call,
               {297,1},
               {remote,
                   {297,1},
                   {atom,{297,1},fake},
                   {atom,{297,1},is_beam_bif_info}},
               []}]],
         [{debug_line,297,177},{atom,{297,1},ignore}]},
     {clause,
         {297,1},
         [{var,{297,14},'_Config'}],
         [],
         [{debug_line,298,178},
          {match,
              {298,5},
              {atom,{298,5},abc},
              {call,
                  {298,11},
                  {atom,{298,11},thing_to_atom},
                  [{block,0,
                       [{bin,
                            {298,25},
                            [{bin_element,
                                 {298,26},
                                 {string,{298,26},"abc"},
                                 default,
                                 [utf8]}]}]}]}},
          {debug_line,299,179},
          {match,
              {299,5},
              {nil,{299,5}},
              {call,
                  {299,10},
                  {atom,{299,10},thing_to_atom},
                  [{atom,{299,24},a}]}},
          {debug_line,300,180},
          {match,
              {300,5},
              {nil,{300,5}},
              {call,
                  {300,10},
                  {atom,{300,10},thing_to_atom},
                  [{integer,{300,24},42}]}},
          {debug_line,301,181},
          {match,
              {301,5},
              {nil,{301,5}},
              {call,
                  {301,10},
                  {atom,{301,10},thing_to_atom},
                  [{block,0,
                       [{cons,
                            {301,24},
                            {atom,{301,25},a},
                            {cons,
                                {301,27},
                                {atom,{301,27},b},
                                {cons,
                                    {301,29},
                                    {atom,{301,29},c},
                                    {nil,0}}}}]}]}},
          {debug_line,302,182},
          {match,
              {302,5},
              {atom,{302,5},erlang},
              {call,
                  {302,14},
                  {atom,{302,14},thing_to_existing_atom},
                  [{block,0,
                       [{bin,
                            {302,37},
                            [{bin_element,
                                 {302,38},
                                 {string,{302,38},"erlang"},
                                 default,
                                 [utf8]}]}]}]}},
          {debug_line,303,183},
          {match,
              {303,5},
              {nil,{303,5}},
              {call,
                  {303,10},
                  {atom,{303,10},thing_to_existing_atom},
                  [{block,0,
                       [{bin,
                            {303,33},
                            [{bin_element,
                                 {303,34},
                                 {string,{303,34},"not an existing atom"},
                                 default,
                                 [utf8]}]}]}]}},
          {debug_line,304,184},
          {match,
              {304,5},
              {nil,{304,5}},
              {call,
                  {304,10},
                  {atom,{304,10},thing_to_existing_atom},
                  [{atom,{304,33},a}]}},
          {debug_line,305,185},
          {atom,{305,5},ok}]}]}.
{function,
    {307,1},
    thing_to_atom,1,
    [{clause,
         {307,1},
         [{var,{307,1},'_'}],
         [[{call,
               {307,1},
               {remote,
                   {307,1},
                   {atom,{307,1},fake},
                   {atom,{307,1},is_beam_bif_info}},
               []}]],
         [{debug_line,307,186},{atom,{307,1},ignore}]},
     {clause,
         {307,1},
         [{var,{307,15},'Bin0'}],
         [],
         [{debug_line,308,187},
          {match,
              {308,5},
              {var,{308,5},'Bin'},
              {call,{308,11},{atom,{308,11},id},[{var,{308,14},'Bin0'}]}},
          {debug_line,309,188},
          {match,
              {309,5},
              {var,{309,5},'Res'},
              {'try',
                  {309,11},
                  [{debug_line,310,189},
                   {call,
                       {310,15},
                       {remote,
                           {310,15},
                           {atom,{310,15},erlang},
                           {atom,{310,15},binary_to_atom}},
                       [{var,{310,30},'Bin'}]}],
                  [],
                  [{clause,
                       {312,15},
                       [{tuple,
                            {312,15},
                            [{var,{312,15},'_'},
                             {var,{312,17},'_'},
                             {var,{312,17},'_'}]}],
                       [],
                       [{debug_line,313,190},{nil,{313,19}}]}],
                  []}},
          {debug_line,315,191},
          {match,
              {315,5},
              {var,{315,5},'Res'},
              {'try',
                  {315,11},
                  [{debug_line,316,192},
                   {call,
                       {316,15},
                       {remote,
                           {316,15},
                           {atom,{316,15},erlang},
                           {atom,{316,15},binary_to_atom}},
                       [{var,{316,30},'Bin'},{atom,{316,35},utf8}]}],
                  [],
                  [{clause,
                       {318,15},
                       [{tuple,
                            {318,15},
                            [{var,{318,15},'_'},
                             {var,{318,17},'_'},
                             {var,{318,17},'_'}]}],
                       [],
                       [{debug_line,319,193},{nil,{319,19}}]}],
                  []}},
          {debug_line,321,194},
          {'if',
              {321,5},
              [{clause,
                   {322,9},
                   [],
                   [[{call,
                         {322,9},
                         {remote,
                             {322,9},
                             {atom,{322,9},erlang},
                             {atom,{322,9},is_atom}},
                         [{var,{322,17},'Res'}]}]],
                   [{debug_line,323,195},
                    {match,
                        {323,13},
                        {var,{323,13},'List'},
                        {call,
                            {323,20},
                            {remote,
                                {323,27},
                                {atom,{323,20},unicode},
                                {atom,{323,28},characters_to_list}},
                            [{var,{323,47},'Bin'}]}},
                    {debug_line,324,196},
                    {match,
                        {324,13},
                        {var,{324,13},'Res'},
                        {'try',
                            {324,19},
                            [{debug_line,325,197},
                             {call,
                                 {325,23},
                                 {remote,
                                     {325,23},
                                     {atom,{325,23},erlang},
                                     {atom,{325,23},list_to_atom}},
                                 [{var,{325,36},'List'}]}],
                            [],
                            [{clause,
                                 {327,23},
                                 [{tuple,
                                      {327,23},
                                      [{var,{327,23},'_'},
                                       {var,{327,25},'_'},
                                       {var,{327,25},'_'}]}],
                                 [],
                                 [{debug_line,328,198},{nil,{328,27}}]}],
                            []}}]},
               {clause,
                   {330,9},
                   [],
                   [[{atom,{330,9},true}]],
                   [{debug_line,331,199},{var,{331,13},'Res'}]}]}]}]}.
{function,
    {333,1},
    thing_to_existing_atom,1,
    [{clause,
         {333,1},
         [{var,{333,1},'_'}],
         [[{call,
               {333,1},
               {remote,
                   {333,1},
                   {atom,{333,1},fake},
                   {atom,{333,1},is_beam_bif_info}},
               []}]],
         [{debug_line,333,200},{atom,{333,1},ignore}]},
     {clause,
         {333,1},
         [{var,{333,24},'Bin0'}],
         [],
         [{debug_line,334,201},
          {match,
              {334,5},
              {var,{334,5},'Bin'},
              {call,{334,11},{atom,{334,11},id},[{var,{334,14},'Bin0'}]}},
          {debug_line,335,202},
          {match,
              {335,5},
              {var,{335,5},'Res'},
              {'try',
                  {335,11},
                  [{debug_line,336,203},
                   {call,
                       {336,15},
                       {remote,
                           {336,15},
                           {atom,{336,15},erlang},
                           {atom,{336,15},binary_to_existing_atom}},
                       [{var,{336,39},'Bin'}]}],
                  [],
                  [{clause,
                       {338,15},
                       [{tuple,
                            {338,15},
                            [{var,{338,15},'_'},
                             {var,{338,17},'_'},
                             {var,{338,17},'_'}]}],
                       [],
                       [{debug_line,339,204},{nil,{339,19}}]}],
                  []}},
          {debug_line,341,205},
          {match,
              {341,5},
              {var,{341,5},'Res'},
              {'try',
                  {341,11},
                  [{debug_line,342,206},
                   {call,
                       {342,15},
                       {remote,
                           {342,15},
                           {atom,{342,15},erlang},
                           {atom,{342,15},binary_to_existing_atom}},
                       [{var,{342,39},'Bin'},{atom,{342,44},utf8}]}],
                  [],
                  [{clause,
                       {344,15},
                       [{tuple,
                            {344,15},
                            [{var,{344,15},'_'},
                             {var,{344,17},'_'},
                             {var,{344,17},'_'}]}],
                       [],
                       [{debug_line,345,207},{nil,{345,19}}]}],
                  []}},
          {debug_line,347,208},
          {'if',
              {347,5},
              [{clause,
                   {348,9},
                   [],
                   [[{call,
                         {348,9},
                         {remote,
                             {348,9},
                             {atom,{348,9},erlang},
                             {atom,{348,9},is_atom}},
                         [{var,{348,17},'Res'}]}]],
                   [{debug_line,349,209},
                    {match,
                        {349,13},
                        {var,{349,13},'List'},
                        {call,
                            {349,20},
                            {remote,
                                {349,27},
                                {atom,{349,20},unicode},
                                {atom,{349,28},characters_to_list}},
                            [{var,{349,47},'Bin'}]}},
                    {debug_line,350,210},
                    {match,
                        {350,13},
                        {var,{350,13},'Res'},
                        {'try',
                            {350,19},
                            [{debug_line,351,211},
                             {call,
                                 {351,23},
                                 {remote,
                                     {351,23},
                                     {atom,{351,23},erlang},
                                     {atom,{351,23},list_to_existing_atom}},
                                 [{var,{351,45},'List'}]}],
                            [],
                            [{clause,
                                 {353,23},
                                 [{tuple,
                                      {353,23},
                                      [{var,{353,23},'_'},
                                       {var,{353,25},'_'},
                                       {var,{353,25},'_'}]}],
                                 [],
                                 [{debug_line,354,212},{nil,{354,27}}]}],
                            []}}]},
               {clause,
                   {356,9},
                   [],
                   [[{atom,{356,9},true}]],
                   [{debug_line,357,213},{var,{357,13},'Res'}]}]}]}]}.
{function,{364,1},
          id,1,
          [{clause,{364,1},
                   [{var,{364,1},'_'}],
                   [[{call,{364,1},
                           {remote,{364,1},
                                   {atom,{364,1},fake},
                                   {atom,{364,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,364,214},{atom,{364,1},ignore}]},
           {clause,{364,1},
                   [{var,{364,4},'I'}],
                   [],
                   [{debug_line,365,215},{var,{365,5},'I'}]}]}.
{eof,{366,1}}.
