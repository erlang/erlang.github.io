module core_fold_SUITE.
exports [{all,0},
         {append,1},
         {bifs,1},
         {configuration,1},
         {cover_letrec_effect,1},
         {coverage,1},
         {empty_values,1},
         {end_per_group,2},
         {end_per_suite,1},
         {eq,1},
         {export_from_case,1},
         {foo,0},
         {foo,1},
         {foo,2},
         {foo,3},
         {groups,0},
         {guard_try_catch,1},
         {init_per_group,2},
         {init_per_suite,1},
         {map_effect,1},
         {mixed_matching_clauses,1},
         {module_info,0},
         {module_info,1},
         {multiple_aliases,1},
         {nested_call_in_case,1},
         {nested_lets,1},
         {no_no_file,1},
         {receive_effect,1},
         {redundant_boolean_clauses,1},
         {redundant_stack_frame,1},
         {setelement,1},
         {suite,0},
         {supplies,1},
         {t_apply,1},
         {t_element,1},
         {t_length,1},
         {unnecessary_building,1},
         {unused_multiple_values,1},
         {unused_multiple_values_error,1}].
attributes [].

%% core_fold_SUITE.erl:39
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% core_fold_SUITE.erl:41
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% core_fold_SUITE.erl:44
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`groups`() {
0:
  %% Result type:
  %%    nonempty_list({'p', nonempty_list('parallel'), nonempty_list(atom())})
  ret `[{p,[parallel],
     [t_element,setelement,t_length,append,t_apply,bifs,eq,
      nested_call_in_case,guard_try_catch,coverage,
      unused_multiple_values_error,unused_multiple_values,multiple_aliases,
      redundant_boolean_clauses,mixed_matching_clauses,unnecessary_building,
      no_no_file,configuration,supplies,redundant_stack_frame,
      export_from_case,empty_values,cover_letrec_effect,receive_effect,
      nested_lets,map_effect]}]`
}

%% core_fold_SUITE.erl:57
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`init_per_suite`(_0) {
0:
  %% core_fold_SUITE.erl:58
  _2 = call (`test_lib`:`recompile`/1), `core_fold_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:61
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_fold_SUITE.erl:64
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% core_fold_SUITE.erl:67
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% core_fold_SUITE.erl:71
%% Counter = 557
%% bs_ensure_opt: true
function `core_fold_SUITE`:`t_element`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _147 = bif:is_list _0
  br _147, ^147, ^146

147:
  %% core_fold_SUITE.erl:72
  X = call (`erlang`:`make_ref`/0)

  %% core_fold_SUITE.erl:73
  %% Aliased:
  %%    X
  _58 = call (`id`/1), X

  %% Aliased:
  %%    _58
  _150 = succeeded:body _58
  br _150, ^150, ^1

150:
  %% Argument types:
  %%    X => reference()
  %% Aliased:
  %%    _58
  %% Unique:
  %%    X
  _153 = bif:'=:=' _58, X
  br _153, ^153, ^152

153:
  %% core_fold_SUITE.erl:74
  _59 = call (`id`/1), `b`

  %% Aliased:
  %%    _59
  _154 = succeeded:body _59
  br _154, ^154, ^1

154:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _416 = bif:'=:=' _59, `b`
  br _416, ^415, ^156

415:
  %% core_fold_SUITE.erl:76
  %% Aliased:
  %%    X
  _6 = put_map `assoc`, `#{}`, `k`, X

  %% core_fold_SUITE.erl:78
  %% Aliased:
  %%    _6
  _64 = call (`id`/1), _6

  %% Aliased:
  %%    _64
  _162 = succeeded:body _64
  br _162, ^162, ^1

162:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _167 = bif:is_map _64
  br _167, ^167, ^164

167:
  %% Argument types:
  %%    _64 => map()
  %% Aliased:
  %%    _64
  _65 = get_map_element _64, `k`

  %% Aliased:
  %%    _65
  _165 = succeeded:guard _65
  br _165, ^165, ^164

165:
  %% Argument types:
  %%    X => reference()
  %% Aliased:
  %%    _65
  %% Unique:
  %%    X
  _166 = bif:'=:=' _65, X
  br _166, ^157, ^164

157:
  %% core_fold_SUITE.erl:83
  _66 = call (`id`/1), `{x,y,z}`

  %% Aliased:
  %%    _66
  _177 = succeeded:body _66
  br _177, ^177, ^1

177:
  %% core_fold_SUITE.erl:84
  Pos = call (`id`/1), `3`

  %% Aliased:
  %%    Pos
  _178 = succeeded:body Pos
  br _178, ^178, ^1

178:
  %% core_fold_SUITE.erl:85
  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _13 = bif:element `1`, _66

  %% Aliased:
  %%    _13
  _179 = succeeded:body _13
  br _179, ^179, ^1

179:
  %% core_fold_SUITE.erl:85
  %% Aliased:
  %%    _13
  _67 = call (`id`/1), _13

  %% Aliased:
  %%    _67
  _180 = succeeded:body _67
  br _180, ^180, ^1

180:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _413 = bif:'=:=' _67, `x`
  br _413, ^412, ^182

412:
  %% core_fold_SUITE.erl:86
  %% Argument types:
  %%    
  %% Aliased:
  %%    Pos
  _15 = bif:element Pos, `{a,b,c,d}`

  %% Aliased:
  %%    _15
  _183 = succeeded:body _15
  br _183, ^183, ^1

183:
  %% core_fold_SUITE.erl:86
  %% Aliased:
  %%    _15
  _68 = call (`id`/1), _15

  %% Aliased:
  %%    _68
  _184 = succeeded:body _68
  br _184, ^184, ^1

184:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _410 = bif:'=:=' _68, `c`
  br _410, ^409, ^186

409:
  %% Argument types:
  %%    X => reference()
  %% Unique:
  %%    X
  _69 = put_tuple `a`, `b`, X, `d`

  %% core_fold_SUITE.erl:87
  %% Argument types:
  %%    Pos => 1..16777215
  %%    _69 => {'a', 'b', reference(), 'd'}
  %% Aliased:
  %%    _69, 
  %%    Pos
  _17 = bif:element Pos, _69

  %% Aliased:
  %%    _17
  _187 = succeeded:body _17
  br _187, ^187, ^1

187:
  %% core_fold_SUITE.erl:87
  %% Aliased:
  %%    _17
  _70 = call (`id`/1), _17

  %% Aliased:
  %%    _70
  _188 = succeeded:body _70
  br _188, ^188, ^1

188:
  %% Argument types:
  %%    X => reference()
  %% Aliased:
  %%    _70
  %% Unique:
  %%    X
  _191 = bif:'=:=' _70, X
  br _191, ^191, ^190

191:
  %% core_fold_SUITE.erl:88
  %% Argument types:
  %%    Pos => 1..16777215
  %%    _66 => {any(), ...}
  %% Aliased:
  %%    _66, 
  %%    Pos
  _19 = bif:element Pos, _66

  %% Aliased:
  %%    _19
  _192 = succeeded:body _19
  br _192, ^192, ^1

192:
  %% core_fold_SUITE.erl:88
  %% Aliased:
  %%    _19
  _71 = call (`id`/1), _19

  %% Aliased:
  %%    _71
  _193 = succeeded:body _71
  br _193, ^193, ^1

193:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _406 = bif:'=:=' _71, `z`
  br _406, ^545, ^195

545:
  br ^553

553:
  _199 = new_try_tag `'catch'`
  br _199, ^197, ^198

197:
  %% core_fold_SUITE.erl:91
  %% Argument types:
  %%    
  _113 = bif:element `5`, `{a,b,c,d}`

  %% Unique:
  %%    _113
  _201 = succeeded:body _113
  br ^198

198:
  %% Unique:
  %%    _199
  _204 = landingpad `'catch'`, _199

  %% Aliased:
  %%    _204
  _202 = extract _204, `0`
  br ^196

196:
  %% Aliased:
  %%    _202
  %% Unique:
  %%    _199
  _21 = catch_end _199, _202

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _401 = is_tagged_tuple _21, `2`, `'EXIT'`
  br _401, ^398, ^207

398:
  %% Argument types:
  %%    _21 => {''EXIT'', any()}
  %% Aliased:
  %%    _21
  _72 = get_tuple_element _21, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _395 = is_tagged_tuple _72, `2`, `badarg`
  br _395, ^392, ^207

392:
  %% Argument types:
  %%    X => reference()
  %% Unique:
  %%    X
  _76 = put_tuple `a`, `b`, X, `d`
  _211 = new_try_tag `'catch'`
  br _211, ^422, ^210

422:
  %% core_fold_SUITE.erl:92
  %% Argument types:
  %%    _76 => {'a', 'b', reference(), 'd'}
  %% Unique:
  %%    _76
  _115 = bif:element `5`, _76

  %% Aliased:
  %%    _115
  _213 = succeeded:body _115
  br ^210

210:
  %% Unique:
  %%    _211
  _216 = landingpad `'catch'`, _211

  %% Aliased:
  %%    _216
  _214 = extract _216, `0`
  br ^208

208:
  %% Aliased:
  %%    _214
  %% Unique:
  %%    _211
  _23 = catch_end _211, _214

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _388 = is_tagged_tuple _23, `2`, `'EXIT'`
  br _388, ^385, ^219

385:
  %% Argument types:
  %%    _23 => {''EXIT'', any()}
  %% Aliased:
  %%    _23
  _77 = get_tuple_element _23, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _382 = is_tagged_tuple _77, `2`, `badarg`
  br _382, ^379, ^219

379:
  %% Argument types:
  %%    X => reference()
  %% Unique:
  %%    X
  _81 = put_tuple `a`, `b`, X, `d`
  _223 = new_try_tag `'catch'`
  br _223, ^423, ^222

423:
  %% core_fold_SUITE.erl:93
  %% Argument types:
  %%    _81 => {'a', 'b', reference(), 'd'}
  %% Aliased:
  %%    _81
  _117 = bif:element `5.0`, _81

  %% Aliased:
  %%    _117
  _225 = succeeded:body _117
  br ^222

222:
  %% Unique:
  %%    _223
  _228 = landingpad `'catch'`, _223

  %% Aliased:
  %%    _228
  _226 = extract _228, `0`
  br ^220

220:
  %% Aliased:
  %%    _226
  %% Unique:
  %%    _223
  _25 = catch_end _223, _226

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _375 = is_tagged_tuple _25, `2`, `'EXIT'`
  br _375, ^372, ^231

372:
  %% Argument types:
  %%    _25 => {''EXIT'', any()}
  %% Aliased:
  %%    _25
  _82 = get_tuple_element _25, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _82
  _369 = is_tagged_tuple _82, `2`, `badarg`
  br _369, ^548, ^231

548:
  br ^554

554:
  _235 = new_try_tag `'catch'`
  br _235, ^233, ^234

233:
  %% core_fold_SUITE.erl:94
  %% Argument types:
  %%    
  _119 = bif:element `2`, `not_a_tuple`

  %% Unique:
  %%    _119
  _237 = succeeded:body _119
  br ^234

234:
  %% Unique:
  %%    _235
  _240 = landingpad `'catch'`, _235

  %% Aliased:
  %%    _240
  _238 = extract _240, `0`
  br ^232

232:
  %% Aliased:
  %%    _238
  %% Unique:
  %%    _235
  _27 = catch_end _235, _238

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _362 = is_tagged_tuple _27, `2`, `'EXIT'`
  br _362, ^359, ^243

359:
  %% Argument types:
  %%    _27 => {''EXIT'', any()}
  %% Aliased:
  %%    _27
  _86 = get_tuple_element _27, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _86
  _356 = is_tagged_tuple _86, `2`, `badarg`
  br _356, ^549, ^243

549:
  br ^555

555:
  _247 = new_try_tag `'catch'`
  br _247, ^245, ^246

245:
  %% core_fold_SUITE.erl:95
  %% Argument types:
  %%    
  _121 = bif:element `2`, `[]`

  %% Unique:
  %%    _121
  _249 = succeeded:body _121
  br ^246

246:
  %% Unique:
  %%    _247
  _252 = landingpad `'catch'`, _247

  %% Aliased:
  %%    _252
  _250 = extract _252, `0`
  br ^244

244:
  %% Aliased:
  %%    _250
  %% Unique:
  %%    _247
  _29 = catch_end _247, _250

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _349 = is_tagged_tuple _29, `2`, `'EXIT'`
  br _349, ^346, ^255

346:
  %% Argument types:
  %%    _29 => {''EXIT'', any()}
  %% Aliased:
  %%    _29
  _90 = get_tuple_element _29, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _90
  _343 = is_tagged_tuple _90, `2`, `badarg`
  br _343, ^340, ^255

340:
  %% core_fold_SUITE.erl:96
  %% Argument types:
  %%    _66 => {any(), ...}
  %% Aliased:
  %%    _66
  _31 = bif:'==' _66, `3`
  _259 = new_try_tag `'catch'`
  br _259, ^424, ^258

424:
  %% core_fold_SUITE.erl:96
  %% Argument types:
  %%    _31 => 'false' | 'true'
  %% Unique:
  %%    _31
  _123 = bif:element `2`, _31

  %% Aliased:
  %%    _123
  _261 = succeeded:body _123
  br ^258

258:
  %% Unique:
  %%    _259
  _264 = landingpad `'catch'`, _259

  %% Aliased:
  %%    _264
  _262 = extract _264, `0`
  br ^256

256:
  %% Aliased:
  %%    _262
  %% Unique:
  %%    _259
  _32 = catch_end _259, _262

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _336 = is_tagged_tuple _32, `2`, `'EXIT'`
  br _336, ^333, ^267

333:
  %% Argument types:
  %%    _32 => {''EXIT'', any()}
  %% Aliased:
  %%    _32
  _94 = get_tuple_element _32, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _94
  _330 = is_tagged_tuple _94, `2`, `badarg`
  br _330, ^327, ^267

327:
  %% core_fold_SUITE.erl:97
  _98 = call (`id`/1), `{a,b,c}`

  %% Aliased:
  %%    _98
  _268 = succeeded:body _98
  br _268, ^268, ^1

268:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _98
  _297 = bif:is_tuple _98
  br _297, ^297, ^270

297:
  %% Argument types:
  %%    _98 => {...}
  %% Aliased:
  %%    _98
  _298 = bif:tuple_size _98

  %% Argument types:
  %%    _298 => 0..16777215
  %% Unique:
  %%    _298
  _299 = bif:'=:=' _298, `3`
  br _299, ^551, ^270

551:
  br ^556

556:
  _274 = new_try_tag `'catch'`
  br _274, ^272, ^273

272:
  %% core_fold_SUITE.erl:99
  %% Argument types:
  %%    _98 => {any(), any(), any()}
  %% Aliased:
  %%    _98
  _125 = bif:element `4`, _98

  %% Aliased:
  %%    _125
  _276 = succeeded:body _125
  br ^273

273:
  %% Unique:
  %%    _274
  _279 = landingpad `'catch'`, _274

  %% Aliased:
  %%    _279
  _277 = extract _279, `0`
  br ^271

271:
  %% Aliased:
  %%    _277
  %% Unique:
  %%    _274
  _34 = catch_end _274, _277

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _292 = is_tagged_tuple _34, `2`, `'EXIT'`
  br _292, ^289, ^282

289:
  %% Argument types:
  %%    _34 => {''EXIT'', any()}
  %% Aliased:
  %%    _34
  _102 = get_tuple_element _34, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _102
  _286 = is_tagged_tuple _102, `2`, `badarg`
  br _286, ^269, ^282

269:
  %% core_fold_SUITE.erl:101
  %% Argument types:
  %%    _66 => {any(), ...}
  %% Aliased:
  %%    _66
  _37 = bif:tuple_size _66
  _304 = new_try_tag `'catch'`
  br _304, ^306, ^303

306:
  %% core_fold_SUITE.erl:101
  %% Argument types:
  %%    _37 => 1..16777215
  %% Unique:
  %%    _37
  _129 = bif:element `1`, _37

  %% Aliased:
  %%    _129
  _307 = succeeded:body _129
  br ^303

303:
  %% Unique:
  %%    _304
  _310 = landingpad `'catch'`, _304

  %% Aliased:
  %%    _310
  _308 = extract _310, `0`
  br ^301

301:
  %% Aliased:
  %%    _308
  %% Unique:
  %%    _304
  _38 = catch_end _304, _308

  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _323 = is_tagged_tuple _38, `2`, `'EXIT'`
  br _323, ^320, ^313

320:
  %% Argument types:
  %%    _38 => {''EXIT'', any()}
  %% Aliased:
  %%    _38
  _106 = get_tuple_element _38, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _106
  _317 = is_tagged_tuple _106, `2`, `badarg`
  br _317, ^314, ^313

314:
  %% Result type:
  %%    'ok'
  ret `ok`

313:
  %% core_fold_SUITE.erl:101
  %% Aliased:
  %%    _38
  _130 = match_fail `badmatch`, _38

  %% Unique:
  %%    _130
  _326 = succeeded:body _130
  br ^1

282:
  %% core_fold_SUITE.erl:99
  %% Aliased:
  %%    _34
  _126 = match_fail `badmatch`, _34

  %% Unique:
  %%    _126
  _295 = succeeded:body _126
  br ^1

270:
  %% core_fold_SUITE.erl:97
  %% Aliased:
  %%    _98
  _127 = match_fail `case_clause`, _98

  %% Unique:
  %%    _127
  _300 = succeeded:body _127
  br ^1

267:
  %% core_fold_SUITE.erl:96
  %% Aliased:
  %%    _32
  _131 = match_fail `badmatch`, _32

  %% Unique:
  %%    _131
  _339 = succeeded:body _131
  br ^1

255:
  %% core_fold_SUITE.erl:95
  %% Aliased:
  %%    _29
  _132 = match_fail `badmatch`, _29

  %% Unique:
  %%    _132
  _352 = succeeded:body _132
  br ^1

243:
  %% core_fold_SUITE.erl:94
  %% Aliased:
  %%    _27
  _133 = match_fail `badmatch`, _27

  %% Unique:
  %%    _133
  _365 = succeeded:body _133
  br ^1

231:
  %% core_fold_SUITE.erl:93
  %% Aliased:
  %%    _25
  _134 = match_fail `badmatch`, _25

  %% Unique:
  %%    _134
  _378 = succeeded:body _134
  br ^1

219:
  %% core_fold_SUITE.erl:92
  %% Aliased:
  %%    _23
  _135 = match_fail `badmatch`, _23

  %% Unique:
  %%    _135
  _391 = succeeded:body _135
  br ^1

207:
  %% core_fold_SUITE.erl:91
  %% Aliased:
  %%    _21
  _136 = match_fail `badmatch`, _21

  %% Unique:
  %%    _136
  _404 = succeeded:body _136
  br ^1

195:
  %% core_fold_SUITE.erl:88
  %% Aliased:
  %%    _71
  _137 = match_fail `badmatch`, _71

  %% Unique:
  %%    _137
  _407 = succeeded:body _137
  br ^1

190:
  %% core_fold_SUITE.erl:87
  %% Aliased:
  %%    _70
  _138 = match_fail `badmatch`, _70

  %% Unique:
  %%    _138
  _408 = succeeded:body _138
  br ^1

186:
  %% core_fold_SUITE.erl:86
  %% Aliased:
  %%    _68
  _139 = match_fail `badmatch`, _68

  %% Unique:
  %%    _139
  _411 = succeeded:body _139
  br ^1

182:
  %% core_fold_SUITE.erl:85
  %% Aliased:
  %%    _67
  _140 = match_fail `badmatch`, _67

  %% Unique:
  %%    _140
  _414 = succeeded:body _140
  br ^1

164:
  %% core_fold_SUITE.erl:78
  %% Aliased:
  %%    _64
  _110 = match_fail `badmatch`, _64

  %% Unique:
  %%    _110
  _168 = succeeded:body _110
  br ^1

156:
  %% core_fold_SUITE.erl:74
  %% Aliased:
  %%    _59
  _141 = match_fail `badmatch`, _59

  %% Unique:
  %%    _141
  _417 = succeeded:body _141
  br ^1

152:
  %% core_fold_SUITE.erl:73
  %% Aliased:
  %%    _58
  _142 = match_fail `badmatch`, _58

  %% Unique:
  %%    _142
  _418 = succeeded:body _142
  br ^1

146:
  %% core_fold_SUITE.erl:71
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-t_element/1-',1}}
  _143 = match_fail `function_clause`, _0

  %% Unique:
  %%    _143
  _419 = succeeded:body _143
  br ^1

1:
  _144 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _144
}

%% core_fold_SUITE.erl:105
%% Counter = 264
%% bs_ensure_opt: true
function `core_fold_SUITE`:`setelement`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _77 = bif:is_list _0
  br _77, ^77, ^76

77:
  %% core_fold_SUITE.erl:106
  X = call (`id`/1), `b`

  %% Aliased:
  %%    X
  _78 = succeeded:body X
  br _78, ^78, ^1

78:
  %% core_fold_SUITE.erl:107
  New = call (`id`/1), `[1,2,3]`

  %% Aliased:
  %%    New
  _79 = succeeded:body New
  br _79, ^79, ^1

79:
  %% core_fold_SUITE.erl:108
  _30 = call (`id`/1), `{y,b,c}`

  %% Aliased:
  %%    _30
  _80 = succeeded:body _30
  br _80, ^80, ^1

80:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _206 = bif:'=:=' _30, `{y,b,c}`
  br _206, ^209, ^82

209:
  %% Argument types:
  %%    
  %% Aliased:
  %%    X
  _5 = put_tuple `y`, X, `c`

  %% core_fold_SUITE.erl:109
  %% Unique:
  %%    _5
  _32 = call (`id`/1), _5

  %% Aliased:
  %%    _32
  _84 = succeeded:body _32
  br _84, ^84, ^1

84:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _204 = bif:'=:=' _32, `{y,b,c}`
  br _204, ^87, ^86

87:
  %% core_fold_SUITE.erl:110
  _34 = call (`id`/1), `{a,y,c}`

  %% Aliased:
  %%    _34
  _88 = succeeded:body _34
  br _88, ^88, ^1

88:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _202 = bif:'=:=' _34, `{a,y,c}`
  br _202, ^202, ^90

202:
  %% core_fold_SUITE.erl:111
  %% Argument types:
  %%    
  %% Aliased:
  %%    New
  _9 = put_tuple `a`, New, `c`

  %% core_fold_SUITE.erl:111
  %% Unique:
  %%    _9
  _35 = call (`id`/1), _9

  %% Aliased:
  %%    _35
  _92 = succeeded:body _35
  br _92, ^92, ^1

92:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _200 = bif:'=:=' _35, `{a,[1,2,3],c}`
  br _200, ^211, ^94

211:
  %% Argument types:
  %%    
  %% Aliased:
  %%    New
  _11 = put_tuple `a`, New, `c`

  %% core_fold_SUITE.erl:112
  %% Unique:
  %%    _11
  _37 = call (`id`/1), _11

  %% Aliased:
  %%    _37
  _96 = succeeded:body _37
  br _96, ^96, ^1

96:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _198 = bif:'=:=' _37, `{a,[1,2,3],c}`
  br _198, ^198, ^98

198:
  %% core_fold_SUITE.erl:113
  %% Argument types:
  %%    
  %% Aliased:
  %%    New
  _13 = put_tuple `a`, `b`, New

  %% core_fold_SUITE.erl:113
  %% Unique:
  %%    _13
  _38 = call (`id`/1), _13

  %% Aliased:
  %%    _38
  _100 = succeeded:body _38
  br _100, ^100, ^1

100:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _196 = bif:'=:=' _38, `{a,b,[1,2,3]}`
  br _196, ^212, ^102

212:
  %% Argument types:
  %%    
  %% Aliased:
  %%    New, 
  %%    X
  _15 = put_tuple `a`, X, New

  %% core_fold_SUITE.erl:114
  %% Unique:
  %%    _15
  _40 = call (`id`/1), _15

  %% Aliased:
  %%    _40
  _104 = succeeded:body _40
  br _104, ^104, ^1

104:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _194 = bif:'=:=' _40, `{a,b,[1,2,3]}`
  br _194, ^194, ^106

194:
  %% core_fold_SUITE.erl:116
  _17 = call (`erlang`:`make_tuple`/2), `5`, `x`

  %% Aliased:
  %%    _17
  _107 = succeeded:body _17
  br _107, ^107, ^1

107:
  %% core_fold_SUITE.erl:116
  %% Result type:
  %%    {{'d', 'c', 'b', 'a', ...}, {'z', 'c', 'b', 'a', ...}}
  %% Aliased:
  %%    _17
  _41 = call (`setelement_cover`/1), _17

  %% Unique:
  %%    _41
  _108 = succeeded:body _41
  br _108, ^108, ^1

108:
  %% Argument types:
  %%    _41 => {{'d', 'c', 'b', 'a', ...}, {'z', 'c', 'b', 'a', ...}}
  %% Unique:
  %%    _41
  _192 = bif:'=:=' _41, `{{d,c,b,a,x},{z,c,b,a,x}}`
  br _192, ^258, ^110

258:
  br ^261

261:
  _114 = new_try_tag `'catch'`
  br _114, ^112, ^113

112:
  %% core_fold_SUITE.erl:118
  %% Result type:
  %%    {{'a', 'b', 'new', 'd', 'new', 'f'}, bitstring(8)}
  _56 = call (`setelement_crash`/1), `{a,b,c,d,e,f}`

  %% Unique:
  %%    _56
  _116 = succeeded:body _56
  br _116, ^116, ^113

116:
  br ^111

113:
  %% Unique:
  %%    _114
  _119 = landingpad `'catch'`, _114

  %% Aliased:
  %%    _119
  _117 = extract _119, `0`
  br ^111

111:
  _120 = phi { _117, ^113 }, { _56, ^116 }

  %% Aliased:
  %%    _120
  %% Unique:
  %%    _114
  _19 = catch_end _114, _120

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _188 = is_tagged_tuple _19, `2`, `'EXIT'`
  br _188, ^185, ^122

185:
  %% Argument types:
  %%    _19 => {''EXIT'', any()}
  %% Aliased:
  %%    _19
  _42 = get_tuple_element _19, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _182 = is_tagged_tuple _42, `2`, `badarg`
  br _182, ^179, ^122

179:
  %% core_fold_SUITE.erl:119
  %% Result type:
  %%    'error'
  _46 = call (`setelement_crash_2`/2), `{a,b,c,d,e,f}`, `<<"*">>`

  %% Unique:
  %%    _46
  _123 = succeeded:body _46
  br _123, ^259, ^1

259:
  br ^262

262:
  _129 = new_try_tag `'catch'`
  br _129, ^127, ^128

127:
  %% core_fold_SUITE.erl:121
  %% Aliased:
  %%    New
  _58 = update_tuple `not_a_tuple`, `1`, New

  %% Aliased:
  %%    _58
  _131 = succeeded:body _58
  br ^128

128:
  %% Unique:
  %%    _129
  _134 = landingpad `'catch'`, _129

  %% Aliased:
  %%    _134
  _132 = extract _134, `0`
  br ^126

126:
  %% Aliased:
  %%    _132
  %% Unique:
  %%    _129
  _22 = catch_end _129, _132

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _172 = is_tagged_tuple _22, `2`, `'EXIT'`
  br _172, ^169, ^137

169:
  %% Argument types:
  %%    _22 => {''EXIT'', any()}
  %% Aliased:
  %%    _22
  _47 = get_tuple_element _22, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _166 = is_tagged_tuple _47, `2`, `badarg`
  br _166, ^260, ^137

260:
  br ^263

263:
  _141 = new_try_tag `'catch'`
  br _141, ^139, ^140

139:
  %% core_fold_SUITE.erl:122
  %% Aliased:
  %%    New
  _60 = update_tuple `{a,b}`, `3`, New

  %% Aliased:
  %%    _60
  _143 = succeeded:body _60
  br ^140

140:
  %% Unique:
  %%    _141
  _146 = landingpad `'catch'`, _141

  %% Aliased:
  %%    _146
  _144 = extract _146, `0`
  br ^138

138:
  %% Aliased:
  %%    _144
  %% Unique:
  %%    _141
  _24 = catch_end _141, _144

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _159 = is_tagged_tuple _24, `2`, `'EXIT'`
  br _159, ^156, ^149

156:
  %% Argument types:
  %%    _24 => {''EXIT'', any()}
  %% Aliased:
  %%    _24
  _51 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _153 = is_tagged_tuple _51, `2`, `badarg`
  br _153, ^150, ^149

150:
  %% Result type:
  %%    'ok'
  ret `ok`

149:
  %% core_fold_SUITE.erl:122
  %% Aliased:
  %%    _24
  _61 = match_fail `badmatch`, _24

  %% Unique:
  %%    _61
  _162 = succeeded:body _61
  br ^1

137:
  %% core_fold_SUITE.erl:121
  %% Aliased:
  %%    _22
  _62 = match_fail `badmatch`, _22

  %% Unique:
  %%    _62
  _175 = succeeded:body _62
  br ^1

122:
  %% core_fold_SUITE.erl:118
  %% Aliased:
  %%    _19
  _64 = match_fail `badmatch`, _19

  %% Unique:
  %%    _64
  _191 = succeeded:body _64
  br ^1

110:
  %% core_fold_SUITE.erl:116
  %% Unique:
  %%    _41
  _65 = match_fail `badmatch`, _41

  %% Unique:
  %%    _65
  _193 = succeeded:body _65
  br ^1

106:
  %% core_fold_SUITE.erl:114
  %% Aliased:
  %%    _40
  _66 = match_fail `badmatch`, _40

  %% Unique:
  %%    _66
  _195 = succeeded:body _66
  br ^1

102:
  %% core_fold_SUITE.erl:113
  %% Aliased:
  %%    _38
  _67 = match_fail `badmatch`, _38

  %% Unique:
  %%    _67
  _197 = succeeded:body _67
  br ^1

98:
  %% core_fold_SUITE.erl:112
  %% Aliased:
  %%    _37
  _68 = match_fail `badmatch`, _37

  %% Unique:
  %%    _68
  _199 = succeeded:body _68
  br ^1

94:
  %% core_fold_SUITE.erl:111
  %% Aliased:
  %%    _35
  _69 = match_fail `badmatch`, _35

  %% Unique:
  %%    _69
  _201 = succeeded:body _69
  br ^1

90:
  %% core_fold_SUITE.erl:110
  %% Aliased:
  %%    _34
  _70 = match_fail `badmatch`, _34

  %% Unique:
  %%    _70
  _203 = succeeded:body _70
  br ^1

86:
  %% core_fold_SUITE.erl:109
  %% Aliased:
  %%    _32
  _71 = match_fail `badmatch`, _32

  %% Unique:
  %%    _71
  _205 = succeeded:body _71
  br ^1

82:
  %% core_fold_SUITE.erl:108
  %% Aliased:
  %%    _30
  _72 = match_fail `badmatch`, _30

  %% Unique:
  %%    _72
  _207 = succeeded:body _72
  br ^1

76:
  %% core_fold_SUITE.erl:105
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-setelement/1-',1}}
  _73 = match_fail `function_clause`, _0

  %% Unique:
  %%    _73
  _208 = succeeded:body _73
  br ^1

1:
  _74 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _74
}

%% core_fold_SUITE.erl:126
%% Counter = 10
%% bs_ensure_opt: true
function `core_fold_SUITE`:`setelement_cover`(_0) {
0:
  %% core_fold_SUITE.erl:127
  %% Aliased:
  %%    _0
  T1 = update_tuple _0, `4`, `a`

  %% Aliased:
  %%    T1
  _5 = succeeded:body T1
  br _5, ^5, ^1

5:
  %% core_fold_SUITE.erl:128
  %% Aliased:
  %%    _0
  T2 = update_tuple _0, `4`, `a`, `3`, `b`

  %% Aliased:
  %%    T2
  _6 = succeeded:body T2
  br _6, ^6, ^1

6:
  %% core_fold_SUITE.erl:129
  %% Aliased:
  %%    _0
  T3 = update_tuple _0, `4`, `a`, `3`, `b`, `2`, `c`

  %% Aliased:
  %%    T3
  _7 = succeeded:body T3
  br _7, ^7, ^1

7:
  %% core_fold_SUITE.erl:130
  %% Aliased:
  %%    _0
  T4 = update_tuple _0, `4`, `a`, `3`, `b`, `2`, `c`, `1`, `d`

  %% Aliased:
  %%    T4
  _8 = succeeded:body T4
  br _8, ^8, ^1

8:
  %% core_fold_SUITE.erl:131
  %% Aliased:
  %%    _0
  T5 = update_tuple _0, `4`, `a`, `3`, `b`, `2`, `c`, `1`, `z`

  %% Aliased:
  %%    T5
  _9 = succeeded:body T5
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    T4 => {'d', 'c', 'b', 'a', ...}
  %%    T5 => {'z', 'c', 'b', 'a', ...}
  %% Aliased:
  %%    T4, 
  %%    T5
  _2 = put_tuple T4, T5
  %% Result type:
  %%    {{'d', 'c', 'b', 'a', ...}, {'z', 'c', 'b', 'a', ...}}
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:134
%% Counter = 10
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b', 'c', 'd', 'e', 'f'}
function `core_fold_SUITE`:`setelement_crash`(_0) {
0:
  %% core_fold_SUITE.erl:139
  %% Argument types:
  %%    
  %% Anno: #{unit => 8}
  _3 = bs_create_bin `integer`, `[1,{segment,1}]`, `{a,b,c,d,new,f}`, `8`

  %% Aliased:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^9, ^1

9:
  %% Argument types:
  %%    _3 => bitstring(8)
  %% Aliased:
  %%    _3
  _4 = put_tuple `{a,b,new,d,new,f}`, _3
  %% Result type:
  %%    {{'a', 'b', 'new', 'd', 'new', 'f'}, bitstring(8)}
  %% Unique:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% core_fold_SUITE.erl:141
%% Counter = 22
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b', 'c', 'd', 'e', 'f'}
%%    _1 =>
%%     bitstring(8)
function `core_fold_SUITE`:`setelement_crash_2`(_0, _1) {
0:
  %% Result type:
  %%    'error'
  ret `error`
}

%% core_fold_SUITE.erl:151
%% Counter = 237
%% bs_ensure_opt: true
function `core_fold_SUITE`:`t_length`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _67 = bif:is_list _0
  br _67, ^67, ^66

67:
  %% core_fold_SUITE.erl:152
  Blurf = call (`id`/1), `{blurf,a,b}`

  %% Aliased:
  %%    Blurf
  _68 = succeeded:body Blurf
  br _68, ^68, ^1

68:
  %% core_fold_SUITE.erl:153
  Tail = call (`id`/1), `"*+,-"`

  %% Aliased:
  %%    Tail
  _69 = succeeded:body Tail
  br _69, ^69, ^1

69:
  %% core_fold_SUITE.erl:154
  _27 = call (`id`/1), `0`

  %% Aliased:
  %%    _27
  _70 = succeeded:body _27
  br _70, ^70, ^1

70:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _184 = bif:'=:=' _27, `0`
  br _184, ^183, ^72

183:
  %% core_fold_SUITE.erl:155
  _28 = call (`id`/1), `1`

  %% Aliased:
  %%    _28
  _73 = succeeded:body _28
  br _73, ^73, ^1

73:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _181 = bif:'=:=' _28, `1`
  br _181, ^180, ^75

180:
  %% core_fold_SUITE.erl:156
  _29 = call (`id`/1), `2`

  %% Aliased:
  %%    _29
  _76 = succeeded:body _29
  br _76, ^76, ^1

76:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _178 = bif:'=:=' _29, `2`
  br _178, ^177, ^78

177:
  %% core_fold_SUITE.erl:157
  _30 = call (`id`/1), `4`

  %% Aliased:
  %%    _30
  _79 = succeeded:body _30
  br _79, ^79, ^1

79:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _175 = bif:'=:=' _30, `4`
  br _175, ^174, ^81

174:
  %% core_fold_SUITE.erl:160
  %% Argument types:
  %%    
  %% Aliased:
  %%    Tail
  _31 = bif:length Tail

  %% Unique:
  %%    _31
  _82 = succeeded:body _31
  br _82, ^82, ^1

82:
  %% Argument types:
  %%    _31 => 0..288230376151711743
  %% Unique:
  %%    _31
  _172 = bif:'=:=' _31, `4`
  br _172, ^86, ^84

86:
  %% core_fold_SUITE.erl:161
  _33 = call (`id`/1), `5`

  %% Aliased:
  %%    _33
  _87 = succeeded:body _33
  br _87, ^87, ^1

87:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _169 = bif:'=:=' _33, `5`
  br _169, ^232, ^89

232:
  br ^235

235:
  _93 = new_try_tag `'catch'`
  br _93, ^91, ^92

91:
  %% core_fold_SUITE.erl:164
  %% Argument types:
  %%    
  _14 = bif:length `[a,b|c]`

  %% Unique:
  %%    _14
  _95 = succeeded:body _14
  br ^92

92:
  %% Unique:
  %%    _93
  _99 = landingpad `'catch'`, _93

  %% Aliased:
  %%    _99
  _97 = extract _99, `0`
  br ^90

90:
  %% Aliased:
  %%    _97
  %% Unique:
  %%    _93
  _15 = catch_end _93, _97

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _164 = is_tagged_tuple _15, `2`, `'EXIT'`
  br _164, ^161, ^102

161:
  %% Argument types:
  %%    _15 => {''EXIT'', any()}
  %% Aliased:
  %%    _15
  _34 = get_tuple_element _15, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _158 = is_tagged_tuple _34, `2`, `badarg`
  br _158, ^155, ^102

155:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Blurf
  _38 = put_list Blurf, `c`

  %% Argument types:
  %%    _38 => nonempty_improper_list(any(), 'c')
  %% Unique:
  %%    _38
  _39 = put_list `a`, _38
  _106 = new_try_tag `'catch'`
  br _106, ^104, ^105

104:
  %% core_fold_SUITE.erl:165
  %% Argument types:
  %%    _39 => nonempty_improper_list(any(), 'c')
  %% Unique:
  %%    _39
  _17 = bif:length _39

  %% Unique:
  %%    _17
  _108 = succeeded:body _17
  br ^105

105:
  %% Unique:
  %%    _106
  _112 = landingpad `'catch'`, _106

  %% Aliased:
  %%    _112
  _110 = extract _112, `0`
  br ^103

103:
  %% Aliased:
  %%    _110
  %% Unique:
  %%    _106
  _18 = catch_end _106, _110

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _151 = is_tagged_tuple _18, `2`, `'EXIT'`
  br _151, ^148, ^115

148:
  %% Argument types:
  %%    _18 => {''EXIT'', any()}
  %% Aliased:
  %%    _18
  _40 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _145 = is_tagged_tuple _40, `2`, `badarg`
  br _145, ^234, ^115

234:
  br ^236

236:
  _119 = new_try_tag `'catch'`
  br _119, ^117, ^118

117:
  %% core_fold_SUITE.erl:166
  %% Argument types:
  %%    
  _20 = bif:length `atom`

  %% Unique:
  %%    _20
  _121 = succeeded:body _20
  br ^118

118:
  %% Unique:
  %%    _119
  _125 = landingpad `'catch'`, _119

  %% Aliased:
  %%    _125
  _123 = extract _125, `0`
  br ^116

116:
  %% Aliased:
  %%    _123
  %% Unique:
  %%    _119
  _21 = catch_end _119, _123

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _138 = is_tagged_tuple _21, `2`, `'EXIT'`
  br _138, ^135, ^128

135:
  %% Argument types:
  %%    _21 => {''EXIT'', any()}
  %% Aliased:
  %%    _21
  _44 = get_tuple_element _21, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _132 = is_tagged_tuple _44, `2`, `badarg`
  br _132, ^129, ^128

129:
  %% Result type:
  %%    'ok'
  ret `ok`

128:
  %% core_fold_SUITE.erl:166
  %% Aliased:
  %%    _21
  _54 = match_fail `badmatch`, _21

  %% Unique:
  %%    _54
  _141 = succeeded:body _54
  br ^1

115:
  %% core_fold_SUITE.erl:165
  %% Aliased:
  %%    _18
  _55 = match_fail `badmatch`, _18

  %% Unique:
  %%    _55
  _154 = succeeded:body _55
  br ^1

102:
  %% core_fold_SUITE.erl:164
  %% Aliased:
  %%    _15
  _56 = match_fail `badmatch`, _15

  %% Unique:
  %%    _56
  _167 = succeeded:body _56
  br ^1

89:
  %% core_fold_SUITE.erl:161
  %% Aliased:
  %%    _33
  _57 = match_fail `badmatch`, _33

  %% Unique:
  %%    _57
  _170 = succeeded:body _57
  br ^1

84:
  %% core_fold_SUITE.erl:160
  %% Unique:
  %%    _31
  _58 = match_fail `badmatch`, _31

  %% Unique:
  %%    _58
  _173 = succeeded:body _58
  br ^1

81:
  %% core_fold_SUITE.erl:157
  %% Aliased:
  %%    _30
  _59 = match_fail `badmatch`, _30

  %% Unique:
  %%    _59
  _176 = succeeded:body _59
  br ^1

78:
  %% core_fold_SUITE.erl:156
  %% Aliased:
  %%    _29
  _60 = match_fail `badmatch`, _29

  %% Unique:
  %%    _60
  _179 = succeeded:body _60
  br ^1

75:
  %% core_fold_SUITE.erl:155
  %% Aliased:
  %%    _28
  _61 = match_fail `badmatch`, _28

  %% Unique:
  %%    _61
  _182 = succeeded:body _61
  br ^1

72:
  %% core_fold_SUITE.erl:154
  %% Aliased:
  %%    _27
  _62 = match_fail `badmatch`, _27

  %% Unique:
  %%    _62
  _185 = succeeded:body _62
  br ^1

66:
  %% core_fold_SUITE.erl:151
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-t_length/1-',1}}
  _63 = match_fail `function_clause`, _0

  %% Unique:
  %%    _63
  _186 = succeeded:body _63
  br ^1

1:
  _64 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _64
}

%% core_fold_SUITE.erl:176
%% Counter = 324
%% bs_ensure_opt: true
function `core_fold_SUITE`:`append`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _249 = bif:is_list _0
  br _249, ^249, ^248

249:
  %% core_fold_SUITE.erl:177
  A = call (`id`/1), `0`

  %% Aliased:
  %%    A
  _250 = succeeded:body A
  br _250, ^250, ^1

250:
  %% core_fold_SUITE.erl:178
  _165 = call (`erlang`:`append`/2), `[a,b,c,d,e,f]`, `[g,h,i,j,k]`

  %% Aliased:
  %%    _165
  _251 = succeeded:body _165
  br _251, ^251, ^1

251:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _165
  _254 = bif:'=:=' _165, `[a,b,c,d,e,f,g,h,i,j,k]`
  br _254, ^302, ^253

302:
  %% core_fold_SUITE.erl:178
  _166 = call (`id`/1), `[a,b,c,d,e,f,g,h,i,j,k]`

  %% Aliased:
  %%    _166
  _256 = succeeded:body _166
  br _256, ^256, ^1

256:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _166
  _299 = bif:'=:=' _166, `[a,b,c,d,e,f,g,h,i,j,k]`
  br _299, ^303, ^258

303:
  %% core_fold_SUITE.erl:179
  _20 = call (`id`/1), `[d,e]`

  %% Aliased:
  %%    _20
  _259 = succeeded:body _20
  br _259, ^259, ^1

259:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _170 = put_list `c`, _20

  %% Argument types:
  %%    _170 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _170
  _171 = put_list `b`, _170

  %% Argument types:
  %%    _171 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _171
  _21 = put_list `a`, _171

  %% core_fold_SUITE.erl:179
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Argument types:
  %%    (`'-append/1-fun-1-'`/1) => fun((_) -> nonempty_improper_list(any(), any()))
  %%    _21 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _21
  _22 = call (`'-append/1-fun-1-'`/1), _21

  %% Unique:
  %%    _22
  _260 = succeeded:body _22
  br _260, ^260, ^1

260:
  %% core_fold_SUITE.erl:179
  %% Unique:
  %%    _22
  _172 = call (`id`/1), _22

  %% Aliased:
  %%    _172
  _261 = succeeded:body _172
  br _261, ^261, ^1

261:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _172
  _297 = bif:'=:=' _172, `[a,b,c,d,e]`
  br _297, ^297, ^263

297:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _30 = put_list A, `[1,2,3,4,5,6]`

  %% core_fold_SUITE.erl:180
  %% Result type:
  %%    nonempty_list(any())
  %% Argument types:
  %%    (`'-append/1-fun-2-'`/2) => fun((_) -> nonempty_list(any()))
  %%    _30 => nonempty_list(any())
  %% Aliased:
  %%    A
  %% Unique:
  %%    _30
  _31 = call (`'-append/1-fun-2-'`/2), _30, A

  %% Unique:
  %%    _31
  _264 = succeeded:body _31
  br _264, ^264, ^1

264:
  %% core_fold_SUITE.erl:180
  %% Unique:
  %%    _31
  _175 = call (`id`/1), _31

  %% Aliased:
  %%    _175
  _265 = succeeded:body _175
  br _265, ^265, ^1

265:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _175
  _295 = bif:'=:=' _175, `[0,1,2,3,4,5,6]`
  br _295, ^295, ^267

295:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _202 = put_list A, `blurf`
  _271 = new_try_tag `'catch'`
  br _271, ^306, ^270

306:
  %% core_fold_SUITE.erl:181
  %% Unique:
  %%    _202
  _203 = call (`erlang`:`'++'`/2), _202, `[4,5,6]`

  %% Aliased:
  %%    _203
  _273 = succeeded:body _203
  br ^270

270:
  %% Unique:
  %%    _271
  _278 = landingpad `'catch'`, _271

  %% Aliased:
  %%    _278
  _276 = extract _278, `0`
  br ^268

268:
  %% Aliased:
  %%    _276
  %% Unique:
  %%    _271
  _41 = catch_end _271, _276

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _291 = is_tagged_tuple _41, `2`, `'EXIT'`
  br _291, ^288, ^281

288:
  %% Argument types:
  %%    _41 => {''EXIT'', any()}
  %% Aliased:
  %%    _41
  _223 = get_tuple_element _41, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _223
  _285 = is_tagged_tuple _223, `2`, `badarg`
  br _285, ^282, ^281

282:
  %% Result type:
  %%    'ok'
  ret `ok`

281:
  %% core_fold_SUITE.erl:181
  %% Aliased:
  %%    _41
  _241 = match_fail `badmatch`, _41

  %% Unique:
  %%    _241
  _294 = succeeded:body _241
  br ^1

267:
  %% core_fold_SUITE.erl:180
  %% Aliased:
  %%    _175
  _242 = match_fail `badmatch`, _175

  %% Unique:
  %%    _242
  _296 = succeeded:body _242
  br ^1

263:
  %% core_fold_SUITE.erl:179
  %% Aliased:
  %%    _172
  _243 = match_fail `badmatch`, _172

  %% Unique:
  %%    _243
  _298 = succeeded:body _243
  br ^1

258:
  %% core_fold_SUITE.erl:178
  %% Aliased:
  %%    _166
  _244 = match_fail `badmatch`, _166

  %% Unique:
  %%    _244
  _300 = succeeded:body _244
  br ^1

253:
  %% core_fold_SUITE.erl:178
  %% Aliased:
  %%    _165
  _227 = match_fail `badmatch`, _165

  %% Unique:
  %%    _227
  _255 = succeeded:body _227
  br ^1

248:
  %% core_fold_SUITE.erl:176
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-append/1-',1}}
  _245 = match_fail `function_clause`, _0

  %% Unique:
  %%    _245
  _301 = succeeded:body _245
  br ^1

1:
  _246 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _246
}

%% core_fold_SUITE.erl:184
%% Counter = 472
%% bs_ensure_opt: true
function `core_fold_SUITE`:`t_apply`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _111 = bif:is_list _0
  br _111, ^111, ^110

111:
  %% core_fold_SUITE.erl:185
  _38 = call (`core_fold_SUITE`:`foo`/0)

  %% Aliased:
  %%    _38
  _112 = succeeded:body _38
  br _112, ^112, ^1

112:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _350 = bif:'=:=' _38, `ok`
  br _350, ^349, ^114

349:
  %% core_fold_SUITE.erl:186
  _39 = call (`core_fold_SUITE`:`foo`/1), `3`

  %% Aliased:
  %%    _39
  _115 = succeeded:body _39
  br _115, ^115, ^1

115:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _347 = bif:'=:=' _39, `4`
  br _347, ^346, ^117

346:
  %% core_fold_SUITE.erl:187
  _40 = call (`core_fold_SUITE`:`foo`/2), `3`, `4`

  %% Aliased:
  %%    _40
  _118 = succeeded:body _40
  br _118, ^118, ^1

118:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _344 = bif:'=:=' _40, `7`
  br _344, ^343, ^120

343:
  %% core_fold_SUITE.erl:188
  _4 = call (`id`/1), `8`

  %% Aliased:
  %%    _4
  _121 = succeeded:body _4
  br _121, ^121, ^1

121:
  %% core_fold_SUITE.erl:188
  %% Aliased:
  %%    _4
  _41 = call (`core_fold_SUITE`:`foo`/2), _4, `4`

  %% Aliased:
  %%    _41
  _122 = succeeded:body _41
  br _122, ^122, ^1

122:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _341 = bif:'=:=' _41, `12`
  br _341, ^340, ^124

340:
  %% core_fold_SUITE.erl:189
  _6 = call (`id`/1), `9`

  %% Aliased:
  %%    _6
  _125 = succeeded:body _6
  br _125, ^125, ^1

125:
  %% core_fold_SUITE.erl:189
  %% Aliased:
  %%    _6
  _42 = call (`core_fold_SUITE`:`foo`/3), `8`, _6, `4`

  %% Aliased:
  %%    _42
  _126 = succeeded:body _42
  br _126, ^126, ^1

126:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _338 = bif:'=:=' _42, `21`
  br _338, ^337, ^128

337:
  %% core_fold_SUITE.erl:190
  _8 = call (`id`/1), `4`

  %% Aliased:
  %%    _8
  _129 = succeeded:body _8
  br _129, ^129, ^1

129:
  %% core_fold_SUITE.erl:190
  %% Aliased:
  %%    _8
  _43 = call (`core_fold_SUITE`:`foo`/3), `8`, `8`, _8

  %% Aliased:
  %%    _43
  _130 = succeeded:body _43
  br _130, ^130, ^1

130:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _335 = bif:'=:=' _43, `20`
  br _335, ^334, ^132

334:
  %% core_fold_SUITE.erl:191
  _10 = call (`id`/1), `10`

  %% Aliased:
  %%    _10
  _133 = succeeded:body _10
  br _133, ^133, ^1

133:
  %% core_fold_SUITE.erl:191
  %% Aliased:
  %%    _10
  _44 = call (`core_fold_SUITE`:`foo`/3), _10, `10`, `4`

  %% Aliased:
  %%    _44
  _134 = succeeded:body _44
  br _134, ^134, ^1

134:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _332 = bif:'=:=' _44, `24`
  br _332, ^331, ^136

331:
  %% core_fold_SUITE.erl:193
  M = call (`id`/1), `core_fold_SUITE`

  %% Aliased:
  %%    M
  _137 = succeeded:body M
  br _137, ^137, ^1

137:
  %% core_fold_SUITE.erl:194
  _45 = call (M:`foo`/0)

  %% Aliased:
  %%    _45
  _138 = succeeded:body _45
  br _138, ^138, ^1

138:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _329 = bif:'=:=' _45, `ok`
  br _329, ^328, ^140

328:
  %% core_fold_SUITE.erl:195
  _46 = call (M:`foo`/1), `3`

  %% Aliased:
  %%    _46
  _141 = succeeded:body _46
  br _141, ^141, ^1

141:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _46
  _326 = bif:'=:=' _46, `4`
  br _326, ^325, ^143

325:
  %% core_fold_SUITE.erl:196
  _47 = call (M:`foo`/2), `12.0`, `4`

  %% Aliased:
  %%    _47
  _144 = succeeded:body _47
  br _144, ^144, ^1

144:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _323 = bif:'=:=' _47, `16.0`
  br _323, ^458, ^146

458:
  br ^465

465:
  _150 = new_try_tag `'catch'`
  br _150, ^148, ^149

148:
  %% core_fold_SUITE.erl:199
  _77 = call (`erlang`:`apply`/3), `[a,b,c]`, `foo`, `[]`

  %% Aliased:
  %%    _77
  _152 = succeeded:body _77
  br _152, ^152, ^149

152:
  br ^147

149:
  %% Unique:
  %%    _150
  _155 = landingpad `'catch'`, _150

  %% Aliased:
  %%    _155
  _153 = extract _155, `0`
  br ^147

147:
  _156 = phi { _153, ^149 }, { _77, ^152 }

  %% Aliased:
  %%    _156
  %% Unique:
  %%    _150
  _16 = catch_end _150, _156

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _318 = is_tagged_tuple _16, `2`, `'EXIT'`
  br _318, ^315, ^158

315:
  %% Argument types:
  %%    _16 => {''EXIT'', any()}
  %% Aliased:
  %%    _16
  _48 = get_tuple_element _16, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _48
  _312 = is_tagged_tuple _48, `2`, `badarg`
  br _312, ^459, ^158

459:
  br ^466

466:
  _162 = new_try_tag `'catch'`
  br _162, ^160, ^161

160:
  %% core_fold_SUITE.erl:200
  _79 = call (`erlang`:`apply`/3), `42`, `foo`, `[]`

  %% Aliased:
  %%    _79
  _164 = succeeded:body _79
  br _164, ^164, ^161

164:
  br ^159

161:
  %% Unique:
  %%    _162
  _167 = landingpad `'catch'`, _162

  %% Aliased:
  %%    _167
  _165 = extract _167, `0`
  br ^159

159:
  _168 = phi { _165, ^161 }, { _79, ^164 }

  %% Aliased:
  %%    _168
  %% Unique:
  %%    _162
  _18 = catch_end _162, _168

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _305 = is_tagged_tuple _18, `2`, `'EXIT'`
  br _305, ^302, ^170

302:
  %% Argument types:
  %%    _18 => {''EXIT'', any()}
  %% Aliased:
  %%    _18
  _52 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _299 = is_tagged_tuple _52, `2`, `badarg`
  br _299, ^460, ^170

460:
  br ^467

467:
  _174 = new_try_tag `'catch'`
  br _174, ^172, ^173

172:
  %% core_fold_SUITE.erl:201
  _81 = call (`erlang`:`apply`/3), `core_fold_SUITE`, `45`, `[xx]`

  %% Aliased:
  %%    _81
  _176 = succeeded:body _81
  br _176, ^176, ^173

176:
  br ^171

173:
  %% Unique:
  %%    _174
  _179 = landingpad `'catch'`, _174

  %% Aliased:
  %%    _179
  _177 = extract _179, `0`
  br ^171

171:
  _180 = phi { _177, ^173 }, { _81, ^176 }

  %% Aliased:
  %%    _180
  %% Unique:
  %%    _174
  _20 = catch_end _174, _180

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _292 = is_tagged_tuple _20, `2`, `'EXIT'`
  br _292, ^289, ^182

289:
  %% Argument types:
  %%    _20 => {''EXIT'', any()}
  %% Aliased:
  %%    _20
  _56 = get_tuple_element _20, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _286 = is_tagged_tuple _56, `2`, `badarg`
  br _286, ^461, ^182

461:
  br ^468

468:
  _186 = new_try_tag `'catch'`
  br _186, ^184, ^185

184:
  %% core_fold_SUITE.erl:202
  _83 = call (`erlang`:`apply`/3), `core_fold_SUITE`, `foo`, `{a,b}`

  %% Aliased:
  %%    _83
  _188 = succeeded:body _83
  br _188, ^188, ^185

188:
  br ^183

185:
  %% Unique:
  %%    _186
  _191 = landingpad `'catch'`, _186

  %% Aliased:
  %%    _191
  _189 = extract _191, `0`
  br ^183

183:
  _192 = phi { _189, ^185 }, { _83, ^188 }

  %% Aliased:
  %%    _192
  %% Unique:
  %%    _186
  _22 = catch_end _186, _192

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _279 = is_tagged_tuple _22, `2`, `'EXIT'`
  br _279, ^276, ^194

276:
  %% Argument types:
  %%    _22 => {''EXIT'', any()}
  %% Aliased:
  %%    _22
  _60 = get_tuple_element _22, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _273 = is_tagged_tuple _60, `2`, `badarg`
  br _273, ^462, ^194

462:
  br ^469

469:
  _198 = new_try_tag `'catch'`
  br _198, ^196, ^197

196:
  %% core_fold_SUITE.erl:203
  %% Aliased:
  %%    M
  _85 = call (`erlang`:`apply`/3), M, M, `[1009|10010]`

  %% Aliased:
  %%    _85
  _200 = succeeded:body _85
  br _200, ^200, ^197

200:
  br ^195

197:
  %% Unique:
  %%    _198
  _203 = landingpad `'catch'`, _198

  %% Aliased:
  %%    _203
  _201 = extract _203, `0`
  br ^195

195:
  _204 = phi { _201, ^197 }, { _85, ^200 }

  %% Aliased:
  %%    _204
  %% Unique:
  %%    _198
  _24 = catch_end _198, _204

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _266 = is_tagged_tuple _24, `2`, `'EXIT'`
  br _266, ^263, ^206

263:
  %% Argument types:
  %%    _24 => {''EXIT'', any()}
  %% Aliased:
  %%    _24
  _64 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _64
  _260 = is_tagged_tuple _64, `2`, `badarg`
  br _260, ^463, ^206

463:
  br ^470

470:
  _210 = new_try_tag `'catch'`
  br _210, ^208, ^209

208:
  %% core_fold_SUITE.erl:204
  _87 = call (`erlang`:`apply`/3), `core_fold_SUITE`, `foo`, `[10000|9999]`

  %% Aliased:
  %%    _87
  _212 = succeeded:body _87
  br _212, ^212, ^209

212:
  br ^207

209:
  %% Unique:
  %%    _210
  _215 = landingpad `'catch'`, _210

  %% Aliased:
  %%    _215
  _213 = extract _215, `0`
  br ^207

207:
  _216 = phi { _213, ^209 }, { _87, ^212 }

  %% Aliased:
  %%    _216
  %% Unique:
  %%    _210
  _26 = catch_end _210, _216

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _253 = is_tagged_tuple _26, `2`, `'EXIT'`
  br _253, ^250, ^218

250:
  %% Argument types:
  %%    _26 => {''EXIT'', any()}
  %% Aliased:
  %%    _26
  _68 = get_tuple_element _26, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _247 = is_tagged_tuple _68, `2`, `badarg`
  br _247, ^464, ^218

464:
  br ^471

471:
  _222 = new_try_tag `'catch'`
  br _222, ^220, ^221

220:
  %% core_fold_SUITE.erl:205
  _89 = call (`erlang`:`apply`/3), `core_fold_SUITE`, `foo`, `a`

  %% Aliased:
  %%    _89
  _224 = succeeded:body _89
  br _224, ^224, ^221

224:
  br ^219

221:
  %% Unique:
  %%    _222
  _227 = landingpad `'catch'`, _222

  %% Aliased:
  %%    _227
  _225 = extract _227, `0`
  br ^219

219:
  _228 = phi { _225, ^221 }, { _89, ^224 }

  %% Aliased:
  %%    _228
  %% Unique:
  %%    _222
  _28 = catch_end _222, _228

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _240 = is_tagged_tuple _28, `2`, `'EXIT'`
  br _240, ^237, ^230

237:
  %% Argument types:
  %%    _28 => {''EXIT'', any()}
  %% Aliased:
  %%    _28
  _72 = get_tuple_element _28, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _234 = is_tagged_tuple _72, `2`, `badarg`
  br _234, ^231, ^230

231:
  %% Result type:
  %%    'ok'
  ret `ok`

230:
  %% core_fold_SUITE.erl:205
  %% Aliased:
  %%    _28
  _90 = match_fail `badmatch`, _28

  %% Unique:
  %%    _90
  _243 = succeeded:body _90
  br ^1

218:
  %% core_fold_SUITE.erl:204
  %% Aliased:
  %%    _26
  _91 = match_fail `badmatch`, _26

  %% Unique:
  %%    _91
  _256 = succeeded:body _91
  br ^1

206:
  %% core_fold_SUITE.erl:203
  %% Aliased:
  %%    _24
  _92 = match_fail `badmatch`, _24

  %% Unique:
  %%    _92
  _269 = succeeded:body _92
  br ^1

194:
  %% core_fold_SUITE.erl:202
  %% Aliased:
  %%    _22
  _93 = match_fail `badmatch`, _22

  %% Unique:
  %%    _93
  _282 = succeeded:body _93
  br ^1

182:
  %% core_fold_SUITE.erl:201
  %% Aliased:
  %%    _20
  _94 = match_fail `badmatch`, _20

  %% Unique:
  %%    _94
  _295 = succeeded:body _94
  br ^1

170:
  %% core_fold_SUITE.erl:200
  %% Aliased:
  %%    _18
  _95 = match_fail `badmatch`, _18

  %% Unique:
  %%    _95
  _308 = succeeded:body _95
  br ^1

158:
  %% core_fold_SUITE.erl:199
  %% Aliased:
  %%    _16
  _96 = match_fail `badmatch`, _16

  %% Unique:
  %%    _96
  _321 = succeeded:body _96
  br ^1

146:
  %% core_fold_SUITE.erl:196
  %% Aliased:
  %%    _47
  _97 = match_fail `badmatch`, _47

  %% Unique:
  %%    _97
  _324 = succeeded:body _97
  br ^1

143:
  %% core_fold_SUITE.erl:195
  %% Aliased:
  %%    _46
  _98 = match_fail `badmatch`, _46

  %% Unique:
  %%    _98
  _327 = succeeded:body _98
  br ^1

140:
  %% core_fold_SUITE.erl:194
  %% Aliased:
  %%    _45
  _99 = match_fail `badmatch`, _45

  %% Unique:
  %%    _99
  _330 = succeeded:body _99
  br ^1

136:
  %% core_fold_SUITE.erl:191
  %% Aliased:
  %%    _44
  _100 = match_fail `badmatch`, _44

  %% Unique:
  %%    _100
  _333 = succeeded:body _100
  br ^1

132:
  %% core_fold_SUITE.erl:190
  %% Aliased:
  %%    _43
  _101 = match_fail `badmatch`, _43

  %% Unique:
  %%    _101
  _336 = succeeded:body _101
  br ^1

128:
  %% core_fold_SUITE.erl:189
  %% Aliased:
  %%    _42
  _102 = match_fail `badmatch`, _42

  %% Unique:
  %%    _102
  _339 = succeeded:body _102
  br ^1

124:
  %% core_fold_SUITE.erl:188
  %% Aliased:
  %%    _41
  _103 = match_fail `badmatch`, _41

  %% Unique:
  %%    _103
  _342 = succeeded:body _103
  br ^1

120:
  %% core_fold_SUITE.erl:187
  %% Aliased:
  %%    _40
  _104 = match_fail `badmatch`, _40

  %% Unique:
  %%    _104
  _345 = succeeded:body _104
  br ^1

117:
  %% core_fold_SUITE.erl:186
  %% Aliased:
  %%    _39
  _105 = match_fail `badmatch`, _39

  %% Unique:
  %%    _105
  _348 = succeeded:body _105
  br ^1

114:
  %% core_fold_SUITE.erl:185
  %% Aliased:
  %%    _38
  _106 = match_fail `badmatch`, _38

  %% Unique:
  %%    _106
  _351 = succeeded:body _106
  br ^1

110:
  %% core_fold_SUITE.erl:184
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-t_apply/1-',1}}
  _107 = match_fail `function_clause`, _0

  %% Unique:
  %%    _107
  _352 = succeeded:body _107
  br ^1

1:
  _108 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _108
}

%% core_fold_SUITE.erl:209
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`foo`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_fold_SUITE.erl:212
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`foo`(_0) {
0:
  %% core_fold_SUITE.erl:213
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = bif:'+' _0, `1`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:215
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`foo`(_0, _1) {
0:
  %% core_fold_SUITE.erl:216
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = bif:'+' _0, _1

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:218
%% Counter = 9
%% bs_ensure_opt: true
function `core_fold_SUITE`:`foo`(_0, _1, _2) {
0:
  %% core_fold_SUITE.erl:219
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _1
  _3 = bif:'+' _0, _1

  %% Unique:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% core_fold_SUITE.erl:219
  %% Argument types:
  %%    _3 => number()
  %% Aliased:
  %%    _2
  %% Unique:
  %%    _3
  _4 = bif:'+' _3, _2

  %% Unique:
  %%    _4
  _8 = succeeded:body _4
  br _8, ^8, ^1

8:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _4
  ret _4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% core_fold_SUITE.erl:221
%% Counter = 41
%% bs_ensure_opt: true
function `core_fold_SUITE`:`bifs`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:is_list _0
  br _21, ^21, ^20

21:
  %% core_fold_SUITE.erl:222
  _10 = call (`id`/1), `<<1,2,3,4>>`

  %% Aliased:
  %%    _10
  _22 = succeeded:body _10
  br _22, ^22, ^1

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _38 = bif:'=:=' _10, `<<1,2,3,4>>`
  br _38, ^38, ^24

38:
  %% core_fold_SUITE.erl:225
  _11 = call (`id`/1), `{ok,#{{a,key} => {a,value}}}`

  %% Aliased:
  %%    _11
  _25 = succeeded:body _11
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _34 = is_tagged_tuple _11, `2`, `ok`
  br _34, ^31, ^27

31:
  %% Argument types:
  %%    _11 => {'ok', any()}
  %% Aliased:
  %%    _11
  _12 = get_tuple_element _11, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _30 = bif:is_map _12
  br _30, ^30, ^27

30:
  %% Argument types:
  %%    _12 => map()
  %% Aliased:
  %%    _12
  _14 = get_map_element _12, `{a,key}`

  %% Aliased:
  %%    _14
  _28 = succeeded:guard _14
  br _28, ^28, ^27

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _29 = bif:'=:=' _14, `{a,value}`
  br _29, ^29, ^27

29:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  %% core_fold_SUITE.erl:225
  %% Aliased:
  %%    _11
  _15 = match_fail `badmatch`, _11

  %% Unique:
  %%    _15
  _37 = succeeded:body _15
  br ^1

24:
  %% core_fold_SUITE.erl:222
  %% Aliased:
  %%    _10
  _16 = match_fail `badmatch`, _10

  %% Unique:
  %%    _16
  _39 = succeeded:body _16
  br ^1

20:
  %% core_fold_SUITE.erl:221
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bifs/1-',1}}
  _17 = match_fail `function_clause`, _0

  %% Unique:
  %%    _17
  _40 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% core_fold_SUITE.erl:236
%% Counter = 354
%% bs_ensure_opt: true
function `core_fold_SUITE`:`eq`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _226 = bif:is_list _0
  br _226, ^336, ^225

336:
  %% core_fold_SUITE.erl:237
  _14 = call (`id`/1), `[a,b,c]`

  %% Aliased:
  %%    _14
  _227 = succeeded:body _14
  br _227, ^227, ^1

227:
  %% core_fold_SUITE.erl:237
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-1-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _14
  _15 = call (`'-eq/1-fun-1-'`/1), _14

  %% Unique:
  %%    _15
  _228 = succeeded:body _15
  br _228, ^337, ^1

337:
  %% core_fold_SUITE.erl:237
  _6 = call (`id`/1), `[a,b,c]`

  %% Aliased:
  %%    _6
  _229 = succeeded:body _6
  br _229, ^229, ^1

229:
  %% core_fold_SUITE.erl:237
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-0-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _6
  _7 = call (`'-eq/1-fun-0-'`/1), _6

  %% Unique:
  %%    _7
  _230 = succeeded:body _7
  br _230, ^338, ^1

338:
  %% core_fold_SUITE.erl:238
  _30 = call (`id`/1), `[42.0]`

  %% Aliased:
  %%    _30
  _234 = succeeded:body _30
  br _234, ^234, ^1

234:
  %% core_fold_SUITE.erl:238
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-3-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _30
  _31 = call (`'-eq/1-fun-3-'`/1), _30

  %% Unique:
  %%    _31
  _235 = succeeded:body _31
  br _235, ^339, ^1

339:
  %% core_fold_SUITE.erl:238
  _22 = call (`id`/1), `[42.0]`

  %% Aliased:
  %%    _22
  _236 = succeeded:body _22
  br _236, ^236, ^1

236:
  %% core_fold_SUITE.erl:238
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-2-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _22
  _23 = call (`'-eq/1-fun-2-'`/1), _22

  %% Unique:
  %%    _23
  _237 = succeeded:body _23
  br _237, ^340, ^1

340:
  %% core_fold_SUITE.erl:239
  _46 = call (`id`/1), `"*"`

  %% Aliased:
  %%    _46
  _241 = succeeded:body _46
  br _241, ^241, ^1

241:
  %% core_fold_SUITE.erl:239
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-5-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _46
  _47 = call (`'-eq/1-fun-5-'`/1), _46

  %% Unique:
  %%    _47
  _242 = succeeded:body _47
  br _242, ^341, ^1

341:
  %% core_fold_SUITE.erl:239
  _38 = call (`id`/1), `"*"`

  %% Aliased:
  %%    _38
  _243 = succeeded:body _38
  br _243, ^243, ^1

243:
  %% core_fold_SUITE.erl:239
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-4-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _38
  _39 = call (`'-eq/1-fun-4-'`/1), _38

  %% Unique:
  %%    _39
  _244 = succeeded:body _39
  br _244, ^342, ^1

342:
  %% core_fold_SUITE.erl:240
  _62 = call (`id`/1), `[42.0]`

  %% Aliased:
  %%    _62
  _248 = succeeded:body _62
  br _248, ^248, ^1

248:
  %% core_fold_SUITE.erl:240
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-7-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _62
  _63 = call (`'-eq/1-fun-7-'`/1), _62

  %% Unique:
  %%    _63
  _249 = succeeded:body _63
  br _249, ^343, ^1

343:
  %% core_fold_SUITE.erl:240
  _54 = call (`id`/1), `[42.0]`

  %% Aliased:
  %%    _54
  _250 = succeeded:body _54
  br _250, ^250, ^1

250:
  %% core_fold_SUITE.erl:240
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-6-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _54
  _55 = call (`'-eq/1-fun-6-'`/1), _54

  %% Unique:
  %%    _55
  _251 = succeeded:body _55
  br _251, ^344, ^1

344:
  %% core_fold_SUITE.erl:242
  _78 = call (`id`/1), `a`

  %% Aliased:
  %%    _78
  _255 = succeeded:body _78
  br _255, ^255, ^1

255:
  %% core_fold_SUITE.erl:242
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-9-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _78
  _79 = call (`'-eq/1-fun-9-'`/1), _78

  %% Unique:
  %%    _79
  _256 = succeeded:body _79
  br _256, ^345, ^1

345:
  %% core_fold_SUITE.erl:242
  _70 = call (`id`/1), `a`

  %% Aliased:
  %%    _70
  _257 = succeeded:body _70
  br _257, ^257, ^1

257:
  %% core_fold_SUITE.erl:242
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-8-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _70
  _71 = call (`'-eq/1-fun-8-'`/1), _70

  %% Unique:
  %%    _71
  _258 = succeeded:body _71
  br _258, ^346, ^1

346:
  %% core_fold_SUITE.erl:243
  _94 = call (`id`/1), `a`

  %% Aliased:
  %%    _94
  _262 = succeeded:body _94
  br _262, ^262, ^1

262:
  %% core_fold_SUITE.erl:243
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-11-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _94
  _95 = call (`'-eq/1-fun-11-'`/1), _94

  %% Unique:
  %%    _95
  _263 = succeeded:body _95
  br _263, ^347, ^1

347:
  %% core_fold_SUITE.erl:243
  _86 = call (`id`/1), `a`

  %% Aliased:
  %%    _86
  _264 = succeeded:body _86
  br _264, ^264, ^1

264:
  %% core_fold_SUITE.erl:243
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-10-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _86
  _87 = call (`'-eq/1-fun-10-'`/1), _86

  %% Unique:
  %%    _87
  _265 = succeeded:body _87
  br _265, ^348, ^1

348:
  %% core_fold_SUITE.erl:245
  _110 = call (`id`/1), `#{a => 1.0,b => 2}`

  %% Aliased:
  %%    _110
  _269 = succeeded:body _110
  br _269, ^269, ^1

269:
  %% core_fold_SUITE.erl:245
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-13-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _110
  _111 = call (`'-eq/1-fun-13-'`/1), _110

  %% Unique:
  %%    _111
  _270 = succeeded:body _111
  br _270, ^349, ^1

349:
  %% core_fold_SUITE.erl:245
  _102 = call (`id`/1), `#{a => 1.0,b => 2}`

  %% Aliased:
  %%    _102
  _271 = succeeded:body _102
  br _271, ^271, ^1

271:
  %% core_fold_SUITE.erl:245
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-12-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _102
  _103 = call (`'-eq/1-fun-12-'`/1), _102

  %% Unique:
  %%    _103
  _272 = succeeded:body _103
  br _272, ^350, ^1

350:
  %% core_fold_SUITE.erl:246
  _126 = call (`id`/1), `#{a => [1.0],b => [2]}`

  %% Aliased:
  %%    _126
  _276 = succeeded:body _126
  br _276, ^276, ^1

276:
  %% core_fold_SUITE.erl:246
  %% Result type:
  %%    'false'
  %% Argument types:
  %%    (`'-eq/1-fun-15-'`/1) => fun((_) -> 'false')
  %% Aliased:
  %%    _126
  _127 = call (`'-eq/1-fun-15-'`/1), _126

  %% Unique:
  %%    _127
  _277 = succeeded:body _127
  br _277, ^351, ^1

351:
  %% core_fold_SUITE.erl:246
  _118 = call (`id`/1), `#{a => [1.0],b => [2]}`

  %% Aliased:
  %%    _118
  _278 = succeeded:body _118
  br _278, ^278, ^1

278:
  %% core_fold_SUITE.erl:246
  %% Result type:
  %%    'true'
  %% Argument types:
  %%    (`'-eq/1-fun-14-'`/1) => fun((_) -> 'true')
  %% Aliased:
  %%    _118
  _119 = call (`'-eq/1-fun-14-'`/1), _118

  %% Unique:
  %%    _119
  _279 = succeeded:body _119
  br _279, ^295, ^1

295:
  %% core_fold_SUITE.erl:250
  _130 = call (`id`/1), `#{1 => a}`

  %% Aliased:
  %%    _130
  _283 = succeeded:body _130
  br _283, ^283, ^1

283:
  %% core_fold_SUITE.erl:250
  _129 = call (`id`/1), `#{1.0 => a}`

  %% Aliased:
  %%    _129
  _284 = succeeded:body _129
  br _284, ^284, ^1

284:
  %% core_fold_SUITE.erl:250
  %% Argument types:
  %%    
  %% Aliased:
  %%    _129, 
  %%    _130
  Bool = bif:'==' _130, _129

  %% core_fold_SUITE.erl:251
  _132 = call (`id`/1), `#{1 => a}`

  %% Aliased:
  %%    _132
  _285 = succeeded:body _132
  br _285, ^285, ^1

285:
  %% core_fold_SUITE.erl:251
  %% Argument types:
  %%    
  %% Aliased:
  %%    _132
  _177 = bif:'==' _132, `#{1.0 => a}`

  %% Argument types:
  %%    _177 => 'false' | 'true'
  %%    Bool => 'false' | 'true'
  %% Unique:
  %%    _177, 
  %%    Bool
  _288 = bif:'=:=' _177, Bool
  br _288, ^288, ^287

288:
  br Bool, ^290, ^353

290:
  %% core_fold_SUITE.erl:252
  _212 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _212
  _293 = succeeded:body _212
  br ^1

353:
  %% core_fold_SUITE.erl:253
  _211 = call (`io`:`format`/2), `"Bool = ~p\n"`, `[false]`

  %% Aliased:
  %%    _211
  _292 = succeeded:body _211
  br _292, ^292, ^1

292:
  %% Result type:
  %%    'ok'
  ret `ok`

287:
  %% core_fold_SUITE.erl:251
  %% Unique:
  %%    _177
  _213 = match_fail `badmatch`, _177

  %% Unique:
  %%    _213
  _294 = succeeded:body _213
  br ^1

225:
  %% core_fold_SUITE.erl:236
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-eq/1-',1}}
  _222 = match_fail `function_clause`, _0

  %% Unique:
  %%    _222
  _319 = succeeded:body _222
  br ^1

1:
  _223 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _223
}

%% core_fold_SUITE.erl:258
%% Counter = 106
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_call_in_case`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _38 = bif:is_list _0
  br _38, ^38, ^37

38:
  %% core_fold_SUITE.erl:259
  %% Aliased:
  %%    _0
  PrivDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    PrivDir
  _39 = succeeded:body PrivDir
  br _39, ^39, ^1

39:
  %% core_fold_SUITE.erl:260
  %% Aliased:
  %%    _0
  Dir = call (`test_lib`:`get_data_dir`/1), _0

  %% Aliased:
  %%    Dir
  _40 = succeeded:body Dir
  br _40, ^40, ^1

40:
  %% core_fold_SUITE.erl:261
  %% Aliased:
  %%    Dir
  Core = call (`filename`:`join`/2), Dir, `"nested_call_in_case"`

  %% Aliased:
  %%    Core
  _41 = succeeded:body Core
  br _41, ^41, ^1

41:
  %% core_fold_SUITE.erl:262
  _4 = call (`test_lib`:`opt_opts`/1), `core_fold_SUITE`

  %% Aliased:
  %%    _4
  _42 = succeeded:body _4
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    PrivDir
  _15 = put_tuple `outdir`, PrivDir

  %% Argument types:
  %%    _15 => {'outdir', any()}
  %% Aliased:
  %%    _4, 
  %%    _15
  _16 = put_list _15, _4

  %% Argument types:
  %%    _16 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _16
  Opts = put_list `from_core`, _16

  %% Argument types:
  %%    Opts => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Opts
  _17 = put_list Opts, `[]`

  %% core_fold_SUITE.erl:263
  %% Unique:
  %%    _17
  _25 = call (`io`:`format`/2), `"~p"`, _17

  %% Aliased:
  %%    _25
  _43 = succeeded:body _25
  br _43, ^43, ^1

43:
  %% core_fold_SUITE.erl:264
  %% Aliased:
  %%    Core, 
  %%    Opts
  _18 = call (`c`:`c`/2), Core, Opts

  %% Aliased:
  %%    _18
  _44 = succeeded:body _18
  br _44, ^44, ^1

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _83 = is_tagged_tuple _18, `2`, `ok`
  br _83, ^80, ^46

80:
  %% Argument types:
  %%    _18 => {'ok', any()}
  %% Aliased:
  %%    _18
  _19 = get_tuple_element _18, `1`

  %% core_fold_SUITE.erl:265
  _21 = call (_19:`a`/2), `[1,2,3]`, `2`

  %% Aliased:
  %%    _21
  _47 = succeeded:body _21
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _78 = bif:'=:=' _21, `yes`
  br _78, ^77, ^49

77:
  %% core_fold_SUITE.erl:266
  _22 = call (_19:`a`/2), `[1,2,3]`, `4`

  %% Aliased:
  %%    _22
  _50 = succeeded:body _22
  br _50, ^50, ^1

50:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _75 = bif:'=:=' _22, `no`
  br _75, ^104, ^52

104:
  br ^105

105:
  _56 = new_try_tag `'catch'`
  br _56, ^54, ^55

54:
  %% core_fold_SUITE.erl:267
  _27 = call (_19:`a`/2), `not_a_list`, `42`

  %% Aliased:
  %%    _27
  _58 = succeeded:body _27
  br _58, ^58, ^55

58:
  br ^53

55:
  %% Unique:
  %%    _56
  _61 = landingpad `'catch'`, _56

  %% Aliased:
  %%    _61
  _59 = extract _61, `0`
  br ^53

53:
  _62 = phi { _59, ^55 }, { _27, ^58 }

  %% Aliased:
  %%    _62
  %% Unique:
  %%    _56
  _9 = catch_end _56, _62

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _70 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _70, ^67, ^64

67:
  %% core_fold_SUITE.erl:268
  %% Aliased:
  %%    _19
  _28 = call (`code`:`delete`/1), _19

  %% Aliased:
  %%    _28
  _65 = succeeded:body _28
  br _65, ^65, ^1

65:
  %% core_fold_SUITE.erl:269
  %% Aliased:
  %%    _19
  _29 = call (`code`:`purge`/1), _19

  %% Aliased:
  %%    _29
  _66 = succeeded:body _29
  br _66, ^66, ^1

66:
  %% Result type:
  %%    'ok'
  ret `ok`

64:
  %% core_fold_SUITE.erl:267
  %% Aliased:
  %%    _9
  _30 = match_fail `badmatch`, _9

  %% Unique:
  %%    _30
  _73 = succeeded:body _30
  br ^1

52:
  %% core_fold_SUITE.erl:266
  %% Aliased:
  %%    _22
  _31 = match_fail `badmatch`, _22

  %% Unique:
  %%    _31
  _76 = succeeded:body _31
  br ^1

49:
  %% core_fold_SUITE.erl:265
  %% Aliased:
  %%    _21
  _32 = match_fail `badmatch`, _21

  %% Unique:
  %%    _32
  _79 = succeeded:body _32
  br ^1

46:
  %% core_fold_SUITE.erl:264
  %% Aliased:
  %%    _18
  _33 = match_fail `badmatch`, _18

  %% Unique:
  %%    _33
  _86 = succeeded:body _33
  br ^1

37:
  %% core_fold_SUITE.erl:258
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-nested_call_in_case/1-',1}}
  _34 = match_fail `function_clause`, _0

  %% Unique:
  %%    _34
  _87 = succeeded:body _34
  br ^1

1:
  _35 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _35
}

%% core_fold_SUITE.erl:272
%% Counter = 20
%% bs_ensure_opt: true
function `core_fold_SUITE`:`guard_try_catch`(_0) {
0:
  %% core_fold_SUITE.erl:273
  %% Result type:
  %%    'false'
  _3 = call (`do_guard_try_catch`/2), `key`, `value`

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^17, ^1

17:
  %% core_fold_SUITE.erl:274
  %% Argument types:
  %%    
  _4 = bif:get `key`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _15 = bif:'=:=' _4, `value`
  br _15, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% core_fold_SUITE.erl:274
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% core_fold_SUITE.erl:277
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'key'
%%    _1 =>
%%     'value'
function `core_fold_SUITE`:`do_guard_try_catch`(_0, _1) {
0:
  br ^35

35:
  _14 = new_try_tag `'try'`
  br _14, ^13, ^11

13:
  %% core_fold_SUITE.erl:282
  _7 = call (`erlang`:`put`/2), _0, _1

  %% Aliased:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^10, ^11

10:
  %% Unique:
  %%    _14
  _18 = kill_try_tag _14
  %% Result type:
  %%    'false'
  ret `false`

11:
  %% Unique:
  %%    _14
  _16 = landingpad `'try'`, _14

  %% Unique:
  %%    _14
  _17 = kill_try_tag _14
  %% Result type:
  %%    'false'
  ret `false`
}

%% core_fold_SUITE.erl:291
%% Counter = 294
%% bs_ensure_opt: true
function `core_fold_SUITE`:`coverage`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _84 = bif:is_list _0
  br _84, ^287, ^83

287:
  br ^290

290:
  _88 = new_try_tag `'catch'`
  br _88, ^86, ^87

86:
  %% core_fold_SUITE.erl:293
  %% Result type:
  %%    none()
  _57 = call (`cover_will_match_list_type`/1), `{a,b,c}`

  %% Aliased:
  %%    _57
  _90 = succeeded:body _57
  br ^87

87:
  %% Unique:
  %%    _88
  _93 = landingpad `'catch'`, _88

  %% Aliased:
  %%    _93
  _91 = extract _93, `0`
  br ^85

85:
  %% Aliased:
  %%    _91
  %% Unique:
  %%    _88
  _1 = catch_end _88, _91

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _236 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _236, ^233, ^96

233:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _30 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _230 = bif:is_tuple _30
  br _230, ^230, ^96

230:
  %% Argument types:
  %%    _30 => {...}
  %% Aliased:
  %%    _30
  _231 = bif:tuple_size _30

  %% Argument types:
  %%    _231 => 0..16777215
  %% Unique:
  %%    _231
  _232 = bif:'=:=' _231, `2`
  br _232, ^229, ^96

229:
  %% Argument types:
  %%    _30 => {any(), any()}
  %% Aliased:
  %%    _30
  _33 = get_tuple_element _30, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _228 = bif:'=:=' _33, `{case_clause,{a,b,c}}`
  br _228, ^288, ^96

288:
  br ^291

291:
  _100 = new_try_tag `'catch'`
  br _100, ^98, ^99

98:
  %% core_fold_SUITE.erl:295
  %% Result type:
  %%    none()
  _59 = call (`cover_will_match_list_type`/1), `{a,b,c,d}`

  %% Aliased:
  %%    _59
  _102 = succeeded:body _59
  br ^99

99:
  %% Unique:
  %%    _100
  _105 = landingpad `'catch'`, _100

  %% Aliased:
  %%    _105
  _103 = extract _105, `0`
  br ^97

97:
  %% Aliased:
  %%    _103
  %% Unique:
  %%    _100
  _3 = catch_end _100, _103

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _224 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _224, ^221, ^108

221:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _34 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _34
  _218 = bif:is_tuple _34
  br _218, ^218, ^108

218:
  %% Argument types:
  %%    _34 => {...}
  %% Aliased:
  %%    _34
  _219 = bif:tuple_size _34

  %% Argument types:
  %%    _219 => 0..16777215
  %% Unique:
  %%    _219
  _220 = bif:'=:=' _219, `2`
  br _220, ^217, ^108

217:
  %% Argument types:
  %%    _34 => {any(), any()}
  %% Aliased:
  %%    _34
  _37 = get_tuple_element _34, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _216 = bif:'=:=' _37, `{case_clause,{a,b,c,d}}`
  br _216, ^216, ^108

216:
  %% core_fold_SUITE.erl:296
  %% Result type:
  %%    'a'
  _38 = call (`cover_remove_non_vars_alias`/1), `{a,b,c}`

  %% Unique:
  %%    _38
  _109 = succeeded:body _38
  br _109, ^213, ^1

213:
  %% core_fold_SUITE.erl:297
  %% Result type:
  %%    'error'
  _39 = call (`cover_will_match_lit_list`/0)

  %% Unique:
  %%    _39
  _112 = succeeded:body _39
  br _112, ^210, ^1

210:
  %% core_fold_SUITE.erl:298
  %% Result type:
  %%    {'ok', nonempty_list('a')}
  _40 = call (`cover_is_safe_bool_expr`/1), `a`

  %% Unique:
  %%    _40
  _115 = succeeded:body _40
  br _115, ^115, ^1

115:
  %% Argument types:
  %%    _40 => {'ok', nonempty_list('a')}
  %% Unique:
  %%    _40
  _208 = bif:'=:=' _40, `{ok,[a]}`
  br _208, ^208, ^117

208:
  %% core_fold_SUITE.erl:299
  %% Result type:
  %%    'false'
  _41 = call (`cover_is_safe_bool_expr2`/1), `a`

  %% Unique:
  %%    _41
  _118 = succeeded:body _41
  br _118, ^205, ^1

205:
  _9 = make_fun (`id`/1)

  %% core_fold_SUITE.erl:300
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _9
  _42 = call (`cover_eval_is_function`/1), _9

  %% Unique:
  %%    _42
  _121 = succeeded:body _42
  br _121, ^202, ^1

202:
  %% core_fold_SUITE.erl:302
  %% Result type:
  %%    'error' | 'ok'
  _43 = call (`cover_opt_guard_try`/1), `{cover_opt_guard_try,[a]}`

  %% Unique:
  %%    _43
  _124 = succeeded:body _43
  br _124, ^124, ^1

124:
  %% Argument types:
  %%    _43 => 'error' | 'ok'
  %% Unique:
  %%    _43
  _200 = bif:'=:=' _43, `ok`
  br _200, ^199, ^126

199:
  %% core_fold_SUITE.erl:303
  %% Result type:
  %%    'error' | 'ok'
  _44 = call (`cover_opt_guard_try`/1), `{cover_opt_guard_try,[]}`

  %% Unique:
  %%    _44
  _127 = succeeded:body _44
  br _127, ^127, ^1

127:
  %% Argument types:
  %%    _44 => 'error' | 'ok'
  %% Unique:
  %%    _44
  _197 = bif:'=:=' _44, `error`
  br _197, ^196, ^129

196:
  %% core_fold_SUITE.erl:308
  _45 = call (`erlang`:`list_to_pid`/1), `"<0.42.0>"`

  %% Aliased:
  %%    _45
  _130 = succeeded:body _45
  br _130, ^130, ^1

130:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _133 = bif:is_pid _45
  br _133, ^131, ^132

131:
  %% core_fold_SUITE.erl:313
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _0
  _46 = call (`bsm_an_inlined`/2), `<<1>>`, _0

  %% Unique:
  %%    _46
  _135 = succeeded:body _46
  br _135, ^135, ^1

135:
  %% Argument types:
  %%    _46 => 'error' | 'ok'
  %% Unique:
  %%    _46
  _194 = bif:'=:=' _46, `ok`
  br _194, ^193, ^137

193:
  %% core_fold_SUITE.erl:314
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _0
  _47 = call (`bsm_an_inlined`/2), `<<1,2,3>>`, _0

  %% Unique:
  %%    _47
  _138 = succeeded:body _47
  br _138, ^138, ^1

138:
  %% Argument types:
  %%    _47 => 'error' | 'ok'
  %% Unique:
  %%    _47
  _191 = bif:'=:=' _47, `error`
  br _191, ^190, ^140

190:
  %% core_fold_SUITE.erl:315
  %% Result type:
  %%    'error'
  %% Aliased:
  %%    _0
  _48 = call (`bsm_an_inlined`/2), `[]`, _0

  %% Unique:
  %%    _48
  _141 = succeeded:body _48
  br _141, ^187, ^1

187:
  %% core_fold_SUITE.erl:318
  Tuple = call (`id`/1), `{a,b}`

  %% Aliased:
  %%    Tuple
  _144 = succeeded:body Tuple
  br _144, ^144, ^1

144:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Tuple
  _148 = bif:is_tuple Tuple
  br _148, ^148, ^146

148:
  %% Argument types:
  %%    Tuple => {...}
  %% Aliased:
  %%    Tuple
  _149 = bif:tuple_size Tuple

  %% Argument types:
  %%    _149 => 0..16777215
  %% Unique:
  %%    _149
  _150 = bif:'=:=' _149, `2`
  br _150, ^289, ^146

289:
  br ^292

292:
  _157 = new_try_tag `'catch'`
  br _157, ^155, ^156

155:
  %% core_fold_SUITE.erl:325
  %% Result type:
  %%    none()
  _64 = call (`cover_is_literal_fun`/0)

  %% Aliased:
  %%    _64
  _159 = succeeded:body _64
  br ^156

156:
  %% Unique:
  %%    _157
  _162 = landingpad `'catch'`, _157

  %% Aliased:
  %%    _162
  _160 = extract _162, `0`
  br ^154

154:
  %% Aliased:
  %%    _160
  %% Unique:
  %%    _157
  _21 = catch_end _157, _160

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _180 = is_tagged_tuple _21, `2`, `'EXIT'`
  br _180, ^177, ^165

177:
  %% Argument types:
  %%    _21 => {''EXIT'', any()}
  %% Aliased:
  %%    _21
  _51 = get_tuple_element _21, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _174 = bif:is_tuple _51
  br _174, ^174, ^165

174:
  %% Argument types:
  %%    _51 => {...}
  %% Aliased:
  %%    _51
  _175 = bif:tuple_size _51

  %% Argument types:
  %%    _175 => 0..16777215
  %% Unique:
  %%    _175
  _176 = bif:'=:=' _175, `2`
  br _176, ^173, ^165

173:
  %% Argument types:
  %%    _51 => {any(), any()}
  %% Aliased:
  %%    _51
  _54 = get_tuple_element _51, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _172 = bif:'=:=' _54, `{case_clause,42}`
  br _172, ^172, ^165

172:
  %% core_fold_SUITE.erl:328
  %% Result type:
  %%    'ok'
  _55 = call (`cover_core_lib`/1), `[ok,nok]`

  %% Unique:
  %%    _55
  _166 = succeeded:body _55
  br _166, ^293, ^1

293:
  ret _55

165:
  %% core_fold_SUITE.erl:325
  %% Aliased:
  %%    _21
  _66 = match_fail `badmatch`, _21

  %% Unique:
  %%    _66
  _183 = succeeded:body _66
  br ^1

146:
  %% core_fold_SUITE.erl:319
  %% Aliased:
  %%    Tuple
  _62 = match_fail `case_clause`, Tuple

  %% Unique:
  %%    _62
  _151 = succeeded:body _62
  br ^1

140:
  %% core_fold_SUITE.erl:314
  _69 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _69
  _192 = succeeded:body _69
  br ^1

137:
  %% core_fold_SUITE.erl:313
  _70 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _70
  _195 = succeeded:body _70
  br ^1

132:
  %% core_fold_SUITE.erl:308
  %% Aliased:
  %%    _45
  _60 = match_fail `case_clause`, _45

  %% Unique:
  %%    _60
  _134 = succeeded:body _60
  br ^1

129:
  %% core_fold_SUITE.erl:303
  _71 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _71
  _198 = succeeded:body _71
  br ^1

126:
  %% core_fold_SUITE.erl:302
  _72 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _72
  _201 = succeeded:body _72
  br ^1

117:
  %% core_fold_SUITE.erl:298
  %% Unique:
  %%    _40
  _75 = match_fail `badmatch`, _40

  %% Unique:
  %%    _75
  _209 = succeeded:body _75
  br ^1

108:
  %% core_fold_SUITE.erl:294
  %% Aliased:
  %%    _3
  _78 = match_fail `badmatch`, _3

  %% Unique:
  %%    _78
  _227 = succeeded:body _78
  br ^1

96:
  %% core_fold_SUITE.erl:292
  %% Aliased:
  %%    _1
  _79 = match_fail `badmatch`, _1

  %% Unique:
  %%    _79
  _239 = succeeded:body _79
  br ^1

83:
  %% core_fold_SUITE.erl:291
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-coverage/1-',1}}
  _80 = match_fail `function_clause`, _0

  %% Unique:
  %%    _80
  _240 = succeeded:body _80
  br ^1

1:
  _81 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _81
}

%% core_fold_SUITE.erl:332
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b', 'c'} | {'a', 'b', 'c', 'd'}
function `core_fold_SUITE`:`cover_will_match_list_type`(_0) {
0:
  %% Argument types:
  %%    _0 => {'a', 'b', 'c'} | {'a', 'b', 'c', 'd'}
  %% Unique:
  %%    _0
  %% Anno: #{constraints => arity}
  _33 = is_tagged_tuple _0, `3`, `a`
  br _33, ^22, ^20

22:
  %% core_fold_SUITE.erl:335
  _16 = match_fail `case_clause`, `{a,b,c}`

  %% Unique:
  %%    _16
  _29 = succeeded:body _16
  br ^1

20:
  %% core_fold_SUITE.erl:333
  _17 = match_fail `case_clause`, `{a,b,c,d}`

  %% Unique:
  %%    _17
  _36 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% core_fold_SUITE.erl:341
%% Counter = 34
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b', 'c'}
function `core_fold_SUITE`:`cover_remove_non_vars_alias`(_0) {
0:
  %% Result type:
  %%    'a'
  ret `a`
}

%% core_fold_SUITE.erl:350
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`cover_will_match_lit_list`() {
0:
  %% Result type:
  %%    'error'
  ret `error`
}

%% core_fold_SUITE.erl:358
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
function `core_fold_SUITE`:`cover_is_safe_bool_expr`(_0) {
0:
  %% Result type:
  %%    {'ok', nonempty_list('a')}
  ret `{ok,[a]}`
}

%% core_fold_SUITE.erl:371
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a'
function `core_fold_SUITE`:`cover_is_safe_bool_expr2`(_0) {
0:
  %% Result type:
  %%    'false'
  ret `false`
}

%% core_fold_SUITE.erl:380
%% Counter = 39
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'cover_opt_guard_try', list('a')}
function `core_fold_SUITE`:`cover_opt_guard_try`(_0) {
0:
  %% core_fold_SUITE.erl:382
  %% Argument types:
  %%    _0 => {'cover_opt_guard_try', list('a')}
  %% Unique:
  %%    _0
  _5 = get_tuple_element _0, `1`

  %% core_fold_SUITE.erl:382
  %% Argument types:
  %%    _5 => list('a')
  %% Unique:
  %%    _5
  _6 = bif:length _5

  %% core_fold_SUITE.erl:382
  %% Argument types:
  %%    _6 => 0..288230376151711743
  %% Unique:
  %%    _6
  _7 = bif:'=:=' _6, `1`
  br _7, ^14, ^30

14:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% Result type:
  %%    'error'
  ret `error`
}

%% core_fold_SUITE.erl:388
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun((_))
function `core_fold_SUITE`:`cover_eval_is_function`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_fold_SUITE.erl:394
%% Counter = 17
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil() | bitstring(8)
%%     accepts_match_context
%%    _1 =>
%%     maybe_improper_list(any(), any())
function `core_fold_SUITE`:`bsm_an_inlined`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => nil() | bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _8 = bs_start_match `new`, _0

  %% Aliased:
  %%    _8
  _16 = succeeded:guard _8
  br _16, ^16, ^13

16:
  %% core_fold_SUITE.erl:394
  %% Aliased:
  %%    _8
  _9 = bs_test_tail _8, `8`
  br _9, ^15, ^13

15:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% Result type:
  %%    'error'
  ret `error`
}

%% core_fold_SUITE.erl:397
%% Counter = 23
%% bs_ensure_opt: true
function `core_fold_SUITE`:`cover_is_literal_fun`() {
0:
  %% core_fold_SUITE.erl:398
  _7 = call (`id`/1), `42`

  %% Aliased:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _19 = bif:'=:=' _7, `[]`
  br _19, ^19, ^17

19:
  %% core_fold_SUITE.erl:400
  _10 = match_fail `try_clause`, `right`

  %% Unique:
  %%    _10
  _18 = succeeded:body _10
  br ^1

17:
  %% core_fold_SUITE.erl:398
  %% Aliased:
  %%    _7
  _11 = match_fail `case_clause`, _7

  %% Unique:
  %%    _11
  _20 = succeeded:body _11
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% core_fold_SUITE.erl:407
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list('nok' | 'ok')
function `core_fold_SUITE`:`cover_core_lib`(_0) {
0:
  %% core_fold_SUITE.erl:408
  %% Unique:
  %%    _0
  R = call (`id`/1), _0

  %% Aliased:
  %%    R
  _19 = succeeded:body R
  br _19, ^19, ^1

19:
  %% core_fold_SUITE.erl:409
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    R
  _16 = call (`'-cover_core_lib/1-lc$^0/1-0-'`/1), R

  %% Unique:
  %%    _16
  _20 = succeeded:body _16
  br _20, ^20, ^1

20:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_fold_SUITE.erl:412
%% Counter = 32
%% bs_ensure_opt: true
function `core_fold_SUITE`:`unused_multiple_values_error`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _20 = bif:is_list _0
  br _20, ^20, ^19

20:
  %% core_fold_SUITE.erl:413
  %% Aliased:
  %%    _0
  PrivDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    PrivDir
  _21 = succeeded:body PrivDir
  br _21, ^21, ^1

21:
  %% core_fold_SUITE.erl:414
  %% Aliased:
  %%    _0
  Dir = call (`test_lib`:`get_data_dir`/1), _0

  %% Aliased:
  %%    Dir
  _22 = succeeded:body Dir
  br _22, ^22, ^1

22:
  %% core_fold_SUITE.erl:415
  %% Aliased:
  %%    Dir
  Core = call (`filename`:`join`/2), Dir, `"unused_multiple_values_error"`

  %% Aliased:
  %%    Core
  _23 = succeeded:body Core
  br _23, ^23, ^1

23:
  %% core_fold_SUITE.erl:417
  _4 = call (`test_lib`:`opt_opts`/1), `core_fold_SUITE`

  %% Aliased:
  %%    _4
  _24 = succeeded:body _4
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    PrivDir
  _8 = put_tuple `outdir`, PrivDir

  %% Argument types:
  %%    _8 => {'outdir', any()}
  %% Aliased:
  %%    _4
  %% Unique:
  %%    _8
  _9 = put_list _8, _4

  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _9
  _10 = put_list `from_core`, _9

  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _10
  _11 = put_list `return`, _10

  %% Argument types:
  %%    _11 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _11
  _12 = put_list `ssalint`, _11

  %% Argument types:
  %%    _12 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _12
  _13 = put_list `clint`, _12

  %% Argument types:
  %%    _13 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _13
  Opts = put_list `no_copt`, _13

  %% core_fold_SUITE.erl:420
  %% Aliased:
  %%    Core
  %% Unique:
  %%    Opts
  _14 = call (`c`:`c`/2), Core, Opts

  %% Aliased:
  %%    _14
  _25 = succeeded:body _14
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _28 = bif:'=:=' _14, `{error,[{"unused_multiple_values_error",
          [{none,core_lint,{return_mismatch,{hello,1}}}]}],
        []}`
  br _28, ^28, ^27

28:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  %% core_fold_SUITE.erl:418
  %% Aliased:
  %%    _14
  _15 = match_fail `badmatch`, _14

  %% Unique:
  %%    _15
  _29 = succeeded:body _15
  br ^1

19:
  %% core_fold_SUITE.erl:412
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-unused_multiple_values_error/1-',1}}
  _16 = match_fail `function_clause`, _0

  %% Unique:
  %%    _16
  _30 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_fold_SUITE.erl:423
%% Counter = 26
%% bs_ensure_opt: true
function `core_fold_SUITE`:`unused_multiple_values`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _13 = bif:is_list _0
  br _13, ^13, ^12

13:
  %% core_fold_SUITE.erl:424
  _6 = call (`erlang`:`put`/2), `unused_multiple_values`, `[]`

  %% Aliased:
  %%    _6
  _14 = succeeded:body _6
  br _14, ^14, ^1

14:
  %% core_fold_SUITE.erl:425
  _4 = call (`test_unused_multiple_values`/1), `false`

  %% Aliased:
  %%    _4
  _15 = succeeded:body _4
  br _15, ^15, ^1

15:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _23 = bif:'=:=' _4, `[false]`
  br _23, ^23, ^17

23:
  %% core_fold_SUITE.erl:426
  _5 = call (`test_unused_multiple_values`/1), `{a,b}`

  %% Aliased:
  %%    _5
  _18 = succeeded:body _5
  br _18, ^18, ^1

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _21 = bif:'=:=' _5, `[b,a,{a,b},false]`
  br _21, ^21, ^20

21:
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  %% core_fold_SUITE.erl:426
  %% Aliased:
  %%    _5
  _7 = match_fail `badmatch`, _5

  %% Unique:
  %%    _7
  _22 = succeeded:body _7
  br ^1

17:
  %% core_fold_SUITE.erl:425
  %% Aliased:
  %%    _4
  _8 = match_fail `badmatch`, _4

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br ^1

12:
  %% core_fold_SUITE.erl:423
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-unused_multiple_values/1-',1}}
  _9 = match_fail `function_clause`, _0

  %% Unique:
  %%    _9
  _25 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% core_fold_SUITE.erl:429
%% Counter = 13
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | {'a', 'b'}
function `core_fold_SUITE`:`test_unused_multiple_values`(_0) {
0:
  %% core_fold_SUITE.erl:430
  %% Result type:
  %%    'ok'
  %% Unique:
  %%    _0
  _2 = call (`do_unused_multiple_values`/1), _0

  %% Unique:
  %%    _2
  _7 = succeeded:body _2
  br _7, ^10, ^1

10:
  %% core_fold_SUITE.erl:431
  %% Argument types:
  %%    
  _3 = bif:get `unused_multiple_values`
  %% Aliased:
  %%    _3
  ret _3

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% core_fold_SUITE.erl:433
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | {'a', 'b'}
function `core_fold_SUITE`:`do_unused_multiple_values`(_0) {
0:
  %% core_fold_SUITE.erl:434
  %% Result type:
  %%    'a' | 'b' | 'false' | {'a', 'b'}
  %% Unique:
  %%    _0
  _10 = call (`do_something`/1), _0

  %% Aliased:
  %%    _10
  _21 = succeeded:body _10
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    _10 => 'a' | 'b' | 'false' | {'a', 'b'}
  %% Aliased:
  %%    _10
  _25 = bif:'=:=' _10, `false`
  br _25, ^22, ^23

23:
  %% Argument types:
  %%    _10 => 'a' | 'b' | {'a', 'b'}
  %% Aliased:
  %%    _10
  _31 = bif:is_tuple _10
  br _31, ^35, ^27

35:
  %% core_fold_SUITE.erl:439
  %% Result type:
  %%    'a' | 'b' | 'false' | {'a', 'b'}
  _16 = call (`do_something`/1), `a`

  %% Aliased:
  %%    _16
  _28 = succeeded:body _16
  br _28, ^28, ^1

28:
  %% core_fold_SUITE.erl:440
  %% Result type:
  %%    'a' | 'b' | 'false' | {'a', 'b'}
  _13 = call (`do_something`/1), `b`

  %% Aliased:
  %%    _13
  _29 = succeeded:body _13
  br _29, ^22, ^1

22:
  %% Result type:
  %%    'ok'
  ret `ok`

27:
  %% core_fold_SUITE.erl:438
  %% Aliased:
  %%    _10
  _18 = match_fail `badmatch`, _10

  %% Unique:
  %%    _18
  _34 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% core_fold_SUITE.erl:445
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'a' | 'b' | 'false' | {'a', 'b'}
function `core_fold_SUITE`:`do_something`(_0) {
0:
  %% core_fold_SUITE.erl:447
  %% Argument types:
  %%    
  _1 = bif:get `unused_multiple_values`

  %% Argument types:
  %%    _0 => 'a' | 'b' | 'false' | {'a', 'b'}
  %% Aliased:
  %%    _0, 
  %%    _1
  _2 = put_list _0, _1

  %% core_fold_SUITE.erl:446
  %% Unique:
  %%    _2
  _3 = call (`erlang`:`put`/2), `unused_multiple_values`, _2

  %% Aliased:
  %%    _3
  _6 = succeeded:body _3
  br _6, ^6, ^1

6:
  %% Result type:
  %%    'a' | 'b' | 'false' | {'a', 'b'}
  %% Aliased:
  %%    _0
  ret _0

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_fold_SUITE.erl:453
%% Counter = 28
%% bs_ensure_opt: true
function `core_fold_SUITE`:`multiple_aliases`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:is_list _0
  br _21, ^21, ^20

21:
  %% Result type:
  %%    {'ok', 'ok'}
  _4 = make_fun (`'-multiple_aliases/1-fun-0-'`/0)

  %% core_fold_SUITE.erl:454
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _4
  _13 = call (`do_ma`/2), _4, `{ok,ok}`

  %% Unique:
  %%    _13
  _22 = succeeded:body _13
  br _22, ^22, ^1

22:
  %% Result type:
  %%    {'true', 'true', 'ok', 'ok'}
  _7 = make_fun (`'-multiple_aliases/1-fun-1-'`/0)

  %% core_fold_SUITE.erl:458
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _7
  _16 = call (`do_ma`/2), _7, `{true,true,ok,ok}`

  %% Unique:
  %%    _16
  _23 = succeeded:body _16
  br _23, ^27, ^1

27:
  ret _16

20:
  %% core_fold_SUITE.erl:453
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-multiple_aliases/1-',1}}
  _17 = match_fail `function_clause`, _0

  %% Unique:
  %%    _17
  _24 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% core_fold_SUITE.erl:466
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'})
%%    _1 =>
%%     {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'}
function `core_fold_SUITE`:`do_ma`(_0, _1) {
0:
  %% core_fold_SUITE.erl:467
  %% Result type:
  %%    {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'}
  %% Argument types:
  %%    _0 => fun(() -> {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'})
  %% Aliased:
  %%    _0
  _8 = call _0

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _8 => {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'}
  %%    _1 => {'ok', 'ok'} | {'true', 'true', 'ok', 'ok'}
  %% Aliased:
  %%    _8
  %% Unique:
  %%    _1
  _22 = bif:'=:=' _8, _1
  br _22, ^22, ^21

22:
  %% core_fold_SUITE.erl:468
  _9 = call (`erlang`:`erase`/1), `run_once`

  %% Aliased:
  %%    _9
  _23 = succeeded:body _9
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _27 = bif:'=:=' _9, `ran_once`
  br _27, ^26, ^25

26:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% core_fold_SUITE.erl:468
  %% Aliased:
  %%    _9
  _10 = match_fail `badmatch`, _9

  %% Unique:
  %%    _10
  _28 = succeeded:body _10
  br ^1

21:
  %% core_fold_SUITE.erl:467
  %% Aliased:
  %%    _8
  _11 = match_fail `badmatch`, _8

  %% Unique:
  %%    _11
  _29 = succeeded:body _11
  br ^1

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% core_fold_SUITE.erl:471
%% Counter = 12
%% bs_ensure_opt: true
function `core_fold_SUITE`:`run_once`() {
0:
  %% core_fold_SUITE.erl:472
  _2 = call (`erlang`:`put`/2), `run_once`, `ran_once`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _10 = bif:'=:=' _2, `undefined`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% core_fold_SUITE.erl:472
  %% Aliased:
  %%    _2
  _3 = match_fail `badmatch`, _2

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_fold_SUITE.erl:476
%% Counter = 23
%% bs_ensure_opt: true
function `core_fold_SUITE`:`redundant_boolean_clauses`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _12 = bif:is_list _0
  br _12, ^12, ^11

12:
  %% core_fold_SUITE.erl:477
  X = call (`id`/1), `0`

  %% Aliased:
  %%    X
  _13 = succeeded:body X
  br _13, ^13, ^1

13:
  %% core_fold_SUITE.erl:478
  %% Argument types:
  %%    
  %% Aliased:
  %%    X
  _6 = bif:'==' X, `0`
  br _6, ^19, ^18

19:
  %% Result type:
  %%    'yes'
  ret `yes`

18:
  %% core_fold_SUITE.erl:478
  _7 = match_fail `badmatch`, `no`

  %% Unique:
  %%    _7
  _21 = succeeded:body _7
  br ^1

11:
  %% core_fold_SUITE.erl:476
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-redundant_boolean_clauses/1-',1}}
  _8 = match_fail `function_clause`, _0

  %% Unique:
  %%    _8
  _22 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% core_fold_SUITE.erl:484
%% Counter = 38
%% bs_ensure_opt: true
function `core_fold_SUITE`:`mixed_matching_clauses`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _18 = bif:is_list _0
  br _18, ^31, ^17

31:
  %% Result type:
  %%    'ok'
  ret `ok`

17:
  %% core_fold_SUITE.erl:484
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-mixed_matching_clauses/1-',1}}
  _14 = match_fail `function_clause`, _0

  %% Unique:
  %%    _14
  _37 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% core_fold_SUITE.erl:495
%% Counter = 50
%% bs_ensure_opt: true
function `core_fold_SUITE`:`unnecessary_building`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:is_list _0
  br _22, ^22, ^21

22:
  %% core_fold_SUITE.erl:496
  _1 = call (`test_lib`:`id`/1), `a`

  %% Aliased:
  %%    _1
  _23 = succeeded:body _1
  br _23, ^23, ^1

23:
  %% core_fold_SUITE.erl:496
  %% Result type:
  %%    nonempty_list({any(), any()})
  %% Aliased:
  %%    _1
  Term1 = call (`do_unnecessary_building_1`/1), _1

  %% Unique:
  %%    Term1
  _24 = succeeded:body Term1
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    Term1 => nonempty_list({any(), any()})
  %% Unique:
  %%    Term1
  _46 = bif:'=:=' Term1, `[{a,a},{a,a}]`
  br _46, ^46, ^26

46:
  %% core_fold_SUITE.erl:498
  %% Unique:
  %%    Term1
  _11 = call (`erts_debug`:`size`/1), Term1

  %% Aliased:
  %%    _11
  _27 = succeeded:body _11
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _44 = bif:'=:=' _11, `7`
  br _44, ^43, ^29

43:
  %% core_fold_SUITE.erl:502
  Input = call (`test_lib`:`id`/1), `{a,b,c}`

  %% Aliased:
  %%    Input
  _30 = succeeded:body Input
  br _30, ^30, ^1

30:
  %% core_fold_SUITE.erl:503
  %% Result type:
  %%    {'b', nonempty_list('none' | {'a', any(), any()}), 'x'}
  %% Aliased:
  %%    Input
  _6 = call (`do_unnecessary_building_2`/1), Input

  %% Unique:
  %%    _6
  _31 = succeeded:body _6
  br _31, ^31, ^1

31:
  %% core_fold_SUITE.erl:503
  %% Unique:
  %%    _6
  Term2 = call (`test_lib`:`id`/1), _6

  %% Aliased:
  %%    Term2
  _32 = succeeded:body Term2
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Term2
  _41 = bif:'=:=' Term2, `{b,[{a,b,c},none],x}`
  br _41, ^41, ^34

41:
  %% Argument types:
  %%    Term2 => {'b', nonempty_list('none' | {'a', 'b', 'c'}), 'x'}
  %% Aliased:
  %%    Input, 
  %%    Term2
  _12 = put_list Term2, Input

  %% core_fold_SUITE.erl:505
  %% Unique:
  %%    _12
  _13 = call (`erts_debug`:`size`/1), _12

  %% Aliased:
  %%    _13
  _35 = succeeded:body _13
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _39 = bif:'=:=' _13, `14`
  br _39, ^38, ^37

38:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% core_fold_SUITE.erl:505
  %% Aliased:
  %%    _13
  _14 = match_fail `badmatch`, _13

  %% Unique:
  %%    _14
  _40 = succeeded:body _14
  br ^1

34:
  %% core_fold_SUITE.erl:504
  %% Aliased:
  %%    Term2
  _15 = match_fail `badmatch`, Term2

  %% Unique:
  %%    _15
  _42 = succeeded:body _15
  br ^1

29:
  %% core_fold_SUITE.erl:498
  %% Aliased:
  %%    _11
  _16 = match_fail `badmatch`, _11

  %% Unique:
  %%    _16
  _45 = succeeded:body _16
  br ^1

26:
  %% core_fold_SUITE.erl:497
  %% Unique:
  %%    Term1
  _17 = match_fail `badmatch`, Term1

  %% Unique:
  %%    _17
  _47 = succeeded:body _17
  br ^1

21:
  %% core_fold_SUITE.erl:495
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-unnecessary_building/1-',1}}
  _18 = match_fail `function_clause`, _0

  %% Unique:
  %%    _18
  _48 = succeeded:body _18
  br ^1

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% core_fold_SUITE.erl:509
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`do_unnecessary_building_1`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _1 = put_tuple _0, _0

  %% Argument types:
  %%    _1 => {any(), any()}
  %% Aliased:
  %%    _1
  _2 = put_list _1, `[]`

  %% Argument types:
  %%    _1 => {any(), any()}
  %%    _2 => nonempty_list({any(), any()})
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _2
  _3 = put_list _1, _2
  %% Result type:
  %%    nonempty_list({any(), any()})
  %% Unique:
  %%    _3
  ret _3
}

%% core_fold_SUITE.erl:514
%% Counter = 21
%% bs_ensure_opt: true
function `core_fold_SUITE`:`do_unnecessary_building_2`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _17 = is_tagged_tuple _0, `3`, `a`
  br _17, ^14, ^13

14:
  %% Argument types:
  %%    _0 => {'a', any(), any()}
  %% Aliased:
  %%    _0
  _2 = put_list _0, `[none]`

  %% Argument types:
  %%    _2 => nonempty_list('none' | {'a', any(), any()})
  %% Unique:
  %%    _2
  _9 = put_tuple `b`, _2, `x`
  %% Result type:
  %%    {'b', nonempty_list('none' | {'a', any(), any()}), 'x'}
  %% Unique:
  %%    _9
  ret _9

13:
  %% core_fold_SUITE.erl:514
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-do_unnecessary_building_2/1-',1}}
  _10 = match_fail `function_clause`, _0

  %% Unique:
  %%    _10
  _20 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% core_fold_SUITE.erl:524
%% Counter = 136
%% bs_ensure_opt: true
function `core_fold_SUITE`:`no_no_file`(_0) {
0:
  br ^133

133:
  _37 = new_try_tag `'catch'`
  br _37, ^35, ^36

35:
  %% core_fold_SUITE.erl:525
  %% Result type:
  %%    none()
  _24 = call (`source`/2), `true`, `any`

  %% Aliased:
  %%    _24
  _39 = succeeded:body _24
  br ^36

36:
  %% Unique:
  %%    _37
  _42 = landingpad `'catch'`, _37

  %% Aliased:
  %%    _42
  _40 = extract _42, `0`
  br ^34

34:
  %% Aliased:
  %%    _40
  %% Unique:
  %%    _37
  _1 = catch_end _37, _40

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _97 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _97, ^94, ^45

94:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _12 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _91 = bif:is_tuple _12
  br _91, ^91, ^45

91:
  %% Argument types:
  %%    _12 => {...}
  %% Aliased:
  %%    _12
  _92 = bif:tuple_size _12

  %% Argument types:
  %%    _92 => 0..16777215
  %% Unique:
  %%    _92
  _93 = bif:'=:=' _92, `2`
  br _93, ^90, ^45

90:
  %% Argument types:
  %%    _12 => {any(), any()}
  %% Aliased:
  %%    _12
  _15 = get_tuple_element _12, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _89 = bif:'=:=' _15, `{case_clause,0}`
  br _89, ^89, ^45

89:
  %% core_fold_SUITE.erl:526
  %% Result type:
  %%    fun(() -> 'surgery')
  _3 = call (`tim`/1), `#{reduction => any}`

  %% Aliased:
  %%    _3
  _46 = succeeded:body _3
  br _46, ^46, ^1

46:
  %% core_fold_SUITE.erl:526
  %% Result type:
  %%    'surgery'
  %% Argument types:
  %%    (`'-tim/1-fun-0-'`/0) => fun(() -> 'surgery')
  _16 = call (`'-tim/1-fun-0-'`/0)

  %% Unique:
  %%    _16
  _47 = succeeded:body _16
  br _47, ^86, ^1

86:
  %% core_fold_SUITE.erl:528
  %% Result type:
  %%    'false'
  _17 = call (`soul`/1), `#{[] => true}`

  %% Unique:
  %%    _17
  _50 = succeeded:body _17
  br _50, ^132, ^1

132:
  br ^134

134:
  _56 = new_try_tag `'catch'`
  br _56, ^54, ^55

54:
  %% core_fold_SUITE.erl:529
  %% Result type:
  %%    'false'
  _26 = call (`soul`/1), `#{[] => false}`

  %% Unique:
  %%    _26
  _58 = succeeded:body _26
  br _58, ^58, ^55

58:
  br ^53

55:
  %% Unique:
  %%    _56
  _61 = landingpad `'catch'`, _56

  %% Aliased:
  %%    _61
  _59 = extract _61, `0`
  br ^53

53:
  _62 = phi { _59, ^55 }, { `false`, ^58 }

  %% Aliased:
  %%    _62
  %% Unique:
  %%    _56
  _6 = catch_end _56, _62

  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _79 = is_tagged_tuple _6, `2`, `'EXIT'`
  br _79, ^76, ^64

76:
  %% Argument types:
  %%    _6 => {''EXIT'', any()}
  %% Aliased:
  %%    _6
  _18 = get_tuple_element _6, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _73 = bif:is_tuple _18
  br _73, ^73, ^64

73:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _74 = bif:tuple_size _18

  %% Argument types:
  %%    _74 => 0..16777215
  %% Unique:
  %%    _74
  _75 = bif:'=:=' _74, `2`
  br _75, ^72, ^64

72:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _21 = get_tuple_element _18, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _71 = bif:'=:=' _21, `{case_clause,true}`
  br _71, ^71, ^64

71:
  %% core_fold_SUITE.erl:531
  %% Result type:
  %%    'ok'
  _22 = call (`experiment`/0)

  %% Unique:
  %%    _22
  _65 = succeeded:body _22
  br _65, ^135, ^1

135:
  ret _22

64:
  %% core_fold_SUITE.erl:529
  %% Aliased:
  %%    _6
  _28 = match_fail `badmatch`, _6

  %% Unique:
  %%    _28
  _82 = succeeded:body _28
  br ^1

45:
  %% core_fold_SUITE.erl:525
  %% Aliased:
  %%    _1
  _31 = match_fail `badmatch`, _1

  %% Unique:
  %%    _31
  _100 = succeeded:body _31
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% core_fold_SUITE.erl:534
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'true'
%%    _1 =>
%%     'any'
function `core_fold_SUITE`:`source`(_0, _1) {
0:
  %% core_fold_SUITE.erl:535
  _8 = match_fail `case_clause`, `0`

  %% Unique:
  %%    _8
  _17 = succeeded:body _8
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% core_fold_SUITE.erl:540
%% Counter = 27
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{'reduction'=>'any'}
function `core_fold_SUITE`:`tim`(_0) {
0:
  %% Argument types:
  %%    _0 => #{'reduction'=>'any'}
  %% Unique:
  %%    _0
  _14 = has_map_field _0, `reduction`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'surgery'
  _8 = make_fun (`'-tim/1-fun-0-'`/0)
  %% Result type:
  %%    fun(() -> 'surgery')
  %% Aliased:
  %%    _8
  ret _8

13:
  %% core_fold_SUITE.erl:540
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-tim/1-',1}}
  _10 = match_fail `function_clause`, _0

  %% Unique:
  %%    _10
  _25 = succeeded:body _10
  br ^1

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% core_fold_SUITE.erl:548
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{nil()=>'false' | 'true'}
function `core_fold_SUITE`:`soul`(_0) {
0:
  %% Argument types:
  %%    _0 => #{nil()=>'false' | 'true'}
  %% Aliased:
  %%    _0
  _4 = get_map_element _0, `[]`

  %% Aliased:
  %%    _4
  _11 = succeeded:guard _4
  br _11, ^11, ^10

11:
  br _4, ^15, ^13

15:
  %% Result type:
  %%    'false'
  ret `false`

13:
  %% core_fold_SUITE.erl:549
  _6 = match_fail `case_clause`, `true`

  %% Unique:
  %%    _6
  _18 = succeeded:body _6
  br ^1

10:
  %% core_fold_SUITE.erl:548
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-soul/1-',1}}
  _7 = match_fail `function_clause`, _0

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br ^1

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% core_fold_SUITE.erl:554
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`experiment`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_fold_SUITE.erl:565
%% Counter = 48
%% bs_ensure_opt: true
function `core_fold_SUITE`:`configuration`(_0) {
0:
  br ^47

47:
  _15 = new_try_tag `'catch'`
  br _15, ^13, ^14

13:
  %% core_fold_SUITE.erl:566
  %% Result type:
  %%    none()
  _8 = call (`configuration`/0)

  %% Aliased:
  %%    _8
  _17 = succeeded:body _8
  br ^14

14:
  %% Unique:
  %%    _15
  _20 = landingpad `'catch'`, _15

  %% Aliased:
  %%    _20
  _18 = extract _20, `0`
  br ^12

12:
  %% Aliased:
  %%    _18
  %% Unique:
  %%    _15
  _1 = catch_end _15, _18

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _27 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _27, ^24, ^23

24:
  %% Result type:
  %%    'ok'
  ret `ok`

23:
  %% core_fold_SUITE.erl:566
  %% Aliased:
  %%    _1
  _9 = match_fail `badmatch`, _1

  %% Unique:
  %%    _9
  _30 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% core_fold_SUITE.erl:569
%% Counter = 18
%% bs_ensure_opt: true
function `core_fold_SUITE`:`configuration`() {
0:
  %% core_fold_SUITE.erl:570
  %% Result type:
  %%    none()
  _14 = call (`'-configuration/0-lc$^0/1-0-'`/1), `enemy`
  _17 = succeeded:body _14
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% core_fold_SUITE.erl:577
%% Counter = 162
%% bs_ensure_opt: true
function `core_fold_SUITE`:`supplies`(_0) {
0:
  br ^159

159:
  _39 = new_try_tag `'catch'`
  br _39, ^37, ^38

37:
  %% core_fold_SUITE.erl:583
  %% Result type:
  %%    none()
  _26 = call (`do_supplies`/1), `#{1 => <<1,2,3>>}`
  _41 = succeeded:body _26
  br ^38

38:
  %% Unique:
  %%    _39
  _44 = landingpad `'catch'`, _39

  %% Aliased:
  %%    _44
  _42 = extract _44, `0`
  br ^36

36:
  %% Aliased:
  %%    _42
  %% Unique:
  %%    _39
  _1 = catch_end _39, _42

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _107 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _107, ^104, ^47

104:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _13 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _101 = is_tagged_tuple _13, `2`, `function_clause`
  br _101, ^157, ^47

157:
  br ^160

160:
  _51 = new_try_tag `'catch'`
  br _51, ^49, ^50

49:
  %% core_fold_SUITE.erl:584
  %% Result type:
  %%    none()
  _28 = call (`do_supplies`/1), `#{1 => a}`
  _53 = succeeded:body _28
  br ^50

50:
  %% Unique:
  %%    _51
  _56 = landingpad `'catch'`, _51

  %% Aliased:
  %%    _56
  _54 = extract _56, `0`
  br ^48

48:
  %% Aliased:
  %%    _54
  %% Unique:
  %%    _51
  _3 = catch_end _51, _54

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _94 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _94, ^91, ^59

91:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _17 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _88 = is_tagged_tuple _17, `2`, `function_clause`
  br _88, ^158, ^59

158:
  br ^161

161:
  _63 = new_try_tag `'catch'`
  br _63, ^61, ^62

61:
  %% core_fold_SUITE.erl:585
  %% Result type:
  %%    none()
  _30 = call (`do_supplies`/1), `42`
  _65 = succeeded:body _30
  br ^62

62:
  %% Unique:
  %%    _63
  _68 = landingpad `'catch'`, _63

  %% Aliased:
  %%    _68
  _66 = extract _68, `0`
  br ^60

60:
  %% Aliased:
  %%    _66
  %% Unique:
  %%    _63
  _5 = catch_end _63, _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _81 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _81, ^78, ^71

78:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _21 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _75 = is_tagged_tuple _21, `2`, `function_clause`
  br _75, ^72, ^71

72:
  %% Result type:
  %%    'ok'
  ret `ok`

71:
  %% core_fold_SUITE.erl:585
  %% Aliased:
  %%    _5
  _31 = match_fail `badmatch`, _5

  %% Unique:
  %%    _31
  _84 = succeeded:body _31
  br ^1

59:
  %% core_fold_SUITE.erl:584
  %% Aliased:
  %%    _3
  _32 = match_fail `badmatch`, _3

  %% Unique:
  %%    _32
  _97 = succeeded:body _32
  br ^1

47:
  %% core_fold_SUITE.erl:583
  %% Aliased:
  %%    _1
  _33 = match_fail `badmatch`, _1

  %% Unique:
  %%    _33
  _110 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% core_fold_SUITE.erl:589
%% Counter = 20
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     42 | #{1=>'a' | bitstring(8)}
function `core_fold_SUITE`:`do_supplies`(_0) {
0:
  %% core_fold_SUITE.erl:589
  %% Unique:
  %%    _0
  %% Anno: #{inlined => {'-inlined-do_supplies/1-',1}}
  _8 = match_fail `function_clause`, _0

  %% Unique:
  %%    _8
  _19 = succeeded:body _8
  br ^1

1:
  _9 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _9
}

%% core_fold_SUITE.erl:591
%% Counter = 136
%% bs_ensure_opt: true
function `core_fold_SUITE`:`redundant_stack_frame`(_0) {
0:
  %% core_fold_SUITE.erl:592
  %% Result type:
  %%    {1..2, 1..2}
  _11 = call (`do_redundant_stack_frame`/1), `#{x => 1,y => 2}`

  %% Unique:
  %%    _11
  _35 = succeeded:body _11
  br _35, ^35, ^1

35:
  %% Argument types:
  %%    _11 => {1..2, 1..2}
  %% Unique:
  %%    _11
  _100 = bif:'=:=' _11, `{1,2}`
  br _100, ^132, ^37

132:
  br ^134

134:
  _41 = new_try_tag `'catch'`
  br _41, ^39, ^40

39:
  %% core_fold_SUITE.erl:593
  %% Result type:
  %%    {1..2, 1..2}
  _27 = call (`do_redundant_stack_frame`/1), `#{y => 2}`

  %% Unique:
  %%    _27
  _43 = succeeded:body _27
  br _43, ^43, ^40

43:
  br ^38

40:
  %% Unique:
  %%    _41
  _46 = landingpad `'catch'`, _41

  %% Aliased:
  %%    _46
  _44 = extract _46, `0`
  br ^38

38:
  _47 = phi { _44, ^40 }, { _27, ^43 }

  %% Aliased:
  %%    _47
  %% Unique:
  %%    _41
  _2 = catch_end _41, _47

  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _96 = is_tagged_tuple _2, `2`, `'EXIT'`
  br _96, ^93, ^49

93:
  %% Argument types:
  %%    _2 => {''EXIT'', any()}
  %% Aliased:
  %%    _2
  _12 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _90 = bif:is_tuple _12
  br _90, ^90, ^49

90:
  %% Argument types:
  %%    _12 => {...}
  %% Aliased:
  %%    _12
  _91 = bif:tuple_size _12

  %% Argument types:
  %%    _91 => 0..16777215
  %% Unique:
  %%    _91
  _92 = bif:'=:=' _91, `2`
  br _92, ^89, ^49

89:
  %% Argument types:
  %%    _12 => {any(), any()}
  %% Aliased:
  %%    _12
  _15 = get_tuple_element _12, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _86 = is_tagged_tuple _15, `3`, `badkey`
  br _86, ^83, ^49

83:
  %% Argument types:
  %%    _15 => {'badkey', any(), any()}
  %% Aliased:
  %%    _15
  _16 = get_tuple_element _15, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _82 = bif:'=:=' _16, `x`
  br _82, ^133, ^49

133:
  br ^135

135:
  _53 = new_try_tag `'catch'`
  br _53, ^51, ^52

51:
  %% core_fold_SUITE.erl:594
  %% Result type:
  %%    {1..2, 1..2}
  _29 = call (`do_redundant_stack_frame`/1), `#{x => 1}`

  %% Unique:
  %%    _29
  _55 = succeeded:body _29
  br _55, ^55, ^52

55:
  br ^50

52:
  %% Unique:
  %%    _53
  _58 = landingpad `'catch'`, _53

  %% Aliased:
  %%    _58
  _56 = extract _58, `0`
  br ^50

50:
  _59 = phi { _56, ^52 }, { _29, ^55 }

  %% Aliased:
  %%    _59
  %% Unique:
  %%    _53
  _4 = catch_end _53, _59

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _77 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _77, ^74, ^61

74:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _19 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _71 = bif:is_tuple _19
  br _71, ^71, ^61

71:
  %% Argument types:
  %%    _19 => {...}
  %% Aliased:
  %%    _19
  _72 = bif:tuple_size _19

  %% Argument types:
  %%    _72 => 0..16777215
  %% Unique:
  %%    _72
  _73 = bif:'=:=' _72, `2`
  br _73, ^70, ^61

70:
  %% Argument types:
  %%    _19 => {any(), any()}
  %% Aliased:
  %%    _19
  _22 = get_tuple_element _19, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _67 = is_tagged_tuple _22, `3`, `badkey`
  br _67, ^64, ^61

64:
  %% Argument types:
  %%    _22 => {'badkey', any(), any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _63 = bif:'=:=' _23, `y`
  br _63, ^62, ^61

62:
  %% Result type:
  %%    'ok'
  ret `ok`

61:
  %% core_fold_SUITE.erl:594
  %% Aliased:
  %%    _4
  _30 = match_fail `badmatch`, _4

  %% Unique:
  %%    _30
  _80 = succeeded:body _30
  br ^1

49:
  %% core_fold_SUITE.erl:593
  %% Aliased:
  %%    _2
  _31 = match_fail `badmatch`, _2

  %% Unique:
  %%    _31
  _99 = succeeded:body _31
  br ^1

37:
  %% core_fold_SUITE.erl:592
  %% Unique:
  %%    _11
  _32 = match_fail `badmatch`, _11

  %% Unique:
  %%    _32
  _101 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% core_fold_SUITE.erl:597
%% Counter = 36
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     #{'x' | 'y'=>1..2}
function `core_fold_SUITE`:`do_redundant_stack_frame`(_0) {
0:
  %% Argument types:
  %%    _0 => #{'x' | 'y'=>1..2}
  %% Aliased:
  %%    _0
  _6 = get_map_element _0, `x`

  %% Aliased:
  %%    _6
  _20 = succeeded:guard _6
  br _20, ^29, ^19

29:
  %% Argument types:
  %%    _0 => #{'x' | 'y'=>1..2}
  %% Aliased:
  %%    _0
  _8 = get_map_element _0, `y`

  %% Aliased:
  %%    _8
  _27 = succeeded:guard _8
  br _27, ^27, ^26

27:
  %% Argument types:
  %%    _6 => 1..2
  %%    _8 => 1..2
  %% Unique:
  %%    _6, 
  %%    _8
  _33 = put_tuple _6, _8
  %% Result type:
  %%    {1..2, 1..2}
  %% Unique:
  %%    _33
  ret _33

26:
  %% Argument types:
  %%    _0 => #{'x' | 'y'=>1..2}
  %% Aliased:
  %%    _0
  _9 = put_tuple `badkey`, _0, `y`

  %% core_fold_SUITE.erl:609
  %% Unique:
  %%    _9
  _12 = call (`erlang`:`error`/1), _9

  %% Aliased:
  %%    _12
  _28 = succeeded:body _12
  br ^1

19:
  %% Argument types:
  %%    _0 => #{'x' | 'y'=>1..2}
  %% Aliased:
  %%    _0
  _7 = put_tuple `badkey`, _0, `x`

  %% core_fold_SUITE.erl:603
  %% Unique:
  %%    _7
  _10 = call (`erlang`:`error`/1), _7

  %% Aliased:
  %%    _10
  _21 = succeeded:body _10
  br ^1

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% core_fold_SUITE.erl:617
%% Counter = 48
%% bs_ensure_opt: true
function `core_fold_SUITE`:`export_from_case`(_0) {
0:
  %% core_fold_SUITE.erl:618
  _8 = call (`export_from_case_1`/1), `true`

  %% Aliased:
  %%    _8
  _20 = succeeded:body _8
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _46 = bif:'=:=' _8, `a`
  br _46, ^45, ^22

45:
  %% core_fold_SUITE.erl:619
  _9 = call (`export_from_case_1`/1), `false`

  %% Aliased:
  %%    _9
  _23 = succeeded:body _9
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _43 = bif:'=:=' _9, `b`
  br _43, ^42, ^25

42:
  %% core_fold_SUITE.erl:622
  %% Result type:
  %%    {'ok', {'export_from_case', 0}}
  _10 = call (`export_from_case_2`/2), `false`, `{export_from_case,0}`

  %% Unique:
  %%    _10
  _26 = succeeded:body _10
  br _26, ^29, ^1

29:
  %% core_fold_SUITE.erl:623
  %% Result type:
  %%    {'ok', {'export_from_case', 42}}
  _13 = call (`export_from_case_2`/2), `true`, `{export_from_case,0}`

  %% Unique:
  %%    _13
  _30 = succeeded:body _13
  br _30, ^33, ^1

33:
  %% Result type:
  %%    'ok'
  ret `ok`

25:
  %% core_fold_SUITE.erl:619
  %% Aliased:
  %%    _9
  _16 = match_fail `badmatch`, _9

  %% Unique:
  %%    _16
  _44 = succeeded:body _16
  br ^1

22:
  %% core_fold_SUITE.erl:618
  %% Aliased:
  %%    _8
  _17 = match_fail `badmatch`, _8

  %% Unique:
  %%    _17
  _47 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% core_fold_SUITE.erl:627
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
function `core_fold_SUITE`:`export_from_case_1`(_0) {
0:
  br _0, ^17, ^16

17:
  %% core_fold_SUITE.erl:630
  _7 = call (`id`/1), `42`

  %% Aliased:
  %%    _7
  _15 = succeeded:body _7
  br _15, ^15, ^1

15:
  br ^13

16:
  br ^13

13:
  Result = phi { `a`, ^15 }, { `b`, ^16 }

  %% core_fold_SUITE.erl:635
  %% Unique:
  %%    Result
  _10 = call (`id`/1), Result

  %% Aliased:
  %%    _10
  _19 = succeeded:body _10
  br _19, ^19, ^1

19:
  %% Aliased:
  %%    _10
  ret _10

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% core_fold_SUITE.erl:637
%% Counter = 42
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'false' | 'true'
%%    _1 =>
%%     {'export_from_case', 0}
function `core_fold_SUITE`:`export_from_case_2`(_0, _1) {
0:
  br _0, ^27, ^35

27:
  %% Result type:
  %%    {'ok', {'export_from_case', 42}}
  ret `{ok,{export_from_case,42}}`

35:
  %% Result type:
  %%    {'ok', {'export_from_case', 0}}
  ret `{ok,{export_from_case,0}}`
}

%% core_fold_SUITE.erl:646
%% Counter = 61
%% bs_ensure_opt: true
function `core_fold_SUITE`:`empty_values`(_0) {
0:
  br ^60

60:
  _22 = new_try_tag `'catch'`
  br _22, ^20, ^21

20:
  %% core_fold_SUITE.erl:651
  %% Result type:
  %%    none()
  _15 = call (`do_empty_values`/0)

  %% Aliased:
  %%    _15
  _24 = succeeded:body _15
  br ^21

21:
  %% Unique:
  %%    _22
  _27 = landingpad `'catch'`, _22

  %% Aliased:
  %%    _27
  _25 = extract _27, `0`
  br ^19

19:
  %% Aliased:
  %%    _25
  %% Unique:
  %%    _22
  _3 = catch_end _22, _25

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _40 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _40, ^37, ^30

37:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _10 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _34 = is_tagged_tuple _10, `2`, `function_clause`
  br _34, ^29, ^30

29:
  %% Result type:
  %%    'ok'
  ret `ok`

30:
  %% core_fold_SUITE.erl:651
  %% Aliased:
  %%    _3
  _16 = match_fail `badmatch`, _3

  %% Unique:
  %%    _16
  _43 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% core_fold_SUITE.erl:655
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`do_empty_values`() {
0:
  %% core_fold_SUITE.erl:655
  %% Anno: #{inlined => {'-inlined-do_empty_values/0-',0}}
  _2 = match_fail `function_clause`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:658
%% Counter = 181
%% bs_ensure_opt: true
function `core_fold_SUITE`:`cover_letrec_effect`(_0) {
0:
  %% core_fold_SUITE.erl:659
  %% Argument types:
  %%    
  _1 = bif:self

  %% core_fold_SUITE.erl:659
  %% Unique:
  %%    _1
  _50 = call (`erlang`:`'!'`/2), _1, `{tag,42}`

  %% Aliased:
  %%    _50
  _64 = succeeded:body _50
  br _64, ^175, ^1

175:
  br ^178

178:
  _69 = new_try_tag `'try'`
  br _69, ^68, ^66

68:
  br ^40

40:
  %% core_fold_SUITE.erl:664
  _31 = peek_message `none`

  %% Aliased:
  %%    _31
  _89 = succeeded:guard _31
  br _89, ^87, ^88

87:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _79 = is_tagged_tuple _31, `2`, `tag`
  br _79, ^76, ^73

76:
  %% Argument types:
  %%    _31 => {'tag', any()}
  %% Aliased:
  %%    _31
  _41 = get_tuple_element _31, `1`
  _52 = remove_message

  %% core_fold_SUITE.erl:666
  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  %% Anno: #{unit => 16}
  _2 = bs_create_bin `integer`, `[1,{segment,1}]`, _41, `16`

  %% Aliased:
  %%    _2
  _74 = succeeded:body _2
  br _74, ^74, ^66

74:
  %% Argument types:
  %%    _31 => {'tag', any()}
  %%    _2 => bitstring(16)
  %% Aliased:
  %%    _2, 
  %%    _31
  _43 = put_tuple _31, _2

  %% core_fold_SUITE.erl:666
  %% Unique:
  %%    _43
  Res = put_map `assoc`, `#{}`, `k`, _43

  %% core_fold_SUITE.erl:667
  %% Argument types:
  %%    
  _4 = bif:self

  %% core_fold_SUITE.erl:667
  %% Aliased:
  %%    Res
  %% Unique:
  %%    _4
  _53 = call (`erlang`:`'!'`/2), _4, Res

  %% Aliased:
  %%    _53
  _75 = succeeded:body _53
  br _75, ^71, ^66

71:
  %% Unique:
  %%    _69
  _93 = kill_try_tag _69
  br ^44

44:
  %% core_fold_SUITE.erl:673
  _37 = peek_message `none`

  %% Aliased:
  %%    _37
  _109 = succeeded:guard _37
  br _109, ^107, ^108

107:
  _56 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _37
  _100 = bif:is_map _37
  br _100, ^100, ^97

100:
  %% Argument types:
  %%    _37 => map()
  %% Aliased:
  %%    _37
  _45 = get_map_element _37, `k`

  %% Aliased:
  %%    _45
  _98 = succeeded:guard _45
  br _98, ^98, ^97

98:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _99 = bif:'=:=' _45, `{{tag,42},<<0,42>>}`
  br _99, ^176, ^97

176:
  br ^179

179:
  _114 = new_try_tag `'try'`
  br _114, ^113, ^111

113:
  %% core_fold_SUITE.erl:678
  %% Result type:
  %%    none()
  _59 = call (`cover_letrec_effect_1`/0)

  %% Aliased:
  %%    _59
  _115 = succeeded:body _59
  br ^111

111:
  %% Unique:
  %%    _114
  _116 = landingpad `'try'`, _114

  %% Unique:
  %%    _114
  _117 = kill_try_tag _114
  br ^174

174:
  br ^180

180:
  _123 = new_try_tag `'try'`
  br _123, ^122, ^120

122:
  %% core_fold_SUITE.erl:679
  %% Result type:
  %%    'ok'
  _61 = call (`cover_letrec_effect_2`/0)

  %% Unique:
  %%    _61
  _124 = succeeded:body _61
  br _124, ^124, ^120

124:
  %% Unique:
  %%    _123
  _127 = kill_try_tag _123
  br ^121

120:
  %% Unique:
  %%    _123
  _125 = landingpad `'try'`, _123

  %% Unique:
  %%    _123
  _126 = kill_try_tag _123
  br ^121

121:
  %% Result type:
  %%    'ok'
  ret `ok`

97:
  %% core_fold_SUITE.erl:675
  %% Aliased:
  %%    _37
  _57 = match_fail `badmatch`, _37

  %% Unique:
  %%    _57
  _101 = succeeded:body _57
  br ^1

108:
  _102 = wait_timeout `infinity`

  %% Unique:
  %%    _102
  _103 = succeeded:body _102
  br _103, ^106, ^1

106:
  br ^44

73:
  _54 = recv_next
  br ^40

88:
  _82 = wait_timeout `infinity`

  %% Unique:
  %%    _82
  _83 = succeeded:body _82
  br _83, ^86, ^66

86:
  br ^40

66:
  %% Unique:
  %%    _69
  _91 = landingpad `'try'`, _69

  %% Aliased:
  %%    _91
  _14 = extract _91, `1`

  %% Aliased:
  %%    _91
  _13 = extract _91, `2`

  %% Unique:
  %%    _69
  _92 = kill_try_tag _69

  %% Aliased:
  %%    _13, 
  %%    _14
  _55 = resume _13, _14

  %% Unique:
  %%    _55
  _90 = succeeded:body _55
  br ^1

1:
  _62 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _62
}

%% core_fold_SUITE.erl:683
%% Counter = 7
%% bs_ensure_opt: true
function `core_fold_SUITE`:`cover_letrec_effect_1`() {
0:
  %% core_fold_SUITE.erl:684
  %% Result type:
  %%    none()
  _3 = call (`'-cover_letrec_effect_1/0-after$^0/0-0-'`/0)

  %% Aliased:
  %%    _3
  _6 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_fold_SUITE.erl:697
%% Counter = 10
%% bs_ensure_opt: true
function `core_fold_SUITE`:`cover_letrec_effect_2`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% core_fold_SUITE.erl:703
%% Counter = 15
%% bs_ensure_opt: true
function `core_fold_SUITE`:`receive_effect`(_0) {
0:
  %% core_fold_SUITE.erl:704
  %% Argument types:
  %%    
  _1 = bif:self

  %% core_fold_SUITE.erl:704
  %% Unique:
  %%    _1
  _4 = call (`erlang`:`'!'`/2), _1, `whatever`

  %% Aliased:
  %%    _4
  _8 = succeeded:body _4
  br _8, ^8, ^1

8:
  %% core_fold_SUITE.erl:705
  %% Result type:
  %%    {}
  _3 = call (`do_receive_effect`/0)

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^12, ^1

12:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% core_fold_SUITE.erl:708
%% Counter = 28
%% bs_ensure_opt: true
function `core_fold_SUITE`:`do_receive_effect`() {
0:
  br ^7

7:
  %% core_fold_SUITE.erl:709
  _4 = peek_message `none`

  %% Aliased:
  %%    _4
  _23 = succeeded:guard _4
  br _23, ^21, ^22

21:
  _10 = remove_message
  %% Result type:
  %%    {}
  ret `{}`

22:
  _16 = wait_timeout `infinity`

  %% Unique:
  %%    _16
  _17 = succeeded:body _16
  br _17, ^20, ^1

20:
  br ^7

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% core_fold_SUITE.erl:711
%% Counter = 326
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets`(_0) {
0:
  br ^320

320:
  _72 = new_try_tag `'catch'`
  br _72, ^70, ^71

70:
  %% core_fold_SUITE.erl:712
  %% Result type:
  %%    none()
  _50 = call (`nested_lets_1`/1), `<<"*">>`

  %% Aliased:
  %%    _50
  _74 = succeeded:body _50
  br ^71

71:
  %% Unique:
  %%    _72
  _77 = landingpad `'catch'`, _72

  %% Aliased:
  %%    _77
  _75 = extract _77, `0`
  br ^69

69:
  %% Aliased:
  %%    _75
  %% Unique:
  %%    _72
  _1 = catch_end _72, _75

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _220 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _220, ^217, ^80

217:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _23 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _214 = bif:is_tuple _23
  br _214, ^214, ^80

214:
  %% Argument types:
  %%    _23 => {...}
  %% Aliased:
  %%    _23
  _215 = bif:tuple_size _23

  %% Argument types:
  %%    _215 => 0..16777215
  %% Unique:
  %%    _215
  _216 = bif:'=:=' _215, `2`
  br _216, ^213, ^80

213:
  %% Argument types:
  %%    _23 => {any(), any()}
  %% Aliased:
  %%    _23
  _26 = get_tuple_element _23, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _212 = bif:'=:=' _26, `{case_clause,ok}`
  br _212, ^315, ^80

315:
  br ^321

321:
  _84 = new_try_tag `'catch'`
  br _84, ^82, ^83

82:
  %% core_fold_SUITE.erl:713
  _4 = call (`id`/1), `0`

  %% Aliased:
  %%    _4
  _86 = succeeded:body _4
  br _86, ^86, ^83

86:
  %% core_fold_SUITE.erl:713
  _3 = call (`id`/1), `0`

  %% Aliased:
  %%    _3
  _87 = succeeded:body _3
  br _87, ^87, ^83

87:
  %% core_fold_SUITE.erl:713
  %% Result type:
  %%    none()
  %% Aliased:
  %%    _3, 
  %%    _4
  _52 = call (`nested_lets_2`/2), _4, _3

  %% Aliased:
  %%    _52
  _88 = succeeded:body _52
  br ^83

83:
  %% Unique:
  %%    _84
  _91 = landingpad `'catch'`, _84

  %% Aliased:
  %%    _91
  _89 = extract _91, `0`
  br ^81

81:
  %% Aliased:
  %%    _89
  %% Unique:
  %%    _84
  _5 = catch_end _84, _89

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _208 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _208, ^205, ^94

205:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _27 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _202 = is_tagged_tuple _27, `2`, `badarith`
  br _202, ^316, ^94

316:
  br ^322

322:
  _98 = new_try_tag `'catch'`
  br _98, ^96, ^97

96:
  %% core_fold_SUITE.erl:714
  %% Result type:
  %%    none()
  _54 = call (`nested_lets_3`/0)

  %% Aliased:
  %%    _54
  _100 = succeeded:body _54
  br ^97

97:
  %% Unique:
  %%    _98
  _103 = landingpad `'catch'`, _98

  %% Aliased:
  %%    _103
  _101 = extract _103, `0`
  br ^95

95:
  %% Aliased:
  %%    _101
  %% Unique:
  %%    _98
  _7 = catch_end _98, _101

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _195 = is_tagged_tuple _7, `2`, `'EXIT'`
  br _195, ^192, ^106

192:
  %% Argument types:
  %%    _7 => {''EXIT'', any()}
  %% Aliased:
  %%    _7
  _31 = get_tuple_element _7, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _31
  _189 = is_tagged_tuple _31, `2`, `badarith`
  br _189, ^317, ^106

317:
  br ^323

323:
  _110 = new_try_tag `'catch'`
  br _110, ^108, ^109

108:
  %% core_fold_SUITE.erl:715
  %% Result type:
  %%    none()
  _56 = call (`nested_lets_4`/0)

  %% Aliased:
  %%    _56
  _112 = succeeded:body _56
  br ^109

109:
  %% Unique:
  %%    _110
  _115 = landingpad `'catch'`, _110

  %% Aliased:
  %%    _115
  _113 = extract _115, `0`
  br ^107

107:
  %% Aliased:
  %%    _113
  %% Unique:
  %%    _110
  _9 = catch_end _110, _113

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _182 = is_tagged_tuple _9, `2`, `'EXIT'`
  br _182, ^179, ^118

179:
  %% Argument types:
  %%    _9 => {''EXIT'', any()}
  %% Aliased:
  %%    _9
  _35 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _176 = is_tagged_tuple _35, `2`, `undef`
  br _176, ^318, ^118

318:
  br ^324

324:
  _122 = new_try_tag `'catch'`
  br _122, ^120, ^121

120:
  %% core_fold_SUITE.erl:716
  %% Result type:
  %%    none()
  _58 = call (`nested_lets_5`/0)

  %% Aliased:
  %%    _58
  _124 = succeeded:body _58
  br ^121

121:
  %% Unique:
  %%    _122
  _127 = landingpad `'catch'`, _122

  %% Aliased:
  %%    _127
  _125 = extract _127, `0`
  br ^119

119:
  %% Aliased:
  %%    _125
  %% Unique:
  %%    _122
  _11 = catch_end _122, _125

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _169 = is_tagged_tuple _11, `2`, `'EXIT'`
  br _169, ^166, ^130

166:
  %% Argument types:
  %%    _11 => {''EXIT'', any()}
  %% Aliased:
  %%    _11
  _39 = get_tuple_element _11, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _163 = bif:is_tuple _39
  br _163, ^163, ^130

163:
  %% Argument types:
  %%    _39 => {...}
  %% Aliased:
  %%    _39
  _164 = bif:tuple_size _39

  %% Argument types:
  %%    _164 => 0..16777215
  %% Unique:
  %%    _164
  _165 = bif:'=:=' _164, `2`
  br _165, ^162, ^130

162:
  %% Argument types:
  %%    _39 => {any(), any()}
  %% Aliased:
  %%    _39
  _42 = get_tuple_element _39, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _159 = is_tagged_tuple _42, `2`, `case_clause`
  br _159, ^319, ^130

319:
  br ^325

325:
  _134 = new_try_tag `'catch'`
  br _134, ^132, ^133

132:
  %% core_fold_SUITE.erl:717
  %% Result type:
  %%    none()
  _60 = call (`nested_lets_6`/0)

  %% Aliased:
  %%    _60
  _136 = succeeded:body _60
  br ^133

133:
  %% Unique:
  %%    _134
  _139 = landingpad `'catch'`, _134

  %% Aliased:
  %%    _139
  _137 = extract _139, `0`
  br ^131

131:
  %% Aliased:
  %%    _137
  %% Unique:
  %%    _134
  _13 = catch_end _134, _137

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _152 = is_tagged_tuple _13, `2`, `'EXIT'`
  br _152, ^149, ^142

149:
  %% Argument types:
  %%    _13 => {''EXIT'', any()}
  %% Aliased:
  %%    _13
  _45 = get_tuple_element _13, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _45
  _146 = is_tagged_tuple _45, `2`, `badarith`
  br _146, ^143, ^142

143:
  %% Result type:
  %%    'ok'
  ret `ok`

142:
  %% core_fold_SUITE.erl:717
  %% Aliased:
  %%    _13
  _61 = match_fail `badmatch`, _13

  %% Unique:
  %%    _61
  _155 = succeeded:body _61
  br ^1

130:
  %% core_fold_SUITE.erl:716
  %% Aliased:
  %%    _11
  _62 = match_fail `badmatch`, _11

  %% Unique:
  %%    _62
  _172 = succeeded:body _62
  br ^1

118:
  %% core_fold_SUITE.erl:715
  %% Aliased:
  %%    _9
  _63 = match_fail `badmatch`, _9

  %% Unique:
  %%    _63
  _185 = succeeded:body _63
  br ^1

106:
  %% core_fold_SUITE.erl:714
  %% Aliased:
  %%    _7
  _64 = match_fail `badmatch`, _7

  %% Unique:
  %%    _64
  _198 = succeeded:body _64
  br ^1

94:
  %% core_fold_SUITE.erl:713
  %% Aliased:
  %%    _5
  _65 = match_fail `badmatch`, _5

  %% Unique:
  %%    _65
  _211 = succeeded:body _65
  br ^1

80:
  %% core_fold_SUITE.erl:712
  %% Aliased:
  %%    _1
  _66 = match_fail `badmatch`, _1

  %% Unique:
  %%    _66
  _223 = succeeded:body _66
  br ^1

1:
  _67 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _67
}

%% core_fold_SUITE.erl:725
%% Counter = 95
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     bitstring(8)
%%     accepts_match_context
function `core_fold_SUITE`:`nested_lets_1`(_0) {
0:
  %% Argument types:
  %%    _0 => bitstring(8)
  %% Aliased:
  %%    _0
  %% Anno: #{accepts_match_contexts => true}
  _38 = bs_start_match `new`, _0

  %% core_fold_SUITE.erl:725
  %% Aliased:
  %%    _38
  _39 = bs_test_tail _38, `8`
  br _39, ^59, ^56

59:
  %% core_fold_SUITE.erl:727
  _51 = match_fail `case_clause`, `ok`

  %% Unique:
  %%    _51
  _80 = succeeded:body _51
  br ^1

56:
  %% Aliased:
  %%    _38
  _93 = bs_get_tail _38

  %% core_fold_SUITE.erl:725
  %% Aliased:
  %%    _93
  %% Anno: #{inlined => {'-inlined-nested_lets_1/1-',1}}
  _53 = match_fail `function_clause`, _93

  %% Unique:
  %%    _53
  _87 = succeeded:body _53
  br ^1

1:
  _92 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _92
}

%% core_fold_SUITE.erl:760
%% Counter = 176
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets_2`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _137 = bif:'=:=' _1, `0`
  br _137, ^172, ^86

172:
  br ^174

174:
  _91 = new_try_tag `'try'`
  br _91, ^173, ^88

173:
  br ^175

175:
  _96 = new_try_tag `'try'`
  br _96, ^95, ^93

95:
  %% core_fold_SUITE.erl:764
  %% Argument types:
  %%    
  _39 = bif:'bnot' `ok`

  %% Unique:
  %%    _39
  _97 = succeeded:body _39
  br ^93

93:
  %% Unique:
  %%    _96
  _129 = landingpad `'try'`, _96

  %% Aliased:
  %%    _129
  _46 = extract _129, `1`

  %% Aliased:
  %%    _129
  _45 = extract _129, `2`

  %% Unique:
  %%    _96
  _130 = kill_try_tag _96

  %% Aliased:
  %%    _45, 
  %%    _46
  _81 = resume _45, _46

  %% Unique:
  %%    _81
  _128 = succeeded:body _81
  br ^88

88:
  %% Unique:
  %%    _91
  _133 = landingpad `'try'`, _91

  %% Aliased:
  %%    _133
  _51 = extract _133, `1`

  %% Aliased:
  %%    _133
  _50 = extract _133, `2`

  %% Unique:
  %%    _91
  _134 = kill_try_tag _91

  %% Aliased:
  %%    _50, 
  %%    _51
  _82 = resume _50, _51

  %% Unique:
  %%    _82
  _132 = succeeded:body _82
  br ^1

86:
  %% core_fold_SUITE.erl:760
  %% Aliased:
  %%    _0, 
  %%    _1
  %% Anno: #{inlined => {'-inlined-nested_lets_2/2-',2}}
  _83 = match_fail `function_clause`, _0, _1

  %% Unique:
  %%    _83
  _138 = succeeded:body _83
  br ^1

1:
  _84 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _84
}

%% core_fold_SUITE.erl:811
%% Counter = 78
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets_3`() {
0:
  br ^76

76:
  _28 = new_try_tag `'try'`
  br _28, ^75, ^25

75:
  br ^77

77:
  _33 = new_try_tag `'try'`
  br _33, ^32, ^30

32:
  %% core_fold_SUITE.erl:812
  %% Argument types:
  %%    
  _3 = bif:'*' `ok`, `ok`

  %% Unique:
  %%    _3
  _34 = succeeded:body _3
  br ^30

30:
  %% Unique:
  %%    _33
  _37 = landingpad `'try'`, _33

  %% Aliased:
  %%    _37
  _7 = extract _37, `1`

  %% Aliased:
  %%    _37
  _6 = extract _37, `2`

  %% Unique:
  %%    _33
  _38 = kill_try_tag _33

  %% Aliased:
  %%    _6, 
  %%    _7
  _20 = resume _6, _7

  %% Unique:
  %%    _20
  _36 = succeeded:body _20
  br ^25

25:
  %% Unique:
  %%    _28
  _41 = landingpad `'try'`, _28

  %% Aliased:
  %%    _41
  _12 = extract _41, `1`

  %% Aliased:
  %%    _41
  _11 = extract _41, `2`

  %% Unique:
  %%    _28
  _42 = kill_try_tag _28

  %% Aliased:
  %%    _11, 
  %%    _12
  _21 = resume _11, _12

  %% Unique:
  %%    _21
  _40 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% core_fold_SUITE.erl:819
%% Counter = 80
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets_4`() {
0:
  br ^78

78:
  _30 = new_try_tag `'try'`
  br _30, ^77, ^27

77:
  br ^79

79:
  _35 = new_try_tag `'try'`
  br _35, ^34, ^32

34:
  %% core_fold_SUITE.erl:821
  _1 = call (`core_fold_SUITE`:`undef`/0)

  %% Aliased:
  %%    _1
  _36 = succeeded:body _1
  br _36, ^36, ^32

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _4 = put_tuple `ok`, _1

  %% core_fold_SUITE.erl:821
  %% Unique:
  %%    _4
  _21 = match_fail `case_clause`, _4

  %% Unique:
  %%    _21
  _37 = succeeded:body _21
  br ^32

32:
  %% Unique:
  %%    _35
  _39 = landingpad `'try'`, _35

  %% Aliased:
  %%    _39
  _9 = extract _39, `1`

  %% Aliased:
  %%    _39
  _8 = extract _39, `2`

  %% Unique:
  %%    _35
  _40 = kill_try_tag _35

  %% Aliased:
  %%    _8, 
  %%    _9
  _22 = resume _8, _9

  %% Unique:
  %%    _22
  _38 = succeeded:body _22
  br ^27

27:
  %% Unique:
  %%    _30
  _43 = landingpad `'try'`, _30

  %% Aliased:
  %%    _43
  _14 = extract _43, `1`

  %% Aliased:
  %%    _43
  _13 = extract _43, `2`

  %% Unique:
  %%    _30
  _44 = kill_try_tag _30

  %% Aliased:
  %%    _13, 
  %%    _14
  _23 = resume _13, _14

  %% Unique:
  %%    _23
  _42 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% core_fold_SUITE.erl:835
%% Counter = 37
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets_5`() {
0:
  %% core_fold_SUITE.erl:836
  %% Argument types:
  %%    
  _17 = bif:self

  %% core_fold_SUITE.erl:836
  %% Unique:
  %%    _17
  _25 = match_fail `case_clause`, _17

  %% Unique:
  %%    _25
  _36 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% core_fold_SUITE.erl:851
%% Counter = 98
%% bs_ensure_opt: true
function `core_fold_SUITE`:`nested_lets_6`() {
0:
  br ^96

96:
  _39 = new_try_tag `'try'`
  br _39, ^91, ^36

91:
  %% core_fold_SUITE.erl:852
  _92 = float:put `1.0`

  %% core_fold_SUITE.erl:852
  _93 = float:put `0.0`
  br ^97

97:
  _44 = new_try_tag `'try'`
  br _44, ^43, ^41

43:
  %% core_fold_SUITE.erl:852
  %% Unique:
  %%    _92, 
  %%    _93
  _94 = float:'/' _92, _93

  %% Unique:
  %%    _94
  _45 = succeeded:body _94
  br _45, ^45, ^41

45:
  %% core_fold_SUITE.erl:852
  _23 = match_fail `badmap`, `ok`

  %% Unique:
  %%    _23
  _46 = succeeded:body _23
  br ^41

41:
  %% Unique:
  %%    _44
  _53 = landingpad `'try'`, _44

  %% Aliased:
  %%    _53
  _11 = extract _53, `1`

  %% Aliased:
  %%    _53
  _10 = extract _53, `2`

  %% Unique:
  %%    _44
  _54 = kill_try_tag _44

  %% Aliased:
  %%    _10, 
  %%    _11
  _31 = resume _10, _11

  %% Unique:
  %%    _31
  _52 = succeeded:body _31
  br ^36

36:
  %% Unique:
  %%    _39
  _57 = landingpad `'try'`, _39

  %% Aliased:
  %%    _57
  _16 = extract _57, `1`

  %% Aliased:
  %%    _57
  _15 = extract _57, `2`

  %% Unique:
  %%    _39
  _58 = kill_try_tag _39

  %% Aliased:
  %%    _15, 
  %%    _16
  _32 = resume _15, _16

  %% Unique:
  %%    _32
  _56 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% core_fold_SUITE.erl:859
%% Counter = 157
%% bs_ensure_opt: true
function `core_fold_SUITE`:`map_effect`(_0) {
0:
  br ^154

154:
  _37 = new_try_tag `'catch'`
  br _37, ^35, ^36

35:
  %% core_fold_SUITE.erl:860
  %% Result type:
  %%    'ok'
  _24 = call (`map_effect_1`/0)

  %% Unique:
  %%    _24
  _39 = succeeded:body _24
  br _39, ^39, ^36

39:
  br ^34

36:
  %% Unique:
  %%    _37
  _42 = landingpad `'catch'`, _37

  %% Aliased:
  %%    _42
  _40 = extract _42, `0`
  br ^34

34:
  _43 = phi { _40, ^36 }, { `ok`, ^39 }

  %% Aliased:
  %%    _43
  %% Unique:
  %%    _37
  _1 = catch_end _37, _43

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _102 = is_tagged_tuple _1, `2`, `'EXIT'`
  br _102, ^99, ^45

99:
  %% Argument types:
  %%    _1 => {''EXIT'', any()}
  %% Aliased:
  %%    _1
  _11 = get_tuple_element _1, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _96 = bif:is_tuple _11
  br _96, ^96, ^45

96:
  %% Argument types:
  %%    _11 => {...}
  %% Aliased:
  %%    _11
  _97 = bif:tuple_size _11

  %% Argument types:
  %%    _97 => 0..16777215
  %% Unique:
  %%    _97
  _98 = bif:'=:=' _97, `2`
  br _98, ^95, ^45

95:
  %% Argument types:
  %%    _11 => {any(), any()}
  %% Aliased:
  %%    _11
  _14 = get_tuple_element _11, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _94 = bif:'=:=' _14, `{badkey,key}`
  br _94, ^152, ^45

152:
  br ^155

155:
  _49 = new_try_tag `'catch'`
  br _49, ^47, ^48

47:
  %% core_fold_SUITE.erl:862
  %% Result type:
  %%    'ok'
  _26 = call (`map_effect_2`/1), `#{}`

  %% Unique:
  %%    _26
  _51 = succeeded:body _26
  br _51, ^51, ^48

51:
  br ^46

48:
  %% Unique:
  %%    _49
  _54 = landingpad `'catch'`, _49

  %% Aliased:
  %%    _54
  _52 = extract _54, `0`
  br ^46

46:
  _55 = phi { _52, ^48 }, { `ok`, ^51 }

  %% Aliased:
  %%    _55
  %% Unique:
  %%    _49
  _3 = catch_end _49, _55

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _90 = is_tagged_tuple _3, `2`, `'EXIT'`
  br _90, ^87, ^57

87:
  %% Argument types:
  %%    _3 => {''EXIT'', any()}
  %% Aliased:
  %%    _3
  _15 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _84 = bif:is_tuple _15
  br _84, ^84, ^57

84:
  %% Argument types:
  %%    _15 => {...}
  %% Aliased:
  %%    _15
  _85 = bif:tuple_size _15

  %% Argument types:
  %%    _85 => 0..16777215
  %% Unique:
  %%    _85
  _86 = bif:'=:=' _85, `2`
  br _86, ^83, ^57

83:
  %% Argument types:
  %%    _15 => {any(), any()}
  %% Aliased:
  %%    _15
  _18 = get_tuple_element _15, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _82 = bif:'=:=' _18, `{badkey,key}`
  br _82, ^153, ^57

153:
  br ^156

156:
  _61 = new_try_tag `'catch'`
  br _61, ^59, ^60

59:
  %% core_fold_SUITE.erl:863
  %% Result type:
  %%    none()
  _28 = call (`map_effect_2`/1), `no_map`

  %% Aliased:
  %%    _28
  _63 = succeeded:body _28
  br ^60

60:
  %% Unique:
  %%    _61
  _66 = landingpad `'catch'`, _61

  %% Aliased:
  %%    _66
  _64 = extract _66, `0`
  br ^58

58:
  %% Aliased:
  %%    _64
  %% Unique:
  %%    _61
  _5 = catch_end _61, _64

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _78 = is_tagged_tuple _5, `2`, `'EXIT'`
  br _78, ^75, ^69

75:
  %% Argument types:
  %%    _5 => {''EXIT'', any()}
  %% Aliased:
  %%    _5
  _19 = get_tuple_element _5, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _72 = bif:is_tuple _19
  br _72, ^72, ^69

72:
  %% Argument types:
  %%    _19 => {...}
  %% Aliased:
  %%    _19
  _73 = bif:tuple_size _19

  %% Argument types:
  %%    _73 => 0..16777215
  %% Unique:
  %%    _73
  _74 = bif:'=:=' _73, `2`
  br _74, ^71, ^69

71:
  %% Argument types:
  %%    _19 => {any(), any()}
  %% Aliased:
  %%    _19
  _22 = get_tuple_element _19, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _70 = bif:'=:=' _22, `{badmap,no_map}`
  br _70, ^70, ^69

70:
  %% Result type:
  %%    'ok'
  ret `ok`

69:
  %% core_fold_SUITE.erl:863
  %% Aliased:
  %%    _5
  _29 = match_fail `badmatch`, _5

  %% Unique:
  %%    _29
  _81 = succeeded:body _29
  br ^1

57:
  %% core_fold_SUITE.erl:862
  %% Aliased:
  %%    _3
  _30 = match_fail `badmatch`, _3

  %% Unique:
  %%    _30
  _93 = succeeded:body _30
  br ^1

45:
  %% core_fold_SUITE.erl:860
  %% Aliased:
  %%    _1
  _31 = match_fail `badmatch`, _1

  %% Unique:
  %%    _31
  _105 = succeeded:body _31
  br ^1

1:
  _32 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _32
}

%% core_fold_SUITE.erl:867
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`map_effect_1`() {
0:
  %% core_fold_SUITE.erl:868
  _2 = put_map `exact`, `#{}`, `key`, `value`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:871
%% Counter = 11
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'no_map' | #{}
function `core_fold_SUITE`:`map_effect_2`(_0) {
0:
  %% Argument types:
  %%    _0 => 'no_map' | #{}
  %% Unique:
  %%    _0
  _8 = bif:is_map _0
  br _8, ^8, ^7

8:
  %% core_fold_SUITE.erl:872
  _2 = put_map `exact`, `#{}`, `key`, `value`

  %% Aliased:
  %%    _2
  _9 = succeeded:body _2
  br _9, ^6, ^1

6:
  %% Result type:
  %%    'ok'
  ret `ok`

7:
  %% core_fold_SUITE.erl:872
  _3 = match_fail `badmap`, `no_map`

  %% Unique:
  %%    _3
  _10 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% core_fold_SUITE.erl:877
%% Counter = 4
%% bs_ensure_opt: true
function `core_fold_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `core_fold_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `core_fold_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:684
%% Counter = 6
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-cover_letrec_effect_1/0-after$^0/0-0-'`() {
0:
  %% core_fold_SUITE.erl:687
  _2 = match_fail `case_clause`, `any_atom`

  %% Unique:
  %%    _2
  _5 = succeeded:body _2
  br ^1

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% core_fold_SUITE.erl:570
%% Counter = 28
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     'enemy'
function `core_fold_SUITE`:`'-configuration/0-lc$^0/1-0-'`(_3) {
0:
  %% core_fold_SUITE.erl:570
  _13 = call (`erlang`:`error`/1), `{bad_generator,enemy}`

  %% Aliased:
  %%    _13
  _25 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% core_fold_SUITE.erl:542
%% Counter = 11
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-tim/1-fun-0-'`() {
0:
  %% Result type:
  %%    'surgery'
  ret `surgery`
}

%% core_fold_SUITE.erl:458
%% Counter = 24
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-multiple_aliases/1-fun-1-'`() {
0:
  %% core_fold_SUITE.erl:459
  %% Result type:
  %%    'ok'
  _11 = call (`run_once`/0)

  %% Unique:
  %%    _11
  _18 = succeeded:body _11
  br _18, ^21, ^1

21:
  %% Result type:
  %%    {'true', 'true', 'ok', 'ok'}
  ret `{true,true,ok,ok}`

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% core_fold_SUITE.erl:454
%% Counter = 16
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-multiple_aliases/1-fun-0-'`() {
0:
  %% core_fold_SUITE.erl:455
  %% Result type:
  %%    'ok'
  _1 = call (`run_once`/0)

  %% Unique:
  %%    _1
  _15 = succeeded:body _1
  br _15, ^15, ^1

15:
  %% Result type:
  %%    {'ok', 'ok'}
  ret `{ok,ok}`

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% core_fold_SUITE.erl:409
%% Counter = 32
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-cover_core_lib/1-lc$^0/1-0-'`(_5) {
0:
  %% Aliased:
  %%    _5
  _27 = is_nonempty_list _5
  br _27, ^27, ^19

27:
  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _10 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _9 = get_tl _5

  %% core_fold_SUITE.erl:409
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _4 = bif:element `1`, _10

  %% Aliased:
  %%    _4
  _22 = succeeded:guard _4
  br _22, ^22, ^20

22:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _23 = bif:'=:=' _4, `ok`
  br _23, ^20, ^23

23:
  %% core_fold_SUITE.erl:409
  %% Aliased:
  %%    _10
  _12 = call (`id`/1), _10

  %% Aliased:
  %%    _12
  _24 = succeeded:body _12
  br _24, ^24, ^1

24:
  %% core_fold_SUITE.erl:409
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9
  _13 = call (`'-cover_core_lib/1-lc$^0/1-0-'`/1), _9

  %% Unique:
  %%    _13
  _25 = succeeded:body _13
  br _25, ^25, ^1

25:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _13
  ret _13

20:
  %% core_fold_SUITE.erl:409
  %% Result type:
  %%    nil()
  %% Aliased:
  %%    _9
  _14 = call (`'-cover_core_lib/1-lc$^0/1-0-'`/1), _9

  %% Unique:
  %%    _14
  _26 = succeeded:body _14
  br _26, ^26, ^1

26:
  %% Result type:
  %%    nil()
  %% Unique:
  %%    _14
  ret _14

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _28 = bif:'=:=' _5, `[]`
  br _28, ^28, ^18

28:
  %% Result type:
  %%    nil()
  ret `[]`

18:
  %% Argument types:
  %%    _5 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _5
  _8 = put_tuple `bad_generator`, _5

  %% core_fold_SUITE.erl:409
  %% Unique:
  %%    _8
  _15 = call (`erlang`:`error`/1), _8

  %% Aliased:
  %%    _15
  _29 = succeeded:body _15
  br ^1

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% core_fold_SUITE.erl:246
%% Counter = 223
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-14-'`(_115) {
0:
  %% core_fold_SUITE.erl:246
  %% Argument types:
  %%    
  %% Aliased:
  %%    _115
  _175 = bif:'==' _115, `#{a => [1],b => [2.0]}`
  br _175, ^217, ^214

217:
  %% Result type:
  %%    'true'
  ret `true`

214:
  %% core_fold_SUITE.erl:246
  _210 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _210
  _222 = succeeded:body _210
  br ^1

1:
  _211 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _211
}

%% core_fold_SUITE.erl:246
%% Counter = 223
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-15-'`(_123) {
0:
  %% core_fold_SUITE.erl:246
  %% Argument types:
  %%    
  %% Aliased:
  %%    _123
  _174 = bif:'==' _123, `#{a => [1],b => [2.0]}`
  br _174, ^215, ^212

215:
  %% Result type:
  %%    'false'
  ret `false`

212:
  %% core_fold_SUITE.erl:246
  _208 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _208
  _220 = succeeded:body _208
  br ^1

1:
  _209 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _209
}

%% core_fold_SUITE.erl:245
%% Counter = 219
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-12-'`(_99) {
0:
  %% core_fold_SUITE.erl:245
  %% Argument types:
  %%    
  %% Aliased:
  %%    _99
  _172 = bif:'==' _99, `#{a => 1,b => 2.0}`
  br _172, ^213, ^210

213:
  %% Result type:
  %%    'true'
  ret `true`

210:
  %% core_fold_SUITE.erl:245
  _206 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _206
  _218 = succeeded:body _206
  br ^1

1:
  _207 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _207
}

%% core_fold_SUITE.erl:245
%% Counter = 219
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-13-'`(_107) {
0:
  %% core_fold_SUITE.erl:245
  %% Argument types:
  %%    
  %% Aliased:
  %%    _107
  _171 = bif:'==' _107, `#{a => 1,b => 2.0}`
  br _171, ^211, ^208

211:
  %% Result type:
  %%    'false'
  ret `false`

208:
  %% core_fold_SUITE.erl:245
  _204 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _204
  _216 = succeeded:body _204
  br ^1

1:
  _205 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _205
}

%% core_fold_SUITE.erl:243
%% Counter = 217
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-10-'`(_83) {
0:
  %% core_fold_SUITE.erl:243
  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _169 = bif:'==' _83, `{1,2,3}`
  br _169, ^206, ^209

206:
  %% core_fold_SUITE.erl:243
  _202 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _202
  _214 = succeeded:body _202
  br ^1

1:
  _203 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _203

209:
  %% Result type:
  %%    'false'
  ret `false`
}

%% core_fold_SUITE.erl:243
%% Counter = 213
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-11-'`(_91) {
0:
  %% core_fold_SUITE.erl:243
  %% Argument types:
  %%    
  %% Aliased:
  %%    _91
  _168 = bif:'==' _91, `{1,2,3}`
  br _168, ^204, ^207

204:
  %% core_fold_SUITE.erl:243
  _200 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _200
  _212 = succeeded:body _200
  br ^1

1:
  _201 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _201

207:
  %% Result type:
  %%    'true'
  ret `true`
}

%% core_fold_SUITE.erl:242
%% Counter = 213
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-8-'`(_67) {
0:
  %% core_fold_SUITE.erl:242
  %% Argument types:
  %%    
  %% Aliased:
  %%    _67
  _166 = bif:'=:=' _67, `[a]`
  br _166, ^202, ^205

202:
  %% core_fold_SUITE.erl:242
  _198 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _198
  _210 = succeeded:body _198
  br ^1

1:
  _199 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _199

205:
  %% Result type:
  %%    'false'
  ret `false`
}

%% core_fold_SUITE.erl:242
%% Counter = 209
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-9-'`(_75) {
0:
  %% core_fold_SUITE.erl:242
  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _165 = bif:'=:=' _75, `[a]`
  br _165, ^200, ^203

200:
  %% core_fold_SUITE.erl:242
  _196 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _196
  _208 = succeeded:body _196
  br ^1

1:
  _197 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _197

203:
  %% Result type:
  %%    'true'
  ret `true`
}

%% core_fold_SUITE.erl:240
%% Counter = 207
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-6-'`(_51) {
0:
  %% core_fold_SUITE.erl:240
  %% Argument types:
  %%    
  %% Aliased:
  %%    _51
  _163 = bif:'==' _51, `"*"`
  br _163, ^201, ^198

201:
  %% Result type:
  %%    'true'
  ret `true`

198:
  %% core_fold_SUITE.erl:240
  _194 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _194
  _206 = succeeded:body _194
  br ^1

1:
  _195 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _195
}

%% core_fold_SUITE.erl:240
%% Counter = 207
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-7-'`(_59) {
0:
  %% core_fold_SUITE.erl:240
  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _162 = bif:'==' _59, `"*"`
  br _162, ^199, ^196

199:
  %% Result type:
  %%    'false'
  ret `false`

196:
  %% core_fold_SUITE.erl:240
  _192 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _192
  _204 = succeeded:body _192
  br ^1

1:
  _193 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _193
}

%% core_fold_SUITE.erl:239
%% Counter = 203
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-4-'`(_35) {
0:
  %% core_fold_SUITE.erl:239
  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _160 = bif:'==' _35, `"*"`
  br _160, ^197, ^194

197:
  %% Result type:
  %%    'true'
  ret `true`

194:
  %% core_fold_SUITE.erl:239
  _190 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _190
  _202 = succeeded:body _190
  br ^1

1:
  _191 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _191
}

%% core_fold_SUITE.erl:239
%% Counter = 203
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-5-'`(_43) {
0:
  %% core_fold_SUITE.erl:239
  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _159 = bif:'==' _43, `"*"`
  br _159, ^195, ^192

195:
  %% Result type:
  %%    'false'
  ret `false`

192:
  %% core_fold_SUITE.erl:239
  _188 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _188
  _200 = succeeded:body _188
  br ^1

1:
  _189 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _189
}

%% core_fold_SUITE.erl:238
%% Counter = 199
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-2-'`(_19) {
0:
  %% core_fold_SUITE.erl:238
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _157 = bif:'==' _19, `[42.0]`
  br _157, ^193, ^190

193:
  %% Result type:
  %%    'true'
  ret `true`

190:
  %% core_fold_SUITE.erl:238
  _186 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _186
  _198 = succeeded:body _186
  br ^1

1:
  _187 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _187
}

%% core_fold_SUITE.erl:238
%% Counter = 199
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-3-'`(_27) {
0:
  %% core_fold_SUITE.erl:238
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _156 = bif:'==' _27, `[42.0]`
  br _156, ^191, ^188

191:
  %% Result type:
  %%    'false'
  ret `false`

188:
  %% core_fold_SUITE.erl:238
  _184 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _184
  _196 = succeeded:body _184
  br ^1

1:
  _185 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _185
}

%% core_fold_SUITE.erl:237
%% Counter = 195
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-0-'`(_3) {
0:
  %% core_fold_SUITE.erl:237
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _154 = bif:'=:=' _3, `[a,b,c]`
  br _154, ^189, ^186

189:
  %% Result type:
  %%    'true'
  ret `true`

186:
  %% core_fold_SUITE.erl:237
  _182 = match_fail `badmatch`, `true`

  %% Unique:
  %%    _182
  _194 = succeeded:body _182
  br ^1

1:
  _183 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _183
}

%% core_fold_SUITE.erl:237
%% Counter = 195
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-eq/1-fun-1-'`(_11) {
0:
  %% core_fold_SUITE.erl:237
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _153 = bif:'=:=' _11, `[a,b,c]`
  br _153, ^187, ^184

187:
  %% Result type:
  %%    'false'
  ret `false`

184:
  %% core_fold_SUITE.erl:237
  _180 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _180
  _192 = succeeded:body _180
  br ^1

1:
  _181 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _181
}

%% core_fold_SUITE.erl:181
%% Counter = 261
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-append/1-fun-3-'`(_36, A) {
0:
  %% Argument types:
  %%    
  _176 = put_list A, `blurf`

  %% Unique:
  %%    _176
  _177 = call (`lists`:`append`/2), _176, `[4,5,6]`

  %% Aliased:
  %%    _177
  _242 = succeeded:body _177
  br ^1

1:
  _240 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _240
}

%% core_fold_SUITE.erl:180
%% Counter = 249
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-append/1-fun-2-'`(_27, A) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _52 = put_list A, `[1,2,3,4,5,6]`

  %% Argument types:
  %%    _52 => nonempty_list(any())
  %% Unique:
  %%    _27, 
  %%    _52
  _237 = bif:'=:=' _52, _27
  br _237, ^237, ^236

237:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _173 = put_list A, `[1,2,3]`

  %% core_fold_SUITE.erl:180
  %% Unique:
  %%    _173
  _174 = call (`erlang`:`append`/2), _173, `[4,5,6]`

  %% Aliased:
  %%    _174
  _238 = succeeded:body _174
  br _238, ^238, ^1

238:
  %% Argument types:
  %%    _27 => nonempty_list(any())
  %% Aliased:
  %%    _174
  %% Unique:
  %%    _27
  _241 = bif:'=:=' _174, _27
  br _241, ^241, ^240

241:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A
  _54 = put_list A, `[1,2,3,4,5,6]`

  %% Argument types:
  %%    _54 => nonempty_list(any())
  %%    _27 => nonempty_list(any())
  %% Unique:
  %%    _27, 
  %%    _54
  _244 = bif:'=:=' _54, _27
  br _244, ^244, ^243

244:
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _54
  ret _54

243:
  %% core_fold_SUITE.erl:180
  %% Unique:
  %%    _54
  _231 = match_fail `badmatch`, _54

  %% Unique:
  %%    _231
  _245 = succeeded:body _231
  br ^1

240:
  %% core_fold_SUITE.erl:180
  %% Aliased:
  %%    _174
  _232 = match_fail `badmatch`, _174

  %% Unique:
  %%    _232
  _246 = succeeded:body _232
  br ^1

236:
  %% core_fold_SUITE.erl:180
  %% Unique:
  %%    _52
  _233 = match_fail `badmatch`, _52

  %% Unique:
  %%    _233
  _247 = succeeded:body _233
  br ^1

1:
  _234 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _234
}

%% core_fold_SUITE.erl:179
%% Counter = 249
%% bs_ensure_opt: true
function `core_fold_SUITE`:`'-append/1-fun-1-'`(_17) {
0:
  %% core_fold_SUITE.erl:179
  _11 = call (`id`/1), `[d,e]`

  %% Aliased:
  %%    _11
  _233 = succeeded:body _11
  br _233, ^233, ^1

233:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _67 = put_list `c`, _11

  %% Argument types:
  %%    _67 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _67
  _63 = put_list `b`, _67

  %% Argument types:
  %%    _63 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _63
  _48 = put_list `a`, _63

  %% Argument types:
  %%    _48 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _17, 
  %%    _48
  _236 = bif:'=:=' _48, _17
  br _236, ^236, ^235

236:
  %% core_fold_SUITE.erl:179
  _13 = call (`id`/1), `[d,e]`

  %% Aliased:
  %%    _13
  _237 = succeeded:body _13
  br _237, ^237, ^1

237:
  %% core_fold_SUITE.erl:179
  %% Aliased:
  %%    _13
  _167 = call (`erlang`:`append`/2), `[a,b,c]`, _13

  %% Aliased:
  %%    _167
  _238 = succeeded:body _167
  br _238, ^238, ^1

238:
  %% Argument types:
  %%    _17 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _167
  %% Unique:
  %%    _17
  _241 = bif:'=:=' _167, _17
  br _241, ^241, ^240

241:
  %% core_fold_SUITE.erl:179
  _15 = call (`id`/1), `[d,e]`

  %% Aliased:
  %%    _15
  _242 = succeeded:body _15
  br _242, ^242, ^1

242:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _168 = put_list `c`, _15

  %% Argument types:
  %%    _168 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _168
  _169 = put_list `b`, _168

  %% Argument types:
  %%    _169 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _169
  _50 = put_list `a`, _169

  %% Argument types:
  %%    _50 => nonempty_improper_list(any(), any())
  %%    _17 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _17, 
  %%    _50
  _245 = bif:'=:=' _50, _17
  br _245, ^245, ^244

245:
  %% Result type:
  %%    nonempty_improper_list(any(), any())
  %% Unique:
  %%    _50
  ret _50

244:
  %% core_fold_SUITE.erl:179
  %% Unique:
  %%    _50
  _228 = match_fail `badmatch`, _50

  %% Unique:
  %%    _228
  _246 = succeeded:body _228
  br ^1

240:
  %% core_fold_SUITE.erl:179
  %% Aliased:
  %%    _167
  _229 = match_fail `badmatch`, _167

  %% Unique:
  %%    _229
  _247 = succeeded:body _229
  br ^1

235:
  %% core_fold_SUITE.erl:179
  %% Unique:
  %%    _48
  _230 = match_fail `badmatch`, _48

  %% Unique:
  %%    _230
  _248 = succeeded:body _230
  br ^1

1:
  _231 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _231
}
