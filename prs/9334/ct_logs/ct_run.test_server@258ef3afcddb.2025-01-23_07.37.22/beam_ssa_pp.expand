{attribute,{1,1},file,{"beam_ssa_pp.erl",1}}.
{attribute,{20,2},module,beam_ssa_pp}.
{attribute,{23,2},
           export,
           [{format_function,1},
            {format_instr,1},
            {format_var,1},
            {format_type,1}]}.
{attribute,{1,1},file,{"beam_ssa.hrl",1}}.
{attribute,
    {21,2},
    record,
    {b_module,
        [{typed_record_field,
             {record_field,{21,20},{atom,{21,20},anno},{map,{21,25},[]}},
             {remote_type,
                 {21,32},
                 [{atom,{21,32},beam_ssa},{atom,{21,41},anno},[]]}},
         {typed_record_field,
             {record_field,{22,20},{atom,{22,20},name}},
             {type,{22,28},module,[]}},
         {typed_record_field,
             {record_field,{23,20},{atom,{23,20},exports}},
             {type,
                 {23,31},
                 list,
                 [{type,
                      {23,32},
                      tuple,
                      [{type,{23,33},atom,[]},{type,{23,40},arity,[]}]}]}},
         {typed_record_field,
             {record_field,{24,20},{atom,{24,20},attributes}},
             {type,{24,34},list,[]}},
         {typed_record_field,
             {record_field,{25,20},{atom,{25,20},body}},
             {type,
                 {25,28},
                 list,
                 [{remote_type,
                      {25,29},
                      [{atom,{25,29},beam_ssa},
                       {atom,{25,38},b_function},
                       []]}]}}]}}.
{attribute,
    {26,2},
    record,
    {b_function,
        [{typed_record_field,
             {record_field,{26,22},{atom,{26,22},anno},{map,{26,27},[]}},
             {remote_type,
                 {26,34},
                 [{atom,{26,34},beam_ssa},{atom,{26,43},anno},[]]}},
         {typed_record_field,
             {record_field,{27,22},{atom,{27,22},args}},
             {type,
                 {27,30},
                 list,
                 [{remote_type,
                      {27,31},
                      [{atom,{27,31},beam_ssa},{atom,{27,40},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{28,22},{atom,{28,22},bs}},
             {type,
                 {28,28},
                 map,
                 [{type,
                      {28,46},
                      map_field_exact,
                      [{remote_type,
                           {28,30},
                           [{atom,{28,30},beam_ssa},{atom,{28,39},label},[]]},
                       {remote_type,
                           {28,48},
                           [{atom,{28,48},beam_ssa},
                            {atom,{28,57},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{29,22},{atom,{29,22},cnt}},
             {remote_type,
                 {29,29},
                 [{atom,{29,29},beam_ssa},{atom,{29,38},label},[]]}}]}}.
{attribute,
    {31,2},
    record,
    {b_blk,
        [{typed_record_field,
             {record_field,{31,17},{atom,{31,17},anno},{map,{31,22},[]}},
             {remote_type,
                 {31,29},
                 [{atom,{31,29},beam_ssa},{atom,{31,38},anno},[]]}},
         {typed_record_field,
             {record_field,{32,17},{atom,{32,17},is}},
             {type,
                 {32,23},
                 list,
                 [{remote_type,
                      {32,24},
                      [{atom,{32,24},beam_ssa},{atom,{32,33},b_set},[]]}]}},
         {typed_record_field,
             {record_field,{33,17},{atom,{33,17},last}},
             {remote_type,
                 {33,25},
                 [{atom,{33,25},beam_ssa},{atom,{33,34},terminator},[]]}}]}}.
{attribute,
    {34,2},
    record,
    {b_set,
        [{typed_record_field,
             {record_field,{34,17},{atom,{34,17},anno},{map,{34,22},[]}},
             {remote_type,
                 {34,29},
                 [{atom,{34,29},beam_ssa},{atom,{34,38},anno},[]]}},
         {typed_record_field,
             {record_field,{35,17},{atom,{35,17},dst},{atom,{35,21},none}},
             {type,
                 {35,29},
                 union,
                 [{atom,{35,29},none},
                  {remote_type,
                      {35,36},
                      [{atom,{35,36},beam_ssa},{atom,{35,45},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{36,17},{atom,{36,17},op}},
             {remote_type,
                 {36,23},
                 [{atom,{36,23},beam_ssa},{atom,{36,32},op},[]]}},
         {typed_record_field,
             {record_field,{37,17},{atom,{37,17},args},{nil,{37,22}}},
             {type,
                 {37,28},
                 list,
                 [{remote_type,
                      {37,29},
                      [{atom,{37,29},beam_ssa},
                       {atom,{37,38},argument},
                       []]}]}}]}}.
{attribute,
    {40,2},
    record,
    {b_ret,
        [{typed_record_field,
             {record_field,{40,17},{atom,{40,17},anno},{map,{40,22},[]}},
             {remote_type,
                 {40,29},
                 [{atom,{40,29},beam_ssa},{atom,{40,38},anno},[]]}},
         {typed_record_field,
             {record_field,{41,17},{atom,{41,17},arg}},
             {remote_type,
                 {41,24},
                 [{atom,{41,24},beam_ssa},{atom,{41,33},value},[]]}}]}}.
{attribute,
    {43,2},
    record,
    {b_br,
        [{record_field,{43,16},{atom,{43,16},anno},{map,{43,21},[]}},
         {typed_record_field,
             {record_field,{44,16},{atom,{44,16},bool}},
             {remote_type,
                 {44,24},
                 [{atom,{44,24},beam_ssa},{atom,{44,33},value},[]]}},
         {typed_record_field,
             {record_field,{45,16},{atom,{45,16},succ}},
             {remote_type,
                 {45,24},
                 [{atom,{45,24},beam_ssa},{atom,{45,33},label},[]]}},
         {typed_record_field,
             {record_field,{46,16},{atom,{46,16},fail}},
             {remote_type,
                 {46,24},
                 [{atom,{46,24},beam_ssa},{atom,{46,33},label},[]]}}]}}.
{attribute,
    {48,2},
    record,
    {b_switch,
        [{typed_record_field,
             {record_field,{48,20},{atom,{48,20},anno},{map,{48,25},[]}},
             {remote_type,
                 {48,32},
                 [{atom,{48,32},beam_ssa},{atom,{48,41},anno},[]]}},
         {typed_record_field,
             {record_field,{49,20},{atom,{49,20},arg}},
             {remote_type,
                 {49,27},
                 [{atom,{49,27},beam_ssa},{atom,{49,36},value},[]]}},
         {typed_record_field,
             {record_field,{50,20},{atom,{50,20},fail}},
             {remote_type,
                 {50,28},
                 [{atom,{50,28},beam_ssa},{atom,{50,37},label},[]]}},
         {typed_record_field,
             {record_field,{51,20},{atom,{51,20},list}},
             {type,
                 {51,28},
                 list,
                 [{type,
                      {51,29},
                      tuple,
                      [{remote_type,
                           {51,30},
                           [{atom,{51,30},beam_ssa},
                            {atom,{51,39},b_literal},
                            []]},
                       {remote_type,
                           {51,51},
                           [{atom,{51,51},beam_ssa},
                            {atom,{51,60},label},
                            []]}]}]}}]}}.
{attribute,
    {54,2},
    record,
    {b_var,
        [{typed_record_field,
             {record_field,{54,17},{atom,{54,17},name}},
             {remote_type,
                 {54,25},
                 [{atom,{54,25},beam_ssa},{atom,{54,34},var_name},[]]}}]}}.
{attribute,
    {56,2},
    record,
    {b_literal,
        [{typed_record_field,
             {record_field,{56,21},{atom,{56,21},val}},
             {remote_type,
                 {56,28},
                 [{atom,{56,28},beam_ssa},
                  {atom,{56,37},literal_value},
                  []]}}]}}.
{attribute,
    {58,2},
    record,
    {b_remote,
        [{typed_record_field,
             {record_field,{58,20},{atom,{58,20},mod}},
             {remote_type,
                 {58,29},
                 [{atom,{58,29},beam_ssa},{atom,{58,38},value},[]]}},
         {typed_record_field,
             {record_field,{59,20},{atom,{59,20},name}},
             {remote_type,
                 {59,29},
                 [{atom,{59,29},beam_ssa},{atom,{59,38},value},[]]}},
         {typed_record_field,
             {record_field,{60,20},{atom,{60,20},arity}},
             {type,{60,29},non_neg_integer,[]}}]}}.
{attribute,
    {62,2},
    record,
    {b_local,
        [{typed_record_field,
             {record_field,{62,19},{atom,{62,19},name}},
             {remote_type,
                 {62,28},
                 [{atom,{62,28},beam_ssa},{atom,{62,37},b_literal},[]]}},
         {typed_record_field,
             {record_field,{63,19},{atom,{63,19},arity}},
             {type,{63,28},non_neg_integer,[]}}]}}.
{attribute,{26,1},file,{"beam_ssa_pp.erl",26}}.
{attribute,{1,1},file,{"beam_types.hrl",1}}.
{attribute,{91,2},
           type,
           {float_range,{type,{91,24},
                              union,
                              [{atom,{91,24},any},
                               {type,{91,32},
                                     tuple,
                                     [{atom,{91,33},'-inf'},
                                      {type,{91,40},float,[]}]},
                               {type,{91,51},
                                     tuple,
                                     [{type,{91,52},float,[]},
                                      {atom,{91,60},'+inf'}]}]},
                        []}}.
{attribute,
    {93,2},
    record,
    {t_atom,
        [{typed_record_field,
             {record_field,{93,18},{atom,{93,18},elements},{atom,{93,27},any}},
             {type,
                 {93,34},
                 union,
                 [{atom,{93,34},any},
                  {remote_type,
                      {93,42},
                      [{atom,{93,42},ordsets},
                       {atom,{93,50},ordset},
                       [{type,{93,57},atom,[]}]]}]}}]}}.
{attribute,
    {94,2},
    record,
    {t_bitstring,
        [{typed_record_field,
             {record_field,
                 {94,23},
                 {atom,{94,23},size_unit},
                 {integer,{94,33},1}},
             {type,{94,38},pos_integer,[]}},
         {typed_record_field,
             {record_field,
                 {99,23},
                 {atom,{99,23},appendable},
                 {atom,{99,34},false}},
             {type,{99,43},boolean,[]}}]}}.
{attribute,
    {100,2},
    record,
    {t_bs_context,
        [{typed_record_field,
             {record_field,
                 {100,24},
                 {atom,{100,24},tail_unit},
                 {integer,{100,34},1}},
             {type,{100,39},pos_integer,[]}}]}}.
{attribute,
    {101,2},
    record,
    {t_bs_matchable,
        [{typed_record_field,
             {record_field,
                 {101,26},
                 {atom,{101,26},tail_unit},
                 {integer,{101,36},1}},
             {type,{101,41},pos_integer,[]}}]}}.
{attribute,
    {102,2},
    record,
    {t_float,
        [{typed_record_field,
             {record_field,
                 {102,19},
                 {atom,{102,19},elements},
                 {atom,{102,28},any}},
             {user_type,{102,35},float_range,[]}}]}}.
{attribute,
    {103,2},
    record,
    {t_fun,
        [{typed_record_field,
             {record_field,{103,17},{atom,{103,17},arity},{atom,{103,23},any}},
             {type,
                 {103,30},
                 union,
                 [{type,{103,30},arity,[]},{atom,{103,40},any}]}},
         {typed_record_field,
             {record_field,
                 {104,17},
                 {atom,{104,17},target},
                 {atom,{104,24},any}},
             {type,
                 {104,31},
                 union,
                 [{type,
                      {104,31},
                      tuple,
                      [{type,{104,32},atom,[]},
                       {type,{104,40},non_neg_integer,[]}]},
                  {atom,{104,61},any}]}},
         {typed_record_field,
             {record_field,{105,17},{atom,{105,17},type},{atom,{105,22},any}},
             {user_type,{105,29},type,[]}}]}}.
{attribute,
    {106,2},
    record,
    {t_integer,
        [{typed_record_field,
             {record_field,
                 {106,21},
                 {atom,{106,21},elements},
                 {atom,{106,30},any}},
             {type,
                 {106,37},
                 union,
                 [{atom,{106,37},any},
                  {remote_type,
                      {106,45},
                      [{atom,{106,45},beam_bounds},
                       {atom,{106,57},range},
                       []]}]}}]}}.
{attribute,
    {107,2},
    record,
    {t_number,
        [{typed_record_field,
             {record_field,
                 {107,20},
                 {atom,{107,20},elements},
                 {atom,{107,29},any}},
             {type,
                 {107,36},
                 union,
                 [{atom,{107,36},any},
                  {remote_type,
                      {107,44},
                      [{atom,{107,44},beam_bounds},
                       {atom,{107,56},range},
                       []]}]}}]}}.
{attribute,
    {113,2},
    record,
    {t_map,
        [{typed_record_field,
             {record_field,
                 {113,17},
                 {atom,{113,17},super_key},
                 {atom,{113,27},any}},
             {user_type,{113,34},type,[]}},
         {typed_record_field,
             {record_field,
                 {114,17},
                 {atom,{114,17},super_value},
                 {atom,{114,29},any}},
             {user_type,{114,36},type,[]}}]}}.
{attribute,
    {122,2},
    record,
    {t_cons,
        [{typed_record_field,
             {record_field,{122,18},{atom,{122,18},type},{atom,{122,23},any}},
             {user_type,{122,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {122,38},
                 {atom,{122,38},terminator},
                 {atom,{122,49},any}},
             {user_type,{122,56},type,[]}}]}}.
{attribute,
    {123,2},
    record,
    {t_list,
        [{typed_record_field,
             {record_field,{123,18},{atom,{123,18},type},{atom,{123,23},any}},
             {user_type,{123,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {123,38},
                 {atom,{123,38},terminator},
                 {atom,{123,49},any}},
             {user_type,{123,56},type,[]}}]}}.
{attribute,
    {125,2},
    record,
    {t_tuple,
        [{typed_record_field,
             {record_field,{125,19},{atom,{125,19},size},{integer,{125,24},0}},
             {type,{125,29},integer,[]}},
         {typed_record_field,
             {record_field,
                 {126,19},
                 {atom,{126,19},exact},
                 {atom,{126,25},false}},
             {type,{126,34},boolean,[]}},
         {typed_record_field,
             {record_field,
                 {127,19},
                 {atom,{127,19},elements},
                 {map,{127,28},[]}},
             {user_type,{127,35},tuple_elements,[]}}]}}.
{attribute,
    {146,2},
    type,
    {tuple_elements,
        {type,
            {146,27},
            map,
            [{type,
                 {146,51},
                 map_field_assoc,
                 [{ann_type,
                      {146,30},
                      [{var,{146,30},'Key'},{type,{146,37},pos_integer,[]}]},
                  {user_type,{146,54},type,[]}]}]},
        []}}.
{attribute,{148,2},
           type,
           {normal_type,{type,{148,24},
                              union,
                              [{atom,{148,24},any},
                               {atom,{148,32},none},
                               {type,{149,24},
                                     record,
                                     [{atom,{149,25},t_number}]},
                               {type,{149,38},
                                     record,
                                     [{atom,{149,39},t_float}]},
                               {type,{149,51},
                                     record,
                                     [{atom,{149,52},t_integer}]},
                               {type,{150,24},record,[{atom,{150,25},t_atom}]},
                               {type,{151,24},
                                     record,
                                     [{atom,{151,25},t_bitstring}]},
                               {type,{151,41},
                                     record,
                                     [{atom,{151,42},t_bs_context}]},
                               {type,{151,59},
                                     record,
                                     [{atom,{151,60},t_bs_matchable}]},
                               {type,{152,24},record,[{atom,{152,25},t_fun}]},
                               {type,{153,24},record,[{atom,{153,25},t_list}]},
                               {type,{153,36},record,[{atom,{153,37},t_cons}]},
                               {atom,{153,48},nil},
                               {atom,{154,24},other},
                               {type,{155,24},record,[{atom,{155,25},t_map}]},
                               {atom,{156,24},identifier},
                               {atom,{157,24},pid},
                               {atom,{158,24},port},
                               {atom,{159,24},reference},
                               {type,{160,24},
                                     record,
                                     [{atom,{160,25},t_tuple}]}]},
                        []}}.
{attribute,{162,2},
           type,
           {other_type,{type,{162,23},
                             union,
                             [{atom,{162,23},none},
                              {type,{162,32},record,[{atom,{162,33},t_fun}]},
                              {type,{162,43},record,[{atom,{162,44},t_map}]},
                              {atom,{163,23},pid},
                              {atom,{163,31},port},
                              {atom,{163,40},reference},
                              {atom,{163,54},identifier},
                              {type,{164,23},
                                    record,
                                    [{atom,{164,24},t_bitstring}]},
                              {type,{164,40},
                                    record,
                                    [{atom,{164,41},t_bs_context}]},
                              {type,{165,23},
                                    record,
                                    [{atom,{165,24},t_bs_matchable}]}]},
                       []}}.
{attribute,
    {167,2},
    type,
    {record_key,
        {type,
            {167,23},
            tuple,
            [{ann_type,
                 {167,24},
                 [{var,{167,24},'Arity'},{type,{167,33},integer,[]}]},
             {ann_type,
                 {167,44},
                 [{var,{167,44},'Tag'},{user_type,{167,51},normal_type,[]}]}]},
        []}}.
{attribute,
    {168,2},
    type,
    {record_set,
        {remote_type,
            {168,23},
            [{atom,{168,23},ordsets},
             {atom,{168,31},ordset},
             [{type,
                  {168,38},
                  tuple,
                  [{user_type,{168,39},record_key,[]},
                   {type,{168,53},record,[{atom,{168,54},t_tuple}]}]}]]},
        []}}.
{attribute,{169,2},
           type,
           {tuple_set,{type,{169,22},
                            union,
                            [{type,{169,22},record,[{atom,{169,23},t_tuple}]},
                             {user_type,{169,35},record_set,[]}]},
                      []}}.
{attribute,
    {173,2},
    record,
    {t_union,
        [{typed_record_field,
             {record_field,{173,19},{atom,{173,19},atom},{atom,{173,24},none}},
             {type,
                 {173,32},
                 union,
                 [{atom,{173,32},none},
                  {type,{173,41},record,[{atom,{173,42},t_atom}]}]}},
         {typed_record_field,
             {record_field,{174,19},{atom,{174,19},list},{atom,{174,24},none}},
             {type,
                 {174,32},
                 union,
                 [{atom,{174,32},none},
                  {type,{174,41},record,[{atom,{174,42},t_list}]},
                  {type,{174,53},record,[{atom,{174,54},t_cons}]},
                  {atom,{174,65},nil}]}},
         {typed_record_field,
             {record_field,
                 {175,19},
                 {atom,{175,19},number},
                 {atom,{175,26},none}},
             {type,
                 {175,34},
                 union,
                 [{atom,{175,34},none},
                  {type,{175,43},record,[{atom,{175,44},t_number}]},
                  {type,{175,57},record,[{atom,{175,58},t_float}]},
                  {type,{175,70},record,[{atom,{175,71},t_integer}]}]}},
         {typed_record_field,
             {record_field,
                 {176,19},
                 {atom,{176,19},tuple_set},
                 {atom,{176,29},none}},
             {type,
                 {176,37},
                 union,
                 [{atom,{176,37},none},{user_type,{176,46},tuple_set,[]}]}},
         {typed_record_field,
             {record_field,
                 {177,19},
                 {atom,{177,19},other},
                 {atom,{177,25},none}},
             {type,
                 {177,33},
                 union,
                 [{atom,{177,33},other},
                  {user_type,{177,43},other_type,[]}]}}]}}.
{attribute,{179,2},
           type,
           {type,{type,{179,17},
                       union,
                       [{type,{179,17},record,[{atom,{179,18},t_union}]},
                        {user_type,{179,30},normal_type,[]}]},
                 []}}.
{attribute,{27,1},file,{"beam_ssa_pp.erl",27}}.
{attribute,
    {28,2},
    spec,
    {{format_function,1},
     [{type,
          {28,22},
          'fun',
          [{type,
               {28,22},
               product,
               [{remote_type,
                    {28,23},
                    [{atom,{28,23},beam_ssa},{atom,{28,32},b_function},[]]}]},
           {type,{28,49},iolist,[]}]}]}}.
{function,
 {30,1},
 format_function,1,
 [{clause,
   {30,1},
   [{var,{30,1},'_'}],
   [[{call,
      {30,1},
      {remote,{30,1},{atom,{30,1},fake},{atom,{30,1},is_beam_bif_info}},
      []}]],
   [{debug_line,30,1},{atom,{30,1},ignore}]},
  {clause,
   {30,1},
   [{tuple,
     {30,17},
     [{atom,{30,17},b_function},
      {var,{30,34},'Anno0'},
      {var,{30,45},'Args'},
      {var,{31,32},'Blocks'},
      {var,{31,43},'Counter'}]}],
   [],
   [{debug_line,32,2},
    {match,
     {32,5},
     {map,
      {32,5},
      [{map_field_exact,
        {32,16},
        {atom,{32,7},func_info},
        {tuple,
         {32,18},
         [{var,{32,19},'M'},{var,{32,21},'F'},{var,{32,23},'_'}]}}]},
     {var,{32,29},'Anno0'}},
    {debug_line,33,3},
    {match,
     {33,5},
     {var,{33,5},'Anno'},
     {call,
      {33,12},
      {remote,{33,16},{atom,{33,12},maps},{atom,{33,17},without}},
      [{block,0,
        [{cons,
          {33,25},
          {atom,{33,26},func_info},
          {cons,
           {33,36},
           {atom,{33,36},location},
           {cons,
            {33,45},
            {atom,{33,45},live_intervals},
            {cons,{33,60},{atom,{33,60},registers},{nil,{33,69}}}}}}]},
       {var,{33,72},'Anno0'}]}},
    {debug_line,34,4},
    {match,
     {34,5},
     {var,{34,5},'FuncAnno'},
     {'case',
      {34,16},
      {var,{34,21},'Anno0'},
      [{clause,
        {35,20},
        [{map,
          {35,20},
          [{map_field_exact,
            {35,36},
            {atom,{35,22},live_intervals},
            {var,{35,38},'Intervals'}}]}],
        [],
        [{debug_line,36,5},
         {map,
          {36,29},
          {var,{36,24},'Anno0'},
          [{map_field_exact,
            {36,45},
            {atom,{36,31},live_intervals},
            {call,
             {36,47},
             {remote,{36,51},{atom,{36,47},maps},{atom,{36,52},from_list}},
             [{var,{36,62},'Intervals'}]}}]}]},
       {clause,
        {37,20},
        [{map,{37,20},[]}],
        [],
        [{debug_line,38,6},{var,{38,24},'Anno0'}]}]}},
    {debug_line,40,7},
    {match,
     {40,5},
     {var,{40,5},'ReachableBlocks'},
     {call,
      {40,23},
      {remote,{40,31},{atom,{40,23},beam_ssa},{atom,{40,32},rpo}},
      [{var,{40,36},'Blocks'}]}},
    {debug_line,41,8},
    {match,
     {41,5},
     {var,{41,5},'All'},
     {call,
      {41,11},
      {remote,{41,15},{atom,{41,11},maps},{atom,{41,16},keys}},
      [{var,{41,21},'Blocks'}]}},
    {debug_line,42,9},
    {match,
     {42,5},
     {var,{42,5},'Unreachable'},
     {call,
      {42,19},
      {remote,{42,26},{atom,{42,19},ordsets},{atom,{42,27},subtract}},
      [{block,0,
        [{call,
          {42,36},
          {remote,{42,43},{atom,{42,36},ordsets},{atom,{42,44},from_list}},
          [{var,{42,54},'All'}]}]},
       {block,0,
        [{debug_line,43,10},
         {call,
          {43,36},
          {remote,{43,43},{atom,{43,36},ordsets},{atom,{43,44},from_list}},
          [{var,{43,54},'ReachableBlocks'}]}]}]}},
    {debug_line,44,11},
    {cons,
     {44,5},
     {'case',
      {44,6},
      {var,{44,11},'Anno0'},
      [{clause,
        {45,10},
        [{map,
          {45,10},
          [{map_field_exact,
            {45,20},
            {atom,{45,12},location},
            {tuple,
             {45,22},
             [{var,{45,23},'Filename'},{var,{45,32},'Line'}]}}]}],
        [],
        [{debug_line,46,12},
         {call,
          {46,14},
          {remote,{46,20},{atom,{46,14},io_lib},{atom,{46,21},format}},
          [{block,0,[{string,{46,28},"%% ~ts:~p\n"}]},
           {block,0,
            [{cons,
              {46,43},
              {var,{46,44},'Filename'},
              {cons,{46,53},{var,{46,53},'Line'},{nil,{46,57}}}}]}]}]},
       {clause,
        {47,10},
        [{map,{47,10},[]}],
        [],
        [{debug_line,48,13},{nil,{48,14}}]}]},
     {cons,
      {50,6},
      {call,
       {50,6},
       {remote,{50,12},{atom,{50,6},io_lib},{atom,{50,13},format}},
       [{block,0,[{debug_line,50,14},{string,{50,20},"%% Counter = ~p\n"}]},
        {block,0,[{cons,{50,41},{var,{50,42},'Counter'},{nil,{50,49}}}]}]},
      {cons,
       {51,6},
       {lc,
        {51,6},
        {block,0,
         [{debug_line,51,15},
          {call,
           {51,7},
           {atom,{51,7},format_anno},
           [{var,{51,19},'Key'},{var,{51,24},'Value'}]}]},
        [{block,0,[{debug_line,52,16},{atom,{52,26},true}]},
         {m_generate,
          {52,23},
          {map_field_exact,{52,14},{var,{52,10},'Key'},{var,{52,17},'Value'}},
          {call,
           {52,26},
           {remote,{52,30},{atom,{52,26},maps},{atom,{52,31},iterator}},
           [{var,{52,40},'Anno'},{atom,{52,46},ordered}]}}]},
       {cons,
        {53,6},
        {call,
         {53,6},
         {remote,{53,12},{atom,{53,6},io_lib},{atom,{53,13},format}},
         [{block,0,
           [{debug_line,53,17},
            {string,{53,20},"function `~p`:`~p`(~ts) {\n"}]},
          {block,0,
           [{debug_line,54,18},
            {cons,
             {54,20},
             {var,{54,21},'M'},
             {cons,
              {54,24},
              {var,{54,24},'F'},
              {cons,
               {54,27},
               {call,
                {54,27},
                {atom,{54,27},format_args},
                [{var,{54,39},'Args'},{var,{54,45},'FuncAnno'}]},
               {nil,{54,54}}}}}]}]},
        {cons,
         {55,6},
         {lc,
          {55,6},
          {block,0,
           [{debug_line,55,19},
            {call,
             {55,7},
             {atom,{55,7},format_live_interval},
             [{var,{55,28},'Var'},{var,{55,33},'FuncAnno'}]}]},
          [{block,0,[{atom,{55,53},true}]},
           {generate,{55,50},{var,{55,46},'Var'},{var,{55,53},'Args'}}]},
         {cons,
          {56,6},
          {call,
           {56,6},
           {atom,{56,6},format_blocks},
           [{var,{56,20},'ReachableBlocks'},
            {var,{56,37},'Blocks'},
            {var,{56,45},'FuncAnno'}]},
          {cons,
           {57,6},
           {'case',
            {57,6},
            {var,{57,11},'Unreachable'},
            [{clause,
              {58,10},
              [{nil,{58,10}}],
              [],
              [{debug_line,59,20},{nil,{59,14}}]},
             {clause,
              {60,10},
              [{cons,{60,10},{var,{60,11},'_'},{var,{60,13},'_'}}],
              [],
              [{debug_line,61,21},
               {cons,
                {61,14},
                {string,{61,15},"\n%% Unreachable blocks\n\n"},
                {cons,
                 {62,15},
                 {call,
                  {62,15},
                  {atom,{62,15},format_blocks},
                  [{var,{62,29},'Unreachable'},
                   {var,{62,42},'Blocks'},
                   {var,{62,50},'FuncAnno'}]},
                 {nil,{62,59}}}}]}]},
           {cons,{65,6},{string,{65,6},"}\n"},{nil,{65,11}}}}}}}}}}]}]}.
{attribute,
    {68,2},
    spec,
    {{format_instr,1},
     [{type,
          {68,19},
          'fun',
          [{type,
               {68,19},
               product,
               [{remote_type,
                    {68,20},
                    [{atom,{68,20},beam_ssa},{atom,{68,29},b_set},[]]}]},
           {type,{68,41},iolist,[]}]}]}}.
{function,
 {70,1},
 format_instr,1,
 [{clause,
   {70,1},
   [{var,{70,1},'_'}],
   [[{call,
      {70,1},
      {remote,{70,1},{atom,{70,1},fake},{atom,{70,1},is_beam_bif_info}},
      []}]],
   [{debug_line,70,22},{atom,{70,1},ignore}]},
  {clause,
   {70,1},
   [{match,
     {70,14},
     {tuple,
      {70,14},
      [{atom,{70,14},b_set},
       {var,{70,14},'_'},
       {var,{70,14},'_'},
       {var,{70,14},'_'},
       {var,{70,14},'_'}]},
     {var,{70,23},'I'}}],
   [],
   [{debug_line,71,23},
    {match,
     {71,5},
     {var,{71,5},'Cs'},
     {call,
      {71,10},
      {remote,{71,15},{atom,{71,10},lists},{atom,{71,16},flatten}},
      [{block,0,
        [{call,
          {71,24},
          {atom,{71,24},format_instr},
          [{block,0,
            [{block,
              {71,37},
              [{match,{71,37},{var,{71,37},rec0},{var,{71,37},'I'}},
               {'case',
                {71,45},
                {var,{71,37},rec0},
                [{clause,
                  {71,45},
                  [{tuple,
                    {71,45},
                    [{atom,{71,45},b_set},
                     {var,{71,45},'_'},
                     {var,{71,45},'_'},
                     {var,{71,45},'_'},
                     {var,{71,45},'_'}]}],
                  [],
                  [{call,
                    {71,45},
                    {remote,
                     {71,45},
                     {atom,{71,45},erlang},
                     {atom,{71,45},setelement}},
                    [{integer,{71,45},2},
                     {var,{71,37},rec0},
                     {map,{71,50},[]}]}]},
                 {clause,
                  [{generated,true},{location,{71,45}}],
                  [{var,[{generated,true},{location,{71,45}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{71,45}}],
                    {remote,
                     [{generated,true},{location,{71,45}}],
                     {atom,[{generated,true},{location,{71,45}}],erlang},
                     {atom,[{generated,true},{location,{71,45}}],error}},
                    [{tuple,
                      [{generated,true},{location,{71,45}}],
                      [{atom,[{generated,true},{location,{71,45}}],badrecord},
                       {var,{71,37},rec0}]}]}]}]}]}]},
           {block,0,[{map,{71,56},[]}]},
           {atom,{71,61},true}]}]}]}},
    {debug_line,72,24},
    {call,
     {72,5},
     {remote,{72,11},{atom,{72,5},string},{atom,{72,12},trim}},
     [{var,{72,17},'Cs'},{atom,{72,21},leading}]}]},
  {clause,
   {73,1},
   [{var,{73,14},'I0'}],
   [],
   [{debug_line,74,25},
    {match,
     {74,5},
     {var,{74,5},'I'},
     {call,
      {74,9},
      {remote,{74,9},{atom,{74,9},erlang},{atom,{74,9},setelement}},
      [{integer,{74,20},2},{var,{74,23},'I0'},{block,0,[{map,{74,27},[]}]}]}},
    {debug_line,75,26},
    {match,
     {75,5},
     {var,{75,5},'Cs'},
     {call,
      {75,10},
      {remote,{75,15},{atom,{75,10},lists},{atom,{75,16},flatten}},
      [{block,0,
        [{call,
          {75,24},
          {atom,{75,24},format_terminator},
          [{var,{75,42},'I'},{block,0,[{map,{75,45},[]}]}]}]}]}},
    {debug_line,76,27},
    {call,
     {76,5},
     {remote,{76,11},{atom,{76,5},string},{atom,{76,12},trim}},
     [{var,{76,17},'Cs'},{atom,{76,21},both}]}]}]}.
{attribute,
    {78,2},
    spec,
    {{format_var,1},
     [{type,
          {78,17},
          'fun',
          [{type,
               {78,17},
               product,
               [{remote_type,
                    {78,18},
                    [{atom,{78,18},beam_ssa},{atom,{78,27},b_var},[]]}]},
           {type,{78,39},iolist,[]}]}]}}.
{function,
    {80,1},
    format_var,1,
    [{clause,
         {80,1},
         [{var,{80,1},'_'}],
         [[{call,
               {80,1},
               {remote,
                   {80,1},
                   {atom,{80,1},fake},
                   {atom,{80,1},is_beam_bif_info}},
               []}]],
         [{debug_line,80,28},{atom,{80,1},ignore}]},
     {clause,
         {80,1},
         [{var,{80,12},'V'}],
         [],
         [{debug_line,81,29},
          {match,
              {81,5},
              {var,{81,5},'Cs'},
              {call,
                  {81,10},
                  {remote,{81,15},{atom,{81,10},lists},{atom,{81,16},flatten}},
                  [{block,0,
                       [{call,
                            {81,24},
                            {atom,{81,24},format_var},
                            [{var,{81,35},'V'},
                             {block,0,[{map,{81,38},[]}]}]}]}]}},
          {debug_line,82,30},
          {call,
              {82,5},
              {remote,{82,11},{atom,{82,5},string},{atom,{82,12},trim}},
              [{var,{82,17},'Cs'},{atom,{82,21},leading}]}]}]}.
{function,
 {88,1},
 format_anno,2,
 [{clause,
   {88,1},
   [{var,{88,1},'_'},{var,{88,1},'_'}],
   [[{call,
      {88,1},
      {remote,{88,1},{atom,{88,1},fake},{atom,{88,1},is_beam_bif_info}},
      []}]],
   [{debug_line,88,31},{atom,{88,1},ignore}]},
  {clause,
   {88,1},
   [{atom,{88,13},parameter_info},{var,{88,29},'Map'}],
   [[{call,
      {88,39},
      {remote,{88,39},{atom,{88,39},erlang},{atom,{88,39},is_map}},
      [{var,{88,46},'Map'}]}]],
   [{debug_line,89,32},
    {'case',
     {89,5},
     {call,
      {89,10},
      {remote,{89,10},{atom,{89,10},erlang},{atom,{89,10},map_size}},
      [{var,{89,19},'Map'}]},
     [{clause,
       {90,9},
       [{integer,{90,9},0}],
       [],
       [{debug_line,91,33},{nil,{91,13}}]},
      {clause,
       {92,9},
       [{var,{92,9},'_'}],
       [],
       [{debug_line,93,34},
        {match,
         {93,13},
         {var,{93,13},'Params'},
         {call,
          {93,22},
          {remote,{93,27},{atom,{93,22},lists},{atom,{93,28},sort}},
          [{block,0,
            [{call,
              {93,33},
              {remote,{93,37},{atom,{93,33},maps},{atom,{93,38},to_list}},
              [{var,{93,46},'Map'}]}]}]}},
        {debug_line,94,35},
        {match,{94,13},{var,{94,13},'Break'},{string,{94,21},"\n%%     "}},
        {debug_line,95,36},
        {cons,
         {95,13},
         {call,
          {95,14},
          {remote,{95,20},{atom,{95,14},io_lib},{atom,{95,21},format}},
          [{block,0,[{string,{95,28},"%% Parameters\n"}]},{nil,{95,47}}]},
         {cons,
          {96,14},
          {lc,
           {96,14},
           {block,0,
            [{debug_line,96,37},
             {call,
              {96,15},
              {remote,{96,21},{atom,{96,15},io_lib},{atom,{96,22},format}},
              [{block,0,[{string,{96,29},"%%    ~s =>~s~s\n"}]},
               {block,0,
                [{debug_line,97,38},
                 {cons,
                  {97,29},
                  {call,{97,30},{atom,{97,30},format_var},[{var,{97,41},'V'}]},
                  {cons,
                   {98,30},
                   {var,{98,30},'Break'},
                   {cons,
                    {99,30},
                    {call,
                     {99,30},
                     {atom,{99,30},format_param_info},
                     [{var,{99,48},'I'},{var,{99,51},'Break'}]},
                    {nil,{99,57}}}}}]}]}]},
           [{block,0,[{debug_line,100,39},{atom,{100,28},true}]},
            {generate_strict,
             {100,24},
             {tuple,{100,18},[{var,{100,19},'V'},{var,{100,21},'I'}]},
             {var,{100,28},'Params'}}]},
          {nil,{100,35}}}}]}]}]},
  {clause,
   {102,1},
   [{var,{102,13},'Key'},{var,{102,18},'Map'}],
   [[{call,
      {102,28},
      {remote,{102,28},{atom,{102,28},erlang},{atom,{102,28},is_map}},
      [{var,{102,35},'Map'}]}]],
   [{debug_line,103,40},
    {match,
     {103,5},
     {var,{103,5},'Sorted'},
     {call,
      {103,14},
      {remote,{103,18},{atom,{103,14},maps},{atom,{103,19},to_list}},
      [{block,0,
        [{call,
          {103,27},
          {remote,{103,31},{atom,{103,27},maps},{atom,{103,32},iterator}},
          [{var,{103,41},'Map'},{atom,{103,46},ordered}]}]}]}},
    {debug_line,104,41},
    {cons,
     {104,5},
     {call,
      {104,6},
      {remote,{104,12},{atom,{104,6},io_lib},{atom,{104,13},format}},
      [{block,0,[{string,{104,20},"%% ~s:\n"}]},
       {block,0,[{cons,{104,32},{var,{104,33},'Key'},{nil,{104,36}}}]}]},
     {cons,
      {105,6},
      {lc,
       {105,6},
       {block,0,
        [{debug_line,105,42},
         {call,
          {105,7},
          {remote,{105,13},{atom,{105,7},io_lib},{atom,{105,14},format}},
          [{block,0,[{string,{105,21},"%%    ~kw => ~kw\n"}]},
           {block,0,
            [{cons,
              {105,43},
              {var,{105,44},'K'},
              {cons,{105,46},{var,{105,46},'V'},{nil,{105,47}}}}]}]}]},
       [{block,0,[{atom,{105,63},true}]},
        {generate_strict,
         {105,59},
         {tuple,{105,53},[{var,{105,54},'K'},{var,{105,56},'V'}]},
         {var,{105,63},'Sorted'}}]},
      {nil,{105,70}}}}]},
  {clause,
   {106,1},
   [{var,{106,13},'Key'},{var,{106,18},'Value'}],
   [],
   [{debug_line,107,43},
    {call,
     {107,5},
     {remote,{107,11},{atom,{107,5},io_lib},{atom,{107,12},format}},
     [{block,0,[{string,{107,19},"%% ~s: ~kp\n"}]},
      {block,0,
       [{cons,
         {107,35},
         {var,{107,36},'Key'},
         {cons,{107,40},{var,{107,40},'Value'},{nil,{107,45}}}}]}]}]}]}.
{function,
    {109,1},
    format_param_info,2,
    [{clause,
         {109,1},
         [{var,{109,1},'_'},{var,{109,1},'_'}],
         [[{call,
               {109,1},
               {remote,
                   {109,1},
                   {atom,{109,1},fake},
                   {atom,{109,1},is_beam_bif_info}},
               []}]],
         [{debug_line,109,44},{atom,{109,1},ignore}]},
     {clause,
         {109,1},
         [{cons,
              {109,19},
              {tuple,{109,20},[{atom,{109,21},type},{var,{109,27},'T'}]},
              {var,{109,32},'Infos'}},
          {var,{109,40},'Break'}],
         [],
         [{debug_line,110,45},
          {cons,
              {110,5},
              {call,
                  {110,6},
                  {atom,{110,6},format_type},
                  [{var,{110,18},'T'},{var,{110,21},'Break'}]},
              {call,
                  {111,6},
                  {atom,{111,6},format_param_info},
                  [{var,{111,24},'Infos'},{var,{111,31},'Break'}]}}]},
     {clause,
         {112,1},
         [{cons,{112,19},{var,{112,20},'Info'},{var,{112,27},'Infos'}},
          {var,{112,35},'Break'}],
         [],
         [{debug_line,113,46},
          {cons,
              {113,5},
              {call,
                  {113,6},
                  {remote,
                      {113,12},
                      {atom,{113,6},io_lib},
                      {atom,{113,13},format}},
                  [{block,0,[{string,{113,20},"~s~kp"}]},
                   {block,0,
                       [{cons,
                            {113,29},
                            {var,{113,30},'Break'},
                            {cons,
                                {113,37},
                                {var,{113,37},'Info'},
                                {nil,{113,41}}}}]}]},
              {call,
                  {114,6},
                  {atom,{114,6},format_param_info},
                  [{var,{114,24},'Infos'},{var,{114,31},'Break'}]}}]},
     {clause,
         {115,1},
         [{nil,{115,19}},{var,{115,23},'_Break'}],
         [],
         [{debug_line,116,47},{nil,{116,5}}]}]}.
{function,
    {118,1},
    format_type,2,
    [{clause,
         {118,1},
         [{var,{118,1},'_'},{var,{118,1},'_'}],
         [[{call,
               {118,1},
               {remote,
                   {118,1},
                   {atom,{118,1},fake},
                   {atom,{118,1},is_beam_bif_info}},
               []}]],
         [{debug_line,118,48},{atom,{118,1},ignore}]},
     {clause,
         {118,1},
         [{var,{118,13},'T'},{var,{118,16},'Break'}],
         [],
         [{debug_line,120,49},
          {match,
              {120,5},
              {var,{120,5},'Indented'},
              {call,
                  {120,16},
                  {remote,
                      {120,23},
                      {atom,{120,16},unicode},
                      {atom,{120,24},characters_to_list}},
                  [{block,0,
                       [{call,
                            {120,43},
                            {atom,{120,43},format_type},
                            [{var,{120,55},'T'}]}]}]}},
          {debug_line,121,50},
          {call,
              {121,5},
              {remote,{121,11},{atom,{121,5},string},{atom,{121,12},replace}},
              [{var,{121,20},'Indented'},
               {block,0,[{cons,{121,30},{char,{121,31},10},{nil,{121,34}}}]},
               {var,{121,37},'Break'},
               {atom,{121,44},all}]}]}]}.
{function,
    {123,1},
    format_blocks,3,
    [{clause,
         {123,1},
         [{var,{123,1},'_'},{var,{123,1},'_'},{var,{123,1},'_'}],
         [[{call,
               {123,1},
               {remote,
                   {123,1},
                   {atom,{123,1},fake},
                   {atom,{123,1},is_beam_bif_info}},
               []}]],
         [{debug_line,123,51},{atom,{123,1},ignore}]},
     {clause,
         {123,1},
         [{var,{123,15},'Ls'},{var,{123,19},'Blocks'},{var,{123,27},'Anno'}],
         [],
         [{debug_line,124,52},
          {match,
              {124,5},
              {var,{124,5},'PP'},
              {lc,{124,10},
                  {block,0,
                      [{call,
                           {124,11},
                           {atom,{124,11},format_block},
                           [{var,{124,24},'L'},
                            {var,{124,27},'Blocks'},
                            {var,{124,35},'Anno'}]}]},
                  [{block,0,[{atom,{124,49},true}]},
                   {generate,
                       {124,46},
                       {var,{124,44},'L'},
                       {var,{124,49},'Ls'}}]}},
          {debug_line,125,53},
          {call,
              {125,5},
              {remote,{125,10},{atom,{125,5},lists},{atom,{125,11},join}},
              [{block,0,[{char,{125,16},10}]},{var,{125,21},'PP'}]}]}]}.
{function,
    {127,1},
    format_block,3,
    [{clause,
         {127,1},
         [{var,{127,1},'_'},{var,{127,1},'_'},{var,{127,1},'_'}],
         [[{call,
               {127,1},
               {remote,
                   {127,1},
                   {atom,{127,1},fake},
                   {atom,{127,1},is_beam_bif_info}},
               []}]],
         [{debug_line,127,54},{atom,{127,1},ignore}]},
     {clause,
         {127,1},
         [{var,{127,14},'L'},
          {var,{127,17},'Blocks'},
          {var,{127,25},'FuncAnno'}],
         [],
         [{debug_line,128,55},
          {match,
              {128,5},
              {tuple,
                  {128,5},
                  [{atom,{128,5},b_blk},
                   {var,{128,17},'Anno'},
                   {var,{128,25},'Is'},
                   {var,{128,33},'Last'}]},
              {call,
                  {128,41},
                  {remote,{128,45},{atom,{128,41},maps},{atom,{128,46},get}},
                  [{var,{128,50},'L'},{var,{128,53},'Blocks'}]}},
          {debug_line,129,56},
          {cons,
              {129,5},
              {'case',
                  {129,6},
                  {call,
                      {129,11},
                      {remote,
                          {129,11},
                          {atom,{129,11},erlang},
                          {atom,{129,11},map_size}},
                      [{var,{129,20},'Anno'}]},
                  [{clause,
                       {130,10},
                       [{integer,{130,10},0}],
                       [],
                       [{debug_line,130,57},{nil,{130,15}}]},
                   {clause,
                       {131,10},
                       [{var,{131,10},'_'}],
                       [],
                       [{debug_line,131,58},
                        {call,
                            {131,15},
                            {remote,
                                {131,21},
                                {atom,{131,15},io_lib},
                                {atom,{131,22},format}},
                            [{block,0,[{string,{131,29},"%% ~kp\n"}]},
                             {block,0,
                                 [{cons,
                                      {131,41},
                                      {var,{131,42},'Anno'},
                                      {nil,{131,46}}}]}]}]}]},
              {cons,
                  {133,6},
                  {call,
                      {133,6},
                      {remote,
                          {133,12},
                          {atom,{133,6},io_lib},
                          {atom,{133,13},format}},
                      [{block,0,
                           [{debug_line,133,59},{string,{133,20},"~kp:"}]},
                       {block,0,
                           [{cons,
                                {133,28},
                                {var,{133,29},'L'},
                                {nil,{133,30}}}]}]},
                  {cons,
                      {134,6},
                      {call,
                          {134,6},
                          {atom,{134,6},format_instrs},
                          [{var,{134,20},'Is'},
                           {var,{134,24},'FuncAnno'},
                           {atom,{134,34},true}]},
                      {cons,
                          {135,6},
                          {char,{135,6},10},
                          {cons,
                              {136,6},
                              {call,
                                  {136,6},
                                  {atom,{136,6},format_terminator},
                                  [{var,{136,24},'Last'},
                                   {var,{136,30},'FuncAnno'}]},
                              {nil,{136,39}}}}}}}]}]}.
{function,
    {138,1},
    format_instrs,3,
    [{clause,
         {138,1},
         [{var,{138,1},'_'},{var,{138,1},'_'},{var,{138,1},'_'}],
         [[{call,
               {138,1},
               {remote,
                   {138,1},
                   {atom,{138,1},fake},
                   {atom,{138,1},is_beam_bif_info}},
               []}]],
         [{debug_line,138,60},{atom,{138,1},ignore}]},
     {clause,
         {138,1},
         [{cons,{138,15},{var,{138,16},'I'},{var,{138,18},'Is'}},
          {var,{138,23},'FuncAnno'},
          {var,{138,33},'First'}],
         [],
         [{debug_line,139,61},
          {cons,
              {139,5},
              {char,{139,6},10},
              {cons,
                  {140,6},
                  {call,
                      {140,6},
                      {atom,{140,6},format_instr},
                      [{var,{140,19},'I'},
                       {var,{140,22},'FuncAnno'},
                       {var,{140,32},'First'}]},
                  {cons,
                      {141,6},
                      {call,
                          {141,6},
                          {atom,{141,6},format_instrs},
                          [{var,{141,20},'Is'},
                           {var,{141,24},'FuncAnno'},
                           {atom,{141,34},false}]},
                      {nil,{141,40}}}}}]},
     {clause,
         {142,1},
         [{nil,{142,15}},{var,{142,19},'_FuncAnno'},{var,{142,30},'_First'}],
         [],
         [{debug_line,143,62},{nil,{143,5}}]}]}.
{function,
 {145,1},
 format_instr,3,
 [{clause,
   {145,1},
   [{var,{145,1},'_'},{var,{145,1},'_'},{var,{145,1},'_'}],
   [[{call,
      {145,1},
      {remote,{145,1},{atom,{145,1},fake},{atom,{145,1},is_beam_bif_info}},
      []}]],
   [{debug_line,145,63},{atom,{145,1},ignore}]},
  {clause,
   {145,1},
   [{tuple,
     {145,14},
     [{atom,{145,14},b_set},
      {var,{145,26},'Anno'},
      {var,{145,41},'Dst'},
      {var,{145,34},'Op'},
      {var,{145,50},'Args'}]},
    {var,{146,14},'FuncAnno'},
    {var,{146,24},'First'}],
   [],
   [{debug_line,147,64},
    {match,
     {147,5},
     {var,{147,5},'AnnoStr'},
     {call,
      {147,15},
      {atom,{147,15},format_instr_anno},
      [{var,{147,33},'Anno'},
       {var,{147,39},'FuncAnno'},
       {var,{147,49},'Args'}]}},
    {debug_line,148,65},
    {match,
     {148,5},
     {var,{148,5},'LiveIntervalStr'},
     {call,
      {148,23},
      {atom,{148,23},format_live_interval},
      [{var,{148,44},'Dst'},{var,{148,49},'FuncAnno'}]}},
    {debug_line,149,66},
    {cons,
     {149,5},
     {'if',
      {149,6},
      [{clause,
        {150,10},
        [],
        [[{var,{150,10},'First'}]],
        [{debug_line,151,67},{nil,{151,14}}]},
       {clause,
        {152,10},
        [],
        [[{op,{152,18},'=/=',{var,{152,10},'AnnoStr'},{nil,{152,22}}}],
         [{op,
           {152,42},
           '=/=',
           {var,{152,26},'LiveIntervalStr'},
           {nil,{152,46}}}]],
        [{debug_line,153,68},{char,{153,14},10}]},
       {clause,
        {154,10},
        [],
        [[{atom,{154,10},true}]],
        [{debug_line,155,69},{nil,{155,14}}]}]},
     {cons,
      {157,6},
      {var,{157,6},'AnnoStr'},
      {cons,
       {158,6},
       {var,{158,6},'LiveIntervalStr'},
       {cons,
        {159,6},
        {call,
         {159,6},
         {remote,{159,12},{atom,{159,6},io_lib},{atom,{159,13},format}},
         [{block,0,[{debug_line,159,70},{string,{159,20},"  ~s~ts = ~ts"}]},
          {block,0,
           [{cons,
             {159,37},
             {call,
              {159,38},
              {atom,{159,38},format_i_number},
              [{var,{159,54},'Anno'}]},
             {cons,
              {160,38},
              {call,
               {160,38},
               {atom,{160,38},format_var},
               [{var,{160,49},'Dst'},{var,{160,54},'FuncAnno'}]},
              {cons,
               {161,38},
               {call,{161,38},{atom,{161,38},format_op},[{var,{161,48},'Op'}]},
               {nil,{161,51}}}}}]}]},
        {cons,
         {162,6},
         {'case',
          {162,6},
          {var,{162,11},'Args'},
          [{clause,
            {163,10},
            [{nil,{163,10}}],
            [],
            [{debug_line,164,71},{nil,{164,14}}]},
           {clause,
            {165,10},
            [{cons,{165,10},{var,{165,11},'_'},{var,{165,13},'_'}}],
            [],
            [{debug_line,166,72},
             {call,
              {166,14},
              {remote,{166,20},{atom,{166,14},io_lib},{atom,{166,21},format}},
              [{block,0,[{string,{166,28}," ~ts"}]},
               {block,0,
                [{cons,
                  {166,36},
                  {call,
                   {166,37},
                   {atom,{166,37},format_args},
                   [{var,{166,49},'Args'},{var,{166,55},'FuncAnno'}]},
                  {nil,{166,64}}}]}]}]}]},
         {nil,{167,9}}}}}}}]}]}.
{function,
    {169,1},
    format_i_number,1,
    [{clause,
         {169,1},
         [{var,{169,1},'_'}],
         [[{call,
               {169,1},
               {remote,
                   {169,1},
                   {atom,{169,1},fake},
                   {atom,{169,1},is_beam_bif_info}},
               []}]],
         [{debug_line,169,73},{atom,{169,1},ignore}]},
     {clause,
         {169,1},
         [{map,
              {169,17},
              [{map_field_exact,
                   {169,20},
                   {atom,{169,19},n},
                   {var,{169,22},'N'}}]}],
         [],
         [{debug_line,170,74},
          {call,
              {170,5},
              {remote,{170,11},{atom,{170,5},io_lib},{atom,{170,12},format}},
              [{block,0,[{string,{170,19},"[~p] "}]},
               {block,0,
                   [{cons,{170,28},{var,{170,29},'N'},{nil,{170,30}}}]}]}]},
     {clause,
         {171,1},
         [{map,{171,17},[]}],
         [],
         [{debug_line,171,75},{nil,{171,25}}]}]}.
{function,
 {173,1},
 format_terminator,2,
 [{clause,
   {173,1},
   [{var,{173,1},'_'},{var,{173,1},'_'}],
   [[{call,
      {173,1},
      {remote,{173,1},{atom,{173,1},fake},{atom,{173,1},is_beam_bif_info}},
      []}]],
   [{debug_line,173,76},{atom,{173,1},ignore}]},
  {clause,
   {173,1},
   [{tuple,
     {173,19},
     [{atom,{173,19},b_br},
      {var,{173,30},'A'},
      {tuple,{173,37},[{atom,{173,37},b_literal},{atom,{173,52},true}]},
      {var,{174,30},'Same'},
      {var,{174,40},'Same'}]},
    {var,{174,47},'_'}],
   [],
   [{debug_line,175,77},
    {call,
     {175,5},
     {remote,{175,11},{atom,{175,5},io_lib},{atom,{175,12},format}},
     [{block,0,[{string,{175,19},"~s  ~sbr ~ts\n"}]},
      {block,0,
       [{debug_line,176,78},
        {cons,
         {176,19},
         {call,
          {176,20},
          {atom,{176,20},format_terminator_anno},
          [{var,{176,43},'A'}]},
         {cons,
          {177,20},
          {call,{177,20},{atom,{177,20},format_i_number},[{var,{177,36},'A'}]},
          {cons,
           {178,20},
           {call,
            {178,20},
            {atom,{178,20},format_label},
            [{var,{178,33},'Same'}]},
           {nil,{178,38}}}}}]}]}]},
  {clause,
   {179,1},
   [{tuple,
     {179,19},
     [{atom,{179,19},b_br},
      {var,{179,30},'A'},
      {var,{179,37},'Bool'},
      {var,{179,47},'Succ'},
      {var,{179,57},'Fail'}]},
    {var,{179,64},'FuncAnno'}],
   [],
   [{debug_line,180,79},
    {call,
     {180,5},
     {remote,{180,11},{atom,{180,5},io_lib},{atom,{180,12},format}},
     [{block,0,[{string,{180,19},"~s  ~sbr ~ts, ~ts, ~ts\n"}]},
      {block,0,
       [{debug_line,181,80},
        {cons,
         {181,19},
         {call,
          {181,20},
          {atom,{181,20},format_terminator_anno},
          [{var,{181,43},'A'}]},
         {cons,
          {182,20},
          {call,{182,20},{atom,{182,20},format_i_number},[{var,{182,36},'A'}]},
          {cons,
           {183,20},
           {call,
            {183,20},
            {atom,{183,20},format_arg},
            [{var,{183,31},'Bool'},{var,{183,37},'FuncAnno'}]},
           {cons,
            {184,20},
            {call,
             {184,20},
             {atom,{184,20},format_label},
             [{var,{184,33},'Succ'}]},
            {cons,
             {185,20},
             {call,
              {185,20},
              {atom,{185,20},format_label},
              [{var,{185,33},'Fail'}]},
             {nil,{185,38}}}}}}}]}]}]},
  {clause,
   {186,1},
   [{tuple,
     {186,19},
     [{atom,{186,19},b_switch},
      {var,{186,34},'A'},
      {var,{186,40},'Arg'},
      {var,{186,49},'Fail'},
      {var,{186,59},'List'}]},
    {var,{186,66},'FuncAnno'}],
   [],
   [{debug_line,187,81},
    {call,
     {187,5},
     {remote,{187,11},{atom,{187,5},io_lib},{atom,{187,12},format}},
     [{block,0,[{string,{187,19},"~s  ~sswitch ~ts, ~ts, ~ts\n"}]},
      {block,0,
       [{debug_line,188,82},
        {cons,
         {188,19},
         {call,
          {188,20},
          {atom,{188,20},format_terminator_anno},
          [{var,{188,43},'A'}]},
         {cons,
          {189,20},
          {call,{189,20},{atom,{189,20},format_i_number},[{var,{189,36},'A'}]},
          {cons,
           {189,39},
           {call,
            {189,39},
            {atom,{189,39},format_arg},
            [{var,{189,50},'Arg'},{var,{189,55},'FuncAnno'}]},
           {cons,
            {190,20},
            {call,
             {190,20},
             {atom,{190,20},format_label},
             [{var,{190,33},'Fail'}]},
            {cons,
             {191,20},
             {call,
              {191,20},
              {atom,{191,20},format_switch_list},
              [{var,{191,39},'List'},{var,{191,45},'FuncAnno'}]},
             {nil,{191,54}}}}}}}]}]}]},
  {clause,
   {192,1},
   [{tuple,
     {192,19},
     [{atom,{192,19},b_ret},{var,{192,31},'A'},{var,{192,37},'Arg'}]},
    {var,{192,43},'FuncAnno'}],
   [],
   [{debug_line,193,83},
    {call,
     {193,5},
     {remote,{193,11},{atom,{193,5},io_lib},{atom,{193,12},format}},
     [{block,0,[{string,{193,19},"~s  ~sret ~ts\n"}]},
      {block,0,
       [{debug_line,194,84},
        {cons,
         {194,19},
         {call,
          {194,20},
          {atom,{194,20},format_terminator_anno},
          [{var,{194,43},'A'}]},
         {cons,
          {195,20},
          {call,{195,20},{atom,{195,20},format_i_number},[{var,{195,36},'A'}]},
          {cons,
           {196,20},
           {call,
            {196,20},
            {atom,{196,20},format_arg},
            [{var,{196,31},'Arg'},{var,{196,36},'FuncAnno'}]},
           {nil,{196,45}}}}}]}]}]}]}.
{function,{198,1},
          format_terminator_anno,1,
          [{clause,{198,1},
                   [{var,{198,1},'_'}],
                   [[{call,{198,1},
                           {remote,{198,1},
                                   {atom,{198,1},fake},
                                   {atom,{198,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,198,85},{atom,{198,1},ignore}]},
           {clause,{198,1},
                   [{var,{198,24},'Anno'}],
                   [],
                   [{debug_line,199,86},
                    {call,{199,5},
                          {atom,{199,5},format_instr_anno},
                          [{var,{199,23},'Anno'},
                           {block,0,[{map,{199,29},[]}]},
                           {nil,{199,34}}]}]}]}.
{function,
    {201,1},
    format_op,1,
    [{clause,
         {201,1},
         [{var,{201,1},'_'}],
         [[{call,
               {201,1},
               {remote,
                   {201,1},
                   {atom,{201,1},fake},
                   {atom,{201,1},is_beam_bif_info}},
               []}]],
         [{debug_line,201,87},{atom,{201,1},ignore}]},
     {clause,
         {201,1},
         [{tuple,{201,11},[{var,{201,12},'Prefix'},{var,{201,19},'Name'}]}],
         [],
         [{debug_line,202,88},
          {call,
              {202,5},
              {remote,{202,11},{atom,{202,5},io_lib},{atom,{202,12},format}},
              [{block,0,[{string,{202,19},"~p:~p"}]},
               {block,0,
                   [{cons,
                        {202,28},
                        {var,{202,29},'Prefix'},
                        {cons,
                            {202,36},
                            {var,{202,36},'Name'},
                            {nil,{202,40}}}}]}]}]},
     {clause,
         {203,1},
         [{var,{203,11},'Name'}],
         [],
         [{debug_line,204,89},
          {call,
              {204,5},
              {remote,{204,11},{atom,{204,5},io_lib},{atom,{204,12},format}},
              [{block,0,[{string,{204,19},"~p"}]},
               {block,0,
                   [{cons,
                        {204,25},
                        {var,{204,26},'Name'},
                        {nil,{204,30}}}]}]}]}]}.
{function,
    {206,1},
    format_register,2,
    [{clause,
         {206,1},
         [{var,{206,1},'_'},{var,{206,1},'_'}],
         [[{call,
               {206,1},
               {remote,
                   {206,1},
                   {atom,{206,1},fake},
                   {atom,{206,1},is_beam_bif_info}},
               []}]],
         [{debug_line,206,90},{atom,{206,1},ignore}]},
     {clause,
         {206,1},
         [{match,
              {206,17},
              {tuple,{206,17},[{atom,{206,17},b_var},{var,{206,17},'_'}]},
              {var,{206,26},'V'}},
          {map,
              {206,29},
              [{map_field_exact,
                   {206,40},
                   {atom,{206,31},registers},
                   {var,{206,42},'Regs'}}]}],
         [],
         [{debug_line,207,91},
          {match,
              {207,5},
              {tuple,{207,5},[{var,{207,6},'Tag'},{var,{207,10},'N'}]},
              {call,
                  {207,15},
                  {remote,{207,19},{atom,{207,15},maps},{atom,{207,20},get}},
                  [{var,{207,24},'V'},{var,{207,27},'Regs'}]}},
          {debug_line,208,92},
          {call,
              {208,5},
              {remote,{208,11},{atom,{208,5},io_lib},{atom,{208,12},format}},
              [{block,0,[{string,{208,19},"~p~p"}]},
               {block,0,
                   [{cons,
                        {208,27},
                        {var,{208,28},'Tag'},
                        {cons,
                            {208,32},
                            {var,{208,32},'N'},
                            {nil,{208,33}}}}]}]}]},
     {clause,
         {209,1},
         [{var,{209,17},'_'},{map,{209,20},[]}],
         [],
         [{debug_line,209,93},{string,{209,28},[]}]}]}.
{function,
    {211,1},
    format_var,2,
    [{clause,
         {211,1},
         [{var,{211,1},'_'},{var,{211,1},'_'}],
         [[{call,
               {211,1},
               {remote,
                   {211,1},
                   {atom,{211,1},fake},
                   {atom,{211,1},is_beam_bif_info}},
               []}]],
         [{debug_line,211,94},{atom,{211,1},ignore}]},
     {clause,
         {211,1},
         [{var,{211,12},'Var'},{var,{211,17},'FuncAnno'}],
         [],
         [{debug_line,212,95},
          {match,
              {212,5},
              {var,{212,5},'VarString'},
              {call,
                  {212,17},
                  {atom,{212,17},format_var_1},
                  [{var,{212,30},'Var'}]}},
          {debug_line,213,96},
          {'case',
              {213,5},
              {call,
                  {213,10},
                  {atom,{213,10},format_register},
                  [{var,{213,26},'Var'},{var,{213,31},'FuncAnno'}]},
              [{clause,
                   {214,9},
                   [{nil,{214,9}}],
                   [],
                   [{debug_line,214,97},{var,{214,15},'VarString'}]},
               {clause,
                   {215,9},
                   [{match,
                        {215,9},
                        {cons,{215,9},{var,{215,10},'_'},{var,{215,12},'_'}},
                        {var,{215,15},'Reg'}}],
                   [],
                   [{debug_line,215,98},
                    {cons,
                        {215,22},
                        {var,{215,23},'Reg'},
                        {cons,
                            {215,27},
                            {char,{215,27},47},
                            {cons,
                                {215,30},
                                {var,{215,30},'VarString'},
                                {nil,{215,39}}}}}]}]}]}]}.
{function,{218,1},
          format_var_1,1,
          [{clause,{218,1},
                   [{var,{218,1},'_'}],
                   [[{call,{218,1},
                           {remote,{218,1},
                                   {atom,{218,1},fake},
                                   {atom,{218,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,218,99},{atom,{218,1},ignore}]},
           {clause,{218,1},
                   [{tuple,{218,14},
                           [{atom,{218,14},b_var},{var,{218,26},'Name'}]}],
                   [[{call,{218,38},
                           {remote,{218,38},
                                   {atom,{218,38},erlang},
                                   {atom,{218,38},is_atom}},
                           [{var,{218,46},'Name'}]}]],
                   [{debug_line,219,100},
                    {call,{219,5},
                          {remote,{219,5},
                                  {atom,{219,5},erlang},
                                  {atom,{219,5},atom_to_list}},
                          [{var,{219,18},'Name'}]}]},
           {clause,{220,1},
                   [{tuple,{220,14},
                           [{atom,{220,14},b_var},{var,{220,26},'Name'}]}],
                   [[{call,{220,38},
                           {remote,{220,38},
                                   {atom,{220,38},erlang},
                                   {atom,{220,38},is_integer}},
                           [{var,{220,49},'Name'}]}]],
                   [{debug_line,221,101},
                    {op,{221,8},
                        '++',
                        {string,{221,5},"_"},
                        {call,{221,10},
                              {remote,{221,10},
                                      {atom,{221,10},erlang},
                                      {atom,{221,10},integer_to_list}},
                              [{var,{221,26},'Name'}]}}]}]}.
{function,
    {223,1},
    format_args,2,
    [{clause,
         {223,1},
         [{var,{223,1},'_'},{var,{223,1},'_'}],
         [[{call,
               {223,1},
               {remote,
                   {223,1},
                   {atom,{223,1},fake},
                   {atom,{223,1},is_beam_bif_info}},
               []}]],
         [{debug_line,223,102},{atom,{223,1},ignore}]},
     {clause,
         {223,1},
         [{var,{223,13},'Args'},{var,{223,19},'FuncAnno'}],
         [],
         [{debug_line,224,103},
          {match,
              {224,5},
              {var,{224,5},'Ss'},
              {lc,{224,10},
                  {block,0,
                      [{call,
                           {224,11},
                           {atom,{224,11},format_arg},
                           [{var,{224,22},'Arg'},{var,{224,27},'FuncAnno'}]}]},
                  [{block,0,[{atom,{224,47},true}]},
                   {generate,
                       {224,44},
                       {var,{224,40},'Arg'},
                       {var,{224,47},'Args'}}]}},
          {debug_line,225,104},
          {call,
              {225,5},
              {remote,{225,10},{atom,{225,5},lists},{atom,{225,11},join}},
              [{block,0,[{string,{225,16},", "}]},{var,{225,22},'Ss'}]}]}]}.
{function,
    {227,1},
    format_arg,2,
    [{clause,
         {227,1},
         [{var,{227,1},'_'},{var,{227,1},'_'}],
         [[{call,
               {227,1},
               {remote,
                   {227,1},
                   {atom,{227,1},fake},
                   {atom,{227,1},is_beam_bif_info}},
               []}]],
         [{debug_line,227,105},{atom,{227,1},ignore}]},
     {clause,
         {227,1},
         [{match,
              {227,12},
              {tuple,{227,12},[{atom,{227,12},b_var},{var,{227,12},'_'}]},
              {var,{227,21},'Arg'}},
          {var,{227,26},'FuncAnno'}],
         [],
         [{debug_line,228,106},
          {call,
              {228,5},
              {atom,{228,5},format_var},
              [{var,{228,16},'Arg'},{var,{228,21},'FuncAnno'}]}]},
     {clause,
         {229,1},
         [{tuple,{229,12},[{atom,{229,12},b_literal},{var,{229,27},'Val'}]},
          {var,{229,33},'_FuncAnno'}],
         [],
         [{debug_line,230,107},
          {call,
              {230,5},
              {remote,{230,11},{atom,{230,5},io_lib},{atom,{230,12},format}},
              [{block,0,[{string,{230,19},"`~kp`"}]},
               {block,0,
                   [{cons,{230,28},{var,{230,29},'Val'},{nil,{230,32}}}]}]}]},
     {clause,
         {231,1},
         [{tuple,
              {231,12},
              [{atom,{231,12},b_remote},
               {var,{231,26},'Mod'},
               {var,{231,35},'Name'},
               {var,{231,46},'Arity'}]},
          {var,{231,54},'FuncAnno'}],
         [],
         [{debug_line,232,108},
          {call,
              {232,5},
              {remote,{232,11},{atom,{232,5},io_lib},{atom,{232,12},format}},
              [{block,0,[{string,{232,19},"(~ts:~ts/~p)"}]},
               {block,0,
                   [{debug_line,233,109},
                    {cons,
                        {233,19},
                        {call,
                            {233,20},
                            {atom,{233,20},format_arg},
                            [{var,{233,31},'Mod'},{var,{233,36},'FuncAnno'}]},
                        {cons,
                            {233,46},
                            {call,
                                {233,46},
                                {atom,{233,46},format_arg},
                                [{var,{233,57},'Name'},
                                 {var,{233,63},'FuncAnno'}]},
                            {cons,
                                {233,73},
                                {var,{233,73},'Arity'},
                                {nil,{233,78}}}}}]}]}]},
     {clause,
         {234,1},
         [{tuple,
              {234,12},
              [{atom,{234,12},b_local},
               {var,{234,26},'Name'},
               {var,{234,37},'Arity'}]},
          {var,{234,45},'FuncAnno'}],
         [],
         [{debug_line,235,110},
          {call,
              {235,5},
              {remote,{235,11},{atom,{235,5},io_lib},{atom,{235,12},format}},
              [{block,0,[{string,{235,19},"(~ts/~p)"}]},
               {block,0,
                   [{cons,
                        {235,31},
                        {call,
                            {235,32},
                            {atom,{235,32},format_arg},
                            [{var,{235,43},'Name'},{var,{235,49},'FuncAnno'}]},
                        {cons,
                            {235,59},
                            {var,{235,59},'Arity'},
                            {nil,{235,64}}}}]}]}]},
     {clause,
         {236,1},
         [{tuple,{236,12},[{var,{236,13},'Value'},{var,{236,19},'Label'}]},
          {var,{236,27},'FuncAnno'}],
         [[{call,
               {236,42},
               {remote,
                   {236,42},
                   {atom,{236,42},erlang},
                   {atom,{236,42},is_integer}},
               [{var,{236,53},'Label'}]}]],
         [{debug_line,237,111},
          {call,
              {237,5},
              {remote,{237,11},{atom,{237,5},io_lib},{atom,{237,12},format}},
              [{block,0,[{string,{237,19},"{ ~ts, ~ts }"}]},
               {block,0,
                   [{cons,
                        {237,35},
                        {call,
                            {237,36},
                            {atom,{237,36},format_arg},
                            [{var,{237,47},'Value'},
                             {var,{237,54},'FuncAnno'}]},
                        {cons,
                            {238,36},
                            {call,
                                {238,36},
                                {atom,{238,36},format_label},
                                [{var,{238,49},'Label'}]},
                            {nil,{238,55}}}}]}]}]},
     {clause,
         {239,1},
         [{var,{239,12},'Other'},{var,{239,19},'_'}],
         [],
         [{debug_line,240,112},
          {call,
              {240,5},
              {remote,{240,11},{atom,{240,5},io_lib},{atom,{240,12},format}},
              [{block,0,[{string,{240,19},"*** ~kp ***"}]},
               {block,0,
                   [{cons,
                        {240,34},
                        {var,{240,35},'Other'},
                        {nil,{240,40}}}]}]}]}]}.
{function,
 {242,1},
 format_switch_list,2,
 [{clause,
   {242,1},
   [{var,{242,1},'_'},{var,{242,1},'_'}],
   [[{call,
      {242,1},
      {remote,{242,1},{atom,{242,1},fake},{atom,{242,1},is_beam_bif_info}},
      []}]],
   [{debug_line,242,113},{atom,{242,1},ignore}]},
  {clause,
   {242,1},
   [{var,{242,20},'List'},{var,{242,26},'FuncAnno'}],
   [],
   [{debug_line,243,114},
    {match,
     {243,5},
     {var,{243,5},'Ss'},
     {lc,
      {243,10},
      {block,0,
       [{call,
         {243,11},
         {remote,{243,17},{atom,{243,11},io_lib},{atom,{243,18},format}},
         [{block,0,[{string,{243,25},"{ ~ts, ~ts }"}]},
          {block,0,
           [{cons,
             {243,41},
             {call,
              {243,42},
              {atom,{243,42},format_arg},
              [{var,{243,53},'Val'},{var,{243,58},'FuncAnno'}]},
             {cons,
              {244,42},
              {call,
               {244,42},
               {atom,{244,42},format_label},
               [{var,{244,55},'L'}]},
              {nil,{244,57}}}}]}]}]},
      [{block,0,[{debug_line,244,115},{atom,{244,75},true}]},
       {generate_strict,
        {244,71},
        {tuple,{244,63},[{var,{244,64},'Val'},{var,{244,68},'L'}]},
        {var,{244,75},'List'}}]}},
    {debug_line,245,116},
    {call,
     {245,5},
     {remote,{245,11},{atom,{245,5},io_lib},{atom,{245,12},format}},
     [{block,0,[{string,{245,19},"[\n    ~ts\n  ]"}]},
      {block,0,
       [{cons,
         {245,38},
         {call,
          {245,39},
          {remote,{245,44},{atom,{245,39},lists},{atom,{245,45},join}},
          [{block,0,[{string,{245,50},",\n    "}]},{var,{245,61},'Ss'}]},
         {nil,{245,64}}}]}]}]}]}.
{function,
    {247,1},
    format_label,1,
    [{clause,
         {247,1},
         [{var,{247,1},'_'}],
         [[{call,
               {247,1},
               {remote,
                   {247,1},
                   {atom,{247,1},fake},
                   {atom,{247,1},is_beam_bif_info}},
               []}]],
         [{debug_line,247,117},{atom,{247,1},ignore}]},
     {clause,
         {247,1},
         [{var,{247,14},'L'}],
         [],
         [{debug_line,248,118},
          {call,
              {248,5},
              {remote,{248,11},{atom,{248,5},io_lib},{atom,{248,12},format}},
              [{block,0,[{string,{248,19},"^~w"}]},
               {block,0,
                   [{cons,{248,26},{var,{248,27},'L'},{nil,{248,28}}}]}]}]}]}.
{function,
 {250,1},
 format_instr_anno,3,
 [{clause,
   {250,1},
   [{var,{250,1},'_'},{var,{250,1},'_'},{var,{250,1},'_'}],
   [[{call,
      {250,1},
      {remote,{250,1},{atom,{250,1},fake},{atom,{250,1},is_beam_bif_info}},
      []}]],
   [{debug_line,250,119},{atom,{250,1},ignore}]},
  {clause,
   {250,1},
   [{match,
     {250,19},
     {map,
      {250,19},
      [{map_field_exact,{250,22},{atom,{250,21},n},{var,{250,24},'_'}}]},
     {var,{250,27},'Anno'}},
    {var,{250,33},'FuncAnno'},
    {var,{250,43},'Args'}],
   [],
   [{debug_line,251,120},
    {call,
     {251,5},
     {atom,{251,5},format_instr_anno},
     [{block,0,
       [{call,
         {251,23},
         {remote,{251,27},{atom,{251,23},maps},{atom,{251,28},remove}},
         [{atom,{251,35},n},{var,{251,38},'Anno'}]}]},
      {var,{251,45},'FuncAnno'},
      {var,{251,55},'Args'}]}]},
  {clause,
   {252,1},
   [{match,
     {252,19},
     {map,
      {252,19},
      [{map_field_exact,
        {252,29},
        {atom,{252,21},location},
        {tuple,{252,31},[{var,{252,32},'File'},{var,{252,37},'Line'}]}}]},
     {var,{252,44},'Anno0'}},
    {var,{252,51},'FuncAnno'},
    {var,{252,61},'Args'}],
   [],
   [{debug_line,253,121},
    {match,
     {253,5},
     {var,{253,5},'Anno'},
     {call,
      {253,12},
      {remote,{253,16},{atom,{253,12},maps},{atom,{253,17},remove}},
      [{atom,{253,24},location},{var,{253,34},'Anno0'}]}},
    {debug_line,254,122},
    {cons,
     {254,5},
     {call,
      {254,6},
      {remote,{254,12},{atom,{254,6},io_lib},{atom,{254,13},format}},
      [{block,0,[{string,{254,20},"  %% ~ts:~p\n"}]},
       {block,0,
        [{cons,
          {254,37},
          {var,{254,38},'File'},
          {cons,{254,43},{var,{254,43},'Line'},{nil,{254,47}}}}]}]},
     {call,
      {255,6},
      {atom,{255,6},format_instr_anno},
      [{var,{255,24},'Anno'},
       {var,{255,30},'FuncAnno'},
       {var,{255,40},'Args'}]}}]},
  {clause,
   {256,1},
   [{match,
     {256,19},
     {map,
      {256,19},
      [{map_field_exact,
        {256,32},
        {atom,{256,21},result_type},
        {var,{256,34},'T'}}]},
     {var,{256,37},'Anno0'}},
    {var,{256,44},'FuncAnno'},
    {var,{256,54},'Args'}],
   [],
   [{debug_line,257,123},
    {match,
     {257,5},
     {var,{257,5},'Anno'},
     {call,
      {257,12},
      {remote,{257,16},{atom,{257,12},maps},{atom,{257,17},remove}},
      [{atom,{257,24},result_type},{var,{257,37},'Anno0'}]}},
    {debug_line,258,124},
    {match,{258,5},{var,{258,5},'Break'},{string,{258,13},"\n  %%    "}},
    {debug_line,259,125},
    {cons,
     {259,5},
     {call,
      {259,6},
      {remote,{259,12},{atom,{259,6},io_lib},{atom,{259,13},format}},
      [{block,0,[{string,{259,20},"  %% Result type:~s~s\n"}]},
       {block,0,
        [{debug_line,260,126},
         {cons,
          {260,20},
          {var,{260,21},'Break'},
          {cons,
           {260,28},
           {call,
            {260,28},
            {atom,{260,28},format_type},
            [{var,{260,40},'T'},{var,{260,43},'Break'}]},
           {nil,{260,49}}}}]}]},
     {call,
      {261,21},
      {atom,{261,21},format_instr_anno},
      [{var,{261,39},'Anno'},
       {var,{261,45},'FuncAnno'},
       {var,{261,55},'Args'}]}}]},
  {clause,
   {262,1},
   [{match,
     {262,19},
     {map,
      {262,19},
      [{map_field_exact,
        {262,30},
        {atom,{262,21},arg_types},
        {var,{262,32},'Ts'}}]},
     {var,{262,36},'Anno0'}},
    {var,{262,43},'FuncAnno'},
    {var,{262,53},'Args'}],
   [],
   [{debug_line,263,127},
    {match,
     {263,5},
     {var,{263,5},'Anno'},
     {call,
      {263,12},
      {remote,{263,16},{atom,{263,12},maps},{atom,{263,17},remove}},
      [{atom,{263,24},arg_types},{var,{263,35},'Anno0'}]}},
    {debug_line,265,128},
    {match,{265,5},{var,{265,5},'Break'},{string,{265,13},"\n  %%    "}},
    {debug_line,267,129},
    {match,
     {267,5},
     {var,{267,5},'Iota'},
     {call,
      {267,12},
      {remote,{267,17},{atom,{267,12},lists},{atom,{267,18},seq}},
      [{integer,{267,22},0},
       {block,0,
        [{op,
          {267,38},
          '-',
          {call,
           {267,25},
           {remote,{267,25},{atom,{267,25},erlang},{atom,{267,25},length}},
           [{var,{267,32},'Args'}]},
          {integer,{267,40},1}}]}]}},
    {debug_line,268,130},
    {match,
     {268,5},
     {var,{268,5},'Formatted0'},
     {lc,
      {268,18},
      {block,0,
       [{cons,
         {268,19},
         {call,
          {268,20},
          {atom,{268,20},format_arg},
          [{var,{268,31},'Arg'},{var,{268,36},'FuncAnno'}]},
         {cons,
          {268,47},
          {string,{268,47}," => "},
          {cons,
           {269,20},
           {call,
            {269,20},
            {atom,{269,20},format_type},
            [{block,0,
              [{debug_line,269,131},
               {call,
                {269,32},
                {remote,
                 {269,32},
                 {atom,{269,32},erlang},
                 {atom,{269,32},map_get}},
                [{var,{269,40},'Idx'},{var,{269,45},'Ts'}]}]},
             {var,{269,50},'Break'}]},
           {nil,{269,56}}}}}]},
      [{block,0,[{debug_line,270,132},{atom,{270,26},true}]},
       {zip,
        {270,48},
        [{generate,{270,26},{var,{270,22},'Idx'},{var,{270,29},'Iota'}},
         {generate,{270,41},{var,{270,37},'Arg'},{var,{270,44},'Args'}}]},
       {block,0,[{atom,{270,50},true}]},
       {call,
        {270,50},
        {remote,{270,50},{atom,{270,50},erlang},{atom,{270,50},is_map_key}},
        [{var,{270,61},'Idx'},{var,{270,66},'Ts'}]}]}},
    {debug_line,271,133},
    {match,
     {271,5},
     {var,{271,5},'Formatted'},
     {call,
      {271,17},
      {remote,{271,22},{atom,{271,17},lists},{atom,{271,23},join}},
      [{var,{271,28},'Break'},{var,{271,35},'Formatted0'}]}},
    {debug_line,273,134},
    {cons,
     {273,5},
     {call,
      {273,6},
      {remote,{273,12},{atom,{273,6},io_lib},{atom,{273,13},format}},
      [{block,0,[{string,{273,20},"  %% Argument types:~s~ts\n"}]},
       {block,0,
        [{debug_line,274,135},
         {cons,
          {274,20},
          {var,{274,21},'Break'},
          {cons,
           {274,28},
           {call,
            {274,28},
            {remote,
             {274,35},
             {atom,{274,28},unicode},
             {atom,{274,36},characters_to_list}},
            [{var,{274,55},'Formatted'}]},
           {nil,{274,65}}}}]}]},
     {call,
      {275,6},
      {atom,{275,6},format_instr_anno},
      [{var,{275,24},'Anno'},
       {var,{275,30},'FuncAnno'},
       {var,{275,40},'Args'}]}}]},
  {clause,
   {276,1},
   [{match,
     {276,19},
     {map,
      {276,19},
      [{map_field_exact,
        {276,28},
        {atom,{276,21},aliased},
        {var,{276,30},'As'}}]},
     {var,{276,34},'Anno'}},
    {var,{276,40},'FuncAnno'},
    {var,{276,50},'Args'}],
   [],
   [{debug_line,277,136},
    {match,{277,5},{var,{277,5},'Break'},{string,{277,13},"\n  %%    "}},
    {debug_line,278,137},
    {cons,
     {278,5},
     {string,{278,6},"  %% Aliased:"},
     {cons,
      {279,6},
      {call,
       {279,6},
       {remote,{279,12},{atom,{279,6},string},{atom,{279,13},join}},
       [{block,0,
         [{debug_line,279,138},
          {lc,
           {279,18},
           {block,0,
            [{cons,
              {279,19},
              {var,{279,20},'Break'},
              {cons,
               {279,27},
               {call,{279,27},{atom,{279,27},format_var},[{var,{279,38},'V'}]},
               {nil,{279,40}}}}]},
           [{block,0,[{atom,{279,50},true}]},
            {generate,{279,47},{var,{279,45},'V'},{var,{279,50},'As'}}]}]},
        {block,0,[{string,{279,55},", "}]}]},
      {cons,
       {279,62},
       {string,{279,62},"\n"},
       {cons,
        {280,6},
        {call,
         {280,6},
         {atom,{280,6},format_instr_anno},
         [{block,0,
           [{debug_line,280,139},
            {call,
             {280,24},
             {remote,{280,28},{atom,{280,24},maps},{atom,{280,29},remove}},
             [{atom,{280,36},aliased},{var,{280,45},'Anno'}]}]},
          {var,{280,52},'FuncAnno'},
          {var,{280,62},'Args'}]},
        {nil,{280,67}}}}}}]},
  {clause,
   {281,1},
   [{match,
     {281,19},
     {map,
      {281,19},
      [{map_field_exact,{281,27},{atom,{281,21},unique},{var,{281,29},'Us'}}]},
     {var,{281,33},'Anno'}},
    {var,{281,39},'FuncAnno'},
    {var,{281,49},'Args'}],
   [],
   [{debug_line,282,140},
    {match,{282,5},{var,{282,5},'Break'},{string,{282,13},"\n  %%    "}},
    {debug_line,283,141},
    {cons,
     {283,5},
     {string,{283,6},"  %% Unique:"},
     {cons,
      {284,6},
      {call,
       {284,6},
       {remote,{284,12},{atom,{284,6},string},{atom,{284,13},join}},
       [{block,0,
         [{debug_line,284,142},
          {lc,
           {284,18},
           {block,0,
            [{cons,
              {284,19},
              {var,{284,20},'Break'},
              {cons,
               {284,27},
               {call,{284,27},{atom,{284,27},format_var},[{var,{284,38},'V'}]},
               {nil,{284,40}}}}]},
           [{block,0,[{atom,{284,50},true}]},
            {generate,{284,47},{var,{284,45},'V'},{var,{284,50},'Us'}}]}]},
        {block,0,[{string,{284,55},", "}]}]},
      {cons,
       {284,62},
       {string,{284,62},"\n"},
       {cons,
        {285,6},
        {call,
         {285,6},
         {atom,{285,6},format_instr_anno},
         [{block,0,
           [{debug_line,285,143},
            {call,
             {285,24},
             {remote,{285,28},{atom,{285,24},maps},{atom,{285,29},remove}},
             [{atom,{285,36},unique},{var,{285,44},'Anno'}]}]},
          {var,{285,51},'FuncAnno'},
          {var,{285,61},'Args'}]},
        {nil,{285,66}}}}}}]},
  {clause,
   {286,1},
   [{var,{286,19},'Anno'},{var,{286,25},'_FuncAnno'},{var,{286,36},'_Args'}],
   [],
   [{debug_line,287,144},
    {call,
     {287,5},
     {atom,{287,5},format_instr_anno_1},
     [{var,{287,25},'Anno'}]}]}]}.
{function,
    {289,1},
    format_instr_anno_1,1,
    [{clause,
         {289,1},
         [{var,{289,1},'_'}],
         [[{call,
               {289,1},
               {remote,
                   {289,1},
                   {atom,{289,1},fake},
                   {atom,{289,1},is_beam_bif_info}},
               []}]],
         [{debug_line,289,145},{atom,{289,1},ignore}]},
     {clause,
         {289,1},
         [{var,{289,21},'Anno'}],
         [],
         [{debug_line,290,146},
          {'case',
              {290,5},
              {call,
                  {290,10},
                  {remote,
                      {290,10},
                      {atom,{290,10},erlang},
                      {atom,{290,10},map_size}},
                  [{var,{290,19},'Anno'}]},
              [{clause,
                   {291,9},
                   [{integer,{291,9},0}],
                   [],
                   [{debug_line,292,147},{nil,{292,13}}]},
               {clause,
                   {293,9},
                   [{var,{293,9},'_'}],
                   [],
                   [{debug_line,294,148},
                    {cons,
                        {294,13},
                        {call,
                            {294,14},
                            {remote,
                                {294,20},
                                {atom,{294,14},io_lib},
                                {atom,{294,21},format}},
                            [{block,0,[{string,{294,28},"  %% Anno: ~kp\n"}]},
                             {block,0,
                                 [{cons,
                                      {294,48},
                                      {var,{294,49},'Anno'},
                                      {nil,{294,53}}}]}]},
                        {nil,{294,55}}}]}]}]}]}.
{function,
 {297,1},
 format_live_interval,2,
 [{clause,
   {297,1},
   [{var,{297,1},'_'},{var,{297,1},'_'}],
   [[{call,
      {297,1},
      {remote,{297,1},{atom,{297,1},fake},{atom,{297,1},is_beam_bif_info}},
      []}]],
   [{debug_line,297,149},{atom,{297,1},ignore}]},
  {clause,
   {297,1},
   [{match,
     {297,22},
     {tuple,{297,22},[{atom,{297,22},b_var},{var,{297,22},'_'}]},
     {var,{297,31},'Dst'}},
    {map,
     {297,36},
     [{map_field_exact,
       {297,52},
       {atom,{297,38},live_intervals},
       {var,{297,54},'Intervals'}}]}],
   [],
   [{debug_line,298,150},
    {'case',
     {298,5},
     {var,{298,10},'Intervals'},
     [{clause,
       {299,9},
       [{map,
         {299,9},
         [{map_field_exact,
           {299,14},
           {var,{299,11},'Dst'},
           {var,{299,16},'Rs0'}}]}],
       [],
       [{debug_line,300,151},
        {match,
         {300,13},
         {var,{300,13},'Rs1'},
         {lc,
          {300,19},
          {block,0,
           [{call,
             {300,20},
             {remote,{300,26},{atom,{300,20},io_lib},{atom,{300,27},format}},
             [{block,0,[{string,{300,34},"~p..~p"}]},
              {block,0,
               [{cons,
                 {300,44},
                 {var,{300,45},'Start'},
                 {cons,{300,51},{var,{300,51},'End'},{nil,{300,54}}}}]}]}]},
          [{block,0,[{debug_line,301,152},{atom,{301,39},true}]},
           {generate_strict,
            {301,35},
            {tuple,{301,23},[{var,{301,24},'Start'},{var,{301,30},'End'}]},
            {var,{301,39},'Rs0'}}]}},
        {debug_line,302,153},
        {match,
         {302,13},
         {var,{302,13},'Rs'},
         {call,
          {302,18},
          {remote,{302,23},{atom,{302,18},lists},{atom,{302,24},join}},
          [{block,0,[{string,{302,29}," "}]},{var,{302,34},'Rs1'}]}},
        {debug_line,303,154},
        {call,
         {303,13},
         {remote,{303,19},{atom,{303,13},io_lib},{atom,{303,20},format}},
         [{block,0,[{string,{303,27},"  %% ~ts: ~s\n"}]},
          {block,0,
           [{cons,
             {303,45},
             {call,
              {303,46},
              {atom,{303,46},format_var_1},
              [{var,{303,59},'Dst'}]},
             {cons,{303,64},{var,{303,64},'Rs'},{nil,{303,66}}}}]}]}]},
      {clause,
       {304,9},
       [{map,{304,9},[]}],
       [],
       [{debug_line,305,155},{nil,{305,13}}]}]}]},
  {clause,
   {307,1},
   [{var,{307,22},'_'},{var,{307,25},'_'}],
   [],
   [{debug_line,307,156},{nil,{307,31}}]}]}.
{attribute,{309,2},
           spec,
           {{format_type,1},
            [{type,{309,18},
                   'fun',
                   [{type,{309,18},product,[{user_type,{309,19},type,[]}]},
                    {type,{309,30},iolist,[]}]}]}}.
{function,
 {311,1},
 format_type,1,
 [{clause,
   {311,1},
   [{var,{311,1},'_'}],
   [[{call,
      {311,1},
      {remote,{311,1},{atom,{311,1},fake},{atom,{311,1},is_beam_bif_info}},
      []}]],
   [{debug_line,311,157},{atom,{311,1},ignore}]},
  {clause,
   {311,1},
   [{atom,{311,13},any}],
   [],
   [{debug_line,312,158},{string,{312,5},"any()"}]},
  {clause,
   {313,1},
   [{tuple,{313,13},[{atom,{313,13},t_atom},{atom,{313,30},any}]}],
   [],
   [{debug_line,314,159},{string,{314,5},"atom()"}]},
  {clause,
   {315,1},
   [{tuple,{315,13},[{atom,{315,13},t_atom},{var,{315,30},'Es'}]}],
   [],
   [{debug_line,316,160},
    {call,
     {316,5},
     {remote,{316,11},{atom,{316,5},string},{atom,{316,12},join}},
     [{block,0,
       [{lc,
         {316,17},
         {block,0,
          [{call,
            {316,18},
            {remote,{316,24},{atom,{316,18},io_lib},{atom,{316,25},format}},
            [{block,0,[{string,{316,32},"'~p'"}]},
             {block,0,[{cons,{316,40},{var,{316,41},'E'},{nil,{316,42}}}]}]}]},
         [{block,0,[{debug_line,317,161},{atom,{317,26},true}]},
          {generate,
           {317,23},
           {var,{317,21},'E'},
           {call,
            {317,26},
            {remote,{317,33},{atom,{317,26},ordsets},{atom,{317,34},to_list}},
            [{var,{317,42},'Es'}]}}]}]},
      {block,0,[{string,{317,48}," | "}]}]}]},
  {clause,
   {318,1},
   [{tuple,{318,13},[{atom,{318,13},t_bs_matchable},{var,{318,39},'U'}]}],
   [],
   [{debug_line,319,162},
    {call,
     {319,5},
     {remote,{319,11},{atom,{319,5},io_lib},{atom,{319,12},format}},
     [{block,0,[{string,{319,19},"bs_matchable(~p)"}]},
      {block,0,[{cons,{319,39},{var,{319,40},'U'},{nil,{319,41}}}]}]}]},
  {clause,
   {320,1},
   [{tuple,
     {320,13},
     [{atom,{320,13},t_bitstring},{var,{320,36},'S'},{atom,{320,49},true}]}],
   [],
   [{debug_line,321,163},
    {call,
     {321,5},
     {remote,{321,11},{atom,{321,5},io_lib},{atom,{321,12},format}},
     [{block,0,[{string,{321,19},"bitstring(~p,appendable)"}]},
      {block,0,[{cons,{321,47},{var,{321,48},'S'},{nil,{321,49}}}]}]}]},
  {clause,
   {322,1},
   [{tuple,
     {322,13},
     [{atom,{322,13},t_bitstring},{var,{322,36},'S'},{var,{322,13},'_'}]}],
   [],
   [{debug_line,323,164},
    {call,
     {323,5},
     {remote,{323,11},{atom,{323,5},io_lib},{atom,{323,12},format}},
     [{block,0,[{string,{323,19},"bitstring(~p)"}]},
      {block,0,[{cons,{323,36},{var,{323,37},'S'},{nil,{323,38}}}]}]}]},
  {clause,
   {324,1},
   [{tuple,{324,13},[{atom,{324,13},t_bs_context},{var,{324,37},'U'}]}],
   [],
   [{debug_line,325,165},
    {call,
     {325,5},
     {remote,{325,11},{atom,{325,5},io_lib},{atom,{325,12},format}},
     [{block,0,[{string,{325,19},"bs_context(~p)"}]},
      {block,0,[{cons,{325,37},{var,{325,38},'U'},{nil,{325,39}}}]}]}]},
  {clause,
   {326,1},
   [{tuple,
     {326,13},
     [{atom,{326,13},t_fun},
      {atom,{326,26},any},
      {var,{326,13},'_'},
      {atom,{326,35},any}]}],
   [],
   [{debug_line,327,166},{string,{327,5},"fun()"}]},
  {clause,
   {328,1},
   [{tuple,
     {328,13},
     [{atom,{328,13},t_fun},
      {atom,{328,26},any},
      {var,{328,13},'_'},
      {var,{328,35},'T'}]}],
   [],
   [{debug_line,329,167},
    {cons,
     {329,5},
     {string,{329,6},"fun((...) -> "},
     {cons,
      {329,23},
      {call,{329,23},{atom,{329,23},format_type},[{var,{329,35},'T'}]},
      {cons,{329,39},{string,{329,39},")"},{nil,{329,42}}}}}]},
  {clause,
   {330,1},
   [{tuple,
     {330,13},
     [{atom,{330,13},t_fun},
      {var,{330,26},'A'},
      {var,{330,13},'_'},
      {atom,{330,33},any}]}],
   [],
   [{debug_line,331,168},
    {cons,
     {331,5},
     {string,{331,6},"fun(("},
     {cons,
      {331,15},
      {call,{331,15},{atom,{331,15},format_fun_args},[{var,{331,31},'A'}]},
      {cons,{331,35},{string,{331,35},"))"},{nil,{331,39}}}}}]},
  {clause,
   {332,1},
   [{tuple,
     {332,13},
     [{atom,{332,13},t_fun},
      {var,{332,26},'A'},
      {var,{332,13},'_'},
      {var,{332,33},'T'}]}],
   [],
   [{debug_line,333,169},
    {cons,
     {333,5},
     {string,{333,6},"fun(("},
     {cons,
      {333,15},
      {call,{333,15},{atom,{333,15},format_fun_args},[{var,{333,31},'A'}]},
      {cons,
       {333,35},
       {string,{333,35},") -> "},
       {cons,
        {333,44},
        {call,{333,44},{atom,{333,44},format_type},[{var,{333,56},'T'}]},
        {cons,{333,60},{string,{333,60},")"},{nil,{333,63}}}}}}}]},
  {clause,
   {334,1},
   [{tuple,
     {334,13},
     [{atom,{334,13},t_map},{atom,{334,30},any},{atom,{334,46},any}]}],
   [],
   [{debug_line,335,170},{string,{335,5},"map()"}]},
  {clause,
   {336,1},
   [{tuple,
     {336,13},
     [{atom,{336,13},t_map},{atom,{336,30},none},{atom,{336,47},none}]}],
   [],
   [{debug_line,337,171},{string,{337,5},"#{}"}]},
  {clause,
   {338,1},
   [{tuple,
     {338,13},
     [{atom,{338,13},t_map},{var,{338,30},'K'},{var,{338,44},'V'}]}],
   [],
   [{debug_line,339,172},
    {cons,
     {339,5},
     {string,{339,6},"#{"},
     {cons,
      {339,12},
      {call,{339,12},{atom,{339,12},format_type},[{var,{339,24},'K'}]},
      {cons,
       {339,28},
       {string,{339,28},"=>"},
       {cons,
        {339,34},
        {call,{339,34},{atom,{339,34},format_type},[{var,{339,46},'V'}]},
        {cons,{339,50},{string,{339,50},"}"},{nil,{339,53}}}}}}}]},
  {clause,
   {340,1},
   [{tuple,{340,13},[{atom,{340,13},t_float},{atom,{340,31},any}]}],
   [],
   [{debug_line,341,173},{string,{341,5},"float()"}]},
  {clause,
   {342,1},
   [{tuple,
     {342,13},
     [{atom,{342,13},t_float},
      {tuple,{342,31},[{var,{342,32},'X'},{var,{342,34},'X'}]}]}],
   [],
   [{debug_line,343,174},
    {call,
     {343,5},
     {remote,{343,11},{atom,{343,5},io_lib},{atom,{343,12},format}},
     [{block,0,[{string,{343,19},"~p"}]},
      {block,0,[{cons,{343,25},{var,{343,26},'X'},{nil,{343,27}}}]}]}]},
  {clause,
   {344,1},
   [{tuple,
     {344,13},
     [{atom,{344,13},t_float},
      {tuple,{344,31},[{var,{344,32},'Low'},{var,{344,36},'High'}]}]}],
   [],
   [{debug_line,345,175},
    {call,
     {345,5},
     {remote,{345,11},{atom,{345,5},io_lib},{atom,{345,12},format}},
     [{block,0,[{string,{345,19},"~p..~p"}]},
      {block,0,
       [{cons,
         {345,29},
         {var,{345,30},'Low'},
         {cons,{345,34},{var,{345,34},'High'},{nil,{345,38}}}}]}]}]},
  {clause,
   {346,1},
   [{tuple,{346,13},[{atom,{346,13},t_integer},{atom,{346,33},any}]}],
   [],
   [{debug_line,347,176},{string,{347,5},"integer()"}]},
  {clause,
   {348,1},
   [{tuple,
     {348,13},
     [{atom,{348,13},t_integer},
      {tuple,{348,33},[{var,{348,34},'X'},{var,{348,36},'X'}]}]}],
   [],
   [{debug_line,349,177},
    {call,
     {349,5},
     {remote,{349,11},{atom,{349,5},io_lib},{atom,{349,12},format}},
     [{block,0,[{string,{349,19},"~p"}]},
      {block,0,[{cons,{349,25},{var,{349,26},'X'},{nil,{349,27}}}]}]}]},
  {clause,
   {350,1},
   [{tuple,
     {350,13},
     [{atom,{350,13},t_integer},
      {tuple,{350,33},[{var,{350,34},'Low'},{var,{350,38},'High'}]}]}],
   [],
   [{debug_line,351,178},
    {call,
     {351,5},
     {remote,{351,11},{atom,{351,5},io_lib},{atom,{351,12},format}},
     [{block,0,[{string,{351,19},"~p..~p"}]},
      {block,0,
       [{cons,
         {351,29},
         {var,{351,30},'Low'},
         {cons,{351,34},{var,{351,34},'High'},{nil,{351,38}}}}]}]}]},
  {clause,
   {352,1},
   [{tuple,{352,13},[{atom,{352,13},t_number},{atom,{352,32},any}]}],
   [],
   [{debug_line,353,179},{string,{353,5},"number()"}]},
  {clause,
   {354,1},
   [{tuple,
     {354,13},
     [{atom,{354,13},t_number},
      {tuple,{354,32},[{var,{354,33},'X'},{var,{354,35},'X'}]}]}],
   [],
   [{debug_line,355,180},
    {call,
     {355,5},
     {remote,{355,11},{atom,{355,5},io_lib},{atom,{355,12},format}},
     [{block,0,[{string,{355,19},"number(~p)"}]},
      {block,0,[{cons,{355,33},{var,{355,34},'X'},{nil,{355,35}}}]}]}]},
  {clause,
   {356,1},
   [{tuple,
     {356,13},
     [{atom,{356,13},t_number},
      {tuple,{356,32},[{var,{356,33},'Low'},{var,{356,37},'High'}]}]}],
   [],
   [{debug_line,357,181},
    {call,
     {357,5},
     {remote,{357,11},{atom,{357,5},io_lib},{atom,{357,12},format}},
     [{block,0,[{string,{357,19},"number(~p, ~p)"}]},
      {block,0,
       [{cons,
         {357,37},
         {var,{357,38},'Low'},
         {cons,{357,42},{var,{357,42},'High'},{nil,{357,46}}}}]}]}]},
  {clause,
   {358,1},
   [{tuple,
     {358,13},
     [{atom,{358,13},t_list},{var,{358,26},'ET'},{atom,{358,40},nil}]}],
   [],
   [{debug_line,359,182},
    {cons,
     {359,5},
     {string,{359,6},"list("},
     {cons,
      {359,15},
      {call,{359,15},{atom,{359,15},format_type},[{var,{359,27},'ET'}]},
      {cons,{359,32},{string,{359,32},")"},{nil,{359,35}}}}}]},
  {clause,
   {360,1},
   [{tuple,
     {360,13},
     [{atom,{360,13},t_list},{var,{360,26},'ET'},{var,{360,40},'TT'}]}],
   [],
   [{debug_line,361,183},
    {cons,
     {361,5},
     {string,{361,6},"maybe_improper_list("},
     {cons,
      {361,30},
      {call,{361,30},{atom,{361,30},format_type},[{var,{361,42},'ET'}]},
      {cons,
       {361,47},
       {string,{361,47},", "},
       {cons,
        {361,53},
        {call,{361,53},{atom,{361,53},format_type},[{var,{361,65},'TT'}]},
        {cons,{361,70},{string,{361,70},")"},{nil,{361,73}}}}}}}]},
  {clause,
   {362,1},
   [{tuple,
     {362,13},
     [{atom,{362,13},t_cons},{var,{362,26},'ET'},{atom,{362,40},nil}]}],
   [],
   [{debug_line,363,184},
    {cons,
     {363,5},
     {string,{363,6},"nonempty_list("},
     {cons,
      {363,24},
      {call,{363,24},{atom,{363,24},format_type},[{var,{363,36},'ET'}]},
      {cons,{363,41},{string,{363,41},")"},{nil,{363,44}}}}}]},
  {clause,
   {364,1},
   [{tuple,
     {364,13},
     [{atom,{364,13},t_cons},{var,{364,26},'ET'},{var,{364,40},'TT'}]}],
   [],
   [{debug_line,365,185},
    {cons,
     {365,5},
     {string,{365,6},"nonempty_improper_list("},
     {cons,
      {365,33},
      {call,{365,33},{atom,{365,33},format_type},[{var,{365,45},'ET'}]},
      {cons,
       {365,50},
       {string,{365,50},", "},
       {cons,
        {365,56},
        {call,{365,56},{atom,{365,56},format_type},[{var,{365,68},'TT'}]},
        {cons,{365,73},{string,{365,73},")"},{nil,{365,76}}}}}}}]},
  {clause,
   {366,1},
   [{atom,{366,13},nil}],
   [],
   [{debug_line,367,186},{string,{367,5},"nil()"}]},
  {clause,
   {368,1},
   [{tuple,
     {368,13},
     [{atom,{368,13},t_tuple},
      {var,{368,48},'S'},
      {var,{368,40},'Ex'},
      {var,{368,31},'Es'}]}],
   [],
   [{debug_line,369,187},
    {cons,
     {369,5},
     {string,{369,6},"{"},
     {cons,
      {370,6},
      {call,
       {370,6},
       {remote,{370,12},{atom,{370,6},string},{atom,{370,13},join}},
       [{block,0,
         [{debug_line,370,188},
          {call,
           {370,18},
           {atom,{370,18},format_tuple_elems},
           [{var,{370,37},'S'},
            {var,{370,40},'Ex'},
            {var,{370,44},'Es'},
            {integer,{370,48},1}]}]},
        {block,0,[{string,{370,52},", "}]}]},
      {cons,{371,6},{string,{371,6},"}"},{nil,{371,9}}}}}]},
  {clause,
   {372,1},
   [{atom,{372,13},other}],
   [],
   [{debug_line,373,189},{string,{373,5},"other()"}]},
  {clause,
   {374,1},
   [{atom,{374,13},pid}],
   [],
   [{debug_line,375,190},{string,{375,5},"pid()"}]},
  {clause,
   {376,1},
   [{atom,{376,13},port}],
   [],
   [{debug_line,377,191},{string,{377,5},"port()"}]},
  {clause,
   {378,1},
   [{atom,{378,13},reference}],
   [],
   [{debug_line,379,192},{string,{379,5},"reference()"}]},
  {clause,
   {380,1},
   [{atom,{380,13},identifier}],
   [],
   [{debug_line,381,193},{string,{381,5},"identifier()"}]},
  {clause,
   {382,1},
   [{atom,{382,13},none}],
   [],
   [{debug_line,383,194},{string,{383,5},"none()"}]},
  {clause,
   {384,1},
   [{tuple,
     {384,13},
     [{atom,{384,13},t_union},
      {var,{384,27},'A'},
      {var,{384,34},'L'},
      {var,{384,43},'N'},
      {var,{384,55},'Ts'},
      {var,{384,64},'O'}]}],
   [],
   [{debug_line,385,195},
    {match,
     {385,5},
     {var,{385,5},'Es'},
     {op,
      {389,9},
      '++',
      {'case',
       {385,10},
       {var,{385,15},'A'},
       [{clause,
         {386,14},
         [{atom,{386,14},none}],
         [],
         [{debug_line,386,196},{nil,{386,22}}]},
        {clause,
         {387,14},
         [{var,{387,14},'_'}],
         [],
         [{debug_line,387,197},
          {cons,
           {387,19},
           {call,{387,20},{atom,{387,20},format_type},[{var,{387,32},'A'}]},
           {nil,{387,34}}}]}]},
      {op,
       {393,9},
       '++',
       {'case',
        {389,12},
        {var,{389,17},'L'},
        [{clause,
          {390,16},
          [{atom,{390,16},none}],
          [],
          [{debug_line,390,198},{nil,{390,24}}]},
         {clause,
          {391,16},
          [{var,{391,16},'_'}],
          [],
          [{debug_line,391,199},
           {cons,
            {391,21},
            {call,{391,22},{atom,{391,22},format_type},[{var,{391,34},'L'}]},
            {nil,{391,36}}}]}]},
       {op,
        {397,9},
        '++',
        {'case',
         {393,12},
         {var,{393,17},'N'},
         [{clause,
           {394,16},
           [{atom,{394,16},none}],
           [],
           [{debug_line,394,200},{nil,{394,24}}]},
          {clause,
           {395,16},
           [{var,{395,16},'_'}],
           [],
           [{debug_line,395,201},
            {cons,
             {395,21},
             {call,{395,22},{atom,{395,22},format_type},[{var,{395,34},'N'}]},
             {nil,{395,36}}}]}]},
        {op,
         {401,9},
         '++',
         {'case',
          {397,12},
          {var,{397,17},'Ts'},
          [{clause,
            {398,16},
            [{atom,{398,16},none}],
            [],
            [{debug_line,398,202},{nil,{398,24}}]},
           {clause,
            {399,16},
            [{var,{399,16},'_'}],
            [],
            [{debug_line,399,203},
             {cons,
              {399,21},
              {call,
               {399,22},
               {atom,{399,22},format_tuple_set},
               [{var,{399,39},'Ts'}]},
              {nil,{399,42}}}]}]},
         {'case',
          {401,12},
          {var,{401,17},'O'},
          [{clause,
            {402,16},
            [{atom,{402,16},none}],
            [],
            [{debug_line,402,204},{nil,{402,24}}]},
           {clause,
            {403,16},
            [{var,{403,16},'_'}],
            [],
            [{debug_line,403,205},
             {cons,
              {403,21},
              {call,{403,22},{atom,{403,22},format_type},[{var,{403,34},'O'}]},
              {nil,{403,36}}}]}]}}}}}},
    {debug_line,405,206},
    {call,
     {405,5},
     {remote,{405,11},{atom,{405,5},string},{atom,{405,12},join}},
     [{var,{405,17},'Es'},{block,0,[{string,{405,21}," | "}]}]}]}]}.
{function,
    {407,1},
    format_fun_args,1,
    [{clause,
         {407,1},
         [{var,{407,1},'_'}],
         [[{call,
               {407,1},
               {remote,
                   {407,1},
                   {atom,{407,1},fake},
                   {atom,{407,1},is_beam_bif_info}},
               []}]],
         [{debug_line,407,207},{atom,{407,1},ignore}]},
     {clause,
         {407,1},
         [{var,{407,17},'A'}],
         [],
         [{debug_line,408,208},
          {call,
              {408,5},
              {remote,{408,11},{atom,{408,5},string},{atom,{408,12},join}},
              [{block,0,
                   [{call,
                        {408,17},
                        {remote,
                            {408,22},
                            {atom,{408,17},lists},
                            {atom,{408,23},duplicate}},
                        [{var,{408,33},'A'},
                         {block,0,[{string,{408,36},"_"}]}]}]},
               {block,0,[{string,{408,42},", "}]}]}]}]}.
{function,
    {410,1},
    format_tuple_elems,4,
    [{clause,
         {410,1},
         [{var,{410,1},'_'},
          {var,{410,1},'_'},
          {var,{410,1},'_'},
          {var,{410,1},'_'}],
         [[{call,
               {410,1},
               {remote,
                   {410,1},
                   {atom,{410,1},fake},
                   {atom,{410,1},is_beam_bif_info}},
               []}]],
         [{debug_line,410,209},{atom,{410,1},ignore}]},
     {clause,
         {410,1},
         [{var,{410,20},'Size'},
          {atom,{410,26},true},
          {var,{410,32},'_Elems'},
          {var,{410,40},'Idx'}],
         [[{op,{410,54},'>',{var,{410,50},'Idx'},{var,{410,56},'Size'}}]],
         [{debug_line,411,210},{nil,{411,5}}]},
     {clause,
         {412,1},
         [{var,{412,20},'Size'},
          {atom,{412,26},false},
          {var,{412,33},'_Elems'},
          {var,{412,41},'Idx'}],
         [[{op,{412,55},'>',{var,{412,51},'Idx'},{var,{412,57},'Size'}}]],
         [{debug_line,413,211},
          {cons,{413,5},{string,{413,6},"..."},{nil,{413,11}}}]},
     {clause,
         {414,1},
         [{var,{414,20},'Size'},
          {var,{414,26},'Exact'},
          {var,{414,33},'Elems'},
          {var,{414,40},'Idx'}],
         [],
         [{debug_line,415,212},
          {match,
              {415,5},
              {var,{415,5},'T'},
              {'case',
                  {415,9},
                  {var,{415,14},'Elems'},
                  [{clause,
                       {416,13},
                       [{map,
                            {416,13},
                            [{map_field_exact,
                                 {416,20},
                                 {var,{416,16},'Idx'},
                                 {var,{416,23},'Ty'}}]}],
                       [],
                       [{debug_line,416,213},{var,{416,30},'Ty'}]},
                   {clause,
                       {417,13},
                       [{var,{417,13},'_'}],
                       [],
                       [{debug_line,417,214},{atom,{417,18},any}]}]}},
          {debug_line,419,215},
          {cons,
              {419,5},
              {call,{419,6},{atom,{419,6},format_type},[{var,{419,18},'T'}]},
              {call,
                  {419,21},
                  {atom,{419,21},format_tuple_elems},
                  [{var,{419,40},'Size'},
                   {var,{419,46},'Exact'},
                   {var,{419,53},'Elems'},
                   {block,0,
                       [{op,{419,64},
                            '+',
                            {var,{419,60},'Idx'},
                            {integer,{419,66},1}}]}]}}]}]}.
{function,
    {421,1},
    format_tuple_set,1,
    [{clause,
         {421,1},
         [{var,{421,1},'_'}],
         [[{call,
               {421,1},
               {remote,
                   {421,1},
                   {atom,{421,1},fake},
                   {atom,{421,1},is_beam_bif_info}},
               []}]],
         [{debug_line,421,216},{atom,{421,1},ignore}]},
     {clause,
         {421,1},
         [{match,
              {421,18},
              {tuple,
                  {421,18},
                  [{atom,{421,18},t_tuple},
                   {var,{421,18},'_'},
                   {var,{421,18},'_'},
                   {var,{421,18},'_'}]},
              {var,{421,29},'T'}}],
         [],
         [{debug_line,422,217},
          {call,{422,5},{atom,{422,5},format_type},[{var,{422,17},'T'}]}]},
     {clause,
         {423,1},
         [{var,{423,18},'RecordSet'}],
         [],
         [{debug_line,424,218},
          {call,
              {424,5},
              {remote,{424,11},{atom,{424,5},string},{atom,{424,12},join}},
              [{block,0,
                   [{lc,{424,17},
                        {block,0,
                            [{call,
                                 {424,18},
                                 {atom,{424,18},format_tuple_set_1},
                                 [{var,{424,37},'T'}]}]},
                        [{block,0,[{atom,{424,48},true}]},
                         {generate,
                             {424,45},
                             {var,{424,43},'T'},
                             {call,
                                 {424,48},
                                 {remote,
                                     {424,55},
                                     {atom,{424,48},ordsets},
                                     {atom,{424,56},to_list}},
                                 [{var,{424,64},'RecordSet'}]}}]}]},
               {block,0,[{debug_line,425,219},{string,{425,17}," | "}]}]}]}]}.
{function,
    {427,1},
    format_tuple_set_1,1,
    [{clause,
         {427,1},
         [{var,{427,1},'_'}],
         [[{call,
               {427,1},
               {remote,
                   {427,1},
                   {atom,{427,1},fake},
                   {atom,{427,1},is_beam_bif_info}},
               []}]],
         [{debug_line,427,220},{atom,{427,1},ignore}]},
     {clause,
         {427,1},
         [{tuple,
              {427,20},
              [{tuple,{427,21},[{var,{427,22},'Arity'},{var,{427,28},'Key'}]},
               {match,
                   {427,33},
                   {tuple,
                       {427,33},
                       [{atom,{427,33},t_tuple},
                        {var,{427,47},'Arity'},
                        {var,{427,33},'_'},
                        {var,{427,62},'Elems'}]},
                   {var,{427,69},'Tuple'}}]}],
         [],
         [{debug_line,428,221},
          {match,
              {428,5},
              {atom,{428,5},false},
              {op,{428,18},
                  '=:=',
                  {atom,{428,13},none},
                  {call,
                      {428,22},
                      {remote,
                          {428,32},
                          {atom,{428,22},beam_types},
                          {atom,{428,33},meet}},
                      [{var,{428,38},'Key'},
                       {block,0,
                           [{call,
                                {428,43},
                                {remote,
                                    {428,43},
                                    {atom,{428,43},erlang},
                                    {atom,{428,43},map_get}},
                                [{integer,{428,51},1},
                                 {var,{428,54},'Elems'}]}]}]}}},
          {debug_line,429,222},
          {call,
              {429,5},
              {atom,{429,5},format_type},
              [{var,{429,17},'Tuple'}]}]}]}.
{eof,{430,1}}.
