{attribute,{1,1},file,{"beam_a.erl",1}}.
{attribute,{24,2},module,beam_a}.
{attribute,{27,2},export,[{module,2}]}.
{attribute,{1,1},file,{"beam_asm.hrl",1}}.
{attribute,{1,1},file,{"beam_types.hrl",1}}.
{attribute,{91,2},
           type,
           {float_range,{type,{91,24},
                              union,
                              [{atom,{91,24},any},
                               {type,{91,32},
                                     tuple,
                                     [{atom,{91,33},'-inf'},
                                      {type,{91,40},float,[]}]},
                               {type,{91,51},
                                     tuple,
                                     [{type,{91,52},float,[]},
                                      {atom,{91,60},'+inf'}]}]},
                        []}}.
{attribute,
    {93,2},
    record,
    {t_atom,
        [{typed_record_field,
             {record_field,{93,18},{atom,{93,18},elements},{atom,{93,27},any}},
             {type,
                 {93,34},
                 union,
                 [{atom,{93,34},any},
                  {remote_type,
                      {93,42},
                      [{atom,{93,42},ordsets},
                       {atom,{93,50},ordset},
                       [{type,{93,57},atom,[]}]]}]}}]}}.
{attribute,
    {94,2},
    record,
    {t_bitstring,
        [{typed_record_field,
             {record_field,
                 {94,23},
                 {atom,{94,23},size_unit},
                 {integer,{94,33},1}},
             {type,{94,38},pos_integer,[]}},
         {typed_record_field,
             {record_field,
                 {99,23},
                 {atom,{99,23},appendable},
                 {atom,{99,34},false}},
             {type,{99,43},boolean,[]}}]}}.
{attribute,
    {100,2},
    record,
    {t_bs_context,
        [{typed_record_field,
             {record_field,
                 {100,24},
                 {atom,{100,24},tail_unit},
                 {integer,{100,34},1}},
             {type,{100,39},pos_integer,[]}}]}}.
{attribute,
    {101,2},
    record,
    {t_bs_matchable,
        [{typed_record_field,
             {record_field,
                 {101,26},
                 {atom,{101,26},tail_unit},
                 {integer,{101,36},1}},
             {type,{101,41},pos_integer,[]}}]}}.
{attribute,
    {102,2},
    record,
    {t_float,
        [{typed_record_field,
             {record_field,
                 {102,19},
                 {atom,{102,19},elements},
                 {atom,{102,28},any}},
             {user_type,{102,35},float_range,[]}}]}}.
{attribute,
    {103,2},
    record,
    {t_fun,
        [{typed_record_field,
             {record_field,{103,17},{atom,{103,17},arity},{atom,{103,23},any}},
             {type,
                 {103,30},
                 union,
                 [{type,{103,30},arity,[]},{atom,{103,40},any}]}},
         {typed_record_field,
             {record_field,
                 {104,17},
                 {atom,{104,17},target},
                 {atom,{104,24},any}},
             {type,
                 {104,31},
                 union,
                 [{type,
                      {104,31},
                      tuple,
                      [{type,{104,32},atom,[]},
                       {type,{104,40},non_neg_integer,[]}]},
                  {atom,{104,61},any}]}},
         {typed_record_field,
             {record_field,{105,17},{atom,{105,17},type},{atom,{105,22},any}},
             {user_type,{105,29},type,[]}}]}}.
{attribute,
    {106,2},
    record,
    {t_integer,
        [{typed_record_field,
             {record_field,
                 {106,21},
                 {atom,{106,21},elements},
                 {atom,{106,30},any}},
             {type,
                 {106,37},
                 union,
                 [{atom,{106,37},any},
                  {remote_type,
                      {106,45},
                      [{atom,{106,45},beam_bounds},
                       {atom,{106,57},range},
                       []]}]}}]}}.
{attribute,
    {107,2},
    record,
    {t_number,
        [{typed_record_field,
             {record_field,
                 {107,20},
                 {atom,{107,20},elements},
                 {atom,{107,29},any}},
             {type,
                 {107,36},
                 union,
                 [{atom,{107,36},any},
                  {remote_type,
                      {107,44},
                      [{atom,{107,44},beam_bounds},
                       {atom,{107,56},range},
                       []]}]}}]}}.
{attribute,
    {113,2},
    record,
    {t_map,
        [{typed_record_field,
             {record_field,
                 {113,17},
                 {atom,{113,17},super_key},
                 {atom,{113,27},any}},
             {user_type,{113,34},type,[]}},
         {typed_record_field,
             {record_field,
                 {114,17},
                 {atom,{114,17},super_value},
                 {atom,{114,29},any}},
             {user_type,{114,36},type,[]}}]}}.
{attribute,
    {122,2},
    record,
    {t_cons,
        [{typed_record_field,
             {record_field,{122,18},{atom,{122,18},type},{atom,{122,23},any}},
             {user_type,{122,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {122,38},
                 {atom,{122,38},terminator},
                 {atom,{122,49},any}},
             {user_type,{122,56},type,[]}}]}}.
{attribute,
    {123,2},
    record,
    {t_list,
        [{typed_record_field,
             {record_field,{123,18},{atom,{123,18},type},{atom,{123,23},any}},
             {user_type,{123,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {123,38},
                 {atom,{123,38},terminator},
                 {atom,{123,49},any}},
             {user_type,{123,56},type,[]}}]}}.
{attribute,
    {125,2},
    record,
    {t_tuple,
        [{typed_record_field,
             {record_field,{125,19},{atom,{125,19},size},{integer,{125,24},0}},
             {type,{125,29},integer,[]}},
         {typed_record_field,
             {record_field,
                 {126,19},
                 {atom,{126,19},exact},
                 {atom,{126,25},false}},
             {type,{126,34},boolean,[]}},
         {typed_record_field,
             {record_field,
                 {127,19},
                 {atom,{127,19},elements},
                 {map,{127,28},[]}},
             {user_type,{127,35},tuple_elements,[]}}]}}.
{attribute,
    {146,2},
    type,
    {tuple_elements,
        {type,
            {146,27},
            map,
            [{type,
                 {146,51},
                 map_field_assoc,
                 [{ann_type,
                      {146,30},
                      [{var,{146,30},'Key'},{type,{146,37},pos_integer,[]}]},
                  {user_type,{146,54},type,[]}]}]},
        []}}.
{attribute,{148,2},
           type,
           {normal_type,{type,{148,24},
                              union,
                              [{atom,{148,24},any},
                               {atom,{148,32},none},
                               {type,{149,24},
                                     record,
                                     [{atom,{149,25},t_number}]},
                               {type,{149,38},
                                     record,
                                     [{atom,{149,39},t_float}]},
                               {type,{149,51},
                                     record,
                                     [{atom,{149,52},t_integer}]},
                               {type,{150,24},record,[{atom,{150,25},t_atom}]},
                               {type,{151,24},
                                     record,
                                     [{atom,{151,25},t_bitstring}]},
                               {type,{151,41},
                                     record,
                                     [{atom,{151,42},t_bs_context}]},
                               {type,{151,59},
                                     record,
                                     [{atom,{151,60},t_bs_matchable}]},
                               {type,{152,24},record,[{atom,{152,25},t_fun}]},
                               {type,{153,24},record,[{atom,{153,25},t_list}]},
                               {type,{153,36},record,[{atom,{153,37},t_cons}]},
                               {atom,{153,48},nil},
                               {atom,{154,24},other},
                               {type,{155,24},record,[{atom,{155,25},t_map}]},
                               {atom,{156,24},identifier},
                               {atom,{157,24},pid},
                               {atom,{158,24},port},
                               {atom,{159,24},reference},
                               {type,{160,24},
                                     record,
                                     [{atom,{160,25},t_tuple}]}]},
                        []}}.
{attribute,{162,2},
           type,
           {other_type,{type,{162,23},
                             union,
                             [{atom,{162,23},none},
                              {type,{162,32},record,[{atom,{162,33},t_fun}]},
                              {type,{162,43},record,[{atom,{162,44},t_map}]},
                              {atom,{163,23},pid},
                              {atom,{163,31},port},
                              {atom,{163,40},reference},
                              {atom,{163,54},identifier},
                              {type,{164,23},
                                    record,
                                    [{atom,{164,24},t_bitstring}]},
                              {type,{164,40},
                                    record,
                                    [{atom,{164,41},t_bs_context}]},
                              {type,{165,23},
                                    record,
                                    [{atom,{165,24},t_bs_matchable}]}]},
                       []}}.
{attribute,
    {167,2},
    type,
    {record_key,
        {type,
            {167,23},
            tuple,
            [{ann_type,
                 {167,24},
                 [{var,{167,24},'Arity'},{type,{167,33},integer,[]}]},
             {ann_type,
                 {167,44},
                 [{var,{167,44},'Tag'},{user_type,{167,51},normal_type,[]}]}]},
        []}}.
{attribute,
    {168,2},
    type,
    {record_set,
        {remote_type,
            {168,23},
            [{atom,{168,23},ordsets},
             {atom,{168,31},ordset},
             [{type,
                  {168,38},
                  tuple,
                  [{user_type,{168,39},record_key,[]},
                   {type,{168,53},record,[{atom,{168,54},t_tuple}]}]}]]},
        []}}.
{attribute,{169,2},
           type,
           {tuple_set,{type,{169,22},
                            union,
                            [{type,{169,22},record,[{atom,{169,23},t_tuple}]},
                             {user_type,{169,35},record_set,[]}]},
                      []}}.
{attribute,
    {173,2},
    record,
    {t_union,
        [{typed_record_field,
             {record_field,{173,19},{atom,{173,19},atom},{atom,{173,24},none}},
             {type,
                 {173,32},
                 union,
                 [{atom,{173,32},none},
                  {type,{173,41},record,[{atom,{173,42},t_atom}]}]}},
         {typed_record_field,
             {record_field,{174,19},{atom,{174,19},list},{atom,{174,24},none}},
             {type,
                 {174,32},
                 union,
                 [{atom,{174,32},none},
                  {type,{174,41},record,[{atom,{174,42},t_list}]},
                  {type,{174,53},record,[{atom,{174,54},t_cons}]},
                  {atom,{174,65},nil}]}},
         {typed_record_field,
             {record_field,
                 {175,19},
                 {atom,{175,19},number},
                 {atom,{175,26},none}},
             {type,
                 {175,34},
                 union,
                 [{atom,{175,34},none},
                  {type,{175,43},record,[{atom,{175,44},t_number}]},
                  {type,{175,57},record,[{atom,{175,58},t_float}]},
                  {type,{175,70},record,[{atom,{175,71},t_integer}]}]}},
         {typed_record_field,
             {record_field,
                 {176,19},
                 {atom,{176,19},tuple_set},
                 {atom,{176,29},none}},
             {type,
                 {176,37},
                 union,
                 [{atom,{176,37},none},{user_type,{176,46},tuple_set,[]}]}},
         {typed_record_field,
             {record_field,
                 {177,19},
                 {atom,{177,19},other},
                 {atom,{177,25},none}},
             {type,
                 {177,33},
                 union,
                 [{atom,{177,33},other},
                  {user_type,{177,43},other_type,[]}]}}]}}.
{attribute,{179,2},
           type,
           {type,{type,{179,17},
                       union,
                       [{type,{179,17},record,[{atom,{179,18},t_union}]},
                        {user_type,{179,30},normal_type,[]}]},
                 []}}.
{attribute,{22,1},file,{"beam_asm.hrl",22}}.
{attribute,{23,2},
           type,
           {reg_num,{type,{23,20},
                          range,
                          [{integer,{23,20},0},{integer,{23,25},1023}]},
                    []}}.
{attribute,{25,2},
           type,
           {xreg,{type,{25,17},
                       tuple,
                       [{atom,{25,18},x},{user_type,{25,23},reg_num,[]}]},
                 []}}.
{attribute,{26,2},
           type,
           {yreg,{type,{26,17},
                       tuple,
                       [{atom,{26,18},y},{user_type,{26,23},reg_num,[]}]},
                 []}}.
{attribute,{27,2},
           type,
           {freg,{type,{27,17},
                       tuple,
                       [{atom,{27,18},fr},{user_type,{27,24},reg_num,[]}]},
                 []}}.
{attribute,{28,2},
           type,
           {zreg,{type,{28,17},
                       tuple,
                       [{atom,{28,18},z},{user_type,{28,23},reg_num,[]}]},
                 []}}.
{attribute,{30,2},
           type,
           {beam_reg,{type,{30,21},
                           union,
                           [{user_type,{30,21},xreg,[]},
                            {user_type,{30,30},yreg,[]},
                            {user_type,{30,39},freg,[]}]},
                     []}}.
{attribute,
    {32,2},
    type,
    {beam_literal,
        {type,
            {32,25},
            union,
            [{type,
                 {32,25},
                 tuple,
                 [{atom,{32,26},atom},
                  {type,
                      {32,32},
                      union,
                      [{type,{32,32},nil,[]},{type,{32,37},atom,[]}]}]},
             {type,
                 {33,25},
                 tuple,
                 [{atom,{33,26},float},
                  {type,
                      {33,33},
                      union,
                      [{type,{33,33},nil,[]},{type,{33,38},float,[]}]}]},
             {type,
                 {34,25},
                 tuple,
                 [{atom,{34,26},integer},
                  {type,
                      {34,35},
                      union,
                      [{type,{34,35},nil,[]},{type,{34,40},integer,[]}]}]},
             {type,
                 {35,25},
                 tuple,
                 [{atom,{35,26},literal},{type,{35,35},term,[]}]},
             {atom,{36,25},nil}]},
        []}}.
{attribute,{44,2},
           record,
           {tr,[{typed_record_field,{record_field,{44,14},{atom,{44,14},r}},
                                    {user_type,{44,19},beam_reg,[]}},
                {typed_record_field,{record_field,{44,31},{atom,{44,31},t}},
                                    {user_type,{44,36},type,[]}}]}}.
{attribute,{30,1},file,{"beam_a.erl",30}}.
{attribute,
    {31,2},
    spec,
    {{module,2},
     [{type,
          {31,13},
          'fun',
          [{type,
               {31,13},
               product,
               [{remote_type,
                    {31,14},
                    [{atom,{31,14},beam_asm},{atom,{31,23},module_code},[]]},
                {type,
                    {31,38},
                    list,
                    [{remote_type,
                         {31,39},
                         [{atom,{31,39},compile},
                          {atom,{31,47},option},
                          []]}]}]},
           {type,
               {32,21},
               tuple,
               [{atom,{32,22},ok},
                {remote_type,
                    {32,27},
                    [{atom,{32,27},beam_utils},
                     {atom,{32,38},module_code},
                     []]}]}]}]}}.
{function,
    {34,1},
    module,2,
    [{clause,
         {34,1},
         [{var,{34,1},'_'},{var,{34,1},'_'}],
         [[{call,
               {34,1},
               {remote,
                   {34,1},
                   {atom,{34,1},fake},
                   {atom,{34,1},is_beam_bif_info}},
               []}]],
         [{debug_line,34,1},{atom,{34,1},ignore}]},
     {clause,
         {34,1},
         [{tuple,
              {34,8},
              [{var,{34,9},'Mod'},
               {var,{34,13},'Exp'},
               {var,{34,17},'Attr'},
               {var,{34,22},'Fs0'},
               {var,{34,26},'Lc'}]},
          {var,{34,31},'_Opt'}],
         [],
         [{debug_line,35,2},
          {match,
              {35,5},
              {var,{35,5},'Fs'},
              {lc,{35,10},
                  {block,0,
                      [{call,
                           {35,11},
                           {atom,{35,11},function},
                           [{var,{35,20},'F'}]}]},
                  [{block,0,[{atom,{35,31},true}]},
                   {generate,{35,28},{var,{35,26},'F'},{var,{35,31},'Fs0'}}]}},
          {debug_line,36,3},
          {tuple,
              {36,5},
              [{atom,{36,6},ok},
               {tuple,
                   {36,9},
                   [{var,{36,10},'Mod'},
                    {var,{36,14},'Exp'},
                    {var,{36,18},'Attr'},
                    {var,{36,23},'Fs'},
                    {var,{36,26},'Lc'}]}]}]}]}.
{function,
    {38,1},
    function,1,
    [{clause,
         {38,1},
         [{var,{38,1},'_'}],
         [[{call,
               {38,1},
               {remote,
                   {38,1},
                   {atom,{38,1},fake},
                   {atom,{38,1},is_beam_bif_info}},
               []}]],
         [{debug_line,38,4},{atom,{38,1},ignore}]},
     {clause,
         {38,1},
         [{tuple,
              {38,10},
              [{atom,{38,11},function},
               {var,{38,20},'Name'},
               {var,{38,25},'Arity'},
               {var,{38,31},'CLabel'},
               {var,{38,38},'Is0'}]}],
         [],
         [{debug_line,39,5},
          {'try',
              {39,5},
              [{debug_line,41,6},
               {match,
                   {41,2},
                   {var,{41,2},'Is1'},
                   {call,
                       {41,8},
                       {atom,{41,8},rename_instrs},
                       [{var,{41,22},'Is0'}]}},
               {debug_line,45,7},
               {match,
                   {45,2},
                   {var,{45,2},'Is2'},
                   {call,
                       {45,8},
                       {remote,
                           {45,17},
                           {atom,{45,8},beam_jump},
                           {atom,{45,18},remove_unused_labels}},
                       [{var,{45,39},'Is1'}]}},
               {debug_line,49,8},
               {match,
                   {49,9},
                   {var,{49,9},'Is'},
                   {call,
                       {49,14},
                       {atom,{49,14},coalesce_consecutive_labels},
                       [{var,{49,42},'Is2'},{nil,{49,47}},{nil,{49,51}}]}},
               {debug_line,51,9},
               {tuple,
                   {51,9},
                   [{atom,{51,10},function},
                    {var,{51,19},'Name'},
                    {var,{51,24},'Arity'},
                    {var,{51,30},'CLabel'},
                    {var,{51,37},'Is'}]}],
              [],
              [{clause,
                   {53,9},
                   [{tuple,
                        {53,9},
                        [{var,{53,9},'Class'},
                         {var,{53,15},'Error'},
                         {var,{53,21},'Stack'}]}],
                   [],
                   [{debug_line,54,10},
                    {call,
                        {54,6},
                        {remote,{54,8},{atom,{54,6},io},{atom,{54,9},fwrite}},
                        [{block,0,[{string,{54,16},"Function: ~w/~w\n"}]},
                         {block,0,
                             [{cons,
                                  {54,37},
                                  {var,{54,38},'Name'},
                                  {cons,
                                      {54,43},
                                      {var,{54,43},'Arity'},
                                      {nil,{54,48}}}}]}]},
                    {debug_line,55,11},
                    {call,
                        {55,6},
                        {remote,
                            {55,12},
                            {atom,{55,6},erlang},
                            {atom,{55,13},raise}},
                        [{var,{55,19},'Class'},
                         {var,{55,26},'Error'},
                         {var,{55,33},'Stack'}]}]}],
              []}]}]}.
{function,
    {58,1},
    rename_instrs,1,
    [{clause,
         {58,1},
         [{var,{58,1},'_'}],
         [[{call,
               {58,1},
               {remote,
                   {58,1},
                   {atom,{58,1},fake},
                   {atom,{58,1},is_beam_bif_info}},
               []}]],
         [{debug_line,58,12},{atom,{58,1},ignore}]},
     {clause,
         {58,1},
         [{cons,
              {58,15},
              {match,
                  {58,16},
                  {tuple,
                      {58,16},
                      [{atom,{58,17},test},
                       {atom,{58,22},is_eq_exact},
                       {var,{58,34},'_'},
                       {cons,
                           {58,36},
                           {var,{58,37},'Dst'},
                           {cons,{58,41},{var,{58,41},'Src'},{nil,{58,44}}}}]},
                  {var,{58,47},'Test'}},
              {cons,
                  {59,16},
                  {tuple,
                      {59,16},
                      [{atom,{59,17},move},
                       {var,{59,22},'Src'},
                       {var,{59,26},'Dst'}]},
                  {var,{59,31},'Is'}}}],
         [],
         [{debug_line,61,13},
          {call,
              {61,5},
              {atom,{61,5},rename_instrs},
              [{block,0,
                   [{cons,
                        {61,19},
                        {var,{61,20},'Test'},
                        {var,{61,25},'Is'}}]}]}]},
     {clause,
         {62,1},
         [{cons,
              {62,15},
              {tuple,
                  {62,16},
                  [{atom,{62,17},test},
                   {atom,{62,22},is_eq_exact},
                   {var,{62,34},'_'},
                   {cons,
                       {62,36},
                       {var,{62,37},'Same'},
                       {cons,{62,42},{var,{62,42},'Same'},{nil,{62,46}}}}]},
              {var,{62,49},'Is'}}],
         [],
         [{debug_line,64,14},
          {call,{64,5},{atom,{64,5},rename_instrs},[{var,{64,19},'Is'}]}]},
     {clause,
         {65,1},
         [{cons,
              {65,15},
              {tuple,
                  {65,16},
                  [{atom,{65,17},apply_last},
                   {var,{65,28},'A'},
                   {var,{65,30},'N'}]},
              {var,{65,33},'Is'}}],
         [],
         [{debug_line,66,15},
          {cons,
              {66,5},
              {tuple,{66,6},[{atom,{66,7},apply},{var,{66,13},'A'}]},
              {cons,
                  {66,16},
                  {tuple,
                      {66,16},
                      [{atom,{66,17},deallocate},{var,{66,28},'N'}]},
                  {cons,
                      {66,31},
                      {atom,{66,31},return},
                      {call,
                          {66,38},
                          {atom,{66,38},rename_instrs},
                          [{var,{66,52},'Is'}]}}}}]},
     {clause,
         {67,1},
         [{cons,
              {67,15},
              {tuple,
                  {67,16},
                  [{atom,{67,17},call_last},
                   {var,{67,27},'A'},
                   {var,{67,29},'F'},
                   {var,{67,31},'N'}]},
              {var,{67,34},'Is'}}],
         [],
         [{debug_line,68,16},
          {cons,
              {68,5},
              {tuple,
                  {68,6},
                  [{atom,{68,7},call},{var,{68,12},'A'},{var,{68,14},'F'}]},
              {cons,
                  {68,17},
                  {tuple,
                      {68,17},
                      [{atom,{68,18},deallocate},{var,{68,29},'N'}]},
                  {cons,
                      {68,32},
                      {atom,{68,32},return},
                      {call,
                          {68,39},
                          {atom,{68,39},rename_instrs},
                          [{var,{68,53},'Is'}]}}}}]},
     {clause,
         {69,1},
         [{cons,
              {69,15},
              {tuple,
                  {69,16},
                  [{atom,{69,17},call_ext_last},
                   {var,{69,31},'A'},
                   {var,{69,33},'F'},
                   {var,{69,35},'N'}]},
              {var,{69,38},'Is'}}],
         [],
         [{debug_line,70,17},
          {cons,
              {70,5},
              {tuple,
                  {70,6},
                  [{atom,{70,7},call_ext},
                   {var,{70,16},'A'},
                   {var,{70,18},'F'}]},
              {cons,
                  {70,21},
                  {tuple,
                      {70,21},
                      [{atom,{70,22},deallocate},{var,{70,33},'N'}]},
                  {cons,
                      {70,36},
                      {atom,{70,36},return},
                      {call,
                          {70,43},
                          {atom,{70,43},rename_instrs},
                          [{var,{70,57},'Is'}]}}}}]},
     {clause,
         {71,1},
         [{cons,
              {71,15},
              {tuple,
                  {71,16},
                  [{atom,{71,17},call_only},
                   {var,{71,27},'A'},
                   {var,{71,29},'F'}]},
              {var,{71,32},'Is'}}],
         [],
         [{debug_line,72,18},
          {cons,
              {72,5},
              {tuple,
                  {72,6},
                  [{atom,{72,7},call},{var,{72,12},'A'},{var,{72,14},'F'}]},
              {cons,
                  {72,17},
                  {atom,{72,17},return},
                  {call,
                      {72,24},
                      {atom,{72,24},rename_instrs},
                      [{var,{72,38},'Is'}]}}}]},
     {clause,
         {73,1},
         [{cons,
              {73,15},
              {tuple,
                  {73,16},
                  [{atom,{73,17},call_ext_only},
                   {var,{73,31},'A'},
                   {var,{73,33},'F'}]},
              {var,{73,36},'Is'}}],
         [],
         [{debug_line,74,19},
          {cons,
              {74,5},
              {tuple,
                  {74,6},
                  [{atom,{74,7},call_ext},
                   {var,{74,16},'A'},
                   {var,{74,18},'F'}]},
              {cons,
                  {74,21},
                  {atom,{74,21},return},
                  {call,
                      {74,28},
                      {atom,{74,28},rename_instrs},
                      [{var,{74,42},'Is'}]}}}]},
     {clause,
         {75,1},
         [{cons,
              {75,15},
              {tuple,{75,16},[{atom,{75,17},'%live'},{var,{75,25},'_'}]},
              {var,{75,28},'Is'}}],
         [],
         [{debug_line,78,20},
          {call,{78,5},{atom,{78,5},rename_instrs},[{var,{78,19},'Is'}]}]},
     {clause,
         {79,1},
         [{cons,
              {79,15},
              {tuple,
                  {79,16},
                  [{atom,{79,17},get_list},
                   {var,{79,26},'S'},
                   {var,{79,28},'D1'},
                   {var,{79,31},'D2'}]},
              {var,{79,35},'Is'}}],
         [],
         [{debug_line,81,21},
          {'if',
              {81,5},
              [{clause,
                   {82,9},
                   [],
                   [[{op,{82,12},'=:=',{var,{82,9},'D1'},{var,{82,16},'S'}}]],
                   [{debug_line,83,22},
                    {cons,
                        {83,13},
                        {tuple,
                            {83,14},
                            [{atom,{83,15},get_tl},
                             {var,{83,22},'S'},
                             {var,{83,24},'D2'}]},
                        {cons,
                            {83,28},
                            {tuple,
                                {83,28},
                                [{atom,{83,29},get_hd},
                                 {var,{83,36},'S'},
                                 {var,{83,38},'D1'}]},
                            {call,
                                {83,42},
                                {atom,{83,42},rename_instrs},
                                [{var,{83,56},'Is'}]}}}]},
               {clause,
                   {84,9},
                   [],
                   [[{atom,{84,9},true}]],
                   [{debug_line,85,23},
                    {cons,
                        {85,13},
                        {tuple,
                            {85,14},
                            [{atom,{85,15},get_hd},
                             {var,{85,22},'S'},
                             {var,{85,24},'D1'}]},
                        {cons,
                            {85,28},
                            {tuple,
                                {85,28},
                                [{atom,{85,29},get_tl},
                                 {var,{85,36},'S'},
                                 {var,{85,38},'D2'}]},
                            {call,
                                {85,42},
                                {atom,{85,42},rename_instrs},
                                [{var,{85,56},'Is'}]}}}]}]}]},
     {clause,
         {87,1},
         [{cons,{87,15},{var,{87,16},'I'},{var,{87,18},'Is'}}],
         [],
         [{debug_line,88,24},
          {cons,
              {88,5},
              {call,{88,6},{atom,{88,6},rename_instr},[{var,{88,19},'I'}]},
              {call,
                  {88,22},
                  {atom,{88,22},rename_instrs},
                  [{var,{88,36},'Is'}]}}]},
     {clause,{89,1},[{nil,{89,15}}],[],[{debug_line,89,25},{nil,{89,22}}]}]}.
{function,
 {91,1},
 rename_instr,1,
 [{clause,
   {91,1},
   [{var,{91,1},'_'}],
   [[{call,
      {91,1},
      {remote,{91,1},{atom,{91,1},fake},{atom,{91,1},is_beam_bif_info}},
      []}]],
   [{debug_line,91,26},{atom,{91,1},ignore}]},
  {clause,
   {91,1},
   [{match,
     {91,14},
     {tuple,
      {91,14},
      [{atom,{91,15},bif},
       {var,{91,19},'Bif'},
       {var,{91,23},'Fail'},
       {cons,
        {91,28},
        {var,{91,29},'A'},
        {cons,{91,31},{var,{91,31},'B'},{nil,{91,32}}}},
       {var,{91,34},'Dst'}]},
     {var,{91,39},'I'}}],
   [],
   [{debug_line,92,27},
    {'case',
     {92,5},
     {var,{92,10},'Bif'},
     [{clause,
       {93,9},
       [{atom,{93,9},'=<'}],
       [],
       [{debug_line,94,28},
        {tuple,
         {94,13},
         [{atom,{94,14},bif},
          {atom,{94,18},'>='},
          {var,{94,23},'Fail'},
          {cons,
           {94,28},
           {var,{94,29},'B'},
           {cons,{94,31},{var,{94,31},'A'},{nil,{94,32}}}},
          {var,{94,34},'Dst'}]}]},
      {clause,
       {95,9},
       [{atom,{95,9},'<'}],
       [],
       [{debug_line,96,29},
        {'case',
         {96,13},
         {cons,
          {96,18},
          {var,{96,19},'A'},
          {cons,{96,21},{var,{96,21},'B'},{nil,{96,22}}}},
         [{clause,
           {97,17},
           [{cons,
             {97,17},
             {tuple,{97,18},[{atom,{97,19},integer},{var,{97,27},'N'}]},
             {cons,
              {97,30},
              {match,
               {97,30},
               {tuple,
                {97,30},
                [{atom,{97,31},tr},
                 {var,{97,34},'_'},
                 {tuple,
                  {97,36},
                  [{atom,{97,36},t_integer},{var,{97,36},'_'}]}]},
               {var,{97,50},'Src'}},
              {nil,{97,53}}}}],
           [],
           [{debug_line,98,30},
            {tuple,
             {98,21},
             [{atom,{98,22},bif},
              {atom,{98,26},'>='},
              {var,{98,31},'Fail'},
              {cons,
               {98,36},
               {var,{98,37},'Src'},
               {cons,
                {98,41},
                {tuple,
                 {98,41},
                 [{atom,{98,42},integer},
                  {op,{98,51},'+',{var,{98,50},'N'},{integer,{98,52},1}}]},
                {nil,{98,54}}}},
              {var,{98,56},'Dst'}]}]},
          {clause,
           {99,17},
           [{cons,
             {99,17},
             {match,
              {99,18},
              {tuple,
               {99,18},
               [{atom,{99,19},tr},
                {var,{99,22},'_'},
                {tuple,{99,24},[{atom,{99,24},t_integer},{var,{99,24},'_'}]}]},
              {var,{99,38},'Src'}},
             {cons,
              {99,42},
              {tuple,{99,42},[{atom,{99,43},integer},{var,{99,51},'N'}]},
              {nil,{99,53}}}}],
           [],
           [{debug_line,100,31},
            {tuple,
             {100,21},
             [{atom,{100,22},bif},
              {atom,{100,26},'>='},
              {var,{100,31},'Fail'},
              {cons,
               {100,36},
               {tuple,
                {100,37},
                [{atom,{100,38},integer},
                 {op,{100,47},'-',{var,{100,46},'N'},{integer,{100,48},1}}]},
               {cons,{100,51},{var,{100,51},'Src'},{nil,{100,54}}}},
              {var,{100,56},'Dst'}]}]},
          {clause,
           {101,17},
           [{cons,
             {101,17},
             {var,{101,18},'_'},
             {cons,{101,20},{var,{101,20},'_'},{nil,{101,21}}}}],
           [],
           [{debug_line,102,32},{var,{102,21},'I'}]}]}]},
      {clause,
       {104,9},
       [{atom,{104,9},'>'}],
       [],
       [{debug_line,105,33},
        {call,
         {105,13},
         {atom,{105,13},rename_instr},
         [{block,0,
           [{tuple,
             {105,26},
             [{atom,{105,27},bif},
              {atom,{105,31},'<'},
              {var,{105,35},'Fail'},
              {cons,
               {105,40},
               {var,{105,41},'B'},
               {cons,{105,43},{var,{105,43},'A'},{nil,{105,44}}}},
              {var,{105,46},'Dst'}]}]}]}]},
      {clause,
       {106,9},
       [{var,{106,9},'_'}],
       [],
       [{debug_line,107,34},{var,{107,13},'I'}]}]}]},
  {clause,
   {109,1},
   [{tuple,
     {109,14},
     [{atom,{109,15},put_map_assoc},
      {var,{109,29},'Fail'},
      {var,{109,34},'S'},
      {var,{109,36},'D'},
      {var,{109,38},'R'},
      {var,{109,40},'L'}]}],
   [],
   [{debug_line,110,35},
    {tuple,
     {110,5},
     [{atom,{110,6},put_map},
      {var,{110,14},'Fail'},
      {atom,{110,19},assoc},
      {var,{110,25},'S'},
      {var,{110,27},'D'},
      {var,{110,29},'R'},
      {var,{110,31},'L'}]}]},
  {clause,
   {111,1},
   [{tuple,
     {111,14},
     [{atom,{111,15},put_map_exact},
      {var,{111,29},'Fail'},
      {var,{111,34},'S'},
      {var,{111,36},'D'},
      {var,{111,38},'R'},
      {var,{111,40},'L'}]}],
   [],
   [{debug_line,112,36},
    {tuple,
     {112,5},
     [{atom,{112,6},put_map},
      {var,{112,14},'Fail'},
      {atom,{112,19},exact},
      {var,{112,25},'S'},
      {var,{112,27},'D'},
      {var,{112,29},'R'},
      {var,{112,31},'L'}]}]},
  {clause,
   {113,1},
   [{tuple,
     {113,14},
     [{atom,{113,15},test},
      {atom,{113,20},has_map_fields},
      {var,{113,35},'Fail'},
      {var,{113,40},'Src'},
      {tuple,{113,44},[{atom,{113,45},list},{var,{113,50},'List'}]}]}],
   [],
   [{debug_line,114,37},
    {tuple,
     {114,5},
     [{atom,{114,6},test},
      {atom,{114,11},has_map_fields},
      {var,{114,26},'Fail'},
      {cons,{114,31},{var,{114,32},'Src'},{var,{114,36},'List'}}]}]},
  {clause,
   {115,1},
   [{tuple,
     {115,14},
     [{atom,{115,15},test},
      {atom,{115,20},is_nil},
      {var,{115,27},'Fail'},
      {cons,{115,32},{var,{115,33},'Src'},{nil,{115,36}}}]}],
   [],
   [{debug_line,116,38},
    {tuple,
     {116,5},
     [{atom,{116,6},test},
      {atom,{116,11},is_eq_exact},
      {var,{116,23},'Fail'},
      {cons,
       {116,28},
       {var,{116,29},'Src'},
       {cons,{116,33},{atom,{116,33},nil},{nil,{116,36}}}}]}]},
  {clause,
   {117,1},
   [{tuple,
     {117,14},
     [{match,{117,15},{atom,{117,15},select_val},{var,{117,26},'I'}},
      {var,{117,28},'Reg'},
      {var,{117,32},'Fail'},
      {tuple,{117,37},[{atom,{117,38},list},{var,{117,43},'List'}]}]}],
   [],
   [{debug_line,118,39},
    {tuple,
     {118,5},
     [{atom,{118,6},select},
      {var,{118,13},'I'},
      {var,{118,15},'Reg'},
      {var,{118,19},'Fail'},
      {var,{118,24},'List'}]}]},
  {clause,
   {119,1},
   [{tuple,
     {119,14},
     [{match,{119,15},{atom,{119,15},select_tuple_arity},{var,{119,34},'I'}},
      {var,{119,36},'Reg'},
      {var,{119,40},'Fail'},
      {tuple,{119,45},[{atom,{119,46},list},{var,{119,51},'List'}]}]}],
   [],
   [{debug_line,120,40},
    {tuple,
     {120,5},
     [{atom,{120,6},select},
      {var,{120,13},'I'},
      {var,{120,15},'Reg'},
      {var,{120,19},'Fail'},
      {var,{120,24},'List'}]}]},
  {clause,
   {121,1},
   [{atom,{121,14},send}],
   [],
   [{debug_line,122,41},
    {tuple,
     {122,5},
     [{atom,{122,6},call_ext},{integer,{122,15},2},{atom,{122,17},send}]}]},
  {clause,
   {123,1},
   [{var,{123,14},'I'}],
   [],
   [{debug_line,123,42},{var,{123,20},'I'}]}]}.
{function,
    {125,1},
    coalesce_consecutive_labels,3,
    [{clause,
         {125,1},
         [{var,{125,1},'_'},{var,{125,1},'_'},{var,{125,1},'_'}],
         [[{call,
               {125,1},
               {remote,
                   {125,1},
                   {atom,{125,1},fake},
                   {atom,{125,1},is_beam_bif_info}},
               []}]],
         [{debug_line,125,43},{atom,{125,1},ignore}]},
     {clause,
         {125,1},
         [{cons,
              {125,29},
              {match,
                  {125,30},
                  {tuple,{125,30},[{atom,{125,31},label},{var,{125,37},'L'}]},
                  {var,{125,40},'Lbl'}},
              {cons,
                  {125,44},
                  {tuple,
                      {125,44},
                      [{atom,{125,45},label},{var,{125,51},'Alias'}]},
                  {var,{125,58},'Is'}}},
          {var,{125,63},'Replace'},
          {var,{125,72},'Acc'}],
         [],
         [{debug_line,126,44},
          {call,
              {126,5},
              {atom,{126,5},coalesce_consecutive_labels},
              [{block,0,
                   [{cons,{126,33},{var,{126,34},'Lbl'},{var,{126,38},'Is'}}]},
               {block,0,
                   [{cons,
                        {126,43},
                        {tuple,
                            {126,44},
                            [{var,{126,45},'Alias'},{var,{126,51},'L'}]},
                        {var,{126,54},'Replace'}}]},
               {var,{126,64},'Acc'}]}]},
     {clause,
         {127,1},
         [{cons,{127,29},{var,{127,30},'I'},{var,{127,32},'Is'}},
          {var,{127,37},'Replace'},
          {var,{127,46},'Acc'}],
         [],
         [{debug_line,128,45},
          {call,
              {128,5},
              {atom,{128,5},coalesce_consecutive_labels},
              [{var,{128,33},'Is'},
               {var,{128,37},'Replace'},
               {block,0,
                   [{cons,
                        {128,46},
                        {var,{128,47},'I'},
                        {var,{128,49},'Acc'}}]}]}]},
     {clause,
         {129,1},
         [{nil,{129,29}},{var,{129,33},'Replace'},{var,{129,42},'Acc'}],
         [],
         [{debug_line,130,46},
          {match,
              {130,5},
              {var,{130,5},'D'},
              {call,
                  {130,9},
                  {remote,
                      {130,13},
                      {atom,{130,9},maps},
                      {atom,{130,14},from_list}},
                  [{var,{130,24},'Replace'}]}},
          {debug_line,131,47},
          {call,
              {131,5},
              {remote,
                  {131,15},
                  {atom,{131,5},beam_utils},
                  {atom,{131,16},replace_labels}},
              [{var,{131,31},'Acc'},
               {nil,{131,36}},
               {var,{131,40},'D'},
               {block,0,
                   [{'fun',
                        {131,43},
                        {clauses,
                            [{clause,
                                 {131,46},
                                 [{var,{131,47},'L'}],
                                 [],
                                 [{var,{131,53},'L'}]}]}}]}]}]}]}.
{eof,{132,1}}.
