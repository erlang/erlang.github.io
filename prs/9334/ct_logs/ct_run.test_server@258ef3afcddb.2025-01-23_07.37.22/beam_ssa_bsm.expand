{attribute,{1,1},file,{"beam_ssa_bsm.erl",1}}.
{attribute,{55,2},module,beam_ssa_bsm}.
{attribute,{58,2},export,[{module,2},{format_error,1}]}.
{attribute,{1,1},file,{"beam_ssa.hrl",1}}.
{attribute,
    {21,2},
    record,
    {b_module,
        [{typed_record_field,
             {record_field,{21,20},{atom,{21,20},anno},{map,{21,25},[]}},
             {remote_type,
                 {21,32},
                 [{atom,{21,32},beam_ssa},{atom,{21,41},anno},[]]}},
         {typed_record_field,
             {record_field,{22,20},{atom,{22,20},name}},
             {type,{22,28},module,[]}},
         {typed_record_field,
             {record_field,{23,20},{atom,{23,20},exports}},
             {type,
                 {23,31},
                 list,
                 [{type,
                      {23,32},
                      tuple,
                      [{type,{23,33},atom,[]},{type,{23,40},arity,[]}]}]}},
         {typed_record_field,
             {record_field,{24,20},{atom,{24,20},attributes}},
             {type,{24,34},list,[]}},
         {typed_record_field,
             {record_field,{25,20},{atom,{25,20},body}},
             {type,
                 {25,28},
                 list,
                 [{remote_type,
                      {25,29},
                      [{atom,{25,29},beam_ssa},
                       {atom,{25,38},b_function},
                       []]}]}}]}}.
{attribute,
    {26,2},
    record,
    {b_function,
        [{typed_record_field,
             {record_field,{26,22},{atom,{26,22},anno},{map,{26,27},[]}},
             {remote_type,
                 {26,34},
                 [{atom,{26,34},beam_ssa},{atom,{26,43},anno},[]]}},
         {typed_record_field,
             {record_field,{27,22},{atom,{27,22},args}},
             {type,
                 {27,30},
                 list,
                 [{remote_type,
                      {27,31},
                      [{atom,{27,31},beam_ssa},{atom,{27,40},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{28,22},{atom,{28,22},bs}},
             {type,
                 {28,28},
                 map,
                 [{type,
                      {28,46},
                      map_field_exact,
                      [{remote_type,
                           {28,30},
                           [{atom,{28,30},beam_ssa},{atom,{28,39},label},[]]},
                       {remote_type,
                           {28,48},
                           [{atom,{28,48},beam_ssa},
                            {atom,{28,57},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{29,22},{atom,{29,22},cnt}},
             {remote_type,
                 {29,29},
                 [{atom,{29,29},beam_ssa},{atom,{29,38},label},[]]}}]}}.
{attribute,
    {31,2},
    record,
    {b_blk,
        [{typed_record_field,
             {record_field,{31,17},{atom,{31,17},anno},{map,{31,22},[]}},
             {remote_type,
                 {31,29},
                 [{atom,{31,29},beam_ssa},{atom,{31,38},anno},[]]}},
         {typed_record_field,
             {record_field,{32,17},{atom,{32,17},is}},
             {type,
                 {32,23},
                 list,
                 [{remote_type,
                      {32,24},
                      [{atom,{32,24},beam_ssa},{atom,{32,33},b_set},[]]}]}},
         {typed_record_field,
             {record_field,{33,17},{atom,{33,17},last}},
             {remote_type,
                 {33,25},
                 [{atom,{33,25},beam_ssa},{atom,{33,34},terminator},[]]}}]}}.
{attribute,
    {34,2},
    record,
    {b_set,
        [{typed_record_field,
             {record_field,{34,17},{atom,{34,17},anno},{map,{34,22},[]}},
             {remote_type,
                 {34,29},
                 [{atom,{34,29},beam_ssa},{atom,{34,38},anno},[]]}},
         {typed_record_field,
             {record_field,{35,17},{atom,{35,17},dst},{atom,{35,21},none}},
             {type,
                 {35,29},
                 union,
                 [{atom,{35,29},none},
                  {remote_type,
                      {35,36},
                      [{atom,{35,36},beam_ssa},{atom,{35,45},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{36,17},{atom,{36,17},op}},
             {remote_type,
                 {36,23},
                 [{atom,{36,23},beam_ssa},{atom,{36,32},op},[]]}},
         {typed_record_field,
             {record_field,{37,17},{atom,{37,17},args},{nil,{37,22}}},
             {type,
                 {37,28},
                 list,
                 [{remote_type,
                      {37,29},
                      [{atom,{37,29},beam_ssa},
                       {atom,{37,38},argument},
                       []]}]}}]}}.
{attribute,
    {40,2},
    record,
    {b_ret,
        [{typed_record_field,
             {record_field,{40,17},{atom,{40,17},anno},{map,{40,22},[]}},
             {remote_type,
                 {40,29},
                 [{atom,{40,29},beam_ssa},{atom,{40,38},anno},[]]}},
         {typed_record_field,
             {record_field,{41,17},{atom,{41,17},arg}},
             {remote_type,
                 {41,24},
                 [{atom,{41,24},beam_ssa},{atom,{41,33},value},[]]}}]}}.
{attribute,
    {43,2},
    record,
    {b_br,
        [{record_field,{43,16},{atom,{43,16},anno},{map,{43,21},[]}},
         {typed_record_field,
             {record_field,{44,16},{atom,{44,16},bool}},
             {remote_type,
                 {44,24},
                 [{atom,{44,24},beam_ssa},{atom,{44,33},value},[]]}},
         {typed_record_field,
             {record_field,{45,16},{atom,{45,16},succ}},
             {remote_type,
                 {45,24},
                 [{atom,{45,24},beam_ssa},{atom,{45,33},label},[]]}},
         {typed_record_field,
             {record_field,{46,16},{atom,{46,16},fail}},
             {remote_type,
                 {46,24},
                 [{atom,{46,24},beam_ssa},{atom,{46,33},label},[]]}}]}}.
{attribute,
    {48,2},
    record,
    {b_switch,
        [{typed_record_field,
             {record_field,{48,20},{atom,{48,20},anno},{map,{48,25},[]}},
             {remote_type,
                 {48,32},
                 [{atom,{48,32},beam_ssa},{atom,{48,41},anno},[]]}},
         {typed_record_field,
             {record_field,{49,20},{atom,{49,20},arg}},
             {remote_type,
                 {49,27},
                 [{atom,{49,27},beam_ssa},{atom,{49,36},value},[]]}},
         {typed_record_field,
             {record_field,{50,20},{atom,{50,20},fail}},
             {remote_type,
                 {50,28},
                 [{atom,{50,28},beam_ssa},{atom,{50,37},label},[]]}},
         {typed_record_field,
             {record_field,{51,20},{atom,{51,20},list}},
             {type,
                 {51,28},
                 list,
                 [{type,
                      {51,29},
                      tuple,
                      [{remote_type,
                           {51,30},
                           [{atom,{51,30},beam_ssa},
                            {atom,{51,39},b_literal},
                            []]},
                       {remote_type,
                           {51,51},
                           [{atom,{51,51},beam_ssa},
                            {atom,{51,60},label},
                            []]}]}]}}]}}.
{attribute,
    {54,2},
    record,
    {b_var,
        [{typed_record_field,
             {record_field,{54,17},{atom,{54,17},name}},
             {remote_type,
                 {54,25},
                 [{atom,{54,25},beam_ssa},{atom,{54,34},var_name},[]]}}]}}.
{attribute,
    {56,2},
    record,
    {b_literal,
        [{typed_record_field,
             {record_field,{56,21},{atom,{56,21},val}},
             {remote_type,
                 {56,28},
                 [{atom,{56,28},beam_ssa},
                  {atom,{56,37},literal_value},
                  []]}}]}}.
{attribute,
    {58,2},
    record,
    {b_remote,
        [{typed_record_field,
             {record_field,{58,20},{atom,{58,20},mod}},
             {remote_type,
                 {58,29},
                 [{atom,{58,29},beam_ssa},{atom,{58,38},value},[]]}},
         {typed_record_field,
             {record_field,{59,20},{atom,{59,20},name}},
             {remote_type,
                 {59,29},
                 [{atom,{59,29},beam_ssa},{atom,{59,38},value},[]]}},
         {typed_record_field,
             {record_field,{60,20},{atom,{60,20},arity}},
             {type,{60,29},non_neg_integer,[]}}]}}.
{attribute,
    {62,2},
    record,
    {b_local,
        [{typed_record_field,
             {record_field,{62,19},{atom,{62,19},name}},
             {remote_type,
                 {62,28},
                 [{atom,{62,28},beam_ssa},{atom,{62,37},b_literal},[]]}},
         {typed_record_field,
             {record_field,{63,19},{atom,{63,19},arity}},
             {type,{63,28},non_neg_integer,[]}}]}}.
{attribute,{61,1},file,{"beam_ssa_bsm.erl",61}}.
{attribute,{1,1},file,{"beam_types.hrl",1}}.
{attribute,{91,2},
           type,
           {float_range,{type,{91,24},
                              union,
                              [{atom,{91,24},any},
                               {type,{91,32},
                                     tuple,
                                     [{atom,{91,33},'-inf'},
                                      {type,{91,40},float,[]}]},
                               {type,{91,51},
                                     tuple,
                                     [{type,{91,52},float,[]},
                                      {atom,{91,60},'+inf'}]}]},
                        []}}.
{attribute,
    {93,2},
    record,
    {t_atom,
        [{typed_record_field,
             {record_field,{93,18},{atom,{93,18},elements},{atom,{93,27},any}},
             {type,
                 {93,34},
                 union,
                 [{atom,{93,34},any},
                  {remote_type,
                      {93,42},
                      [{atom,{93,42},ordsets},
                       {atom,{93,50},ordset},
                       [{type,{93,57},atom,[]}]]}]}}]}}.
{attribute,
    {94,2},
    record,
    {t_bitstring,
        [{typed_record_field,
             {record_field,
                 {94,23},
                 {atom,{94,23},size_unit},
                 {integer,{94,33},1}},
             {type,{94,38},pos_integer,[]}},
         {typed_record_field,
             {record_field,
                 {99,23},
                 {atom,{99,23},appendable},
                 {atom,{99,34},false}},
             {type,{99,43},boolean,[]}}]}}.
{attribute,
    {100,2},
    record,
    {t_bs_context,
        [{typed_record_field,
             {record_field,
                 {100,24},
                 {atom,{100,24},tail_unit},
                 {integer,{100,34},1}},
             {type,{100,39},pos_integer,[]}}]}}.
{attribute,
    {101,2},
    record,
    {t_bs_matchable,
        [{typed_record_field,
             {record_field,
                 {101,26},
                 {atom,{101,26},tail_unit},
                 {integer,{101,36},1}},
             {type,{101,41},pos_integer,[]}}]}}.
{attribute,
    {102,2},
    record,
    {t_float,
        [{typed_record_field,
             {record_field,
                 {102,19},
                 {atom,{102,19},elements},
                 {atom,{102,28},any}},
             {user_type,{102,35},float_range,[]}}]}}.
{attribute,
    {103,2},
    record,
    {t_fun,
        [{typed_record_field,
             {record_field,{103,17},{atom,{103,17},arity},{atom,{103,23},any}},
             {type,
                 {103,30},
                 union,
                 [{type,{103,30},arity,[]},{atom,{103,40},any}]}},
         {typed_record_field,
             {record_field,
                 {104,17},
                 {atom,{104,17},target},
                 {atom,{104,24},any}},
             {type,
                 {104,31},
                 union,
                 [{type,
                      {104,31},
                      tuple,
                      [{type,{104,32},atom,[]},
                       {type,{104,40},non_neg_integer,[]}]},
                  {atom,{104,61},any}]}},
         {typed_record_field,
             {record_field,{105,17},{atom,{105,17},type},{atom,{105,22},any}},
             {user_type,{105,29},type,[]}}]}}.
{attribute,
    {106,2},
    record,
    {t_integer,
        [{typed_record_field,
             {record_field,
                 {106,21},
                 {atom,{106,21},elements},
                 {atom,{106,30},any}},
             {type,
                 {106,37},
                 union,
                 [{atom,{106,37},any},
                  {remote_type,
                      {106,45},
                      [{atom,{106,45},beam_bounds},
                       {atom,{106,57},range},
                       []]}]}}]}}.
{attribute,
    {107,2},
    record,
    {t_number,
        [{typed_record_field,
             {record_field,
                 {107,20},
                 {atom,{107,20},elements},
                 {atom,{107,29},any}},
             {type,
                 {107,36},
                 union,
                 [{atom,{107,36},any},
                  {remote_type,
                      {107,44},
                      [{atom,{107,44},beam_bounds},
                       {atom,{107,56},range},
                       []]}]}}]}}.
{attribute,
    {113,2},
    record,
    {t_map,
        [{typed_record_field,
             {record_field,
                 {113,17},
                 {atom,{113,17},super_key},
                 {atom,{113,27},any}},
             {user_type,{113,34},type,[]}},
         {typed_record_field,
             {record_field,
                 {114,17},
                 {atom,{114,17},super_value},
                 {atom,{114,29},any}},
             {user_type,{114,36},type,[]}}]}}.
{attribute,
    {122,2},
    record,
    {t_cons,
        [{typed_record_field,
             {record_field,{122,18},{atom,{122,18},type},{atom,{122,23},any}},
             {user_type,{122,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {122,38},
                 {atom,{122,38},terminator},
                 {atom,{122,49},any}},
             {user_type,{122,56},type,[]}}]}}.
{attribute,
    {123,2},
    record,
    {t_list,
        [{typed_record_field,
             {record_field,{123,18},{atom,{123,18},type},{atom,{123,23},any}},
             {user_type,{123,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {123,38},
                 {atom,{123,38},terminator},
                 {atom,{123,49},any}},
             {user_type,{123,56},type,[]}}]}}.
{attribute,
    {125,2},
    record,
    {t_tuple,
        [{typed_record_field,
             {record_field,{125,19},{atom,{125,19},size},{integer,{125,24},0}},
             {type,{125,29},integer,[]}},
         {typed_record_field,
             {record_field,
                 {126,19},
                 {atom,{126,19},exact},
                 {atom,{126,25},false}},
             {type,{126,34},boolean,[]}},
         {typed_record_field,
             {record_field,
                 {127,19},
                 {atom,{127,19},elements},
                 {map,{127,28},[]}},
             {user_type,{127,35},tuple_elements,[]}}]}}.
{attribute,
    {146,2},
    type,
    {tuple_elements,
        {type,
            {146,27},
            map,
            [{type,
                 {146,51},
                 map_field_assoc,
                 [{ann_type,
                      {146,30},
                      [{var,{146,30},'Key'},{type,{146,37},pos_integer,[]}]},
                  {user_type,{146,54},type,[]}]}]},
        []}}.
{attribute,{148,2},
           type,
           {normal_type,{type,{148,24},
                              union,
                              [{atom,{148,24},any},
                               {atom,{148,32},none},
                               {type,{149,24},
                                     record,
                                     [{atom,{149,25},t_number}]},
                               {type,{149,38},
                                     record,
                                     [{atom,{149,39},t_float}]},
                               {type,{149,51},
                                     record,
                                     [{atom,{149,52},t_integer}]},
                               {type,{150,24},record,[{atom,{150,25},t_atom}]},
                               {type,{151,24},
                                     record,
                                     [{atom,{151,25},t_bitstring}]},
                               {type,{151,41},
                                     record,
                                     [{atom,{151,42},t_bs_context}]},
                               {type,{151,59},
                                     record,
                                     [{atom,{151,60},t_bs_matchable}]},
                               {type,{152,24},record,[{atom,{152,25},t_fun}]},
                               {type,{153,24},record,[{atom,{153,25},t_list}]},
                               {type,{153,36},record,[{atom,{153,37},t_cons}]},
                               {atom,{153,48},nil},
                               {atom,{154,24},other},
                               {type,{155,24},record,[{atom,{155,25},t_map}]},
                               {atom,{156,24},identifier},
                               {atom,{157,24},pid},
                               {atom,{158,24},port},
                               {atom,{159,24},reference},
                               {type,{160,24},
                                     record,
                                     [{atom,{160,25},t_tuple}]}]},
                        []}}.
{attribute,{162,2},
           type,
           {other_type,{type,{162,23},
                             union,
                             [{atom,{162,23},none},
                              {type,{162,32},record,[{atom,{162,33},t_fun}]},
                              {type,{162,43},record,[{atom,{162,44},t_map}]},
                              {atom,{163,23},pid},
                              {atom,{163,31},port},
                              {atom,{163,40},reference},
                              {atom,{163,54},identifier},
                              {type,{164,23},
                                    record,
                                    [{atom,{164,24},t_bitstring}]},
                              {type,{164,40},
                                    record,
                                    [{atom,{164,41},t_bs_context}]},
                              {type,{165,23},
                                    record,
                                    [{atom,{165,24},t_bs_matchable}]}]},
                       []}}.
{attribute,
    {167,2},
    type,
    {record_key,
        {type,
            {167,23},
            tuple,
            [{ann_type,
                 {167,24},
                 [{var,{167,24},'Arity'},{type,{167,33},integer,[]}]},
             {ann_type,
                 {167,44},
                 [{var,{167,44},'Tag'},{user_type,{167,51},normal_type,[]}]}]},
        []}}.
{attribute,
    {168,2},
    type,
    {record_set,
        {remote_type,
            {168,23},
            [{atom,{168,23},ordsets},
             {atom,{168,31},ordset},
             [{type,
                  {168,38},
                  tuple,
                  [{user_type,{168,39},record_key,[]},
                   {type,{168,53},record,[{atom,{168,54},t_tuple}]}]}]]},
        []}}.
{attribute,{169,2},
           type,
           {tuple_set,{type,{169,22},
                            union,
                            [{type,{169,22},record,[{atom,{169,23},t_tuple}]},
                             {user_type,{169,35},record_set,[]}]},
                      []}}.
{attribute,
    {173,2},
    record,
    {t_union,
        [{typed_record_field,
             {record_field,{173,19},{atom,{173,19},atom},{atom,{173,24},none}},
             {type,
                 {173,32},
                 union,
                 [{atom,{173,32},none},
                  {type,{173,41},record,[{atom,{173,42},t_atom}]}]}},
         {typed_record_field,
             {record_field,{174,19},{atom,{174,19},list},{atom,{174,24},none}},
             {type,
                 {174,32},
                 union,
                 [{atom,{174,32},none},
                  {type,{174,41},record,[{atom,{174,42},t_list}]},
                  {type,{174,53},record,[{atom,{174,54},t_cons}]},
                  {atom,{174,65},nil}]}},
         {typed_record_field,
             {record_field,
                 {175,19},
                 {atom,{175,19},number},
                 {atom,{175,26},none}},
             {type,
                 {175,34},
                 union,
                 [{atom,{175,34},none},
                  {type,{175,43},record,[{atom,{175,44},t_number}]},
                  {type,{175,57},record,[{atom,{175,58},t_float}]},
                  {type,{175,70},record,[{atom,{175,71},t_integer}]}]}},
         {typed_record_field,
             {record_field,
                 {176,19},
                 {atom,{176,19},tuple_set},
                 {atom,{176,29},none}},
             {type,
                 {176,37},
                 union,
                 [{atom,{176,37},none},{user_type,{176,46},tuple_set,[]}]}},
         {typed_record_field,
             {record_field,
                 {177,19},
                 {atom,{177,19},other},
                 {atom,{177,25},none}},
             {type,
                 {177,33},
                 union,
                 [{atom,{177,33},other},
                  {user_type,{177,43},other_type,[]}]}}]}}.
{attribute,{179,2},
           type,
           {type,{type,{179,17},
                       union,
                       [{type,{179,17},record,[{atom,{179,18},t_union}]},
                        {user_type,{179,30},normal_type,[]}]},
                 []}}.
{attribute,{62,1},file,{"beam_ssa_bsm.erl",62}}.
{attribute,{63,2},
           import,
           {lists,[{member,2},
                   {reverse,1},
                   {reverse,2},
                   {splitwith,2},
                   {foldl,3},
                   {mapfoldl,3},
                   {nth,2},
                   {max,1},
                   {unzip,1}]}}.
{attribute,{66,2},
           spec,
           {{format_error,1},
            [{type,{66,19},
                   'fun',
                   [{type,{66,19},product,[{type,{66,20},term,[]}]},
                    {type,{66,31},nonempty_string,[]}]}]}}.
{function,{68,1},
          format_error,1,
          [{clause,{68,1},
                   [{var,{68,1},'_'}],
                   [[{call,{68,1},
                           {remote,{68,1},
                                   {atom,{68,1},fake},
                                   {atom,{68,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,68,1},{atom,{68,1},ignore}]},
           {clause,{68,1},
                   [{var,{68,14},'OptInfo'}],
                   [],
                   [{debug_line,69,2},
                    {call,{69,5},
                          {atom,{69,5},format_opt_info},
                          [{var,{69,21},'OptInfo'}]}]}]}.
{attribute,
    {71,2},
    spec,
    {{module,2},
     [{type,
          {71,13},
          bounded_fun,
          [{type,
               {71,13},
               'fun',
               [{type,
                    {71,13},
                    product,
                    [{var,{71,14},'Module'},{var,{71,22},'Options'}]},
                {var,{71,34},'Result'}]},
           [{type,
                {72,7},
                constraint,
                [{atom,{72,7},is_subtype},
                 [{var,{72,7},'Module'},
                  {remote_type,
                      {72,17},
                      [{atom,{72,17},beam_ssa},{atom,{72,26},b_module},[]]}]]},
            {type,
                {73,7},
                constraint,
                [{atom,{73,7},is_subtype},
                 [{var,{73,7},'Options'},
                  {type,
                      {73,18},
                      list,
                      [{remote_type,
                           {73,19},
                           [{atom,{73,19},compile},
                            {atom,{73,27},option},
                            []]}]}]]},
            {type,
                {74,7},
                constraint,
                [{atom,{74,7},is_subtype},
                 [{var,{74,7},'Result'},
                  {type,
                      {74,17},
                      tuple,
                      [{atom,{74,18},ok},
                       {remote_type,
                           {74,22},
                           [{atom,{74,22},beam_ssa},
                            {atom,{74,31},b_module},
                            []]},
                       {type,{74,43},list,[]}]}]]}]]}]}}.
{function,
 {78,1},
 module,2,
 [{clause,
   {78,1},
   [{var,{78,1},'_'},{var,{78,1},'_'}],
   [[{call,
      {78,1},
      {remote,{78,1},{atom,{78,1},fake},{atom,{78,1},is_beam_bif_info}},
      []}]],
   [{debug_line,78,3},{atom,{78,1},ignore}]},
  {clause,
   {78,1},
   [{match,
     {78,8},
     {tuple,
      {78,8},
      [{atom,{78,8},b_module},
       {var,{78,8},'_'},
       {var,{78,8},'_'},
       {var,{78,8},'_'},
       {var,{78,8},'_'},
       {var,{78,23},'Fs0'}]},
     {var,{78,28},'Module'}},
    {var,{78,36},'Opts'}],
   [],
   [{debug_line,79,4},
    {match,
     {79,5},
     {var,{79,5},'ModInfo'},
     {call,{79,15},{atom,{79,15},analyze_module},[{var,{79,30},'Module'}]}},
    {debug_line,89,5},
    {match,
     {89,5},
     {tuple,{89,5},[{var,{89,6},'Fs'},{var,{89,10},'_'}]},
     {call,
      {89,15},
      {remote,{89,22},{atom,{89,15},compile},{atom,{89,23},run_sub_passes}},
      [{block,0,
        [{debug_line,90,6},
         {cons,
          {90,17},
          {tuple,
           {90,19},
           [{atom,{90,24},combine_matches},
            {'fun',{90,24},{function,combine_matches,1}}]},
          {cons,
           {91,19},
           {tuple,
            {91,19},
            [{atom,{91,24},accept_context_args},
             {'fun',{91,24},{function,accept_context_args,1}}]},
           {cons,
            {92,19},
            {tuple,
             {92,19},
             [{atom,{92,24},combine_matches},
              {'fun',{92,24},{function,combine_matches,1}}]},
            {cons,
             {93,19},
             {tuple,
              {93,19},
              [{atom,{93,24},allow_context_passthrough},
               {'fun',{93,24},{function,allow_context_passthrough,1}}]},
             {cons,
              {94,19},
              {tuple,
               {94,19},
               [{atom,{94,24},skip_outgoing_tail_extraction},
                {'fun',{94,24},{function,skip_outgoing_tail_extraction,1}}]},
              {cons,
               {95,19},
               {tuple,
                {95,19},
                [{atom,{95,24},annotate_context_parameters},
                 {'fun',{95,24},{function,annotate_context_parameters,1}}]},
               {nil,{95,52}}}}}}}}]},
       {block,0,
        [{debug_line,96,7},
         {tuple,{96,17},[{var,{96,18},'Fs0'},{var,{96,23},'ModInfo'}]}]}]}},
    {debug_line,98,8},
    {match,
     {98,5},
     {var,{98,5},'Ws'},
     {'case',
      {98,10},
      {call,
       {98,15},
       {remote,{98,24},{atom,{98,15},proplists},{atom,{98,25},get_bool}},
       [{atom,{98,34},bin_opt_info},{var,{98,48},'Opts'}]},
      [{clause,
        {99,14},
        [{atom,{99,14},true}],
        [],
        [{debug_line,99,9},
         {call,{99,22},{atom,{99,22},collect_opt_info},[{var,{99,39},'Fs'}]}]},
       {clause,
        {100,14},
        [{atom,{100,14},false}],
        [],
        [{debug_line,100,10},{nil,{100,23}}]}]}},
    {debug_line,103,11},
    {tuple,
     {103,5},
     [{atom,{103,6},ok},
      {block,
       {103,10},
       [{match,{103,10},{var,{103,10},rec0},{var,{103,10},'Module'}},
        {'case',
         {103,26},
         {var,{103,10},rec0},
         [{clause,
           {103,26},
           [{tuple,
             {103,26},
             [{atom,{103,26},b_module},
              {var,{103,26},'_'},
              {var,{103,26},'_'},
              {var,{103,26},'_'},
              {var,{103,26},'_'},
              {var,{103,26},'_'}]}],
           [],
           [{call,
             {103,26},
             {remote,
              {103,26},
              {atom,{103,26},erlang},
              {atom,{103,26},setelement}},
             [{integer,{103,26},6},{var,{103,10},rec0},{var,{103,31},'Fs'}]}]},
          {clause,
           [{generated,true},{location,{103,26}}],
           [{var,[{generated,true},{location,{103,26}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{103,26}}],
             {remote,
              [{generated,true},{location,{103,26}}],
              {atom,[{generated,true},{location,{103,26}}],erlang},
              {atom,[{generated,true},{location,{103,26}}],error}},
             [{tuple,
               [{generated,true},{location,{103,26}}],
               [{atom,[{generated,true},{location,{103,26}}],badrecord},
                {var,{103,10},rec0}]}]}]}]}]},
      {var,{103,36},'Ws'}]}]}]}.
{attribute,{105,2},
           type,
           {module_info,{type,{105,24},
                              map,
                              [{type,{105,37},
                                     map_field_assoc,
                                     [{user_type,{105,27},func_id,[]},
                                      {user_type,{105,40},func_info,[]}]}]},
                        []}}.
{attribute,{107,2},
           type,
           {func_id,{type,{107,20},
                          tuple,
                          [{ann_type,{107,21},
                                     [{var,{107,21},'Name'},
                                      {type,{107,29},atom,[]}]},
                           {ann_type,{107,37},
                                     [{var,{107,37},'Arity'},
                                      {type,{107,46},non_neg_integer,[]}]}]},
                    []}}.
{attribute,
    {109,2},
    type,
    {func_info,
        {type,
            {109,22},
            map,
            [{type,
                 {109,37},
                 map_field_assoc,
                 [{atom,{109,25},has_bsm_ops},{type,{109,40},boolean,[]}]},
             {type,
                 {110,36},
                 map_field_assoc,
                 [{atom,{110,25},parameters},
                  {type,
                      {110,39},
                      list,
                      [{type,{110,40},record,[{atom,{110,41},b_var}]}]}]},
             {type,
                 {111,40},
                 map_field_assoc,
                 [{atom,{111,25},parameter_info},
                  {type,
                      {111,43},
                      map,
                      [{type,
                           {111,55},
                           map_field_assoc,
                           [{type,{111,46},record,[{atom,{111,47},b_var}]},
                            {user_type,{111,58},param_info,[]}]}]}]}]},
        []}}.
{attribute,
    {113,2},
    type,
    {param_info,
        {type,
            {113,23},
            union,
            [{atom,{113,23},suitable_for_reuse},
             {type,
                 {114,23},
                 tuple,
                 [{ann_type,
                      {114,24},
                      [{var,{114,24},'Problem'},{type,{114,35},atom,[]}]},
                  {ann_type,
                      {114,43},
                      [{var,{114,43},'Where'},{type,{114,52},term,[]}]}]}]},
        []}}.
{attribute,{116,2},
           spec,
           {{analyze_module,1},
            [{type,{116,21},
                   'fun',
                   [{type,{116,21},
                          product,
                          [{type,{116,22},record,[{atom,{116,23},b_module}]}]},
                    {user_type,{116,38},module_info,[]}]}]}}.
{function,
 {118,1},
 analyze_module,1,
 [{clause,
   {118,1},
   [{var,{118,1},'_'}],
   [[{call,
      {118,1},
      {remote,{118,1},{atom,{118,1},fake},{atom,{118,1},is_beam_bif_info}},
      []}]],
   [{debug_line,118,12},{atom,{118,1},ignore}]},
  {clause,
   {118,1},
   [{tuple,
     {118,16},
     [{atom,{118,16},b_module},
      {var,{118,16},'_'},
      {var,{118,16},'_'},
      {var,{118,16},'_'},
      {var,{118,16},'_'},
      {var,{118,31},'Fs'}]}],
   [],
   [{debug_line,119,13},
    {call,
     {119,5},
     {remote,{119,5},{atom,{119,5},lists},{atom,{119,5},foldl}},
     [{block,0,
       [{'fun',
         {119,11},
         {clauses,
          [{clause,
            {119,14},
            [{match,
              {119,15},
              {tuple,
               {119,15},
               [{atom,{119,15},b_function},
                {var,{119,15},'_'},
                {var,{119,32},'Parameters'},
                {var,{119,15},'_'},
                {var,{119,15},'_'}]},
              {var,{119,44},'F'}},
             {var,{119,47},'I'}],
            [],
            [{debug_line,120,14},
             {match,
              {120,19},
              {var,{120,19},'FuncInfo'},
              {map,
               {120,30},
               [{map_field_assoc,
                 {120,45},
                 {atom,{120,33},has_bsm_ops},
                 {call,
                  {120,48},
                  {atom,{120,48},has_bsm_ops},
                  [{var,{120,60},'F'}]}},
                {map_field_assoc,
                 {121,44},
                 {atom,{121,33},parameters},
                 {var,{121,47},'Parameters'}},
                {map_field_assoc,
                 {122,48},
                 {atom,{122,33},parameter_info},
                 {map,{122,51},[]}}]}},
             {debug_line,123,15},
             {match,
              {123,19},
              {var,{123,19},'FuncId'},
              {call,{123,28},{atom,{123,28},get_fa},[{var,{123,35},'F'}]}},
             {debug_line,124,16},
             {map,
              {124,20},
              {var,{124,19},'I'},
              [{map_field_assoc,
                {124,30},
                {var,{124,23},'FuncId'},
                {var,{124,33},'FuncInfo'}}]}]}]}}]},
      {block,0,[{debug_line,125,17},{map,{125,16},[]}]},
      {var,{125,21},'Fs'}]}]}]}.
{function,
    {127,1},
    has_bsm_ops,1,
    [{clause,
         {127,1},
         [{var,{127,1},'_'}],
         [[{call,
               {127,1},
               {remote,
                   {127,1},
                   {atom,{127,1},fake},
                   {atom,{127,1},is_beam_bif_info}},
               []}]],
         [{debug_line,127,18},{atom,{127,1},ignore}]},
     {clause,
         {127,1},
         [{tuple,
              {127,13},
              [{atom,{127,13},b_function},
               {var,{127,13},'_'},
               {var,{127,13},'_'},
               {var,{127,28},'Blocks'},
               {var,{127,13},'_'}]}],
         [],
         [{debug_line,128,19},
          {call,
              {128,5},
              {atom,{128,5},hbo_blocks},
              [{block,0,
                   [{call,
                        {128,16},
                        {remote,
                            {128,20},
                            {atom,{128,16},maps},
                            {atom,{128,21},to_list}},
                        [{var,{128,29},'Blocks'}]}]}]}]}]}.
{function,
    {130,1},
    hbo_blocks,1,
    [{clause,
         {130,1},
         [{var,{130,1},'_'}],
         [[{call,
               {130,1},
               {remote,
                   {130,1},
                   {atom,{130,1},fake},
                   {atom,{130,1},is_beam_bif_info}},
               []}]],
         [{debug_line,130,20},{atom,{130,1},ignore}]},
     {clause,
         {130,1},
         [{cons,
              {130,12},
              {tuple,
                  {130,13},
                  [{var,{130,14},'_'},
                   {tuple,
                       {130,16},
                       [{atom,{130,16},b_blk},
                        {var,{130,16},'_'},
                        {var,{130,26},'Is'},
                        {var,{130,16},'_'}]}]},
              {var,{130,33},'Blocks'}}],
         [],
         [{debug_line,131,21},
          {'case',
              {131,5},
              {call,{131,10},{atom,{131,10},hbo_is},[{var,{131,17},'Is'}]},
              [{clause,
                   {132,9},
                   [{atom,{132,9},no}],
                   [],
                   [{debug_line,132,22},
                    {call,
                        {132,15},
                        {atom,{132,15},hbo_blocks},
                        [{var,{132,26},'Blocks'}]}]},
               {clause,
                   {133,9},
                   [{atom,{133,9},yes}],
                   [],
                   [{debug_line,133,23},{atom,{133,16},true}]},
               {clause,
                   {134,9},
                   [{atom,{134,9},nif_start}],
                   [],
                   [{debug_line,137,24},{atom,{137,13},false}]}]}]},
     {clause,
         {139,1},
         [{nil,{139,12}}],
         [],
         [{debug_line,140,25},{atom,{140,5},false}]}]}.
{function,{142,1},
          hbo_is,1,
          [{clause,{142,1},
                   [{var,{142,1},'_'}],
                   [[{call,{142,1},
                           {remote,{142,1},
                                   {atom,{142,1},fake},
                                   {atom,{142,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,142,26},{atom,{142,1},ignore}]},
           {clause,{142,1},
                   [{cons,{142,8},
                          {tuple,{142,9},
                                 [{atom,{142,9},b_set},
                                  {var,{142,9},'_'},
                                  {var,{142,9},'_'},
                                  {atom,{142,19},bs_start_match},
                                  {var,{142,9},'_'}]},
                          {var,{142,37},'_'}}],
                   [],
                   [{debug_line,142,27},{atom,{142,44},yes}]},
           {clause,{143,1},
                   [{cons,{143,8},
                          {tuple,{143,9},
                                 [{atom,{143,9},b_set},
                                  {var,{143,9},'_'},
                                  {var,{143,9},'_'},
                                  {atom,{143,19},nif_start},
                                  {var,{143,9},'_'}]},
                          {var,{143,32},'_'}}],
                   [],
                   [{debug_line,143,28},{atom,{143,39},nif_start}]},
           {clause,{144,1},
                   [{cons,{144,8},{var,{144,9},'_I'},{var,{144,14},'Is'}}],
                   [],
                   [{debug_line,144,29},
                    {call,{144,22},
                          {atom,{144,22},hbo_is},
                          [{var,{144,29},'Is'}]}]},
           {clause,{145,1},
                   [{nil,{145,8}}],
                   [],
                   [{debug_line,145,30},{atom,{145,15},no}]}]}.
{attribute,
    {149,2},
    spec,
    {{check_context_call,4},
     [{type,
          {149,25},
          bounded_fun,
          [{type,
               {149,25},
               'fun',
               [{type,
                    {149,25},
                    product,
                    [{type,{149,26},record,[{atom,{149,27},b_set}]},
                     {var,{149,36},'Arg'},
                     {var,{149,41},'CtxChain'},
                     {var,{149,51},'ModInfo'}]},
                {user_type,{149,63},param_info,[]}]},
           [{type,
                {150,7},
                constraint,
                [{atom,{150,7},is_subtype},
                 [{var,{150,7},'Arg'},
                  {type,{150,14},record,[{atom,{150,15},b_var}]}]]},
            {type,
                {151,7},
                constraint,
                [{atom,{151,7},is_subtype},
                 [{var,{151,7},'CtxChain'},
                  {type,
                      {151,19},
                      list,
                      [{type,{151,20},record,[{atom,{151,21},b_var}]}]}]]},
            {type,
                {152,7},
                constraint,
                [{atom,{152,7},is_subtype},
                 [{var,{152,7},'ModInfo'},
                  {user_type,{152,18},module_info,[]}]]}]]}]}}.
{function,{153,1},
          check_context_call,4,
          [{clause,{153,1},
                   [{var,{153,1},'_'},
                    {var,{153,1},'_'},
                    {var,{153,1},'_'},
                    {var,{153,1},'_'}],
                   [[{call,{153,1},
                           {remote,{153,1},
                                   {atom,{153,1},fake},
                                   {atom,{153,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,153,31},{atom,{153,1},ignore}]},
           {clause,{153,1},
                   [{tuple,{153,20},
                           [{atom,{153,20},b_set},
                            {var,{153,20},'_'},
                            {var,{153,20},'_'},
                            {var,{153,20},'_'},
                            {var,{153,32},'Args'}]},
                    {var,{153,39},'Arg'},
                    {var,{153,44},'CtxChain'},
                    {var,{153,54},'ModInfo'}],
                   [],
                   [{debug_line,154,32},
                    {match,{154,5},
                           {var,{154,5},'Aliases'},
                           {cons,{154,15},
                                 {var,{154,16},'Arg'},
                                 {var,{154,22},'CtxChain'}}},
                    {debug_line,155,33},
                    {call,{155,5},
                          {atom,{155,5},ccc_1},
                          [{var,{155,11},'Args'},
                           {var,{155,17},'Arg'},
                           {var,{155,22},'Aliases'},
                           {var,{155,31},'ModInfo'}]}]}]}.
{function,
 {157,1},
 ccc_1,4,
 [{clause,
   {157,1},
   [{var,{157,1},'_'},{var,{157,1},'_'},{var,{157,1},'_'},{var,{157,1},'_'}],
   [[{call,
      {157,1},
      {remote,{157,1},{atom,{157,1},fake},{atom,{157,1},is_beam_bif_info}},
      []}]],
   [{debug_line,157,34},{atom,{157,1},ignore}]},
  {clause,
   {157,1},
   [{cons,
     {157,7},
     {match,
      {157,8},
      {tuple,
       {157,8},
       [{atom,{157,8},b_local},{var,{157,8},'_'},{var,{157,8},'_'}]},
      {var,{157,19},'Call'}},
     {var,{157,26},'Args'}},
    {var,{157,33},'Ctx'},
    {var,{157,38},'Aliases'},
    {var,{157,47},'ModInfo'}],
   [],
   [{debug_line,164,35},
    {match,
     {164,5},
     {var,{164,5},'UseCount'},
     {call,
      {164,16},
      {remote,{164,16},{atom,{164,16},lists},{atom,{164,16},foldl}},
      [{block,0,
        [{'fun',
          {164,22},
          {clauses,
           [{clause,
             {164,25},
             [{var,{164,26},'Arg'},{var,{164,31},'C'}],
             [],
             [{debug_line,165,36},
              {'case',
               {165,30},
               {call,
                {165,35},
                {remote,{165,35},{atom,{165,35},lists},{atom,{165,35},member}},
                [{var,{165,42},'Arg'},{var,{165,47},'Aliases'}]},
               [{clause,
                 {166,34},
                 [{atom,{166,34},true}],
                 [],
                 [{debug_line,166,37},
                  {op,{166,44},'+',{var,{166,42},'C'},{integer,{166,46},1}}]},
                {clause,
                 {167,34},
                 [{atom,{167,34},false}],
                 [],
                 [{debug_line,167,38},{var,{167,43},'C'}]}]}]}]}}]},
       {integer,{169,27},0},
       {var,{169,30},'Args'}]}},
    {debug_line,170,39},
    {'if',
     {170,5},
     [{clause,
       {171,9},
       [],
       [[{op,{171,18},'=:=',{var,{171,9},'UseCount'},{integer,{171,22},1}}]],
       [{debug_line,172,40},
        {match,
         {172,13},
         {tuple,
          {172,13},
          [{atom,{172,13},b_local},
           {tuple,{172,27},[{atom,{172,27},b_literal},{var,{172,42},'Name'}]},
           {var,{172,54},'Arity'}]},
         {var,{172,63},'Call'}},
        {debug_line,173,41},
        {match,
         {173,13},
         {var,{173,13},'Callee'},
         {tuple,{173,22},[{var,{173,23},'Name'},{var,{173,29},'Arity'}]}},
        {debug_line,175,42},
        {match,
         {175,13},
         {var,{175,13},'ParamInfo'},
         {call,
          {175,25},
          {atom,{175,25},funcinfo_get},
          [{var,{175,38},'Callee'},
           {atom,{175,46},parameter_info},
           {var,{175,62},'ModInfo'}]}},
        {debug_line,176,43},
        {match,
         {176,13},
         {var,{176,13},'Parameters'},
         {call,
          {176,26},
          {atom,{176,26},funcinfo_get},
          [{var,{176,39},'Callee'},
           {atom,{176,47},parameters},
           {var,{176,59},'ModInfo'}]}},
        {debug_line,177,44},
        {match,
         {177,13},
         {var,{177,13},'Parameter'},
         {call,
          {177,25},
          {remote,{177,25},{atom,{177,25},lists},{atom,{177,25},nth}},
          [{block,0,
            [{op,
              {177,31},
              '+',
              {integer,{177,29},1},
              {call,
               {177,33},
               {atom,{177,33},arg_index},
               [{var,{177,43},'Ctx'},{var,{177,48},'Args'}]}}]},
           {var,{177,55},'Parameters'}]}},
        {debug_line,179,45},
        {'case',
         {179,13},
         {var,{179,18},'ParamInfo'},
         [{clause,
           {180,17},
           [{map,
             {180,17},
             [{map_field_exact,
               {180,30},
               {var,{180,20},'Parameter'},
               {atom,{180,33},suitable_for_reuse}}]}],
           [],
           [{debug_line,181,46},{atom,{181,21},suitable_for_reuse}]},
          {clause,
           {182,17},
           [{map,
             {182,17},
             [{map_field_exact,
               {182,30},
               {var,{182,20},'Parameter'},
               {match,
                {182,33},
                {tuple,
                 {182,33},
                 [{atom,{182,34},unsuitable_call},
                  {tuple,
                   {182,51},
                   [{var,{182,52},'Call'},{var,{182,58},'_'}]}]},
                {var,{182,62},'Info'}}}]}],
           [],
           [{debug_line,183,47},{var,{183,21},'Info'}]},
          {clause,
           {184,17},
           [{map,
             {184,17},
             [{map_field_exact,
               {184,30},
               {var,{184,20},'Parameter'},
               {var,{184,33},'Info'}}]}],
           [],
           [{debug_line,185,48},
            {tuple,
             {185,21},
             [{atom,{185,22},unsuitable_call},
              {tuple,
               {185,39},
               [{var,{185,40},'Call'},{var,{185,46},'Info'}]}]}]},
          {clause,
           {186,17},
           [{map,{186,17},[]}],
           [],
           [{debug_line,187,49},
            {tuple,
             {187,21},
             [{atom,{187,22},no_match_on_entry},{var,{187,41},'Call'}]}]}]}]},
      {clause,
       {189,9},
       [],
       [[{op,{189,18},'>',{var,{189,9},'UseCount'},{integer,{189,20},1}}]],
       [{debug_line,190,50},
        {tuple,
         {190,13},
         [{atom,{190,14},multiple_uses_in_call},{var,{190,37},'Call'}]}]}]}]},
  {clause,
   {192,1},
   [{cons,
     {192,7},
     {match,
      {192,8},
      {tuple,
       {192,8},
       [{atom,{192,8},b_remote},
        {var,{192,8},'_'},
        {var,{192,8},'_'},
        {var,{192,8},'_'}]},
      {var,{192,20},'Call'}},
     {var,{192,27},'_Args'}},
    {var,{192,35},'_Ctx'},
    {var,{192,41},'_CtxChain'},
    {var,{192,52},'_ModInfo'}],
   [],
   [{debug_line,193,51},
    {tuple,{193,5},[{atom,{193,6},remote_call},{var,{193,19},'Call'}]}]},
  {clause,
   {194,1},
   [{cons,{194,7},{var,{194,8},'Fun'},{var,{194,14},'_Args'}},
    {var,{194,22},'_Ctx'},
    {var,{194,28},'_CtxChain'},
    {var,{194,39},'_ModInfo'}],
   [],
   [{debug_line,197,52},
    {tuple,{197,5},[{atom,{197,6},fun_call},{var,{197,16},'Fun'}]}]}]}.
{function,{200,1},
          arg_index,2,
          [{clause,{200,1},
                   [{var,{200,1},'_'},{var,{200,1},'_'}],
                   [[{call,{200,1},
                           {remote,{200,1},
                                   {atom,{200,1},fake},
                                   {atom,{200,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,200,53},{atom,{200,1},ignore}]},
           {clause,{200,1},
                   [{var,{200,11},'Var'},{var,{200,16},'Args'}],
                   [],
                   [{debug_line,200,54},
                    {call,{200,25},
                          {atom,{200,25},arg_index_1},
                          [{var,{200,37},'Var'},
                           {var,{200,42},'Args'},
                           {integer,{200,48},0}]}]}]}.
{function,
    {202,1},
    arg_index_1,3,
    [{clause,
         {202,1},
         [{var,{202,1},'_'},{var,{202,1},'_'},{var,{202,1},'_'}],
         [[{call,
               {202,1},
               {remote,
                   {202,1},
                   {atom,{202,1},fake},
                   {atom,{202,1},is_beam_bif_info}},
               []}]],
         [{debug_line,202,55},{atom,{202,1},ignore}]},
     {clause,
         {202,1},
         [{var,{202,13},'Var'},
          {cons,{202,18},{var,{202,19},'Var'},{var,{202,25},'_Args'}},
          {var,{202,33},'Index'}],
         [],
         [{debug_line,202,56},{var,{202,43},'Index'}]},
     {clause,
         {203,1},
         [{var,{203,13},'Var'},
          {cons,{203,18},{var,{203,19},'_Arg'},{var,{203,26},'Args'}},
          {var,{203,33},'Index'}],
         [],
         [{debug_line,203,57},
          {call,
              {203,43},
              {atom,{203,43},arg_index_1},
              [{var,{203,55},'Var'},
               {var,{203,60},'Args'},
               {block,0,
                   [{op,{203,72},
                        '+',
                        {var,{203,66},'Index'},
                        {integer,{203,74},1}}]}]}]}]}.
{function,
    {205,1},
    is_tail_binary,1,
    [{clause,
         {205,1},
         [{var,{205,1},'_'}],
         [[{call,
               {205,1},
               {remote,
                   {205,1},
                   {atom,{205,1},fake},
                   {atom,{205,1},is_beam_bif_info}},
               []}]],
         [{debug_line,205,58},{atom,{205,1},ignore}]},
     {clause,
         {205,1},
         [{tuple,
              {205,16},
              [{atom,{205,16},b_set},
               {var,{205,16},'_'},
               {var,{205,16},'_'},
               {atom,{205,26},bs_match},
               {cons,
                   {205,40},
                   {tuple,
                       {205,41},
                       [{atom,{205,41},b_literal},{atom,{205,56},binary}]},
                   {var,{205,66},'Rest'}}]}],
         [],
         [{debug_line,206,59},
          {call,
              {206,5},
              {remote,{206,5},{atom,{206,5},lists},{atom,{206,5},member}},
              [{block,0,
                   [{tuple,
                        {206,12},
                        [{atom,{206,12},b_literal},{atom,{206,27},all}]}]},
               {var,{206,33},'Rest'}]}]},
     {clause,
         {207,1},
         [{tuple,
              {207,16},
              [{atom,{207,16},b_set},
               {var,{207,16},'_'},
               {var,{207,16},'_'},
               {atom,{207,26},bs_get_tail},
               {var,{207,16},'_'}]}],
         [],
         [{debug_line,208,60},{atom,{208,5},true}]},
     {clause,
         {209,1},
         [{var,{209,16},'_'}],
         [],
         [{debug_line,210,61},{atom,{210,5},false}]}]}.
{function,
    {212,1},
    is_tail_binary,2,
    [{clause,
         {212,1},
         [{var,{212,1},'_'},{var,{212,1},'_'}],
         [[{call,
               {212,1},
               {remote,
                   {212,1},
                   {atom,{212,1},fake},
                   {atom,{212,1},is_beam_bif_info}},
               []}]],
         [{debug_line,212,62},{atom,{212,1},ignore}]},
     {clause,
         {212,1},
         [{match,
              {212,16},
              {tuple,{212,16},[{atom,{212,16},b_var},{var,{212,16},'_'}]},
              {var,{212,25},'Var'}},
          {var,{212,30},'Defs'}],
         [],
         [{debug_line,213,63},
          {'case',
              {213,5},
              {call,
                  {213,10},
                  {atom,{213,10},find_match_definition},
                  [{var,{213,32},'Var'},{var,{213,37},'Defs'}]},
              [{clause,
                   {214,9},
                   [{tuple,{214,9},[{atom,{214,10},ok},{var,{214,14},'Def'}]}],
                   [],
                   [{debug_line,214,64},
                    {call,
                        {214,22},
                        {atom,{214,22},is_tail_binary},
                        [{var,{214,37},'Def'}]}]},
               {clause,
                   {215,9},
                   [{var,{215,9},'_'}],
                   [],
                   [{debug_line,215,65},{atom,{215,14},false}]}]}]},
     {clause,
         {217,1},
         [{var,{217,16},'_Literal'},{var,{217,26},'_Defs'}],
         [],
         [{debug_line,218,66},{atom,{218,5},false}]}]}.
{function,
 {220,1},
 assert_match_context,2,
 [{clause,
   {220,1},
   [{var,{220,1},'_'},{var,{220,1},'_'}],
   [[{call,
      {220,1},
      {remote,{220,1},{atom,{220,1},fake},{atom,{220,1},is_beam_bif_info}},
      []}]],
   [{debug_line,220,67},{atom,{220,1},ignore}]},
  {clause,
   {220,1},
   [{match,
     {220,22},
     {tuple,{220,22},[{atom,{220,22},b_var},{var,{220,22},'_'}]},
     {var,{220,31},'Var'}},
    {var,{220,36},'Defs'}],
   [],
   [{debug_line,221,68},
    {'case',
     {221,5},
     {call,
      {221,10},
      {remote,{221,14},{atom,{221,10},maps},{atom,{221,15},find}},
      [{var,{221,20},'Var'},{var,{221,25},'Defs'}]},
     [{clause,
       {222,9},
       [{tuple,
         {222,9},
         [{atom,{222,10},ok},
          {tuple,
           {222,14},
           [{atom,{222,14},b_set},
            {var,{222,14},'_'},
            {var,{222,14},'_'},
            {atom,{222,24},bs_match},
            {cons,
             {222,38},
             {var,{222,39},'_'},
             {cons,
              {222,41},
              {match,
               {222,41},
               {tuple,{222,41},[{atom,{222,41},b_var},{var,{222,41},'_'}]},
               {var,{222,50},'Ctx'}},
              {var,{222,54},'_'}}}]}]}],
       [],
       [{debug_line,223,69},
        {call,
         {223,13},
         {atom,{223,13},assert_match_context},
         [{var,{223,34},'Ctx'},{var,{223,39},'Defs'}]}]},
      {clause,
       {224,9},
       [{tuple,
         {224,9},
         [{atom,{224,10},ok},
          {tuple,
           {224,14},
           [{atom,{224,14},b_set},
            {var,{224,14},'_'},
            {var,{224,14},'_'},
            {atom,{224,24},bs_start_match},
            {var,{224,14},'_'}]}]}],
       [],
       [{debug_line,225,70},{atom,{225,13},ok}]}]}]}]}.
{function,
    {228,1},
    find_match_definition,2,
    [{clause,
         {228,1},
         [{var,{228,1},'_'},{var,{228,1},'_'}],
         [[{call,
               {228,1},
               {remote,
                   {228,1},
                   {atom,{228,1},fake},
                   {atom,{228,1},is_beam_bif_info}},
               []}]],
         [{debug_line,228,71},{atom,{228,1},ignore}]},
     {clause,
         {228,1},
         [{match,
              {228,23},
              {tuple,{228,23},[{atom,{228,23},b_var},{var,{228,23},'_'}]},
              {var,{228,32},'Var'}},
          {var,{228,37},'Defs'}],
         [],
         [{debug_line,229,72},
          {'case',
              {229,5},
              {call,
                  {229,10},
                  {remote,{229,14},{atom,{229,10},maps},{atom,{229,15},find}},
                  [{var,{229,20},'Var'},{var,{229,25},'Defs'}]},
              [{clause,
                   {230,9},
                   [{tuple,
                        {230,9},
                        [{atom,{230,10},ok},
                         {tuple,
                             {230,14},
                             [{atom,{230,14},b_set},
                              {var,{230,14},'_'},
                              {var,{230,14},'_'},
                              {atom,{230,24},bs_extract},
                              {cons,
                                  {230,40},
                                  {var,{230,41},'Ctx'},
                                  {nil,{230,44}}}]}]}],
                   [],
                   [{debug_line,230,73},
                    {call,
                        {230,51},
                        {remote,
                            {230,55},
                            {atom,{230,51},maps},
                            {atom,{230,56},find}},
                        [{var,{230,61},'Ctx'},{var,{230,66},'Defs'}]}]},
               {clause,
                   {231,9},
                   [{tuple,
                        {231,9},
                        [{atom,{231,10},ok},
                         {match,
                             {231,14},
                             {tuple,
                                 {231,14},
                                 [{atom,{231,14},b_set},
                                  {var,{231,14},'_'},
                                  {var,{231,14},'_'},
                                  {atom,{231,24},bs_get_tail},
                                  {var,{231,14},'_'}]},
                             {var,{231,37},'Def'}}]}],
                   [],
                   [{debug_line,231,74},
                    {tuple,
                        {231,45},
                        [{atom,{231,46},ok},{var,{231,50},'Def'}]}]},
               {clause,
                   {232,9},
                   [{var,{232,9},'_'}],
                   [],
                   [{debug_line,232,75},{atom,{232,14},error}]}]}]}]}.
{function,
 {236,1},
 context_chain_of,2,
 [{clause,
   {236,1},
   [{var,{236,1},'_'},{var,{236,1},'_'}],
   [[{call,
      {236,1},
      {remote,{236,1},{atom,{236,1},fake},{atom,{236,1},is_beam_bif_info}},
      []}]],
   [{debug_line,236,76},{atom,{236,1},ignore}]},
  {clause,
   {236,1},
   [{match,
     {236,18},
     {tuple,{236,18},[{atom,{236,18},b_var},{var,{236,18},'_'}]},
     {var,{236,27},'Var'}},
    {var,{236,32},'Defs'}],
   [],
   [{debug_line,237,77},
    {'case',
     {237,5},
     {call,
      {237,10},
      {remote,{237,14},{atom,{237,10},maps},{atom,{237,15},find}},
      [{var,{237,20},'Var'},{var,{237,25},'Defs'}]},
     [{clause,
       {238,9},
       [{tuple,
         {238,9},
         [{atom,{238,10},ok},
          {tuple,
           {238,14},
           [{atom,{238,14},b_set},
            {var,{238,14},'_'},
            {var,{238,14},'_'},
            {atom,{238,24},bs_match},
            {cons,
             {238,38},
             {var,{238,39},'_'},
             {cons,
              {238,41},
              {match,
               {238,41},
               {tuple,{238,41},[{atom,{238,41},b_var},{var,{238,41},'_'}]},
               {var,{238,50},'Ctx'}},
              {var,{238,54},'_'}}}]}]}],
       [],
       [{debug_line,239,78},
        {cons,
         {239,13},
         {var,{239,14},'Ctx'},
         {call,
          {239,20},
          {atom,{239,20},context_chain_of},
          [{var,{239,37},'Ctx'},{var,{239,42},'Defs'}]}}]},
      {clause,
       {240,9},
       [{tuple,
         {240,9},
         [{atom,{240,10},ok},
          {tuple,
           {240,14},
           [{atom,{240,14},b_set},
            {var,{240,14},'_'},
            {var,{240,14},'_'},
            {atom,{240,24},bs_get_tail},
            {cons,{240,41},{var,{240,42},'Ctx'},{nil,{240,45}}}]}]}],
       [],
       [{debug_line,241,79},
        {cons,
         {241,13},
         {var,{241,14},'Ctx'},
         {call,
          {241,20},
          {atom,{241,20},context_chain_of},
          [{var,{241,37},'Ctx'},{var,{241,42},'Defs'}]}}]},
      {clause,
       {242,9},
       [{tuple,
         {242,9},
         [{atom,{242,10},ok},
          {tuple,
           {242,14},
           [{atom,{242,14},b_set},
            {var,{242,14},'_'},
            {var,{242,14},'_'},
            {atom,{242,24},bs_extract},
            {cons,{242,40},{var,{242,41},'Ctx'},{nil,{242,44}}}]}]}],
       [],
       [{debug_line,243,80},
        {cons,
         {243,13},
         {var,{243,14},'Ctx'},
         {call,
          {243,20},
          {atom,{243,20},context_chain_of},
          [{var,{243,37},'Ctx'},{var,{243,42},'Defs'}]}}]},
      {clause,
       {244,9},
       [{var,{244,9},'_'}],
       [],
       [{debug_line,245,81},{nil,{245,13}}]}]}]}]}.
{function,{249,1},
          match_context_of,2,
          [{clause,{249,1},
                   [{var,{249,1},'_'},{var,{249,1},'_'}],
                   [[{call,{249,1},
                           {remote,{249,1},
                                   {atom,{249,1},fake},
                                   {atom,{249,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,249,82},{atom,{249,1},ignore}]},
           {clause,{249,1},
                   [{match,{249,18},
                           {tuple,{249,18},
                                  [{atom,{249,18},b_var},{var,{249,18},'_'}]},
                           {var,{249,27},'Var'}},
                    {var,{249,32},'Defs'}],
                   [],
                   [{debug_line,250,83},
                    {match,{250,5},
                           {var,{250,5},'Ctx'},
                           {call,{250,11},
                                 {atom,{250,11},match_context_of_1},
                                 [{var,{250,30},'Var'},
                                  {var,{250,35},'Defs'}]}},
                    {debug_line,251,84},
                    {call,{251,5},
                          {atom,{251,5},assert_match_context},
                          [{var,{251,26},'Ctx'},{var,{251,31},'Defs'}]},
                    {debug_line,252,85},
                    {var,{252,5},'Ctx'}]}]}.
{function,
 {254,1},
 match_context_of_1,2,
 [{clause,
   {254,1},
   [{var,{254,1},'_'},{var,{254,1},'_'}],
   [[{call,
      {254,1},
      {remote,{254,1},{atom,{254,1},fake},{atom,{254,1},is_beam_bif_info}},
      []}]],
   [{debug_line,254,86},{atom,{254,1},ignore}]},
  {clause,
   {254,1},
   [{var,{254,20},'Var'},{var,{254,25},'Defs'}],
   [],
   [{debug_line,255,87},
    {'case',
     {255,5},
     {call,
      {255,10},
      {remote,{255,14},{atom,{255,10},maps},{atom,{255,15},get}},
      [{var,{255,19},'Var'},{var,{255,24},'Defs'}]},
     [{clause,
       {256,9},
       [{tuple,
         {256,9},
         [{atom,{256,9},b_set},
          {var,{256,9},'_'},
          {var,{256,9},'_'},
          {atom,{256,19},bs_extract},
          {cons,
           {256,35},
           {match,
            {256,36},
            {tuple,{256,36},[{atom,{256,36},b_var},{var,{256,36},'_'}]},
            {var,{256,45},'Ctx0'}},
           {nil,{256,49}}}]}],
       [],
       [{debug_line,257,88},
        {match,
         {257,13},
         {tuple,
          {257,13},
          [{atom,{257,13},b_set},
           {var,{257,13},'_'},
           {var,{257,13},'_'},
           {atom,{257,23},bs_match},
           {cons,
            {258,25},
            {var,{258,26},'_'},
            {cons,
             {258,28},
             {match,
              {258,28},
              {tuple,{258,28},[{atom,{258,28},b_var},{var,{258,28},'_'}]},
              {var,{258,37},'Ctx'}},
             {var,{258,41},'_'}}}]},
         {call,
          {258,47},
          {remote,{258,51},{atom,{258,47},maps},{atom,{258,52},get}},
          [{var,{258,56},'Ctx0'},{var,{258,62},'Defs'}]}},
        {debug_line,259,89},
        {var,{259,13},'Ctx'}]},
      {clause,
       {260,9},
       [{tuple,
         {260,9},
         [{atom,{260,9},b_set},
          {var,{260,9},'_'},
          {var,{260,9},'_'},
          {atom,{260,19},bs_get_tail},
          {cons,
           {260,36},
           {match,
            {260,37},
            {tuple,{260,37},[{atom,{260,37},b_var},{var,{260,37},'_'}]},
            {var,{260,46},'Ctx'}},
           {nil,{260,49}}}]}],
       [],
       [{debug_line,261,90},{var,{261,13},'Ctx'}]}]}]}]}.
{function,
    {264,1},
    funcinfo_get,3,
    [{clause,
         {264,1},
         [{var,{264,1},'_'},{var,{264,1},'_'},{var,{264,1},'_'}],
         [[{call,
               {264,1},
               {remote,
                   {264,1},
                   {atom,{264,1},fake},
                   {atom,{264,1},is_beam_bif_info}},
               []}]],
         [{debug_line,264,91},{atom,{264,1},ignore}]},
     {clause,
         {264,1},
         [{match,
              {264,14},
              {tuple,
                  {264,14},
                  [{atom,{264,14},b_function},
                   {var,{264,14},'_'},
                   {var,{264,14},'_'},
                   {var,{264,14},'_'},
                   {var,{264,14},'_'}]},
              {var,{264,28},'F'}},
          {var,{264,31},'Attribute'},
          {var,{264,42},'ModInfo'}],
         [],
         [{debug_line,265,92},
          {call,
              {265,5},
              {atom,{265,5},funcinfo_get},
              [{block,0,
                   [{call,
                        {265,18},
                        {atom,{265,18},get_fa},
                        [{var,{265,25},'F'}]}]},
               {var,{265,29},'Attribute'},
               {var,{265,40},'ModInfo'}]}]},
     {clause,
         {266,1},
         [{match,
              {266,14},
              {tuple,{266,14},[{var,{266,15},'_'},{var,{266,17},'_'}]},
              {var,{266,20},'Key'}},
          {var,{266,25},'Attribute'},
          {var,{266,36},'ModInfo'}],
         [],
         [{debug_line,267,93},
          {match,
              {267,5},
              {var,{267,5},'FuncInfo'},
              {call,
                  {267,16},
                  {remote,{267,20},{atom,{267,16},maps},{atom,{267,21},get}},
                  [{var,{267,25},'Key'},{var,{267,30},'ModInfo'}]}},
          {debug_line,268,94},
          {call,
              {268,5},
              {remote,{268,9},{atom,{268,5},maps},{atom,{268,10},get}},
              [{var,{268,14},'Attribute'},{var,{268,25},'FuncInfo'}]}]}]}.
{function,
    {270,1},
    funcinfo_set,4,
    [{clause,
         {270,1},
         [{var,{270,1},'_'},
          {var,{270,1},'_'},
          {var,{270,1},'_'},
          {var,{270,1},'_'}],
         [[{call,
               {270,1},
               {remote,
                   {270,1},
                   {atom,{270,1},fake},
                   {atom,{270,1},is_beam_bif_info}},
               []}]],
         [{debug_line,270,95},{atom,{270,1},ignore}]},
     {clause,
         {270,1},
         [{match,
              {270,14},
              {tuple,
                  {270,14},
                  [{atom,{270,14},b_function},
                   {var,{270,14},'_'},
                   {var,{270,14},'_'},
                   {var,{270,14},'_'},
                   {var,{270,14},'_'}]},
              {var,{270,28},'F'}},
          {var,{270,31},'Attribute'},
          {var,{270,42},'Value'},
          {var,{270,49},'ModInfo'}],
         [],
         [{debug_line,271,96},
          {call,
              {271,5},
              {atom,{271,5},funcinfo_set},
              [{block,0,
                   [{call,
                        {271,18},
                        {atom,{271,18},get_fa},
                        [{var,{271,25},'F'}]}]},
               {var,{271,29},'Attribute'},
               {var,{271,40},'Value'},
               {var,{271,47},'ModInfo'}]}]},
     {clause,
         {272,1},
         [{var,{272,14},'Key'},
          {var,{272,19},'Attribute'},
          {var,{272,30},'Value'},
          {var,{272,37},'ModInfo'}],
         [],
         [{debug_line,273,97},
          {match,
              {273,5},
              {var,{273,5},'FuncInfo'},
              {call,
                  {273,16},
                  {remote,{273,20},{atom,{273,16},maps},{atom,{273,21},put}},
                  [{var,{273,25},'Attribute'},
                   {var,{273,36},'Value'},
                   {block,0,
                       [{call,
                            {273,43},
                            {remote,
                                {273,47},
                                {atom,{273,43},maps},
                                {atom,{273,48},get}},
                            [{var,{273,52},'Key'},
                             {var,{273,57},'ModInfo'},
                             {block,0,[{map,{273,66},[]}]}]}]}]}},
          {debug_line,274,98},
          {call,
              {274,5},
              {remote,{274,9},{atom,{274,5},maps},{atom,{274,10},put}},
              [{var,{274,14},'Key'},
               {var,{274,19},'FuncInfo'},
               {var,{274,29},'ModInfo'}]}]}]}.
{function,
    {276,1},
    get_fa,1,
    [{clause,
         {276,1},
         [{var,{276,1},'_'}],
         [[{call,
               {276,1},
               {remote,
                   {276,1},
                   {atom,{276,1},fake},
                   {atom,{276,1},is_beam_bif_info}},
               []}]],
         [{debug_line,276,99},{atom,{276,1},ignore}]},
     {clause,
         {276,1},
         [{tuple,
              {276,8},
              [{atom,{276,8},b_function},
               {var,{276,28},'Anno'},
               {var,{276,8},'_'},
               {var,{276,8},'_'},
               {var,{276,8},'_'}]}],
         [],
         [{debug_line,277,100},
          {match,
              {277,5},
              {tuple,
                  {277,5},
                  [{var,{277,6},'_'},
                   {var,{277,8},'Name'},
                   {var,{277,13},'Arity'}]},
              {call,
                  {277,22},
                  {remote,{277,26},{atom,{277,22},maps},{atom,{277,27},get}},
                  [{atom,{277,31},func_info},{var,{277,42},'Anno'}]}},
          {debug_line,278,101},
          {tuple,{278,5},[{var,{278,6},'Name'},{var,{278,11},'Arity'}]}]}]}.
{attribute,
    {284,2},
    spec,
    {{alias_matched_binaries,3},
     [{type,
          {284,29},
          bounded_fun,
          [{type,
               {284,29},
               'fun',
               [{type,
                    {284,29},
                    product,
                    [{var,{284,30},'Blocks'},
                     {var,{284,38},'Counter'},
                     {var,{284,47},'AliasMap'}]},
                {var,{284,60},'Result'}]},
           [{type,
                {285,7},
                constraint,
                [{atom,{285,7},is_subtype},
                 [{var,{285,7},'Blocks'},
                  {remote_type,
                      {285,17},
                      [{atom,{285,17},beam_ssa},
                       {atom,{285,26},block_map},
                       []]}]]},
            {type,
                {286,7},
                constraint,
                [{atom,{286,7},is_subtype},
                 [{var,{286,7},'Counter'},
                  {type,{286,18},non_neg_integer,[]}]]},
            {type,
                {287,7},
                constraint,
                [{atom,{287,7},is_subtype},
                 [{var,{287,7},'AliasMap'},
                  {user_type,{287,19},match_alias_map,[]}]]},
            {type,
                {288,7},
                constraint,
                [{atom,{288,7},is_subtype},
                 [{var,{288,7},'Result'},
                  {type,
                      {288,17},
                      tuple,
                      [{var,{288,18},'Blocks'},
                       {var,{288,26},'Counter'}]}]]}]]}]}}.
{attribute,
    {290,2},
    type,
    {match_alias_map,
        {type,
            {291,9},
            map,
            [{type,
                 {291,31},
                 map_field_assoc,
                 [{ann_type,
                      {291,12},
                      [{var,{291,12},'Binary'},
                       {type,{291,22},record,[{atom,{291,23},b_var}]}]},
                  {type,
                      {292,22},
                      tuple,
                      [{ann_type,
                           {294,24},
                           [{var,{294,24},'AliasAfter'},
                            {remote_type,
                                {294,38},
                                [{atom,{294,38},beam_ssa},
                                 {atom,{294,47},label},
                                 []]}]},
                       {ann_type,
                           {296,24},
                           [{var,{296,24},'Context'},
                            {type,
                                {296,35},
                                record,
                                [{atom,{296,36},b_var}]}]}]}]}]},
        []}}.
{attribute,
    {301,2},
    type,
    {promotion_map,
        {type,
            {302,9},
            map,
            [{type,
                 {303,37},
                 map_field_assoc,
                 [{type,
                      {302,12},
                      tuple,
                      [{ann_type,
                           {302,14},
                           [{var,{302,14},'PromoteAt'},
                            {remote_type,
                                {302,27},
                                [{atom,{302,27},beam_ssa},
                                 {atom,{302,36},label},
                                 []]}]},
                       {ann_type,
                           {303,14},
                           [{var,{303,14},'Variable'},
                            {type,{303,26},record,[{atom,{303,27},b_var}]}]}]},
                  {ann_type,
                      {304,16},
                      [{var,{304,16},'Instruction'},
                       {type,{304,31},record,[{atom,{304,32},b_set}]}]}]}]},
        []}}.
{attribute,
    {306,2},
    record,
    {amb,
        [{typed_record_field,
             {record_field,{306,16},{atom,{306,16},dominators}},
             {remote_type,
                 {306,30},
                 [{atom,{306,30},beam_ssa},{atom,{306,39},dominator_map},[]]}},
         {typed_record_field,
             {record_field,{307,16},{atom,{307,16},match_aliases}},
             {user_type,{307,33},match_alias_map,[]}},
         {typed_record_field,
             {record_field,{308,16},{atom,{308,16},cnt}},
             {type,{308,23},non_neg_integer,[]}},
         {typed_record_field,
             {record_field,
                 {309,16},
                 {atom,{309,16},promotions},
                 {map,{309,29},[]}},
             {user_type,{309,36},promotion_map,[]}}]}}.
{function,
    {311,1},
    alias_matched_binaries,3,
    [{clause,
         {311,1},
         [{var,{311,1},'_'},{var,{311,1},'_'},{var,{311,1},'_'}],
         [[{call,
               {311,1},
               {remote,
                   {311,1},
                   {atom,{311,1},fake},
                   {atom,{311,1},is_beam_bif_info}},
               []}]],
         [{debug_line,311,102},{atom,{311,1},ignore}]},
     {clause,
         {311,1},
         [{var,{311,24},'Blocks0'},
          {var,{311,33},'Counter'},
          {var,{311,42},'AliasMap'}],
         [[{op,{311,66},'=/=',{var,{311,57},'AliasMap'},{map,{311,70},[]}}]],
         [{debug_line,312,103},
          {match,
              {312,5},
              {var,{312,5},'RPO'},
              {call,
                  {312,11},
                  {remote,
                      {312,19},
                      {atom,{312,11},beam_ssa},
                      {atom,{312,20},rpo}},
                  [{var,{312,24},'Blocks0'}]}},
          {debug_line,313,104},
          {match,
              {313,5},
              {tuple,{313,5},[{var,{313,6},'Dominators'},{var,{313,18},'_'}]},
              {call,
                  {313,23},
                  {remote,
                      {313,31},
                      {atom,{313,23},beam_ssa},
                      {atom,{313,32},dominators}},
                  [{var,{313,43},'RPO'},{var,{313,48},'Blocks0'}]}},
          {debug_line,314,105},
          {match,
              {314,5},
              {var,{314,5},'State0'},
              {tuple,
                  {314,14},
                  [{atom,{314,14},amb},
                   {var,{314,33},'Dominators'},
                   {var,{315,36},'AliasMap'},
                   {var,{316,26},'Counter'},
                   {map,{314,14},[]}]}},
          {debug_line,317,106},
          {match,
              {317,5},
              {tuple,{317,5},[{var,{317,6},'Blocks'},{var,{317,14},'State'}]},
              {call,
                  {317,23},
                  {remote,
                      {317,31},
                      {atom,{317,23},beam_ssa},
                      {atom,{317,32},mapfold_blocks}},
                  [{block,0,[{'fun',{317,47},{function,amb_1,3}}]},
                   {var,{317,60},'RPO'},
                   {var,{317,65},'State0'},
                   {var,{318,47},'Blocks0'}]}},
          {debug_line,319,107},
          {tuple,
              {319,5},
              [{call,
                   {319,6},
                   {atom,{319,6},amb_insert_promotions},
                   [{var,{319,28},'Blocks'},{var,{319,36},'State'}]},
               {'case',
                   {319,44},
                   {var,{319,44},'State'},
                   [{clause,
                        [{generated,true},{location,{319,44}}],
                        [{tuple,
                             [{generated,true},{location,{319,44}}],
                             [{atom,{319,44},amb},
                              {var,{319,44},'_'},
                              {var,{319,44},'_'},
                              {var,{319,44},rec1},
                              {var,{319,44},'_'}]}],
                        [],
                        [{var,{319,44},rec1}]},
                    {clause,
                        [{generated,true},{location,{319,44}}],
                        [{var,{319,44},rec1}],
                        [],
                        [{call,
                             [{generated,true},{location,{319,44}}],
                             {remote,
                                 [{generated,true},{location,{319,44}}],
                                 {atom,
                                     [{generated,true},{location,{319,44}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{319,44}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{319,44}}],
                                  [{atom,
                                       [{generated,true},{location,{319,44}}],
                                       badrecord},
                                   {var,{319,44},rec1}]}]}]}]}]}]},
     {clause,
         {320,1},
         [{var,{320,24},'Blocks'},
          {var,{320,32},'Counter'},
          {var,{320,41},'_AliasMap'}],
         [],
         [{debug_line,321,108},
          {tuple,
              {321,5},
              [{var,{321,6},'Blocks'},{var,{321,14},'Counter'}]}]}]}.
{function,
 {323,1},
 amb_1,3,
 [{clause,
   {323,1},
   [{var,{323,1},'_'},{var,{323,1},'_'},{var,{323,1},'_'}],
   [[{call,
      {323,1},
      {remote,{323,1},{atom,{323,1},fake},{atom,{323,1},is_beam_bif_info}},
      []}]],
   [{debug_line,323,109},{atom,{323,1},ignore}]},
  {clause,
   {323,1},
   [{var,{323,7},'Lbl'},
    {match,
     {323,12},
     {tuple,
      {323,12},
      [{atom,{323,12},b_blk},
       {var,{323,12},'_'},
       {var,{323,22},'Is0'},
       {var,{323,31},'Last0'}]},
     {var,{323,38},'Block'}},
    {var,{323,45},'State0'}],
   [],
   [{debug_line,324,110},
    {match,
     {324,5},
     {tuple,{324,5},[{var,{324,6},'Is'},{var,{324,10},'State1'}]},
     {call,
      {324,20},
      {remote,{324,20},{atom,{324,20},lists},{atom,{324,20},mapfoldl}},
      [{block,0,
        [{'fun',
          {324,29},
          {clauses,
           [{clause,
             {324,32},
             [{var,{324,33},'I'},{var,{324,36},'State'}],
             [],
             [{debug_line,325,111},
              {call,
               {325,37},
               {atom,{325,37},amb_assign_set},
               [{var,{325,52},'I'},
                {var,{325,55},'Lbl'},
                {var,{325,60},'State'}]}]}]}}]},
       {var,{326,34},'State0'},
       {var,{326,42},'Is0'}]}},
    {debug_line,327,112},
    {match,
     {327,5},
     {tuple,{327,5},[{var,{327,6},'Last1'},{var,{327,13},'State'}]},
     {call,
      {327,22},
      {atom,{327,22},amb_assign_last},
      [{var,{327,38},'Last0'},{var,{327,45},'Lbl'},{var,{327,50},'State1'}]}},
    {debug_line,328,113},
    {match,
     {328,5},
     {var,{328,5},'Last'},
     {call,
      {328,12},
      {remote,{328,20},{atom,{328,12},beam_ssa},{atom,{328,21},normalize}},
      [{var,{328,31},'Last1'}]}},
    {debug_line,329,114},
    {tuple,
     {329,5},
     [{block,
       {329,6},
       [{match,{329,6},{var,{329,6},rec2},{var,{329,6},'Block'}},
        {'case',
         {329,18},
         {var,{329,6},rec2},
         [{clause,
           {329,18},
           [{tuple,
             {329,18},
             [{atom,{329,18},b_blk},
              {var,{329,18},'_'},
              {var,{329,18},'_'},
              {var,{329,18},'_'}]}],
           [],
           [{call,
             {329,18},
             {remote,
              {329,18},
              {atom,{329,18},erlang},
              {atom,{329,18},setelement}},
             [{integer,{329,18},3},
              {call,
               {329,24},
               {remote,
                {329,24},
                {atom,{329,24},erlang},
                {atom,{329,24},setelement}},
               [{integer,{329,24},4},
                {var,{329,6},rec2},
                {var,{329,29},'Last'}]},
              {var,{329,21},'Is'}]}]},
          {clause,
           [{generated,true},{location,{329,18}}],
           [{var,[{generated,true},{location,{329,18}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{329,18}}],
             {remote,
              [{generated,true},{location,{329,18}}],
              {atom,[{generated,true},{location,{329,18}}],erlang},
              {atom,[{generated,true},{location,{329,18}}],error}},
             [{tuple,
               [{generated,true},{location,{329,18}}],
               [{atom,[{generated,true},{location,{329,18}}],badrecord},
                {var,{329,6},rec2}]}]}]}]}]},
      {var,{329,36},'State'}]}]}]}.
{function,
 {331,1},
 amb_assign_set,3,
 [{clause,
   {331,1},
   [{var,{331,1},'_'},{var,{331,1},'_'},{var,{331,1},'_'}],
   [[{call,
      {331,1},
      {remote,{331,1},{atom,{331,1},fake},{atom,{331,1},is_beam_bif_info}},
      []}]],
   [{debug_line,331,115},{atom,{331,1},ignore}]},
  {clause,
   {331,1},
   [{match,
     {331,16},
     {tuple,
      {331,16},
      [{atom,{331,16},b_set},
       {var,{331,16},'_'},
       {var,{331,16},'_'},
       {atom,{331,26},phi},
       {var,{331,35},'Args0'}]},
     {var,{331,42},'I'}},
    {var,{331,45},'_Lbl'},
    {var,{331,51},'State0'}],
   [],
   [{debug_line,334,116},
    {match,
     {334,5},
     {tuple,{334,5},[{var,{334,6},'Args'},{var,{334,12},'State'}]},
     {call,
      {335,9},
      {remote,{335,9},{atom,{335,9},lists},{atom,{335,9},mapfoldl}},
      [{block,0,
        [{debug_line,335,117},
         {'fun',
          {335,18},
          {clauses,
           [{clause,
             {335,21},
             [{tuple,{335,22},[{var,{335,23},'Arg0'},{var,{335,29},'Lbl'}]},
              {var,{335,35},'Acc'}],
             [],
             [{debug_line,336,118},
              {match,
               {336,26},
               {tuple,{336,26},[{var,{336,27},'Arg'},{var,{336,32},'State'}]},
               {call,
                {336,41},
                {atom,{336,41},amb_get_alias},
                [{var,{336,55},'Arg0'},
                 {var,{336,61},'Lbl'},
                 {var,{336,66},'Acc'}]}},
              {debug_line,337,119},
              {tuple,
               {337,26},
               [{tuple,{337,27},[{var,{337,28},'Arg'},{var,{337,33},'Lbl'}]},
                {var,{337,39},'State'}]}]}]}}]},
       {var,{338,23},'State0'},
       {var,{338,31},'Args0'}]}},
    {debug_line,339,120},
    {tuple,
     {339,5},
     [{block,
       {339,6},
       [{match,{339,6},{var,{339,6},rec3},{var,{339,6},'I'}},
        {'case',
         {339,14},
         {var,{339,6},rec3},
         [{clause,
           {339,14},
           [{tuple,
             {339,14},
             [{atom,{339,14},b_set},
              {var,{339,14},'_'},
              {var,{339,14},'_'},
              {var,{339,14},'_'},
              {var,{339,14},'_'}]}],
           [],
           [{call,
             {339,14},
             {remote,
              {339,14},
              {atom,{339,14},erlang},
              {atom,{339,14},setelement}},
             [{integer,{339,14},5},
              {var,{339,6},rec3},
              {var,{339,19},'Args'}]}]},
          {clause,
           [{generated,true},{location,{339,14}}],
           [{var,[{generated,true},{location,{339,14}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{339,14}}],
             {remote,
              [{generated,true},{location,{339,14}}],
              {atom,[{generated,true},{location,{339,14}}],erlang},
              {atom,[{generated,true},{location,{339,14}}],error}},
             [{tuple,
               [{generated,true},{location,{339,14}}],
               [{atom,[{generated,true},{location,{339,14}}],badrecord},
                {var,{339,6},rec3}]}]}]}]}]},
      {var,{339,26},'State'}]}]},
  {clause,
   {340,1},
   [{match,
     {340,16},
     {tuple,
      {340,16},
      [{atom,{340,16},b_set},
       {var,{340,16},'_'},
       {var,{340,16},'_'},
       {var,{340,16},'_'},
       {var,{340,28},'Args0'}]},
     {var,{340,35},'I'}},
    {var,{340,38},'Lbl'},
    {var,{340,43},'State0'}],
   [],
   [{debug_line,341,121},
    {match,
     {341,5},
     {tuple,{341,5},[{var,{341,6},'Args'},{var,{341,12},'State'}]},
     {call,
      {341,21},
      {remote,{341,21},{atom,{341,21},lists},{atom,{341,21},mapfoldl}},
      [{block,0,
        [{'fun',
          {341,30},
          {clauses,
           [{clause,
             {341,33},
             [{var,{341,34},'Arg0'},{var,{341,40},'Acc'}],
             [],
             [{debug_line,342,122},
              {call,
               {342,38},
               {atom,{342,38},amb_get_alias},
               [{var,{342,52},'Arg0'},
                {var,{342,58},'Lbl'},
                {var,{342,63},'Acc'}]}]}]}}]},
       {var,{343,35},'State0'},
       {var,{343,43},'Args0'}]}},
    {debug_line,344,123},
    {tuple,
     {344,5},
     [{block,
       {344,6},
       [{match,{344,6},{var,{344,6},rec4},{var,{344,6},'I'}},
        {'case',
         {344,14},
         {var,{344,6},rec4},
         [{clause,
           {344,14},
           [{tuple,
             {344,14},
             [{atom,{344,14},b_set},
              {var,{344,14},'_'},
              {var,{344,14},'_'},
              {var,{344,14},'_'},
              {var,{344,14},'_'}]}],
           [],
           [{call,
             {344,14},
             {remote,
              {344,14},
              {atom,{344,14},erlang},
              {atom,{344,14},setelement}},
             [{integer,{344,14},5},
              {var,{344,6},rec4},
              {var,{344,19},'Args'}]}]},
          {clause,
           [{generated,true},{location,{344,14}}],
           [{var,[{generated,true},{location,{344,14}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{344,14}}],
             {remote,
              [{generated,true},{location,{344,14}}],
              {atom,[{generated,true},{location,{344,14}}],erlang},
              {atom,[{generated,true},{location,{344,14}}],error}},
             [{tuple,
               [{generated,true},{location,{344,14}}],
               [{atom,[{generated,true},{location,{344,14}}],badrecord},
                {var,{344,6},rec4}]}]}]}]}]},
      {var,{344,26},'State'}]}]}]}.
{function,
 {346,1},
 amb_assign_last,3,
 [{clause,
   {346,1},
   [{var,{346,1},'_'},{var,{346,1},'_'},{var,{346,1},'_'}],
   [[{call,
      {346,1},
      {remote,{346,1},{atom,{346,1},fake},{atom,{346,1},is_beam_bif_info}},
      []}]],
   [{debug_line,346,124},{atom,{346,1},ignore}]},
  {clause,
   {346,1},
   [{match,
     {346,17},
     {tuple,
      {346,17},
      [{atom,{346,17},b_ret},{var,{346,17},'_'},{var,{346,28},'Arg0'}]},
     {var,{346,34},'T'}},
    {var,{346,37},'Lbl'},
    {var,{346,42},'State0'}],
   [],
   [{debug_line,347,125},
    {match,
     {347,5},
     {tuple,{347,5},[{var,{347,6},'Arg'},{var,{347,11},'State'}]},
     {call,
      {347,20},
      {atom,{347,20},amb_get_alias},
      [{var,{347,34},'Arg0'},{var,{347,40},'Lbl'},{var,{347,45},'State0'}]}},
    {debug_line,348,126},
    {tuple,
     {348,5},
     [{block,
       {348,6},
       [{match,{348,6},{var,{348,6},rec5},{var,{348,6},'T'}},
        {'case',
         {348,14},
         {var,{348,6},rec5},
         [{clause,
           {348,14},
           [{tuple,
             {348,14},
             [{atom,{348,14},b_ret},{var,{348,14},'_'},{var,{348,14},'_'}]}],
           [],
           [{call,
             {348,14},
             {remote,
              {348,14},
              {atom,{348,14},erlang},
              {atom,{348,14},setelement}},
             [{integer,{348,14},3},{var,{348,6},rec5},{var,{348,18},'Arg'}]}]},
          {clause,
           [{generated,true},{location,{348,14}}],
           [{var,[{generated,true},{location,{348,14}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{348,14}}],
             {remote,
              [{generated,true},{location,{348,14}}],
              {atom,[{generated,true},{location,{348,14}}],erlang},
              {atom,[{generated,true},{location,{348,14}}],error}},
             [{tuple,
               [{generated,true},{location,{348,14}}],
               [{atom,[{generated,true},{location,{348,14}}],badrecord},
                {var,{348,6},rec5}]}]}]}]}]},
      {var,{348,24},'State'}]}]},
  {clause,
   {349,1},
   [{match,
     {349,17},
     {tuple,
      {349,17},
      [{atom,{349,17},b_switch},
       {var,{349,17},'_'},
       {var,{349,31},'Arg0'},
       {var,{349,17},'_'},
       {var,{349,17},'_'}]},
     {var,{349,37},'T'}},
    {var,{349,40},'Lbl'},
    {var,{349,45},'State0'}],
   [],
   [{debug_line,350,127},
    {match,
     {350,5},
     {tuple,{350,5},[{var,{350,6},'Arg'},{var,{350,11},'State'}]},
     {call,
      {350,20},
      {atom,{350,20},amb_get_alias},
      [{var,{350,34},'Arg0'},{var,{350,40},'Lbl'},{var,{350,45},'State0'}]}},
    {debug_line,351,128},
    {tuple,
     {351,5},
     [{block,
       {351,6},
       [{match,{351,6},{var,{351,6},rec6},{var,{351,6},'T'}},
        {'case',
         {351,17},
         {var,{351,6},rec6},
         [{clause,
           {351,17},
           [{tuple,
             {351,17},
             [{atom,{351,17},b_switch},
              {var,{351,17},'_'},
              {var,{351,17},'_'},
              {var,{351,17},'_'},
              {var,{351,17},'_'}]}],
           [],
           [{call,
             {351,17},
             {remote,
              {351,17},
              {atom,{351,17},erlang},
              {atom,{351,17},setelement}},
             [{integer,{351,17},3},{var,{351,6},rec6},{var,{351,21},'Arg'}]}]},
          {clause,
           [{generated,true},{location,{351,17}}],
           [{var,[{generated,true},{location,{351,17}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{351,17}}],
             {remote,
              [{generated,true},{location,{351,17}}],
              {atom,[{generated,true},{location,{351,17}}],erlang},
              {atom,[{generated,true},{location,{351,17}}],error}},
             [{tuple,
               [{generated,true},{location,{351,17}}],
               [{atom,[{generated,true},{location,{351,17}}],badrecord},
                {var,{351,6},rec6}]}]}]}]}]},
      {var,{351,27},'State'}]}]},
  {clause,
   {352,1},
   [{match,
     {352,17},
     {tuple,
      {352,17},
      [{atom,{352,17},b_br},
       {var,{352,17},'_'},
       {var,{352,28},'Arg0'},
       {var,{352,17},'_'},
       {var,{352,17},'_'}]},
     {var,{352,34},'T'}},
    {var,{352,37},'Lbl'},
    {var,{352,42},'State0'}],
   [],
   [{debug_line,353,129},
    {match,
     {353,5},
     {tuple,{353,5},[{var,{353,6},'Arg'},{var,{353,11},'State'}]},
     {call,
      {353,20},
      {atom,{353,20},amb_get_alias},
      [{var,{353,34},'Arg0'},{var,{353,40},'Lbl'},{var,{353,45},'State0'}]}},
    {debug_line,354,130},
    {tuple,
     {354,5},
     [{block,
       {354,6},
       [{match,{354,6},{var,{354,6},rec7},{var,{354,6},'T'}},
        {'case',
         {354,13},
         {var,{354,6},rec7},
         [{clause,
           {354,13},
           [{tuple,
             {354,13},
             [{atom,{354,13},b_br},
              {var,{354,13},'_'},
              {var,{354,13},'_'},
              {var,{354,13},'_'},
              {var,{354,13},'_'}]}],
           [],
           [{call,
             {354,13},
             {remote,
              {354,13},
              {atom,{354,13},erlang},
              {atom,{354,13},setelement}},
             [{integer,{354,13},3},{var,{354,6},rec7},{var,{354,18},'Arg'}]}]},
          {clause,
           [{generated,true},{location,{354,13}}],
           [{var,[{generated,true},{location,{354,13}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{354,13}}],
             {remote,
              [{generated,true},{location,{354,13}}],
              {atom,[{generated,true},{location,{354,13}}],erlang},
              {atom,[{generated,true},{location,{354,13}}],error}},
             [{tuple,
               [{generated,true},{location,{354,13}}],
               [{atom,[{generated,true},{location,{354,13}}],badrecord},
                {var,{354,6},rec7}]}]}]}]}]},
      {var,{354,24},'State'}]}]}]}.
{function,
 {356,1},
 amb_get_alias,3,
 [{clause,
   {356,1},
   [{var,{356,1},'_'},{var,{356,1},'_'},{var,{356,1},'_'}],
   [[{call,
      {356,1},
      {remote,{356,1},{atom,{356,1},fake},{atom,{356,1},is_beam_bif_info}},
      []}]],
   [{debug_line,356,131},{atom,{356,1},ignore}]},
  {clause,
   {356,1},
   [{match,
     {356,15},
     {tuple,{356,15},[{atom,{356,15},b_var},{var,{356,15},'_'}]},
     {var,{356,24},'Arg'}},
    {var,{356,29},'Lbl'},
    {var,{356,34},'State'}],
   [],
   [{debug_line,357,132},
    {'case',
     {357,5},
     {call,
      {357,10},
      {remote,{357,14},{atom,{357,10},maps},{atom,{357,15},find}},
      [{var,{357,20},'Arg'},
       {block,0,
        [{'case',
          {357,25},
          {var,{357,25},'State'},
          [{clause,
            [{generated,true},{location,{357,25}}],
            [{tuple,
              [{generated,true},{location,{357,25}}],
              [{atom,{357,25},amb},
               {var,{357,25},'_'},
               {var,{357,25},rec8},
               {var,{357,25},'_'},
               {var,{357,25},'_'}]}],
            [],
            [{var,{357,25},rec8}]},
           {clause,
            [{generated,true},{location,{357,25}}],
            [{var,{357,25},rec8}],
            [],
            [{call,
              [{generated,true},{location,{357,25}}],
              {remote,
               [{generated,true},{location,{357,25}}],
               {atom,[{generated,true},{location,{357,25}}],erlang},
               {atom,[{generated,true},{location,{357,25}}],error}},
              [{tuple,
                [{generated,true},{location,{357,25}}],
                [{atom,[{generated,true},{location,{357,25}}],badrecord},
                 {var,{357,25},rec8}]}]}]}]}]}]},
     [{clause,
       {358,9},
       [{tuple,
         {358,9},
         [{atom,{358,10},ok},
          {tuple,
           {358,14},
           [{var,{358,15},'AliasAfter'},{var,{358,27},'Context'}]}]}],
       [],
       [{debug_line,361,133},
        {match,
         {361,13},
         {var,{361,13},'Dominators'},
         {call,
          {361,26},
          {remote,{361,30},{atom,{361,26},maps},{atom,{361,31},get}},
          [{var,{361,35},'Lbl'},
           {block,0,
            [{'case',
              {361,40},
              {var,{361,40},'State'},
              [{clause,
                [{generated,true},{location,{361,40}}],
                [{tuple,
                  [{generated,true},{location,{361,40}}],
                  [{atom,{361,40},amb},
                   {var,{361,40},rec9},
                   {var,{361,40},'_'},
                   {var,{361,40},'_'},
                   {var,{361,40},'_'}]}],
                [],
                [{var,{361,40},rec9}]},
               {clause,
                [{generated,true},{location,{361,40}}],
                [{var,{361,40},rec9}],
                [],
                [{call,
                  [{generated,true},{location,{361,40}}],
                  {remote,
                   [{generated,true},{location,{361,40}}],
                   {atom,[{generated,true},{location,{361,40}}],erlang},
                   {atom,[{generated,true},{location,{361,40}}],error}},
                  [{tuple,
                    [{generated,true},{location,{361,40}}],
                    [{atom,[{generated,true},{location,{361,40}}],badrecord},
                     {var,{361,40},rec9}]}]}]}]}]}]}},
        {debug_line,362,134},
        {'case',
         {362,13},
         {call,
          {362,18},
          {remote,{362,18},{atom,{362,18},lists},{atom,{362,18},member}},
          [{var,{362,25},'AliasAfter'},{var,{362,37},'Dominators'}]},
         [{clause,
           {363,17},
           [{atom,{363,17},true}],
           [],
           [{debug_line,363,135},
            {call,
             {363,25},
             {atom,{363,25},amb_create_alias},
             [{var,{363,42},'Arg'},
              {var,{363,47},'Context'},
              {var,{363,56},'Lbl'},
              {var,{363,61},'State'}]}]},
          {clause,
           {364,17},
           [{atom,{364,17},false}],
           [],
           [{debug_line,364,136},
            {tuple,
             {364,26},
             [{var,{364,27},'Arg'},{var,{364,32},'State'}]}]}]}]},
      {clause,
       {366,9},
       [{atom,{366,9},error}],
       [],
       [{debug_line,367,137},
        {tuple,{367,13},[{var,{367,14},'Arg'},{var,{367,19},'State'}]}]}]}]},
  {clause,
   {369,1},
   [{match,
     {369,15},
     {tuple,
      {369,15},
      [{atom,{369,15},b_remote},
       {var,{369,29},'Mod0'},
       {var,{369,39},'Name0'},
       {var,{369,15},'_'}]},
     {var,{369,46},'Arg0'}},
    {var,{369,52},'Lbl'},
    {var,{369,57},'State0'}],
   [],
   [{debug_line,370,138},
    {match,
     {370,5},
     {tuple,{370,5},[{var,{370,6},'Mod'},{var,{370,11},'State1'}]},
     {call,
      {370,21},
      {atom,{370,21},amb_get_alias},
      [{var,{370,35},'Mod0'},{var,{370,41},'Lbl'},{var,{370,46},'State0'}]}},
    {debug_line,371,139},
    {match,
     {371,5},
     {tuple,{371,5},[{var,{371,6},'Name'},{var,{371,12},'State'}]},
     {call,
      {371,21},
      {atom,{371,21},amb_get_alias},
      [{var,{371,35},'Name0'},{var,{371,42},'Lbl'},{var,{371,47},'State1'}]}},
    {debug_line,372,140},
    {match,
     {372,5},
     {var,{372,5},'Arg'},
     {block,
      {372,11},
      [{match,{372,11},{var,{372,11},rec10},{var,{372,11},'Arg0'}},
       {'case',
        {372,25},
        {var,{372,11},rec10},
        [{clause,
          {372,25},
          [{tuple,
            {372,25},
            [{atom,{372,25},b_remote},
             {var,{372,25},'_'},
             {var,{372,25},'_'},
             {var,{372,25},'_'}]}],
          [],
          [{call,
            {372,25},
            {remote,
             {372,25},
             {atom,{372,25},erlang},
             {atom,{372,25},setelement}},
            [{integer,{372,25},2},
             {call,
              {372,33},
              {remote,
               {372,33},
               {atom,{372,33},erlang},
               {atom,{372,33},setelement}},
              [{integer,{372,33},3},
               {var,{372,11},rec10},
               {var,{372,38},'Name'}]},
             {var,{372,29},'Mod'}]}]},
         {clause,
          [{generated,true},{location,{372,25}}],
          [{var,[{generated,true},{location,{372,25}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{372,25}}],
            {remote,
             [{generated,true},{location,{372,25}}],
             {atom,[{generated,true},{location,{372,25}}],erlang},
             {atom,[{generated,true},{location,{372,25}}],error}},
            [{tuple,
              [{generated,true},{location,{372,25}}],
              [{atom,[{generated,true},{location,{372,25}}],badrecord},
               {var,{372,11},rec10}]}]}]}]}]}},
    {debug_line,373,141},
    {tuple,{373,5},[{var,{373,6},'Arg'},{var,{373,11},'State'}]}]},
  {clause,
   {374,1},
   [{var,{374,15},'Arg'},{var,{374,20},'_Lbl'},{var,{374,26},'State'}],
   [],
   [{debug_line,375,142},
    {tuple,{375,5},[{var,{375,6},'Arg'},{var,{375,11},'State'}]}]}]}.
{function,
 {377,1},
 amb_create_alias,4,
 [{clause,
   {377,1},
   [{var,{377,1},'_'},{var,{377,1},'_'},{var,{377,1},'_'},{var,{377,1},'_'}],
   [[{call,
      {377,1},
      {remote,{377,1},{atom,{377,1},fake},{atom,{377,1},is_beam_bif_info}},
      []}]],
   [{debug_line,377,143},{atom,{377,1},ignore}]},
  {clause,
   {377,1},
   [{match,
     {377,18},
     {tuple,{377,18},[{atom,{377,18},b_var},{var,{377,18},'_'}]},
     {var,{377,27},'Arg0'}},
    {var,{377,33},'Context'},
    {var,{377,42},'Lbl'},
    {var,{377,47},'State0'}],
   [],
   [{debug_line,378,144},
    {match,
     {378,5},
     {var,{378,5},'Dominators'},
     {call,
      {378,18},
      {remote,{378,22},{atom,{378,18},maps},{atom,{378,23},get}},
      [{var,{378,27},'Lbl'},
       {block,0,
        [{'case',
          {378,32},
          {var,{378,32},'State0'},
          [{clause,
            [{generated,true},{location,{378,32}}],
            [{tuple,
              [{generated,true},{location,{378,32}}],
              [{atom,{378,32},amb},
               {var,{378,32},rec11},
               {var,{378,32},'_'},
               {var,{378,32},'_'},
               {var,{378,32},'_'}]}],
            [],
            [{var,{378,32},rec11}]},
           {clause,
            [{generated,true},{location,{378,32}}],
            [{var,{378,32},rec11}],
            [],
            [{call,
              [{generated,true},{location,{378,32}}],
              {remote,
               [{generated,true},{location,{378,32}}],
               {atom,[{generated,true},{location,{378,32}}],erlang},
               {atom,[{generated,true},{location,{378,32}}],error}},
              [{tuple,
                [{generated,true},{location,{378,32}}],
                [{atom,[{generated,true},{location,{378,32}}],badrecord},
                 {var,{378,32},rec11}]}]}]}]}]}]}},
    {debug_line,379,145},
    {match,
     {379,5},
     {var,{379,5},'Promotions0'},
     {'case',
      {379,19},
      {var,{379,19},'State0'},
      [{clause,
        [{generated,true},{location,{379,19}}],
        [{tuple,
          [{generated,true},{location,{379,19}}],
          [{atom,{379,19},amb},
           {var,{379,19},'_'},
           {var,{379,19},'_'},
           {var,{379,19},'_'},
           {var,{379,19},rec12}]}],
        [],
        [{var,{379,19},rec12}]},
       {clause,
        [{generated,true},{location,{379,19}}],
        [{var,{379,19},rec12}],
        [],
        [{call,
          [{generated,true},{location,{379,19}}],
          {remote,
           [{generated,true},{location,{379,19}}],
           {atom,[{generated,true},{location,{379,19}}],erlang},
           {atom,[{generated,true},{location,{379,19}}],error}},
          [{tuple,
            [{generated,true},{location,{379,19}}],
            [{atom,[{generated,true},{location,{379,19}}],badrecord},
             {var,{379,19},rec12}]}]}]}]}},
    {debug_line,381,146},
    {match,
     {381,5},
     {var,{381,5},'PrevPromotions'},
     {lc,
      {382,9},
      {block,0,
       [{debug_line,382,147},
        {call,
         {382,10},
         {remote,{382,14},{atom,{382,10},maps},{atom,{382,15},get}},
         [{block,0,
           [{tuple,{382,19},[{var,{382,20},'Dom'},{var,{382,25},'Arg0'}]}]},
          {var,{382,32},'Promotions0'}]}]},
      [{block,0,[{debug_line,383,148},{atom,{383,20},true}]},
       {generate,{383,17},{var,{383,13},'Dom'},{var,{383,20},'Dominators'}},
       {block,0,[{atom,{383,32},true}]},
       {call,
        {383,32},
        {remote,{383,32},{atom,{383,32},erlang},{atom,{383,32},is_map_key}},
        [{block,0,
          [{tuple,{383,43},[{var,{383,44},'Dom'},{var,{383,49},'Arg0'}]}]},
         {var,{383,56},'Promotions0'}]}]}},
    {debug_line,385,149},
    {'case',
     {385,5},
     {var,{385,10},'PrevPromotions'},
     [{clause,
       {386,9},
       [{cons,{386,9},{var,{386,10},'_'},{var,{386,12},'_'}}],
       [],
       [{debug_line,390,150},
        {match,
         {390,13},
         {tuple,
          {390,13},
          [{atom,{390,13},b_set},
           {var,{390,13},'_'},
           {var,{390,24},'Alias'},
           {var,{390,13},'_'},
           {var,{390,13},'_'}]},
         {call,
          {390,33},
          {remote,{390,33},{atom,{390,33},lists},{atom,{390,33},max}},
          [{var,{390,37},'PrevPromotions'}]}},
        {debug_line,391,151},
        {tuple,{391,13},[{var,{391,14},'Alias'},{var,{391,21},'State0'}]}]},
      {clause,
       {392,9},
       [{nil,{392,9}}],
       [],
       [{debug_line,396,152},
        {match,
         {396,13},
         {var,{396,13},'Counter'},
         {'case',
          {396,23},
          {var,{396,23},'State0'},
          [{clause,
            [{generated,true},{location,{396,23}}],
            [{tuple,
              [{generated,true},{location,{396,23}}],
              [{atom,{396,23},amb},
               {var,{396,23},'_'},
               {var,{396,23},'_'},
               {var,{396,23},rec13},
               {var,{396,23},'_'}]}],
            [],
            [{var,{396,23},rec13}]},
           {clause,
            [{generated,true},{location,{396,23}}],
            [{var,{396,23},rec13}],
            [],
            [{call,
              [{generated,true},{location,{396,23}}],
              {remote,
               [{generated,true},{location,{396,23}}],
               {atom,[{generated,true},{location,{396,23}}],erlang},
               {atom,[{generated,true},{location,{396,23}}],error}},
              [{tuple,
                [{generated,true},{location,{396,23}}],
                [{atom,[{generated,true},{location,{396,23}}],badrecord},
                 {var,{396,23},rec13}]}]}]}]}},
        {debug_line,397,153},
        {match,
         {397,13},
         {var,{397,13},'Alias'},
         {tuple,{397,21},[{atom,{397,21},b_var},{var,{397,33},'Counter'}]}},
        {debug_line,398,154},
        {match,
         {398,13},
         {var,{398,13},'Promotion'},
         {tuple,
          {398,25},
          [{atom,{398,25},b_set},
           {map,{398,25},[]},
           {var,{398,51},'Alias'},
           {atom,{398,35},bs_get_tail},
           {cons,{398,62},{var,{398,63},'Context'},{nil,{398,70}}}]}},
        {debug_line,400,155},
        {match,
         {400,13},
         {var,{400,13},'Promotions'},
         {call,
          {400,26},
          {remote,{400,30},{atom,{400,26},maps},{atom,{400,31},put}},
          [{block,0,
            [{tuple,{400,35},[{var,{400,36},'Lbl'},{var,{400,41},'Arg0'}]}]},
           {var,{400,48},'Promotion'},
           {var,{400,59},'Promotions0'}]}},
        {debug_line,401,156},
        {match,
         {401,13},
         {var,{401,13},'State'},
         {block,
          {401,21},
          [{match,
            {401,56},
            {var,{401,56},rec14},
            {op,{401,67},'+',{var,{401,60},'Counter'},{integer,{401,68},1}}},
           {match,{401,21},{var,{401,21},rec15},{var,{401,21},'State0'}},
           {'case',
            {401,56},
            {var,{401,21},rec15},
            [{clause,
              {401,56},
              [{tuple,
                {401,56},
                [{atom,{401,56},amb},
                 {var,{401,56},'_'},
                 {var,{401,56},'_'},
                 {var,{401,56},'_'},
                 {var,{401,56},'_'}]}],
              [],
              [{call,
                {401,56},
                {remote,
                 {401,56},
                 {atom,{401,56},erlang},
                 {atom,{401,56},setelement}},
                [{integer,{401,56},4},
                 {call,
                  {401,33},
                  {remote,
                   {401,33},
                   {atom,{401,33},erlang},
                   {atom,{401,33},setelement}},
                  [{integer,{401,33},5},
                   {var,{401,21},rec15},
                   {var,{401,44},'Promotions'}]},
                 {var,{401,56},rec14}]}]},
             {clause,
              [{generated,true},{location,{401,56}}],
              [{var,[{generated,true},{location,{401,56}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{401,56}}],
                {remote,
                 [{generated,true},{location,{401,56}}],
                 {atom,[{generated,true},{location,{401,56}}],erlang},
                 {atom,[{generated,true},{location,{401,56}}],error}},
                [{tuple,
                  [{generated,true},{location,{401,56}}],
                  [{atom,[{generated,true},{location,{401,56}}],badrecord},
                   {var,{401,21},rec15}]}]}]}]}]}},
        {debug_line,403,157},
        {tuple,
         {403,13},
         [{var,{403,14},'Alias'},{var,{403,21},'State'}]}]}]}]}]}.
{function,
 {406,1},
 amb_insert_promotions,2,
 [{clause,
   {406,1},
   [{var,{406,1},'_'},{var,{406,1},'_'}],
   [[{call,
      {406,1},
      {remote,{406,1},{atom,{406,1},fake},{atom,{406,1},is_beam_bif_info}},
      []}]],
   [{debug_line,406,158},{atom,{406,1},ignore}]},
  {clause,
   {406,1},
   [{var,{406,23},'Blocks0'},{var,{406,32},'State'}],
   [],
   [{debug_line,407,159},
    {match,
     {407,5},
     {var,{407,5},'F'},
     {'fun',
      {407,9},
      {clauses,
       [{clause,
         {407,12},
         [{tuple,
           {407,13},
           [{var,{407,14},'Lbl'},
            {tuple,{407,19},[{atom,{407,19},b_var},{var,{407,19},'_'}]}]},
          {var,{407,30},'Promotion'},
          {var,{407,41},'Blocks'}],
         [],
         [{debug_line,408,160},
          {match,
           {408,17},
           {var,{408,17},'Block'},
           {call,
            {408,25},
            {remote,{408,29},{atom,{408,25},maps},{atom,{408,30},get}},
            [{var,{408,34},'Lbl'},{var,{408,39},'Blocks'}]}},
          {debug_line,410,161},
          {match,
           {410,17},
           {var,{410,17},'Alias'},
           {'case',
            {410,25},
            {var,{410,25},'Promotion'},
            [{clause,
              [{generated,true},{location,{410,25}}],
              [{tuple,
                [{generated,true},{location,{410,25}}],
                [{atom,{410,25},b_set},
                 {var,{410,25},'_'},
                 {var,{410,25},rec16},
                 {var,{410,25},'_'},
                 {var,{410,25},'_'}]}],
              [],
              [{var,{410,25},rec16}]},
             {clause,
              [{generated,true},{location,{410,25}}],
              [{var,{410,25},rec16}],
              [],
              [{call,
                [{generated,true},{location,{410,25}}],
                {remote,
                 [{generated,true},{location,{410,25}}],
                 {atom,[{generated,true},{location,{410,25}}],erlang},
                 {atom,[{generated,true},{location,{410,25}}],error}},
                [{tuple,
                  [{generated,true},{location,{410,25}}],
                  [{atom,[{generated,true},{location,{410,25}}],badrecord},
                   {var,{410,25},rec16}]}]}]}]}},
          {debug_line,411,162},
          {match,
           {411,17},
           {tuple,{411,17},[{var,{411,18},'Before'},{var,{411,26},'After'}]},
           {call,
            {411,35},
            {remote,{411,35},{atom,{411,35},lists},{atom,{411,35},splitwith}},
            [{block,0,
              [{debug_line,412,163},
               {'fun',
                {412,37},
                {clauses,
                 [{clause,
                   {412,40},
                   [{tuple,
                     {412,41},
                     [{atom,{412,41},b_set},
                      {var,{412,41},'_'},
                      {var,{412,41},'_'},
                      {var,{412,41},'_'},
                      {var,{412,53},'Args'}]}],
                   [],
                   [{debug_line,413,164},
                    {op,
                     {413,45},
                     'not',
                     {call,
                      {413,49},
                      {atom,{413,49},is_var_in_args},
                      [{var,{413,64},'Alias'},{var,{413,71},'Args'}]}}]}]}}]},
             {block,0,
              [{debug_line,414,165},
               {'case',
                {414,42},
                {var,{414,42},'Block'},
                [{clause,
                  [{generated,true},{location,{414,42}}],
                  [{tuple,
                    [{generated,true},{location,{414,42}}],
                    [{atom,{414,42},b_blk},
                     {var,{414,42},'_'},
                     {var,{414,42},rec17},
                     {var,{414,42},'_'}]}],
                  [],
                  [{var,{414,42},rec17}]},
                 {clause,
                  [{generated,true},{location,{414,42}}],
                  [{var,{414,42},rec17}],
                  [],
                  [{call,
                    [{generated,true},{location,{414,42}}],
                    {remote,
                     [{generated,true},{location,{414,42}}],
                     {atom,[{generated,true},{location,{414,42}}],erlang},
                     {atom,[{generated,true},{location,{414,42}}],error}},
                    [{tuple,
                      [{generated,true},{location,{414,42}}],
                      [{atom,[{generated,true},{location,{414,42}}],badrecord},
                       {var,{414,42},rec17}]}]}]}]}]}]}},
          {debug_line,415,166},
          {match,
           {415,17},
           {var,{415,17},'Is'},
           {op,
            {415,29},
            '++',
            {var,{415,22},'Before'},
            {cons,
             {415,32},
             {var,{415,33},'Promotion'},
             {var,{415,45},'After'}}}},
          {debug_line,417,167},
          {call,
           {417,17},
           {remote,{417,21},{atom,{417,17},maps},{atom,{417,22},put}},
           [{var,{417,26},'Lbl'},
            {block,0,
             [{block,
               {417,31},
               [{match,{417,31},{var,{417,31},rec18},{var,{417,31},'Block'}},
                {'case',
                 {417,43},
                 {var,{417,31},rec18},
                 [{clause,
                   {417,43},
                   [{tuple,
                     {417,43},
                     [{atom,{417,43},b_blk},
                      {var,{417,43},'_'},
                      {var,{417,43},'_'},
                      {var,{417,43},'_'}]}],
                   [],
                   [{call,
                     {417,43},
                     {remote,
                      {417,43},
                      {atom,{417,43},erlang},
                      {atom,{417,43},setelement}},
                     [{integer,{417,43},3},
                      {var,{417,31},rec18},
                      {var,{417,46},'Is'}]}]},
                  {clause,
                   [{generated,true},{location,{417,43}}],
                   [{var,[{generated,true},{location,{417,43}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{417,43}}],
                     {remote,
                      [{generated,true},{location,{417,43}}],
                      {atom,[{generated,true},{location,{417,43}}],erlang},
                      {atom,[{generated,true},{location,{417,43}}],error}},
                     [{tuple,
                       [{generated,true},{location,{417,43}}],
                       [{atom,
                         [{generated,true},{location,{417,43}}],
                         badrecord},
                        {var,{417,31},rec18}]}]}]}]}]}]},
            {var,{417,51},'Blocks'}]}]}]}}},
    {debug_line,419,168},
    {call,
     {419,5},
     {remote,{419,9},{atom,{419,5},maps},{atom,{419,10},fold}},
     [{var,{419,15},'F'},
      {var,{419,18},'Blocks0'},
      {block,0,
       [{'case',
         {419,27},
         {var,{419,27},'State'},
         [{clause,
           [{generated,true},{location,{419,27}}],
           [{tuple,
             [{generated,true},{location,{419,27}}],
             [{atom,{419,27},amb},
              {var,{419,27},'_'},
              {var,{419,27},'_'},
              {var,{419,27},'_'},
              {var,{419,27},rec19}]}],
           [],
           [{var,{419,27},rec19}]},
          {clause,
           [{generated,true},{location,{419,27}}],
           [{var,{419,27},rec19}],
           [],
           [{call,
             [{generated,true},{location,{419,27}}],
             {remote,
              [{generated,true},{location,{419,27}}],
              {atom,[{generated,true},{location,{419,27}}],erlang},
              {atom,[{generated,true},{location,{419,27}}],error}},
             [{tuple,
               [{generated,true},{location,{419,27}}],
               [{atom,[{generated,true},{location,{419,27}}],badrecord},
                {var,{419,27},rec19}]}]}]}]}]}]}]}]}.
{function,{421,1},
          is_var_in_args,2,
          [{clause,{421,1},
                   [{var,{421,1},'_'},{var,{421,1},'_'}],
                   [[{call,{421,1},
                           {remote,{421,1},
                                   {atom,{421,1},fake},
                                   {atom,{421,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,421,169},{atom,{421,1},ignore}]},
           {clause,{421,1},
                   [{var,{421,16},'Var'},
                    {cons,{421,21},{var,{421,22},'Var'},{var,{421,28},'_'}}],
                   [],
                   [{debug_line,421,170},{atom,{421,35},true}]},
           {clause,{422,1},
                   [{var,{422,16},'Var'},
                    {cons,{422,21},
                          {tuple,{422,22},
                                 [{atom,{422,22},b_remote},
                                  {var,{422,22},'_'},
                                  {var,{422,37},'Var'},
                                  {var,{422,22},'_'}]},
                          {var,{422,44},'_'}}],
                   [],
                   [{debug_line,422,171},{atom,{422,51},true}]},
           {clause,{423,1},
                   [{var,{423,16},'Var'},
                    {cons,{423,21},
                          {tuple,{423,22},
                                 [{atom,{423,22},b_remote},
                                  {var,{423,36},'Var'},
                                  {var,{423,22},'_'},
                                  {var,{423,22},'_'}]},
                          {var,{423,43},'_'}}],
                   [],
                   [{debug_line,423,172},{atom,{423,50},true}]},
           {clause,{424,1},
                   [{var,{424,16},'Var'},
                    {cons,{424,21},{var,{424,22},'_'},{var,{424,26},'Args'}}],
                   [],
                   [{debug_line,424,173},
                    {call,{424,36},
                          {atom,{424,36},is_var_in_args},
                          [{var,{424,51},'Var'},{var,{424,56},'Args'}]}]},
           {clause,{425,1},
                   [{var,{425,16},'_Var'},{nil,{425,22}}],
                   [],
                   [{debug_line,425,174},{atom,{425,29},false}]}]}.
{attribute,
    {438,2},
    type,
    {prior_match_map,
        {type,
            {439,9},
            map,
            [{type,
                 {439,31},
                 map_field_assoc,
                 [{ann_type,
                      {439,12},
                      [{var,{439,12},'Binary'},
                       {type,{439,22},record,[{atom,{439,23},b_var}]}]},
                  {type,
                      {440,22},
                      list,
                      [{type,
                           {440,23},
                           tuple,
                           [{ann_type,
                                {442,25},
                                [{var,{442,25},'ValidAfter'},
                                 {remote_type,
                                     {442,39},
                                     [{atom,{442,39},beam_ssa},
                                      {atom,{442,48},label},
                                      []]}]},
                            {ann_type,
                                {443,25},
                                [{var,{443,25},'Context'},
                                 {type,
                                     {443,36},
                                     record,
                                     [{atom,{443,37},b_var}]}]}]}]}]}]},
        []}}.
{attribute,
    {445,2},
    record,
    {cm,[{typed_record_field,
             {record_field,{445,15},{atom,{445,15},definitions}},
             {remote_type,
                 {445,30},
                 [{atom,{445,30},beam_ssa},
                  {atom,{445,39},definition_map},
                  []]}},
         {typed_record_field,
             {record_field,{446,15},{atom,{446,15},dominators}},
             {remote_type,
                 {446,29},
                 [{atom,{446,29},beam_ssa},{atom,{446,38},dominator_map},[]]}},
         {typed_record_field,
             {record_field,{447,15},{atom,{447,15},blocks}},
             {remote_type,
                 {447,25},
                 [{atom,{447,25},beam_ssa},{atom,{447,34},block_map},[]]}},
         {typed_record_field,
             {record_field,
                 {448,15},
                 {atom,{448,15},match_aliases},
                 {map,{448,31},[]}},
             {user_type,{448,38},match_alias_map,[]}},
         {typed_record_field,
             {record_field,
                 {449,15},
                 {atom,{449,15},prior_matches},
                 {map,{449,31},[]}},
             {user_type,{449,38},prior_match_map,[]}},
         {typed_record_field,
             {record_field,{450,15},{atom,{450,15},renames},{map,{450,25},[]}},
             {remote_type,
                 {450,32},
                 [{atom,{450,32},beam_ssa},{atom,{450,41},rename_map},[]]}}]}}.
{function,
    {452,1},
    combine_matches,1,
    [{clause,
         {452,1},
         [{var,{452,1},'_'}],
         [[{call,
               {452,1},
               {remote,
                   {452,1},
                   {atom,{452,1},fake},
                   {atom,{452,1},is_beam_bif_info}},
               []}]],
         [{debug_line,452,175},{atom,{452,1},ignore}]},
     {clause,
         {452,1},
         [{tuple,{452,17},[{var,{452,18},'Fs0'},{var,{452,23},'ModInfo'}]}],
         [],
         [{debug_line,453,176},
          {match,
              {453,5},
              {var,{453,5},'Fs'},
              {lc,{453,10},
                  {block,0,
                      [{call,
                           {453,11},
                           {atom,{453,11},combine_matches},
                           [{var,{453,27},'F'},{var,{453,30},'ModInfo'}]}]},
                  [{block,0,[{atom,{453,47},true}]},
                   {generate,
                       {453,44},
                       {var,{453,42},'F'},
                       {var,{453,47},'Fs0'}}]}},
          {debug_line,454,177},
          {tuple,{454,5},[{var,{454,6},'Fs'},{var,{454,10},'ModInfo'}]}]}]}.
{function,
 {456,1},
 combine_matches,2,
 [{clause,
   {456,1},
   [{var,{456,1},'_'},{var,{456,1},'_'}],
   [[{call,
      {456,1},
      {remote,{456,1},{atom,{456,1},fake},{atom,{456,1},is_beam_bif_info}},
      []}]],
   [{debug_line,456,178},{atom,{456,1},ignore}]},
  {clause,
   {456,1},
   [{match,
     {456,17},
     {tuple,
      {456,17},
      [{atom,{456,17},b_function},
       {var,{456,17},'_'},
       {var,{456,17},'_'},
       {var,{456,32},'Blocks0'},
       {var,{456,44},'Counter0'}]},
     {var,{456,54},'F'}},
    {var,{456,57},'ModInfo'}],
   [],
   [{debug_line,457,179},
    {'case',
     {457,5},
     {call,
      {457,10},
      {atom,{457,10},funcinfo_get},
      [{var,{457,23},'F'},
       {atom,{457,26},has_bsm_ops},
       {var,{457,39},'ModInfo'}]},
     [{clause,
       {458,9},
       [{atom,{458,9},true}],
       [],
       [{debug_line,459,180},
        {match,
         {459,13},
         {var,{459,13},'RPO'},
         {call,
          {459,19},
          {remote,{459,27},{atom,{459,19},beam_ssa},{atom,{459,28},rpo}},
          [{var,{459,32},'Blocks0'}]}},
        {debug_line,460,181},
        {match,
         {460,13},
         {tuple,{460,13},[{var,{460,14},'Dominators'},{var,{460,26},'_'}]},
         {call,
          {460,31},
          {remote,
           {460,39},
           {atom,{460,31},beam_ssa},
           {atom,{460,40},dominators}},
          [{var,{460,51},'RPO'},{var,{460,56},'Blocks0'}]}},
        {debug_line,461,182},
        {match,
         {461,13},
         {tuple,{461,13},[{var,{461,14},'Blocks1'},{var,{461,23},'State'}]},
         {call,
          {462,17},
          {remote,
           {462,25},
           {atom,{462,17},beam_ssa},
           {atom,{462,26},mapfold_blocks}},
          [{block,0,
            [{debug_line,463,183},
             {'fun',
              {463,19},
              {clauses,
               [{clause,
                 {463,22},
                 [{var,{463,23},'Lbl'},
                  {match,
                   {463,28},
                   {tuple,
                    {463,28},
                    [{atom,{463,28},b_blk},
                     {var,{463,28},'_'},
                     {var,{463,38},'Is0'},
                     {var,{463,28},'_'}]},
                   {var,{463,43},'Block0'}},
                  {var,{463,51},'State0'}],
                 [],
                 [{debug_line,464,184},
                  {match,
                   {464,27},
                   {tuple,
                    {464,27},
                    [{var,{464,28},'Is'},{var,{464,32},'State'}]},
                   {call,
                    {464,41},
                    {atom,{464,41},cm_1},
                    [{var,{464,46},'Is0'},
                     {nil,{464,51}},
                     {var,{464,55},'Lbl'},
                     {var,{464,60},'State0'}]}},
                  {debug_line,465,185},
                  {tuple,
                   {465,27},
                   [{block,
                     {465,28},
                     [{match,
                       {465,28},
                       {var,{465,28},rec20},
                       {var,{465,28},'Block0'}},
                      {'case',
                       {465,41},
                       {var,{465,28},rec20},
                       [{clause,
                         {465,41},
                         [{tuple,
                           {465,41},
                           [{atom,{465,41},b_blk},
                            {var,{465,41},'_'},
                            {var,{465,41},'_'},
                            {var,{465,41},'_'}]}],
                         [],
                         [{call,
                           {465,41},
                           {remote,
                            {465,41},
                            {atom,{465,41},erlang},
                            {atom,{465,41},setelement}},
                           [{integer,{465,41},3},
                            {var,{465,28},rec20},
                            {var,{465,44},'Is'}]}]},
                        {clause,
                         [{generated,true},{location,{465,41}}],
                         [{var,[{generated,true},{location,{465,41}}],'_'}],
                         [],
                         [{call,
                           [{generated,true},{location,{465,41}}],
                           {remote,
                            [{generated,true},{location,{465,41}}],
                            {atom,
                             [{generated,true},{location,{465,41}}],
                             erlang},
                            {atom,
                             [{generated,true},{location,{465,41}}],
                             error}},
                           [{tuple,
                             [{generated,true},{location,{465,41}}],
                             [{atom,
                               [{generated,true},{location,{465,41}}],
                               badrecord},
                              {var,{465,28},rec20}]}]}]}]}]},
                    {var,{465,49},'State'}]}]}]}}]},
           {var,{467,19},'RPO'},
           {block,0,
            [{debug_line,468,186},
             {tuple,
              {468,19},
              [{atom,{468,19},cm},
               {call,
                {468,38},
                {remote,
                 {468,46},
                 {atom,{468,38},beam_ssa},
                 {atom,{468,47},definitions}},
                [{var,{468,59},'RPO'},{var,{468,64},'Blocks0'}]},
               {var,{469,37},'Dominators'},
               {var,{470,33},'Blocks0'},
               {map,{468,19},[]},
               {map,{468,19},[]},
               {map,{468,19},[]}]}]},
           {var,{471,19},'Blocks0'}]}},
        {debug_line,475,187},
        {match,
         {475,13},
         {var,{475,13},'Blocks2'},
         {call,
          {475,23},
          {remote,
           {475,31},
           {atom,{475,23},beam_ssa},
           {atom,{475,32},rename_vars}},
          [{block,0,
            [{'case',
              {475,44},
              {var,{475,44},'State'},
              [{clause,
                [{generated,true},{location,{475,44}}],
                [{tuple,
                  [{generated,true},{location,{475,44}}],
                  [{atom,{475,44},cm},
                   {var,{475,44},'_'},
                   {var,{475,44},'_'},
                   {var,{475,44},'_'},
                   {var,{475,44},'_'},
                   {var,{475,44},'_'},
                   {var,{475,44},rec21}]}],
                [],
                [{var,{475,44},rec21}]},
               {clause,
                [{generated,true},{location,{475,44}}],
                [{var,{475,44},rec21}],
                [],
                [{call,
                  [{generated,true},{location,{475,44}}],
                  {remote,
                   [{generated,true},{location,{475,44}}],
                   {atom,[{generated,true},{location,{475,44}}],erlang},
                   {atom,[{generated,true},{location,{475,44}}],error}},
                  [{tuple,
                    [{generated,true},{location,{475,44}}],
                    [{atom,[{generated,true},{location,{475,44}}],badrecord},
                     {var,{475,44},rec21}]}]}]}]}]},
           {var,{475,62},'RPO'},
           {var,{475,67},'Blocks1'}]}},
        {debug_line,481,188},
        {match,
         {481,13},
         {var,{481,13},'Blocks3'},
         {call,
          {481,23},
          {remote,
           {481,31},
           {atom,{481,23},beam_ssa},
           {atom,{481,32},trim_unreachable}},
          [{var,{481,49},'Blocks2'}]}},
        {debug_line,483,189},
        {match,
         {483,13},
         {var,{483,13},'Aliases'},
         {'case',
          {483,23},
          {var,{483,23},'State'},
          [{clause,
            [{generated,true},{location,{483,23}}],
            [{tuple,
              [{generated,true},{location,{483,23}}],
              [{atom,{483,23},cm},
               {var,{483,23},'_'},
               {var,{483,23},'_'},
               {var,{483,23},'_'},
               {var,{483,23},rec22},
               {var,{483,23},'_'},
               {var,{483,23},'_'}]}],
            [],
            [{var,{483,23},rec22}]},
           {clause,
            [{generated,true},{location,{483,23}}],
            [{var,{483,23},rec22}],
            [],
            [{call,
              [{generated,true},{location,{483,23}}],
              {remote,
               [{generated,true},{location,{483,23}}],
               {atom,[{generated,true},{location,{483,23}}],erlang},
               {atom,[{generated,true},{location,{483,23}}],error}},
              [{tuple,
                [{generated,true},{location,{483,23}}],
                [{atom,[{generated,true},{location,{483,23}}],badrecord},
                 {var,{483,23},rec22}]}]}]}]}},
        {debug_line,484,190},
        {match,
         {484,13},
         {tuple,{484,13},[{var,{484,14},'Blocks4'},{var,{484,23},'Counter'}]},
         {call,
          {484,34},
          {atom,{484,34},alias_matched_binaries},
          [{var,{484,57},'Blocks3'},
           {var,{484,66},'Counter0'},
           {var,{485,57},'Aliases'}]}},
        {debug_line,486,191},
        {match,
         {486,13},
         {var,{486,13},'Blocks'},
         {'if',
          {486,22},
          [{clause,
            {487,26},
            [],
            [[{op,
               {487,44},
               '=:=',
               {call,
                {487,26},
                {remote,
                 {487,26},
                 {atom,{487,26},erlang},
                 {atom,{487,26},map_size}},
                [{var,{487,35},'Aliases'}]},
               {integer,{487,48},0}}]],
            [{debug_line,489,192},{var,{489,30},'Blocks4'}]},
           {clause,
            {490,26},
            [],
            [[{atom,{490,26},true}]],
            [{debug_line,495,193},
             {call,
              {495,30},
              {remote,
               {495,38},
               {atom,{495,30},beam_ssa},
               {atom,{495,39},trim_unreachable}},
              [{var,{495,56},'Blocks4'}]}]}]}},
        {debug_line,497,194},
        {block,
         {497,13},
         [{match,{497,13},{var,{497,13},rec23},{var,{497,13},'F'}},
          {'case',
           {497,27},
           {var,{497,13},rec23},
           [{clause,
             {497,27},
             [{tuple,
               {497,27},
               [{atom,{497,27},b_function},
                {var,{497,27},'_'},
                {var,{497,27},'_'},
                {var,{497,27},'_'},
                {var,{497,27},'_'}]}],
             [],
             [{call,
               {497,27},
               {remote,
                {497,27},
                {atom,{497,27},erlang},
                {atom,{497,27},setelement}},
               [{integer,{497,27},4},
                {call,
                 {498,27},
                 {remote,
                  {498,27},
                  {atom,{498,27},erlang},
                  {atom,{498,27},setelement}},
                 [{integer,{498,27},5},
                  {var,{497,13},rec23},
                  {var,{498,31},'Counter'}]},
                {var,{497,30},'Blocks'}]}]},
            {clause,
             [{generated,true},{location,{497,27}}],
             [{var,[{generated,true},{location,{497,27}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{497,27}}],
               {remote,
                [{generated,true},{location,{497,27}}],
                {atom,[{generated,true},{location,{497,27}}],erlang},
                {atom,[{generated,true},{location,{497,27}}],error}},
               [{tuple,
                 [{generated,true},{location,{497,27}}],
                 [{atom,[{generated,true},{location,{497,27}}],badrecord},
                  {var,{497,13},rec23}]}]}]}]}]}]},
      {clause,
       {499,9},
       [{atom,{499,9},false}],
       [],
       [{debug_line,500,195},{var,{500,13},'F'}]}]}]}]}.
{function,
 {503,1},
 cm_1,4,
 [{clause,
   {503,1},
   [{var,{503,1},'_'},{var,{503,1},'_'},{var,{503,1},'_'},{var,{503,1},'_'}],
   [[{call,
      {503,1},
      {remote,{503,1},{atom,{503,1},fake},{atom,{503,1},is_beam_bif_info}},
      []}]],
   [{debug_line,503,196},{atom,{503,1},ignore}]},
  {clause,
   {503,1},
   [{match,
     {503,6},
     {cons,
      {503,6},
      {tuple,
       {503,7},
       [{atom,{503,7},b_set},
        {var,{503,7},'_'},
        {var,{504,19},'Ctx'},
        {atom,{503,18},bs_start_match},
        {cons,
         {505,20},
         {var,{505,21},'_'},
         {cons,{505,23},{var,{505,23},'Src'},{nil,{505,26}}}}]},
      {cons,
       {506,7},
       {tuple,
        {506,7},
        [{atom,{506,7},b_set},
         {var,{506,7},'_'},
         {var,{507,19},'Bool'},
         {tuple,{506,18},[{atom,{506,19},succeeded},{atom,{506,29},guard}]},
         {cons,{508,20},{var,{508,21},'Ctx'},{nil,{508,24}}}]},
       {nil,{508,27}}}},
     {var,{508,29},'MatchSeq'}},
    {var,{508,39},'Acc0'},
    {var,{508,45},'Lbl'},
    {var,{508,50},'State0'}],
   [],
   [{debug_line,509,197},
    {match,
     {509,5},
     {var,{509,5},'Acc'},
     {call,
      {509,11},
      {remote,{509,11},{atom,{509,11},lists},{atom,{509,11},reverse}},
      [{var,{509,19},'Acc0'}]}},
    {debug_line,510,198},
    {'case',
     {510,5},
     {call,
      {510,10},
      {atom,{510,10},is_tail_binary},
      [{var,{510,25},'Src'},
       {block,0,
        [{'case',
          {510,30},
          {var,{510,30},'State0'},
          [{clause,
            [{generated,true},{location,{510,30}}],
            [{tuple,
              [{generated,true},{location,{510,30}}],
              [{atom,{510,30},cm},
               {var,{510,30},rec24},
               {var,{510,30},'_'},
               {var,{510,30},'_'},
               {var,{510,30},'_'},
               {var,{510,30},'_'},
               {var,{510,30},'_'}]}],
            [],
            [{var,{510,30},rec24}]},
           {clause,
            [{generated,true},{location,{510,30}}],
            [{var,{510,30},rec24}],
            [],
            [{call,
              [{generated,true},{location,{510,30}}],
              {remote,
               [{generated,true},{location,{510,30}}],
               {atom,[{generated,true},{location,{510,30}}],erlang},
               {atom,[{generated,true},{location,{510,30}}],error}},
              [{tuple,
                [{generated,true},{location,{510,30}}],
                [{atom,[{generated,true},{location,{510,30}}],badrecord},
                 {var,{510,30},rec24}]}]}]}]}]}]},
     [{clause,
       {511,9},
       [{atom,{511,9},true}],
       [],
       [{debug_line,511,199},
        {call,
         {511,17},
         {atom,{511,17},cm_combine_tail},
         [{var,{511,33},'Src'},
          {var,{511,38},'Ctx'},
          {var,{511,43},'Bool'},
          {var,{511,49},'Acc'},
          {var,{511,54},'State0'}]}]},
      {clause,
       {512,9},
       [{atom,{512,9},false}],
       [],
       [{debug_line,512,200},
        {call,
         {512,18},
         {atom,{512,18},cm_handle_priors},
         [{var,{512,35},'Src'},
          {var,{512,40},'Ctx'},
          {var,{512,45},'Bool'},
          {var,{512,51},'Acc'},
          {var,{512,56},'MatchSeq'},
          {var,{512,66},'Lbl'},
          {var,{512,71},'State0'}]}]}]}]},
  {clause,
   {514,1},
   [{cons,{514,6},{var,{514,7},'I'},{var,{514,11},'Is'}},
    {var,{514,16},'Acc'},
    {var,{514,21},'Lbl'},
    {var,{514,26},'State'}],
   [],
   [{debug_line,515,201},
    {call,
     {515,5},
     {atom,{515,5},cm_1},
     [{var,{515,10},'Is'},
      {block,0,[{cons,{515,14},{var,{515,15},'I'},{var,{515,19},'Acc'}}]},
      {var,{515,25},'Lbl'},
      {var,{515,30},'State'}]}]},
  {clause,
   {516,1},
   [{nil,{516,6}},
    {var,{516,10},'Acc'},
    {var,{516,15},'_Lbl'},
    {var,{516,21},'State'}],
   [],
   [{debug_line,517,202},
    {tuple,
     {517,5},
     [{call,
       {517,6},
       {remote,{517,6},{atom,{517,6},lists},{atom,{517,6},reverse}},
       [{var,{517,14},'Acc'}]},
      {var,{517,20},'State'}]}]}]}.
{function,
 {521,1},
 cm_handle_priors,7,
 [{clause,
   {521,1},
   [{var,{521,1},'_'},
    {var,{521,1},'_'},
    {var,{521,1},'_'},
    {var,{521,1},'_'},
    {var,{521,1},'_'},
    {var,{521,1},'_'},
    {var,{521,1},'_'}],
   [[{call,
      {521,1},
      {remote,{521,1},{atom,{521,1},fake},{atom,{521,1},is_beam_bif_info}},
      []}]],
   [{debug_line,521,203},{atom,{521,1},ignore}]},
  {clause,
   {521,1},
   [{var,{521,18},'Src'},
    {var,{521,23},'DstCtx'},
    {var,{521,31},'Bool'},
    {var,{521,37},'Acc'},
    {var,{521,42},'MatchSeq'},
    {var,{521,52},'Lbl'},
    {var,{521,57},'State0'}],
   [],
   [{debug_line,522,204},
    {match,
     {522,5},
     {var,{522,5},'PriorCtxs'},
     {'case',
      {522,17},
      {call,
       {522,22},
       {remote,{522,26},{atom,{522,22},maps},{atom,{522,27},find}},
       [{var,{522,32},'Src'},
        {block,0,
         [{'case',
           {522,37},
           {var,{522,37},'State0'},
           [{clause,
             [{generated,true},{location,{522,37}}],
             [{tuple,
               [{generated,true},{location,{522,37}}],
               [{atom,{522,37},cm},
                {var,{522,37},'_'},
                {var,{522,37},'_'},
                {var,{522,37},'_'},
                {var,{522,37},'_'},
                {var,{522,37},rec25},
                {var,{522,37},'_'}]}],
             [],
             [{var,{522,37},rec25}]},
            {clause,
             [{generated,true},{location,{522,37}}],
             [{var,{522,37},rec25}],
             [],
             [{call,
               [{generated,true},{location,{522,37}}],
               {remote,
                [{generated,true},{location,{522,37}}],
                {atom,[{generated,true},{location,{522,37}}],erlang},
                {atom,[{generated,true},{location,{522,37}}],error}},
               [{tuple,
                 [{generated,true},{location,{522,37}}],
                 [{atom,[{generated,true},{location,{522,37}}],badrecord},
                  {var,{522,37},rec25}]}]}]}]}]}]},
      [{clause,
        {523,21},
        [{tuple,{523,21},[{atom,{523,22},ok},{var,{523,26},'Priors'}]}],
        [],
        [{debug_line,527,205},
         {match,
          {527,25},
          {var,{527,25},'Dominators'},
          {call,
           {527,38},
           {remote,{527,42},{atom,{527,38},maps},{atom,{527,43},get}},
           [{var,{527,47},'Lbl'},
            {block,0,
             [{'case',
               {527,52},
               {var,{527,52},'State0'},
               [{clause,
                 [{generated,true},{location,{527,52}}],
                 [{tuple,
                   [{generated,true},{location,{527,52}}],
                   [{atom,{527,52},cm},
                    {var,{527,52},'_'},
                    {var,{527,52},rec26},
                    {var,{527,52},'_'},
                    {var,{527,52},'_'},
                    {var,{527,52},'_'},
                    {var,{527,52},'_'}]}],
                 [],
                 [{var,{527,52},rec26}]},
                {clause,
                 [{generated,true},{location,{527,52}}],
                 [{var,{527,52},rec26}],
                 [],
                 [{call,
                   [{generated,true},{location,{527,52}}],
                   {remote,
                    [{generated,true},{location,{527,52}}],
                    {atom,[{generated,true},{location,{527,52}}],erlang},
                    {atom,[{generated,true},{location,{527,52}}],error}},
                   [{tuple,
                     [{generated,true},{location,{527,52}}],
                     [{atom,[{generated,true},{location,{527,52}}],badrecord},
                      {var,{527,52},rec26}]}]}]}]}]},
            {nil,{527,74}}]}},
         {debug_line,528,206},
         {lc,
          {528,25},
          {block,0,[{var,{528,26},'Ctx'}]},
          [{block,0,[{atom,{528,55},true}]},
           {generate_strict,
            {528,51},
            {tuple,
             {528,33},
             [{var,{528,34},'ValidAfter'},{var,{528,46},'Ctx'}]},
            {var,{528,55},'Priors'}},
           {block,0,[{debug_line,529,207},{atom,{529,33},true}]},
           {call,
            {529,33},
            {remote,{529,33},{atom,{529,33},lists},{atom,{529,33},member}},
            [{var,{529,40},'ValidAfter'},{var,{529,52},'Dominators'}]}]}]},
       {clause,
        {530,21},
        [{atom,{530,21},error}],
        [],
        [{debug_line,531,208},{nil,{531,25}}]}]}},
    {debug_line,533,209},
    {'case',
     {533,5},
     {var,{533,10},'PriorCtxs'},
     [{clause,
       {534,9},
       [{cons,{534,9},{var,{534,10},'Ctx'},{var,{534,14},'_'}}],
       [],
       [{debug_line,535,210},
        {match,
         {535,13},
         {var,{535,13},'Renames0'},
         {'case',
          {535,24},
          {var,{535,24},'State0'},
          [{clause,
            [{generated,true},{location,{535,24}}],
            [{tuple,
              [{generated,true},{location,{535,24}}],
              [{atom,{535,24},cm},
               {var,{535,24},'_'},
               {var,{535,24},'_'},
               {var,{535,24},'_'},
               {var,{535,24},'_'},
               {var,{535,24},'_'},
               {var,{535,24},rec27}]}],
            [],
            [{var,{535,24},rec27}]},
           {clause,
            [{generated,true},{location,{535,24}}],
            [{var,{535,24},rec27}],
            [],
            [{call,
              [{generated,true},{location,{535,24}}],
              {remote,
               [{generated,true},{location,{535,24}}],
               {atom,[{generated,true},{location,{535,24}}],erlang},
               {atom,[{generated,true},{location,{535,24}}],error}},
              [{tuple,
                [{generated,true},{location,{535,24}}],
                [{atom,[{generated,true},{location,{535,24}}],badrecord},
                 {var,{535,24},rec27}]}]}]}]}},
        {debug_line,536,211},
        {match,
         {536,13},
         {var,{536,13},'Renames'},
         {map,
          {536,31},
          {var,{536,23},'Renames0'},
          [{map_field_assoc,
            {536,39},
            {var,{536,34},'Bool'},
            {tuple,{536,42},[{atom,{536,42},b_literal},{atom,{536,57},true}]}},
           {map_field_assoc,
            {536,71},
            {var,{536,64},'DstCtx'},
            {var,{536,74},'Ctx'}}]}},
        {debug_line,537,212},
        {tuple,
         {537,13},
         [{var,{537,14},'Acc'},
          {block,
           {537,19},
           [{match,{537,19},{var,{537,19},rec28},{var,{537,19},'State0'}},
            {'case',
             {537,30},
             {var,{537,19},rec28},
             [{clause,
               {537,30},
               [{tuple,
                 {537,30},
                 [{atom,{537,30},cm},
                  {var,{537,30},'_'},
                  {var,{537,30},'_'},
                  {var,{537,30},'_'},
                  {var,{537,30},'_'},
                  {var,{537,30},'_'},
                  {var,{537,30},'_'}]}],
               [],
               [{call,
                 {537,30},
                 {remote,
                  {537,30},
                  {atom,{537,30},erlang},
                  {atom,{537,30},setelement}},
                 [{integer,{537,30},7},
                  {var,{537,19},rec28},
                  {var,{537,40},'Renames'}]}]},
              {clause,
               [{generated,true},{location,{537,30}}],
               [{var,[{generated,true},{location,{537,30}}],'_'}],
               [],
               [{call,
                 [{generated,true},{location,{537,30}}],
                 {remote,
                  [{generated,true},{location,{537,30}}],
                  {atom,[{generated,true},{location,{537,30}}],erlang},
                  {atom,[{generated,true},{location,{537,30}}],error}},
                 [{tuple,
                   [{generated,true},{location,{537,30}}],
                   [{atom,[{generated,true},{location,{537,30}}],badrecord},
                    {var,{537,19},rec28}]}]}]}]}]}]}]},
      {clause,
       {538,9},
       [{nil,{538,9}}],
       [],
       [{debug_line,541,213},
        {match,
         {541,13},
         {var,{541,13},'State'},
         {call,
          {541,21},
          {atom,{541,21},cm_register_prior},
          [{var,{541,39},'Src'},
           {var,{541,44},'DstCtx'},
           {var,{541,52},'Lbl'},
           {var,{541,57},'State0'}]}},
        {debug_line,542,214},
        {tuple,
         {542,13},
         [{op,{542,18},'++',{var,{542,14},'Acc'},{var,{542,21},'MatchSeq'}},
          {var,{542,31},'State'}]}]}]}]}]}.
{function,
 {545,1},
 cm_register_prior,4,
 [{clause,
   {545,1},
   [{var,{545,1},'_'},{var,{545,1},'_'},{var,{545,1},'_'},{var,{545,1},'_'}],
   [[{call,
      {545,1},
      {remote,{545,1},{atom,{545,1},fake},{atom,{545,1},is_beam_bif_info}},
      []}]],
   [{debug_line,545,215},{atom,{545,1},ignore}]},
  {clause,
   {545,1},
   [{var,{545,19},'Src'},
    {var,{545,24},'DstCtx'},
    {var,{545,32},'Lbl'},
    {var,{545,37},'State'}],
   [],
   [{debug_line,546,216},
    {match,
     {546,5},
     {var,{546,5},'Block'},
     {call,
      {546,13},
      {remote,{546,17},{atom,{546,13},maps},{atom,{546,18},get}},
      [{var,{546,22},'Lbl'},
       {block,0,
        [{'case',
          {546,27},
          {var,{546,27},'State'},
          [{clause,
            [{generated,true},{location,{546,27}}],
            [{tuple,
              [{generated,true},{location,{546,27}}],
              [{atom,{546,27},cm},
               {var,{546,27},'_'},
               {var,{546,27},'_'},
               {var,{546,27},rec29},
               {var,{546,27},'_'},
               {var,{546,27},'_'},
               {var,{546,27},'_'}]}],
            [],
            [{var,{546,27},rec29}]},
           {clause,
            [{generated,true},{location,{546,27}}],
            [{var,{546,27},rec29}],
            [],
            [{call,
              [{generated,true},{location,{546,27}}],
              {remote,
               [{generated,true},{location,{546,27}}],
               {atom,[{generated,true},{location,{546,27}}],erlang},
               {atom,[{generated,true},{location,{546,27}}],error}},
              [{tuple,
                [{generated,true},{location,{546,27}}],
                [{atom,[{generated,true},{location,{546,27}}],badrecord},
                 {var,{546,27},rec29}]}]}]}]}]}]}},
    {debug_line,547,217},
    {match,
     {547,5},
     {tuple,
      {547,5},
      [{atom,{547,5},b_br},
       {var,{547,5},'_'},
       {var,{547,5},'_'},
       {var,{547,16},'ValidAfter'},
       {var,{547,5},'_'}]},
     {'case',
      {547,30},
      {var,{547,30},'Block'},
      [{clause,
        [{generated,true},{location,{547,30}}],
        [{tuple,
          [{generated,true},{location,{547,30}}],
          [{atom,{547,30},b_blk},
           {var,{547,30},'_'},
           {var,{547,30},'_'},
           {var,{547,30},rec30}]}],
        [],
        [{var,{547,30},rec30}]},
       {clause,
        [{generated,true},{location,{547,30}}],
        [{var,{547,30},rec30}],
        [],
        [{call,
          [{generated,true},{location,{547,30}}],
          {remote,
           [{generated,true},{location,{547,30}}],
           {atom,[{generated,true},{location,{547,30}}],erlang},
           {atom,[{generated,true},{location,{547,30}}],error}},
          [{tuple,
            [{generated,true},{location,{547,30}}],
            [{atom,[{generated,true},{location,{547,30}}],badrecord},
             {var,{547,30},rec30}]}]}]}]}},
    {debug_line,549,218},
    {match,
     {549,5},
     {var,{549,5},'Priors0'},
     {call,
      {549,15},
      {remote,{549,19},{atom,{549,15},maps},{atom,{549,20},get}},
      [{var,{549,24},'Src'},
       {block,0,
        [{'case',
          {549,29},
          {var,{549,29},'State'},
          [{clause,
            [{generated,true},{location,{549,29}}],
            [{tuple,
              [{generated,true},{location,{549,29}}],
              [{atom,{549,29},cm},
               {var,{549,29},'_'},
               {var,{549,29},'_'},
               {var,{549,29},'_'},
               {var,{549,29},'_'},
               {var,{549,29},rec31},
               {var,{549,29},'_'}]}],
            [],
            [{var,{549,29},rec31}]},
           {clause,
            [{generated,true},{location,{549,29}}],
            [{var,{549,29},rec31}],
            [],
            [{call,
              [{generated,true},{location,{549,29}}],
              {remote,
               [{generated,true},{location,{549,29}}],
               {atom,[{generated,true},{location,{549,29}}],erlang},
               {atom,[{generated,true},{location,{549,29}}],error}},
              [{tuple,
                [{generated,true},{location,{549,29}}],
                [{atom,[{generated,true},{location,{549,29}}],badrecord},
                 {var,{549,29},rec31}]}]}]}]}]},
       {nil,{549,53}}]}},
    {debug_line,550,219},
    {match,
     {550,5},
     {var,{550,5},'Priors'},
     {cons,
      {550,14},
      {tuple,{550,15},[{var,{550,16},'ValidAfter'},{var,{550,28},'DstCtx'}]},
      {var,{550,38},'Priors0'}}},
    {debug_line,552,220},
    {match,
     {552,5},
     {var,{552,5},'PriorMatches'},
     {call,
      {552,20},
      {remote,{552,24},{atom,{552,20},maps},{atom,{552,25},put}},
      [{var,{552,29},'Src'},
       {var,{552,34},'Priors'},
       {block,0,
        [{'case',
          {552,42},
          {var,{552,42},'State'},
          [{clause,
            [{generated,true},{location,{552,42}}],
            [{tuple,
              [{generated,true},{location,{552,42}}],
              [{atom,{552,42},cm},
               {var,{552,42},'_'},
               {var,{552,42},'_'},
               {var,{552,42},'_'},
               {var,{552,42},'_'},
               {var,{552,42},rec32},
               {var,{552,42},'_'}]}],
            [],
            [{var,{552,42},rec32}]},
           {clause,
            [{generated,true},{location,{552,42}}],
            [{var,{552,42},rec32}],
            [],
            [{call,
              [{generated,true},{location,{552,42}}],
              {remote,
               [{generated,true},{location,{552,42}}],
               {atom,[{generated,true},{location,{552,42}}],erlang},
               {atom,[{generated,true},{location,{552,42}}],error}},
              [{tuple,
                [{generated,true},{location,{552,42}}],
                [{atom,[{generated,true},{location,{552,42}}],badrecord},
                 {var,{552,42},rec32}]}]}]}]}]}]}},
    {debug_line,553,221},
    {block,
     {553,5},
     [{match,{553,5},{var,{553,5},rec33},{var,{553,5},'State'}},
      {'case',
       {553,15},
       {var,{553,5},rec33},
       [{clause,
         {553,15},
         [{tuple,
           {553,15},
           [{atom,{553,15},cm},
            {var,{553,15},'_'},
            {var,{553,15},'_'},
            {var,{553,15},'_'},
            {var,{553,15},'_'},
            {var,{553,15},'_'},
            {var,{553,15},'_'}]}],
         [],
         [{call,
           {553,15},
           {remote,{553,15},{atom,{553,15},erlang},{atom,{553,15},setelement}},
           [{integer,{553,15},6},
            {var,{553,5},rec33},
            {var,{553,31},'PriorMatches'}]}]},
        {clause,
         [{generated,true},{location,{553,15}}],
         [{var,[{generated,true},{location,{553,15}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{553,15}}],
           {remote,
            [{generated,true},{location,{553,15}}],
            {atom,[{generated,true},{location,{553,15}}],erlang},
            {atom,[{generated,true},{location,{553,15}}],error}},
           [{tuple,
             [{generated,true},{location,{553,15}}],
             [{atom,[{generated,true},{location,{553,15}}],badrecord},
              {var,{553,5},rec33}]}]}]}]}]}]}]}.
{function,
 {555,1},
 cm_combine_tail,5,
 [{clause,
   {555,1},
   [{var,{555,1},'_'},
    {var,{555,1},'_'},
    {var,{555,1},'_'},
    {var,{555,1},'_'},
    {var,{555,1},'_'}],
   [[{call,
      {555,1},
      {remote,{555,1},{atom,{555,1},fake},{atom,{555,1},is_beam_bif_info}},
      []}]],
   [{debug_line,555,222},{atom,{555,1},ignore}]},
  {clause,
   {555,1},
   [{var,{555,17},'Src'},
    {var,{555,22},'DstCtx'},
    {var,{555,30},'Bool'},
    {var,{555,36},'Acc'},
    {var,{555,41},'State0'}],
   [],
   [{debug_line,556,223},
    {match,
     {556,5},
     {var,{556,5},'SrcCtx0'},
     {call,
      {556,15},
      {atom,{556,15},match_context_of},
      [{var,{556,32},'Src'},
       {block,0,
        [{'case',
          {556,37},
          {var,{556,37},'State0'},
          [{clause,
            [{generated,true},{location,{556,37}}],
            [{tuple,
              [{generated,true},{location,{556,37}}],
              [{atom,{556,37},cm},
               {var,{556,37},rec34},
               {var,{556,37},'_'},
               {var,{556,37},'_'},
               {var,{556,37},'_'},
               {var,{556,37},'_'},
               {var,{556,37},'_'}]}],
            [],
            [{var,{556,37},rec34}]},
           {clause,
            [{generated,true},{location,{556,37}}],
            [{var,{556,37},rec34}],
            [],
            [{call,
              [{generated,true},{location,{556,37}}],
              {remote,
               [{generated,true},{location,{556,37}}],
               {atom,[{generated,true},{location,{556,37}}],erlang},
               {atom,[{generated,true},{location,{556,37}}],error}},
              [{tuple,
                [{generated,true},{location,{556,37}}],
                [{atom,[{generated,true},{location,{556,37}}],badrecord},
                 {var,{556,37},rec34}]}]}]}]}]}]}},
    {debug_line,558,224},
    {match,
     {558,5},
     {tuple,{558,5},[{var,{558,6},'SrcCtx'},{var,{558,14},'Renames'}]},
     {call,
      {558,25},
      {atom,{558,25},cm_combine_tail_1},
      [{var,{558,43},'Bool'},
       {var,{558,49},'DstCtx'},
       {var,{558,57},'SrcCtx0'},
       {block,0,
        [{debug_line,559,225},
         {'case',
          {559,43},
          {var,{559,43},'State0'},
          [{clause,
            [{generated,true},{location,{559,43}}],
            [{tuple,
              [{generated,true},{location,{559,43}}],
              [{atom,{559,43},cm},
               {var,{559,43},'_'},
               {var,{559,43},'_'},
               {var,{559,43},'_'},
               {var,{559,43},'_'},
               {var,{559,43},'_'},
               {var,{559,43},rec35}]}],
            [],
            [{var,{559,43},rec35}]},
           {clause,
            [{generated,true},{location,{559,43}}],
            [{var,{559,43},rec35}],
            [],
            [{call,
              [{generated,true},{location,{559,43}}],
              {remote,
               [{generated,true},{location,{559,43}}],
               {atom,[{generated,true},{location,{559,43}}],erlang},
               {atom,[{generated,true},{location,{559,43}}],error}},
              [{tuple,
                [{generated,true},{location,{559,43}}],
                [{atom,[{generated,true},{location,{559,43}}],badrecord},
                 {var,{559,43},rec35}]}]}]}]}]}]}},
    {debug_line,564,226},
    {match,
     {564,5},
     {var,{564,5},'Aliases'},
     {call,
      {564,15},
      {remote,{564,19},{atom,{564,15},maps},{atom,{564,20},put}},
      [{var,{564,24},'Src'},
       {block,0,
        [{tuple,{564,29},[{integer,{564,30},0},{var,{564,33},'SrcCtx'}]}]},
       {block,0,
        [{'case',
          {564,42},
          {var,{564,42},'State0'},
          [{clause,
            [{generated,true},{location,{564,42}}],
            [{tuple,
              [{generated,true},{location,{564,42}}],
              [{atom,{564,42},cm},
               {var,{564,42},'_'},
               {var,{564,42},'_'},
               {var,{564,42},'_'},
               {var,{564,42},rec36},
               {var,{564,42},'_'},
               {var,{564,42},'_'}]}],
            [],
            [{var,{564,42},rec36}]},
           {clause,
            [{generated,true},{location,{564,42}}],
            [{var,{564,42},rec36}],
            [],
            [{call,
              [{generated,true},{location,{564,42}}],
              {remote,
               [{generated,true},{location,{564,42}}],
               {atom,[{generated,true},{location,{564,42}}],erlang},
               {atom,[{generated,true},{location,{564,42}}],error}},
              [{tuple,
                [{generated,true},{location,{564,42}}],
                [{atom,[{generated,true},{location,{564,42}}],badrecord},
                 {var,{564,42},rec36}]}]}]}]}]}]}},
    {debug_line,565,227},
    {match,
     {565,5},
     {var,{565,5},'State'},
     {block,
      {565,13},
      [{match,{565,13},{var,{565,13},rec37},{var,{565,13},'State0'}},
       {'case',
        {565,24},
        {var,{565,13},rec37},
        [{clause,
          {565,24},
          [{tuple,
            {565,24},
            [{atom,{565,24},cm},
             {var,{565,24},'_'},
             {var,{565,24},'_'},
             {var,{565,24},'_'},
             {var,{565,24},'_'},
             {var,{565,24},'_'},
             {var,{565,24},'_'}]}],
          [],
          [{call,
            {565,24},
            {remote,
             {565,24},
             {atom,{565,24},erlang},
             {atom,{565,24},setelement}},
            [{integer,{565,24},5},
             {call,
              {565,49},
              {remote,
               {565,49},
               {atom,{565,49},erlang},
               {atom,{565,49},setelement}},
              [{integer,{565,49},7},
               {var,{565,13},rec37},
               {var,{565,59},'Renames'}]},
             {var,{565,40},'Aliases'}]}]},
         {clause,
          [{generated,true},{location,{565,24}}],
          [{var,[{generated,true},{location,{565,24}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{565,24}}],
            {remote,
             [{generated,true},{location,{565,24}}],
             {atom,[{generated,true},{location,{565,24}}],erlang},
             {atom,[{generated,true},{location,{565,24}}],error}},
            [{tuple,
              [{generated,true},{location,{565,24}}],
              [{atom,[{generated,true},{location,{565,24}}],badrecord},
               {var,{565,13},rec37}]}]}]}]}]}},
    {debug_line,567,228},
    {tuple,{567,5},[{var,{567,6},'Acc'},{var,{567,11},'State'}]}]}]}.
{function,
    {569,1},
    cm_combine_tail_1,4,
    [{clause,
         {569,1},
         [{var,{569,1},'_'},
          {var,{569,1},'_'},
          {var,{569,1},'_'},
          {var,{569,1},'_'}],
         [[{call,
               {569,1},
               {remote,
                   {569,1},
                   {atom,{569,1},fake},
                   {atom,{569,1},is_beam_bif_info}},
               []}]],
         [{debug_line,569,229},{atom,{569,1},ignore}]},
     {clause,
         {569,1},
         [{var,{569,19},'Bool'},
          {var,{569,25},'DstCtx'},
          {var,{569,33},'SrcCtx'},
          {var,{569,41},'Renames0'}],
         [],
         [{debug_line,570,230},
          {'case',
              {570,5},
              {var,{570,10},'Renames0'},
              [{clause,
                   {571,9},
                   [{map,
                        {571,9},
                        [{map_field_exact,
                             {571,19},
                             {var,{571,12},'SrcCtx'},
                             {var,{571,22},'New'}}]}],
                   [],
                   [{debug_line,572,231},
                    {call,
                        {572,13},
                        {atom,{572,13},cm_combine_tail_1},
                        [{var,{572,31},'Bool'},
                         {var,{572,37},'DstCtx'},
                         {var,{572,45},'New'},
                         {var,{572,50},'Renames0'}]}]},
               {clause,
                   {573,9},
                   [{map,{573,9},[]}],
                   [],
                   [{debug_line,574,232},
                    {match,
                        {574,13},
                        {var,{574,13},'Renames'},
                        {map,
                            {574,31},
                            {var,{574,23},'Renames0'},
                            [{map_field_assoc,
                                 {574,39},
                                 {var,{574,34},'Bool'},
                                 {tuple,
                                     {574,42},
                                     [{atom,{574,42},b_literal},
                                      {atom,{574,57},true}]}},
                             {map_field_assoc,
                                 {575,41},
                                 {var,{575,34},'DstCtx'},
                                 {var,{575,44},'SrcCtx'}}]}},
                    {debug_line,576,233},
                    {tuple,
                        {576,13},
                        [{var,{576,14},'SrcCtx'},
                         {var,{576,22},'Renames'}]}]}]}]}]}.
{attribute,
    {583,2},
    record,
    {aca,
        [{typed_record_field,
             {record_field,{583,16},{atom,{583,16},unused_parameters}},
             {remote_type,
                 {583,37},
                 [{atom,{583,37},ordsets},
                  {atom,{583,45},ordset},
                  [{type,{583,52},record,[{atom,{583,53},b_var}]}]]}},
         {typed_record_field,
             {record_field,{584,16},{atom,{584,16},counter}},
             {type,{584,27},non_neg_integer,[]}},
         {typed_record_field,
             {record_field,
                 {585,16},
                 {atom,{585,16},parameter_info},
                 {map,{585,33},[]}},
             {type,
                 {585,40},
                 map,
                 [{type,
                      {585,52},
                      map_field_assoc,
                      [{type,{585,43},record,[{atom,{585,44},b_var}]},
                       {user_type,{585,55},param_info,[]}]}]}},
         {typed_record_field,
             {record_field,
                 {586,16},
                 {atom,{586,16},match_aliases},
                 {map,{586,32},[]}},
             {user_type,{586,39},match_alias_map,[]}}]}}.
{function,
    {588,1},
    accept_context_args,1,
    [{clause,
         {588,1},
         [{var,{588,1},'_'}],
         [[{call,
               {588,1},
               {remote,
                   {588,1},
                   {atom,{588,1},fake},
                   {atom,{588,1},is_beam_bif_info}},
               []}]],
         [{debug_line,588,234},{atom,{588,1},ignore}]},
     {clause,
         {588,1},
         [{tuple,{588,21},[{var,{588,22},'Fs'},{var,{588,26},'ModInfo'}]}],
         [],
         [{debug_line,589,235},
          {call,
              {589,5},
              {remote,{589,5},{atom,{589,5},lists},{atom,{589,5},mapfoldl}},
              [{block,0,[{'fun',{589,14},{function,accept_context_args,2}}]},
               {var,{589,41},'ModInfo'},
               {var,{589,50},'Fs'}]}]}]}.
{function,
 {591,1},
 accept_context_args,2,
 [{clause,
   {591,1},
   [{var,{591,1},'_'},{var,{591,1},'_'}],
   [[{call,
      {591,1},
      {remote,{591,1},{atom,{591,1},fake},{atom,{591,1},is_beam_bif_info}},
      []}]],
   [{debug_line,591,236},{atom,{591,1},ignore}]},
  {clause,
   {591,1},
   [{match,
     {591,21},
     {tuple,
      {591,21},
      [{atom,{591,21},b_function},
       {var,{591,21},'_'},
       {var,{591,21},'_'},
       {var,{591,36},'Blocks0'},
       {var,{591,21},'_'}]},
     {var,{591,45},'F'}},
    {var,{591,48},'ModInfo0'}],
   [],
   [{debug_line,592,237},
    {'case',
     {592,5},
     {call,
      {592,10},
      {atom,{592,10},funcinfo_get},
      [{var,{592,23},'F'},
       {atom,{592,26},has_bsm_ops},
       {var,{592,39},'ModInfo0'}]},
     [{clause,
       {593,9},
       [{atom,{593,9},true}],
       [],
       [{debug_line,594,238},
        {match,
         {594,13},
         {var,{594,13},'Parameters'},
         {call,
          {594,26},
          {remote,{594,33},{atom,{594,26},ordsets},{atom,{594,34},from_list}},
          [{block,0,
            [{call,
              {594,44},
              {atom,{594,44},funcinfo_get},
              [{var,{594,57},'F'},
               {atom,{594,60},parameters},
               {var,{594,72},'ModInfo0'}]}]}]}},
        {debug_line,595,239},
        {match,
         {595,13},
         {var,{595,13},'State0'},
         {tuple,
          {595,22},
          [{atom,{595,22},aca},
           {var,{595,48},'Parameters'},
           {'case',
            {596,38},
            {var,{596,38},'F'},
            [{clause,
              [{generated,true},{location,{596,38}}],
              [{tuple,
                [{generated,true},{location,{596,38}}],
                [{atom,{596,38},b_function},
                 {var,{596,38},'_'},
                 {var,{596,38},'_'},
                 {var,{596,38},'_'},
                 {var,{596,38},rec38}]}],
              [],
              [{var,{596,38},rec38}]},
             {clause,
              [{generated,true},{location,{596,38}}],
              [{var,{596,38},rec38}],
              [],
              [{call,
                [{generated,true},{location,{596,38}}],
                {remote,
                 [{generated,true},{location,{596,38}}],
                 {atom,[{generated,true},{location,{596,38}}],erlang},
                 {atom,[{generated,true},{location,{596,38}}],error}},
                [{tuple,
                  [{generated,true},{location,{596,38}}],
                  [{atom,[{generated,true},{location,{596,38}}],badrecord},
                   {var,{596,38},rec38}]}]}]}]},
           {map,{595,22},[]},
           {map,{595,22},[]}]}},
        {debug_line,598,240},
        {match,
         {598,13},
         {tuple,{598,13},[{var,{598,14},'Blocks1'},{var,{598,23},'State'}]},
         {call,
          {598,32},
          {atom,{598,32},aca_1},
          [{var,{598,38},'Blocks0'},{var,{598,47},'State0'}]}},
        {debug_line,599,241},
        {match,
         {599,13},
         {tuple,{599,13},[{var,{599,14},'Blocks'},{var,{599,22},'Counter'}]},
         {call,
          {599,33},
          {atom,{599,33},alias_matched_binaries},
          [{var,{599,56},'Blocks1'},
           {block,0,
            [{debug_line,600,242},
             {'case',
              {600,56},
              {var,{600,56},'State'},
              [{clause,
                [{generated,true},{location,{600,56}}],
                [{tuple,
                  [{generated,true},{location,{600,56}}],
                  [{atom,{600,56},aca},
                   {var,{600,56},'_'},
                   {var,{600,56},rec39},
                   {var,{600,56},'_'},
                   {var,{600,56},'_'}]}],
                [],
                [{var,{600,56},rec39}]},
               {clause,
                [{generated,true},{location,{600,56}}],
                [{var,{600,56},rec39}],
                [],
                [{call,
                  [{generated,true},{location,{600,56}}],
                  {remote,
                   [{generated,true},{location,{600,56}}],
                   {atom,[{generated,true},{location,{600,56}}],erlang},
                   {atom,[{generated,true},{location,{600,56}}],error}},
                  [{tuple,
                    [{generated,true},{location,{600,56}}],
                    [{atom,[{generated,true},{location,{600,56}}],badrecord},
                     {var,{600,56},rec39}]}]}]}]}]},
           {block,0,
            [{debug_line,601,243},
             {'case',
              {601,56},
              {var,{601,56},'State'},
              [{clause,
                [{generated,true},{location,{601,56}}],
                [{tuple,
                  [{generated,true},{location,{601,56}}],
                  [{atom,{601,56},aca},
                   {var,{601,56},'_'},
                   {var,{601,56},'_'},
                   {var,{601,56},'_'},
                   {var,{601,56},rec40}]}],
                [],
                [{var,{601,56},rec40}]},
               {clause,
                [{generated,true},{location,{601,56}}],
                [{var,{601,56},rec40}],
                [],
                [{call,
                  [{generated,true},{location,{601,56}}],
                  {remote,
                   [{generated,true},{location,{601,56}}],
                   {atom,[{generated,true},{location,{601,56}}],erlang},
                   {atom,[{generated,true},{location,{601,56}}],error}},
                  [{tuple,
                    [{generated,true},{location,{601,56}}],
                    [{atom,[{generated,true},{location,{601,56}}],badrecord},
                     {var,{601,56},rec40}]}]}]}]}]}]}},
        {debug_line,603,244},
        {match,
         {603,13},
         {var,{603,13},'ModInfo'},
         {call,
          {603,23},
          {atom,{603,23},funcinfo_set},
          [{var,{603,36},'F'},
           {atom,{603,39},parameter_info},
           {block,0,
            [{'case',
              {603,55},
              {var,{603,55},'State'},
              [{clause,
                [{generated,true},{location,{603,55}}],
                [{tuple,
                  [{generated,true},{location,{603,55}}],
                  [{atom,{603,55},aca},
                   {var,{603,55},'_'},
                   {var,{603,55},'_'},
                   {var,{603,55},rec41},
                   {var,{603,55},'_'}]}],
                [],
                [{var,{603,55},rec41}]},
               {clause,
                [{generated,true},{location,{603,55}}],
                [{var,{603,55},rec41}],
                [],
                [{call,
                  [{generated,true},{location,{603,55}}],
                  {remote,
                   [{generated,true},{location,{603,55}}],
                   {atom,[{generated,true},{location,{603,55}}],erlang},
                   {atom,[{generated,true},{location,{603,55}}],error}},
                  [{tuple,
                    [{generated,true},{location,{603,55}}],
                    [{atom,[{generated,true},{location,{603,55}}],badrecord},
                     {var,{603,55},rec41}]}]}]}]}]},
           {var,{604,36},'ModInfo0'}]}},
        {debug_line,606,245},
        {tuple,
         {606,13},
         [{block,
           {606,14},
           [{match,{606,14},{var,{606,14},rec42},{var,{606,14},'F'}},
            {'case',
             {606,27},
             {var,{606,14},rec42},
             [{clause,
               {606,27},
               [{tuple,
                 {606,27},
                 [{atom,{606,27},b_function},
                  {var,{606,27},'_'},
                  {var,{606,27},'_'},
                  {var,{606,27},'_'},
                  {var,{606,27},'_'}]}],
               [],
               [{call,
                 {606,27},
                 {remote,
                  {606,27},
                  {atom,{606,27},erlang},
                  {atom,{606,27},setelement}},
                 [{integer,{606,27},4},
                  {call,
                   {606,37},
                   {remote,
                    {606,37},
                    {atom,{606,37},erlang},
                    {atom,{606,37},setelement}},
                   [{integer,{606,37},5},
                    {var,{606,14},rec42},
                    {var,{606,41},'Counter'}]},
                  {var,{606,30},'Blocks'}]}]},
              {clause,
               [{generated,true},{location,{606,27}}],
               [{var,[{generated,true},{location,{606,27}}],'_'}],
               [],
               [{call,
                 [{generated,true},{location,{606,27}}],
                 {remote,
                  [{generated,true},{location,{606,27}}],
                  {atom,[{generated,true},{location,{606,27}}],erlang},
                  {atom,[{generated,true},{location,{606,27}}],error}},
                 [{tuple,
                   [{generated,true},{location,{606,27}}],
                   [{atom,[{generated,true},{location,{606,27}}],badrecord},
                    {var,{606,14},rec42}]}]}]}]}]},
          {var,{606,51},'ModInfo'}]}]},
      {clause,
       {607,9},
       [{atom,{607,9},false}],
       [],
       [{debug_line,608,246},
        {tuple,
         {608,13},
         [{var,{608,14},'F'},{var,{608,17},'ModInfo0'}]}]}]}]}]}.
{function,
 {611,1},
 aca_1,2,
 [{clause,
   {611,1},
   [{var,{611,1},'_'},{var,{611,1},'_'}],
   [[{call,
      {611,1},
      {remote,{611,1},{atom,{611,1},fake},{atom,{611,1},is_beam_bif_info}},
      []}]],
   [{debug_line,611,247},{atom,{611,1},ignore}]},
  {clause,
   {611,1},
   [{var,{611,7},'Blocks'},{var,{611,15},'State'}],
   [],
   [{debug_line,616,248},
    {match,
     {616,5},
     {var,{616,5},'EntryBlock'},
     {call,
      {616,18},
      {remote,{616,22},{atom,{616,18},maps},{atom,{616,23},get}},
      [{integer,{616,27},0},{var,{616,30},'Blocks'}]}},
    {debug_line,617,249},
    {call,
     {617,5},
     {atom,{617,5},aca_enable_reuse},
     [{block,0,
       [{'case',
         {617,22},
         {var,{617,22},'EntryBlock'},
         [{clause,
           [{generated,true},{location,{617,22}}],
           [{tuple,
             [{generated,true},{location,{617,22}}],
             [{atom,{617,22},b_blk},
              {var,{617,22},'_'},
              {var,{617,22},rec43},
              {var,{617,22},'_'}]}],
           [],
           [{var,{617,22},rec43}]},
          {clause,
           [{generated,true},{location,{617,22}}],
           [{var,{617,22},rec43}],
           [],
           [{call,
             [{generated,true},{location,{617,22}}],
             {remote,
              [{generated,true},{location,{617,22}}],
              {atom,[{generated,true},{location,{617,22}}],erlang},
              {atom,[{generated,true},{location,{617,22}}],error}},
             [{tuple,
               [{generated,true},{location,{617,22}}],
               [{atom,[{generated,true},{location,{617,22}}],badrecord},
                {var,{617,22},rec43}]}]}]}]}]},
      {var,{617,43},'EntryBlock'},
      {var,{617,55},'Blocks'},
      {nil,{617,63}},
      {var,{617,67},'State'}]}]}]}.
{function,
 {619,1},
 aca_enable_reuse,5,
 [{clause,
   {619,1},
   [{var,{619,1},'_'},
    {var,{619,1},'_'},
    {var,{619,1},'_'},
    {var,{619,1},'_'},
    {var,{619,1},'_'}],
   [[{call,
      {619,1},
      {remote,{619,1},{atom,{619,1},fake},{atom,{619,1},is_beam_bif_info}},
      []}]],
   [{debug_line,619,250},{atom,{619,1},ignore}]},
  {clause,
   {619,1},
   [{cons,
     {619,18},
     {match,
      {619,19},
      {tuple,
       {619,19},
       [{atom,{619,19},b_set},
        {var,{619,19},'_'},
        {var,{619,19},'_'},
        {atom,{619,29},bs_start_match},
        {cons,
         {619,49},
         {var,{619,50},'_'},
         {cons,{619,52},{var,{619,52},'Src'},{nil,{619,55}}}}]},
      {var,{619,58},'I0'}},
     {var,{619,63},'Rest'}},
    {var,{620,18},'EntryBlock'},
    {var,{620,30},'Blocks0'},
    {var,{620,39},'Acc'},
    {var,{620,44},'State0'}],
   [],
   [{debug_line,621,251},
    {'case',
     {621,5},
     {call,
      {621,10},
      {atom,{621,10},aca_is_reuse_safe},
      [{var,{621,28},'Src'},{var,{621,33},'State0'}]},
     [{clause,
       {622,9},
       [{atom,{622,9},true}],
       [],
       [{debug_line,623,252},
        {match,
         {623,13},
         {tuple,
          {623,13},
          [{var,{623,14},'I'},
           {var,{623,17},'Last0'},
           {var,{623,24},'Blocks1'},
           {var,{623,33},'State'}]},
         {call,
          {624,17},
          {atom,{624,17},aca_reuse_context},
          [{var,{624,35},'I0'},
           {var,{624,39},'EntryBlock'},
           {var,{624,51},'Blocks0'},
           {var,{624,60},'State0'}]}},
        {debug_line,626,253},
        {match,
         {626,13},
         {var,{626,13},'Is'},
         {call,
          {626,18},
          {remote,{626,18},{atom,{626,18},lists},{atom,{626,18},reverse}},
          [{block,0,[{cons,{626,26},{var,{626,27},'I'},{var,{626,31},'Acc'}}]},
           {var,{626,37},'Rest'}]}},
        {debug_line,627,254},
        {match,
         {627,13},
         {var,{627,13},'Last'},
         {call,
          {627,20},
          {remote,{627,28},{atom,{627,20},beam_ssa},{atom,{627,29},normalize}},
          [{var,{627,39},'Last0'}]}},
        {debug_line,628,255},
        {match,
         {628,13},
         {var,{628,13},'Blocks'},
         {call,
          {628,22},
          {remote,{628,26},{atom,{628,22},maps},{atom,{628,27},put}},
          [{integer,{628,31},0},
           {block,0,
            [{block,
              {628,34},
              [{match,
                {628,34},
                {var,{628,34},rec44},
                {var,{628,34},'EntryBlock'}},
               {'case',
                {628,51},
                {var,{628,34},rec44},
                [{clause,
                  {628,51},
                  [{tuple,
                    {628,51},
                    [{atom,{628,51},b_blk},
                     {var,{628,51},'_'},
                     {var,{628,51},'_'},
                     {var,{628,51},'_'}]}],
                  [],
                  [{call,
                    {628,51},
                    {remote,
                     {628,51},
                     {atom,{628,51},erlang},
                     {atom,{628,51},setelement}},
                    [{integer,{628,51},3},
                     {call,
                      {628,57},
                      {remote,
                       {628,57},
                       {atom,{628,57},erlang},
                       {atom,{628,57},setelement}},
                      [{integer,{628,57},4},
                       {var,{628,34},rec44},
                       {var,{628,62},'Last'}]},
                     {var,{628,54},'Is'}]}]},
                 {clause,
                  [{generated,true},{location,{628,51}}],
                  [{var,[{generated,true},{location,{628,51}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{628,51}}],
                    {remote,
                     [{generated,true},{location,{628,51}}],
                     {atom,[{generated,true},{location,{628,51}}],erlang},
                     {atom,[{generated,true},{location,{628,51}}],error}},
                    [{tuple,
                      [{generated,true},{location,{628,51}}],
                      [{atom,[{generated,true},{location,{628,51}}],badrecord},
                       {var,{628,34},rec44}]}]}]}]}]}]},
           {var,{628,69},'Blocks1'}]}},
        {debug_line,634,256},
        {tuple,
         {634,13},
         [{call,
           {634,14},
           {remote,
            {634,22},
            {atom,{634,14},beam_ssa},
            {atom,{634,23},trim_unreachable}},
           [{var,{634,40},'Blocks'}]},
          {var,{634,49},'State'}]}]},
      {clause,
       {635,9},
       [{atom,{635,9},false}],
       [],
       [{debug_line,636,257},
        {tuple,
         {636,13},
         [{var,{636,14},'Blocks0'},{var,{636,23},'State0'}]}]}]}]},
  {clause,
   {638,1},
   [{cons,{638,18},{var,{638,19},'I'},{var,{638,23},'Is'}},
    {var,{638,28},'EntryBlock'},
    {var,{638,40},'Blocks'},
    {var,{638,48},'Acc'},
    {var,{638,53},'State0'}],
   [],
   [{debug_line,639,258},
    {match,
     {639,5},
     {var,{639,5},'UnusedParams0'},
     {'case',
      {639,21},
      {var,{639,21},'State0'},
      [{clause,
        [{generated,true},{location,{639,21}}],
        [{tuple,
          [{generated,true},{location,{639,21}}],
          [{atom,{639,21},aca},
           {var,{639,21},rec45},
           {var,{639,21},'_'},
           {var,{639,21},'_'},
           {var,{639,21},'_'}]}],
        [],
        [{var,{639,21},rec45}]},
       {clause,
        [{generated,true},{location,{639,21}}],
        [{var,{639,21},rec45}],
        [],
        [{call,
          [{generated,true},{location,{639,21}}],
          {remote,
           [{generated,true},{location,{639,21}}],
           {atom,[{generated,true},{location,{639,21}}],erlang},
           {atom,[{generated,true},{location,{639,21}}],error}},
          [{tuple,
            [{generated,true},{location,{639,21}}],
            [{atom,[{generated,true},{location,{639,21}}],badrecord},
             {var,{639,21},rec45}]}]}]}]}},
    {debug_line,640,259},
    {'case',
     {640,5},
     {call,
      {640,10},
      {remote,{640,17},{atom,{640,10},ordsets},{atom,{640,18},intersection}},
      [{var,{640,31},'UnusedParams0'},
       {block,0,
        [{call,
          {640,46},
          {remote,{640,54},{atom,{640,46},beam_ssa},{atom,{640,55},used}},
          [{var,{640,60},'I'}]}]}]},
     [{clause,
       {641,9},
       [{nil,{641,9}}],
       [],
       [{debug_line,642,260},
        {call,
         {642,13},
         {atom,{642,13},aca_enable_reuse},
         [{var,{642,30},'Is'},
          {var,{642,34},'EntryBlock'},
          {var,{642,46},'Blocks'},
          {block,0,[{cons,{642,54},{var,{642,55},'I'},{var,{642,59},'Acc'}}]},
          {var,{642,65},'State0'}]}]},
      {clause,
       {643,9},
       [{var,{643,9},'PrematureUses'}],
       [],
       [{debug_line,644,261},
        {match,
         {644,13},
         {var,{644,13},'UnusedParams'},
         {call,
          {644,28},
          {remote,{644,35},{atom,{644,28},ordsets},{atom,{644,36},subtract}},
          [{var,{644,45},'UnusedParams0'},{var,{644,60},'PrematureUses'}]}},
        {debug_line,647,262},
        {match,
         {647,13},
         {var,{647,13},'ParamInfo'},
         {call,
          {647,25},
          {remote,{647,25},{atom,{647,25},lists},{atom,{647,25},foldl}},
          [{block,0,
            [{'fun',
              {647,31},
              {clauses,
               [{clause,
                 {647,34},
                 [{var,{647,35},'A'},{var,{647,38},'Ps'}],
                 [],
                 [{debug_line,648,263},
                  {call,
                   {648,39},
                   {remote,{648,43},{atom,{648,39},maps},{atom,{648,44},put}},
                   [{var,{648,48},'A'},
                    {block,0,
                     [{tuple,
                       {648,51},
                       [{atom,{648,52},used_before_match},
                        {var,{648,71},'I'}]}]},
                    {var,{648,75},'Ps'}]}]}]}}]},
           {block,0,
            [{debug_line,649,264},
             {'case',
              {649,36},
              {var,{649,36},'State0'},
              [{clause,
                [{generated,true},{location,{649,36}}],
                [{tuple,
                  [{generated,true},{location,{649,36}}],
                  [{atom,{649,36},aca},
                   {var,{649,36},'_'},
                   {var,{649,36},'_'},
                   {var,{649,36},rec46},
                   {var,{649,36},'_'}]}],
                [],
                [{var,{649,36},rec46}]},
               {clause,
                [{generated,true},{location,{649,36}}],
                [{var,{649,36},rec46}],
                [],
                [{call,
                  [{generated,true},{location,{649,36}}],
                  {remote,
                   [{generated,true},{location,{649,36}}],
                   {atom,[{generated,true},{location,{649,36}}],erlang},
                   {atom,[{generated,true},{location,{649,36}}],error}},
                  [{tuple,
                    [{generated,true},{location,{649,36}}],
                    [{atom,[{generated,true},{location,{649,36}}],badrecord},
                     {var,{649,36},rec46}]}]}]}]}]},
           {var,{649,63},'PrematureUses'}]}},
        {debug_line,651,265},
        {match,
         {651,13},
         {var,{651,13},'State'},
         {block,
          {651,21},
          [{match,{651,21},{var,{651,21},rec47},{var,{651,21},'State0'}},
           {'case',
            {651,33},
            {var,{651,21},rec47},
            [{clause,
              {651,33},
              [{tuple,
                {651,33},
                [{atom,{651,33},aca},
                 {var,{651,33},'_'},
                 {var,{651,33},'_'},
                 {var,{651,33},'_'},
                 {var,{651,33},'_'}]}],
              [],
              [{call,
                {651,33},
                {remote,
                 {651,33},
                 {atom,{651,33},erlang},
                 {atom,{651,33},setelement}},
                [{integer,{651,33},2},
                 {call,
                  {652,33},
                  {remote,
                   {652,33},
                   {atom,{652,33},erlang},
                   {atom,{652,33},setelement}},
                  [{integer,{652,33},4},
                   {var,{651,21},rec47},
                   {var,{652,50},'ParamInfo'}]},
                 {var,{651,53},'UnusedParams'}]}]},
             {clause,
              [{generated,true},{location,{651,33}}],
              [{var,[{generated,true},{location,{651,33}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{651,33}}],
                {remote,
                 [{generated,true},{location,{651,33}}],
                 {atom,[{generated,true},{location,{651,33}}],erlang},
                 {atom,[{generated,true},{location,{651,33}}],error}},
                [{tuple,
                  [{generated,true},{location,{651,33}}],
                  [{atom,[{generated,true},{location,{651,33}}],badrecord},
                   {var,{651,21},rec47}]}]}]}]}]}},
        {debug_line,653,266},
        {call,
         {653,13},
         {atom,{653,13},aca_enable_reuse},
         [{var,{653,30},'Is'},
          {var,{653,34},'EntryBlock'},
          {var,{653,46},'Blocks'},
          {block,0,[{cons,{653,54},{var,{653,55},'I'},{var,{653,59},'Acc'}}]},
          {var,{653,65},'State'}]}]}]}]},
  {clause,
   {655,1},
   [{nil,{655,18}},
    {var,{655,22},'_EntryBlock'},
    {var,{655,35},'Blocks'},
    {var,{655,43},'_Acc'},
    {var,{655,49},'State'}],
   [],
   [{debug_line,656,267},
    {tuple,{656,5},[{var,{656,6},'Blocks'},{var,{656,14},'State'}]}]}]}.
{function,
 {658,1},
 aca_is_reuse_safe,2,
 [{clause,
   {658,1},
   [{var,{658,1},'_'},{var,{658,1},'_'}],
   [[{call,
      {658,1},
      {remote,{658,1},{atom,{658,1},fake},{atom,{658,1},is_beam_bif_info}},
      []}]],
   [{debug_line,658,268},{atom,{658,1},ignore}]},
  {clause,
   {658,1},
   [{var,{658,19},'Src'},{var,{658,24},'State'}],
   [],
   [{debug_line,662,269},
    {call,
     {662,5},
     {remote,{662,12},{atom,{662,5},ordsets},{atom,{662,13},is_element}},
     [{var,{662,24},'Src'},
      {block,0,
       [{'case',
         {662,29},
         {var,{662,29},'State'},
         [{clause,
           [{generated,true},{location,{662,29}}],
           [{tuple,
             [{generated,true},{location,{662,29}}],
             [{atom,{662,29},aca},
              {var,{662,29},rec48},
              {var,{662,29},'_'},
              {var,{662,29},'_'},
              {var,{662,29},'_'}]}],
           [],
           [{var,{662,29},rec48}]},
          {clause,
           [{generated,true},{location,{662,29}}],
           [{var,{662,29},rec48}],
           [],
           [{call,
             [{generated,true},{location,{662,29}}],
             {remote,
              [{generated,true},{location,{662,29}}],
              {atom,[{generated,true},{location,{662,29}}],erlang},
              {atom,[{generated,true},{location,{662,29}}],error}},
             [{tuple,
               [{generated,true},{location,{662,29}}],
               [{atom,[{generated,true},{location,{662,29}}],badrecord},
                {var,{662,29},rec48}]}]}]}]}]}]}]}]}.
{function,
 {664,1},
 aca_reuse_context,4,
 [{clause,
   {664,1},
   [{var,{664,1},'_'},{var,{664,1},'_'},{var,{664,1},'_'},{var,{664,1},'_'}],
   [[{call,
      {664,1},
      {remote,{664,1},{atom,{664,1},fake},{atom,{664,1},is_beam_bif_info}},
      []}]],
   [{debug_line,664,270},{atom,{664,1},ignore}]},
  {clause,
   {664,1},
   [{match,
     {664,19},
     {tuple,
      {664,19},
      [{atom,{664,19},b_set},
       {var,{664,19},'_'},
       {var,{664,48},'Dst'},
       {atom,{664,29},bs_start_match},
       {cons,
        {664,57},
        {var,{664,58},'_'},
        {cons,{664,60},{var,{664,60},'Src'},{nil,{664,63}}}}]},
     {var,{664,66},'I0'}},
    {var,{665,19},'Block'},
    {var,{665,26},'Blocks0'},
    {var,{665,35},'State0'}],
   [],
   [{debug_line,670,271},
    {match,
     {670,5},
     {tuple,
      {670,5},
      [{var,{670,6},'State1'},{var,{670,14},'Last'},{var,{670,20},'Blocks'}]},
     {call,
      {671,9},
      {atom,{671,9},aca_handle_convergence},
      [{var,{671,32},'Src'},
       {var,{671,37},'State0'},
       {block,0,
        [{debug_line,671,272},
         {'case',
          {671,45},
          {var,{671,45},'Block'},
          [{clause,
            [{generated,true},{location,{671,45}}],
            [{tuple,
              [{generated,true},{location,{671,45}}],
              [{atom,{671,45},b_blk},
               {var,{671,45},'_'},
               {var,{671,45},'_'},
               {var,{671,45},rec49}]}],
            [],
            [{var,{671,45},rec49}]},
           {clause,
            [{generated,true},{location,{671,45}}],
            [{var,{671,45},rec49}],
            [],
            [{call,
              [{generated,true},{location,{671,45}}],
              {remote,
               [{generated,true},{location,{671,45}}],
               {atom,[{generated,true},{location,{671,45}}],erlang},
               {atom,[{generated,true},{location,{671,45}}],error}},
              [{tuple,
                [{generated,true},{location,{671,45}}],
                [{atom,[{generated,true},{location,{671,45}}],badrecord},
                 {var,{671,45},rec49}]}]}]}]}]},
       {var,{671,63},'Blocks0'}]}},
    {debug_line,673,273},
    {match,
     {673,5},
     {var,{673,5},'Aliases'},
     {call,
      {673,15},
      {remote,{673,19},{atom,{673,15},maps},{atom,{673,20},put}},
      [{var,{673,24},'Src'},
       {block,0,
        [{tuple,
          {673,29},
          [{'case',
            {673,30},
            {var,{673,30},'Last'},
            [{clause,
              [{generated,true},{location,{673,30}}],
              [{tuple,
                [{generated,true},{location,{673,30}}],
                [{atom,{673,30},b_br},
                 {var,{673,30},'_'},
                 {var,{673,30},'_'},
                 {var,{673,30},rec50},
                 {var,{673,30},'_'}]}],
              [],
              [{var,{673,30},rec50}]},
             {clause,
              [{generated,true},{location,{673,30}}],
              [{var,{673,30},rec50}],
              [],
              [{call,
                [{generated,true},{location,{673,30}}],
                {remote,
                 [{generated,true},{location,{673,30}}],
                 {atom,[{generated,true},{location,{673,30}}],erlang},
                 {atom,[{generated,true},{location,{673,30}}],error}},
                [{tuple,
                  [{generated,true},{location,{673,30}}],
                  [{atom,[{generated,true},{location,{673,30}}],badrecord},
                   {var,{673,30},rec50}]}]}]}]},
           {var,{673,46},'Dst'}]}]},
       {block,0,
        [{'case',
          {673,52},
          {var,{673,52},'State1'},
          [{clause,
            [{generated,true},{location,{673,52}}],
            [{tuple,
              [{generated,true},{location,{673,52}}],
              [{atom,{673,52},aca},
               {var,{673,52},'_'},
               {var,{673,52},'_'},
               {var,{673,52},'_'},
               {var,{673,52},rec51}]}],
            [],
            [{var,{673,52},rec51}]},
           {clause,
            [{generated,true},{location,{673,52}}],
            [{var,{673,52},rec51}],
            [],
            [{call,
              [{generated,true},{location,{673,52}}],
              {remote,
               [{generated,true},{location,{673,52}}],
               {atom,[{generated,true},{location,{673,52}}],erlang},
               {atom,[{generated,true},{location,{673,52}}],error}},
              [{tuple,
                [{generated,true},{location,{673,52}}],
                [{atom,[{generated,true},{location,{673,52}}],badrecord},
                 {var,{673,52},rec51}]}]}]}]}]}]}},
    {debug_line,674,274},
    {match,
     {674,5},
     {var,{674,5},'ParamInfo'},
     {call,
      {674,17},
      {remote,{674,21},{atom,{674,17},maps},{atom,{674,22},put}},
      [{var,{674,26},'Src'},
       {atom,{674,31},suitable_for_reuse},
       {block,0,
        [{'case',
          {674,51},
          {var,{674,51},'State1'},
          [{clause,
            [{generated,true},{location,{674,51}}],
            [{tuple,
              [{generated,true},{location,{674,51}}],
              [{atom,{674,51},aca},
               {var,{674,51},'_'},
               {var,{674,51},'_'},
               {var,{674,51},rec52},
               {var,{674,51},'_'}]}],
            [],
            [{var,{674,51},rec52}]},
           {clause,
            [{generated,true},{location,{674,51}}],
            [{var,{674,51},rec52}],
            [],
            [{call,
              [{generated,true},{location,{674,51}}],
              {remote,
               [{generated,true},{location,{674,51}}],
               {atom,[{generated,true},{location,{674,51}}],erlang},
               {atom,[{generated,true},{location,{674,51}}],error}},
              [{tuple,
                [{generated,true},{location,{674,51}}],
                [{atom,[{generated,true},{location,{674,51}}],badrecord},
                 {var,{674,51},rec52}]}]}]}]}]}]}},
    {debug_line,676,275},
    {match,
     {676,5},
     {var,{676,5},'State'},
     {block,
      {676,13},
      [{match,{676,13},{var,{676,13},rec53},{var,{676,13},'State1'}},
       {'case',
        {677,25},
        {var,{676,13},rec53},
        [{clause,
          {677,25},
          [{tuple,
            {677,25},
            [{atom,{677,25},aca},
             {var,{677,25},'_'},
             {var,{677,25},'_'},
             {var,{677,25},'_'},
             {var,{677,25},'_'}]}],
          [],
          [{call,
            {677,25},
            {remote,
             {677,25},
             {atom,{677,25},erlang},
             {atom,{677,25},setelement}},
            [{integer,{677,25},4},
             {call,
              {676,25},
              {remote,
               {676,25},
               {atom,{676,25},erlang},
               {atom,{676,25},setelement}},
              [{integer,{676,25},5},
               {var,{676,13},rec53},
               {var,{676,41},'Aliases'}]},
             {var,{677,42},'ParamInfo'}]}]},
         {clause,
          [{generated,true},{location,{677,25}}],
          [{var,[{generated,true},{location,{677,25}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{677,25}}],
            {remote,
             [{generated,true},{location,{677,25}}],
             {atom,[{generated,true},{location,{677,25}}],erlang},
             {atom,[{generated,true},{location,{677,25}}],error}},
            [{tuple,
              [{generated,true},{location,{677,25}}],
              [{atom,[{generated,true},{location,{677,25}}],badrecord},
               {var,{676,13},rec53}]}]}]}]}]}},
    {debug_line,679,276},
    {match,
     {679,5},
     {var,{679,5},'I'},
     {call,
      {679,9},
      {remote,{679,17},{atom,{679,9},beam_ssa},{atom,{679,18},add_anno}},
      [{atom,{679,27},accepts_match_contexts},
       {atom,{679,51},true},
       {var,{679,57},'I0'}]}},
    {debug_line,681,277},
    {tuple,
     {681,5},
     [{var,{681,6},'I'},
      {var,{681,9},'Last'},
      {var,{681,15},'Blocks'},
      {var,{681,23},'State'}]}]}]}.
{function,
 {683,1},
 aca_handle_convergence,4,
 [{clause,
   {683,1},
   [{var,{683,1},'_'},{var,{683,1},'_'},{var,{683,1},'_'},{var,{683,1},'_'}],
   [[{call,
      {683,1},
      {remote,{683,1},{atom,{683,1},fake},{atom,{683,1},is_beam_bif_info}},
      []}]],
   [{debug_line,683,278},{atom,{683,1},ignore}]},
  {clause,
   {683,1},
   [{var,{683,24},'Src'},
    {var,{683,29},'State0'},
    {var,{683,37},'Last0'},
    {var,{683,44},'Blocks0'}],
   [],
   [{debug_line,684,279},
    {match,
     {684,5},
     {tuple,
      {684,5},
      [{atom,{684,5},b_br},
       {var,{684,5},'_'},
       {var,{684,5},'_'},
       {var,{684,27},'Succ0'},
       {var,{684,16},'Fail0'}]},
     {var,{684,36},'Last0'}},
    {debug_line,686,280},
    {match,
     {686,5},
     {var,{686,5},'SuccPath'},
     {call,
      {686,16},
      {remote,{686,24},{atom,{686,16},beam_ssa},{atom,{686,25},rpo}},
      [{block,0,[{cons,{686,29},{var,{686,30},'Succ0'},{nil,{686,35}}}]},
       {var,{686,38},'Blocks0'}]}},
    {debug_line,687,281},
    {match,
     {687,5},
     {var,{687,5},'FailPath'},
     {call,
      {687,16},
      {remote,{687,24},{atom,{687,16},beam_ssa},{atom,{687,25},rpo}},
      [{block,0,[{cons,{687,29},{var,{687,30},'Fail0'},{nil,{687,35}}}]},
       {var,{687,38},'Blocks0'}]}},
    {debug_line,696,282},
    {match,
     {696,5},
     {var,{696,5},'ConvergedPaths'},
     {call,
      {696,22},
      {remote,{696,29},{atom,{696,22},ordsets},{atom,{696,30},intersection}},
      [{block,0,
        [{debug_line,697,283},
         {call,
          {697,24},
          {remote,{697,31},{atom,{697,24},ordsets},{atom,{697,32},from_list}},
          [{var,{697,42},'SuccPath'}]}]},
       {block,0,
        [{debug_line,698,284},
         {call,
          {698,24},
          {remote,{698,31},{atom,{698,24},ordsets},{atom,{698,32},from_list}},
          [{var,{698,42},'FailPath'}]}]}]}},
    {debug_line,700,285},
    {match,
     {700,5},
     {var,{700,5},'ConvergedLabels'},
     {call,
      {700,23},
      {remote,{700,31},{atom,{700,23},beam_ssa},{atom,{700,32},rpo}},
      [{var,{700,36},'ConvergedPaths'},{var,{700,52},'Blocks0'}]}},
    {debug_line,701,286},
    {'case',
     {701,5},
     {call,
      {701,10},
      {remote,{701,14},{atom,{701,10},maps},{atom,{701,15},is_key}},
      [{var,{701,22},'Src'},
       {block,0,
        [{call,
          {701,27},
          {remote,{701,35},{atom,{701,27},beam_ssa},{atom,{701,36},uses}},
          [{var,{701,41},'ConvergedLabels'},{var,{701,58},'Blocks0'}]}]}]},
     [{clause,
       {702,9},
       [{atom,{702,9},true}],
       [],
       [{debug_line,703,287},
        {'case',
         {703,13},
         {call,
          {703,18},
          {atom,{703,18},shortest},
          [{var,{703,27},'SuccPath'},{var,{703,37},'FailPath'}]},
         [{clause,
           {704,17},
           [{atom,{704,17},left}],
           [],
           [{debug_line,705,288},
            {match,
             {705,21},
             {tuple,
              {705,21},
              [{var,{705,22},'Succ'},
               {var,{705,28},'Blocks'},
               {var,{705,36},'Counter'}]},
             {call,
              {706,25},
              {atom,{706,25},aca_copy_successors},
              [{var,{706,45},'Succ0'},
               {var,{706,52},'Blocks0'},
               {block,0,
                [{debug_line,706,289},
                 {'case',
                  {706,61},
                  {var,{706,61},'State0'},
                  [{clause,
                    [{generated,true},{location,{706,61}}],
                    [{tuple,
                      [{generated,true},{location,{706,61}}],
                      [{atom,{706,61},aca},
                       {var,{706,61},'_'},
                       {var,{706,61},rec54},
                       {var,{706,61},'_'},
                       {var,{706,61},'_'}]}],
                    [],
                    [{var,{706,61},rec54}]},
                   {clause,
                    [{generated,true},{location,{706,61}}],
                    [{var,{706,61},rec54}],
                    [],
                    [{call,
                      [{generated,true},{location,{706,61}}],
                      {remote,
                       [{generated,true},{location,{706,61}}],
                       {atom,[{generated,true},{location,{706,61}}],erlang},
                       {atom,[{generated,true},{location,{706,61}}],error}},
                      [{tuple,
                        [{generated,true},{location,{706,61}}],
                        [{atom,
                          [{generated,true},{location,{706,61}}],
                          badrecord},
                         {var,{706,61},rec54}]}]}]}]}]}]}},
            {debug_line,707,290},
            {match,
             {707,21},
             {var,{707,21},'State'},
             {block,
              {707,29},
              [{match,{707,29},{var,{707,29},rec55},{var,{707,29},'State0'}},
               {'case',
                {707,41},
                {var,{707,29},rec55},
                [{clause,
                  {707,41},
                  [{tuple,
                    {707,41},
                    [{atom,{707,41},aca},
                     {var,{707,41},'_'},
                     {var,{707,41},'_'},
                     {var,{707,41},'_'},
                     {var,{707,41},'_'}]}],
                  [],
                  [{call,
                    {707,41},
                    {remote,
                     {707,41},
                     {atom,{707,41},erlang},
                     {atom,{707,41},setelement}},
                    [{integer,{707,41},3},
                     {var,{707,29},rec55},
                     {var,{707,51},'Counter'}]}]},
                 {clause,
                  [{generated,true},{location,{707,41}}],
                  [{var,[{generated,true},{location,{707,41}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{707,41}}],
                    {remote,
                     [{generated,true},{location,{707,41}}],
                     {atom,[{generated,true},{location,{707,41}}],erlang},
                     {atom,[{generated,true},{location,{707,41}}],error}},
                    [{tuple,
                      [{generated,true},{location,{707,41}}],
                      [{atom,[{generated,true},{location,{707,41}}],badrecord},
                       {var,{707,29},rec55}]}]}]}]}]}},
            {debug_line,708,291},
            {match,
             {708,21},
             {var,{708,21},'Last'},
             {call,
              {708,28},
              {remote,
               {708,36},
               {atom,{708,28},beam_ssa},
               {atom,{708,37},normalize}},
              [{block,0,
                [{block,
                  {708,47},
                  [{match,
                    {708,47},
                    {var,{708,47},rec56},
                    {var,{708,47},'Last0'}},
                   {'case',
                    {708,58},
                    {var,{708,47},rec56},
                    [{clause,
                      {708,58},
                      [{tuple,
                        {708,58},
                        [{atom,{708,58},b_br},
                         {var,{708,58},'_'},
                         {var,{708,58},'_'},
                         {var,{708,58},'_'},
                         {var,{708,58},'_'}]}],
                      [],
                      [{call,
                        {708,58},
                        {remote,
                         {708,58},
                         {atom,{708,58},erlang},
                         {atom,{708,58},setelement}},
                        [{integer,{708,58},4},
                         {var,{708,47},rec56},
                         {var,{708,63},'Succ'}]}]},
                     {clause,
                      [{generated,true},{location,{708,58}}],
                      [{var,[{generated,true},{location,{708,58}}],'_'}],
                      [],
                      [{call,
                        [{generated,true},{location,{708,58}}],
                        {remote,
                         [{generated,true},{location,{708,58}}],
                         {atom,[{generated,true},{location,{708,58}}],erlang},
                         {atom,[{generated,true},{location,{708,58}}],error}},
                        [{tuple,
                          [{generated,true},{location,{708,58}}],
                          [{atom,
                            [{generated,true},{location,{708,58}}],
                            badrecord},
                           {var,{708,47},rec56}]}]}]}]}]}]}]}},
            {debug_line,709,292},
            {tuple,
             {709,21},
             [{var,{709,22},'State'},
              {var,{709,29},'Last'},
              {var,{709,35},'Blocks'}]}]},
          {clause,
           {710,17},
           [{atom,{710,17},right}],
           [],
           [{debug_line,711,293},
            {match,
             {711,21},
             {tuple,
              {711,21},
              [{var,{711,22},'Fail'},
               {var,{711,28},'Blocks'},
               {var,{711,36},'Counter'}]},
             {call,
              {712,25},
              {atom,{712,25},aca_copy_successors},
              [{var,{712,45},'Fail0'},
               {var,{712,52},'Blocks0'},
               {block,0,
                [{debug_line,712,294},
                 {'case',
                  {712,61},
                  {var,{712,61},'State0'},
                  [{clause,
                    [{generated,true},{location,{712,61}}],
                    [{tuple,
                      [{generated,true},{location,{712,61}}],
                      [{atom,{712,61},aca},
                       {var,{712,61},'_'},
                       {var,{712,61},rec57},
                       {var,{712,61},'_'},
                       {var,{712,61},'_'}]}],
                    [],
                    [{var,{712,61},rec57}]},
                   {clause,
                    [{generated,true},{location,{712,61}}],
                    [{var,{712,61},rec57}],
                    [],
                    [{call,
                      [{generated,true},{location,{712,61}}],
                      {remote,
                       [{generated,true},{location,{712,61}}],
                       {atom,[{generated,true},{location,{712,61}}],erlang},
                       {atom,[{generated,true},{location,{712,61}}],error}},
                      [{tuple,
                        [{generated,true},{location,{712,61}}],
                        [{atom,
                          [{generated,true},{location,{712,61}}],
                          badrecord},
                         {var,{712,61},rec57}]}]}]}]}]}]}},
            {debug_line,713,295},
            {match,
             {713,21},
             {var,{713,21},'State'},
             {block,
              {713,29},
              [{match,{713,29},{var,{713,29},rec58},{var,{713,29},'State0'}},
               {'case',
                {713,41},
                {var,{713,29},rec58},
                [{clause,
                  {713,41},
                  [{tuple,
                    {713,41},
                    [{atom,{713,41},aca},
                     {var,{713,41},'_'},
                     {var,{713,41},'_'},
                     {var,{713,41},'_'},
                     {var,{713,41},'_'}]}],
                  [],
                  [{call,
                    {713,41},
                    {remote,
                     {713,41},
                     {atom,{713,41},erlang},
                     {atom,{713,41},setelement}},
                    [{integer,{713,41},3},
                     {var,{713,29},rec58},
                     {var,{713,51},'Counter'}]}]},
                 {clause,
                  [{generated,true},{location,{713,41}}],
                  [{var,[{generated,true},{location,{713,41}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{713,41}}],
                    {remote,
                     [{generated,true},{location,{713,41}}],
                     {atom,[{generated,true},{location,{713,41}}],erlang},
                     {atom,[{generated,true},{location,{713,41}}],error}},
                    [{tuple,
                      [{generated,true},{location,{713,41}}],
                      [{atom,[{generated,true},{location,{713,41}}],badrecord},
                       {var,{713,29},rec58}]}]}]}]}]}},
            {debug_line,714,296},
            {match,
             {714,21},
             {var,{714,21},'Last'},
             {call,
              {714,28},
              {remote,
               {714,36},
               {atom,{714,28},beam_ssa},
               {atom,{714,37},normalize}},
              [{block,0,
                [{block,
                  {714,47},
                  [{match,
                    {714,47},
                    {var,{714,47},rec59},
                    {var,{714,47},'Last0'}},
                   {'case',
                    {714,58},
                    {var,{714,47},rec59},
                    [{clause,
                      {714,58},
                      [{tuple,
                        {714,58},
                        [{atom,{714,58},b_br},
                         {var,{714,58},'_'},
                         {var,{714,58},'_'},
                         {var,{714,58},'_'},
                         {var,{714,58},'_'}]}],
                      [],
                      [{call,
                        {714,58},
                        {remote,
                         {714,58},
                         {atom,{714,58},erlang},
                         {atom,{714,58},setelement}},
                        [{integer,{714,58},5},
                         {var,{714,47},rec59},
                         {var,{714,63},'Fail'}]}]},
                     {clause,
                      [{generated,true},{location,{714,58}}],
                      [{var,[{generated,true},{location,{714,58}}],'_'}],
                      [],
                      [{call,
                        [{generated,true},{location,{714,58}}],
                        {remote,
                         [{generated,true},{location,{714,58}}],
                         {atom,[{generated,true},{location,{714,58}}],erlang},
                         {atom,[{generated,true},{location,{714,58}}],error}},
                        [{tuple,
                          [{generated,true},{location,{714,58}}],
                          [{atom,
                            [{generated,true},{location,{714,58}}],
                            badrecord},
                           {var,{714,47},rec59}]}]}]}]}]}]}]}},
            {debug_line,715,297},
            {tuple,
             {715,21},
             [{var,{715,22},'State'},
              {var,{715,29},'Last'},
              {var,{715,35},'Blocks'}]}]}]}]},
      {clause,
       {717,9},
       [{atom,{717,9},false}],
       [],
       [{debug_line,718,298},
        {tuple,
         {718,13},
         [{var,{718,14},'State0'},
          {var,{718,22},'Last0'},
          {var,{718,29},'Blocks0'}]}]}]}]}]}.
{function,{721,1},
          shortest,2,
          [{clause,{721,1},
                   [{var,{721,1},'_'},{var,{721,1},'_'}],
                   [[{call,{721,1},
                           {remote,{721,1},
                                   {atom,{721,1},fake},
                                   {atom,{721,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,721,299},{atom,{721,1},ignore}]},
           {clause,{721,1},
                   [{cons,{721,10},{var,{721,11},'_'},{var,{721,13},'As'}},
                    {cons,{721,18},{var,{721,19},'_'},{var,{721,21},'Bs'}}],
                   [],
                   [{debug_line,721,300},
                    {call,{721,29},
                          {atom,{721,29},shortest},
                          [{var,{721,38},'As'},{var,{721,42},'Bs'}]}]},
           {clause,{722,1},
                   [{nil,{722,10}},{var,{722,14},'_'}],
                   [],
                   [{debug_line,722,301},{atom,{722,20},left}]},
           {clause,{723,1},
                   [{var,{723,10},'_'},{nil,{723,13}}],
                   [],
                   [{debug_line,723,302},{atom,{723,20},right}]}]}.
{function,
    {728,1},
    aca_copy_successors,3,
    [{clause,
         {728,1},
         [{var,{728,1},'_'},{var,{728,1},'_'},{var,{728,1},'_'}],
         [[{call,
               {728,1},
               {remote,
                   {728,1},
                   {atom,{728,1},fake},
                   {atom,{728,1},is_beam_bif_info}},
               []}]],
         [{debug_line,728,303},{atom,{728,1},ignore}]},
     {clause,
         {728,1},
         [{var,{728,21},'Lbl0'},
          {var,{728,27},'Blocks0'},
          {var,{728,36},'Counter0'}],
         [],
         [{debug_line,731,304},
          {match,
              {731,5},
              {var,{731,5},'Path'},
              {call,
                  {731,12},
                  {remote,
                      {731,20},
                      {atom,{731,12},beam_ssa},
                      {atom,{731,21},rpo}},
                  [{block,0,
                       [{cons,{731,25},{var,{731,26},'Lbl0'},{nil,{731,30}}}]},
                   {var,{731,33},'Blocks0'}]}},
          {debug_line,732,305},
          {match,
              {732,5},
              {tuple,{732,5},[{var,{732,6},'BRs'},{var,{732,11},'Counter1'}]},
              {call,
                  {732,23},
                  {atom,{732,23},aca_cs_build_brs},
                  [{var,{732,40},'Path'},
                   {var,{732,46},'Counter0'},
                   {block,0,[{map,{732,56},[]}]}]}},
          {debug_line,733,306},
          {match,
              {733,5},
              {tuple,
                  {733,5},
                  [{var,{733,6},'Blocks'},{var,{733,14},'Counter'}]},
              {call,
                  {733,25},
                  {atom,{733,25},aca_cs_1},
                  [{var,{733,34},'Path'},
                   {var,{733,40},'Blocks0'},
                   {var,{733,49},'Counter1'},
                   {block,0,[{map,{733,59},[]}]},
                   {var,{733,64},'BRs'},
                   {block,0,[{map,{733,69},[]}]}]}},
          {debug_line,734,307},
          {match,
              {734,5},
              {var,{734,5},'Lbl'},
              {call,
                  {734,11},
                  {remote,{734,15},{atom,{734,11},maps},{atom,{734,16},get}},
                  [{var,{734,20},'Lbl0'},{var,{734,26},'BRs'}]}},
          {debug_line,735,308},
          {tuple,
              {735,5},
              [{var,{735,6},'Lbl'},
               {var,{735,11},'Blocks'},
               {var,{735,19},'Counter'}]}]}]}.
{function,
    {737,1},
    aca_cs_build_brs,3,
    [{clause,
         {737,1},
         [{var,{737,1},'_'},{var,{737,1},'_'},{var,{737,1},'_'}],
         [[{call,
               {737,1},
               {remote,
                   {737,1},
                   {atom,{737,1},fake},
                   {atom,{737,1},is_beam_bif_info}},
               []}]],
         [{debug_line,737,309},{atom,{737,1},ignore}]},
     {clause,
         {737,1},
         [{cons,
              {737,18},
              {match,{737,20},{integer,{737,20},1},{var,{737,36},'Lbl'}},
              {var,{737,42},'Path'}},
          {var,{737,49},'Counter'},
          {var,{737,58},'Acc'}],
         [],
         [{debug_line,740,310},
          {call,
              {740,5},
              {atom,{740,5},aca_cs_build_brs},
              [{var,{740,22},'Path'},
               {var,{740,28},'Counter'},
               {block,0,
                   [{map,
                        {740,40},
                        {var,{740,37},'Acc'},
                        [{map_field_assoc,
                             {740,47},
                             {var,{740,43},'Lbl'},
                             {var,{740,50},'Lbl'}}]}]}]}]},
     {clause,
         {741,1},
         [{cons,{741,18},{var,{741,19},'Lbl'},{var,{741,25},'Path'}},
          {var,{741,32},'Counter0'},
          {var,{741,42},'Acc'}],
         [],
         [{debug_line,742,311},
          {call,
              {742,5},
              {atom,{742,5},aca_cs_build_brs},
              [{var,{742,22},'Path'},
               {block,0,
                   [{op,{742,37},
                        '+',
                        {var,{742,28},'Counter0'},
                        {integer,{742,39},1}}]},
               {block,0,
                   [{map,
                        {742,45},
                        {var,{742,42},'Acc'},
                        [{map_field_assoc,
                             {742,52},
                             {var,{742,48},'Lbl'},
                             {var,{742,55},'Counter0'}}]}]}]}]},
     {clause,
         {743,1},
         [{nil,{743,18}},{var,{743,22},'Counter'},{var,{743,31},'Acc'}],
         [],
         [{debug_line,744,312},
          {tuple,{744,5},[{var,{744,6},'Acc'},{var,{744,11},'Counter'}]}]}]}.
{function,
    {746,1},
    aca_cs_1,6,
    [{clause,
         {746,1},
         [{var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'}],
         [[{call,
               {746,1},
               {remote,
                   {746,1},
                   {atom,{746,1},fake},
                   {atom,{746,1},is_beam_bif_info}},
               []}]],
         [{debug_line,746,313},{atom,{746,1},ignore}]},
     {clause,
         {746,1},
         [{cons,{746,10},{var,{746,11},'Lbl0'},{var,{746,18},'Path'}},
          {var,{746,25},'Blocks'},
          {var,{746,33},'Counter0'},
          {var,{746,43},'VRs0'},
          {var,{746,49},'BRs'},
          {var,{746,54},'Acc0'}],
         [],
         [{debug_line,747,314},
          {match,
              {747,5},
              {var,{747,5},'Block0'},
              {call,
                  {747,14},
                  {remote,{747,18},{atom,{747,14},maps},{atom,{747,19},get}},
                  [{var,{747,23},'Lbl0'},{var,{747,29},'Blocks'}]}},
          {debug_line,748,315},
          {match,
              {748,5},
              {var,{748,5},'Lbl'},
              {call,
                  {748,11},
                  {remote,{748,15},{atom,{748,11},maps},{atom,{748,16},get}},
                  [{var,{748,20},'Lbl0'},{var,{748,26},'BRs'}]}},
          {debug_line,749,316},
          {match,
              {749,5},
              {tuple,
                  {749,5},
                  [{var,{749,6},'VRs'},
                   {var,{749,11},'Block'},
                   {var,{749,18},'Counter'}]},
              {call,
                  {749,29},
                  {atom,{749,29},aca_cs_block},
                  [{var,{749,42},'Block0'},
                   {var,{749,50},'Counter0'},
                   {var,{749,60},'VRs0'},
                   {var,{749,66},'BRs'}]}},
          {debug_line,750,317},
          {match,
              {750,5},
              {var,{750,5},'Acc'},
              {call,
                  {750,11},
                  {remote,{750,15},{atom,{750,11},maps},{atom,{750,16},put}},
                  [{var,{750,20},'Lbl'},
                   {var,{750,25},'Block'},
                   {var,{750,32},'Acc0'}]}},
          {debug_line,751,318},
          {call,
              {751,5},
              {atom,{751,5},aca_cs_1},
              [{var,{751,14},'Path'},
               {var,{751,20},'Blocks'},
               {var,{751,28},'Counter'},
               {var,{751,37},'VRs'},
               {var,{751,42},'BRs'},
               {var,{751,47},'Acc'}]}]},
     {clause,
         {752,1},
         [{nil,{752,10}},
          {var,{752,14},'Blocks'},
          {var,{752,22},'Counter'},
          {var,{752,31},'_VRs'},
          {var,{752,37},'_BRs'},
          {var,{752,43},'Acc'}],
         [],
         [{debug_line,753,319},
          {tuple,
              {753,5},
              [{call,
                   {753,6},
                   {remote,{753,10},{atom,{753,6},maps},{atom,{753,11},merge}},
                   [{var,{753,17},'Blocks'},{var,{753,25},'Acc'}]},
               {var,{753,31},'Counter'}]}]}]}.
{function,
 {755,1},
 aca_cs_block,4,
 [{clause,
   {755,1},
   [{var,{755,1},'_'},{var,{755,1},'_'},{var,{755,1},'_'},{var,{755,1},'_'}],
   [[{call,
      {755,1},
      {remote,{755,1},{atom,{755,1},fake},{atom,{755,1},is_beam_bif_info}},
      []}]],
   [{debug_line,755,320},{atom,{755,1},ignore}]},
  {clause,
   {755,1},
   [{match,
     {755,14},
     {tuple,
      {755,14},
      [{atom,{755,14},b_blk},
       {var,{755,14},'_'},
       {var,{755,24},'Is0'},
       {var,{755,33},'Last0'}]},
     {var,{755,40},'Block0'}},
    {var,{755,48},'Counter0'},
    {var,{755,58},'VRs0'},
    {var,{755,64},'BRs'}],
   [],
   [{debug_line,756,321},
    {match,
     {756,5},
     {tuple,
      {756,5},
      [{var,{756,6},'VRs'},{var,{756,11},'Is'},{var,{756,15},'Counter'}]},
     {call,
      {756,26},
      {atom,{756,26},aca_cs_is},
      [{var,{756,36},'Is0'},
       {var,{756,41},'Counter0'},
       {var,{756,51},'VRs0'},
       {var,{756,57},'BRs'},
       {nil,{756,62}}]}},
    {debug_line,757,322},
    {match,
     {757,5},
     {var,{757,5},'Last1'},
     {call,
      {757,13},
      {atom,{757,13},aca_cs_last},
      [{var,{757,25},'Last0'},{var,{757,32},'VRs'},{var,{757,37},'BRs'}]}},
    {debug_line,758,323},
    {match,
     {758,5},
     {var,{758,5},'Last'},
     {call,
      {758,12},
      {remote,{758,20},{atom,{758,12},beam_ssa},{atom,{758,21},normalize}},
      [{var,{758,31},'Last1'}]}},
    {debug_line,759,324},
    {match,
     {759,5},
     {var,{759,5},'Block'},
     {block,
      {759,13},
      [{match,{759,13},{var,{759,13},rec60},{var,{759,13},'Block0'}},
       {'case',
        {759,26},
        {var,{759,13},rec60},
        [{clause,
          {759,26},
          [{tuple,
            {759,26},
            [{atom,{759,26},b_blk},
             {var,{759,26},'_'},
             {var,{759,26},'_'},
             {var,{759,26},'_'}]}],
          [],
          [{call,
            {759,26},
            {remote,
             {759,26},
             {atom,{759,26},erlang},
             {atom,{759,26},setelement}},
            [{integer,{759,26},3},
             {call,
              {759,32},
              {remote,
               {759,32},
               {atom,{759,32},erlang},
               {atom,{759,32},setelement}},
              [{integer,{759,32},4},
               {var,{759,13},rec60},
               {var,{759,37},'Last'}]},
             {var,{759,29},'Is'}]}]},
         {clause,
          [{generated,true},{location,{759,26}}],
          [{var,[{generated,true},{location,{759,26}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{759,26}}],
            {remote,
             [{generated,true},{location,{759,26}}],
             {atom,[{generated,true},{location,{759,26}}],erlang},
             {atom,[{generated,true},{location,{759,26}}],error}},
            [{tuple,
              [{generated,true},{location,{759,26}}],
              [{atom,[{generated,true},{location,{759,26}}],badrecord},
               {var,{759,13},rec60}]}]}]}]}]}},
    {debug_line,760,325},
    {tuple,
     {760,5},
     [{var,{760,6},'VRs'},
      {var,{760,11},'Block'},
      {var,{760,18},'Counter'}]}]}]}.
{function,
 {762,1},
 aca_cs_is,5,
 [{clause,
   {762,1},
   [{var,{762,1},'_'},
    {var,{762,1},'_'},
    {var,{762,1},'_'},
    {var,{762,1},'_'},
    {var,{762,1},'_'}],
   [[{call,
      {762,1},
      {remote,{762,1},{atom,{762,1},fake},{atom,{762,1},is_beam_bif_info}},
      []}]],
   [{debug_line,762,326},{atom,{762,1},ignore}]},
  {clause,
   {762,1},
   [{cons,
     {762,11},
     {match,
      {762,12},
      {tuple,
       {762,12},
       [{atom,{762,12},b_set},
        {var,{762,12},'_'},
        {var,{763,23},'Dst0'},
        {var,{762,22},'Op'},
        {var,{764,24},'Args0'}]},
      {var,{764,31},'I0'}},
     {var,{764,36},'Is'}},
    {var,{765,11},'Counter0'},
    {var,{765,21},'VRs0'},
    {var,{765,27},'BRs'},
    {var,{765,32},'Acc'}],
   [],
   [{debug_line,766,327},
    {match,
     {766,5},
     {var,{766,5},'Args'},
     {'case',
      {766,12},
      {var,{766,17},'Op'},
      [{clause,
        {767,16},
        [{atom,{767,16},phi}],
        [],
        [{debug_line,767,328},
         {call,
          {767,23},
          {atom,{767,23},aca_cs_args_phi},
          [{var,{767,39},'Args0'},
           {var,{767,46},'VRs0'},
           {var,{767,52},'BRs'}]}]},
       {clause,
        {768,16},
        [{var,{768,16},'_'}],
        [],
        [{debug_line,768,329},
         {call,
          {768,21},
          {atom,{768,21},aca_cs_args},
          [{var,{768,33},'Args0'},{var,{768,40},'VRs0'}]}]}]}},
    {debug_line,770,330},
    {match,
     {770,5},
     {var,{770,5},'Counter'},
     {op,{770,24},'+',{var,{770,15},'Counter0'},{integer,{770,26},1}}},
    {debug_line,771,331},
    {match,
     {771,5},
     {var,{771,5},'Dst'},
     {tuple,{771,11},[{atom,{771,11},b_var},{var,{771,23},'Counter0'}]}},
    {debug_line,772,332},
    {match,
     {772,5},
     {var,{772,5},'I'},
     {block,
      {772,9},
      [{match,{772,9},{var,{772,9},rec61},{var,{772,9},'I0'}},
       {'case',
        {772,18},
        {var,{772,9},rec61},
        [{clause,
          {772,18},
          [{tuple,
            {772,18},
            [{atom,{772,18},b_set},
             {var,{772,18},'_'},
             {var,{772,18},'_'},
             {var,{772,18},'_'},
             {var,{772,18},'_'}]}],
          [],
          [{call,
            {772,18},
            {remote,
             {772,18},
             {atom,{772,18},erlang},
             {atom,{772,18},setelement}},
            [{integer,{772,18},3},
             {call,
              {772,26},
              {remote,
               {772,26},
               {atom,{772,26},erlang},
               {atom,{772,26},setelement}},
              [{integer,{772,26},5},
               {var,{772,9},rec61},
               {var,{772,31},'Args'}]},
             {var,{772,22},'Dst'}]}]},
         {clause,
          [{generated,true},{location,{772,18}}],
          [{var,[{generated,true},{location,{772,18}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{772,18}}],
            {remote,
             [{generated,true},{location,{772,18}}],
             {atom,[{generated,true},{location,{772,18}}],erlang},
             {atom,[{generated,true},{location,{772,18}}],error}},
            [{tuple,
              [{generated,true},{location,{772,18}}],
              [{atom,[{generated,true},{location,{772,18}}],badrecord},
               {var,{772,9},rec61}]}]}]}]}]}},
    {debug_line,773,333},
    {match,
     {773,5},
     {var,{773,5},'VRs'},
     {call,
      {773,11},
      {remote,{773,15},{atom,{773,11},maps},{atom,{773,16},put}},
      [{var,{773,20},'Dst0'},{var,{773,26},'Dst'},{var,{773,31},'VRs0'}]}},
    {debug_line,774,334},
    {call,
     {774,5},
     {atom,{774,5},aca_cs_is},
     [{var,{774,15},'Is'},
      {var,{774,19},'Counter'},
      {var,{774,28},'VRs'},
      {var,{774,33},'BRs'},
      {block,0,[{cons,{774,38},{var,{774,39},'I'},{var,{774,43},'Acc'}}]}]}]},
  {clause,
   {775,1},
   [{nil,{775,11}},
    {var,{775,15},'Counter'},
    {var,{775,24},'VRs'},
    {var,{775,29},'_BRs'},
    {var,{775,35},'Acc'}],
   [],
   [{debug_line,776,335},
    {tuple,
     {776,5},
     [{var,{776,6},'VRs'},
      {call,
       {776,11},
       {remote,{776,11},{atom,{776,11},lists},{atom,{776,11},reverse}},
       [{var,{776,19},'Acc'}]},
      {var,{776,25},'Counter'}]}]}]}.
{function,
 {778,1},
 aca_cs_last,3,
 [{clause,
   {778,1},
   [{var,{778,1},'_'},{var,{778,1},'_'},{var,{778,1},'_'}],
   [[{call,
      {778,1},
      {remote,{778,1},{atom,{778,1},fake},{atom,{778,1},is_beam_bif_info}},
      []}]],
   [{debug_line,778,336},{atom,{778,1},ignore}]},
  {clause,
   {778,1},
   [{match,
     {778,13},
     {tuple,
      {778,13},
      [{atom,{778,13},b_switch},
       {var,{778,13},'_'},
       {var,{778,27},'Arg0'},
       {var,{778,50},'Fail0'},
       {var,{778,37},'Switch0'}]},
     {var,{778,57},'Sw'}},
    {var,{778,61},'VRs'},
    {var,{778,66},'BRs'}],
   [],
   [{debug_line,779,337},
    {match,
     {779,5},
     {var,{779,5},'Switch'},
     {lc,
      {779,14},
      {block,0,
       [{tuple,
         {779,15},
         [{var,{779,16},'Literal'},
          {call,
           {779,25},
           {remote,{779,29},{atom,{779,25},maps},{atom,{779,30},get}},
           [{var,{779,34},'Lbl'},{var,{779,39},'BRs'}]}]}]},
      [{block,0,[{atom,{779,67},true}]},
       {generate_strict,
        {779,63},
        {tuple,{779,48},[{var,{779,49},'Literal'},{var,{779,58},'Lbl'}]},
        {var,{779,67},'Switch0'}}]}},
    {debug_line,780,338},
    {block,
     {780,5},
     [{match,
       {780,17},
       {var,{780,17},rec62},
       {call,
        {780,21},
        {atom,{780,21},aca_cs_arg},
        [{var,{780,32},'Arg0'},{var,{780,38},'VRs'}]}},
      {match,
       {781,17},
       {var,{781,17},rec63},
       {call,
        {781,22},
        {remote,{781,26},{atom,{781,22},maps},{atom,{781,27},get}},
        [{var,{781,31},'Fail0'},{var,{781,38},'BRs'}]}},
      {match,{780,5},{var,{780,5},rec64},{var,{780,5},'Sw'}},
      {'case',
       {780,17},
       {var,{780,5},rec64},
       [{clause,
         {780,17},
         [{tuple,
           {780,17},
           [{atom,{780,17},b_switch},
            {var,{780,17},'_'},
            {var,{780,17},'_'},
            {var,{780,17},'_'},
            {var,{780,17},'_'}]}],
         [],
         [{call,
           {780,17},
           {remote,{780,17},{atom,{780,17},erlang},{atom,{780,17},setelement}},
           [{integer,{780,17},3},
            {call,
             {781,17},
             {remote,
              {781,17},
              {atom,{781,17},erlang},
              {atom,{781,17},setelement}},
             [{integer,{781,17},4},
              {call,
               {782,17},
               {remote,
                {782,17},
                {atom,{782,17},erlang},
                {atom,{782,17},setelement}},
               [{integer,{782,17},5},
                {var,{780,5},rec64},
                {var,{782,22},'Switch'}]},
              {var,{781,17},rec63}]},
            {var,{780,17},rec62}]}]},
        {clause,
         [{generated,true},{location,{780,17}}],
         [{var,[{generated,true},{location,{780,17}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{780,17}}],
           {remote,
            [{generated,true},{location,{780,17}}],
            {atom,[{generated,true},{location,{780,17}}],erlang},
            {atom,[{generated,true},{location,{780,17}}],error}},
           [{tuple,
             [{generated,true},{location,{780,17}}],
             [{atom,[{generated,true},{location,{780,17}}],badrecord},
              {var,{780,5},rec64}]}]}]}]}]}]},
  {clause,
   {783,1},
   [{match,
     {783,13},
     {tuple,
      {783,13},
      [{atom,{783,13},b_br},
       {var,{783,13},'_'},
       {var,{783,24},'Arg0'},
       {var,{783,34},'Succ0'},
       {var,{783,45},'Fail0'}]},
     {var,{783,52},'Br'}},
    {var,{783,56},'VRs'},
    {var,{783,61},'BRs'}],
   [],
   [{debug_line,784,339},
    {block,
     {784,5},
     [{match,
       {784,13},
       {var,{784,13},rec65},
       {call,
        {784,18},
        {atom,{784,18},aca_cs_arg},
        [{var,{784,29},'Arg0'},{var,{784,35},'VRs'}]}},
      {match,
       {785,13},
       {var,{785,13},rec66},
       {call,
        {785,18},
        {remote,{785,22},{atom,{785,18},maps},{atom,{785,23},get}},
        [{var,{785,27},'Succ0'},{var,{785,34},'BRs'}]}},
      {match,
       {786,13},
       {var,{786,13},rec67},
       {call,
        {786,18},
        {remote,{786,22},{atom,{786,18},maps},{atom,{786,23},get}},
        [{var,{786,27},'Fail0'},{var,{786,34},'BRs'}]}},
      {match,{784,5},{var,{784,5},rec68},{var,{784,5},'Br'}},
      {'case',
       {784,13},
       {var,{784,5},rec68},
       [{clause,
         {784,13},
         [{tuple,
           {784,13},
           [{atom,{784,13},b_br},
            {var,{784,13},'_'},
            {var,{784,13},'_'},
            {var,{784,13},'_'},
            {var,{784,13},'_'}]}],
         [],
         [{call,
           {784,13},
           {remote,{784,13},{atom,{784,13},erlang},{atom,{784,13},setelement}},
           [{integer,{784,13},3},
            {call,
             {785,13},
             {remote,
              {785,13},
              {atom,{785,13},erlang},
              {atom,{785,13},setelement}},
             [{integer,{785,13},4},
              {call,
               {786,13},
               {remote,
                {786,13},
                {atom,{786,13},erlang},
                {atom,{786,13},setelement}},
               [{integer,{786,13},5},
                {var,{784,5},rec68},
                {var,{786,13},rec67}]},
              {var,{785,13},rec66}]},
            {var,{784,13},rec65}]}]},
        {clause,
         [{generated,true},{location,{784,13}}],
         [{var,[{generated,true},{location,{784,13}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{784,13}}],
           {remote,
            [{generated,true},{location,{784,13}}],
            {atom,[{generated,true},{location,{784,13}}],erlang},
            {atom,[{generated,true},{location,{784,13}}],error}},
           [{tuple,
             [{generated,true},{location,{784,13}}],
             [{atom,[{generated,true},{location,{784,13}}],badrecord},
              {var,{784,5},rec68}]}]}]}]}]}]},
  {clause,
   {787,1},
   [{match,
     {787,13},
     {tuple,
      {787,13},
      [{atom,{787,13},b_ret},{var,{787,13},'_'},{var,{787,24},'Arg0'}]},
     {var,{787,30},'Ret'}},
    {var,{787,35},'VRs'},
    {var,{787,40},'_BRs'}],
   [],
   [{debug_line,788,340},
    {block,
     {788,5},
     [{match,
       {788,15},
       {var,{788,15},rec69},
       {call,
        {788,19},
        {atom,{788,19},aca_cs_arg},
        [{var,{788,30},'Arg0'},{var,{788,36},'VRs'}]}},
      {match,{788,5},{var,{788,5},rec70},{var,{788,5},'Ret'}},
      {'case',
       {788,15},
       {var,{788,5},rec70},
       [{clause,
         {788,15},
         [{tuple,
           {788,15},
           [{atom,{788,15},b_ret},{var,{788,15},'_'},{var,{788,15},'_'}]}],
         [],
         [{call,
           {788,15},
           {remote,{788,15},{atom,{788,15},erlang},{atom,{788,15},setelement}},
           [{integer,{788,15},3},{var,{788,5},rec70},{var,{788,15},rec69}]}]},
        {clause,
         [{generated,true},{location,{788,15}}],
         [{var,[{generated,true},{location,{788,15}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{788,15}}],
           {remote,
            [{generated,true},{location,{788,15}}],
            {atom,[{generated,true},{location,{788,15}}],erlang},
            {atom,[{generated,true},{location,{788,15}}],error}},
           [{tuple,
             [{generated,true},{location,{788,15}}],
             [{atom,[{generated,true},{location,{788,15}}],badrecord},
              {var,{788,5},rec70}]}]}]}]}]}]}]}.
{function,
    {790,1},
    aca_cs_args_phi,3,
    [{clause,
         {790,1},
         [{var,{790,1},'_'},{var,{790,1},'_'},{var,{790,1},'_'}],
         [[{call,
               {790,1},
               {remote,
                   {790,1},
                   {atom,{790,1},fake},
                   {atom,{790,1},is_beam_bif_info}},
               []}]],
         [{debug_line,790,341},{atom,{790,1},ignore}]},
     {clause,
         {790,1},
         [{cons,
              {790,17},
              {tuple,{790,18},[{var,{790,19},'Arg'},{var,{790,24},'Lbl'}]},
              {var,{790,31},'Args'}},
          {var,{790,38},'VRs'},
          {var,{790,43},'BRs'}],
         [],
         [{debug_line,791,342},
          {'case',
              {791,5},
              {var,{791,10},'BRs'},
              [{clause,
                   {792,9},
                   [{map,
                        {792,9},
                        [{map_field_exact,
                             {792,16},
                             {var,{792,12},'Lbl'},
                             {var,{792,19},'New'}}]}],
                   [],
                   [{debug_line,793,343},
                    {cons,
                        {793,13},
                        {tuple,
                            {793,14},
                            [{call,
                                 {793,15},
                                 {atom,{793,15},aca_cs_arg},
                                 [{var,{793,26},'Arg'},{var,{793,31},'VRs'}]},
                             {var,{793,37},'New'}]},
                        {call,
                            {793,44},
                            {atom,{793,44},aca_cs_args_phi},
                            [{var,{793,60},'Args'},
                             {var,{793,66},'VRs'},
                             {var,{793,71},'BRs'}]}}]},
               {clause,
                   {794,9},
                   [{map,{794,9},[]}],
                   [],
                   [{debug_line,795,344},
                    {call,
                        {795,13},
                        {atom,{795,13},aca_cs_args_phi},
                        [{var,{795,29},'Args'},
                         {var,{795,35},'VRs'},
                         {var,{795,40},'BRs'}]}]}]}]},
     {clause,
         {797,1},
         [{nil,{797,17}},{var,{797,21},'_VRs'},{var,{797,27},'_BRs'}],
         [],
         [{debug_line,798,345},{nil,{798,5}}]}]}.
{function,{800,1},
          aca_cs_args,2,
          [{clause,{800,1},
                   [{var,{800,1},'_'},{var,{800,1},'_'}],
                   [[{call,{800,1},
                           {remote,{800,1},
                                   {atom,{800,1},fake},
                                   {atom,{800,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,800,346},{atom,{800,1},ignore}]},
           {clause,{800,1},
                   [{cons,{800,13},{var,{800,14},'Arg'},{var,{800,20},'Args'}},
                    {var,{800,27},'VRs'}],
                   [],
                   [{debug_line,801,347},
                    {cons,{801,5},
                          {call,{801,6},
                                {atom,{801,6},aca_cs_arg},
                                [{var,{801,17},'Arg'},{var,{801,22},'VRs'}]},
                          {call,{801,29},
                                {atom,{801,29},aca_cs_args},
                                [{var,{801,41},'Args'},
                                 {var,{801,47},'VRs'}]}}]},
           {clause,{802,1},
                   [{nil,{802,13}},{var,{802,17},'_VRs'}],
                   [],
                   [{debug_line,803,348},{nil,{803,5}}]}]}.
{function,
    {805,1},
    aca_cs_arg,2,
    [{clause,
         {805,1},
         [{var,{805,1},'_'},{var,{805,1},'_'}],
         [[{call,
               {805,1},
               {remote,
                   {805,1},
                   {atom,{805,1},fake},
                   {atom,{805,1},is_beam_bif_info}},
               []}]],
         [{debug_line,805,349},{atom,{805,1},ignore}]},
     {clause,
         {805,1},
         [{match,
              {805,12},
              {tuple,
                  {805,12},
                  [{atom,{805,12},b_remote},
                   {var,{805,26},'Mod0'},
                   {var,{805,36},'Name0'},
                   {var,{805,12},'_'}]},
              {var,{805,43},'Rem'}},
          {var,{805,48},'VRs'}],
         [],
         [{debug_line,806,350},
          {match,
              {806,5},
              {var,{806,5},'Mod'},
              {call,
                  {806,11},
                  {atom,{806,11},aca_cs_arg},
                  [{var,{806,22},'Mod0'},{var,{806,28},'VRs'}]}},
          {debug_line,807,351},
          {match,
              {807,5},
              {var,{807,5},'Name'},
              {call,
                  {807,12},
                  {atom,{807,12},aca_cs_arg},
                  [{var,{807,23},'Name0'},{var,{807,30},'VRs'}]}},
          {debug_line,808,352},
          {block,
              {808,5},
              [{match,{808,5},{var,{808,5},rec71},{var,{808,5},'Rem'}},
               {'case',
                   {808,18},
                   {var,{808,5},rec71},
                   [{clause,
                        {808,18},
                        [{tuple,
                             {808,18},
                             [{atom,{808,18},b_remote},
                              {var,{808,18},'_'},
                              {var,{808,18},'_'},
                              {var,{808,18},'_'}]}],
                        [],
                        [{call,
                             {808,18},
                             {remote,
                                 {808,18},
                                 {atom,{808,18},erlang},
                                 {atom,{808,18},setelement}},
                             [{integer,{808,18},2},
                              {call,
                                  {808,26},
                                  {remote,
                                      {808,26},
                                      {atom,{808,26},erlang},
                                      {atom,{808,26},setelement}},
                                  [{integer,{808,26},3},
                                   {var,{808,5},rec71},
                                   {var,{808,31},'Name'}]},
                              {var,{808,22},'Mod'}]}]},
                    {clause,
                        [{generated,true},{location,{808,18}}],
                        [{var,[{generated,true},{location,{808,18}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{808,18}}],
                             {remote,
                                 [{generated,true},{location,{808,18}}],
                                 {atom,
                                     [{generated,true},{location,{808,18}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{808,18}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{808,18}}],
                                  [{atom,
                                       [{generated,true},{location,{808,18}}],
                                       badrecord},
                                   {var,{808,5},rec71}]}]}]}]}]}]},
     {clause,
         {809,1},
         [{var,{809,12},'Arg'},{var,{809,17},'VRs'}],
         [],
         [{debug_line,810,353},
          {'case',
              {810,5},
              {var,{810,10},'VRs'},
              [{clause,
                   {811,9},
                   [{map,
                        {811,9},
                        [{map_field_exact,
                             {811,16},
                             {var,{811,12},'Arg'},
                             {var,{811,19},'New'}}]}],
                   [],
                   [{debug_line,811,354},{var,{811,28},'New'}]},
               {clause,
                   {812,9},
                   [{map,{812,9},[]}],
                   [],
                   [{debug_line,812,355},{var,{812,16},'Arg'}]}]}]}]}.
{function,
 {823,1},
 allow_context_passthrough,1,
 [{clause,
   {823,1},
   [{var,{823,1},'_'}],
   [[{call,
      {823,1},
      {remote,{823,1},{atom,{823,1},fake},{atom,{823,1},is_beam_bif_info}},
      []}]],
   [{debug_line,823,356},{atom,{823,1},ignore}]},
  {clause,
   {823,1},
   [{tuple,{823,27},[{var,{823,28},'Fs'},{var,{823,32},'ModInfo0'}]}],
   [],
   [{debug_line,824,357},
    {match,
     {824,5},
     {var,{824,5},'FsUses'},
     {lc,
      {824,14},
      {block,0,
       [{tuple,
         {824,15},
         [{var,{824,16},'F'},
          {call,
           {824,19},
           {remote,{824,27},{atom,{824,19},beam_ssa},{atom,{824,28},uses}},
           [{block,0,
             [{call,
               {824,33},
               {remote,{824,41},{atom,{824,33},beam_ssa},{atom,{824,42},rpo}},
               [{var,{824,46},'Bs'}]}]},
            {var,{824,51},'Bs'}]}]}]},
      [{block,0,[{atom,{824,84},true}]},
       {generate_strict,
        {824,80},
        {match,
         {824,59},
         {tuple,
          {824,59},
          [{atom,{824,59},b_function},
           {var,{824,59},'_'},
           {var,{824,59},'_'},
           {var,{824,74},'Bs'},
           {var,{824,59},'_'}]},
         {var,{824,78},'F'}},
        {var,{824,84},'Fs'}}]}},
    {debug_line,825,358},
    {match,
     {825,5},
     {var,{825,5},'ModInfo'},
     {call,
      {825,15},
      {atom,{825,15},acp_forward_params},
      [{var,{825,34},'FsUses'},{var,{825,42},'ModInfo0'}]}},
    {debug_line,826,359},
    {tuple,{826,5},[{var,{826,6},'Fs'},{var,{826,10},'ModInfo'}]}]}]}.
{function,
 {828,1},
 acp_forward_params,2,
 [{clause,
   {828,1},
   [{var,{828,1},'_'},{var,{828,1},'_'}],
   [[{call,
      {828,1},
      {remote,{828,1},{atom,{828,1},fake},{atom,{828,1},is_beam_bif_info}},
      []}]],
   [{debug_line,828,360},{atom,{828,1},ignore}]},
  {clause,
   {828,1},
   [{var,{828,20},'FsUses'},{var,{828,28},'ModInfo0'}],
   [],
   [{debug_line,829,361},
    {match,
     {829,5},
     {var,{829,5},'F'},
     {'fun',
      {829,9},
      {clauses,
       [{clause,
         {829,12},
         [{tuple,
           {829,13},
           [{match,
             {829,14},
             {tuple,
              {829,14},
              [{atom,{829,14},b_function},
               {var,{829,14},'_'},
               {var,{829,31},'Parameters'},
               {var,{829,14},'_'},
               {var,{829,14},'_'}]},
             {var,{829,43},'Func'}},
            {var,{829,49},'UseMap'}]},
          {var,{829,58},'ModInfo'}],
         [],
         [{debug_line,830,362},
          {match,
           {830,17},
           {var,{830,17},'ParamInfo'},
           {call,
            {831,21},
            {remote,{831,21},{atom,{831,21},lists},{atom,{831,21},foldl}},
            [{block,0,
              [{debug_line,831,363},
               {'fun',
                {831,27},
                {clauses,
                 [{clause,
                   {831,30},
                   [{var,{831,31},'Param'},{var,{831,38},'ParamInfo'}],
                   [],
                   [{debug_line,832,364},
                    {match,
                     {832,35},
                     {var,{832,35},'Uses'},
                     {call,
                      {832,42},
                      {remote,
                       {832,46},
                       {atom,{832,42},maps},
                       {atom,{832,47},get}},
                      [{var,{832,51},'Param'},
                       {var,{832,58},'UseMap'},
                       {nil,{832,66}}]}},
                    {debug_line,833,365},
                    {call,
                     {833,35},
                     {atom,{833,35},acp_1},
                     [{var,{833,41},'Param'},
                      {var,{833,48},'Uses'},
                      {var,{833,54},'ModInfo'},
                      {var,{833,63},'ParamInfo'}]}]}]}}]},
             {block,0,
              [{debug_line,835,366},
               {call,
                {835,27},
                {atom,{835,27},funcinfo_get},
                [{var,{835,40},'Func'},
                 {atom,{835,46},parameter_info},
                 {var,{835,62},'ModInfo'}]}]},
             {var,{836,27},'Parameters'}]}},
          {debug_line,837,367},
          {call,
           {837,17},
           {atom,{837,17},funcinfo_set},
           [{var,{837,30},'Func'},
            {atom,{837,36},parameter_info},
            {var,{837,52},'ParamInfo'},
            {var,{837,63},'ModInfo'}]}]}]}}},
    {debug_line,841,368},
    {'case',
     {841,5},
     {call,
      {841,10},
      {remote,{841,10},{atom,{841,10},lists},{atom,{841,10},foldl}},
      [{var,{841,16},'F'},{var,{841,19},'ModInfo0'},{var,{841,29},'FsUses'}]},
     [{clause,
       {842,9},
       [{var,{842,9},'ModInfo0'}],
       [],
       [{debug_line,842,369},{var,{842,21},'ModInfo0'}]},
      {clause,
       {843,9},
       [{var,{843,9},'Changed'}],
       [],
       [{debug_line,843,370},
        {call,
         {843,20},
         {atom,{843,20},acp_forward_params},
         [{var,{843,39},'FsUses'},{var,{843,47},'Changed'}]}]}]}]}]}.
{function,
    {849,1},
    acp_1,4,
    [{clause,
         {849,1},
         [{var,{849,1},'_'},
          {var,{849,1},'_'},
          {var,{849,1},'_'},
          {var,{849,1},'_'}],
         [[{call,
               {849,1},
               {remote,
                   {849,1},
                   {atom,{849,1},fake},
                   {atom,{849,1},is_beam_bif_info}},
               []}]],
         [{debug_line,849,371},{atom,{849,1},ignore}]},
     {clause,
         {849,1},
         [{var,{849,7},'Param'},
          {cons,
              {849,14},
              {tuple,
                  {849,15},
                  [{integer,{849,16},0},
                   {match,
                       {849,19},
                       {tuple,
                           {849,19},
                           [{atom,{849,19},b_set},
                            {var,{849,19},'_'},
                            {var,{849,19},'_'},
                            {atom,{849,29},call},
                            {var,{849,19},'_'}]},
                       {var,{849,35},'I'}}]},
              {nil,{849,37}}},
          {var,{849,40},'ModInfo'},
          {var,{849,49},'ParamInfo'}],
         [],
         [{debug_line,852,372},
          {'case',
              {852,5},
              {call,
                  {852,10},
                  {atom,{852,10},check_context_call},
                  [{var,{852,29},'I'},
                   {var,{852,32},'Param'},
                   {nil,{852,39}},
                   {var,{852,43},'ModInfo'}]},
              [{clause,
                   {853,9},
                   [{tuple,
                        {853,9},
                        [{atom,{853,10},no_match_on_entry},
                         {var,{853,29},'_'}]}],
                   [],
                   [{debug_line,853,373},{var,{853,35},'ParamInfo'}]},
               {clause,
                   {854,9},
                   [{var,{854,9},'Other'}],
                   [],
                   [{debug_line,854,374},
                    {call,
                        {854,18},
                        {remote,
                            {854,22},
                            {atom,{854,18},maps},
                            {atom,{854,23},put}},
                        [{var,{854,27},'Param'},
                         {var,{854,34},'Other'},
                         {var,{854,41},'ParamInfo'}]}]}]}]},
     {clause,
         {856,1},
         [{var,{856,7},'_Param'},
          {var,{856,15},'_Uses'},
          {var,{856,22},'_ModInfo'},
          {var,{856,32},'ParamInfo'}],
         [],
         [{debug_line,857,375},{var,{857,5},'ParamInfo'}]}]}.
{attribute,
    {869,2},
    record,
    {sote,
        [{typed_record_field,
             {record_field,{869,17},{atom,{869,17},definitions}},
             {remote_type,
                 {869,32},
                 [{atom,{869,32},beam_ssa},
                  {atom,{869,41},definition_map},
                  []]}},
         {typed_record_field,
             {record_field,{870,17},{atom,{870,17},mod_info}},
             {user_type,{870,29},module_info,[]}},
         {typed_record_field,
             {record_field,
                 {871,17},
                 {atom,{871,17},match_aliases},
                 {map,{871,33},[]}},
             {user_type,{871,40},match_alias_map,[]}}]}}.
{function,
    {873,1},
    skip_outgoing_tail_extraction,1,
    [{clause,
         {873,1},
         [{var,{873,1},'_'}],
         [[{call,
               {873,1},
               {remote,
                   {873,1},
                   {atom,{873,1},fake},
                   {atom,{873,1},is_beam_bif_info}},
               []}]],
         [{debug_line,873,376},{atom,{873,1},ignore}]},
     {clause,
         {873,1},
         [{tuple,{873,31},[{var,{873,32},'Fs0'},{var,{873,37},'ModInfo'}]}],
         [],
         [{debug_line,874,377},
          {match,
              {874,5},
              {var,{874,5},'Fs'},
              {lc,{874,10},
                  {block,0,
                      [{call,
                           {874,11},
                           {atom,{874,11},skip_outgoing_tail_extraction},
                           [{var,{874,41},'F'},{var,{874,44},'ModInfo'}]}]},
                  [{block,0,[{atom,{874,61},true}]},
                   {generate,
                       {874,58},
                       {var,{874,56},'F'},
                       {var,{874,61},'Fs0'}}]}},
          {debug_line,875,378},
          {tuple,{875,5},[{var,{875,6},'Fs'},{var,{875,10},'ModInfo'}]}]}]}.
{function,
 {877,1},
 skip_outgoing_tail_extraction,2,
 [{clause,
   {877,1},
   [{var,{877,1},'_'},{var,{877,1},'_'}],
   [[{call,
      {877,1},
      {remote,{877,1},{atom,{877,1},fake},{atom,{877,1},is_beam_bif_info}},
      []}]],
   [{debug_line,877,379},{atom,{877,1},ignore}]},
  {clause,
   {877,1},
   [{match,
     {877,31},
     {tuple,
      {877,31},
      [{atom,{877,31},b_function},
       {var,{877,31},'_'},
       {var,{877,31},'_'},
       {var,{877,46},'Blocks0'},
       {var,{877,31},'_'}]},
     {var,{877,55},'F'}},
    {var,{877,58},'ModInfo'}],
   [],
   [{debug_line,878,380},
    {'case',
     {878,5},
     {call,
      {878,10},
      {atom,{878,10},funcinfo_get},
      [{var,{878,23},'F'},
       {atom,{878,26},has_bsm_ops},
       {var,{878,39},'ModInfo'}]},
     [{clause,
       {879,9},
       [{atom,{879,9},true}],
       [],
       [{debug_line,880,381},
        {match,
         {880,13},
         {var,{880,13},'RPO'},
         {call,
          {880,19},
          {remote,{880,27},{atom,{880,19},beam_ssa},{atom,{880,28},rpo}},
          [{var,{880,32},'Blocks0'}]}},
        {debug_line,881,382},
        {match,
         {881,13},
         {var,{881,13},'State0'},
         {tuple,
          {881,22},
          [{atom,{881,22},sote},
           {call,
            {881,43},
            {remote,
             {881,51},
             {atom,{881,43},beam_ssa},
             {atom,{881,52},definitions}},
            [{var,{881,64},'RPO'},{var,{881,69},'Blocks0'}]},
           {var,{882,40},'ModInfo'},
           {map,{881,22},[]}]}},
        {debug_line,884,383},
        {match,
         {884,13},
         {tuple,{884,13},[{var,{884,14},'Blocks1'},{var,{884,23},'State'}]},
         {call,
          {884,32},
          {remote,
           {884,40},
           {atom,{884,32},beam_ssa},
           {atom,{884,41},mapfold_instrs}},
          [{block,0,
            [{debug_line,885,384},
             {'fun',{885,34},{function,sote_rewrite_calls,2}}]},
           {var,{885,60},'RPO'},
           {var,{885,65},'State0'},
           {var,{885,73},'Blocks0'}]}},
        {debug_line,887,385},
        {match,
         {887,13},
         {tuple,{887,13},[{var,{887,14},'Blocks'},{var,{887,22},'Counter'}]},
         {call,
          {887,33},
          {atom,{887,33},alias_matched_binaries},
          [{var,{887,56},'Blocks1'},
           {block,0,
            [{debug_line,888,386},
             {'case',
              {888,56},
              {var,{888,56},'F'},
              [{clause,
                [{generated,true},{location,{888,56}}],
                [{tuple,
                  [{generated,true},{location,{888,56}}],
                  [{atom,{888,56},b_function},
                   {var,{888,56},'_'},
                   {var,{888,56},'_'},
                   {var,{888,56},'_'},
                   {var,{888,56},rec72}]}],
                [],
                [{var,{888,56},rec72}]},
               {clause,
                [{generated,true},{location,{888,56}}],
                [{var,{888,56},rec72}],
                [],
                [{call,
                  [{generated,true},{location,{888,56}}],
                  {remote,
                   [{generated,true},{location,{888,56}}],
                   {atom,[{generated,true},{location,{888,56}}],erlang},
                   {atom,[{generated,true},{location,{888,56}}],error}},
                  [{tuple,
                    [{generated,true},{location,{888,56}}],
                    [{atom,[{generated,true},{location,{888,56}}],badrecord},
                     {var,{888,56},rec72}]}]}]}]}]},
           {block,0,
            [{debug_line,889,387},
             {'case',
              {889,56},
              {var,{889,56},'State'},
              [{clause,
                [{generated,true},{location,{889,56}}],
                [{tuple,
                  [{generated,true},{location,{889,56}}],
                  [{atom,{889,56},sote},
                   {var,{889,56},'_'},
                   {var,{889,56},'_'},
                   {var,{889,56},rec73}]}],
                [],
                [{var,{889,56},rec73}]},
               {clause,
                [{generated,true},{location,{889,56}}],
                [{var,{889,56},rec73}],
                [],
                [{call,
                  [{generated,true},{location,{889,56}}],
                  {remote,
                   [{generated,true},{location,{889,56}}],
                   {atom,[{generated,true},{location,{889,56}}],erlang},
                   {atom,[{generated,true},{location,{889,56}}],error}},
                  [{tuple,
                    [{generated,true},{location,{889,56}}],
                    [{atom,[{generated,true},{location,{889,56}}],badrecord},
                     {var,{889,56},rec73}]}]}]}]}]}]}},
        {debug_line,891,388},
        {block,
         {891,13},
         [{match,{891,13},{var,{891,13},rec74},{var,{891,13},'F'}},
          {'case',
           {891,26},
           {var,{891,13},rec74},
           [{clause,
             {891,26},
             [{tuple,
               {891,26},
               [{atom,{891,26},b_function},
                {var,{891,26},'_'},
                {var,{891,26},'_'},
                {var,{891,26},'_'},
                {var,{891,26},'_'}]}],
             [],
             [{call,
               {891,26},
               {remote,
                {891,26},
                {atom,{891,26},erlang},
                {atom,{891,26},setelement}},
               [{integer,{891,26},4},
                {call,
                 {891,36},
                 {remote,
                  {891,36},
                  {atom,{891,36},erlang},
                  {atom,{891,36},setelement}},
                 [{integer,{891,36},5},
                  {var,{891,13},rec74},
                  {var,{891,40},'Counter'}]},
                {var,{891,29},'Blocks'}]}]},
            {clause,
             [{generated,true},{location,{891,26}}],
             [{var,[{generated,true},{location,{891,26}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{891,26}}],
               {remote,
                [{generated,true},{location,{891,26}}],
                {atom,[{generated,true},{location,{891,26}}],erlang},
                {atom,[{generated,true},{location,{891,26}}],error}},
               [{tuple,
                 [{generated,true},{location,{891,26}}],
                 [{atom,[{generated,true},{location,{891,26}}],badrecord},
                  {var,{891,13},rec74}]}]}]}]}]}]},
      {clause,
       {892,9},
       [{atom,{892,9},false}],
       [],
       [{debug_line,893,389},{var,{893,13},'F'}]}]}]}]}.
{function,
 {896,1},
 sote_rewrite_calls,2,
 [{clause,
   {896,1},
   [{var,{896,1},'_'},{var,{896,1},'_'}],
   [[{call,
      {896,1},
      {remote,{896,1},{atom,{896,1},fake},{atom,{896,1},is_beam_bif_info}},
      []}]],
   [{debug_line,896,390},{atom,{896,1},ignore}]},
  {clause,
   {896,1},
   [{match,
     {896,20},
     {tuple,
      {896,20},
      [{atom,{896,20},b_set},
       {var,{896,20},'_'},
       {var,{896,20},'_'},
       {atom,{896,30},call},
       {var,{896,40},'Args'}]},
     {var,{896,46},'Call'}},
    {var,{896,52},'State'}],
   [],
   [{debug_line,897,391},
    {call,
     {897,5},
     {atom,{897,5},sote_rewrite_call},
     [{var,{897,23},'Call'},
      {var,{897,29},'Args'},
      {nil,{897,35}},
      {var,{897,39},'State'}]}]},
  {clause,
   {898,1},
   [{match,
     {898,20},
     {tuple,
      {898,20},
      [{atom,{898,20},b_set},
       {var,{898,20},'_'},
       {var,{898,20},'_'},
       {tuple,{898,30},[{atom,{898,31},bif},{var,{898,35},'Safe'}]},
       {cons,{898,46},{var,{898,47},'Arg'},{nil,{898,50}}}]},
     {var,{898,53},'Call0'}},
    {var,{898,60},'State0'}],
   [[{op,{899,13},'=:=',{var,{899,8},'Safe'},{atom,{899,17},bit_size}}],
    [{op,{900,13},'=:=',{var,{900,8},'Safe'},{atom,{900,17},byte_size}}]],
   [{debug_line,901,392},
    {'case',
     {901,5},
     {call,
      {901,10},
      {atom,{901,10},is_tail_binary},
      [{var,{901,25},'Arg'},
       {block,0,
        [{'case',
          {901,30},
          {var,{901,30},'State0'},
          [{clause,
            [{generated,true},{location,{901,30}}],
            [{tuple,
              [{generated,true},{location,{901,30}}],
              [{atom,{901,30},sote},
               {var,{901,30},rec75},
               {var,{901,30},'_'},
               {var,{901,30},'_'}]}],
            [],
            [{var,{901,30},rec75}]},
           {clause,
            [{generated,true},{location,{901,30}}],
            [{var,{901,30},rec75}],
            [],
            [{call,
              [{generated,true},{location,{901,30}}],
              {remote,
               [{generated,true},{location,{901,30}}],
               {atom,[{generated,true},{location,{901,30}}],erlang},
               {atom,[{generated,true},{location,{901,30}}],error}},
              [{tuple,
                [{generated,true},{location,{901,30}}],
                [{atom,[{generated,true},{location,{901,30}}],badrecord},
                 {var,{901,30},rec75}]}]}]}]}]}]},
     [{clause,
       {902,9},
       [{atom,{902,9},true}],
       [],
       [{debug_line,903,393},
        {match,
         {903,13},
         {tuple,
          {903,13},
          [{var,{903,14},'Ctx'},{var,{903,19},'Call'},{var,{903,25},'State'}]},
         {call,
          {903,34},
          {atom,{903,34},sote_reuse},
          [{var,{903,45},'Arg'},
           {var,{903,50},'Call0'},
           {var,{903,57},'State0'}]}},
        {debug_line,904,394},
        {tuple,
         {904,13},
         [{block,
           {904,14},
           [{match,
             {904,25},
             {var,{904,25},rec76},
             {cons,{904,30},{var,{904,31},'Ctx'},{nil,{904,34}}}},
            {match,{904,14},{var,{904,14},rec77},{var,{904,14},'Call'}},
            {'case',
             {904,25},
             {var,{904,14},rec77},
             [{clause,
               {904,25},
               [{tuple,
                 {904,25},
                 [{atom,{904,25},b_set},
                  {var,{904,25},'_'},
                  {var,{904,25},'_'},
                  {var,{904,25},'_'},
                  {var,{904,25},'_'}]}],
               [],
               [{call,
                 {904,25},
                 {remote,
                  {904,25},
                  {atom,{904,25},erlang},
                  {atom,{904,25},setelement}},
                 [{integer,{904,25},5},
                  {var,{904,14},rec77},
                  {var,{904,25},rec76}]}]},
              {clause,
               [{generated,true},{location,{904,25}}],
               [{var,[{generated,true},{location,{904,25}}],'_'}],
               [],
               [{call,
                 [{generated,true},{location,{904,25}}],
                 {remote,
                  [{generated,true},{location,{904,25}}],
                  {atom,[{generated,true},{location,{904,25}}],erlang},
                  {atom,[{generated,true},{location,{904,25}}],error}},
                 [{tuple,
                   [{generated,true},{location,{904,25}}],
                   [{atom,[{generated,true},{location,{904,25}}],badrecord},
                    {var,{904,14},rec77}]}]}]}]}]},
          {var,{904,38},'State'}]}]},
      {clause,
       {905,9},
       [{atom,{905,9},false}],
       [],
       [{debug_line,906,395},
        {tuple,
         {906,13},
         [{var,{906,14},'Call0'},{var,{906,21},'State0'}]}]}]}]},
  {clause,
   {908,1},
   [{var,{908,20},'I'},{var,{908,23},'State'}],
   [],
   [{debug_line,909,396},
    {tuple,{909,5},[{var,{909,6},'I'},{var,{909,9},'State'}]}]}]}.
{function,
 {911,1},
 sote_rewrite_call,4,
 [{clause,
   {911,1},
   [{var,{911,1},'_'},{var,{911,1},'_'},{var,{911,1},'_'},{var,{911,1},'_'}],
   [[{call,
      {911,1},
      {remote,{911,1},{atom,{911,1},fake},{atom,{911,1},is_beam_bif_info}},
      []}]],
   [{debug_line,911,397},{atom,{911,1},ignore}]},
  {clause,
   {911,1},
   [{var,{911,19},'Call'},
    {nil,{911,25}},
    {var,{911,29},'ArgsOut'},
    {var,{911,38},'State'}],
   [],
   [{debug_line,912,398},
    {tuple,
     {912,5},
     [{block,
       {912,6},
       [{match,
         {912,17},
         {var,{912,17},rec78},
         {call,
          {912,22},
          {remote,{912,22},{atom,{912,22},lists},{atom,{912,22},reverse}},
          [{var,{912,30},'ArgsOut'}]}},
        {match,{912,6},{var,{912,6},rec79},{var,{912,6},'Call'}},
        {'case',
         {912,17},
         {var,{912,6},rec79},
         [{clause,
           {912,17},
           [{tuple,
             {912,17},
             [{atom,{912,17},b_set},
              {var,{912,17},'_'},
              {var,{912,17},'_'},
              {var,{912,17},'_'},
              {var,{912,17},'_'}]}],
           [],
           [{call,
             {912,17},
             {remote,
              {912,17},
              {atom,{912,17},erlang},
              {atom,{912,17},setelement}},
             [{integer,{912,17},5},
              {var,{912,6},rec79},
              {var,{912,17},rec78}]}]},
          {clause,
           [{generated,true},{location,{912,17}}],
           [{var,[{generated,true},{location,{912,17}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{912,17}}],
             {remote,
              [{generated,true},{location,{912,17}}],
              {atom,[{generated,true},{location,{912,17}}],erlang},
              {atom,[{generated,true},{location,{912,17}}],error}},
             [{tuple,
               [{generated,true},{location,{912,17}}],
               [{atom,[{generated,true},{location,{912,17}}],badrecord},
                {var,{912,6},rec79}]}]}]}]}]},
      {var,{912,41},'State'}]}]},
  {clause,
   {913,1},
   [{var,{913,19},'Call0'},
    {cons,{913,26},{var,{913,27},'Arg'},{var,{913,33},'ArgsIn'}},
    {var,{913,42},'ArgsOut'},
    {var,{913,51},'State0'}],
   [],
   [{debug_line,914,399},
    {'case',
     {914,5},
     {call,
      {914,10},
      {atom,{914,10},is_tail_binary},
      [{var,{914,25},'Arg'},
       {block,0,
        [{'case',
          {914,30},
          {var,{914,30},'State0'},
          [{clause,
            [{generated,true},{location,{914,30}}],
            [{tuple,
              [{generated,true},{location,{914,30}}],
              [{atom,{914,30},sote},
               {var,{914,30},rec80},
               {var,{914,30},'_'},
               {var,{914,30},'_'}]}],
            [],
            [{var,{914,30},rec80}]},
           {clause,
            [{generated,true},{location,{914,30}}],
            [{var,{914,30},rec80}],
            [],
            [{call,
              [{generated,true},{location,{914,30}}],
              {remote,
               [{generated,true},{location,{914,30}}],
               {atom,[{generated,true},{location,{914,30}}],erlang},
               {atom,[{generated,true},{location,{914,30}}],error}},
              [{tuple,
                [{generated,true},{location,{914,30}}],
                [{atom,[{generated,true},{location,{914,30}}],badrecord},
                 {var,{914,30},rec80}]}]}]}]}]}]},
     [{clause,
       {915,9},
       [{atom,{915,9},true}],
       [],
       [{debug_line,916,400},
        {match,
         {916,13},
         {var,{916,13},'CtxChain'},
         {call,
          {916,24},
          {atom,{916,24},context_chain_of},
          [{var,{916,41},'Arg'},
           {block,0,
            [{'case',
              {916,46},
              {var,{916,46},'State0'},
              [{clause,
                [{generated,true},{location,{916,46}}],
                [{tuple,
                  [{generated,true},{location,{916,46}}],
                  [{atom,{916,46},sote},
                   {var,{916,46},rec81},
                   {var,{916,46},'_'},
                   {var,{916,46},'_'}]}],
                [],
                [{var,{916,46},rec81}]},
               {clause,
                [{generated,true},{location,{916,46}}],
                [{var,{916,46},rec81}],
                [],
                [{call,
                  [{generated,true},{location,{916,46}}],
                  {remote,
                   [{generated,true},{location,{916,46}}],
                   {atom,[{generated,true},{location,{916,46}}],erlang},
                   {atom,[{generated,true},{location,{916,46}}],error}},
                  [{tuple,
                    [{generated,true},{location,{916,46}}],
                    [{atom,[{generated,true},{location,{916,46}}],badrecord},
                     {var,{916,46},rec81}]}]}]}]}]}]}},
        {debug_line,917,401},
        {'case',
         {917,13},
         {call,
          {917,18},
          {atom,{917,18},check_context_call},
          [{var,{917,37},'Call0'},
           {var,{917,44},'Arg'},
           {var,{917,49},'CtxChain'},
           {block,0,
            [{'case',
              {917,59},
              {var,{917,59},'State0'},
              [{clause,
                [{generated,true},{location,{917,59}}],
                [{tuple,
                  [{generated,true},{location,{917,59}}],
                  [{atom,{917,59},sote},
                   {var,{917,59},'_'},
                   {var,{917,59},rec82},
                   {var,{917,59},'_'}]}],
                [],
                [{var,{917,59},rec82}]},
               {clause,
                [{generated,true},{location,{917,59}}],
                [{var,{917,59},rec82}],
                [],
                [{call,
                  [{generated,true},{location,{917,59}}],
                  {remote,
                   [{generated,true},{location,{917,59}}],
                   {atom,[{generated,true},{location,{917,59}}],erlang},
                   {atom,[{generated,true},{location,{917,59}}],error}},
                  [{tuple,
                    [{generated,true},{location,{917,59}}],
                    [{atom,[{generated,true},{location,{917,59}}],badrecord},
                     {var,{917,59},rec82}]}]}]}]}]}]},
         [{clause,
           {918,17},
           [{atom,{918,17},suitable_for_reuse}],
           [],
           [{debug_line,919,402},
            {match,
             {919,21},
             {tuple,
              {919,21},
              [{var,{919,22},'Ctx'},
               {var,{919,27},'Call'},
               {var,{919,33},'State'}]},
             {call,
              {919,42},
              {atom,{919,42},sote_reuse},
              [{var,{919,53},'Arg'},
               {var,{919,58},'Call0'},
               {var,{919,65},'State0'}]}},
            {debug_line,920,403},
            {call,
             {920,21},
             {atom,{920,21},sote_rewrite_call},
             [{var,{920,39},'Call'},
              {var,{920,45},'ArgsIn'},
              {block,0,
               [{cons,
                 {920,53},
                 {var,{920,54},'Ctx'},
                 {var,{920,60},'ArgsOut'}}]},
              {var,{920,70},'State'}]}]},
          {clause,
           {921,17},
           [{var,{921,17},'Other'}],
           [],
           [{debug_line,922,404},
            {match,
             {922,21},
             {var,{922,21},'Call'},
             {call,
              {922,28},
              {remote,
               {922,36},
               {atom,{922,28},beam_ssa},
               {atom,{922,37},add_anno}},
              [{atom,{922,46},bsm_info},
               {var,{922,56},'Other'},
               {var,{922,63},'Call0'}]}},
            {debug_line,923,405},
            {call,
             {923,21},
             {atom,{923,21},sote_rewrite_call},
             [{var,{923,39},'Call'},
              {var,{923,45},'ArgsIn'},
              {block,0,
               [{cons,
                 {923,53},
                 {var,{923,54},'Arg'},
                 {var,{923,60},'ArgsOut'}}]},
              {var,{923,70},'State0'}]}]}]}]},
      {clause,
       {925,9},
       [{atom,{925,9},false}],
       [],
       [{debug_line,926,406},
        {call,
         {926,13},
         {atom,{926,13},sote_rewrite_call},
         [{var,{926,31},'Call0'},
          {var,{926,38},'ArgsIn'},
          {block,0,
           [{cons,{926,46},{var,{926,47},'Arg'},{var,{926,53},'ArgsOut'}}]},
          {var,{926,63},'State0'}]}]}]}]}]}.
{function,
 {929,1},
 sote_reuse,3,
 [{clause,
   {929,1},
   [{var,{929,1},'_'},{var,{929,1},'_'},{var,{929,1},'_'}],
   [[{call,
      {929,1},
      {remote,{929,1},{atom,{929,1},fake},{atom,{929,1},is_beam_bif_info}},
      []}]],
   [{debug_line,929,407},{atom,{929,1},ignore}]},
  {clause,
   {929,1},
   [{var,{929,12},'Arg'},{var,{929,17},'I0'},{var,{929,21},'State0'}],
   [],
   [{debug_line,930,408},
    {match,
     {930,5},
     {var,{930,5},'Ctx'},
     {call,
      {930,11},
      {atom,{930,11},match_context_of},
      [{var,{930,28},'Arg'},
       {block,0,
        [{'case',
          {930,33},
          {var,{930,33},'State0'},
          [{clause,
            [{generated,true},{location,{930,33}}],
            [{tuple,
              [{generated,true},{location,{930,33}}],
              [{atom,{930,33},sote},
               {var,{930,33},rec83},
               {var,{930,33},'_'},
               {var,{930,33},'_'}]}],
            [],
            [{var,{930,33},rec83}]},
           {clause,
            [{generated,true},{location,{930,33}}],
            [{var,{930,33},rec83}],
            [],
            [{call,
              [{generated,true},{location,{930,33}}],
              {remote,
               [{generated,true},{location,{930,33}}],
               {atom,[{generated,true},{location,{930,33}}],erlang},
               {atom,[{generated,true},{location,{930,33}}],error}},
              [{tuple,
                [{generated,true},{location,{930,33}}],
                [{atom,[{generated,true},{location,{930,33}}],badrecord},
                 {var,{930,33},rec83}]}]}]}]}]}]}},
    {debug_line,932,409},
    {match,
     {932,5},
     {var,{932,5},'MatchAliases0'},
     {'case',
      {932,21},
      {var,{932,21},'State0'},
      [{clause,
        [{generated,true},{location,{932,21}}],
        [{tuple,
          [{generated,true},{location,{932,21}}],
          [{atom,{932,21},sote},
           {var,{932,21},'_'},
           {var,{932,21},'_'},
           {var,{932,21},rec84}]}],
        [],
        [{var,{932,21},rec84}]},
       {clause,
        [{generated,true},{location,{932,21}}],
        [{var,{932,21},rec84}],
        [],
        [{call,
          [{generated,true},{location,{932,21}}],
          {remote,
           [{generated,true},{location,{932,21}}],
           {atom,[{generated,true},{location,{932,21}}],erlang},
           {atom,[{generated,true},{location,{932,21}}],error}},
          [{tuple,
            [{generated,true},{location,{932,21}}],
            [{atom,[{generated,true},{location,{932,21}}],badrecord},
             {var,{932,21},rec84}]}]}]}]}},
    {debug_line,933,410},
    {match,
     {933,5},
     {var,{933,5},'MatchAliases'},
     {call,
      {933,20},
      {remote,{933,24},{atom,{933,20},maps},{atom,{933,25},put}},
      [{var,{933,29},'Arg'},
       {block,0,
        [{tuple,{933,34},[{integer,{933,35},0},{var,{933,38},'Ctx'}]}]},
       {var,{933,44},'MatchAliases0'}]}},
    {debug_line,934,411},
    {match,
     {934,5},
     {var,{934,5},'State'},
     {block,
      {934,13},
      [{match,{934,13},{var,{934,13},rec85},{var,{934,13},'State0'}},
       {'case',
        {934,26},
        {var,{934,13},rec85},
        [{clause,
          {934,26},
          [{tuple,
            {934,26},
            [{atom,{934,26},sote},
             {var,{934,26},'_'},
             {var,{934,26},'_'},
             {var,{934,26},'_'}]}],
          [],
          [{call,
            {934,26},
            {remote,
             {934,26},
             {atom,{934,26},erlang},
             {atom,{934,26},setelement}},
            [{integer,{934,26},4},
             {var,{934,13},rec85},
             {var,{934,42},'MatchAliases'}]}]},
         {clause,
          [{generated,true},{location,{934,26}}],
          [{var,[{generated,true},{location,{934,26}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{934,26}}],
            {remote,
             [{generated,true},{location,{934,26}}],
             {atom,[{generated,true},{location,{934,26}}],erlang},
             {atom,[{generated,true},{location,{934,26}}],error}},
            [{tuple,
              [{generated,true},{location,{934,26}}],
              [{atom,[{generated,true},{location,{934,26}}],badrecord},
               {var,{934,13},rec85}]}]}]}]}]}},
    {debug_line,936,412},
    {match,
     {936,5},
     {var,{936,5},'I'},
     {call,
      {936,9},
      {remote,{936,17},{atom,{936,9},beam_ssa},{atom,{936,18},add_anno}},
      [{atom,{936,27},bsm_info},
       {atom,{936,37},context_reused},
       {var,{936,53},'I0'}]}},
    {debug_line,937,413},
    {tuple,
     {937,5},
     [{var,{937,6},'Ctx'},{var,{937,11},'I'},{var,{937,14},'State'}]}]}]}.
{function,
    {942,1},
    annotate_context_parameters,1,
    [{clause,
         {942,1},
         [{var,{942,1},'_'}],
         [[{call,
               {942,1},
               {remote,
                   {942,1},
                   {atom,{942,1},fake},
                   {atom,{942,1},is_beam_bif_info}},
               []}]],
         [{debug_line,942,414},{atom,{942,1},ignore}]},
     {clause,
         {942,1},
         [{tuple,{942,29},[{var,{942,30},'Fs'},{var,{942,34},'ModInfo'}]}],
         [],
         [{debug_line,943,415},
          {call,
              {943,5},
              {remote,{943,5},{atom,{943,5},lists},{atom,{943,5},mapfoldl}},
              [{block,0,
                   [{'fun',
                        {943,14},
                        {function,annotate_context_parameters,2}}]},
               {var,{943,49},'ModInfo'},
               {var,{943,58},'Fs'}]}]}]}.
{function,
 {945,1},
 annotate_context_parameters,2,
 [{clause,
   {945,1},
   [{var,{945,1},'_'},{var,{945,1},'_'}],
   [[{call,
      {945,1},
      {remote,{945,1},{atom,{945,1},fake},{atom,{945,1},is_beam_bif_info}},
      []}]],
   [{debug_line,945,416},{atom,{945,1},ignore}]},
  {clause,
   {945,1},
   [{var,{945,29},'F'},{var,{945,32},'ModInfo'}],
   [],
   [{debug_line,946,417},
    {match,
     {946,5},
     {var,{946,5},'ParamInfo'},
     {call,
      {946,17},
      {atom,{946,17},funcinfo_get},
      [{var,{946,30},'F'},
       {atom,{946,33},parameter_info},
       {var,{946,49},'ModInfo'}]}},
    {debug_line,947,418},
    {match,
     {947,5},
     {var,{947,5},'ParamAnno0'},
     {call,
      {947,18},
      {remote,{947,26},{atom,{947,18},beam_ssa},{atom,{947,27},get_anno}},
      [{atom,{947,36},parameter_info},
       {var,{947,52},'F'},
       {block,0,[{map,{947,55},[]}]}]}},
    {debug_line,948,419},
    {match,
     {948,5},
     {var,{948,5},'ParamAnno'},
     {call,
      {948,17},
      {remote,{948,21},{atom,{948,17},maps},{atom,{948,22},fold}},
      [{block,0,
        [{'fun',
          {948,27},
          {clauses,
           [{clause,
             {948,30},
             [{var,{948,31},'K'},{var,{948,34},'_V'},{var,{948,38},'Acc'}],
             [[{call,
                {948,48},
                {remote,
                 {948,48},
                 {atom,{948,48},erlang},
                 {atom,{948,48},is_map_key}},
                [{var,{948,59},'K'},{var,{948,62},'Acc'}]}]],
             [{debug_line,950,420},
              {call,
               {950,35},
               {remote,{950,35},{atom,{950,35},erlang},{atom,{950,35},error}},
               [{atom,{950,41},conflicting_parameter_types}]}]},
            {clause,
             {951,30},
             [{var,{951,31},'K'},
              {atom,{951,34},suitable_for_reuse},
              {var,{951,54},'Acc'}],
             [],
             [{debug_line,952,421},
              {match,
               {952,35},
               {var,{952,35},'Info'},
               {call,
                {952,42},
                {remote,{952,46},{atom,{952,42},maps},{atom,{952,47},get}},
                [{var,{952,51},'K'},{var,{952,54},'Acc'},{nil,{952,59}}]}},
              {debug_line,953,422},
              {map,
               {953,38},
               {var,{953,35},'Acc'},
               [{map_field_assoc,
                 {953,43},
                 {var,{953,41},'K'},
                 {cons,
                  {953,46},
                  {atom,{953,47},accepts_match_context},
                  {var,{953,71},'Info'}}}]}]},
            {clause,
             {954,30},
             [{var,{954,31},'_K'},{var,{954,35},'_V'},{var,{954,39},'Acc'}],
             [],
             [{debug_line,955,423},{var,{955,35},'Acc'}]}]}}]},
       {var,{956,32},'ParamAnno0'},
       {var,{956,44},'ParamInfo'}]}},
    {debug_line,957,424},
    {tuple,
     {957,5},
     [{call,
       {957,6},
       {remote,{957,14},{atom,{957,6},beam_ssa},{atom,{957,15},add_anno}},
       [{atom,{957,24},parameter_info},
        {var,{957,40},'ParamAnno'},
        {var,{957,51},'F'}]},
      {var,{957,55},'ModInfo'}]}]}]}.
{function,
 {963,1},
 collect_opt_info,1,
 [{clause,
   {963,1},
   [{var,{963,1},'_'}],
   [[{call,
      {963,1},
      {remote,{963,1},{atom,{963,1},fake},{atom,{963,1},is_beam_bif_info}},
      []}]],
   [{debug_line,963,425},{atom,{963,1},ignore}]},
  {clause,
   {963,1},
   [{var,{963,18},'Fs'}],
   [],
   [{debug_line,964,426},
    {call,
     {964,5},
     {remote,{964,5},{atom,{964,5},lists},{atom,{964,5},foldl}},
     [{block,0,
       [{'fun',
         {964,11},
         {clauses,
          [{clause,
            {964,14},
            [{match,
              {964,15},
              {tuple,
               {964,15},
               [{atom,{964,15},b_function},
                {var,{964,15},'_'},
                {var,{964,15},'_'},
                {var,{964,30},'Blocks'},
                {var,{964,15},'_'}]},
              {var,{964,38},'F'}},
             {var,{964,41},'Acc0'}],
            [],
            [{debug_line,965,427},
             {match,
              {965,19},
              {var,{965,19},'RPO'},
              {call,
               {965,25},
               {remote,{965,33},{atom,{965,25},beam_ssa},{atom,{965,34},rpo}},
               [{var,{965,38},'Blocks'}]}},
             {debug_line,966,428},
             {match,
              {966,19},
              {var,{966,19},'UseMap'},
              {call,
               {966,28},
               {remote,{966,36},{atom,{966,28},beam_ssa},{atom,{966,37},uses}},
               [{var,{966,42},'RPO'},{var,{966,47},'Blocks'}]}},
             {debug_line,967,429},
             {match,
              {967,19},
              {var,{967,19},'Where'},
              {call,
               {967,27},
               {remote,
                {967,35},
                {atom,{967,27},beam_ssa},
                {atom,{967,36},get_anno}},
               [{atom,{967,45},location},{var,{967,55},'F'},{nil,{967,58}}]}},
             {debug_line,968,430},
             {call,
              {968,19},
              {remote,
               {968,27},
               {atom,{968,19},beam_ssa},
               {atom,{968,28},fold_instrs}},
              [{block,0,
                [{debug_line,969,431},
                 {'fun',
                  {969,21},
                  {clauses,
                   [{clause,
                     {969,24},
                     [{var,{969,25},'I'},{var,{969,28},'Acc'}],
                     [],
                     [{debug_line,970,432},
                      {call,
                       {970,29},
                       {atom,{970,29},collect_opt_info_1},
                       [{var,{970,48},'I'},
                        {var,{970,51},'Where'},
                        {var,{970,58},'UseMap'},
                        {var,{970,66},'Acc'}]}]}]}}]},
               {var,{971,26},'RPO'},
               {var,{971,31},'Acc0'},
               {var,{971,37},'Blocks'}]}]}]}}]},
      {nil,{972,16}},
      {var,{972,20},'Fs'}]}]}]}.
{function,
 {974,1},
 collect_opt_info_1,4,
 [{clause,
   {974,1},
   [{var,{974,1},'_'},{var,{974,1},'_'},{var,{974,1},'_'},{var,{974,1},'_'}],
   [[{call,
      {974,1},
      {remote,{974,1},{atom,{974,1},fake},{atom,{974,1},is_beam_bif_info}},
      []}]],
   [{debug_line,974,433},{atom,{974,1},ignore}]},
  {clause,
   {974,1},
   [{match,
     {974,20},
     {tuple,
      {974,20},
      [{atom,{974,20},b_set},
       {var,{974,38},'Anno'},
       {var,{974,47},'Dst'},
       {var,{974,30},'Op'},
       {var,{974,20},'_'}]},
     {var,{974,52},'I'}},
    {var,{974,55},'Where'},
    {var,{974,62},'UseMap'},
    {var,{974,70},'Acc0'}],
   [],
   [{debug_line,975,434},
    {'case',
     {975,5},
     {call,{975,10},{atom,{975,10},is_tail_binary},[{var,{975,25},'I'}]},
     [{clause,
       {976,9},
       [{atom,{976,9},true}],
       [[{op,{976,22},'=:=',{var,{976,19},'Op'},{atom,{976,26},bs_match}}]],
       [{debug_line,980,435},
        {match,
         {980,13},
         {var,{980,13},'Uses0'},
         {call,
          {980,21},
          {remote,{980,25},{atom,{980,21},maps},{atom,{980,26},get}},
          [{var,{980,30},'Dst'},{var,{980,35},'UseMap'},{nil,{980,43}}]}},
        {debug_line,981,436},
        {'case',
         {981,13},
         {lc,
          {981,18},
          {block,0,[{var,{981,19},'E'}]},
          [{block,0,[{atom,{981,56},true}]},
           {generate,
            {981,53},
            {tuple,
             {981,24},
             [{var,{981,25},'_'},
              {match,
               {981,28},
               {tuple,
                {981,28},
                [{atom,{981,28},b_set},
                 {var,{981,28},'_'},
                 {var,{981,28},'_'},
                 {atom,{981,38},bs_extract},
                 {var,{981,28},'_'}]},
               {var,{981,50},'E'}}]},
            {var,{981,56},'Uses0'}}]},
         [{clause,
           {982,17},
           [{cons,{982,17},{var,{982,18},'Use'},{nil,{982,21}}}],
           [],
           [{debug_line,982,437},
            {call,
             {982,26},
             {atom,{982,26},add_unopt_binary_info},
             [{var,{982,48},'Use'},
              {atom,{982,53},false},
              {var,{982,60},'Where'},
              {var,{982,67},'UseMap'},
              {var,{982,75},'Acc0'}]}]},
          {clause,
           {983,17},
           [{nil,{983,17}}],
           [],
           [{debug_line,983,438},{var,{983,23},'Acc0'}]}]}]},
      {clause,
       {985,9},
       [{atom,{985,9},true}],
       [],
       [{debug_line,989,439},
        {match,
         {989,13},
         {var,{989,13},'Uses'},
         {call,
          {989,20},
          {remote,{989,24},{atom,{989,20},maps},{atom,{989,25},get}},
          [{var,{989,29},'Dst'},{var,{989,34},'UseMap'},{nil,{989,42}}]}},
        {debug_line,990,440},
        {call,
         {990,13},
         {remote,{990,13},{atom,{990,13},lists},{atom,{990,13},foldl}},
         [{block,0,
           [{'fun',
             {990,19},
             {clauses,
              [{clause,
                {990,22},
                [{tuple,{990,23},[{var,{990,24},'_Lbl'},{var,{990,30},'Use'}]},
                 {var,{990,36},'Acc'}],
                [],
                [{debug_line,991,441},
                 {call,
                  {991,27},
                  {atom,{991,27},add_unopt_binary_info},
                  [{var,{991,49},'Use'},
                   {atom,{991,54},false},
                   {var,{991,61},'Where'},
                   {var,{991,68},'UseMap'},
                   {var,{991,76},'Acc'}]}]}]}}]},
          {var,{992,24},'Acc0'},
          {var,{992,30},'Uses'}]}]},
      {clause,
       {993,9},
       [{atom,{993,9},false}],
       [],
       [{debug_line,994,442},
        {call,
         {994,13},
         {atom,{994,13},add_opt_info},
         [{var,{994,26},'Anno'},
          {var,{994,32},'Where'},
          {var,{994,39},'Acc0'}]}]}]}]},
  {clause,
   {996,1},
   [{tuple,
     {996,20},
     [{atom,{996,20},b_ret},{var,{996,32},'Anno'},{var,{996,20},'_'}]},
    {var,{996,39},'Where'},
    {var,{996,46},'_UseMap'},
    {var,{996,55},'Acc'}],
   [],
   [{debug_line,997,443},
    {call,
     {997,5},
     {atom,{997,5},add_opt_info},
     [{var,{997,18},'Anno'},{var,{997,24},'Where'},{var,{997,31},'Acc'}]}]},
  {clause,
   {998,1},
   [{var,{998,20},'_I'},
    {var,{998,24},'_Where'},
    {var,{998,32},'_Uses'},
    {var,{998,39},'Acc'}],
   [],
   [{debug_line,999,444},{var,{999,5},'Acc'}]}]}.
{function,
    {1001,1},
    add_opt_info,3,
    [{clause,
         {1001,1},
         [{var,{1001,1},'_'},{var,{1001,1},'_'},{var,{1001,1},'_'}],
         [[{call,
               {1001,1},
               {remote,
                   {1001,1},
                   {atom,{1001,1},fake},
                   {atom,{1001,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1001,445},{atom,{1001,1},ignore}]},
     {clause,
         {1001,1},
         [{var,{1001,14},'Anno'},
          {var,{1001,20},'Where'},
          {var,{1001,27},'Acc'}],
         [],
         [{debug_line,1002,446},
          {'case',
              {1002,5},
              {call,
                  {1002,10},
                  {remote,
                      {1002,14},
                      {atom,{1002,10},maps},
                      {atom,{1002,15},find}},
                  [{atom,{1002,20},bsm_info},{var,{1002,30},'Anno'}]},
              [{clause,
                   {1003,9},
                   [{tuple,
                        {1003,9},
                        [{atom,{1003,10},ok},{var,{1003,14},'Term'}]}],
                   [],
                   [{debug_line,1003,447},
                    {cons,
                        {1003,23},
                        {call,
                            {1003,24},
                            {atom,{1003,24},make_warning},
                            [{var,{1003,37},'Term'},
                             {var,{1003,43},'Anno'},
                             {var,{1003,49},'Where'}]},
                        {var,{1003,58},'Acc'}}]},
               {clause,
                   {1004,9},
                   [{atom,{1004,9},error}],
                   [],
                   [{debug_line,1004,448},{var,{1004,18},'Acc'}]}]}]}]}.
{function,
    {1014,1},
    add_unopt_binary_info,5,
    [{clause,
         {1014,1},
         [{var,{1014,1},'_'},
          {var,{1014,1},'_'},
          {var,{1014,1},'_'},
          {var,{1014,1},'_'},
          {var,{1014,1},'_'}],
         [[{call,
               {1014,1},
               {remote,
                   {1014,1},
                   {atom,{1014,1},fake},
                   {atom,{1014,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1014,449},{atom,{1014,1},ignore}]},
     {clause,
         {1014,1},
         [{tuple,
              {1014,23},
              [{atom,{1014,23},b_set},
               {var,{1014,23},'_'},
               {var,{1014,44},'Dst'},
               {var,{1014,33},'Follow'},
               {var,{1014,23},'_'}]},
          {var,{1014,50},'_Nested'},
          {var,{1014,59},'Where'},
          {var,{1014,66},'UseMap'},
          {var,{1014,74},'Acc0'}],
         [[{op,{1015,15},
               '=:=',
               {var,{1015,8},'Follow'},
               {atom,{1015,19},put_tuple}}],
          [{op,{1016,15},
               '=:=',
               {var,{1016,8},'Follow'},
               {atom,{1016,19},put_list}}],
          [{op,{1017,15},
               '=:=',
               {var,{1017,8},'Follow'},
               {atom,{1017,19},put_map}}]],
         [{debug_line,1019,450},
          {match,
              {1019,5},
              {tuple,{1019,5},[{var,{1019,6},'_'},{var,{1019,9},'Uses'}]},
              {call,
                  {1019,17},
                  {remote,
                      {1019,17},
                      {atom,{1019,17},lists},
                      {atom,{1019,17},unzip}},
                  [{block,0,
                       [{call,
                            {1019,23},
                            {remote,
                                {1019,27},
                                {atom,{1019,23},maps},
                                {atom,{1019,28},get}},
                            [{var,{1019,32},'Dst'},
                             {var,{1019,37},'UseMap'},
                             {nil,{1019,45}}]}]}]}},
          {debug_line,1020,451},
          {call,
              {1020,5},
              {remote,{1020,5},{atom,{1020,5},lists},{atom,{1020,5},foldl}},
              [{block,0,
                   [{'fun',
                        {1020,11},
                        {clauses,
                            [{clause,
                                 {1020,14},
                                 [{var,{1020,15},'Use'},{var,{1020,20},'Acc'}],
                                 [],
                                 [{debug_line,1021,452},
                                  {call,
                                      {1021,19},
                                      {atom,{1021,19},add_unopt_binary_info},
                                      [{var,{1021,41},'Use'},
                                       {atom,{1021,46},true},
                                       {var,{1021,52},'Where'},
                                       {var,{1021,59},'UseMap'},
                                       {var,{1021,67},'Acc'}]}]}]}}]},
               {var,{1022,16},'Acc0'},
               {var,{1022,22},'Uses'}]}]},
     {clause,
         {1023,1},
         [{tuple,
              {1023,23},
              [{atom,{1023,23},b_set},
               {var,{1023,23},'_'},
               {var,{1023,44},'Dst'},
               {var,{1023,33},'Follow'},
               {var,{1023,23},'_'}]},
          {var,{1023,50},'Nested'},
          {var,{1023,58},'Where'},
          {var,{1023,65},'UseMap'},
          {var,{1023,73},'Acc0'}],
         [[{op,{1024,15},
               '=:=',
               {var,{1024,8},'Follow'},
               {atom,{1024,19},bs_extract}}],
          [{op,{1025,15},'=:=',{var,{1025,8},'Follow'},{atom,{1025,19},phi}}]],
         [{debug_line,1027,453},
          {match,
              {1027,5},
              {tuple,{1027,5},[{var,{1027,6},'_'},{var,{1027,9},'Uses'}]},
              {call,
                  {1027,17},
                  {remote,
                      {1027,17},
                      {atom,{1027,17},lists},
                      {atom,{1027,17},unzip}},
                  [{block,0,
                       [{call,
                            {1027,23},
                            {remote,
                                {1027,27},
                                {atom,{1027,23},maps},
                                {atom,{1027,28},get}},
                            [{var,{1027,32},'Dst'},
                             {var,{1027,37},'UseMap'},
                             {nil,{1027,45}}]}]}]}},
          {debug_line,1028,454},
          {call,
              {1028,5},
              {remote,{1028,5},{atom,{1028,5},lists},{atom,{1028,5},foldl}},
              [{block,0,
                   [{'fun',
                        {1028,11},
                        {clauses,
                            [{clause,
                                 {1028,14},
                                 [{var,{1028,15},'Use'},{var,{1028,20},'Acc'}],
                                 [],
                                 [{debug_line,1029,455},
                                  {call,
                                      {1029,19},
                                      {atom,{1029,19},add_unopt_binary_info},
                                      [{var,{1029,41},'Use'},
                                       {var,{1029,46},'Nested'},
                                       {var,{1029,54},'Where'},
                                       {var,{1029,61},'UseMap'},
                                       {var,{1029,69},'Acc'}]}]}]}}]},
               {var,{1030,16},'Acc0'},
               {var,{1030,22},'Uses'}]}]},
     {clause,
         {1031,1},
         [{tuple,
              {1031,23},
              [{atom,{1031,23},b_set},
               {var,{1031,23},'_'},
               {var,{1031,23},'_'},
               {atom,{1031,33},match_fail},
               {var,{1031,23},'_'}]},
          {var,{1031,46},'_Nested'},
          {var,{1031,55},'_Where'},
          {var,{1031,63},'_UseMap'},
          {var,{1031,72},'Acc'}],
         [],
         [{debug_line,1032,456},{var,{1032,5},'Acc'}]},
     {clause,
         {1033,1},
         [{match,
              {1033,23},
              {tuple,
                  {1033,23},
                  [{atom,{1033,23},b_switch},
                   {var,{1033,38},'Anno'},
                   {var,{1033,23},'_'},
                   {var,{1033,23},'_'},
                   {var,{1033,23},'_'}]},
              {var,{1033,44},'I'}},
          {var,{1033,47},'Nested'},
          {var,{1033,55},'Where'},
          {var,{1033,62},'_UseMap'},
          {var,{1033,71},'Acc'}],
         [],
         [{debug_line,1034,457},
          {cons,
              {1034,5},
              {call,
                  {1034,6},
                  {atom,{1034,6},make_promotion_warning},
                  [{var,{1034,29},'I'},
                   {var,{1034,32},'Nested'},
                   {var,{1034,40},'Anno'},
                   {var,{1034,46},'Where'}]},
              {var,{1034,55},'Acc'}}]},
     {clause,
         {1035,1},
         [{match,
              {1035,23},
              {tuple,
                  {1035,23},
                  [{atom,{1035,23},b_set},
                   {var,{1035,35},'Anno'},
                   {var,{1035,23},'_'},
                   {var,{1035,23},'_'},
                   {var,{1035,23},'_'}]},
              {var,{1035,41},'I'}},
          {var,{1035,44},'Nested'},
          {var,{1035,52},'Where'},
          {var,{1035,59},'_UseMap'},
          {var,{1035,68},'Acc'}],
         [],
         [{debug_line,1036,458},
          {cons,
              {1036,5},
              {call,
                  {1036,6},
                  {atom,{1036,6},make_promotion_warning},
                  [{var,{1036,29},'I'},
                   {var,{1036,32},'Nested'},
                   {var,{1036,40},'Anno'},
                   {var,{1036,46},'Where'}]},
              {var,{1036,55},'Acc'}}]},
     {clause,
         {1037,1},
         [{match,
              {1037,23},
              {tuple,
                  {1037,23},
                  [{atom,{1037,23},b_ret},
                   {var,{1037,35},'Anno'},
                   {var,{1037,23},'_'}]},
              {var,{1037,41},'I'}},
          {var,{1037,44},'Nested'},
          {var,{1037,52},'Where'},
          {var,{1037,59},'_UseMap'},
          {var,{1037,68},'Acc'}],
         [],
         [{debug_line,1038,459},
          {cons,
              {1038,5},
              {call,
                  {1038,6},
                  {atom,{1038,6},make_promotion_warning},
                  [{var,{1038,29},'I'},
                   {var,{1038,32},'Nested'},
                   {var,{1038,40},'Anno'},
                   {var,{1038,46},'Where'}]},
              {var,{1038,55},'Acc'}}]},
     {clause,
         {1039,1},
         [{match,
              {1039,23},
              {tuple,
                  {1039,23},
                  [{atom,{1039,23},b_br},
                   {var,{1039,34},'Anno'},
                   {var,{1039,23},'_'},
                   {var,{1039,23},'_'},
                   {var,{1039,23},'_'}]},
              {var,{1039,40},'I'}},
          {var,{1039,43},'Nested'},
          {var,{1039,51},'Where'},
          {var,{1039,58},'_UseMap'},
          {var,{1039,67},'Acc'}],
         [],
         [{debug_line,1040,460},
          {cons,
              {1040,5},
              {call,
                  {1040,6},
                  {atom,{1040,6},make_promotion_warning},
                  [{var,{1040,29},'I'},
                   {var,{1040,32},'Nested'},
                   {var,{1040,40},'Anno'},
                   {var,{1040,46},'Where'}]},
              {var,{1040,55},'Acc'}}]}]}.
{function,
    {1042,1},
    make_promotion_warning,4,
    [{clause,
         {1042,1},
         [{var,{1042,1},'_'},
          {var,{1042,1},'_'},
          {var,{1042,1},'_'},
          {var,{1042,1},'_'}],
         [[{call,
               {1042,1},
               {remote,
                   {1042,1},
                   {atom,{1042,1},fake},
                   {atom,{1042,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1042,461},{atom,{1042,1},ignore}]},
     {clause,
         {1042,1},
         [{var,{1042,24},'I'},
          {var,{1042,27},'Nested'},
          {var,{1042,35},'Anno'},
          {var,{1042,41},'Where'}],
         [],
         [{debug_line,1043,462},
          {call,
              {1043,5},
              {atom,{1043,5},make_warning},
              [{block,0,
                   [{tuple,
                        {1043,18},
                        [{atom,{1043,19},binary_created},
                         {var,{1043,35},'I'},
                         {var,{1043,38},'Nested'}]}]},
               {var,{1043,47},'Anno'},
               {var,{1043,53},'Where'}]}]}]}.
{function,
    {1045,1},
    make_warning,3,
    [{clause,
         {1045,1},
         [{var,{1045,1},'_'},{var,{1045,1},'_'},{var,{1045,1},'_'}],
         [[{call,
               {1045,1},
               {remote,
                   {1045,1},
                   {atom,{1045,1},fake},
                   {atom,{1045,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1045,463},{atom,{1045,1},ignore}]},
     {clause,
         {1045,1},
         [{var,{1045,14},'Term'},
          {var,{1045,20},'Anno'},
          {var,{1045,26},'Where'}],
         [],
         [{debug_line,1046,464},
          {match,
              {1046,5},
              {tuple,{1046,5},[{var,{1046,6},'File'},{var,{1046,12},'Line'}]},
              {'case',
                  {1047,9},
                  {call,
                      {1047,14},
                      {remote,
                          {1047,18},
                          {atom,{1047,14},maps},
                          {atom,{1047,19},get}},
                      [{atom,{1047,23},location},
                       {var,{1047,33},'Anno'},
                       {var,{1047,39},'Where'}]},
                  [{clause,
                       {1048,13},
                       [{match,
                            {1048,13},
                            {tuple,
                                {1048,13},
                                [{var,{1048,14},'_'},{var,{1048,17},'_'}]},
                            {var,{1048,22},'Location'}}],
                       [],
                       [{debug_line,1048,465},{var,{1048,34},'Location'}]},
                   {clause,
                       {1049,13},
                       [{var,{1049,13},'_'}],
                       [],
                       [{debug_line,1049,466},
                        {tuple,
                            {1049,18},
                            [{string,{1049,19},"no_file"},
                             {atom,{1049,30},none}]}]}]}},
          {debug_line,1051,467},
          {tuple,
              {1051,5},
              [{var,{1051,6},'File'},
               {cons,
                   {1051,11},
                   {tuple,
                       {1051,12},
                       [{var,{1051,13},'Line'},
                        {atom,{1051,19},beam_ssa_bsm},
                        {var,{1051,26},'Term'}]},
                   {nil,{1051,31}}}]}]}]}.
{function,
    {1053,1},
    format_opt_info,1,
    [{clause,
         {1053,1},
         [{var,{1053,1},'_'}],
         [[{call,
               {1053,1},
               {remote,
                   {1053,1},
                   {atom,{1053,1},fake},
                   {atom,{1053,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1053,468},{atom,{1053,1},ignore}]},
     {clause,
         {1053,1},
         [{atom,{1053,17},context_reused}],
         [],
         [{debug_line,1054,469},
          {string,{1054,5},"OPTIMIZED: match context reused"}]},
     {clause,
         {1055,1},
         [{match,
              {1055,17},
              {tuple,
                  {1055,17},
                  [{atom,{1055,18},binary_created},
                   {var,{1055,34},'_'},
                   {var,{1055,37},'_'}]},
              {var,{1055,40},'Promotion'}}],
         [],
         [{debug_line,1056,470},
          {call,
              {1056,5},
              {remote,
                  {1056,11},
                  {atom,{1056,5},io_lib},
                  {atom,{1056,12},format}},
              [{block,0,[{string,{1056,19},"BINARY CREATED: ~s"}]},
               {block,0,
                   [{cons,
                        {1056,41},
                        {call,
                            {1056,42},
                            {atom,{1056,42},format_opt_info_1},
                            [{var,{1056,60},'Promotion'}]},
                        {nil,{1056,70}}}]}]}]},
     {clause,
         {1057,1},
         [{var,{1057,17},'Other'}],
         [],
         [{debug_line,1058,471},
          {call,
              {1058,5},
              {remote,
                  {1058,11},
                  {atom,{1058,5},io_lib},
                  {atom,{1058,12},format}},
              [{block,0,[{string,{1058,19},"NOT OPTIMIZED: ~s"}]},
               {block,0,
                   [{cons,
                        {1058,40},
                        {call,
                            {1058,41},
                            {atom,{1058,41},format_opt_info_1},
                            [{var,{1058,59},'Other'}]},
                        {nil,{1058,65}}}]}]}]}]}.
{function,
    {1060,1},
    format_opt_info_1,1,
    [{clause,
         {1060,1},
         [{var,{1060,1},'_'}],
         [[{call,
               {1060,1},
               {remote,
                   {1060,1},
                   {atom,{1060,1},fake},
                   {atom,{1060,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1060,472},{atom,{1060,1},ignore}]},
     {clause,
         {1060,1},
         [{tuple,
              {1060,19},
              [{atom,{1060,20},binary_created},
               {tuple,
                   {1060,36},
                   [{atom,{1060,36},b_set},
                    {var,{1060,36},'_'},
                    {var,{1060,36},'_'},
                    {atom,{1060,46},call},
                    {cons,
                        {1060,56},
                        {var,{1060,57},'Call'},
                        {var,{1060,62},'_'}}]},
               {atom,{1060,67},false}]}],
         [],
         [{debug_line,1061,473},
          {call,
              {1061,5},
              {remote,
                  {1061,11},
                  {atom,{1061,5},io_lib},
                  {atom,{1061,12},format}},
              [{block,0,
                   [{string,
                        {1061,19},
                        "binary is used in call to ~s which doesn't support context reuse"}]},
               {block,0,
                   [{debug_line,1062,474},
                    {cons,
                        {1062,36},
                        {call,
                            {1062,37},
                            {atom,{1062,37},format_call},
                            [{var,{1062,49},'Call'}]},
                        {nil,{1062,54}}}]}]}]},
     {clause,
         {1063,1},
         [{tuple,
              {1063,19},
              [{atom,{1063,20},binary_created},
               {tuple,
                   {1063,36},
                   [{atom,{1063,36},b_set},
                    {var,{1063,36},'_'},
                    {var,{1063,36},'_'},
                    {atom,{1063,46},call},
                    {cons,
                        {1063,56},
                        {var,{1063,57},'Call'},
                        {var,{1063,62},'_'}}]},
               {atom,{1063,67},true}]}],
         [],
         [{debug_line,1064,475},
          {call,
              {1064,5},
              {remote,
                  {1064,11},
                  {atom,{1064,5},io_lib},
                  {atom,{1064,12},format}},
              [{block,0,
                   [{string,{1064,19},"binary is used in term passed to ~s"}]},
               {block,0,
                   [{debug_line,1065,476},
                    {cons,
                        {1065,19},
                        {call,
                            {1065,20},
                            {atom,{1065,20},format_call},
                            [{var,{1065,32},'Call'}]},
                        {nil,{1065,37}}}]}]}]},
     {clause,
         {1066,1},
         [{tuple,
              {1066,19},
              [{atom,{1066,20},binary_created},
               {tuple,
                   {1066,36},
                   [{atom,{1066,36},b_set},
                    {var,{1066,36},'_'},
                    {var,{1066,36},'_'},
                    {tuple,
                        {1066,46},
                        [{atom,{1066,47},bif},{var,{1066,52},'BIF'}]},
                    {var,{1066,62},'Args'}]},
               {atom,{1066,69},false}]}],
         [],
         [{debug_line,1067,477},
          {call,
              {1067,5},
              {remote,
                  {1067,11},
                  {atom,{1067,5},io_lib},
                  {atom,{1067,12},format}},
              [{block,0,
                   [{string,
                        {1067,19},
                        "binary is used in ~p/~p which doesn't support context reuse"}]},
               {block,0,
                   [{debug_line,1068,478},
                    {cons,
                        {1068,28},
                        {var,{1068,29},'BIF'},
                        {cons,
                            {1068,34},
                            {call,
                                {1068,34},
                                {remote,
                                    {1068,34},
                                    {atom,{1068,34},erlang},
                                    {atom,{1068,34},length}},
                                [{var,{1068,41},'Args'}]},
                            {nil,{1068,46}}}}]}]}]},
     {clause,
         {1069,1},
         [{tuple,
              {1069,19},
              [{atom,{1069,20},binary_created},
               {tuple,
                   {1069,36},
                   [{atom,{1069,36},b_set},
                    {var,{1069,36},'_'},
                    {var,{1069,36},'_'},
                    {tuple,
                        {1069,46},
                        [{atom,{1069,47},bif},{var,{1069,52},'BIF'}]},
                    {var,{1069,62},'Args'}]},
               {atom,{1069,69},true}]}],
         [],
         [{debug_line,1070,479},
          {call,
              {1070,5},
              {remote,
                  {1070,11},
                  {atom,{1070,5},io_lib},
                  {atom,{1070,12},format}},
              [{block,0,
                   [{string,
                        {1070,19},
                        "binary is used in term passed to ~p/~p"}]},
               {block,0,
                   [{debug_line,1071,480},
                    {cons,
                        {1071,19},
                        {var,{1071,20},'BIF'},
                        {cons,
                            {1071,25},
                            {call,
                                {1071,25},
                                {remote,
                                    {1071,25},
                                    {atom,{1071,25},erlang},
                                    {atom,{1071,25},length}},
                                [{var,{1071,32},'Args'}]},
                            {nil,{1071,37}}}}]}]}]},
     {clause,
         {1072,1},
         [{tuple,
              {1072,19},
              [{atom,{1072,20},binary_created},
               {tuple,
                   {1072,36},
                   [{atom,{1072,36},b_set},
                    {var,{1072,36},'_'},
                    {var,{1072,36},'_'},
                    {var,{1072,46},'Op'},
                    {var,{1072,36},'_'}]},
               {atom,{1072,51},false}]}],
         [],
         [{debug_line,1073,481},
          {call,
              {1073,5},
              {remote,
                  {1073,11},
                  {atom,{1073,5},io_lib},
                  {atom,{1073,12},format}},
              [{block,0,
                   [{string,
                        {1073,19},
                        "binary is used in '~p' which doesn't support context reuse"}]},
               {block,0,
                   [{debug_line,1074,482},
                    {cons,
                        {1074,28},
                        {var,{1074,29},'Op'},
                        {nil,{1074,31}}}]}]}]},
     {clause,
         {1075,1},
         [{tuple,
              {1075,19},
              [{atom,{1075,20},binary_created},
               {tuple,
                   {1075,36},
                   [{atom,{1075,36},b_set},
                    {var,{1075,36},'_'},
                    {var,{1075,36},'_'},
                    {var,{1075,46},'Op'},
                    {var,{1075,36},'_'}]},
               {atom,{1075,51},true}]}],
         [],
         [{debug_line,1076,483},
          {call,
              {1076,5},
              {remote,
                  {1076,11},
                  {atom,{1076,5},io_lib},
                  {atom,{1076,12},format}},
              [{block,0,
                   [{string,
                        {1076,19},
                        "binary is used in term passed to '~p'"}]},
               {block,0,
                   [{cons,
                        {1076,60},
                        {var,{1076,61},'Op'},
                        {nil,{1076,63}}}]}]}]},
     {clause,
         {1077,1},
         [{tuple,
              {1077,19},
              [{atom,{1077,20},binary_created},
               {tuple,
                   {1077,36},
                   [{atom,{1077,36},b_ret},
                    {var,{1077,36},'_'},
                    {var,{1077,36},'_'}]},
               {atom,{1077,46},false}]}],
         [],
         [{debug_line,1078,484},
          {call,
              {1078,5},
              {remote,
                  {1078,11},
                  {atom,{1078,5},io_lib},
                  {atom,{1078,12},format}},
              [{block,0,
                   [{string,
                        {1078,19},
                        "binary is returned from the function"}]},
               {nil,{1078,59}}]}]},
     {clause,
         {1079,1},
         [{tuple,
              {1079,19},
              [{atom,{1079,20},binary_created},
               {tuple,
                   {1079,36},
                   [{atom,{1079,36},b_ret},
                    {var,{1079,36},'_'},
                    {var,{1079,36},'_'}]},
               {atom,{1079,46},true}]}],
         [],
         [{debug_line,1080,485},
          {call,
              {1080,5},
              {remote,
                  {1080,11},
                  {atom,{1080,5},io_lib},
                  {atom,{1080,12},format}},
              [{block,0,
                   [{string,
                        {1080,19},
                        "binary is used in a term that is returned from the function"}]},
               {nil,{1081,31}}]}]},
     {clause,
         {1082,1},
         [{tuple,
              {1082,19},
              [{atom,{1082,20},unsuitable_call},
               {tuple,
                   {1082,37},
                   [{var,{1082,38},'Call'},{var,{1082,44},'Inner'}]}]}],
         [],
         [{debug_line,1083,486},
          {call,
              {1083,5},
              {remote,
                  {1083,11},
                  {atom,{1083,5},io_lib},
                  {atom,{1083,12},format}},
              [{block,0,
                   [{string,{1083,19},"binary used in call to ~s, where ~s"}]},
               {block,0,
                   [{debug_line,1084,487},
                    {cons,
                        {1084,19},
                        {call,
                            {1084,20},
                            {atom,{1084,20},format_call},
                            [{var,{1084,32},'Call'}]},
                        {cons,
                            {1084,39},
                            {call,
                                {1084,39},
                                {atom,{1084,39},format_opt_info_1},
                                [{var,{1084,57},'Inner'}]},
                            {nil,{1084,63}}}}]}]}]},
     {clause,
         {1085,1},
         [{tuple,
              {1085,19},
              [{atom,{1085,20},remote_call},{var,{1085,33},'Call'}]}],
         [],
         [{debug_line,1086,488},
          {call,
              {1086,5},
              {remote,
                  {1086,11},
                  {atom,{1086,5},io_lib},
                  {atom,{1086,12},format}},
              [{block,0,
                   [{string,{1086,19},"binary is used in remote call to ~s"}]},
               {block,0,
                   [{cons,
                        {1086,58},
                        {call,
                            {1086,59},
                            {atom,{1086,59},format_call},
                            [{var,{1086,71},'Call'}]},
                        {nil,{1086,76}}}]}]}]},
     {clause,
         {1087,1},
         [{tuple,
              {1087,19},
              [{atom,{1087,20},fun_call},{var,{1087,30},'Call'}]}],
         [],
         [{debug_line,1088,489},
          {call,
              {1088,5},
              {remote,
                  {1088,11},
                  {atom,{1088,5},io_lib},
                  {atom,{1088,12},format}},
              [{block,0,
                   [{string,{1088,19},"binary is used in fun call (~s)"}]},
               {block,0,
                   [{debug_line,1089,490},
                    {cons,
                        {1089,19},
                        {call,
                            {1089,20},
                            {atom,{1089,20},format_call},
                            [{var,{1089,32},'Call'}]},
                        {nil,{1089,37}}}]}]}]},
     {clause,
         {1090,1},
         [{tuple,
              {1090,19},
              [{atom,{1090,20},multiple_uses_in_call},
               {var,{1090,43},'Call'}]}],
         [],
         [{debug_line,1091,491},
          {call,
              {1091,5},
              {remote,
                  {1091,11},
                  {atom,{1091,5},io_lib},
                  {atom,{1091,12},format}},
              [{block,0,
                   [{string,
                        {1091,19},
                        "binary is passed as multiple arguments to ~s"}]},
               {block,0,
                   [{debug_line,1092,492},
                    {cons,
                        {1092,19},
                        {call,
                            {1092,20},
                            {atom,{1092,20},format_call},
                            [{var,{1092,32},'Call'}]},
                        {nil,{1092,37}}}]}]}]},
     {clause,
         {1093,1},
         [{tuple,
              {1093,19},
              [{atom,{1093,20},no_match_on_entry},{var,{1093,39},'Call'}]}],
         [],
         [{debug_line,1094,493},
          {call,
              {1094,5},
              {remote,
                  {1094,11},
                  {atom,{1094,5},io_lib},
                  {atom,{1094,12},format}},
              [{block,0,
                   [{string,
                        {1094,19},
                        "binary is used in call to ~s which does not begin with a suitable binary match"}]},
               {block,0,
                   [{debug_line,1095,494},
                    {cons,
                        {1095,44},
                        {call,
                            {1095,45},
                            {atom,{1095,45},format_call},
                            [{var,{1095,57},'Call'}]},
                        {nil,{1095,62}}}]}]}]},
     {clause,
         {1096,1},
         [{tuple,
              {1096,19},
              [{atom,{1096,20},used_before_match},
               {tuple,
                   {1096,39},
                   [{atom,{1096,39},b_set},
                    {var,{1096,39},'_'},
                    {var,{1096,39},'_'},
                    {atom,{1096,49},call},
                    {cons,
                        {1096,59},
                        {var,{1096,60},'Call'},
                        {var,{1096,65},'_'}}]}]}],
         [],
         [{debug_line,1097,495},
          {call,
              {1097,5},
              {remote,
                  {1097,11},
                  {atom,{1097,5},io_lib},
                  {atom,{1097,12},format}},
              [{block,0,
                   [{string,
                        {1097,19},
                        "binary is used in call to ~s before being matched"}]},
               {block,0,
                   [{debug_line,1098,496},
                    {cons,
                        {1098,19},
                        {call,
                            {1098,20},
                            {atom,{1098,20},format_call},
                            [{var,{1098,32},'Call'}]},
                        {nil,{1098,37}}}]}]}]},
     {clause,
         {1099,1},
         [{tuple,
              {1099,19},
              [{atom,{1099,20},used_before_match},
               {tuple,
                   {1099,39},
                   [{atom,{1099,39},b_set},
                    {var,{1099,39},'_'},
                    {var,{1099,39},'_'},
                    {tuple,
                        {1099,49},
                        [{atom,{1099,50},bif},{var,{1099,55},'BIF'}]},
                    {var,{1099,65},'Args'}]}]}],
         [],
         [{debug_line,1100,497},
          {call,
              {1100,5},
              {remote,
                  {1100,11},
                  {atom,{1100,5},io_lib},
                  {atom,{1100,12},format}},
              [{block,0,
                   [{string,
                        {1100,19},
                        "binary is used in ~p/~p before being matched"}]},
               {block,0,
                   [{debug_line,1101,498},
                    {cons,
                        {1101,19},
                        {var,{1101,20},'BIF'},
                        {cons,
                            {1101,25},
                            {call,
                                {1101,25},
                                {remote,
                                    {1101,25},
                                    {atom,{1101,25},erlang},
                                    {atom,{1101,25},length}},
                                [{var,{1101,32},'Args'}]},
                            {nil,{1101,37}}}}]}]}]},
     {clause,
         {1102,1},
         [{tuple,
              {1102,19},
              [{atom,{1102,20},used_before_match},
               {tuple,
                   {1102,39},
                   [{atom,{1102,39},b_set},
                    {var,{1102,39},'_'},
                    {var,{1102,39},'_'},
                    {atom,{1102,49},phi},
                    {var,{1102,39},'_'}]}]}],
         [],
         [{debug_line,1103,499},
          {call,
              {1103,5},
              {remote,
                  {1103,11},
                  {atom,{1103,5},io_lib},
                  {atom,{1103,12},format}},
              [{block,0,
                   [{string,
                        {1103,19},
                        "binary is returned from an expression before being matched"}]},
               {nil,{1104,30}}]}]},
     {clause,
         {1105,1},
         [{tuple,
              {1105,19},
              [{atom,{1105,20},used_before_match},
               {tuple,
                   {1105,39},
                   [{atom,{1105,39},b_set},
                    {var,{1105,39},'_'},
                    {var,{1105,39},'_'},
                    {var,{1105,49},'Op'},
                    {var,{1105,39},'_'}]}]}],
         [],
         [{debug_line,1106,500},
          {call,
              {1106,5},
              {remote,
                  {1106,11},
                  {atom,{1106,5},io_lib},
                  {atom,{1106,12},format}},
              [{block,0,
                   [{string,
                        {1106,19},
                        "binary is used in '~p' before being matched"}]},
               {block,0,
                   [{cons,
                        {1106,65},
                        {var,{1106,66},'Op'},
                        {nil,{1106,68}}}]}]}]},
     {clause,
         {1107,1},
         [{var,{1107,19},'Term'}],
         [],
         [{debug_line,1108,501},
          {call,
              {1108,5},
              {remote,
                  {1108,11},
                  {atom,{1108,5},io_lib},
                  {atom,{1108,12},format}},
              [{block,0,[{string,{1108,19},"~w"}]},
               {block,0,
                   [{cons,
                        {1108,25},
                        {var,{1108,26},'Term'},
                        {nil,{1108,30}}}]}]}]}]}.
{function,
    {1110,1},
    format_call,1,
    [{clause,
         {1110,1},
         [{var,{1110,1},'_'}],
         [[{call,
               {1110,1},
               {remote,
                   {1110,1},
                   {atom,{1110,1},fake},
                   {atom,{1110,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1110,502},{atom,{1110,1},ignore}]},
     {clause,
         {1110,1},
         [{tuple,
              {1110,13},
              [{atom,{1110,13},b_local},
               {tuple,
                   {1110,27},
                   [{atom,{1110,27},b_literal},{var,{1110,42},'F'}]},
               {var,{1110,51},'A'}]}],
         [],
         [{debug_line,1111,503},
          {call,
              {1111,5},
              {remote,
                  {1111,11},
                  {atom,{1111,5},io_lib},
                  {atom,{1111,12},format}},
              [{block,0,[{string,{1111,19},"~p/~p"}]},
               {block,0,
                   [{cons,
                        {1111,28},
                        {var,{1111,29},'F'},
                        {cons,
                            {1111,32},
                            {var,{1111,32},'A'},
                            {nil,{1111,33}}}}]}]}]},
     {clause,
         {1112,1},
         [{tuple,
              {1112,13},
              [{atom,{1112,13},b_remote},
               {tuple,
                   {1112,27},
                   [{atom,{1112,27},b_literal},{var,{1112,42},'M'}]},
               {tuple,
                   {1112,50},
                   [{atom,{1112,50},b_literal},{var,{1112,65},'F'}]},
               {var,{1112,74},'A'}]}],
         [],
         [{debug_line,1113,504},
          {call,
              {1113,5},
              {remote,
                  {1113,11},
                  {atom,{1113,5},io_lib},
                  {atom,{1113,12},format}},
              [{block,0,[{string,{1113,19},"~p:~p/~p"}]},
               {block,0,
                   [{cons,
                        {1113,31},
                        {var,{1113,32},'M'},
                        {cons,
                            {1113,35},
                            {var,{1113,35},'F'},
                            {cons,
                                {1113,38},
                                {var,{1113,38},'A'},
                                {nil,{1113,39}}}}}]}]}]},
     {clause,
         {1114,1},
         [{var,{1114,13},'Fun'}],
         [],
         [{debug_line,1115,505},
          {call,
              {1115,5},
              {remote,
                  {1115,11},
                  {atom,{1115,5},io_lib},
                  {atom,{1115,12},format}},
              [{block,0,[{string,{1115,19},"~p"}]},
               {block,0,
                   [{cons,
                        {1115,25},
                        {var,{1115,26},'Fun'},
                        {nil,{1115,29}}}]}]}]}]}.
{eof,{1116,1}}.
