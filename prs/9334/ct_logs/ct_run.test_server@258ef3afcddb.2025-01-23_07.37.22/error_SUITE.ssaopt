module error_SUITE.
exports [{all,0},
         {bad_decls,1},
         {bad_utf8,1},
         {bif_clashes,1},
         {end_per_group,2},
         {end_per_suite,1},
         {groups,0},
         {head_mismatch_line,1},
         {head_mismatch_same_function_name,1},
         {init_per_group,2},
         {init_per_suite,1},
         {maps_warnings,1},
         {module_info,0},
         {module_info,1},
         {parse_transform,2},
         {suite,0},
         {transforms,1},
         {warnings_as_errors,1}].
attributes [].

%% error_SUITE.erl:31
%% Counter = 4
%% bs_ensure_opt: true
function `error_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')})
  ret `[{ct_hooks,[ts_install_cth]}]`
}

%% error_SUITE.erl:33
%% Counter = 4
%% bs_ensure_opt: true
function `error_SUITE`:`all`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'p'})
  ret `[{group,p}]`
}

%% error_SUITE.erl:36
%% Counter = 7
%% bs_ensure_opt: true
function `error_SUITE`:`groups`() {
0:
  %% error_SUITE.erl:37
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[head_mismatch_line,head_mismatch_same_function_name,warnings_as_errors,
  bif_clashes,transforms,maps_warnings,bad_utf8,bad_decls]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% error_SUITE.erl:42
%% Counter = 6
%% bs_ensure_opt: true
function `error_SUITE`:`init_per_suite`(_0) {
0:
  %% error_SUITE.erl:43
  _2 = call (`test_lib`:`recompile`/1), `error_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% error_SUITE.erl:46
%% Counter = 4
%% bs_ensure_opt: true
function `error_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% error_SUITE.erl:49
%% Counter = 4
%% bs_ensure_opt: true
function `error_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% error_SUITE.erl:52
%% Counter = 4
%% bs_ensure_opt: true
function `error_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% error_SUITE.erl:56
%% Counter = 89
%% bs_ensure_opt: true
function `error_SUITE`:`bif_clashes`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _42 = bif:is_list _0
  br _42, ^42, ^41

42:
  %% error_SUITE.erl:69
  %% Aliased:
  %%    _0
  _20 = call (`run`/2), _0, `[{bif_clashes1,<<"\n              -export([t/0]).\n              t() ->\n                 length([a,b,c]).\n\n              length(X) ->\n               erlang:length(X).\n             ">>,
                [return_warnings],
                {warning,[{{4,18},
                           erl_lint,
                           {call_to_redefined_bif,{length,1}}}]}}]`

  %% Aliased:
  %%    _20
  _43 = succeeded:body _20
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _86 = bif:'=:=' _20, `[]`
  br _86, ^86, ^45

86:
  %% error_SUITE.erl:80
  %% Aliased:
  %%    _0
  _21 = call (`run`/2), _0, `[{bif_clashes2,<<"\n              -export([t/0]).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n             ">>,
                [return_warnings],
                {warning,[{{3,16},
                           erl_lint,
                           {redefine_bif_import,{length,1}}}]}}]`

  %% Aliased:
  %%    _21
  _46 = succeeded:body _21
  br _46, ^46, ^1

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _84 = bif:'=:=' _21, `[]`
  br _84, ^84, ^48

84:
  %% error_SUITE.erl:93
  %% Aliased:
  %%    _0
  _22 = call (`run`/2), _0, `[{bif_clashes3,<<"\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              t() ->\n                 length([a,b,c]).\n\n              length(X) ->\n               erlang:length(X).\n             ">>,
                [return_warnings],
                []}]`

  %% Aliased:
  %%    _22
  _49 = succeeded:body _22
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _82 = bif:'=:=' _22, `[]`
  br _82, ^82, ^51

82:
  %% error_SUITE.erl:104
  %% Aliased:
  %%    _0
  _23 = call (`run`/2), _0, `[{bif_clashes4,<<"\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n             ">>,
                [return_warnings],
                []}]`

  %% Aliased:
  %%    _23
  _52 = succeeded:body _23
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _80 = bif:'=:=' _23, `[]`
  br _80, ^80, ^54

80:
  %% error_SUITE.erl:117
  %% Aliased:
  %%    _0
  _24 = call (`run`/2), _0, `[{bif_clashes5,<<"\n              -export([t/0]).\n              t() ->\n                 binary_part(<<1,2,3,4>>,1,2).\n\n              binary_part(X,Y,Z) ->\n               erlang:binary_part(X,Y,Z).\n             ">>,
                [return_warnings],
                {warning,[{{4,18},
                           erl_lint,
                           {call_to_redefined_bif,{binary_part,3}}}]}}]`

  %% Aliased:
  %%    _24
  _55 = succeeded:body _24
  br _55, ^55, ^1

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _78 = bif:'=:=' _24, `[]`
  br _78, ^78, ^57

78:
  %% error_SUITE.erl:128
  %% Aliased:
  %%    _0
  _25 = call (`run`/2), _0, `[{bif_clashes6,<<"\n              -export([t/0]).\n              -import(x,[binary_part/3]).\n              t() ->\n                  binary_part(<<1,2,3,4>>,1,2).\n             ">>,
                [return_warnings],
                {warning,[{{3,16},
                           erl_lint,
                           {redefine_bif_import,{binary_part,3}}}]}}]`

  %% Aliased:
  %%    _25
  _58 = succeeded:body _25
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _76 = bif:'=:=' _25, `[]`
  br _76, ^76, ^60

76:
  %% error_SUITE.erl:143
  %% Aliased:
  %%    _0
  _26 = call (`run2`/2), _0, `[{bif_clashes7,<<"\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n              length(X) ->\n                 erlang:length(X).\n             ">>,
                [],
                {error,[{{7,15},erl_lint,{define_import,{length,1}}}],[]}}]`

  %% Aliased:
  %%    _26
  _61 = succeeded:body _26
  br _61, ^61, ^1

61:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _74 = bif:'=:=' _26, `[]`
  br _74, ^74, ^63

74:
  %% error_SUITE.erl:157
  %% Aliased:
  %%    _0
  _27 = call (`run2`/2), _0, `[{bif_clashes8,<<"\n              -export([t/1]).\n              -compile({no_auto_import,[length/1]}).\n              t(X) when length(X) > 3 ->\n                 length([a,b,c]).\n              length(X) ->\n                 erlang:length(X).\n             ">>,
                [],
                {error,[{{4,25},
                         erl_lint,
                         {illegal_guard_local_call,{length,1}}}],
                       []}}]`

  %% Aliased:
  %%    _27
  _64 = succeeded:body _27
  br _64, ^64, ^1

64:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _72 = bif:'=:=' _27, `[]`
  br _72, ^72, ^66

72:
  %% error_SUITE.erl:170
  %% Aliased:
  %%    _0
  _28 = call (`run2`/2), _0, `[{bif_clashes9,<<"\n              -export([t/1]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t(X) when length(X) > 3 ->\n                 length([a,b,c]).\n             ">>,
                [],
                {error,[{{5,25},
                         erl_lint,
                         {illegal_guard_local_call,{length,1}}}],
                       []}}]`

  %% Aliased:
  %%    _28
  _67 = succeeded:body _28
  br _67, ^67, ^1

67:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _70 = bif:'=:=' _28, `[]`
  br _70, ^70, ^69

70:
  %% Result type:
  %%    'ok'
  ret `ok`

69:
  %% error_SUITE.erl:170
  %% Aliased:
  %%    _28
  _29 = match_fail `badmatch`, _28

  %% Unique:
  %%    _29
  _71 = succeeded:body _29
  br ^1

66:
  %% error_SUITE.erl:157
  %% Aliased:
  %%    _27
  _30 = match_fail `badmatch`, _27

  %% Unique:
  %%    _30
  _73 = succeeded:body _30
  br ^1

63:
  %% error_SUITE.erl:143
  %% Aliased:
  %%    _26
  _31 = match_fail `badmatch`, _26

  %% Unique:
  %%    _31
  _75 = succeeded:body _31
  br ^1

60:
  %% error_SUITE.erl:128
  %% Aliased:
  %%    _25
  _32 = match_fail `badmatch`, _25

  %% Unique:
  %%    _32
  _77 = succeeded:body _32
  br ^1

57:
  %% error_SUITE.erl:117
  %% Aliased:
  %%    _24
  _33 = match_fail `badmatch`, _24

  %% Unique:
  %%    _33
  _79 = succeeded:body _33
  br ^1

54:
  %% error_SUITE.erl:104
  %% Aliased:
  %%    _23
  _34 = match_fail `badmatch`, _23

  %% Unique:
  %%    _34
  _81 = succeeded:body _34
  br ^1

51:
  %% error_SUITE.erl:93
  %% Aliased:
  %%    _22
  _35 = match_fail `badmatch`, _22

  %% Unique:
  %%    _35
  _83 = succeeded:body _35
  br ^1

48:
  %% error_SUITE.erl:80
  %% Aliased:
  %%    _21
  _36 = match_fail `badmatch`, _21

  %% Unique:
  %%    _36
  _85 = succeeded:body _36
  br ^1

45:
  %% error_SUITE.erl:69
  %% Aliased:
  %%    _20
  _37 = match_fail `badmatch`, _20

  %% Unique:
  %%    _37
  _87 = succeeded:body _37
  br ^1

41:
  %% error_SUITE.erl:56
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-bif_clashes/1-',1}}
  _38 = match_fail `function_clause`, _0

  %% Unique:
  %%    _38
  _88 = succeeded:body _38
  br ^1

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% error_SUITE.erl:178
%% Counter = 42
%% bs_ensure_opt: true
function `error_SUITE`:`head_mismatch_line`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:is_list _0
  br _21, ^21, ^20

21:
  %% error_SUITE.erl:179
  %% Aliased:
  %%    _0
  _6 = call (`get_compilation_errors`/2), _0, `"head_mismatch_line"`

  %% Aliased:
  %%    _6
  _22 = succeeded:body _6
  br _22, ^22, ^1

22:
  %% Aliased:
  %%    _6
  _39 = is_nonempty_list _6
  br _39, ^39, ^24

39:
  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _8 = get_hd _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _35 = bif:is_tuple _8
  br _35, ^35, ^26

35:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _36 = bif:tuple_size _8

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `3`
  br _37, ^34, ^26

34:
  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `0`

  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _33 = bif:'=:=' _11, `{26,1}`
  br _33, ^33, ^26

33:
  %% Argument types:
  %%    _8 => {{26, 1}, any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `2`

  %% error_SUITE.erl:182
  %% Aliased:
  %%    _9
  _12 = call (`lists`:`flatten`/1), _9

  %% Aliased:
  %%    _12
  _27 = succeeded:body _12
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _12 => list(any())
  %% Aliased:
  %%    _12
  _31 = bif:'=:=' _12, `"head mismatch: previous function foo/1 is distinct from bar/1. Is the semicolon in foo/1 unwanted?"`
  br _31, ^31, ^29

31:
  %% error_SUITE.erl:183
  %% Aliased:
  %%    _9
  _13 = call (_10:`format_error`/1), _9

  %% Aliased:
  %%    _13
  _30 = succeeded:body _13
  br _30, ^30, ^1

30:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% error_SUITE.erl:181
  %% Aliased:
  %%    _12
  _14 = match_fail `badmatch`, _12

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br ^1

26:
  %% error_SUITE.erl:180
  %% Aliased:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _38 = succeeded:body _15
  br ^1

24:
  %% error_SUITE.erl:179
  %% Aliased:
  %%    _6
  _16 = match_fail `badmatch`, _6

  %% Unique:
  %%    _16
  _40 = succeeded:body _16
  br ^1

20:
  %% error_SUITE.erl:178
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-head_mismatch_line/1-',1}}
  _17 = match_fail `function_clause`, _0

  %% Unique:
  %%    _17
  _41 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% error_SUITE.erl:188
%% Counter = 42
%% bs_ensure_opt: true
function `error_SUITE`:`head_mismatch_same_function_name`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _21 = bif:is_list _0
  br _21, ^21, ^20

21:
  %% error_SUITE.erl:189
  %% Aliased:
  %%    _0
  _6 = call (`get_compilation_errors`/2), _0, `"head_mismatch_same_function_name"`

  %% Aliased:
  %%    _6
  _22 = succeeded:body _6
  br _22, ^22, ^1

22:
  %% Aliased:
  %%    _6
  _39 = is_nonempty_list _6
  br _39, ^39, ^24

39:
  %% Argument types:
  %%    _6 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _6
  _8 = get_hd _6

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _35 = bif:is_tuple _8
  br _35, ^35, ^26

35:
  %% Argument types:
  %%    _8 => {...}
  %% Aliased:
  %%    _8
  _36 = bif:tuple_size _8

  %% Argument types:
  %%    _36 => 0..16777215
  %% Unique:
  %%    _36
  _37 = bif:'=:=' _36, `3`
  br _37, ^34, ^26

34:
  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _11 = get_tuple_element _8, `0`

  %% Argument types:
  %%    _8 => {any(), any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _33 = bif:'=:=' _11, `{25,1}`
  br _33, ^33, ^26

33:
  %% Argument types:
  %%    _8 => {{25, 1}, any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `2`

  %% error_SUITE.erl:193
  %% Aliased:
  %%    _9
  _12 = call (`lists`:`flatten`/1), _9

  %% Aliased:
  %%    _12
  _27 = succeeded:body _12
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _12 => list(any())
  %% Aliased:
  %%    _12
  _31 = bif:'=:=' _12, `"head mismatch: function foo with arities 1 and 2 is regarded as two distinct functions. Is the number of arguments incorrect or is the semicolon in foo/1 unwanted?"`
  br _31, ^31, ^29

31:
  %% error_SUITE.erl:194
  %% Aliased:
  %%    _9
  _13 = call (_10:`format_error`/1), _9

  %% Aliased:
  %%    _13
  _30 = succeeded:body _13
  br _30, ^30, ^1

30:
  %% Result type:
  %%    'ok'
  ret `ok`

29:
  %% error_SUITE.erl:191
  %% Aliased:
  %%    _12
  _14 = match_fail `badmatch`, _12

  %% Unique:
  %%    _14
  _32 = succeeded:body _14
  br ^1

26:
  %% error_SUITE.erl:190
  %% Aliased:
  %%    _8
  _15 = match_fail `badmatch`, _8

  %% Unique:
  %%    _15
  _38 = succeeded:body _15
  br ^1

24:
  %% error_SUITE.erl:189
  %% Aliased:
  %%    _6
  _16 = match_fail `badmatch`, _6

  %% Unique:
  %%    _16
  _40 = succeeded:body _16
  br ^1

20:
  %% error_SUITE.erl:188
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-head_mismatch_same_function_name/1-',1}}
  _17 = match_fail `function_clause`, _0

  %% Unique:
  %%    _17
  _41 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% error_SUITE.erl:199
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     maybe_improper_list(any(), any())
%%    _1 =>
%%     nonempty_list(95..117)
function `error_SUITE`:`get_compilation_errors`(_0, _1) {
0:
  %% error_SUITE.erl:200
  %% Aliased:
  %%    _0
  DataDir = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    DataDir
  _19 = succeeded:body DataDir
  br _19, ^19, ^1

19:
  %% error_SUITE.erl:201
  %% Aliased:
  %%    DataDir
  %% Unique:
  %%    _1
  File = call (`filename`:`join`/2), DataDir, _1

  %% Aliased:
  %%    File
  _20 = succeeded:body File
  br _20, ^20, ^1

20:
  %% error_SUITE.erl:202
  %% Aliased:
  %%    File
  _8 = call (`compile`:`file`/2), File, `[return_errors]`

  %% Aliased:
  %%    _8
  _21 = succeeded:body _8
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _33 = is_tagged_tuple _8, `3`, `error`
  br _33, ^30, ^23

30:
  %% Argument types:
  %%    _8 => {'error', any(), any()}
  %% Aliased:
  %%    _8
  _10 = get_tuple_element _8, `1`

  %% Aliased:
  %%    _10
  _29 = is_nonempty_list _10
  br _29, ^29, ^23

29:
  %% Argument types:
  %%    _10 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _10
  _13 = get_hd _10

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _26 = bif:is_tuple _13
  br _26, ^26, ^23

26:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _27 = bif:tuple_size _13

  %% Argument types:
  %%    _27 => 0..16777215
  %% Unique:
  %%    _27
  _28 = bif:'=:=' _27, `2`
  br _28, ^25, ^23

25:
  %% Argument types:
  %%    _8 => {'error', any(), any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _24 = bif:'=:=' _9, `[]`
  br _24, ^24, ^23

24:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _14 = get_tuple_element _13, `1`
  %% Aliased:
  %%    _14
  ret _14

23:
  %% error_SUITE.erl:202
  %% Aliased:
  %%    _8
  _16 = match_fail `badmatch`, _8

  %% Unique:
  %%    _16
  _36 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% error_SUITE.erl:205
%% Counter = 73
%% bs_ensure_opt: true
function `error_SUITE`:`warnings_as_errors`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _37 = bif:is_list _0
  br _37, ^37, ^36

37:
  %% error_SUITE.erl:206
  %% Aliased:
  %%    _0
  TestFile = call (`test_filename`/1), _0

  %% Aliased:
  %%    TestFile
  _38 = succeeded:body TestFile
  br _38, ^38, ^1

38:
  %% error_SUITE.erl:207
  %% Aliased:
  %%    TestFile
  _2 = call (`filename`:`rootname`/2), TestFile, `".erl"`

  %% Aliased:
  %%    _2
  _39 = succeeded:body _2
  br _39, ^39, ^1

39:
  %% error_SUITE.erl:207
  %% Aliased:
  %%    _2
  BeamFile = call (`erlang`:`'++'`/2), _2, `".beam"`

  %% Aliased:
  %%    BeamFile
  _40 = succeeded:body BeamFile
  br _40, ^40, ^1

40:
  %% error_SUITE.erl:208
  %% Aliased:
  %%    _0
  OutDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    OutDir
  _41 = succeeded:body OutDir
  br _41, ^41, ^1

41:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OutDir
  _13 = put_tuple `outdir`, OutDir

  %% Argument types:
  %%    _13 => {'outdir', any()}
  %% Unique:
  %%    _13
  _14 = put_list _13, `[]`

  %% Argument types:
  %%    _14 => nonempty_list({'outdir', any()})
  %% Unique:
  %%    _14
  _15 = put_list `export_all`, _14

  %% Argument types:
  %%    _15 => nonempty_list('export_all' | {'outdir', any()})
  %% Unique:
  %%    _15
  _16 = put_list `warnings_as_errors`, _15

  %% Argument types:
  %%    _16 => nonempty_list('export_all' | 'warnings_as_errors' | {'outdir', any()})
  %% Unique:
  %%    _16
  _17 = put_tuple `warnings_as_errors`, `<<"\n               t() ->\n                 A = unused,\n                 ok.\n             ">>`, _16, `{error,[],[{{3,18},erl_lint,{unused_var,'A'}}]}`

  %% Argument types:
  %%    _17 => {'warnings_as_errors', bitstring(16), nonempty_list('export_all' | 'warnings_as_errors' | {'outdir', any()}), {'error', nil(), nonempty_list({{3, 18}, 'erl_lint', {'unused_var', ''A''}})}}
  %% Unique:
  %%    _17
  Ts1 = put_list _17, `[]`

  %% error_SUITE.erl:220
  %% Aliased:
  %%    TestFile
  %% Unique:
  %%    Ts1
  _18 = call (`run`/3), Ts1, TestFile, `write_beam`

  %% Aliased:
  %%    _18
  _42 = succeeded:body _18
  br _42, ^42, ^1

42:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _68 = bif:'=:=' _18, `[]`
  br _68, ^68, ^44

68:
  %% error_SUITE.erl:221
  %% Aliased:
  %%    BeamFile
  _19 = call (`filelib`:`is_regular`/1), BeamFile

  %% Aliased:
  %%    _19
  _45 = succeeded:body _19
  br _45, ^45, ^1

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _66 = bif:'=:=' _19, `false`
  br _66, ^65, ^47

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    OutDir
  _20 = put_tuple `outdir`, OutDir

  %% Argument types:
  %%    _20 => {'outdir', any()}
  %% Unique:
  %%    _20
  _21 = put_list _20, `[]`

  %% Argument types:
  %%    _21 => nonempty_list({'outdir', any()})
  %% Unique:
  %%    _21
  _22 = put_list `export_all`, _21

  %% Argument types:
  %%    _22 => nonempty_list('export_all' | {'outdir', any()})
  %% Unique:
  %%    _22
  _23 = put_list `return_warnings`, _22

  %% Argument types:
  %%    _23 => nonempty_list('export_all' | 'return_warnings' | {'outdir', any()})
  %% Unique:
  %%    _23
  _24 = put_tuple `warning_unused_var`, `<<"\n               t() ->\n                 A = unused,\n                 ok.\n             ">>`, _23, `{warning,[{{3,18},erl_lint,{unused_var,'A'}}]}`

  %% Argument types:
  %%    _24 => {'warning_unused_var', bitstring(16), nonempty_list('export_all' | 'return_warnings' | {'outdir', any()}), {'warning', nonempty_list({{3, 18}, 'erl_lint', {'unused_var', ''A''}})}}
  %% Unique:
  %%    _24
  Ts2 = put_list _24, `[]`

  %% error_SUITE.erl:233
  %% Aliased:
  %%    TestFile
  %% Unique:
  %%    Ts2
  _25 = call (`run`/3), Ts2, TestFile, `write_beam`

  %% Aliased:
  %%    _25
  _48 = succeeded:body _25
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _63 = bif:'=:=' _25, `[]`
  br _63, ^63, ^50

63:
  %% error_SUITE.erl:234
  %% Aliased:
  %%    BeamFile
  _26 = call (`filelib`:`is_regular`/1), BeamFile

  %% Aliased:
  %%    _26
  _51 = succeeded:body _26
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _61 = bif:'=:=' _26, `true`
  br _61, ^60, ^53

60:
  %% error_SUITE.erl:235
  %% Aliased:
  %%    BeamFile
  _27 = call (`file`:`delete`/1), BeamFile

  %% Aliased:
  %%    _27
  _54 = succeeded:body _27
  br _54, ^54, ^1

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _58 = bif:'=:=' _27, `ok`
  br _58, ^57, ^56

57:
  %% Result type:
  %%    'ok'
  ret `ok`

56:
  %% error_SUITE.erl:235
  %% Aliased:
  %%    _27
  _28 = match_fail `badmatch`, _27

  %% Unique:
  %%    _28
  _59 = succeeded:body _28
  br ^1

53:
  %% error_SUITE.erl:234
  %% Aliased:
  %%    _26
  _29 = match_fail `badmatch`, _26

  %% Unique:
  %%    _29
  _62 = succeeded:body _29
  br ^1

50:
  %% error_SUITE.erl:233
  %% Aliased:
  %%    _25
  _30 = match_fail `badmatch`, _25

  %% Unique:
  %%    _30
  _64 = succeeded:body _30
  br ^1

47:
  %% error_SUITE.erl:221
  %% Aliased:
  %%    _19
  _31 = match_fail `badmatch`, _19

  %% Unique:
  %%    _31
  _67 = succeeded:body _31
  br ^1

44:
  %% error_SUITE.erl:220
  %% Aliased:
  %%    _18
  _32 = match_fail `badmatch`, _18

  %% Unique:
  %%    _32
  _69 = succeeded:body _32
  br ^1

36:
  %% error_SUITE.erl:205
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-warnings_as_errors/1-',1}}
  _33 = match_fail `function_clause`, _0

  %% Unique:
  %%    _33
  _70 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% error_SUITE.erl:239
%% Counter = 246
%% bs_ensure_opt: true
function `error_SUITE`:`transforms`(_0) {
0:
  %% error_SUITE.erl:246
  %% Aliased:
  %%    _0
  _18 = call (`run`/2), _0, `[{undef_parse_transform,
      <<"\n              -compile({parse_transform,non_existing}).\n             ">>,
      [return],
      {error,[{none,compile,{undef_parse_transform,non_existing}}],[]}}]`

  %% Aliased:
  %%    _18
  _88 = succeeded:body _18
  br _88, ^88, ^1

88:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _244 = bif:'=:=' _18, `[]`
  br _244, ^244, ^90

244:
  %% error_SUITE.erl:253
  %% Aliased:
  %%    _0
  _4 = call (`test_filename`/1), _0

  %% Aliased:
  %%    _4
  _91 = succeeded:body _4
  br _91, ^91, ^1

91:
  %% error_SUITE.erl:253
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _4
  _19 = call (`run_test`/4), `<<"\n              -compile({parse_transform,error_SUITE}).\n             ">>`, _4, `[{pt_error,error}]`, `dont_write_beam`

  %% Aliased:
  %%    _19
  _92 = succeeded:body _19
  br _92, ^92, ^1

92:
  %% Argument types:
  %%    _19 => nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _19
  %% Anno: #{constraints => tuple_arity}
  _240 = is_tagged_tuple _19, `3`, `error`
  br _240, ^237, ^94

237:
  %% Argument types:
  %%    _19 => {'error', any(), any()}
  %% Aliased:
  %%    _19
  _21 = get_tuple_element _19, `1`

  %% Aliased:
  %%    _21
  _236 = is_nonempty_list _21
  br _236, ^236, ^94

236:
  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _24 = get_hd _21

  %% Argument types:
  %%    _21 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _21
  _23 = get_tl _21

  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _233 = is_tagged_tuple _24, `3`, `none`
  br _233, ^230, ^94

230:
  %% Argument types:
  %%    _24 => {'none', any(), any()}
  %% Aliased:
  %%    _24
  _26 = get_tuple_element _24, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _229 = bif:'=:=' _26, `compile`
  br _229, ^228, ^94

228:
  %% Argument types:
  %%    _24 => {'none', 'compile', any()}
  %% Aliased:
  %%    _24
  _25 = get_tuple_element _24, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _225 = is_tagged_tuple _25, `3`, `parse_transform`
  br _225, ^222, ^94

222:
  %% Argument types:
  %%    _25 => {'parse_transform', any(), any()}
  %% Aliased:
  %%    _25
  _29 = get_tuple_element _25, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _29
  _221 = bif:'=:=' _29, `error_SUITE`
  br _221, ^220, ^94

220:
  %% Argument types:
  %%    _25 => {'parse_transform', 'error_SUITE', any()}
  %% Aliased:
  %%    _25
  _28 = get_tuple_element _25, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  _217 = is_tagged_tuple _28, `3`, `error`
  br _217, ^214, ^94

214:
  %% Argument types:
  %%    _28 => {'error', any(), any()}
  %% Aliased:
  %%    _28
  _32 = get_tuple_element _28, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _213 = bif:'=:=' _32, `too_bad`
  br _213, ^212, ^94

212:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _211 = bif:'=:=' _23, `[]`
  br _211, ^211, ^94

211:
  %% Argument types:
  %%    _19 => {'error', any(), any()}
  %% Aliased:
  %%    _19
  _20 = get_tuple_element _19, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _210 = bif:'=:=' _20, `[]`
  br _210, ^210, ^94

210:
  %% error_SUITE.erl:256
  %% Aliased:
  %%    _0
  _6 = call (`test_filename`/1), _0

  %% Aliased:
  %%    _6
  _95 = succeeded:body _6
  br _95, ^95, ^1

95:
  %% error_SUITE.erl:256
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _6
  _34 = call (`run_test`/4), `<<"\n              -compile({parse_transform,error_SUITE}).\n             ">>`, _6, `[{pt_error,call_undef}]`, `dont_write_beam`

  %% Aliased:
  %%    _34
  _96 = succeeded:body _34
  br _96, ^96, ^1

96:
  %% Argument types:
  %%    _34 => nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _34
  %% Anno: #{constraints => tuple_arity}
  _206 = is_tagged_tuple _34, `3`, `error`
  br _206, ^203, ^98

203:
  %% Argument types:
  %%    _34 => {'error', any(), any()}
  %% Aliased:
  %%    _34
  _36 = get_tuple_element _34, `1`

  %% Aliased:
  %%    _36
  _202 = is_nonempty_list _36
  br _202, ^202, ^98

202:
  %% Argument types:
  %%    _36 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _36
  _39 = get_hd _36

  %% Argument types:
  %%    _36 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _36
  _38 = get_tl _36

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _199 = is_tagged_tuple _39, `3`, `none`
  br _199, ^196, ^98

196:
  %% Argument types:
  %%    _39 => {'none', any(), any()}
  %% Aliased:
  %%    _39
  _41 = get_tuple_element _39, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _41
  _195 = bif:'=:=' _41, `compile`
  br _195, ^194, ^98

194:
  %% Argument types:
  %%    _39 => {'none', 'compile', any()}
  %% Aliased:
  %%    _39
  _40 = get_tuple_element _39, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _40
  _191 = is_tagged_tuple _40, `3`, `parse_transform`
  br _191, ^188, ^98

188:
  %% Argument types:
  %%    _40 => {'parse_transform', any(), any()}
  %% Aliased:
  %%    _40
  _44 = get_tuple_element _40, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _44
  _187 = bif:'=:=' _44, `error_SUITE`
  br _187, ^186, ^98

186:
  %% Argument types:
  %%    _40 => {'parse_transform', 'error_SUITE', any()}
  %% Aliased:
  %%    _40
  _43 = get_tuple_element _40, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _43
  _183 = is_tagged_tuple _43, `3`, `error`
  br _183, ^180, ^98

180:
  %% Argument types:
  %%    _43 => {'error', any(), any()}
  %% Aliased:
  %%    _43
  _47 = get_tuple_element _43, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _47
  _179 = bif:'=:=' _47, `undef`
  br _179, ^178, ^98

178:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _38
  _177 = bif:'=:=' _38, `[]`
  br _177, ^177, ^98

177:
  %% Argument types:
  %%    _34 => {'error', any(), any()}
  %% Aliased:
  %%    _34
  _35 = get_tuple_element _34, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _176 = bif:'=:=' _35, `[]`
  br _176, ^176, ^98

176:
  %% error_SUITE.erl:259
  %% Aliased:
  %%    _0
  _8 = call (`test_filename`/1), _0

  %% Aliased:
  %%    _8
  _99 = succeeded:body _8
  br _99, ^99, ^1

99:
  %% error_SUITE.erl:259
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _8
  _49 = call (`run_test`/4), `<<"\n              -compile({parse_transform,error_SUITE}).\n             ">>`, _8, `[{pt_error,exit}]`, `dont_write_beam`

  %% Aliased:
  %%    _49
  _100 = succeeded:body _49
  br _100, ^100, ^1

100:
  %% Argument types:
  %%    _49 => nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _49
  %% Anno: #{constraints => tuple_arity}
  _172 = is_tagged_tuple _49, `3`, `error`
  br _172, ^169, ^102

169:
  %% Argument types:
  %%    _49 => {'error', any(), any()}
  %% Aliased:
  %%    _49
  _51 = get_tuple_element _49, `1`

  %% Aliased:
  %%    _51
  _168 = is_nonempty_list _51
  br _168, ^168, ^102

168:
  %% Argument types:
  %%    _51 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _51
  _54 = get_hd _51

  %% Argument types:
  %%    _51 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _51
  _53 = get_tl _51

  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _165 = is_tagged_tuple _54, `3`, `none`
  br _165, ^162, ^102

162:
  %% Argument types:
  %%    _54 => {'none', any(), any()}
  %% Aliased:
  %%    _54
  _56 = get_tuple_element _54, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _161 = bif:'=:=' _56, `compile`
  br _161, ^160, ^102

160:
  %% Argument types:
  %%    _54 => {'none', 'compile', any()}
  %% Aliased:
  %%    _54
  _55 = get_tuple_element _54, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _157 = is_tagged_tuple _55, `3`, `parse_transform`
  br _157, ^154, ^102

154:
  %% Argument types:
  %%    _55 => {'parse_transform', any(), any()}
  %% Aliased:
  %%    _55
  _59 = get_tuple_element _55, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _153 = bif:'=:=' _59, `error_SUITE`
  br _153, ^152, ^102

152:
  %% Argument types:
  %%    _55 => {'parse_transform', 'error_SUITE', any()}
  %% Aliased:
  %%    _55
  _58 = get_tuple_element _55, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _149 = is_tagged_tuple _58, `3`, `exit`
  br _149, ^146, ^102

146:
  %% Argument types:
  %%    _58 => {'exit', any(), any()}
  %% Aliased:
  %%    _58
  _62 = get_tuple_element _58, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _145 = bif:'=:=' _62, `exited`
  br _145, ^144, ^102

144:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _143 = bif:'=:=' _53, `[]`
  br _143, ^143, ^102

143:
  %% Argument types:
  %%    _49 => {'error', any(), any()}
  %% Aliased:
  %%    _49
  _50 = get_tuple_element _49, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _142 = bif:'=:=' _50, `[]`
  br _142, ^142, ^102

142:
  %% error_SUITE.erl:262
  %% Aliased:
  %%    _0
  _10 = call (`test_filename`/1), _0

  %% Aliased:
  %%    _10
  _103 = succeeded:body _10
  br _103, ^103, ^1

103:
  %% error_SUITE.erl:262
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _10
  _64 = call (`run_test`/4), `<<"\n              -compile({parse_transform,error_SUITE}).\n             ">>`, _10, `[{pt_error,throw}]`, `dont_write_beam`

  %% Aliased:
  %%    _64
  _104 = succeeded:body _64
  br _104, ^104, ^1

104:
  %% Argument types:
  %%    _64 => nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _64
  %% Anno: #{constraints => tuple_arity}
  _138 = is_tagged_tuple _64, `3`, `error`
  br _138, ^135, ^106

135:
  %% Argument types:
  %%    _64 => {'error', any(), any()}
  %% Aliased:
  %%    _64
  _66 = get_tuple_element _64, `1`

  %% Aliased:
  %%    _66
  _134 = is_nonempty_list _66
  br _134, ^134, ^106

134:
  %% Argument types:
  %%    _66 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _66
  _69 = get_hd _66

  %% Argument types:
  %%    _66 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _66
  _68 = get_tl _66

  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _131 = is_tagged_tuple _69, `3`, `none`
  br _131, ^128, ^106

128:
  %% Argument types:
  %%    _69 => {'none', any(), any()}
  %% Aliased:
  %%    _69
  _71 = get_tuple_element _69, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _71
  _127 = bif:'=:=' _71, `compile`
  br _127, ^126, ^106

126:
  %% Argument types:
  %%    _69 => {'none', 'compile', any()}
  %% Aliased:
  %%    _69
  _70 = get_tuple_element _69, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _123 = is_tagged_tuple _70, `3`, `parse_transform`
  br _123, ^120, ^106

120:
  %% Argument types:
  %%    _70 => {'parse_transform', any(), any()}
  %% Aliased:
  %%    _70
  _74 = get_tuple_element _70, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _74
  _119 = bif:'=:=' _74, `error_SUITE`
  br _119, ^118, ^106

118:
  %% Argument types:
  %%    _70 => {'parse_transform', 'error_SUITE', any()}
  %% Aliased:
  %%    _70
  _73 = get_tuple_element _70, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _115 = is_tagged_tuple _73, `3`, `throw`
  br _115, ^112, ^106

112:
  %% Argument types:
  %%    _73 => {'throw', any(), any()}
  %% Aliased:
  %%    _73
  _77 = get_tuple_element _73, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _111 = bif:'=:=' _77, `thrown`
  br _111, ^110, ^106

110:
  %% Argument types:
  %%    _73 => {'throw', 'thrown', any()}
  %% Aliased:
  %%    _73
  _76 = get_tuple_element _73, `2`

  %% Aliased:
  %%    _76
  _109 = is_nonempty_list _76
  br _109, ^109, ^106

109:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _68
  _108 = bif:'=:=' _68, `[]`
  br _108, ^108, ^106

108:
  %% Argument types:
  %%    _64 => {'error', any(), any()}
  %% Aliased:
  %%    _64
  _65 = get_tuple_element _64, `2`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _107 = bif:'=:=' _65, `[]`
  br _107, ^107, ^106

107:
  %% Result type:
  %%    'ok'
  ret `ok`

106:
  %% error_SUITE.erl:261
  %% Aliased:
  %%    _64
  _81 = match_fail `badmatch`, _64

  %% Unique:
  %%    _81
  _141 = succeeded:body _81
  br ^1

102:
  %% error_SUITE.erl:258
  %% Aliased:
  %%    _49
  _82 = match_fail `badmatch`, _49

  %% Unique:
  %%    _82
  _175 = succeeded:body _82
  br ^1

98:
  %% error_SUITE.erl:255
  %% Aliased:
  %%    _34
  _83 = match_fail `badmatch`, _34

  %% Unique:
  %%    _83
  _209 = succeeded:body _83
  br ^1

94:
  %% error_SUITE.erl:252
  %% Aliased:
  %%    _19
  _84 = match_fail `badmatch`, _19

  %% Unique:
  %%    _84
  _243 = succeeded:body _84
  br ^1

90:
  %% error_SUITE.erl:246
  %% Aliased:
  %%    _18
  _85 = match_fail `badmatch`, _18

  %% Unique:
  %%    _85
  _245 = succeeded:body _85
  br ^1

1:
  _86 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _86
}

%% error_SUITE.erl:266
%% Counter = 38
%% bs_ensure_opt: true
function `error_SUITE`:`parse_transform`(_0, _1) {
0:
  %% error_SUITE.erl:267
  %% Aliased:
  %%    _1
  _8 = call (`lists`:`keyfind`/3), `pt_error`, `1`, _1

  %% Aliased:
  %%    _8
  _19 = succeeded:body _8
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    _8 => 'false' | {'pt_error', ...}
  %% Aliased:
  %%    _8
  _34 = bif:is_tuple _8
  br _34, ^34, ^21

34:
  %% Argument types:
  %%    _8 => {'pt_error', ...}
  %% Aliased:
  %%    _8
  _35 = bif:tuple_size _8

  %% Argument types:
  %%    _35 => 1..16777215
  %% Unique:
  %%    _35
  _36 = bif:'=:=' _35, `2`
  br _36, ^33, ^21

33:
  %% Argument types:
  %%    _8 => {'pt_error', any()}
  %% Aliased:
  %%    _8
  _9 = get_tuple_element _8, `1`
  switch _9, ^23, [
    { `call_undef`, ^28 },
    { `error`, ^31 },
    { `exit`, ^30 },
    { `throw`, ^29 }
  ]

29:
  %% error_SUITE.erl:272
  %% Anno: #{thrown_type => {t_atom,[thrown]}}
  _13 = call (`erlang`:`throw`/1), `thrown`

  %% Aliased:
  %%    _13
  _25 = succeeded:body _13
  br ^1

30:
  %% error_SUITE.erl:274
  _12 = call (`erlang`:`exit`/1), `exited`

  %% Unique:
  %%    _12
  _26 = succeeded:body _12
  br ^1

31:
  %% error_SUITE.erl:276
  _11 = call (`erlang`:`error`/1), `too_bad`

  %% Aliased:
  %%    _11
  _27 = succeeded:body _11
  br ^1

28:
  %% error_SUITE.erl:270
  _14 = call (`camembert`:`délicieux`/0)

  %% Aliased:
  %%    _14
  _24 = succeeded:body _14
  br _24, ^24, ^1

24:
  %% Aliased:
  %%    _14
  ret _14

23:
  %% error_SUITE.erl:268
  %% Aliased:
  %%    _9
  _15 = match_fail `case_clause`, _9

  %% Unique:
  %%    _15
  _32 = succeeded:body _15
  br ^1

21:
  %% error_SUITE.erl:267
  %% Aliased:
  %%    _8
  _16 = match_fail `badmatch`, _8

  %% Unique:
  %%    _16
  _37 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% error_SUITE.erl:279
%% Counter = 17
%% bs_ensure_opt: true
function `error_SUITE`:`maps_warnings`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _10 = bif:is_list _0
  br _10, ^10, ^9

10:
  %% error_SUITE.erl:302
  %% Aliased:
  %%    _0
  _4 = call (`run2`/2), _0, `[{map_ok_use_of_pattern,<<"\n              -export([t/1]).\n              t(K) ->\n                 #{K := 1 = V} = id(#{<<\"hi all\">> => 1}),\n\t\t V.\n              id(I) -> I.\n             ">>,
                         [return],
                         []},
  {map_illegal_use_of_pattern,<<"\n              -export([t/0,t/2]).\n\t      t(K,#{ K := V }) -> V.\n              t() ->\n                 V = 32,\n                 #{<<\"hi\",V,\"all\">> := 1} = id(#{<<\"hi all\">> => 1}).\n              id(I) -> I.\n             ">>,
                              [return],
                              {error,[{{3,15},erl_lint,{unbound_var,'K'}}],
                                     []}}]`

  %% Aliased:
  %%    _4
  _11 = succeeded:body _4
  br _11, ^11, ^1

11:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _14 = bif:'=:=' _4, `[]`
  br _14, ^14, ^13

14:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  %% error_SUITE.erl:302
  %% Aliased:
  %%    _4
  _5 = match_fail `badmatch`, _4

  %% Unique:
  %%    _5
  _15 = succeeded:body _5
  br ^1

9:
  %% error_SUITE.erl:279
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-maps_warnings/1-',1}}
  _6 = match_fail `function_clause`, _0

  %% Unique:
  %%    _6
  _16 = succeeded:body _6
  br ^1

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% error_SUITE.erl:305
%% Counter = 12
%% bs_ensure_opt: true
function `error_SUITE`:`bad_utf8`(_0) {
0:
  %% error_SUITE.erl:332
  %% Aliased:
  %%    _0
  _3 = call (`run2`/2), _0, `[{bad_explicit_utf8,<<"%% coding: utf-8\n              %% Björn\n              t() -> \"ö\".\n             ">>,
                     [],
                     {error,[{{2,15},epp,cannot_parse},
                             {{2,15},file_io_server,invalid_unicode}],
                            []}},
  {bad_implicit_utf8,<<"\n              %% Björn\n              t() -> \"ö\".\n             ">>,
                     [],
                     {error,[{{2,15},epp,cannot_parse},
                             {{2,15},file_io_server,invalid_unicode}],
                            []}}]`

  %% Aliased:
  %%    _3
  _7 = succeeded:body _3
  br _7, ^7, ^1

7:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _10 = bif:'=:=' _3, `[]`
  br _10, ^10, ^9

10:
  %% Result type:
  %%    'ok'
  ret `ok`

9:
  %% error_SUITE.erl:332
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _11 = succeeded:body _4
  br ^1

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% error_SUITE.erl:335
%% Counter = 38
%% bs_ensure_opt: true
function `error_SUITE`:`bad_decls`(_0) {
0:
  %% error_SUITE.erl:414
  %% Aliased:
  %%    _0
  _15 = call (`run2`/2), _0, `[{bad_decls_1,<<"\n-module({l}).\n             ">>,[],
               {error,[{{2,9},
                        erl_parse,
                        [98,97,100,32,"module",32,100,101,99,108,97,114,97,
                         116,105,111,110]}],
                      []}},
  {bad_decls_2,<<"\n-module(l, m).\n             ">>,[],
               {error,[{{2,12},erl_parse,"bad variable list"}],[]}},
  {bad_decls_3,<<"\n-export([a/1], Y).\n             ">>,[],
               {error,[{{2,16},
                        erl_parse,
                        [98,97,100,32,"export",32,100,101,99,108,97,114,97,
                         116,105,111,110]}],
                      []}},
  {bad_decls_4,<<"\n-import([a/1], Y).\n             ">>,[],
               {error,[{{2,16},
                        erl_parse,
                        [98,97,100,32,"import",32,100,101,99,108,97,114,97,
                         116,105,111,110]}],
                      []}},
  {bad_decls_5,<<"\n-ugly({A,B}).\n             ">>,[],
               {error,[{{2,7},erl_parse,"bad attribute"}],[]}},
  {bad_decls_6,<<"\n-ugly(a, b).\n             ">>,[],
               {error,[{{2,10},erl_parse,"bad attribute"}],[]}},
  {bad_decls_7,<<"\n-export([A/1]).\n             ">>,[],
               {error,[{{2,10},erl_parse,"bad function name"}],[]}},
  {bad_decls_8,<<"\n-export([a/a]).\n             ">>,[],
               {error,[{{2,12},erl_parse,"bad function arity"}],[]}},
  {bad_decls_9,<<"\n-export([a/1, {3,4}]).\n             ">>,[],
               {error,[{{2,15},erl_parse,"bad Name/Arity"}],[]}},
  {bad_decls_10,<<"\n-record(A, {{bad,a}}).\n             ">>,[],
                {error,[{{2,9},
                         erl_parse,
                         [98,97,100,32,"record",32,100,101,99,108,97,114,97,
                          116,105,111,110]}],
                       []}},
  {bad_decls_11,<<"\n-record(a, [a,b,c,d]).\n             ">>,[],
                {error,[{{2,12},erl_parse,"bad record declaration"}],[]}},
  {bad_decls_12,<<"\n-record(a).\n             ">>,[],
                {error,[{{2,9},
                         erl_parse,
                         [98,97,100,32,"record",32,100,101,99,108,97,114,97,
                          116,105,111,110]}],
                       []}}]`

  %% Aliased:
  %%    _15
  _23 = succeeded:body _15
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _36 = bif:'=:=' _15, `[]`
  br _36, ^36, ^25

36:
  %% error_SUITE.erl:416
  _16 = call (`parse_string`/1), `"1, 2 + 4."`

  %% Aliased:
  %%    _16
  _26 = succeeded:body _16
  br _26, ^26, ^1

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _16
  _34 = bif:'=:=' _16, `{error,{{1,4},erl_parse,"bad term"}}`
  br _34, ^34, ^28

34:
  %% error_SUITE.erl:417
  _17 = call (`parse_string`/1), `"34 + begin 34 end."`

  %% Aliased:
  %%    _17
  _29 = succeeded:body _17
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _32 = bif:'=:=' _17, `{error,{{1,1},erl_parse,"bad term"}}`
  br _32, ^32, ^31

32:
  %% Result type:
  %%    'ok'
  ret `ok`

31:
  %% error_SUITE.erl:417
  %% Aliased:
  %%    _17
  _18 = match_fail `badmatch`, _17

  %% Unique:
  %%    _18
  _33 = succeeded:body _18
  br ^1

28:
  %% error_SUITE.erl:416
  %% Aliased:
  %%    _16
  _19 = match_fail `badmatch`, _16

  %% Unique:
  %%    _19
  _35 = succeeded:body _19
  br ^1

25:
  %% error_SUITE.erl:414
  %% Aliased:
  %%    _15
  _20 = match_fail `badmatch`, _15

  %% Unique:
  %%    _20
  _37 = succeeded:body _20
  br ^1

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% error_SUITE.erl:420
%% Counter = 23
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list(32..110)
function `error_SUITE`:`parse_string`(_0) {
0:
  %% error_SUITE.erl:421
  %% Unique:
  %%    _0
  _4 = call (`erl_scan`:`string`/2), _0, `{1,1}`

  %% Aliased:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^12, ^1

12:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _19 = is_tagged_tuple _4, `3`, `ok`
  br _19, ^16, ^14

16:
  %% Argument types:
  %%    _4 => {'ok', any(), any()}
  %% Aliased:
  %%    _4
  _6 = get_tuple_element _4, `1`

  %% error_SUITE.erl:422
  %% Aliased:
  %%    _6
  _8 = call (`erl_parse`:`parse_term`/1), _6

  %% Aliased:
  %%    _8
  _15 = succeeded:body _8
  br _15, ^15, ^1

15:
  %% Aliased:
  %%    _8
  ret _8

14:
  %% error_SUITE.erl:421
  %% Aliased:
  %%    _4
  _9 = match_fail `badmatch`, _4

  %% Unique:
  %%    _9
  _22 = succeeded:body _9
  br ^1

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% error_SUITE.erl:425
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     nonempty_list({'bif_clashes1', bitstring(256), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes2', bitstring(64), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes3', bitstring(8), nonempty_list('return_warnings'), nil()} | {'bif_clashes4', bitstring(8), nonempty_list('return_warnings'), nil()} | {'bif_clashes5', bitstring(8), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes6', bitstring(8), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'undef_parse_transform', bitstring(16), nonempty_list('return'), {'error', nonempty_list({...}), nil()}})
function `error_SUITE`:`run`(_0, _1) {
0:
  %% error_SUITE.erl:426
  %% Aliased:
  %%    _0
  File = call (`test_filename`/1), _0

  %% Aliased:
  %%    File
  _5 = succeeded:body File
  br _5, ^5, ^1

5:
  %% error_SUITE.erl:427
  %% Aliased:
  %%    File
  %% Unique:
  %%    _1
  _2 = call (`run`/3), _1, File, `dont_write_beam`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% error_SUITE.erl:429
%% Counter = 31
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list({'bif_clashes1', bitstring(256), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes2', bitstring(64), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes3', bitstring(8), nonempty_list('return_warnings'), nil()} | {'bif_clashes4', bitstring(8), nonempty_list('return_warnings'), nil()} | {'bif_clashes5', bitstring(8), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'bif_clashes6', bitstring(8), nonempty_list('return_warnings'), {'warning', nonempty_list({...})}} | {'undef_parse_transform', bitstring(16), nonempty_list('return'), {'error', nonempty_list({...}), nil()}} | {'warning_unused_var', bitstring(16), nonempty_list('export_all' | 'return_warnings' | {'outdir', any()}), {'warning', nonempty_list({...})}} | {'warnings_as_errors', bitstring(16), nonempty_list('export_all' | 'warnings_as_errors' | {'outdir', any()}), {'error', nil(), nonempty_list({...})}})
%%    _2 =>
%%     'dont_write_beam' | 'write_beam'
function `error_SUITE`:`run`(_0, _1, _2) {
0:
  %% Aliased:
  %%    _1, 
  %%    _2
  F = make_fun (`'-run/3-fun-0-'`/4), _1, _2

  %% error_SUITE.erl:440
  %% Aliased:
  %%    F
  %% Unique:
  %%    _0
  _26 = call (`lists`:`foldl`/3), F, `[]`, _0

  %% Aliased:
  %%    _26
  _29 = succeeded:body _26
  br _29, ^29, ^1

29:
  %% Aliased:
  %%    _26
  ret _26

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% error_SUITE.erl:442
%% Counter = 7
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     nonempty_list({atom(), bitstring(8), list('return'), nil() | {'error', nonempty_list({...}), nil()}})
function `error_SUITE`:`run2`(_0, _1) {
0:
  %% error_SUITE.erl:443
  %% Aliased:
  %%    _0
  File = call (`test_filename`/1), _0

  %% Aliased:
  %%    File
  _5 = succeeded:body File
  br _5, ^5, ^1

5:
  %% error_SUITE.erl:444
  %% Aliased:
  %%    File
  %% Unique:
  %%    _1
  _2 = call (`run2`/3), _1, File, `dont_write_beam`

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% error_SUITE.erl:446
%% Counter = 32
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nonempty_list({atom(), bitstring(8), list('return'), nil() | {'error', nonempty_list({...}), nil()}})
%%    _2 =>
%%     'dont_write_beam'
function `error_SUITE`:`run2`(_0, _1, _2) {
0:
  %% Aliased:
  %%    _1
  F = make_fun (`'-run2/3-fun-0-'`/4), _1, `dont_write_beam`

  %% error_SUITE.erl:457
  %% Aliased:
  %%    F
  %% Unique:
  %%    _0
  _27 = call (`lists`:`foldl`/3), F, `[]`, _0

  %% Aliased:
  %%    _27
  _30 = succeeded:body _27
  br _30, ^30, ^1

30:
  %% Aliased:
  %%    _27
  ret _27

1:
  _28 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _28
}

%% error_SUITE.erl:459
%% Counter = 15
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     nil() | {'warning', any()} | {'error', any(), any()}
function `error_SUITE`:`filter`(_0) {
0:
  %% Argument types:
  %%    _0 => nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _0
  %% Anno: #{constraints => tuple_arity}
  _12 = is_tagged_tuple _0, `3`, `error`
  br _12, ^9, ^8

9:
  %% Argument types:
  %%    _0 => {'error', any(), any()}
  %% Aliased:
  %%    _0
  _3 = get_tuple_element _0, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _5 = put_tuple `error`, _3, `[]`
  %% Result type:
  %%    {'error', any(), nil()}
  %% Unique:
  %%    _5
  ret _5

8:
  %% Result type:
  %%    nil() | {'warning', any()}
  %% Aliased:
  %%    _0
  ret _0
}

%% error_SUITE.erl:467
%% Counter = 10
%% bs_ensure_opt: true
function `error_SUITE`:`test_filename`(_0) {
0:
  %% error_SUITE.erl:468
  _1 = call (`test_lib`:`uniq`/0)

  %% Aliased:
  %%    _1
  _6 = succeeded:body _1
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _2 = put_list _1, `[".erl"]`

  %% Argument types:
  %%    _2 => nonempty_list(any())
  %% Unique:
  %%    _2
  Filename = put_list `"errors_test_"`, _2

  %% error_SUITE.erl:469
  %% Aliased:
  %%    _0
  DataDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    DataDir
  _7 = succeeded:body DataDir
  br _7, ^7, ^1

7:
  %% error_SUITE.erl:470
  %% Aliased:
  %%    DataDir
  %% Unique:
  %%    Filename
  _3 = call (`filename`:`join`/2), DataDir, Filename

  %% Aliased:
  %%    _3
  _8 = succeeded:body _3
  br _8, ^8, ^1

8:
  %% Aliased:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% error_SUITE.erl:472
%% Counter = 187
%% bs_ensure_opt: true
%% Parameters
%%    _3 =>
%%     'dont_write_beam' | 'write_beam'
function `error_SUITE`:`run_test`(_0, _1, _2, _3) {
0:
  %% error_SUITE.erl:473
  %% Aliased:
  %%    _1
  _4 = call (`filename`:`basename`/1), _1

  %% Aliased:
  %%    _4
  _98 = succeeded:body _4
  br _98, ^98, ^1

98:
  %% error_SUITE.erl:473
  %% Aliased:
  %%    _4
  ModName = call (`filename`:`rootname`/2), _4, `".erl"`

  %% Aliased:
  %%    ModName
  _99 = succeeded:body ModName
  br _99, ^99, ^1

99:
  %% error_SUITE.erl:474
  %% Aliased:
  %%    ModName
  Mod = call (`erlang`:`list_to_atom`/1), ModName

  %% Aliased:
  %%    Mod
  _100 = succeeded:body Mod
  br _100, ^100, ^1

100:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _30 = put_list _0, `[]`

  %% Argument types:
  %%    _30 => nonempty_list(any())
  %% Unique:
  %%    _30
  _31 = put_list `"). "`, _30

  %% Argument types:
  %%    _31 => nonempty_list(any())
  %% Aliased:
  %%    ModName
  %% Unique:
  %%    _31
  _32 = put_list ModName, _31

  %% Argument types:
  %%    _32 => nonempty_list(any())
  %% Unique:
  %%    _32
  _33 = put_list `"-module("`, _32

  %% error_SUITE.erl:475
  %% Unique:
  %%    _33
  Test = call (`erlang`:`iolist_to_binary`/1), _33

  %% Aliased:
  %%    Test
  _101 = succeeded:body Test
  br _101, ^101, ^1

101:
  %% Aliased:
  %%    _3
  _186 = bif:'=:=' _3, `write_beam`
  br _186, ^105, ^104

105:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _79 = put_list `return_errors`, _2
  br ^102

104:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _34 = put_list `return_errors`, _2

  %% Argument types:
  %%    _34 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _34
  _80 = put_list `binary`, _34
  br ^102

102:
  _9 = phi { _80, ^104 }, { _79, ^105 }

  %% error_SUITE.erl:482
  %% Aliased:
  %%    _1, 
  %%    Test
  _35 = call (`file`:`write_file`/2), _1, Test

  %% Aliased:
  %%    _35
  _107 = succeeded:body _35
  br _107, ^107, ^1

107:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _175 = bif:'=:=' _35, `ok`
  br _175, ^174, ^109

174:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _36 = put_list `report`, _2

  %% Argument types:
  %%    _36 => nonempty_improper_list(any(), any())
  %% Unique:
  %%    _36
  _37 = put_list `binary`, _36

  %% error_SUITE.erl:485
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _37
  _82 = call (`compile`:`file`/2), _1, _37

  %% Aliased:
  %%    _82
  _110 = succeeded:body _82
  br _110, ^110, ^1

110:
  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _38 = put_list _9, `[]`

  %% error_SUITE.erl:488
  %% Unique:
  %%    _38
  _83 = call (`io`:`format`/2), `"~p\n"`, _38

  %% Aliased:
  %%    _83
  _111 = succeeded:body _83
  br _111, ^111, ^1

111:
  %% error_SUITE.erl:489
  %% Aliased:
  %%    _1, 
  %%    _9
  _39 = call (`compile`:`file`/2), _1, _9

  %% Aliased:
  %%    _39
  _112 = succeeded:body _39
  br _112, ^112, ^1

112:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _170 = bif:is_tuple _39
  br _170, ^170, ^114

170:
  %% Argument types:
  %%    _39 => {...}
  %% Aliased:
  %%    _39
  _171 = bif:tuple_size _39
  %% Argument types:
  %%    
  switch _171, ^114, [
    { `3`, ^169 },
    { `4`, ^168 }
  ]

168:
  %% Argument types:
  %%    _39 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _39
  _53 = get_tuple_element _39, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _53
  _127 = bif:'=:=' _53, `ok`
  br _127, ^126, ^114

126:
  %% Argument types:
  %%    _39 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _39
  _52 = get_tuple_element _39, `1`

  %% Argument types:
  %%    _39 => {'ok', any(), any(), any()}
  %% Aliased:
  %%    _39
  _50 = get_tuple_element _39, `3`

  %% Aliased:
  %%    _50
  _123 = is_nonempty_list _50
  br _123, ^123, ^115

123:
  %% Argument types:
  %%    _50 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _50
  _55 = get_hd _50

  %% Argument types:
  %%    _50 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _50
  _54 = get_tl _50

  %% Argument types:
  %%    
  %% Aliased:
  %%    _55
  _120 = bif:is_tuple _55
  br _120, ^120, ^114

120:
  %% Argument types:
  %%    _55 => {...}
  %% Aliased:
  %%    _55
  _121 = bif:tuple_size _55

  %% Argument types:
  %%    _121 => 0..16777215
  %% Unique:
  %%    _121
  _122 = bif:'=:=' _121, `2`
  br _122, ^119, ^114

119:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _54
  _118 = bif:'=:=' _54, `[]`
  br _118, ^118, ^114

118:
  %% Argument types:
  %%    Mod => atom()
  %% Aliased:
  %%    _52
  %% Unique:
  %%    Mod
  _116 = bif:'=:=' _52, Mod
  br _116, ^116, ^114

116:
  %% Argument types:
  %%    _55 => {any(), any()}
  %% Aliased:
  %%    _55
  _56 = get_tuple_element _55, `1`

  %% error_SUITE.erl:491
  %% Aliased:
  %%    _56, 
  %%    Test
  _91 = call (`print_diagnostics`/2), _56, Test

  %% Aliased:
  %%    _91
  _117 = succeeded:body _91
  br _117, ^117, ^1

117:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _92 = put_tuple `warning`, _56
  br ^113

115:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _50
  _125 = bif:'=:=' _50, `[]`
  br _125, ^125, ^114

125:
  %% Argument types:
  %%    Mod => atom()
  %% Aliased:
  %%    _52
  %% Unique:
  %%    Mod
  _124 = bif:'=:=' _52, Mod
  br _124, ^124, ^114

124:
  br ^113

169:
  %% Argument types:
  %%    _39 => {any(), any(), any()}
  %% Aliased:
  %%    _39
  _60 = get_tuple_element _39, `0`

  %% Argument types:
  %%    _39 => {any(), any(), any()}
  %% Aliased:
  %%    _39
  _59 = get_tuple_element _39, `1`

  %% Argument types:
  %%    _39 => {any(), any(), any()}
  %% Aliased:
  %%    _39
  _58 = get_tuple_element _39, `2`
  switch _60, ^114, [
    { `error`, ^167 },
    { `ok`, ^166 }
  ]

166:
  %% Aliased:
  %%    _58
  _135 = is_nonempty_list _58
  br _135, ^135, ^128

135:
  %% Argument types:
  %%    _58 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _58
  _62 = get_hd _58

  %% Argument types:
  %%    _58 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _58
  _61 = get_tl _58

  %% Argument types:
  %%    
  %% Aliased:
  %%    _62
  _132 = bif:is_tuple _62
  br _132, ^132, ^114

132:
  %% Argument types:
  %%    _62 => {...}
  %% Aliased:
  %%    _62
  _133 = bif:tuple_size _62

  %% Argument types:
  %%    _133 => 0..16777215
  %% Unique:
  %%    _133
  _134 = bif:'=:=' _133, `2`
  br _134, ^131, ^114

131:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _61
  _130 = bif:'=:=' _61, `[]`
  br _130, ^130, ^114

130:
  %% Argument types:
  %%    Mod => atom()
  %% Aliased:
  %%    _59
  %% Unique:
  %%    Mod
  _129 = bif:'=:=' _59, Mod
  br _129, ^129, ^114

129:
  %% Argument types:
  %%    _62 => {any(), any()}
  %% Aliased:
  %%    _62
  _63 = get_tuple_element _62, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _90 = put_tuple `warning`, _63
  br ^113

128:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _58
  _137 = bif:'=:=' _58, `[]`
  br _137, ^137, ^114

137:
  %% Argument types:
  %%    Mod => atom()
  %% Aliased:
  %%    _59
  %% Unique:
  %%    Mod
  _136 = bif:'=:=' _59, Mod
  br _136, ^136, ^114

136:
  br ^113

167:
  %% Aliased:
  %%    _59
  _157 = is_nonempty_list _59
  br _157, ^157, ^138

157:
  %% Argument types:
  %%    _59 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _59
  _70 = get_hd _59

  %% Argument types:
  %%    _59 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _59
  _69 = get_tl _59

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _154 = bif:is_tuple _70
  br _154, ^154, ^138

154:
  %% Argument types:
  %%    _70 => {...}
  %% Aliased:
  %%    _70
  _155 = bif:tuple_size _70

  %% Argument types:
  %%    _155 => 0..16777215
  %% Unique:
  %%    _155
  _156 = bif:'=:=' _155, `2`
  br _156, ^153, ^138

153:
  %% Argument types:
  %%    _70 => {any(), any()}
  %% Aliased:
  %%    _70
  _72 = get_tuple_element _70, `0`

  %% Argument types:
  %%    _70 => {any(), any()}
  %% Aliased:
  %%    _70
  _71 = get_tuple_element _70, `1`

  %% Aliased:
  %%    _69
  _149 = is_nonempty_list _69
  br _149, ^149, ^139

149:
  %% Argument types:
  %%    _69 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _69
  _74 = get_hd _69

  %% Argument types:
  %%    _69 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _69
  _73 = get_tl _69

  %% Argument types:
  %%    
  %% Aliased:
  %%    _74
  _146 = bif:is_tuple _74
  br _146, ^146, ^138

146:
  %% Argument types:
  %%    _74 => {...}
  %% Aliased:
  %%    _74
  _147 = bif:tuple_size _74

  %% Argument types:
  %%    _147 => 0..16777215
  %% Unique:
  %%    _147
  _148 = bif:'=:=' _147, `2`
  br _148, ^145, ^138

145:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _144 = bif:'=:=' _73, `[]`
  br _144, ^144, ^138

144:
  %% Argument types:
  %%    _74 => {any(), any()}
  %% Aliased:
  %%    _74
  _76 = get_tuple_element _74, `0`

  %% error_SUITE.erl:502
  %% Argument types:
  %%    
  %% Aliased:
  %%    _72, 
  %%    _76
  _28 = bif:'=:=' _76, _72
  br _28, ^179, ^138

179:
  %% error_SUITE.erl:503
  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _29 = bif:is_list _72
  br _29, ^141, ^138

141:
  %% Argument types:
  %%    _74 => {any(), any()}
  %% Aliased:
  %%    _74
  _75 = get_tuple_element _74, `1`

  %% error_SUITE.erl:504
  %% Aliased:
  %%    _71, 
  %%    _75
  _78 = call (`erlang`:`'++'`/2), _71, _75

  %% Aliased:
  %%    _78
  _142 = succeeded:body _78
  br _142, ^142, ^1

142:
  %% error_SUITE.erl:505
  %% Aliased:
  %%    _78, 
  %%    Test
  _86 = call (`print_diagnostics`/2), _78, Test

  %% Aliased:
  %%    _86
  _143 = succeeded:body _86
  br _143, ^143, ^1

143:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _58, 
  %%    _78
  _87 = put_tuple `error`, _78, _58
  br ^113

139:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _152 = bif:'=:=' _69, `[]`
  br _152, ^152, ^138

152:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _150 = bif:is_list _72
  br _150, ^150, ^138

150:
  %% error_SUITE.erl:500
  %% Aliased:
  %%    _71, 
  %%    Test
  _84 = call (`print_diagnostics`/2), _71, Test

  %% Aliased:
  %%    _84
  _151 = succeeded:body _84
  br _151, ^151, ^1

151:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _58, 
  %%    _71
  _85 = put_tuple `error`, _71, _58
  br ^113

138:
  %% Aliased:
  %%    _58
  _165 = is_nonempty_list _58
  br _165, ^165, ^114

165:
  %% Argument types:
  %%    _58 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _58
  _66 = get_hd _58

  %% Argument types:
  %%    _58 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _58
  _65 = get_tl _58

  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _162 = bif:is_tuple _66
  br _162, ^162, ^114

162:
  %% Argument types:
  %%    _66 => {...}
  %% Aliased:
  %%    _66
  _163 = bif:tuple_size _66

  %% Argument types:
  %%    _163 => 0..16777215
  %% Unique:
  %%    _163
  _164 = bif:'=:=' _163, `2`
  br _164, ^161, ^114

161:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _65
  _160 = bif:'=:=' _65, `[]`
  br _160, ^160, ^114

160:
  %% Argument types:
  %%    _66 => {any(), any()}
  %% Aliased:
  %%    _66
  _67 = get_tuple_element _66, `1`

  %% error_SUITE.erl:508
  %% Aliased:
  %%    _59, 
  %%    _67
  _13 = call (`erlang`:`'++'`/2), _59, _67

  %% Aliased:
  %%    _13
  _158 = succeeded:body _13
  br _158, ^158, ^1

158:
  %% error_SUITE.erl:508
  %% Aliased:
  %%    _13, 
  %%    Test
  _88 = call (`print_diagnostics`/2), _13, Test

  %% Aliased:
  %%    _88
  _159 = succeeded:body _88
  br _159, ^159, ^1

159:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _59, 
  %%    _67
  _89 = put_tuple `error`, _59, _67
  br ^113

113:
  _15 = phi { _92, ^117 }, { `[]`, ^124 }, { _90, ^129 }, { `[]`, ^136 }, { _87, ^143 }, { _85, ^151 }, { _89, ^159 }

  %% error_SUITE.erl:511
  %% Aliased:
  %%    _1
  _94 = call (`file`:`delete`/1), _1

  %% Aliased:
  %%    _94
  _173 = succeeded:body _94
  br _173, ^173, ^1

173:
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _15
  ret _15

114:
  %% error_SUITE.erl:489
  %% Aliased:
  %%    _39
  _93 = match_fail `case_clause`, _39

  %% Unique:
  %%    _93
  _172 = succeeded:body _93
  br ^1

109:
  %% error_SUITE.erl:482
  %% Aliased:
  %%    _35
  _95 = match_fail `badmatch`, _35

  %% Unique:
  %%    _95
  _176 = succeeded:body _95
  br ^1

1:
  _96 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _96
}

%% error_SUITE.erl:514
%% Counter = 33
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     bitstring(8)
function `error_SUITE`:`print_diagnostics`(_0, _1) {
0:
  %% error_SUITE.erl:515
  %% Aliased:
  %%    _1
  _15 = call (`binary`:`match`/2), _1, `<<"-file(">>`

  %% Aliased:
  %%    _15
  _25 = succeeded:body _15
  br _25, ^25, ^1

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _15
  _32 = bif:'=:=' _15, `nomatch`
  br _32, ^31, ^27

31:
  %% error_SUITE.erl:517
  %% Aliased:
  %%    _1
  Lines = call (`binary`:`split`/3), _1, `<<"\n">>`, `[global]`

  %% Aliased:
  %%    Lines
  _28 = succeeded:body Lines
  br _28, ^28, ^1

28:
  %% error_SUITE.erl:518
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _0, 
  %%    Lines
  _9 = call (`'-print_diagnostics/2-lc$^0/1-0-'`/2), _0, Lines

  %% Unique:
  %%    _9
  _29 = succeeded:body _9
  br _29, ^29, ^1

29:
  %% error_SUITE.erl:519
  %% Unique:
  %%    _9
  _22 = call (`io`:`put_chars`/1), _9

  %% Aliased:
  %%    _22
  _30 = succeeded:body _22
  br _30, ^30, ^1

30:
  %% Aliased:
  %%    _22
  ret _22

27:
  %% Result type:
  %%    'ok'
  ret `ok`

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% error_SUITE.erl:526
%% Counter = 81
%% bs_ensure_opt: true
function `error_SUITE`:`print_diagnostic`(_0, _1) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _71 = bif:is_tuple _0
  br _71, ^71, ^47

71:
  %% Argument types:
  %%    _0 => {...}
  %% Aliased:
  %%    _0
  _72 = bif:tuple_size _0

  %% Argument types:
  %%    _72 => 0..16777215
  %% Unique:
  %%    _72
  _73 = bif:'=:=' _72, `3`
  br _73, ^70, ^47

70:
  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _22 = get_tuple_element _0, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _67 = bif:is_tuple _22
  br _67, ^67, ^47

67:
  %% Argument types:
  %%    _22 => {...}
  %% Aliased:
  %%    _22
  _68 = bif:tuple_size _22

  %% Argument types:
  %%    _68 => 0..16777215
  %% Unique:
  %%    _68
  _69 = bif:'=:=' _68, `2`
  br _69, ^66, ^47

66:
  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _24 = get_tuple_element _22, `0`

  %% Argument types:
  %%    _22 => {any(), any()}
  %% Aliased:
  %%    _22
  _23 = get_tuple_element _22, `1`

  %% error_SUITE.erl:527
  %% Aliased:
  %%    _1, 
  %%    _24
  Line0 = call (`lists`:`nth`/2), _24, _1

  %% Aliased:
  %%    Line0
  _48 = succeeded:body Line0
  br _48, ^48, ^1

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Line0
  _26 = bs_start_match `new`, Line0

  %% Aliased:
  %%    _26
  _64 = succeeded:guard _26
  br _64, ^52, ^25

52:
  %% error_SUITE.erl:528
  %% Argument types:
  %%    
  %% Aliased:
  %%    _23
  _42 = bif:'-' _23, `1`

  %% Unique:
  %%    _42
  _55 = succeeded:guard _42
  br _55, ^55, ^54

55:
  br ^53

54:
  br ^53

53:
  _29 = phi { `bad_size`, ^54 }, { _42, ^55 }

  %% error_SUITE.erl:528
  %% Argument types:
  %%    _26 => bs_context(1)
  %%    _29 => 'bad_size' | number()
  %% Aliased:
  %%    _26, 
  %%    _29
  _31 = bs_match `binary`, _26, `[unsigned,big]`, _29, `8`

  %% Aliased:
  %%    _31
  _58 = succeeded:guard _31
  br _58, ^58, ^25

58:
  %% Aliased:
  %%    _31
  _32 = bs_extract _31
  _79 = bs_ensure _31, `0`, `8`
  _80 = succeeded:guard _79
  br _80, ^78, ^25

78:
  %% error_SUITE.erl:528
  %% Aliased:
  %%    _31
  %% Anno: #{ensured => true}
  _33 = bs_match `skip`, _79, `binary`, `[unsigned,big]`, `all`, `8`

  %% Aliased:
  %%    _33
  _59 = succeeded:guard _33
  br _59, ^75, ^25

75:
  %% error_SUITE.erl:529
  %% Aliased:
  %%    _32
  Spaces = call (`re`:`replace`/4), _32, `<<"[^\t]">>`, `<<" ">>`, `[global]`

  %% Aliased:
  %%    Spaces
  _60 = succeeded:body Spaces
  br _60, ^60, ^1

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Spaces
  CaretLine = put_list Spaces, `["^"]`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _21 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _0 => {any(), any(), any()}
  %% Aliased:
  %%    _0
  _20 = get_tuple_element _0, `2`

  %% error_SUITE.erl:531
  %% Aliased:
  %%    _20
  _6 = call (_21:`format_error`/1), _20

  %% Aliased:
  %%    _6
  _61 = succeeded:body _6
  br _61, ^61, ^1

61:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _35 = put_list _6, `[]`

  %% Argument types:
  %%    _35 => nonempty_list(any())
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _35
  _36 = put_list _23, _35

  %% Argument types:
  %%    _36 => nonempty_list(any())
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _36
  _37 = put_list _24, _36

  %% error_SUITE.erl:531
  %% Unique:
  %%    _37
  _7 = call (`io_lib`:`format`/2), `"~p:~p: ~ts\n"`, _37

  %% Aliased:
  %%    _7
  _62 = succeeded:body _7
  br _62, ^62, ^1

62:
  %% Argument types:
  %%    CaretLine => nonempty_list(any())
  %% Unique:
  %%    CaretLine
  _38 = put_list CaretLine, `["\n\n"]`

  %% Argument types:
  %%    _38 => nonempty_list(nonempty_list(any()))
  %% Unique:
  %%    _38
  _39 = put_list `"\n"`, _38

  %% Argument types:
  %%    Line0 => bs_matchable(1)
  %%    _39 => nonempty_list(nonempty_list(any()))
  %% Aliased:
  %%    Line0
  %% Unique:
  %%    _39
  _40 = put_list Line0, _39

  %% Argument types:
  %%    _40 => nonempty_list(nonempty_list(any()) | bs_matchable(1))
  %% Aliased:
  %%    _7
  %% Unique:
  %%    _40
  _43 = put_list _7, _40
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _43
  ret _43

25:
  %% error_SUITE.erl:528
  %% Aliased:
  %%    Line0
  _44 = match_fail `badmatch`, Line0

  %% Unique:
  %%    _44
  _65 = succeeded:body _44
  br ^1

1:
  _45 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _45

47:
  %% Result type:
  %%    nil()
  ret `[]`
}

%% error_SUITE.erl:537
%% Counter = 6
%% bs_ensure_opt: true
function `error_SUITE`:`fail`() {
0:
  %% error_SUITE.erl:538
  _2 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `error_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `error_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `error_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `error_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% error_SUITE.erl:518
%% Counter = 33
%% bs_ensure_opt: true
function `error_SUITE`:`'-print_diagnostics/2-lc$^0/1-0-'`(_5, Lines) {
0:
  %% Aliased:
  %%    _5
  _28 = is_nonempty_list _5
  br _28, ^28, ^25

28:
  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _19 = get_hd _5

  %% Argument types:
  %%    _5 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _5
  _18 = get_tl _5

  %% error_SUITE.erl:518
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _19, 
  %%    Lines
  _7 = call (`print_diagnostic`/2), _19, Lines

  %% Unique:
  %%    _7
  _26 = succeeded:body _7
  br _26, ^26, ^1

26:
  %% error_SUITE.erl:518
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _18, 
  %%    Lines
  _8 = call (`'-print_diagnostics/2-lc$^0/1-0-'`/2), _18, Lines

  %% Unique:
  %%    _8
  _27 = succeeded:body _8
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _7 => list(any())
  %%    _8 => list(list(any()))
  %% Unique:
  %%    _7, 
  %%    _8
  _20 = put_list _7, _8
  %% Result type:
  %%    nonempty_list(list(any()))
  %% Unique:
  %%    _20
  ret _20

25:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _29 = bif:'=:=' _5, `[]`
  br _29, ^29, ^24

29:
  %% Result type:
  %%    nil()
  ret `[]`

24:
  %% Argument types:
  %%    _5 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _5
  _17 = put_tuple `bad_generator`, _5

  %% error_SUITE.erl:518
  %% Unique:
  %%    _17
  _21 = call (`erlang`:`error`/1), _17

  %% Aliased:
  %%    _21
  _30 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% error_SUITE.erl:447
%% Counter = 69
%% bs_ensure_opt: true
%% Parameters
%%    _2 =>
%%     'dont_write_beam'
function `error_SUITE`:`'-run2/3-fun-0-'`(_7, _6, _1, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _47 = bif:is_tuple _7
  br _47, ^47, ^29

47:
  %% Argument types:
  %%    _7 => {...}
  %% Aliased:
  %%    _7
  _48 = bif:tuple_size _7

  %% Argument types:
  %%    _48 => 0..16777215
  %% Unique:
  %%    _48
  _49 = bif:'=:=' _48, `4`
  br _49, ^66, ^29

66:
  %% Argument types:
  %%    _7 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _7
  _17 = get_tuple_element _7, `1`

  %% Argument types:
  %%    _7 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _7
  _16 = get_tuple_element _7, `2`
  br ^68

68:
  _33 = new_try_tag `'catch'`
  br _33, ^31, ^32

31:
  %% error_SUITE.erl:448
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _1, 
  %%    _16, 
  %%    _17
  _3 = call (`run_test`/4), _17, _1, _16, _2

  %% Aliased:
  %%    _3
  _35 = succeeded:body _3
  br _35, ^35, ^32

35:
  %% error_SUITE.erl:448
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), nil()}
  %% Aliased:
  %%    _3
  _23 = call (`filter`/1), _3

  %% Aliased:
  %%    _23
  _36 = succeeded:body _23
  br _36, ^36, ^32

36:
  br ^30

32:
  %% Unique:
  %%    _33
  _39 = landingpad `'catch'`, _33

  %% Aliased:
  %%    _39
  _37 = extract _39, `0`
  br ^30

30:
  _40 = phi { _37, ^32 }, { _23, ^36 }

  %% Aliased:
  %%    _40
  %% Unique:
  %%    _33
  _4 = catch_end _33, _40

  %% Argument types:
  %%    _7 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _7
  _15 = get_tuple_element _7, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4, 
  %%    _15
  _43 = bif:'=:=' _4, _15
  br _43, ^43, ^42

43:
  %% Aliased:
  %%    _6
  ret _6

42:
  %% Argument types:
  %%    _7 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _7
  _18 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _19 = put_list _4, `[]`

  %% Argument types:
  %%    _19 => nonempty_list(any())
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _19
  _20 = put_list _15, _19

  %% Argument types:
  %%    _20 => nonempty_list(any())
  %% Aliased:
  %%    _18
  %% Unique:
  %%    _20
  _21 = put_list _18, _20

  %% error_SUITE.erl:452
  %% Unique:
  %%    _21
  _24 = call (`io`:`format`/2), `"~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"`, _21

  %% Aliased:
  %%    _24
  _44 = succeeded:body _24
  br _44, ^44, ^1

44:
  %% error_SUITE.erl:454
  _25 = call (`fail`/0)

  %% Aliased:
  %%    _25
  _45 = succeeded:body _25
  br _45, ^45, ^1

45:
  %% Aliased:
  %%    _25
  ret _25

29:
  %% error_SUITE.erl:447
  %% Aliased:
  %%    _6, 
  %%    _7
  %% Anno: #{inlined => {'-run2/3-inlined-0-',2}}
  _26 = match_fail `function_clause`, _7, _6

  %% Unique:
  %%    _26
  _50 = succeeded:body _26
  br ^1

1:
  _27 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _27
}

%% error_SUITE.erl:430
%% Counter = 67
%% bs_ensure_opt: true
%% Parameters
%%    _2 =>
%%     'dont_write_beam' | 'write_beam'
function `error_SUITE`:`'-run/3-fun-0-'`(_6, _5, _1, _2) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _45 = bif:is_tuple _6
  br _45, ^45, ^28

45:
  %% Argument types:
  %%    _6 => {...}
  %% Aliased:
  %%    _6
  _46 = bif:tuple_size _6

  %% Argument types:
  %%    _46 => 0..16777215
  %% Unique:
  %%    _46
  _47 = bif:'=:=' _46, `4`
  br _47, ^64, ^28

64:
  %% Argument types:
  %%    _6 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _6
  _16 = get_tuple_element _6, `1`

  %% Argument types:
  %%    _6 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _6
  _15 = get_tuple_element _6, `2`
  br ^66

66:
  _32 = new_try_tag `'catch'`
  br _32, ^30, ^31

30:
  %% error_SUITE.erl:431
  %% Result type:
  %%    nil() | {'warning', any()} | {'error', any(), any()}
  %% Aliased:
  %%    _1, 
  %%    _2, 
  %%    _15, 
  %%    _16
  _22 = call (`run_test`/4), _16, _1, _15, _2

  %% Aliased:
  %%    _22
  _34 = succeeded:body _22
  br _34, ^34, ^31

34:
  br ^29

31:
  %% Unique:
  %%    _32
  _37 = landingpad `'catch'`, _32

  %% Aliased:
  %%    _37
  _35 = extract _37, `0`
  br ^29

29:
  _38 = phi { _35, ^31 }, { _22, ^34 }

  %% Aliased:
  %%    _38
  %% Unique:
  %%    _32
  _3 = catch_end _32, _38

  %% Argument types:
  %%    _6 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _6
  _14 = get_tuple_element _6, `3`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3, 
  %%    _14
  _41 = bif:'=:=' _3, _14
  br _41, ^41, ^40

41:
  %% Aliased:
  %%    _5
  ret _5

40:
  %% Argument types:
  %%    _6 => {any(), any(), any(), any()}
  %% Aliased:
  %%    _6
  _17 = get_tuple_element _6, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _18 = put_list _3, `[]`

  %% Argument types:
  %%    _18 => nonempty_list(any())
  %% Aliased:
  %%    _14
  %% Unique:
  %%    _18
  _19 = put_list _14, _18

  %% Argument types:
  %%    _19 => nonempty_list(any())
  %% Aliased:
  %%    _17
  %% Unique:
  %%    _19
  _20 = put_list _17, _19

  %% error_SUITE.erl:435
  %% Unique:
  %%    _20
  _23 = call (`io`:`format`/2), `"~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"`, _20

  %% Aliased:
  %%    _23
  _42 = succeeded:body _23
  br _42, ^42, ^1

42:
  %% error_SUITE.erl:437
  _24 = call (`fail`/0)

  %% Aliased:
  %%    _24
  _43 = succeeded:body _24
  br _43, ^43, ^1

43:
  %% Aliased:
  %%    _24
  ret _24

28:
  %% error_SUITE.erl:430
  %% Aliased:
  %%    _5, 
  %%    _6
  %% Anno: #{inlined => {'-run/3-inlined-0-',2}}
  _25 = match_fail `function_clause`, _6, _5

  %% Unique:
  %%    _25
  _48 = succeeded:body _25
  br ^1

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}
