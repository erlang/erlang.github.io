{attribute,{1,1},file,{"beam_asm.erl",1}}.
{attribute,{22,2},module,beam_asm}.
{attribute,{25,2},export,[{module,4}]}.
{attribute,{26,2},export,[{encode,2}]}.
{attribute,{28,2},
           export_type,
           [{fail,0},{label,0},{src,0},{module_code,0},{function_name,0}]}.
{attribute,{30,2},
           import,
           {lists,[{append,1},
                   {duplicate,2},
                   {keymember,3},
                   {last,1},
                   {map,2},
                   {member,2},
                   {splitwith,2}]}}.
{attribute,{1,1},file,{"beam_opcodes.hrl",1}}.
{attribute,{34,1},file,{"beam_asm.erl",34}}.
{attribute,{1,1},file,{"beam_asm.hrl",1}}.
{attribute,{1,1},file,{"beam_types.hrl",1}}.
{attribute,{91,2},
           type,
           {float_range,{type,{91,24},
                              union,
                              [{atom,{91,24},any},
                               {type,{91,32},
                                     tuple,
                                     [{atom,{91,33},'-inf'},
                                      {type,{91,40},float,[]}]},
                               {type,{91,51},
                                     tuple,
                                     [{type,{91,52},float,[]},
                                      {atom,{91,60},'+inf'}]}]},
                        []}}.
{attribute,
    {93,2},
    record,
    {t_atom,
        [{typed_record_field,
             {record_field,{93,18},{atom,{93,18},elements},{atom,{93,27},any}},
             {type,
                 {93,34},
                 union,
                 [{atom,{93,34},any},
                  {remote_type,
                      {93,42},
                      [{atom,{93,42},ordsets},
                       {atom,{93,50},ordset},
                       [{type,{93,57},atom,[]}]]}]}}]}}.
{attribute,
    {94,2},
    record,
    {t_bitstring,
        [{typed_record_field,
             {record_field,
                 {94,23},
                 {atom,{94,23},size_unit},
                 {integer,{94,33},1}},
             {type,{94,38},pos_integer,[]}},
         {typed_record_field,
             {record_field,
                 {99,23},
                 {atom,{99,23},appendable},
                 {atom,{99,34},false}},
             {type,{99,43},boolean,[]}}]}}.
{attribute,
    {100,2},
    record,
    {t_bs_context,
        [{typed_record_field,
             {record_field,
                 {100,24},
                 {atom,{100,24},tail_unit},
                 {integer,{100,34},1}},
             {type,{100,39},pos_integer,[]}}]}}.
{attribute,
    {101,2},
    record,
    {t_bs_matchable,
        [{typed_record_field,
             {record_field,
                 {101,26},
                 {atom,{101,26},tail_unit},
                 {integer,{101,36},1}},
             {type,{101,41},pos_integer,[]}}]}}.
{attribute,
    {102,2},
    record,
    {t_float,
        [{typed_record_field,
             {record_field,
                 {102,19},
                 {atom,{102,19},elements},
                 {atom,{102,28},any}},
             {user_type,{102,35},float_range,[]}}]}}.
{attribute,
    {103,2},
    record,
    {t_fun,
        [{typed_record_field,
             {record_field,{103,17},{atom,{103,17},arity},{atom,{103,23},any}},
             {type,
                 {103,30},
                 union,
                 [{type,{103,30},arity,[]},{atom,{103,40},any}]}},
         {typed_record_field,
             {record_field,
                 {104,17},
                 {atom,{104,17},target},
                 {atom,{104,24},any}},
             {type,
                 {104,31},
                 union,
                 [{type,
                      {104,31},
                      tuple,
                      [{type,{104,32},atom,[]},
                       {type,{104,40},non_neg_integer,[]}]},
                  {atom,{104,61},any}]}},
         {typed_record_field,
             {record_field,{105,17},{atom,{105,17},type},{atom,{105,22},any}},
             {user_type,{105,29},type,[]}}]}}.
{attribute,
    {106,2},
    record,
    {t_integer,
        [{typed_record_field,
             {record_field,
                 {106,21},
                 {atom,{106,21},elements},
                 {atom,{106,30},any}},
             {type,
                 {106,37},
                 union,
                 [{atom,{106,37},any},
                  {remote_type,
                      {106,45},
                      [{atom,{106,45},beam_bounds},
                       {atom,{106,57},range},
                       []]}]}}]}}.
{attribute,
    {107,2},
    record,
    {t_number,
        [{typed_record_field,
             {record_field,
                 {107,20},
                 {atom,{107,20},elements},
                 {atom,{107,29},any}},
             {type,
                 {107,36},
                 union,
                 [{atom,{107,36},any},
                  {remote_type,
                      {107,44},
                      [{atom,{107,44},beam_bounds},
                       {atom,{107,56},range},
                       []]}]}}]}}.
{attribute,
    {113,2},
    record,
    {t_map,
        [{typed_record_field,
             {record_field,
                 {113,17},
                 {atom,{113,17},super_key},
                 {atom,{113,27},any}},
             {user_type,{113,34},type,[]}},
         {typed_record_field,
             {record_field,
                 {114,17},
                 {atom,{114,17},super_value},
                 {atom,{114,29},any}},
             {user_type,{114,36},type,[]}}]}}.
{attribute,
    {122,2},
    record,
    {t_cons,
        [{typed_record_field,
             {record_field,{122,18},{atom,{122,18},type},{atom,{122,23},any}},
             {user_type,{122,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {122,38},
                 {atom,{122,38},terminator},
                 {atom,{122,49},any}},
             {user_type,{122,56},type,[]}}]}}.
{attribute,
    {123,2},
    record,
    {t_list,
        [{typed_record_field,
             {record_field,{123,18},{atom,{123,18},type},{atom,{123,23},any}},
             {user_type,{123,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {123,38},
                 {atom,{123,38},terminator},
                 {atom,{123,49},any}},
             {user_type,{123,56},type,[]}}]}}.
{attribute,
    {125,2},
    record,
    {t_tuple,
        [{typed_record_field,
             {record_field,{125,19},{atom,{125,19},size},{integer,{125,24},0}},
             {type,{125,29},integer,[]}},
         {typed_record_field,
             {record_field,
                 {126,19},
                 {atom,{126,19},exact},
                 {atom,{126,25},false}},
             {type,{126,34},boolean,[]}},
         {typed_record_field,
             {record_field,
                 {127,19},
                 {atom,{127,19},elements},
                 {map,{127,28},[]}},
             {user_type,{127,35},tuple_elements,[]}}]}}.
{attribute,
    {146,2},
    type,
    {tuple_elements,
        {type,
            {146,27},
            map,
            [{type,
                 {146,51},
                 map_field_assoc,
                 [{ann_type,
                      {146,30},
                      [{var,{146,30},'Key'},{type,{146,37},pos_integer,[]}]},
                  {user_type,{146,54},type,[]}]}]},
        []}}.
{attribute,{148,2},
           type,
           {normal_type,{type,{148,24},
                              union,
                              [{atom,{148,24},any},
                               {atom,{148,32},none},
                               {type,{149,24},
                                     record,
                                     [{atom,{149,25},t_number}]},
                               {type,{149,38},
                                     record,
                                     [{atom,{149,39},t_float}]},
                               {type,{149,51},
                                     record,
                                     [{atom,{149,52},t_integer}]},
                               {type,{150,24},record,[{atom,{150,25},t_atom}]},
                               {type,{151,24},
                                     record,
                                     [{atom,{151,25},t_bitstring}]},
                               {type,{151,41},
                                     record,
                                     [{atom,{151,42},t_bs_context}]},
                               {type,{151,59},
                                     record,
                                     [{atom,{151,60},t_bs_matchable}]},
                               {type,{152,24},record,[{atom,{152,25},t_fun}]},
                               {type,{153,24},record,[{atom,{153,25},t_list}]},
                               {type,{153,36},record,[{atom,{153,37},t_cons}]},
                               {atom,{153,48},nil},
                               {atom,{154,24},other},
                               {type,{155,24},record,[{atom,{155,25},t_map}]},
                               {atom,{156,24},identifier},
                               {atom,{157,24},pid},
                               {atom,{158,24},port},
                               {atom,{159,24},reference},
                               {type,{160,24},
                                     record,
                                     [{atom,{160,25},t_tuple}]}]},
                        []}}.
{attribute,{162,2},
           type,
           {other_type,{type,{162,23},
                             union,
                             [{atom,{162,23},none},
                              {type,{162,32},record,[{atom,{162,33},t_fun}]},
                              {type,{162,43},record,[{atom,{162,44},t_map}]},
                              {atom,{163,23},pid},
                              {atom,{163,31},port},
                              {atom,{163,40},reference},
                              {atom,{163,54},identifier},
                              {type,{164,23},
                                    record,
                                    [{atom,{164,24},t_bitstring}]},
                              {type,{164,40},
                                    record,
                                    [{atom,{164,41},t_bs_context}]},
                              {type,{165,23},
                                    record,
                                    [{atom,{165,24},t_bs_matchable}]}]},
                       []}}.
{attribute,
    {167,2},
    type,
    {record_key,
        {type,
            {167,23},
            tuple,
            [{ann_type,
                 {167,24},
                 [{var,{167,24},'Arity'},{type,{167,33},integer,[]}]},
             {ann_type,
                 {167,44},
                 [{var,{167,44},'Tag'},{user_type,{167,51},normal_type,[]}]}]},
        []}}.
{attribute,
    {168,2},
    type,
    {record_set,
        {remote_type,
            {168,23},
            [{atom,{168,23},ordsets},
             {atom,{168,31},ordset},
             [{type,
                  {168,38},
                  tuple,
                  [{user_type,{168,39},record_key,[]},
                   {type,{168,53},record,[{atom,{168,54},t_tuple}]}]}]]},
        []}}.
{attribute,{169,2},
           type,
           {tuple_set,{type,{169,22},
                            union,
                            [{type,{169,22},record,[{atom,{169,23},t_tuple}]},
                             {user_type,{169,35},record_set,[]}]},
                      []}}.
{attribute,
    {173,2},
    record,
    {t_union,
        [{typed_record_field,
             {record_field,{173,19},{atom,{173,19},atom},{atom,{173,24},none}},
             {type,
                 {173,32},
                 union,
                 [{atom,{173,32},none},
                  {type,{173,41},record,[{atom,{173,42},t_atom}]}]}},
         {typed_record_field,
             {record_field,{174,19},{atom,{174,19},list},{atom,{174,24},none}},
             {type,
                 {174,32},
                 union,
                 [{atom,{174,32},none},
                  {type,{174,41},record,[{atom,{174,42},t_list}]},
                  {type,{174,53},record,[{atom,{174,54},t_cons}]},
                  {atom,{174,65},nil}]}},
         {typed_record_field,
             {record_field,
                 {175,19},
                 {atom,{175,19},number},
                 {atom,{175,26},none}},
             {type,
                 {175,34},
                 union,
                 [{atom,{175,34},none},
                  {type,{175,43},record,[{atom,{175,44},t_number}]},
                  {type,{175,57},record,[{atom,{175,58},t_float}]},
                  {type,{175,70},record,[{atom,{175,71},t_integer}]}]}},
         {typed_record_field,
             {record_field,
                 {176,19},
                 {atom,{176,19},tuple_set},
                 {atom,{176,29},none}},
             {type,
                 {176,37},
                 union,
                 [{atom,{176,37},none},{user_type,{176,46},tuple_set,[]}]}},
         {typed_record_field,
             {record_field,
                 {177,19},
                 {atom,{177,19},other},
                 {atom,{177,25},none}},
             {type,
                 {177,33},
                 union,
                 [{atom,{177,33},other},
                  {user_type,{177,43},other_type,[]}]}}]}}.
{attribute,{179,2},
           type,
           {type,{type,{179,17},
                       union,
                       [{type,{179,17},record,[{atom,{179,18},t_union}]},
                        {user_type,{179,30},normal_type,[]}]},
                 []}}.
{attribute,{22,1},file,{"beam_asm.hrl",22}}.
{attribute,{23,2},
           type,
           {reg_num,{type,{23,20},
                          range,
                          [{integer,{23,20},0},{integer,{23,25},1023}]},
                    []}}.
{attribute,{25,2},
           type,
           {xreg,{type,{25,17},
                       tuple,
                       [{atom,{25,18},x},{user_type,{25,23},reg_num,[]}]},
                 []}}.
{attribute,{26,2},
           type,
           {yreg,{type,{26,17},
                       tuple,
                       [{atom,{26,18},y},{user_type,{26,23},reg_num,[]}]},
                 []}}.
{attribute,{27,2},
           type,
           {freg,{type,{27,17},
                       tuple,
                       [{atom,{27,18},fr},{user_type,{27,24},reg_num,[]}]},
                 []}}.
{attribute,{28,2},
           type,
           {zreg,{type,{28,17},
                       tuple,
                       [{atom,{28,18},z},{user_type,{28,23},reg_num,[]}]},
                 []}}.
{attribute,{30,2},
           type,
           {beam_reg,{type,{30,21},
                           union,
                           [{user_type,{30,21},xreg,[]},
                            {user_type,{30,30},yreg,[]},
                            {user_type,{30,39},freg,[]}]},
                     []}}.
{attribute,
    {32,2},
    type,
    {beam_literal,
        {type,
            {32,25},
            union,
            [{type,
                 {32,25},
                 tuple,
                 [{atom,{32,26},atom},
                  {type,
                      {32,32},
                      union,
                      [{type,{32,32},nil,[]},{type,{32,37},atom,[]}]}]},
             {type,
                 {33,25},
                 tuple,
                 [{atom,{33,26},float},
                  {type,
                      {33,33},
                      union,
                      [{type,{33,33},nil,[]},{type,{33,38},float,[]}]}]},
             {type,
                 {34,25},
                 tuple,
                 [{atom,{34,26},integer},
                  {type,
                      {34,35},
                      union,
                      [{type,{34,35},nil,[]},{type,{34,40},integer,[]}]}]},
             {type,
                 {35,25},
                 tuple,
                 [{atom,{35,26},literal},{type,{35,35},term,[]}]},
             {atom,{36,25},nil}]},
        []}}.
{attribute,{44,2},
           record,
           {tr,[{typed_record_field,{record_field,{44,14},{atom,{44,14},r}},
                                    {user_type,{44,19},beam_reg,[]}},
                {typed_record_field,{record_field,{44,31},{atom,{44,31},t}},
                                    {user_type,{44,36},type,[]}}]}}.
{attribute,{35,1},file,{"beam_asm.erl",35}}.
{attribute,{39,2},
           type,
           {src,{type,{39,16},
                      union,
                      [{user_type,{39,16},beam_reg,[]},
                       {type,{40,9},
                             tuple,
                             [{atom,{40,10},literal},{type,{40,20},term,[]}]},
                       {type,{41,9},
                             tuple,
                             [{atom,{41,10},atom},{type,{41,17},atom,[]}]},
                       {type,{42,9},
                             tuple,
                             [{atom,{42,10},integer},
                              {type,{42,20},integer,[]}]},
                       {atom,{43,9},nil},
                       {type,{44,9},
                             tuple,
                             [{atom,{44,10},float},{type,{44,18},float,[]}]}]},
                []}}.
{attribute,{45,2},type,{label,{type,{45,18},pos_integer,[]},[]}}.
{attribute,{46,2},
           type,
           {fail,{type,{46,17},
                       tuple,
                       [{atom,{46,18},f},
                        {type,{46,22},
                              union,
                              [{user_type,{46,22},label,[]},
                               {integer,{46,32},0}]}]},
                 []}}.
{attribute,{52,2},
           type,
           {asm_instruction,{type,{52,28},
                                  union,
                                  [{type,{52,28},atom,[]},
                                   {type,{52,37},tuple,any}]},
                            []}}.
{attribute,{54,2},type,{function_name,{type,{54,26},atom,[]},[]}}.
{attribute,
    {56,2},
    type,
    {asm_function,
        {type,
            {57,9},
            tuple,
            [{atom,{57,10},function},
             {user_type,{57,21},function_name,[]},
             {type,{57,37},arity,[]},
             {user_type,{57,45},label,[]},
             {type,{57,53},list,[{user_type,{57,54},asm_instruction,[]}]}]},
        []}}.
{attribute,{59,2},
           type,
           {module_code,{type,{60,9},
                              tuple,
                              [{type,{60,10},module,[]},
                               {type,{60,19},list,[{var,{60,20},'_'}]},
                               {type,{60,23},list,[{var,{60,24},'_'}]},
                               {type,{60,27},
                                     list,
                                     [{user_type,{60,28},asm_function,[]}]},
                               {type,{60,44},pos_integer,[]}]},
                        []}}.
{attribute,
    {66,2},
    spec,
    {{module,4},
     [{type,
          {66,13},
          'fun',
          [{type,
               {66,13},
               product,
               [{user_type,{66,14},module_code,[]},
                {type,
                    {66,29},
                    list,
                    [{type,
                         {66,30},
                         tuple,
                         [{type,{66,31},binary,[]},
                          {type,{66,41},binary,[]}]}]},
                {type,
                    {67,14},
                    list,
                    [{type,
                         {67,15},
                         tuple,
                         [{type,{67,16},atom,[]},{type,{67,23},term,[]}]}]},
                {type,
                    {67,33},
                    list,
                    [{remote_type,
                         {67,34},
                         [{atom,{67,34},compile},
                          {atom,{67,42},option},
                          []]}]}]},
           {type,
               {68,11},
               tuple,
               [{atom,{68,12},ok},{type,{68,17},binary,[]}]}]}]}}.
{function,
    {70,1},
    module,4,
    [{clause,
         {70,1},
         [{var,{70,1},'_'},{var,{70,1},'_'},{var,{70,1},'_'},{var,{70,1},'_'}],
         [[{call,
               {70,1},
               {remote,
                   {70,1},
                   {atom,{70,1},fake},
                   {atom,{70,1},is_beam_bif_info}},
               []}]],
         [{debug_line,70,1},{atom,{70,1},ignore}]},
     {clause,
         {70,1},
         [{var,{70,8},'Code0'},
          {var,{70,15},'ExtraChunks'},
          {var,{70,28},'CompileInfo'},
          {var,{70,41},'CompilerOpts'}],
         [],
         [{debug_line,71,2},
          {match,
              {71,5},
              {tuple,
                  {71,5},
                  [{var,{71,6},'Mod'},
                   {var,{71,10},'Exp0'},
                   {var,{71,15},'Attr0'},
                   {var,{71,21},'Asm0'},
                   {var,{71,26},'NumLabels'}]},
              {var,{71,39},'Code0'}},
          {debug_line,72,3},
          {match,
              {72,5},
              {tuple,{72,5},[{integer,{72,6},1},{var,{72,8},'Dict0'}]},
              {call,
                  {72,17},
                  {remote,
                      {72,26},
                      {atom,{72,17},beam_dict},
                      {atom,{72,27},atom}},
                  [{var,{72,32},'Mod'},
                   {block,0,
                       [{call,
                            {72,37},
                            {remote,
                                {72,46},
                                {atom,{72,37},beam_dict},
                                {atom,{72,47},new}},
                            []}]}]}},
          {debug_line,73,4},
          {match,
              {73,5},
              {tuple,{73,5},[{integer,{73,6},0},{var,{73,8},'Dict1'}]},
              {call,
                  {73,17},
                  {remote,
                      {73,26},
                      {atom,{73,17},beam_dict},
                      {atom,{73,27},fname}},
                  [{block,0,
                       [{op,{73,51},
                            '++',
                            {call,
                                {73,33},
                                {remote,
                                    {73,33},
                                    {atom,{73,33},erlang},
                                    {atom,{73,33},atom_to_list}},
                                [{var,{73,46},'Mod'}]},
                            {string,{73,54},".erl"}}]},
                   {var,{73,62},'Dict0'}]}},
          {debug_line,74,5},
          {match,
              {74,5},
              {tuple,{74,5},[{integer,{74,6},0},{var,{74,8},'Dict2'}]},
              {call,
                  {74,17},
                  {remote,
                      {74,26},
                      {atom,{74,17},beam_dict},
                      {atom,{74,27},type}},
                  [{atom,{74,32},any},{var,{74,37},'Dict1'}]}},
          {debug_line,75,6},
          {match,
              {75,5},
              {var,{75,5},'Dict3'},
              {call,
                  {75,13},
                  {atom,{75,13},reject_unsupported_versions},
                  [{var,{75,41},'Dict2'}]}},
          {debug_line,77,7},
          {match,
              {77,5},
              {var,{77,5},'NumFuncs'},
              {call,
                  {77,16},
                  {remote,{77,16},{atom,{77,16},erlang},{atom,{77,16},length}},
                  [{var,{77,23},'Asm0'}]}},
          {debug_line,78,8},
          {match,
              {78,5},
              {tuple,{78,5},[{var,{78,6},'Asm'},{var,{78,10},'Attr'}]},
              {call,
                  {78,18},
                  {atom,{78,18},on_load},
                  [{var,{78,26},'Asm0'},{var,{78,32},'Attr0'}]}},
          {debug_line,79,9},
          {match,
              {79,5},
              {var,{79,5},'Exp'},
              {call,
                  {79,11},
                  {remote,
                      {79,15},
                      {atom,{79,11},sets},
                      {atom,{79,16},from_list}},
                  [{var,{79,26},'Exp0'}]}},
          {debug_line,80,10},
          {match,
              {80,5},
              {tuple,{80,5},[{var,{80,6},'Code'},{var,{80,11},'Dict'}]},
              {call,
                  {80,19},
                  {atom,{80,19},assemble},
                  [{var,{80,28},'Asm'},
                   {var,{80,33},'Exp'},
                   {var,{80,38},'Dict3'},
                   {nil,{80,45}}]}},
          {debug_line,81,11},
          {match,
              {81,5},
              {var,{81,5},'Beam'},
              {call,
                  {81,12},
                  {atom,{81,12},build_file},
                  [{var,{81,23},'Code'},
                   {var,{81,29},'Attr'},
                   {var,{81,35},'Dict'},
                   {var,{81,41},'NumLabels'},
                   {var,{81,52},'NumFuncs'},
                   {var,{82,23},'ExtraChunks'},
                   {var,{82,36},'CompileInfo'},
                   {var,{82,49},'CompilerOpts'}]}},
          {debug_line,83,12},
          {tuple,{83,5},[{atom,{83,6},ok},{var,{83,9},'Beam'}]}]}]}.
{function,
    {85,1},
    reject_unsupported_versions,1,
    [{clause,
         {85,1},
         [{var,{85,1},'_'}],
         [[{call,
               {85,1},
               {remote,
                   {85,1},
                   {atom,{85,1},fake},
                   {atom,{85,1},is_beam_bif_info}},
               []}]],
         [{debug_line,85,13},{atom,{85,1},ignore}]},
     {clause,
         {85,1},
         [{var,{85,29},'Dict'}],
         [],
         [{debug_line,88,14},
          {match,
              {88,5},
              {var,{88,5},'Instr'},
              {call,
                  {88,13},
                  {remote,
                      {88,25},
                      {atom,{88,13},beam_opcodes},
                      {atom,{88,26},opcode}},
                  [{atom,{88,33},bs_create_bin},{integer,{88,48},6}]}},
          {debug_line,89,15},
          {call,
              {89,5},
              {remote,{89,14},{atom,{89,5},beam_dict},{atom,{89,15},opcode}},
              [{var,{89,22},'Instr'},{var,{89,29},'Dict'}]}]}]}.
{function,
 {91,1},
 on_load,2,
 [{clause,
   {91,1},
   [{var,{91,1},'_'},{var,{91,1},'_'}],
   [[{call,
      {91,1},
      {remote,{91,1},{atom,{91,1},fake},{atom,{91,1},is_beam_bif_info}},
      []}]],
   [{debug_line,91,16},{atom,{91,1},ignore}]},
  {clause,
   {91,1},
   [{var,{91,9},'Fs0'},{var,{91,14},'Attr0'}],
   [],
   [{debug_line,92,17},
    {'case',
     {92,5},
     {call,
      {92,10},
      {remote,{92,19},{atom,{92,10},proplists},{atom,{92,20},get_value}},
      [{atom,{92,30},on_load},{var,{92,39},'Attr0'}]},
     [{clause,
       {93,2},
       [{atom,{93,2},undefined}],
       [],
       [{debug_line,94,18},
        {tuple,{94,6},[{var,{94,7},'Fs0'},{var,{94,11},'Attr0'}]}]},
      {clause,
       {95,2},
       [{cons,
         {95,2},
         {tuple,{95,3},[{var,{95,4},'Name'},{integer,{95,9},0}]},
         {nil,{95,11}}}],
       [],
       [{debug_line,96,19},
        {match,
         {96,6},
         {var,{96,6},'Fs'},
         {call,
          {96,11},
          {remote,{96,11},{atom,{96,11},lists},{atom,{96,11},map}},
          [{block,0,
            [{'fun',
              {96,15},
              {clauses,
               [{clause,
                 {96,18},
                 [{tuple,
                   {96,19},
                   [{atom,{96,20},function},
                    {var,{96,29},'N'},
                    {integer,{96,31},0},
                    {var,{96,33},'Entry'},
                    {var,{96,39},'Is0'}]}],
                 [[{op,{96,52},'=:=',{var,{96,50},'N'},{var,{96,56},'Name'}}]],
                 [{debug_line,97,20},
                  {match,
                   {97,9},
                   {var,{97,9},'Is'},
                   {call,
                    {97,14},
                    {atom,{97,14},insert_on_load_instruction},
                    [{var,{97,41},'Is0'},{var,{97,46},'Entry'}]}},
                  {debug_line,98,21},
                  {tuple,
                   {98,9},
                   [{atom,{98,10},function},
                    {var,{98,19},'N'},
                    {integer,{98,21},0},
                    {var,{98,23},'Entry'},
                    {var,{98,29},'Is'}]}]},
                {clause,
                 {99,4},
                 [{var,{99,5},'F'}],
                 [],
                 [{debug_line,100,22},{var,{100,9},'F'}]}]}}]},
           {var,{101,13},'Fs0'}]}},
        {debug_line,102,23},
        {match,
         {102,6},
         {var,{102,6},'Attr'},
         {call,
          {102,13},
          {remote,{102,22},{atom,{102,13},proplists},{atom,{102,23},delete}},
          [{atom,{102,30},on_load},{var,{102,39},'Attr0'}]}},
        {debug_line,103,24},
        {tuple,{103,6},[{var,{103,7},'Fs'},{var,{103,10},'Attr'}]}]}]}]}]}.
{function,
 {106,1},
 insert_on_load_instruction,2,
 [{clause,
   {106,1},
   [{var,{106,1},'_'},{var,{106,1},'_'}],
   [[{call,
      {106,1},
      {remote,{106,1},{atom,{106,1},fake},{atom,{106,1},is_beam_bif_info}},
      []}]],
   [{debug_line,106,25},{atom,{106,1},ignore}]},
  {clause,
   {106,1},
   [{var,{106,28},'Is0'},{var,{106,33},'Entry'}],
   [],
   [{debug_line,107,26},
    {match,
     {107,5},
     {tuple,
      {107,5},
      [{var,{107,6},'Bef'},
       {cons,
        {107,10},
        {match,
         {107,11},
         {tuple,{107,11},[{atom,{107,12},label},{var,{107,18},'Entry'}]},
         {var,{107,25},'El'}},
        {var,{107,28},'Is'}}]},
     {call,
      {108,2},
      {remote,{108,2},{atom,{108,2},lists},{atom,{108,2},splitwith}},
      [{block,0,
        [{debug_line,108,27},
         {'fun',
          {108,12},
          {clauses,
           [{clause,
             {108,15},
             [{tuple,{108,16},[{atom,{108,17},label},{var,{108,23},'L'}]}],
             [[{op,{108,34},'=:=',{var,{108,32},'L'},{var,{108,38},'Entry'}}]],
             [{atom,{108,47},false}]},
            {clause,
             {109,8},
             [{var,{109,9},'_'}],
             [],
             [{debug_line,109,28},{atom,{109,15},true}]}]}}]},
       {var,{110,10},'Is0'}]}},
    {debug_line,111,29},
    {op,
     {111,9},
     '++',
     {var,{111,5},'Bef'},
     {cons,
      {111,12},
      {var,{111,13},'El'},
      {cons,{111,16},{atom,{111,16},on_load},{var,{111,24},'Is'}}}}]}]}.
{function,
    {113,1},
    assemble,4,
    [{clause,
         {113,1},
         [{var,{113,1},'_'},
          {var,{113,1},'_'},
          {var,{113,1},'_'},
          {var,{113,1},'_'}],
         [[{call,
               {113,1},
               {remote,
                   {113,1},
                   {atom,{113,1},fake},
                   {atom,{113,1},is_beam_bif_info}},
               []}]],
         [{debug_line,113,30},{atom,{113,1},ignore}]},
     {clause,
         {113,1},
         [{cons,
              {113,10},
              {tuple,
                  {113,11},
                  [{atom,{113,12},function},
                   {var,{113,21},'Name'},
                   {var,{113,26},'Arity'},
                   {var,{113,32},'Entry'},
                   {var,{113,38},'Asm'}]},
              {var,{113,43},'T'}},
          {var,{113,47},'Exp'},
          {var,{113,52},'Dict0'},
          {var,{113,59},'Acc'}],
         [],
         [{debug_line,114,31},
          {match,
              {114,5},
              {var,{114,5},'Dict1'},
              {'case',
                  {114,13},
                  {call,
                      {114,18},
                      {remote,
                          {114,22},
                          {atom,{114,18},sets},
                          {atom,{114,23},is_element}},
                      [{block,0,
                           [{tuple,
                                {114,34},
                                [{var,{114,35},'Name'},
                                 {var,{114,40},'Arity'}]}]},
                       {var,{114,48},'Exp'}]},
                  [{clause,
                       {115,3},
                       [{atom,{115,3},true}],
                       [],
                       [{debug_line,116,32},
                        {call,
                            {116,7},
                            {remote,
                                {116,16},
                                {atom,{116,7},beam_dict},
                                {atom,{116,17},export}},
                            [{var,{116,24},'Name'},
                             {var,{116,30},'Arity'},
                             {var,{116,37},'Entry'},
                             {var,{116,44},'Dict0'}]}]},
                   {clause,
                       {117,3},
                       [{atom,{117,3},false}],
                       [],
                       [{debug_line,118,33},
                        {call,
                            {118,7},
                            {remote,
                                {118,16},
                                {atom,{118,7},beam_dict},
                                {atom,{118,17},local}},
                            [{var,{118,23},'Name'},
                             {var,{118,29},'Arity'},
                             {var,{118,36},'Entry'},
                             {var,{118,43},'Dict0'}]}]}]}},
          {debug_line,120,34},
          {match,
              {120,5},
              {tuple,{120,5},[{var,{120,6},'Code'},{var,{120,12},'Dict2'}]},
              {call,
                  {120,21},
                  {atom,{120,21},assemble_function},
                  [{var,{120,39},'Asm'},
                   {var,{120,44},'Acc'},
                   {var,{120,49},'Dict1'}]}},
          {debug_line,121,35},
          {call,
              {121,5},
              {atom,{121,5},assemble},
              [{var,{121,14},'T'},
               {var,{121,17},'Exp'},
               {var,{121,22},'Dict2'},
               {var,{121,29},'Code'}]}]},
     {clause,
         {122,1},
         [{nil,{122,10}},
          {var,{122,14},'_Exp'},
          {var,{122,20},'Dict0'},
          {var,{122,27},'Acc'}],
         [],
         [{debug_line,123,36},
          {match,
              {123,5},
              {tuple,
                  {123,5},
                  [{var,{123,6},'IntCodeEnd'},{var,{123,17},'Dict1'}]},
              {call,
                  {123,26},
                  {atom,{123,26},make_op},
                  [{atom,{123,34},int_code_end},{var,{123,48},'Dict0'}]}},
          {debug_line,124,37},
          {tuple,
              {124,5},
              [{call,
                   {124,6},
                   {remote,
                       {124,6},
                       {atom,{124,6},erlang},
                       {atom,{124,6},list_to_binary}},
                   [{block,0,
                        [{call,
                             {124,21},
                             {remote,
                                 {124,26},
                                 {atom,{124,21},lists},
                                 {atom,{124,27},reverse}},
                             [{var,{124,35},'Acc'},
                              {block,0,
                                  [{cons,
                                       {124,40},
                                       {var,{124,41},'IntCodeEnd'},
                                       {nil,{124,51}}}]}]}]}]},
               {var,{124,55},'Dict1'}]}]}]}.
{function,
    {126,1},
    assemble_function,3,
    [{clause,
         {126,1},
         [{var,{126,1},'_'},{var,{126,1},'_'},{var,{126,1},'_'}],
         [[{call,
               {126,1},
               {remote,
                   {126,1},
                   {atom,{126,1},fake},
                   {atom,{126,1},is_beam_bif_info}},
               []}]],
         [{debug_line,126,38},{atom,{126,1},ignore}]},
     {clause,
         {126,1},
         [{cons,{126,19},{var,{126,20},'H'},{var,{126,22},'T'}},
          {var,{126,26},'Acc'},
          {var,{126,31},'Dict0'}],
         [],
         [{debug_line,127,39},
          {match,
              {127,5},
              {tuple,{127,5},[{var,{127,6},'Code'},{var,{127,12},'Dict'}]},
              {call,
                  {127,20},
                  {atom,{127,20},make_op},
                  [{var,{127,28},'H'},{var,{127,31},'Dict0'}]}},
          {debug_line,128,40},
          {call,
              {128,5},
              {atom,{128,5},assemble_function},
              [{var,{128,23},'T'},
               {block,0,
                   [{cons,
                        {128,26},
                        {var,{128,27},'Code'},
                        {var,{128,33},'Acc'}}]},
               {var,{128,39},'Dict'}]}]},
     {clause,
         {129,1},
         [{nil,{129,19}},{var,{129,23},'Code'},{var,{129,29},'Dict'}],
         [],
         [{debug_line,130,41},
          {tuple,{130,5},[{var,{130,6},'Code'},{var,{130,12},'Dict'}]}]}]}.
{function,
 {132,1},
 build_file,8,
 [{clause,
   {132,1},
   [{var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'},
    {var,{132,1},'_'}],
   [[{call,
      {132,1},
      {remote,{132,1},{atom,{132,1},fake},{atom,{132,1},is_beam_bif_info}},
      []}]],
   [{debug_line,132,42},{atom,{132,1},ignore}]},
  {clause,
   {132,1},
   [{var,{132,12},'Code'},
    {var,{132,18},'Attr'},
    {var,{132,24},'Dict0'},
    {var,{132,31},'NumLabels'},
    {var,{132,42},'NumFuncs'},
    {var,{132,52},'ExtraChunks0'},
    {var,{133,12},'CompileInfo'},
    {var,{133,25},'CompilerOpts'}],
   [],
   [{debug_line,136,43},
    {match,
     {136,5},
     {var,{136,5},'CodeChunk'},
     {call,
      {136,17},
      {atom,{136,17},chunk},
      [{block,0,
        [{bin,
          {136,23},
          [{bin_element,{136,25},{string,{136,25},"Code"},default,default}]}]},
       {block,0,
        [{debug_line,137,44},
         {bin,
          {137,9},
          [{bin_element,
            {137,11},
            {integer,{137,11},16},
            {integer,{137,14},32},
            default},
           {bin_element,
            {138,11},
            {call,
             {138,11},
             {remote,
              {138,23},
              {atom,{138,11},beam_opcodes},
              {atom,{138,24},format_number}},
             []},
            {integer,{138,41},32},
            default},
           {bin_element,
            {139,11},
            {call,
             {139,11},
             {remote,
              {139,20},
              {atom,{139,11},beam_dict},
              {atom,{139,21},highest_opcode}},
             [{var,{139,36},'Dict0'}]},
            {integer,{139,44},32},
            default},
           {bin_element,
            {140,10},
            {var,{140,10},'NumLabels'},
            {integer,{140,20},32},
            default},
           {bin_element,
            {141,10},
            {var,{141,10},'NumFuncs'},
            {integer,{141,19},32},
            default}]}]},
       {var,{142,9},'Code'}]}},
    {debug_line,147,45},
    {match,
     {147,5},
     {tuple,{147,5},[{var,{147,6},'ExtraChunks1'},{var,{147,19},'Dict'}]},
     {call,
      {147,27},
      {atom,{147,27},build_beam_debug_info},
      [{var,{147,49},'ExtraChunks0'},
       {var,{147,63},'CompilerOpts'},
       {var,{147,77},'Dict0'}]}},
    {debug_line,150,46},
    {match,
     {150,5},
     {var,{150,5},'AtomChunk'},
     {call,
      {150,17},
      {atom,{150,17},build_atom_table},
      [{var,{150,34},'CompilerOpts'},{var,{150,48},'Dict'}]}},
    {debug_line,154,47},
    {match,
     {154,5},
     {tuple,{154,5},[{var,{154,6},'NumImps'},{var,{154,15},'ImpTab0'}]},
     {call,
      {154,26},
      {remote,{154,35},{atom,{154,26},beam_dict},{atom,{154,36},import_table}},
      [{var,{154,49},'Dict'}]}},
    {debug_line,155,48},
    {match,
     {155,5},
     {var,{155,5},'Imp'},
     {call,
      {155,11},
      {atom,{155,11},flatten_imports},
      [{var,{155,27},'ImpTab0'}]}},
    {debug_line,156,49},
    {match,
     {156,5},
     {var,{156,5},'ImportChunk'},
     {call,
      {156,19},
      {atom,{156,19},chunk},
      [{block,0,
        [{bin,
          {156,25},
          [{bin_element,{156,27},{string,{156,27},"ImpT"},default,default}]}]},
       {block,0,
        [{bin,
          {156,37},
          [{bin_element,
            {156,39},
            {var,{156,39},'NumImps'},
            {integer,{156,47},32},
            default}]}]},
       {var,{156,53},'Imp'}]}},
    {debug_line,160,50},
    {match,
     {160,5},
     {tuple,{160,5},[{var,{160,6},'NumExps'},{var,{160,15},'ExpTab0'}]},
     {call,
      {160,26},
      {remote,{160,35},{atom,{160,26},beam_dict},{atom,{160,36},export_table}},
      [{var,{160,49},'Dict'}]}},
    {debug_line,161,51},
    {match,
     {161,5},
     {var,{161,5},'Exp'},
     {call,
      {161,11},
      {atom,{161,11},flatten_exports},
      [{var,{161,27},'ExpTab0'}]}},
    {debug_line,162,52},
    {match,
     {162,5},
     {var,{162,5},'ExpChunk'},
     {call,
      {162,16},
      {atom,{162,16},chunk},
      [{block,0,
        [{bin,
          {162,22},
          [{bin_element,{162,24},{string,{162,24},"ExpT"},default,default}]}]},
       {block,0,
        [{bin,
          {162,34},
          [{bin_element,
            {162,36},
            {var,{162,36},'NumExps'},
            {integer,{162,44},32},
            default}]}]},
       {var,{162,50},'Exp'}]}},
    {debug_line,166,53},
    {match,
     {166,5},
     {tuple,{166,5},[{var,{166,6},'NumLocals'},{var,{166,17},'Locals'}]},
     {call,
      {166,27},
      {remote,{166,36},{atom,{166,27},beam_dict},{atom,{166,37},local_table}},
      [{var,{166,49},'Dict'}]}},
    {debug_line,167,54},
    {match,
     {167,5},
     {var,{167,5},'Loc'},
     {call,
      {167,11},
      {atom,{167,11},flatten_exports},
      [{var,{167,27},'Locals'}]}},
    {debug_line,168,55},
    {match,
     {168,5},
     {var,{168,5},'LocChunk'},
     {call,
      {168,16},
      {atom,{168,16},chunk},
      [{block,0,
        [{bin,
          {168,22},
          [{bin_element,{168,24},{string,{168,24},"LocT"},default,default}]}]},
       {block,0,
        [{bin,
          {168,34},
          [{bin_element,
            {168,36},
            {var,{168,36},'NumLocals'},
            {integer,{168,46},32},
            default}]}]},
       {var,{168,52},'Loc'}]}},
    {debug_line,172,56},
    {match,
     {172,5},
     {tuple,{172,5},[{var,{172,6},'_'},{var,{172,8},'StringTab'}]},
     {call,
      {172,21},
      {remote,{172,30},{atom,{172,21},beam_dict},{atom,{172,31},string_table}},
      [{var,{172,44},'Dict'}]}},
    {debug_line,173,57},
    {match,
     {173,5},
     {var,{173,5},'StringChunk'},
     {call,
      {173,19},
      {atom,{173,19},chunk},
      [{block,0,
        [{bin,
          {173,25},
          [{bin_element,{173,27},{string,{173,27},"StrT"},default,default}]}]},
       {var,{173,37},'StringTab'}]}},
    {debug_line,178,58},
    {match,
     {178,5},
     {var,{178,5},'LambdaChunk'},
     {'case',
      {178,19},
      {call,
       {178,24},
       {remote,
        {178,33},
        {atom,{178,24},beam_dict},
        {atom,{178,34},lambda_table}},
       [{var,{178,47},'Dict'}]},
      [{clause,
        {179,9},
        [{tuple,{179,9},[{integer,{179,10},0},{nil,{179,12}}]}],
        [],
        [{debug_line,179,59},{nil,{179,19}}]},
       {clause,
        {180,9},
        [{tuple,
          {180,9},
          [{var,{180,10},'NumLambdas'},{var,{180,21},'LambdaTab'}]}],
        [],
        [{debug_line,181,60},
         {call,
          {181,6},
          {atom,{181,6},chunk},
          [{block,0,
            [{bin,
              {181,12},
              [{bin_element,
                {181,14},
                {string,{181,14},"FunT"},
                default,default}]}]},
           {block,0,
            [{bin,
              {181,24},
              [{bin_element,
                {181,26},
                {var,{181,26},'NumLambdas'},
                {integer,{181,37},32},
                default}]}]},
           {var,{181,43},'LambdaTab'}]}]}]}},
    {debug_line,187,61},
    {match,
     {187,5},
     {var,{187,5},'LiteralChunk'},
     {call,
      {187,20},
      {atom,{187,20},build_literal_chunk},
      [{var,{187,40},'CompilerOpts'},{var,{187,54},'Dict'}]}},
    {debug_line,190,62},
    {match,
     {190,5},
     {var,{190,5},'LineChunk'},
     {call,
      {190,17},
      {atom,{190,17},chunk},
      [{block,0,
        [{bin,
          {190,23},
          [{bin_element,{190,25},{string,{190,25},"Line"},default,default}]}]},
       {block,0,
        [{call,
          {190,35},
          {atom,{190,35},build_line_table},
          [{var,{190,52},'Dict'},{var,{190,58},'CompilerOpts'}]}]}]}},
    {debug_line,193,63},
    {match,
     {193,5},
     {tuple,{193,5},[{var,{193,6},'NumTypes'},{var,{193,16},'TypeTab'}]},
     {call,
      {193,27},
      {remote,{193,36},{atom,{193,27},beam_dict},{atom,{193,37},type_table}},
      [{var,{193,48},'Dict'}]}},
    {debug_line,194,64},
    {match,
     {194,5},
     {var,{194,5},'TypeChunk'},
     {call,
      {194,17},
      {atom,{194,17},chunk},
      [{block,0,
        [{bin,
          {194,23},
          [{bin_element,{194,25},{string,{194,25},"Type"},default,default}]}]},
       {block,0,
        [{debug_line,195,65},
         {bin,
          {195,23},
          [{bin_element,
            {195,26},
            {integer,{195,26},3},
            {integer,{195,45},32},
            default},
           {bin_element,
            {195,49},
            {var,{195,49},'NumTypes'},
            {integer,{195,58},32},
            default}]}]},
       {var,{196,23},'TypeTab'}]}},
    {debug_line,199,66},
    {match,
     {199,5},
     {var,{199,5},'Meta'},
     {call,
      {199,12},
      {remote,{199,21},{atom,{199,12},proplists},{atom,{199,22},get_value}},
      [{block,0,
        [{bin,
          {199,32},
          [{bin_element,{199,34},{string,{199,34},"Meta"},default,default}]}]},
       {var,{199,44},'ExtraChunks1'},
       {atom,{199,58},empty}]}},
    {debug_line,200,67},
    {match,
     {200,5},
     {var,{200,5},'MetaChunk'},
     {'case',
      {200,17},
      {var,{200,22},'Meta'},
      [{clause,
        {201,21},
        [{atom,{201,21},empty}],
        [],
        [{debug_line,201,68},{nil,{201,30}}]},
       {clause,
        {202,21},
        [{var,{202,21},'Meta'}],
        [],
        [{debug_line,202,69},
         {call,
          {202,29},
          {atom,{202,29},chunk},
          [{block,0,
            [{bin,
              {202,35},
              [{bin_element,
                {202,37},
                {string,{202,37},"Meta"},
                default,default}]}]},
           {var,{202,47},'Meta'}]}]}]}},
    {debug_line,206,70},
    {match,
     {206,5},
     {var,{206,5},'ExtraChunks'},
     {op,
      {206,32},
      '--',
      {var,{206,19},'ExtraChunks1'},
      {cons,
       {206,35},
       {tuple,
        {206,36},
        [{bin,
          {206,37},
          [{bin_element,{206,39},{string,{206,39},"Meta"},default,default}]},
         {var,{206,49},'Meta'}]},
       {nil,{206,54}}}}},
    {debug_line,210,71},
    {match,
     {210,5},
     {var,{210,5},'Essentials0'},
     {cons,
      {210,19},
      {var,{210,20},'AtomChunk'},
      {cons,
       {210,30},
       {var,{210,30},'CodeChunk'},
       {cons,
        {210,40},
        {var,{210,40},'StringChunk'},
        {cons,
         {210,52},
         {var,{210,52},'ImportChunk'},
         {cons,
          {211,6},
          {var,{211,6},'ExpChunk'},
          {cons,
           {211,15},
           {var,{211,15},'LambdaChunk'},
           {cons,
            {211,27},
            {var,{211,27},'LiteralChunk'},
            {cons,{211,40},{var,{211,40},'MetaChunk'},{nil,{211,49}}}}}}}}}}},
    {debug_line,212,72},
    {match,
     {212,5},
     {var,{212,5},'Essentials1'},
     {lc,
      {212,19},
      {block,0,
       [{call,
         {212,20},
         {remote,
          {212,20},
          {atom,{212,20},erlang},
          {atom,{212,20},iolist_to_binary}},
         [{var,{212,37},'C'}]}]},
      [{block,0,[{atom,{212,48},true}]},
       {generate,{212,45},{var,{212,43},'C'},{var,{212,48},'Essentials0'}}]}},
    {debug_line,213,73},
    {match,
     {213,5},
     {var,{213,5},'MD5'},
     {call,
      {213,11},
      {atom,{213,11},module_md5},
      [{var,{213,22},'Essentials1'}]}},
    {debug_line,214,74},
    {match,
     {214,5},
     {var,{214,5},'Essentials'},
     {call,
      {214,18},
      {atom,{214,18},finalize_fun_table},
      [{var,{214,37},'Essentials1'},{var,{214,50},'MD5'}]}},
    {debug_line,215,75},
    {match,
     {215,5},
     {tuple,{215,5},[{var,{215,6},'Attributes'},{var,{215,17},'Compile'}]},
     {call,
      {215,28},
      {atom,{215,28},build_attributes},
      [{var,{215,45},'Attr'},
       {var,{215,51},'CompileInfo'},
       {var,{215,64},'MD5'}]}},
    {debug_line,216,76},
    {match,
     {216,5},
     {var,{216,5},'AttrChunk'},
     {call,
      {216,17},
      {atom,{216,17},chunk},
      [{block,0,
        [{bin,
          {216,23},
          [{bin_element,{216,25},{string,{216,25},"Attr"},default,default}]}]},
       {var,{216,35},'Attributes'}]}},
    {debug_line,217,77},
    {match,
     {217,5},
     {var,{217,5},'CompileChunk'},
     {call,
      {217,20},
      {atom,{217,20},chunk},
      [{block,0,
        [{bin,
          {217,26},
          [{bin_element,{217,28},{string,{217,28},"CInf"},default,default}]}]},
       {var,{217,38},'Compile'}]}},
    {debug_line,221,78},
    {match,
     {221,5},
     {var,{221,5},'CheckedChunks'},
     {lc,
      {221,21},
      {block,0,
       [{call,
         {221,22},
         {atom,{221,22},chunk},
         [{var,{221,28},'Key'},{var,{221,33},'Value'}]}]},
      [{block,0,[{atom,{221,60},true}]},
       {generate_strict,
        {221,56},
        {tuple,{221,43},[{var,{221,44},'Key'},{var,{221,49},'Value'}]},
        {var,{221,60},'ExtraChunks'}}]}},
    {debug_line,225,79},
    {match,
     {225,5},
     {var,{225,5},'Chunks'},
     {'case',
      {225,14},
      {call,
       {225,19},
       {remote,{225,19},{atom,{225,19},lists},{atom,{225,19},member}},
       [{atom,{225,26},slim},{var,{225,32},'CompilerOpts'}]},
      [{clause,
        {226,18},
        [{atom,{226,18},true}],
        [[{op,{226,37},'>',{var,{226,28},'NumTypes'},{integer,{226,39},0}}]],
        [{debug_line,227,80},
         {cons,
          {227,22},
          {var,{227,23},'Essentials'},
          {cons,
           {227,34},
           {var,{227,34},'AttrChunk'},
           {cons,{227,44},{var,{227,44},'TypeChunk'},{nil,{227,53}}}}}]},
       {clause,
        {228,18},
        [{atom,{228,18},true}],
        [[{op,{228,37},'=:=',{var,{228,28},'NumTypes'},{integer,{228,41},0}}]],
        [{debug_line,229,81},
         {cons,
          {229,22},
          {var,{229,23},'Essentials'},
          {cons,{229,34},{var,{229,34},'AttrChunk'},{nil,{229,43}}}}]},
       {clause,
        {230,18},
        [{atom,{230,18},false}],
        [],
        [{debug_line,231,82},
         {cons,
          {231,22},
          {var,{231,23},'Essentials'},
          {cons,
           {231,34},
           {var,{231,34},'LocChunk'},
           {cons,
            {231,43},
            {var,{231,43},'AttrChunk'},
            {cons,
             {232,23},
             {var,{232,23},'CompileChunk'},
             {cons,
              {232,36},
              {var,{232,36},'CheckedChunks'},
              {cons,
               {232,50},
               {var,{232,50},'LineChunk'},
               {cons,
                {232,60},
                {var,{232,60},'TypeChunk'},
                {nil,{232,69}}}}}}}}}]}]}},
    {debug_line,234,83},
    {call,
     {234,5},
     {atom,{234,5},build_form},
     [{block,0,
       [{bin,
         {234,16},
         [{bin_element,{234,18},{string,{234,18},"BEAM"},default,default}]}]},
      {var,{234,28},'Chunks'}]}]}]}.
{function,{241,1},
          finalize_fun_table,2,
          [{clause,{241,1},
                   [{var,{241,1},'_'},{var,{241,1},'_'}],
                   [[{call,{241,1},
                           {remote,{241,1},
                                   {atom,{241,1},fake},
                                   {atom,{241,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,241,84},{atom,{241,1},ignore}]},
           {clause,{241,1},
                   [{var,{241,20},'Essentials'},{var,{241,32},'MD5'}],
                   [],
                   [{debug_line,242,85},
                    {lc,{242,5},
                        {block,0,
                               [{call,{242,6},
                                      {atom,{242,6},finalize_fun_table_1},
                                      [{var,{242,27},'E'},
                                       {var,{242,30},'MD5'}]}]},
                        [{block,0,[{atom,{242,43},true}]},
                         {generate,{242,40},
                                   {var,{242,38},'E'},
                                   {var,{242,43},'Essentials'}}]}]}]}.
{function,
    {244,1},
    finalize_fun_table_1,2,
    [{clause,
         {244,1},
         [{var,{244,1},'_'},{var,{244,1},'_'}],
         [[{call,
               {244,1},
               {remote,
                   {244,1},
                   {atom,{244,1},fake},
                   {atom,{244,1},is_beam_bif_info}},
               []}]],
         [{debug_line,244,86},{atom,{244,1},ignore}]},
     {clause,
         {244,1},
         [{bin,
              {244,22},
              [{bin_element,{244,24},{string,{244,24},"FunT"},default,default},
               {bin_element,
                   {244,31},
                   {var,{244,31},'Keep'},
                   {integer,{244,36},8},
                   [binary]},
               {bin_element,
                   {244,45},
                   {var,{244,45},'Table0'},
                   default,
                   [binary]}]},
          {var,{244,62},'MD5'}],
         [],
         [{debug_line,245,87},
          {match,
              {245,5},
              {bin,
                  {245,5},
                  [{bin_element,
                       {245,7},
                       {var,{245,7},'Uniq'},
                       {integer,{245,12},27},
                       default},
                   {bin_element,
                       {245,15},
                       {var,{245,15},'_'},
                       {integer,{245,17},101},
                       [bits]}]},
              {var,{245,30},'MD5'}},
          {debug_line,246,88},
          {match,
              {246,5},
              {var,{246,5},'Table'},
              {call,
                  {246,13},
                  {atom,{246,13},finalize_fun_table_2},
                  [{var,{246,34},'Table0'},
                   {var,{246,42},'Uniq'},
                   {block,0,[{bin,{246,48},[]}]}]}},
          {debug_line,247,89},
          {bin,
              {247,5},
              [{bin_element,{247,7},{string,{247,7},"FunT"},default,default},
               {bin_element,{247,14},{var,{247,14},'Keep'},default,[binary]},
               {bin_element,
                   {247,26},
                   {var,{247,26},'Table'},
                   default,
                   [binary]}]}]},
     {clause,
         {248,1},
         [{var,{248,22},'Chunk'},{var,{248,29},'_'}],
         [],
         [{debug_line,248,90},{var,{248,35},'Chunk'}]}]}.
{function,
    {250,1},
    finalize_fun_table_2,3,
    [{clause,
         {250,1},
         [{var,{250,1},'_'},{var,{250,1},'_'},{var,{250,1},'_'}],
         [[{call,
               {250,1},
               {remote,
                   {250,1},
                   {atom,{250,1},fake},
                   {atom,{250,1},is_beam_bif_info}},
               []}]],
         [{debug_line,250,91},{atom,{250,1},ignore}]},
     {clause,
         {250,1},
         [{bin,
              {250,22},
              [{bin_element,
                   {250,24},
                   {var,{250,24},'Keep'},
                   {integer,{250,29},20},
                   [binary]},
               {bin_element,
                   {250,39},
                   {integer,{250,39},0},
                   {integer,{250,41},32},
                   default},
               {bin_element,{250,44},{var,{250,44},'T'},default,[binary]}]},
          {var,{250,56},'Uniq'},
          {var,{250,62},'Acc'}],
         [],
         [{debug_line,251,92},
          {call,
              {251,5},
              {atom,{251,5},finalize_fun_table_2},
              [{var,{251,26},'T'},
               {var,{251,29},'Uniq'},
               {block,0,
                   [{bin,
                        {251,35},
                        [{bin_element,
                             {251,37},
                             {var,{251,37},'Acc'},
                             default,
                             [binary]},
                         {bin_element,
                             {251,48},
                             {var,{251,48},'Keep'},
                             default,
                             [binary]},
                         {bin_element,
                             {251,60},
                             {var,{251,60},'Uniq'},
                             {integer,{251,65},32},
                             default}]}]}]}]},
     {clause,
         {252,1},
         [{bin,{252,22},[]},{var,{252,28},'_'},{var,{252,31},'Acc'}],
         [],
         [{debug_line,252,93},{var,{252,39},'Acc'}]}]}.
{function,
    {256,1},
    build_form,2,
    [{clause,
         {256,1},
         [{var,{256,1},'_'},{var,{256,1},'_'}],
         [[{call,
               {256,1},
               {remote,
                   {256,1},
                   {atom,{256,1},fake},
                   {atom,{256,1},is_beam_bif_info}},
               []}]],
         [{debug_line,256,94},{atom,{256,1},ignore}]},
     {clause,
         {256,1},
         [{var,{256,12},'Id'},{var,{256,16},'Chunks0'}],
         [[{op,{256,44},
               '=:=',
               {call,
                   {256,30},
                   {remote,
                       {256,30},
                       {atom,{256,30},erlang},
                       {atom,{256,30},byte_size}},
                   [{var,{256,40},'Id'}]},
               {integer,{256,48},4}},
           {call,
               {256,51},
               {remote,
                   {256,51},
                   {atom,{256,51},erlang},
                   {atom,{256,51},is_list}},
               [{var,{256,59},'Chunks0'}]}]],
         [{debug_line,257,95},
          {match,
              {257,5},
              {var,{257,5},'Chunks'},
              {call,
                  {257,14},
                  {remote,
                      {257,14},
                      {atom,{257,14},erlang},
                      {atom,{257,14},list_to_binary}},
                  [{var,{257,29},'Chunks0'}]}},
          {debug_line,258,96},
          {match,
              {258,5},
              {var,{258,5},'Size'},
              {call,
                  {258,12},
                  {remote,
                      {258,12},
                      {atom,{258,12},erlang},
                      {atom,{258,12},byte_size}},
                  [{var,{258,22},'Chunks'}]}},
          {debug_line,259,97},
          {match,
              {259,5},
              {integer,{259,5},0},
              {op,{259,14},'rem',{var,{259,9},'Size'},{integer,{259,18},4}}},
          {debug_line,260,98},
          {bin,
              {260,5},
              [{bin_element,{260,7},{string,{260,7},"FOR1"},default,default},
               {bin_element,
                   {260,15},
                   {op,{260,19},
                       '+',
                       {var,{260,15},'Size'},
                       {integer,{260,20},4}},
                   {integer,{260,23},32},
                   default},
               {bin_element,{260,26},{var,{260,26},'Id'},default,[binary]},
               {bin_element,
                   {260,36},
                   {var,{260,36},'Chunks'},
                   default,
                   [binary]}]}]}]}.
{function,
    {264,1},
    chunk,2,
    [{clause,
         {264,1},
         [{var,{264,1},'_'},{var,{264,1},'_'}],
         [[{call,
               {264,1},
               {remote,
                   {264,1},
                   {atom,{264,1},fake},
                   {atom,{264,1},is_beam_bif_info}},
               []}]],
         [{debug_line,264,99},{atom,{264,1},ignore}]},
     {clause,
         {264,1},
         [{var,{264,7},'Id'},{var,{264,11},'Contents'}],
         [[{op,{264,40},
               '=:=',
               {call,
                   {264,26},
                   {remote,
                       {264,26},
                       {atom,{264,26},erlang},
                       {atom,{264,26},byte_size}},
                   [{var,{264,36},'Id'}]},
               {integer,{264,44},4}},
           {call,
               {264,47},
               {remote,
                   {264,47},
                   {atom,{264,47},erlang},
                   {atom,{264,47},is_binary}},
               [{var,{264,57},'Contents'}]}]],
         [{debug_line,265,100},
          {match,
              {265,5},
              {var,{265,5},'Size'},
              {call,
                  {265,12},
                  {remote,
                      {265,12},
                      {atom,{265,12},erlang},
                      {atom,{265,12},byte_size}},
                  [{var,{265,22},'Contents'}]}},
          {debug_line,266,101},
          {cons,
              {266,5},
              {bin,
                  {266,6},
                  [{bin_element,{266,8},{var,{266,8},'Id'},default,[binary]},
                   {bin_element,
                       {266,18},
                       {var,{266,18},'Size'},
                       {integer,{266,23},32},
                       default}]},
              {cons,
                  {266,28},
                  {var,{266,28},'Contents'},
                  {call,
                      {266,37},
                      {atom,{266,37},pad},
                      [{var,{266,41},'Size'}]}}}]}]}.
{function,
    {270,1},
    chunk,3,
    [{clause,
         {270,1},
         [{var,{270,1},'_'},{var,{270,1},'_'},{var,{270,1},'_'}],
         [[{call,
               {270,1},
               {remote,
                   {270,1},
                   {atom,{270,1},fake},
                   {atom,{270,1},is_beam_bif_info}},
               []}]],
         [{debug_line,270,102},{atom,{270,1},ignore}]},
     {clause,
         {270,1},
         [{var,{270,7},'Id'},{var,{270,11},'Head'},{var,{270,17},'Contents'}],
         [[{op,{270,46},
               '=:=',
               {call,
                   {270,32},
                   {remote,
                       {270,32},
                       {atom,{270,32},erlang},
                       {atom,{270,32},byte_size}},
                   [{var,{270,42},'Id'}]},
               {integer,{270,50},4}},
           {call,
               {270,53},
               {remote,
                   {270,53},
                   {atom,{270,53},erlang},
                   {atom,{270,53},is_binary}},
               [{var,{270,63},'Head'}]},
           {call,
               {270,70},
               {remote,
                   {270,70},
                   {atom,{270,70},erlang},
                   {atom,{270,70},is_binary}},
               [{var,{270,80},'Contents'}]}]],
         [{debug_line,271,103},
          {match,
              {271,5},
              {var,{271,5},'Size'},
              {op,{271,27},
                  '+',
                  {call,
                      {271,12},
                      {remote,
                          {271,12},
                          {atom,{271,12},erlang},
                          {atom,{271,12},byte_size}},
                      [{var,{271,22},'Head'}]},
                  {call,
                      {271,28},
                      {remote,
                          {271,28},
                          {atom,{271,28},erlang},
                          {atom,{271,28},byte_size}},
                      [{var,{271,38},'Contents'}]}}},
          {debug_line,272,104},
          {cons,
              {272,5},
              {bin,
                  {272,6},
                  [{bin_element,{272,8},{var,{272,8},'Id'},default,[binary]},
                   {bin_element,
                       {272,18},
                       {var,{272,18},'Size'},
                       {integer,{272,23},32},
                       default},
                   {bin_element,
                       {272,26},
                       {var,{272,26},'Head'},
                       default,
                       [binary]}]},
              {cons,
                  {272,40},
                  {var,{272,40},'Contents'},
                  {call,
                      {272,49},
                      {atom,{272,49},pad},
                      [{var,{272,53},'Size'}]}}}]},
     {clause,
         {273,1},
         [{var,{273,7},'Id'},{var,{273,11},'Head'},{var,{273,17},'Contents'}],
         [[{call,
               {273,32},
               {remote,
                   {273,32},
                   {atom,{273,32},erlang},
                   {atom,{273,32},is_list}},
               [{var,{273,40},'Contents'}]}]],
         [{debug_line,274,105},
          {call,
              {274,5},
              {atom,{274,5},chunk},
              [{var,{274,11},'Id'},
               {var,{274,15},'Head'},
               {block,0,
                   [{call,
                        {274,21},
                        {remote,
                            {274,21},
                            {atom,{274,21},erlang},
                            {atom,{274,21},list_to_binary}},
                        [{var,{274,36},'Contents'}]}]}]}]}]}.
{function,
    {276,1},
    pad,1,
    [{clause,
         {276,1},
         [{var,{276,1},'_'}],
         [[{call,
               {276,1},
               {remote,
                   {276,1},
                   {atom,{276,1},fake},
                   {atom,{276,1},is_beam_bif_info}},
               []}]],
         [{debug_line,276,106},{atom,{276,1},ignore}]},
     {clause,
         {276,1},
         [{var,{276,5},'Size'}],
         [],
         [{debug_line,277,107},
          {'case',
              {277,5},
              {op,{277,15},'rem',{var,{277,10},'Size'},{integer,{277,19},4}},
              [{clause,
                   {278,2},
                   [{integer,{278,2},0}],
                   [],
                   [{debug_line,278,108},{nil,{278,7}}]},
               {clause,
                   {279,2},
                   [{var,{279,2},'Rem'}],
                   [],
                   [{debug_line,279,109},
                    {call,
                        {279,9},
                        {remote,
                            {279,9},
                            {atom,{279,9},lists},
                            {atom,{279,9},duplicate}},
                        [{block,0,
                             [{op,{279,21},
                                  '-',
                                  {integer,{279,19},4},
                                  {var,{279,23},'Rem'}}]},
                         {integer,{279,28},0}]}]}]}]}]}.
{function,
 {282,1},
 flatten_exports,1,
 [{clause,
   {282,1},
   [{var,{282,1},'_'}],
   [[{call,
      {282,1},
      {remote,{282,1},{atom,{282,1},fake},{atom,{282,1},is_beam_bif_info}},
      []}]],
   [{debug_line,282,110},{atom,{282,1},ignore}]},
  {clause,
   {282,1},
   [{var,{282,17},'Exps'}],
   [],
   [{debug_line,283,111},
    {call,
     {283,5},
     {remote,{283,5},{atom,{283,5},erlang},{atom,{283,5},list_to_binary}},
     [{block,0,
       [{call,
         {283,20},
         {remote,{283,20},{atom,{283,20},lists},{atom,{283,20},map}},
         [{block,0,
           [{'fun',
             {283,24},
             {clauses,
              [{clause,
                {283,27},
                [{tuple,
                  {283,28},
                  [{var,{283,29},'F'},{var,{283,31},'A'},{var,{283,33},'L'}]}],
                [],
                [{bin,
                  {283,40},
                  [{bin_element,
                    {283,42},
                    {var,{283,42},'F'},
                    {integer,{283,44},32},
                    default},
                   {bin_element,
                    {283,47},
                    {var,{283,47},'A'},
                    {integer,{283,49},32},
                    default},
                   {bin_element,
                    {283,52},
                    {var,{283,52},'L'},
                    {integer,{283,54},32},
                    default}]}]}]}}]},
          {var,{283,64},'Exps'}]}]}]}]}]}.
{function,
 {285,1},
 flatten_imports,1,
 [{clause,
   {285,1},
   [{var,{285,1},'_'}],
   [[{call,
      {285,1},
      {remote,{285,1},{atom,{285,1},fake},{atom,{285,1},is_beam_bif_info}},
      []}]],
   [{debug_line,285,112},{atom,{285,1},ignore}]},
  {clause,
   {285,1},
   [{var,{285,17},'Imps'}],
   [],
   [{debug_line,286,113},
    {call,
     {286,5},
     {remote,{286,5},{atom,{286,5},erlang},{atom,{286,5},list_to_binary}},
     [{block,0,
       [{call,
         {286,20},
         {remote,{286,20},{atom,{286,20},lists},{atom,{286,20},map}},
         [{block,0,
           [{'fun',
             {286,24},
             {clauses,
              [{clause,
                {286,27},
                [{tuple,
                  {286,28},
                  [{var,{286,29},'M'},{var,{286,31},'F'},{var,{286,33},'A'}]}],
                [],
                [{bin,
                  {286,40},
                  [{bin_element,
                    {286,42},
                    {var,{286,42},'M'},
                    {integer,{286,44},32},
                    default},
                   {bin_element,
                    {286,47},
                    {var,{286,47},'F'},
                    {integer,{286,49},32},
                    default},
                   {bin_element,
                    {286,52},
                    {var,{286,52},'A'},
                    {integer,{286,54},32},
                    default}]}]}]}}]},
          {var,{286,64},'Imps'}]}]}]}]}]}.
{function,
    {288,1},
    build_attributes,3,
    [{clause,
         {288,1},
         [{var,{288,1},'_'},{var,{288,1},'_'},{var,{288,1},'_'}],
         [[{call,
               {288,1},
               {remote,
                   {288,1},
                   {atom,{288,1},fake},
                   {atom,{288,1},is_beam_bif_info}},
               []}]],
         [{debug_line,288,114},{atom,{288,1},ignore}]},
     {clause,
         {288,1},
         [{var,{288,18},'Attr'},{var,{288,24},'Compile'},{var,{288,33},'MD5'}],
         [],
         [{debug_line,289,115},
          {match,
              {289,5},
              {var,{289,5},'AttrBinary'},
              {call,
                  {289,18},
                  {remote,
                      {289,18},
                      {atom,{289,18},erlang},
                      {atom,{289,18},term_to_binary}},
                  [{block,0,
                       [{call,
                            {289,33},
                            {atom,{289,33},set_vsn_attribute},
                            [{var,{289,51},'Attr'},{var,{289,57},'MD5'}]}]}]}},
          {debug_line,290,116},
          {match,
              {290,5},
              {var,{290,5},'CompileBinary'},
              {call,
                  {290,21},
                  {remote,
                      {290,21},
                      {atom,{290,21},erlang},
                      {atom,{290,21},term_to_binary}},
                  [{block,0,
                       [{cons,
                            {290,36},
                            {tuple,
                                {290,37},
                                [{atom,{290,38},version},
                                 {string,{290,47},"8.5.4"}]},
                            {var,{290,61},'Compile'}}]}]}},
          {debug_line,291,117},
          {tuple,
              {291,5},
              [{var,{291,6},'AttrBinary'},{var,{291,17},'CompileBinary'}]}]}]}.
{function,
 {293,1},
 build_atom_table,2,
 [{clause,
   {293,1},
   [{var,{293,1},'_'},{var,{293,1},'_'}],
   [[{call,
      {293,1},
      {remote,{293,1},{atom,{293,1},fake},{atom,{293,1},is_beam_bif_info}},
      []}]],
   [{debug_line,293,118},{atom,{293,1},ignore}]},
  {clause,
   {293,1},
   [{var,{293,18},'Options'},{var,{293,27},'Dict'}],
   [],
   [{debug_line,294,119},
    {match,
     {294,5},
     {tuple,{294,5},[{var,{294,6},'NumAtoms'},{var,{294,16},'AtomTab0'}]},
     {call,
      {294,28},
      {remote,{294,37},{atom,{294,28},beam_dict},{atom,{294,38},atom_table}},
      [{var,{294,49},'Dict'}]}},
    {debug_line,295,120},
    {'case',
     {295,5},
     {call,
      {295,10},
      {remote,{295,10},{atom,{295,10},lists},{atom,{295,10},member}},
      [{atom,{295,17},no_long_atoms},{var,{295,32},'Options'}]},
     [{clause,
       {296,9},
       [{atom,{296,9},false}],
       [],
       [{debug_line,298,121},
        {match,
         {298,13},
         {var,{298,13},'AtomTab'},
         {lc,
          {298,23},
          {block,0,
           [{cons,
             {298,24},
             {call,
              {298,25},
              {atom,{298,25},encode},
              [{integer,{298,33},0},{var,{298,40},'Len'}]},
             {cons,{298,45},{var,{298,45},'Text'},{nil,{298,49}}}}]},
          [{block,0,[{atom,{298,69},true}]},
           {generate_strict,
            {298,65},
            {cons,
             {298,54},
             {var,{298,55},'Len'},
             {cons,{298,59},{var,{298,59},'Text'},{nil,{298,63}}}},
            {var,{298,69},'AtomTab0'}}]}},
        {debug_line,299,122},
        {call,
         {299,13},
         {atom,{299,13},chunk},
         [{block,0,
           [{bin,
             {299,19},
             [{bin_element,
               {299,21},
               {string,{299,21},"AtU8"},
               default,default}]}]},
          {block,0,
           [{bin,
             {299,31},
             [{bin_element,
               {299,33},
               {op,{299,33},'-',{var,{299,34},'NumAtoms'}},
               {integer,{299,43},32},
               default}]}]},
          {var,{299,49},'AtomTab'}]}]},
      {clause,
       {300,9},
       [{atom,{300,9},true}],
       [],
       [{debug_line,303,123},
        {call,
         {303,13},
         {atom,{303,13},chunk},
         [{block,0,
           [{bin,
             {303,19},
             [{bin_element,
               {303,21},
               {string,{303,21},"AtU8"},
               default,default}]}]},
          {block,0,
           [{bin,
             {303,31},
             [{bin_element,
               {303,33},
               {var,{303,33},'NumAtoms'},
               {integer,{303,42},32},
               default}]}]},
          {var,{303,48},'AtomTab0'}]}]}]}]}]}.
{function,
 {306,1},
 build_line_table,2,
 [{clause,
   {306,1},
   [{var,{306,1},'_'},{var,{306,1},'_'}],
   [[{call,
      {306,1},
      {remote,{306,1},{atom,{306,1},fake},{atom,{306,1},is_beam_bif_info}},
      []}]],
   [{debug_line,306,124},{atom,{306,1},ignore}]},
  {clause,
   {306,1},
   [{var,{306,18},'Dict'},{var,{306,24},'Options'}],
   [],
   [{debug_line,307,125},
    {match,
     {307,5},
     {tuple,
      {307,5},
      [{var,{307,6},'NumLineInstrs'},
       {var,{307,20},'NumFnames0'},
       {var,{307,31},'Fnames0'},
       {var,{307,39},'NumLines'},
       {var,{307,48},'Lines0'},
       {var,{307,55},'ExecLine'}]},
     {call,
      {308,2},
      {remote,{308,11},{atom,{308,2},beam_dict},{atom,{308,12},line_table}},
      [{var,{308,23},'Dict'}]}},
    {debug_line,309,126},
    {match,
     {309,5},
     {var,{309,5},'NumFnames'},
     {op,{309,28},'-',{var,{309,17},'NumFnames0'},{integer,{309,30},1}}},
    {debug_line,310,127},
    {match,
     {310,5},
     {cons,{310,5},{var,{310,6},'_'},{var,{310,8},'Fnames1'}},
     {var,{310,19},'Fnames0'}},
    {debug_line,311,128},
    {match,
     {311,5},
     {var,{311,5},'Fnames2'},
     {lc,
      {311,15},
      {block,0,
       [{call,
         {311,16},
         {remote,
          {311,23},
          {atom,{311,16},unicode},
          {atom,{311,24},characters_to_binary}},
         [{var,{311,45},'F'}]}]},
      [{block,0,[{atom,{311,56},true}]},
       {generate,{311,53},{var,{311,51},'F'},{var,{311,56},'Fnames1'}}]}},
    {debug_line,312,129},
    {match,
     {312,5},
     {var,{312,5},'Fnames'},
     {bc,
      {312,14},
      {block,0,
       [{bin,
         {312,17},
         [{bin_element,
           {312,20},
           {call,
            {312,20},
            {remote,{312,20},{atom,{312,20},erlang},{atom,{312,20},byte_size}},
            [{var,{312,30},'F'}]},
           {integer,{312,34},16},
           default},
          {bin_element,{312,37},{var,{312,37},'F'},default,[binary]}]}]},
      [{block,0,[{atom,{312,56},true}]},
       {generate,{312,53},{var,{312,51},'F'},{var,{312,56},'Fnames2'}}]}},
    {debug_line,313,130},
    {match,
     {313,5},
     {var,{313,5},'Lines1'},
     {call,
      {313,14},
      {atom,{313,14},encode_line_items},
      [{var,{313,32},'Lines0'},{integer,{313,40},0}]}},
    {debug_line,314,131},
    {match,
     {314,5},
     {var,{314,5},'Lines'},
     {call,
      {314,13},
      {remote,
       {314,13},
       {atom,{314,13},erlang},
       {atom,{314,13},iolist_to_binary}},
      [{var,{314,30},'Lines1'}]}},
    {debug_line,315,132},
    {match,{315,5},{var,{315,5},'Ver'},{integer,{315,11},0}},
    {debug_line,316,133},
    {match,
     {316,5},
     {var,{316,5},'Bits'},
     {call,
      {316,12},
      {atom,{316,12},line_bits},
      [{var,{316,22},'ExecLine'},{var,{316,32},'Options'}]}},
    {debug_line,317,134},
    {bin,
     {317,5},
     [{bin_element,{317,7},{var,{317,7},'Ver'},{integer,{317,11},32},default},
      {bin_element,
       {317,14},
       {var,{317,14},'Bits'},
       {integer,{317,19},32},
       default},
      {bin_element,
       {317,22},
       {var,{317,22},'NumLineInstrs'},
       {integer,{317,36},32},
       default},
      {bin_element,
       {317,39},
       {var,{317,39},'NumLines'},
       {integer,{317,48},32},
       default},
      {bin_element,
       {317,51},
       {var,{317,51},'NumFnames'},
       {integer,{317,61},32},
       default},
      {bin_element,{318,6},{var,{318,6},'Lines'},default,[binary]},
      {bin_element,{318,19},{var,{318,19},'Fnames'},default,[binary]}]}]}]}.
{function,
    {320,1},
    line_bits,2,
    [{clause,
         {320,1},
         [{var,{320,1},'_'},{var,{320,1},'_'}],
         [[{call,
               {320,1},
               {remote,
                   {320,1},
                   {atom,{320,1},fake},
                   {atom,{320,1},is_beam_bif_info}},
               []}]],
         [{debug_line,320,135},{atom,{320,1},ignore}]},
     {clause,
         {320,1},
         [{var,{320,11},'ExecLine'},{var,{320,21},'Options'}],
         [],
         [{debug_line,321,136},
          {'case',
              {321,9},
              {call,
                  {321,14},
                  {remote,
                      {321,14},
                      {atom,{321,14},lists},
                      {atom,{321,14},member}},
                  [{atom,{321,21},force_line_counters},
                   {var,{321,42},'Options'}]},
              [{clause,
                   {322,13},
                   [{atom,{322,13},true}],
                   [],
                   [{debug_line,323,137},
                    {op,{323,47},
                        'bor',
                        {integer,{323,18},2},
                        {integer,{323,52},1}}]},
               {clause,
                   {324,13},
                   [{atom,{324,13},false}],
                   [[{op,{324,33},
                         '=:=',
                         {var,{324,24},'ExecLine'},
                         {atom,{324,37},true}}]],
                   [{debug_line,325,138},{integer,{325,18},1}]},
               {clause,
                   {326,13},
                   [{atom,{326,13},false}],
                   [],
                   [{debug_line,327,139},{integer,{327,17},0}]}]}]}]}.
{function,{335,1},
          encode_line_items,2,
          [{clause,{335,1},
                   [{var,{335,1},'_'},{var,{335,1},'_'}],
                   [[{call,{335,1},
                           {remote,{335,1},
                                   {atom,{335,1},fake},
                                   {atom,{335,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,335,140},{atom,{335,1},ignore}]},
           {clause,{335,1},
                   [{cons,{335,19},
                          {tuple,{335,20},
                                 [{var,{335,21},'F'},{var,{335,23},'L'}]},
                          {var,{335,26},'T'}},
                    {var,{335,30},'F'}],
                   [],
                   [{debug_line,336,141},
                    {cons,{336,5},
                          {call,{336,6},
                                {atom,{336,6},encode},
                                [{integer,{336,14},1},{var,{336,21},'L'}]},
                          {call,{336,24},
                                {atom,{336,24},encode_line_items},
                                [{var,{336,42},'T'},{var,{336,45},'F'}]}}]},
           {clause,{337,1},
                   [{cons,{337,19},
                          {tuple,{337,20},
                                 [{var,{337,21},'F'},{var,{337,23},'L'}]},
                          {var,{337,26},'T'}},
                    {var,{337,30},'_'}],
                   [],
                   [{debug_line,338,142},
                    {cons,{338,5},
                          {call,{338,6},
                                {atom,{338,6},encode},
                                [{integer,{338,14},2},{var,{338,21},'F'}]},
                          {cons,{338,24},
                                {call,{338,24},
                                      {atom,{338,24},encode},
                                      [{integer,{338,32},1},
                                       {var,{338,39},'L'}]},
                                {call,{338,42},
                                      {atom,{338,42},encode_line_items},
                                      [{var,{338,60},'T'},
                                       {var,{338,63},'F'}]}}}]},
           {clause,{339,1},
                   [{nil,{339,19}},{var,{339,23},'_'}],
                   [],
                   [{debug_line,339,143},{nil,{339,29}}]}]}.
{function,
 {341,1},
 build_literal_chunk,2,
 [{clause,
   {341,1},
   [{var,{341,1},'_'},{var,{341,1},'_'}],
   [[{call,
      {341,1},
      {remote,{341,1},{atom,{341,1},fake},{atom,{341,1},is_beam_bif_info}},
      []}]],
   [{debug_line,341,144},{atom,{341,1},ignore}]},
  {clause,
   {341,1},
   [{var,{341,21},'Options'},{var,{341,30},'Dict'}],
   [],
   [{debug_line,342,145},
    {'case',
     {342,5},
     {call,
      {342,10},
      {remote,
       {342,19},
       {atom,{342,10},beam_dict},
       {atom,{342,20},literal_table}},
      [{var,{342,34},'Dict'}]},
     [{clause,
       {343,9},
       [{tuple,{343,9},[{integer,{343,10},0},{nil,{343,12}}]}],
       [],
       [{debug_line,345,146},{nil,{345,13}}]},
      {clause,
       {346,9},
       [{tuple,
         {346,9},
         [{var,{346,10},'NumLiterals'},{var,{346,22},'LitTab0'}]}],
       [],
       [{debug_line,347,147},
        {match,
         {347,13},
         {var,{347,13},'LitTab1'},
         {cons,
          {347,23},
          {bin,
           {347,24},
           [{bin_element,
             {347,26},
             {var,{347,26},'NumLiterals'},
             {integer,{347,38},32},
             default}]},
          {cons,{347,43},{var,{347,43},'LitTab0'},{nil,{347,50}}}}},
        {debug_line,348,148},
        {'case',
         {348,13},
         {call,
          {348,18},
          {remote,{348,18},{atom,{348,18},lists},{atom,{348,18},member}},
          [{atom,{348,25},compressed_literals},{var,{348,46},'Options'}]},
         [{clause,
           {349,17},
           [{atom,{349,17},true}],
           [],
           [{debug_line,353,149},
            {match,
             {353,21},
             {var,{353,21},'LitTab'},
             {call,
              {353,30},
              {remote,{353,34},{atom,{353,30},zlib},{atom,{353,35},compress}},
              [{var,{353,44},'LitTab1'}]}},
            {debug_line,354,150},
            {call,
             {354,21},
             {atom,{354,21},chunk},
             [{block,0,
               [{bin,
                 {354,27},
                 [{bin_element,
                   {354,29},
                   {string,{354,29},"LitT"},
                   default,default}]}]},
              {block,0,
               [{bin,
                 {354,39},
                 [{bin_element,
                   {354,42},
                   {call,
                    {354,42},
                    {remote,
                     {354,42},
                     {atom,{354,42},erlang},
                     {atom,{354,42},iolist_size}},
                    [{var,{354,54},'LitTab1'}]},
                   {integer,{354,64},32},
                   default}]}]},
              {var,{355,27},'LitTab'}]}]},
          {clause,
           {356,17},
           [{atom,{356,17},false}],
           [],
           [{debug_line,362,151},
            {call,
             {362,21},
             {atom,{362,21},chunk},
             [{block,0,
               [{bin,
                 {362,27},
                 [{bin_element,
                   {362,29},
                   {string,{362,29},"LitT"},
                   default,default}]}]},
              {block,0,
               [{bin,
                 {362,39},
                 [{bin_element,
                   {362,41},
                   {integer,{362,41},0},
                   {integer,{362,43},32},
                   default}]}]},
              {var,{362,49},'LitTab1'}]}]}]}]}]}]}]}.
{function,
    {371,1},
    set_vsn_attribute,2,
    [{clause,
         {371,1},
         [{var,{371,1},'_'},{var,{371,1},'_'}],
         [[{call,
               {371,1},
               {remote,
                   {371,1},
                   {atom,{371,1},fake},
                   {atom,{371,1},is_beam_bif_info}},
               []}]],
         [{debug_line,371,152},{atom,{371,1},ignore}]},
     {clause,
         {371,1},
         [{var,{371,19},'Attr'},{var,{371,25},'MD5'}],
         [],
         [{debug_line,372,153},
          {'case',
              {372,5},
              {call,
                  {372,10},
                  {remote,
                      {372,10},
                      {atom,{372,10},lists},
                      {atom,{372,10},keymember}},
                  [{atom,{372,20},vsn},
                   {integer,{372,25},1},
                   {var,{372,28},'Attr'}]},
              [{clause,
                   {373,2},
                   [{atom,{373,2},true}],
                   [],
                   [{debug_line,373,154},{var,{373,10},'Attr'}]},
               {clause,
                   {374,2},
                   [{atom,{374,2},false}],
                   [],
                   [{debug_line,375,155},
                    {match,
                        {375,6},
                        {bin,
                            {375,6},
                            [{bin_element,
                                 {375,8},
                                 {var,{375,8},'Number'},
                                 {integer,{375,15},128},
                                 default}]},
                        {var,{375,23},'MD5'}},
                    {debug_line,376,156},
                    {cons,
                        {376,6},
                        {tuple,
                            {376,7},
                            [{atom,{376,8},vsn},
                             {cons,
                                 {376,12},
                                 {var,{376,13},'Number'},
                                 {nil,{376,19}}}]},
                        {var,{376,22},'Attr'}}]}]}]}]}.
{function,{379,1},
          module_md5,1,
          [{clause,{379,1},
                   [{var,{379,1},'_'}],
                   [[{call,{379,1},
                           {remote,{379,1},
                                   {atom,{379,1},fake},
                                   {atom,{379,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,379,157},{atom,{379,1},ignore}]},
           {clause,{379,1},
                   [{var,{379,12},'Essentials0'}],
                   [],
                   [{debug_line,380,158},
                    {match,{380,5},
                           {var,{380,5},'Essentials'},
                           {call,{380,18},
                                 {atom,{380,18},filter_essentials},
                                 [{var,{380,36},'Essentials0'}]}},
                    {debug_line,381,159},
                    {call,{381,5},
                          {remote,{381,11},
                                  {atom,{381,5},erlang},
                                  {atom,{381,12},md5}},
                          [{var,{381,16},'Essentials'}]}]}]}.
{function,
    {389,1},
    filter_essentials,1,
    [{clause,
         {389,1},
         [{var,{389,1},'_'}],
         [[{call,
               {389,1},
               {remote,
                   {389,1},
                   {atom,{389,1},fake},
                   {atom,{389,1},is_beam_bif_info}},
               []}]],
         [{debug_line,389,160},{atom,{389,1},ignore}]},
     {clause,
         {389,1},
         [{cons,
              {389,19},
              {bin,
                  {389,20},
                  [{bin_element,
                       {389,22},
                       {var,{389,22},'_Tag'},
                       {integer,{389,27},4},
                       [binary]},
                   {bin_element,
                       {389,36},
                       {var,{389,36},'Sz'},
                       {integer,{389,39},32},
                       default},
                   {bin_element,
                       {389,42},
                       {var,{389,42},'Data'},
                       {var,{389,47},'Sz'},
                       [binary]},
                   {bin_element,
                       {389,57},
                       {var,{389,57},'_Padding'},
                       default,
                       [binary]}]},
              {var,{389,75},'T'}}],
         [],
         [{debug_line,390,161},
          {cons,
              {390,5},
              {var,{390,6},'Data'},
              {call,
                  {390,11},
                  {atom,{390,11},filter_essentials},
                  [{var,{390,29},'T'}]}}]},
     {clause,
         {391,1},
         [{cons,{391,19},{bin,{391,20},[]},{var,{391,25},'T'}}],
         [],
         [{debug_line,392,162},
          {call,
              {392,5},
              {atom,{392,5},filter_essentials},
              [{var,{392,23},'T'}]}]},
     {clause,
         {393,1},
         [{nil,{393,19}}],
         [],
         [{debug_line,393,163},{nil,{393,26}}]}]}.
{function,
    {399,1},
    build_beam_debug_info,3,
    [{clause,
         {399,1},
         [{var,{399,1},'_'},{var,{399,1},'_'},{var,{399,1},'_'}],
         [[{call,
               {399,1},
               {remote,
                   {399,1},
                   {atom,{399,1},fake},
                   {atom,{399,1},is_beam_bif_info}},
               []}]],
         [{debug_line,399,164},{atom,{399,1},ignore}]},
     {clause,
         {399,1},
         [{var,{399,23},'ExtraChunks'},
          {var,{399,36},'CompilerOpts'},
          {var,{399,50},'Dict'}],
         [],
         [{debug_line,400,165},
          {'case',
              {400,5},
              {call,
                  {400,10},
                  {remote,
                      {400,10},
                      {atom,{400,10},lists},
                      {atom,{400,10},member}},
                  [{atom,{400,17},beam_debug_info},
                   {var,{400,34},'CompilerOpts'}]},
              [{clause,
                   {401,9},
                   [{atom,{401,9},true}],
                   [],
                   [{debug_line,402,166},
                    {call,
                        {402,13},
                        {atom,{402,13},build_beam_debug_info_1},
                        [{var,{402,37},'ExtraChunks'},
                         {var,{402,50},'Dict'}]}]},
               {clause,
                   {403,9},
                   [{atom,{403,9},false}],
                   [],
                   [{debug_line,404,167},
                    {tuple,
                        {404,13},
                        [{var,{404,14},'ExtraChunks'},
                         {var,{404,26},'Dict'}]}]}]}]}]}.
{function,
 {407,1},
 build_beam_debug_info_1,2,
 [{clause,
   {407,1},
   [{var,{407,1},'_'},{var,{407,1},'_'}],
   [[{call,
      {407,1},
      {remote,{407,1},{atom,{407,1},fake},{atom,{407,1},is_beam_bif_info}},
      []}]],
   [{debug_line,407,168},{atom,{407,1},ignore}]},
  {clause,
   {407,1},
   [{var,{407,25},'ExtraChunks0'},{var,{407,39},'Dict0'}],
   [],
   [{debug_line,408,169},
    {match,
     {408,5},
     {var,{408,5},'DebugTab0'},
     {call,
      {408,17},
      {remote,{408,26},{atom,{408,17},beam_dict},{atom,{408,27},debug_table}},
      [{var,{408,39},'Dict0'}]}},
    {debug_line,409,170},
    {match,
     {409,5},
     {var,{409,5},'DebugTab1'},
     {lc,
      {409,17},
      {block,0,
       [{tuple,{409,18},[{var,{409,19},'Index'},{var,{409,25},'Info'}]}]},
      [{block,0,[{debug_line,410,171},{atom,{410,38},true}]},
       {m_generate,
        {410,35},
        {map_field_exact,
         {410,27},
         {var,{410,21},'Index'},
         {var,{410,30},'Info'}},
        {call,
         {410,38},
         {remote,{410,42},{atom,{410,38},maps},{atom,{410,43},iterator}},
         [{var,{410,52},'DebugTab0'},{atom,{410,63},ordered}]}}]}},
    {debug_line,411,172},
    {match,
     {411,5},
     {var,{411,5},'DebugTab'},
     {call,
      {411,16},
      {atom,{411,16},build_bdi_fill_holes},
      [{var,{411,37},'DebugTab1'}]}},
    {debug_line,412,173},
    {match,
     {412,5},
     {var,{412,5},'NumVars'},
     {call,
      {412,15},
      {remote,{412,20},{atom,{412,15},lists},{atom,{412,21},sum}},
      [{block,0,
        [{lc,
          {412,25},
          {block,0,
           [{call,
             {412,26},
             {remote,{412,26},{atom,{412,26},erlang},{atom,{412,26},length}},
             [{var,{412,33},'Vs'}]}]},
          [{block,0,[{atom,{412,50},true}]},
           {generate,
            {412,47},
            {tuple,{412,40},[{var,{412,41},'_'},{var,{412,43},'Vs'}]},
            {var,{412,50},'DebugTab'}}]}]}]}},
    {debug_line,413,174},
    {match,
     {413,5},
     {tuple,{413,5},[{var,{413,6},'Contents0'},{var,{413,16},'Dict'}]},
     {call,
      {413,24},
      {atom,{413,24},build_bdi},
      [{var,{413,34},'DebugTab'},{var,{413,44},'Dict0'}]}},
    {debug_line,414,175},
    {match,
     {414,5},
     {var,{414,5},'NumItems'},
     {call,
      {414,16},
      {remote,{414,16},{atom,{414,16},erlang},{atom,{414,16},length}},
      [{var,{414,23},'Contents0'}]}},
    {debug_line,415,176},
    {match,
     {415,5},
     {var,{415,5},'Contents1'},
     {call,
      {415,17},
      {remote,
       {415,17},
       {atom,{415,17},erlang},
       {atom,{415,17},iolist_to_binary}},
      [{var,{415,34},'Contents0'}]}},
    {debug_line,417,177},
    {match,
     {417,5},
     {integer,{417,5},0},
     {op,{417,18},'bsr',{var,{417,9},'NumItems'},{integer,{417,22},31}}},
    {debug_line,418,178},
    {match,
     {418,5},
     {integer,{418,5},0},
     {op,{418,17},'bsr',{var,{418,9},'NumVars'},{integer,{418,21},31}}},
    {debug_line,420,179},
    {match,
     {420,5},
     {var,{420,5},'Contents'},
     {bin,
      {420,16},
      [{bin_element,
        {420,19},
        {integer,{420,19},0},
        {integer,{420,43},32},
        default},
       {bin_element,
        {421,18},
        {var,{421,18},'NumItems'},
        {integer,{421,27},32},
        default},
       {bin_element,
        {422,18},
        {var,{422,18},'NumVars'},
        {integer,{422,26},32},
        default},
       {bin_element,{423,18},{var,{423,18},'Contents1'},default,[binary]}]}},
    {debug_line,424,180},
    {match,
     {424,5},
     {var,{424,5},'ExtraChunks'},
     {cons,
      {424,19},
      {tuple,
       {424,20},
       [{bin,
         {424,21},
         [{bin_element,{424,22},{string,{424,22},"DbgB"},default,[utf8]}]},
        {var,{424,29},'Contents'}]},
      {var,{424,39},'ExtraChunks0'}}},
    {debug_line,425,181},
    {tuple,{425,5},[{var,{425,6},'ExtraChunks'},{var,{425,18},'Dict'}]}]}]}.
{function,
    {427,1},
    build_bdi_fill_holes,1,
    [{clause,
         {427,1},
         [{var,{427,1},'_'}],
         [[{call,
               {427,1},
               {remote,
                   {427,1},
                   {atom,{427,1},fake},
                   {atom,{427,1},is_beam_bif_info}},
               []}]],
         [{debug_line,427,182},{atom,{427,1},ignore}]},
     {clause,{427,1},[{nil,{427,22}}],[],[{debug_line,428,183},{nil,{428,5}}]},
     {clause,
         {429,1},
         [{cons,
              {429,22},
              {tuple,{429,23},[{var,{429,24},'_'},{var,{429,26},'Item'}]},
              {nil,{429,31}}}],
         [],
         [{debug_line,430,184},
          {cons,{430,5},{var,{430,6},'Item'},{nil,{430,10}}}]},
     {clause,
         {431,1},
         [{cons,
              {431,22},
              {tuple,{431,23},[{var,{431,24},'I0'},{var,{431,27},'Item'}]},
              {match,
                  {431,33},
                  {cons,
                      {431,33},
                      {tuple,
                          {431,34},
                          [{var,{431,35},'I1'},{var,{431,38},'_'}]},
                      {var,{431,41},'_'}},
                  {var,{431,44},'T'}}}],
         [],
         [{debug_line,432,185},
          {'case',
              {432,5},
              {op,{432,13},'+',{var,{432,10},'I0'},{integer,{432,15},1}},
              [{clause,
                   {433,9},
                   [{var,{433,9},'I1'}],
                   [],
                   [{debug_line,434,186},
                    {cons,
                        {434,13},
                        {var,{434,14},'Item'},
                        {call,
                            {434,19},
                            {atom,{434,19},build_bdi_fill_holes},
                            [{var,{434,40},'T'}]}}]},
               {clause,
                   {435,9},
                   [{var,{435,9},'Next'}],
                   [],
                   [{debug_line,436,187},
                    {match,
                        {436,13},
                        {var,{436,13},'NewPair'},
                        {tuple,
                            {436,23},
                            [{var,{436,24},'Next'},
                             {tuple,
                                 {436,29},
                                 [{atom,{436,30},none},{nil,{436,35}}]}]}},
                    {debug_line,437,188},
                    {cons,
                        {437,13},
                        {var,{437,14},'Item'},
                        {call,
                            {437,19},
                            {atom,{437,19},build_bdi_fill_holes},
                            [{block,0,
                                 [{cons,
                                      {437,40},
                                      {var,{437,41},'NewPair'},
                                      {var,{437,49},'T'}}]}]}}]}]}]}]}.
{function,
 {440,1},
 build_bdi,2,
 [{clause,
   {440,1},
   [{var,{440,1},'_'},{var,{440,1},'_'}],
   [[{call,
      {440,1},
      {remote,{440,1},{atom,{440,1},fake},{atom,{440,1},is_beam_bif_info}},
      []}]],
   [{debug_line,440,189},{atom,{440,1},ignore}]},
  {clause,
   {440,1},
   [{cons,
     {440,11},
     {tuple,{440,12},[{var,{440,13},'FrameSize0'},{var,{440,24},'Vars0'}]},
     {var,{440,31},'Items'}},
    {var,{440,39},'Dict0'}],
   [],
   [{debug_line,473,190},
    {match,
     {473,5},
     {var,{473,5},'FrameSize'},
     {'case',
      {473,17},
      {var,{473,22},'FrameSize0'},
      [{clause,
        {474,21},
        [{atom,{474,21},none}],
        [],
        [{debug_line,474,191},{atom,{474,29},nil}]},
       {clause,
        {475,21},
        [{atom,{475,21},entry}],
        [],
        [{debug_line,475,192},
         {tuple,{475,30},[{atom,{475,31},atom},{atom,{475,36},entry}]}]},
       {clause,
        {476,21},
        [{var,{476,21},'_'}],
        [],
        [{debug_line,476,193},{var,{476,26},'FrameSize0'}]}]}},
    {debug_line,478,194},
    {match,
     {478,5},
     {var,{478,5},'Vars1'},
     {'case',
      {478,13},
      {var,{478,18},'FrameSize0'},
      [{clause,
        {479,17},
        [{atom,{479,17},entry}],
        [],
        [{debug_line,480,195},
         {lc,
          {480,21},
          {block,0,
           [{cons,
             {480,22},
             {var,{480,23},'Name'},
             {cons,{480,28},{var,{480,28},'Reg'},{nil,{480,31}}}}]},
          [{block,0,[{atom,{480,53},true}]},
           {generate_strict,
            {480,49},
            {tuple,
             {480,36},
             [{var,{480,37},'Name'},
              {cons,{480,42},{var,{480,43},'Reg'},{nil,{480,46}}}]},
            {var,{480,53},'Vars0'}}]}]},
       {clause,
        {481,17},
        [{var,{481,17},'_'}],
        [],
        [{debug_line,482,196},
         {lc,
          {482,21},
          {block,0,
           [{cons,
             {482,22},
             {tuple,
              {482,23},
              [{atom,{482,24},literal},
               {call,
                {482,32},
                {remote,
                 {482,32},
                 {atom,{482,32},erlang},
                 {atom,{482,32},atom_to_binary}},
                [{var,{482,47},'Name'}]}]},
             {cons,
              {482,54},
              {call,
               {482,54},
               {remote,{482,54},{atom,{482,54},lists},{atom,{482,54},last}},
               [{var,{482,59},'Regs'}]},
              {nil,{482,64}}}}]},
          [{block,0,[{debug_line,483,197},{atom,{483,47},true}]},
           {generate_strict,
            {483,43},
            {tuple,
             {483,25},
             [{var,{483,26},'Name'},
              {match,
               {483,31},
               {cons,{483,31},{var,{483,32},'_'},{var,{483,34},'_'}},
               {var,{483,37},'Regs'}}]},
            {var,{483,47},'Vars0'}}]}]}]}},
    {debug_line,485,198},
    {match,
     {485,5},
     {var,{485,5},'Vars'},
     {call,
      {485,12},
      {remote,{485,12},{atom,{485,12},lists},{atom,{485,12},append}},
      [{var,{485,19},'Vars1'}]}},
    {debug_line,486,199},
    {match,
     {486,5},
     {var,{486,5},'Instr0'},
     {tuple,
      {486,14},
      [{atom,{486,15},call},
       {var,{486,20},'FrameSize'},
       {tuple,{486,30},[{atom,{486,31},list},{var,{486,36},'Vars'}]}]}},
    {debug_line,487,200},
    {match,
     {487,5},
     {tuple,{487,5},[{var,{487,6},'Instr'},{var,{487,12},'Dict1'}]},
     {call,
      {487,21},
      {atom,{487,21},make_op},
      [{var,{487,29},'Instr0'},{var,{487,37},'Dict0'}]}},
    {debug_line,488,201},
    {match,
     {488,5},
     {tuple,{488,5},[{var,{488,6},'Tail'},{var,{488,11},'Dict2'}]},
     {call,
      {488,20},
      {atom,{488,20},build_bdi},
      [{var,{488,30},'Items'},{var,{488,37},'Dict1'}]}},
    {debug_line,489,202},
    {tuple,
     {489,5},
     [{cons,{489,6},{var,{489,7},'Instr'},{var,{489,13},'Tail'}},
      {var,{489,19},'Dict2'}]}]},
  {clause,
   {490,1},
   [{nil,{490,11}},{var,{490,15},'Dict'}],
   [],
   [{debug_line,491,203},
    {tuple,{491,5},[{nil,{491,6}},{var,{491,9},'Dict'}]}]}]}.
{function,{497,1},
          bif_type,2,
          [{clause,{497,1},
                   [{var,{497,1},'_'},{var,{497,1},'_'}],
                   [[{call,{497,1},
                           {remote,{497,1},
                                   {atom,{497,1},fake},
                                   {atom,{497,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,497,204},{atom,{497,1},ignore}]},
           {clause,{497,1},
                   [{atom,{497,10},fnegate},{integer,{497,19},1}],
                   [],
                   [{debug_line,497,205},
                    {tuple,{497,25},
                           [{atom,{497,26},op},{atom,{497,29},fnegate}]}]},
           {clause,{498,1},
                   [{atom,{498,10},fadd},{integer,{498,16},2}],
                   [],
                   [{debug_line,498,206},
                    {tuple,{498,24},
                           [{atom,{498,25},op},{atom,{498,28},fadd}]}]},
           {clause,{499,1},
                   [{atom,{499,10},fsub},{integer,{499,16},2}],
                   [],
                   [{debug_line,499,207},
                    {tuple,{499,24},
                           [{atom,{499,25},op},{atom,{499,28},fsub}]}]},
           {clause,{500,1},
                   [{atom,{500,10},fmul},{integer,{500,16},2}],
                   [],
                   [{debug_line,500,208},
                    {tuple,{500,24},
                           [{atom,{500,25},op},{atom,{500,28},fmul}]}]},
           {clause,{501,1},
                   [{atom,{501,10},fdiv},{integer,{501,16},2}],
                   [],
                   [{debug_line,501,209},
                    {tuple,{501,24},
                           [{atom,{501,25},op},{atom,{501,28},fdiv}]}]},
           {clause,{502,1},
                   [{var,{502,10},'_'},{integer,{502,13},1}],
                   [],
                   [{debug_line,502,210},{atom,{502,24},bif1}]},
           {clause,{503,1},
                   [{var,{503,10},'_'},{integer,{503,13},2}],
                   [],
                   [{debug_line,503,211},{atom,{503,24},bif2}]}]}.
{function,
 {505,1},
 make_op,2,
 [{clause,
   {505,1},
   [{var,{505,1},'_'},{var,{505,1},'_'}],
   [[{call,
      {505,1},
      {remote,{505,1},{atom,{505,1},fake},{atom,{505,1},is_beam_bif_info}},
      []}]],
   [{debug_line,505,212},{atom,{505,1},ignore}]},
  {clause,
   {505,1},
   [{tuple,{505,9},[{atom,{505,10},'%'},{var,{505,14},'_'}]},
    {var,{505,18},'Dict'}],
   [],
   [{debug_line,506,213},
    {tuple,{506,5},[{nil,{506,6}},{var,{506,9},'Dict'}]}]},
  {clause,
   {507,1},
   [{tuple,
     {507,9},
     [{match,{507,10},{atom,{507,10},line},{var,{507,15},'Op'}},
      {var,{507,18},'Location'}]},
    {var,{507,29},'Dict0'}],
   [],
   [{debug_line,508,214},
    {match,
     {508,5},
     {tuple,{508,5},[{var,{508,6},'Index'},{var,{508,12},'Dict'}]},
     {call,
      {508,20},
      {remote,{508,29},{atom,{508,20},beam_dict},{atom,{508,30},line}},
      [{var,{508,35},'Location'},{var,{508,45},'Dict0'},{var,{508,52},'Op'}]}},
    {debug_line,509,215},
    {call,
     {509,5},
     {atom,{509,5},encode_op},
     [{atom,{509,15},line},
      {block,0,[{cons,{509,21},{var,{509,22},'Index'},{nil,{509,27}}}]},
      {var,{509,30},'Dict'}]}]},
  {clause,
   {510,1},
   [{tuple,
     {510,9},
     [{match,{510,10},{atom,{510,10},executable_line},{var,{510,26},'Op'}},
      {var,{510,29},'Location'},
      {var,{510,38},'Index'}]},
    {var,{510,46},'Dict0'}],
   [],
   [{debug_line,511,216},
    {match,
     {511,5},
     {tuple,{511,5},[{var,{511,6},'LocationIndex'},{var,{511,20},'Dict'}]},
     {call,
      {511,28},
      {remote,{511,37},{atom,{511,28},beam_dict},{atom,{511,38},line}},
      [{var,{511,43},'Location'},{var,{511,53},'Dict0'},{var,{511,60},'Op'}]}},
    {debug_line,512,217},
    {call,
     {512,5},
     {atom,{512,5},encode_op},
     [{atom,{512,15},executable_line},
      {block,0,
       [{cons,
         {512,32},
         {var,{512,33},'LocationIndex'},
         {cons,{512,47},{var,{512,47},'Index'},{nil,{512,52}}}}]},
      {var,{512,55},'Dict'}]}]},
  {clause,
   {513,1},
   [{tuple,
     {513,9},
     [{match,{513,10},{atom,{513,10},debug_line},{var,{513,21},'Op'}},
      {var,{513,24},'Location'},
      {var,{513,33},'Index'},
      {var,{513,39},'Live'},
      {var,{513,44},'DebugInfo'}]},
    {var,{513,56},'Dict0'}],
   [],
   [{debug_line,514,218},
    {match,
     {514,5},
     {tuple,{514,5},[{var,{514,6},'LocationIndex'},{var,{514,20},'Dict1'}]},
     {call,
      {514,29},
      {remote,{514,38},{atom,{514,29},beam_dict},{atom,{514,39},line}},
      [{var,{514,44},'Location'},{var,{514,54},'Dict0'},{var,{514,61},'Op'}]}},
    {debug_line,515,219},
    {match,
     {515,5},
     {var,{515,5},'Dict'},
     {call,
      {515,12},
      {remote,{515,21},{atom,{515,12},beam_dict},{atom,{515,22},debug_info}},
      [{var,{515,33},'Index'},
       {var,{515,40},'DebugInfo'},
       {var,{515,51},'Dict1'}]}},
    {debug_line,516,220},
    {call,
     {516,5},
     {atom,{516,5},encode_op},
     [{atom,{516,15},debug_line},
      {block,0,
       [{cons,
         {516,27},
         {var,{516,28},'LocationIndex'},
         {cons,
          {516,42},
          {var,{516,42},'Index'},
          {cons,{516,48},{var,{516,48},'Live'},{nil,{516,52}}}}}]},
      {var,{516,55},'Dict'}]}]},
  {clause,
   {517,1},
   [{tuple,
     {517,9},
     [{atom,{517,10},bif},
      {var,{517,15},'Bif'},
      {tuple,{517,20},[{atom,{517,21},f},{var,{517,23},'_'}]},
      {nil,{517,27}},
      {var,{517,31},'Dest'}]},
    {var,{517,38},'Dict'}],
   [],
   [{debug_line,519,221},
    {call,
     {519,5},
     {atom,{519,5},encode_op},
     [{atom,{519,15},bif0},
      {block,0,
       [{cons,
         {519,21},
         {tuple,
          {519,22},
          [{atom,{519,23},extfunc},
           {atom,{519,32},erlang},
           {var,{519,40},'Bif'},
           {integer,{519,45},0}]},
         {cons,{519,49},{var,{519,49},'Dest'},{nil,{519,53}}}}]},
      {var,{519,56},'Dict'}]}]},
  {clause,
   {520,1},
   [{tuple,
     {520,9},
     [{atom,{520,10},bif},
      {atom,{520,15},raise},
      {var,{520,22},'_Fail'},
      {match,
       {520,29},
       {cons,
        {520,29},
        {var,{520,30},'_A1'},
        {cons,{520,34},{var,{520,34},'_A2'},{nil,{520,37}}}},
       {var,{520,41},'Args'}},
      {var,{520,47},'_Dest'}]},
    {var,{520,55},'Dict'}],
   [],
   [{debug_line,521,222},
    {call,
     {521,5},
     {atom,{521,5},encode_op},
     [{atom,{521,15},raise},{var,{521,22},'Args'},{var,{521,28},'Dict'}]}]},
  {clause,
   {522,1},
   [{tuple,
     {522,9},
     [{atom,{522,10},bif},
      {var,{522,14},'Bif'},
      {var,{522,18},'Fail'},
      {var,{522,23},'Args'},
      {var,{522,28},'Dest'}]},
    {var,{522,35},'Dict'}],
   [],
   [{debug_line,523,223},
    {match,
     {523,5},
     {var,{523,5},'Arity'},
     {call,
      {523,13},
      {remote,{523,13},{atom,{523,13},erlang},{atom,{523,13},length}},
      [{var,{523,20},'Args'}]}},
    {debug_line,524,224},
    {'case',
     {524,5},
     {call,
      {524,10},
      {atom,{524,10},bif_type},
      [{var,{524,19},'Bif'},{var,{524,24},'Arity'}]},
     [{clause,
       {525,2},
       [{tuple,{525,2},[{atom,{525,3},op},{var,{525,6},'Op'}]}],
       [],
       [{debug_line,526,225},
        {call,
         {526,6},
         {atom,{526,6},make_op},
         [{block,0,
           [{call,
             {526,14},
             {remote,
              {526,14},
              {atom,{526,14},erlang},
              {atom,{526,14},list_to_tuple}},
             [{block,0,
               [{cons,
                 {526,28},
                 {var,{526,29},'Op'},
                 {cons,
                  {526,32},
                  {var,{526,32},'Fail'},
                  {op,
                   {526,41},
                   '++',
                   {var,{526,37},'Args'},
                   {cons,
                    {526,43},
                    {var,{526,44},'Dest'},
                    {nil,{526,48}}}}}}]}]}]},
          {var,{526,53},'Dict'}]}]},
      {clause,
       {527,2},
       [{var,{527,2},'BifOp'}],
       [[{call,
          {527,13},
          {remote,{527,13},{atom,{527,13},erlang},{atom,{527,13},is_atom}},
          [{var,{527,21},'BifOp'}]}]],
       [{debug_line,528,226},
        {call,
         {528,6},
         {atom,{528,6},encode_op},
         [{var,{528,16},'BifOp'},
          {block,0,
           [{cons,
             {528,23},
             {var,{528,24},'Fail'},
             {cons,
              {528,29},
              {tuple,
               {528,29},
               [{atom,{528,30},extfunc},
                {atom,{528,38},erlang},
                {var,{528,45},'Bif'},
                {var,{528,49},'Arity'}]},
              {op,
               {528,60},
               '++',
               {var,{528,56},'Args'},
               {cons,{528,62},{var,{528,63},'Dest'},{nil,{528,67}}}}}}]},
          {var,{529,9},'Dict'}]}]}]}]},
  {clause,
   {531,1},
   [{tuple,
     {531,9},
     [{atom,{531,10},gc_bif},
      {var,{531,17},'Bif'},
      {var,{531,21},'Fail'},
      {var,{531,26},'Live'},
      {var,{531,31},'Args'},
      {var,{531,36},'Dest'}]},
    {var,{531,43},'Dict'}],
   [],
   [{debug_line,532,227},
    {match,
     {532,5},
     {var,{532,5},'Arity'},
     {call,
      {532,13},
      {remote,{532,13},{atom,{532,13},erlang},{atom,{532,13},length}},
      [{var,{532,20},'Args'}]}},
    {debug_line,533,228},
    {match,
     {533,5},
     {var,{533,5},'BifOp'},
     {'case',
      {533,13},
      {var,{533,18},'Arity'},
      [{clause,
        {534,3},
        [{integer,{534,3},1}],
        [],
        [{debug_line,534,229},{atom,{534,8},gc_bif1}]},
       {clause,
        {535,3},
        [{integer,{535,3},2}],
        [],
        [{debug_line,535,230},{atom,{535,8},gc_bif2}]},
       {clause,
        {536,3},
        [{integer,{536,3},3}],
        [],
        [{debug_line,536,231},{atom,{536,8},gc_bif3}]}]}},
    {debug_line,538,232},
    {call,
     {538,5},
     {atom,{538,5},encode_op},
     [{var,{538,15},'BifOp'},
      {block,0,
       [{cons,
         {538,22},
         {var,{538,23},'Fail'},
         {cons,
          {538,28},
          {var,{538,28},'Live'},
          {cons,
           {538,33},
           {tuple,
            {538,33},
            [{atom,{538,34},extfunc},
             {atom,{538,42},erlang},
             {var,{538,49},'Bif'},
             {var,{538,53},'Arity'}]},
           {op,
            {538,64},
            '++',
            {var,{538,60},'Args'},
            {cons,{538,66},{var,{538,67},'Dest'},{nil,{538,71}}}}}}}]},
      {var,{538,74},'Dict'}]}]},
  {clause,
   {539,1},
   [{tuple,
     {539,9},
     [{atom,{539,10},test},
      {var,{539,15},'Cond'},
      {var,{539,20},'Fail'},
      {var,{539,25},'Src'},
      {match,
       {539,29},
       {tuple,{539,29},[{atom,{539,30},list},{var,{539,35},'_'}]},
       {var,{539,38},'Ops'}}]},
    {var,{539,44},'Dict'}],
   [],
   [{debug_line,540,233},
    {call,
     {540,5},
     {atom,{540,5},encode_op},
     [{var,{540,15},'Cond'},
      {block,0,
       [{cons,
         {540,21},
         {var,{540,22},'Fail'},
         {cons,
          {540,27},
          {var,{540,27},'Src'},
          {cons,{540,31},{var,{540,31},'Ops'},{nil,{540,34}}}}}]},
      {var,{540,37},'Dict'}]}]},
  {clause,
   {541,1},
   [{tuple,
     {541,9},
     [{atom,{541,10},test},
      {var,{541,15},'Cond'},
      {var,{541,20},'Fail'},
      {var,{541,25},'Ops'}]},
    {var,{541,31},'Dict'}],
   [[{call,
      {541,42},
      {remote,{541,42},{atom,{541,42},erlang},{atom,{541,42},is_list}},
      [{var,{541,50},'Ops'}]}]],
   [{debug_line,542,234},
    {call,
     {542,5},
     {atom,{542,5},encode_op},
     [{var,{542,15},'Cond'},
      {block,0,[{cons,{542,21},{var,{542,22},'Fail'},{var,{542,27},'Ops'}}]},
      {var,{542,33},'Dict'}]}]},
  {clause,
   {543,1},
   [{tuple,
     {543,9},
     [{atom,{543,10},test},
      {var,{543,15},'Cond'},
      {var,{543,20},'Fail'},
      {var,{543,25},'Live'},
      {cons,{543,30},{var,{543,31},'Op'},{var,{543,34},'Ops'}},
      {var,{543,39},'Dst'}]},
    {var,{543,45},'Dict'}],
   [[{call,
      {543,56},
      {remote,{543,56},{atom,{543,56},erlang},{atom,{543,56},is_list}},
      [{var,{543,64},'Ops'}]}]],
   [{debug_line,544,235},
    {call,
     {544,5},
     {atom,{544,5},encode_op},
     [{var,{544,15},'Cond'},
      {block,0,
       [{cons,
         {544,21},
         {var,{544,22},'Fail'},
         {cons,
          {544,27},
          {var,{544,27},'Op'},
          {cons,
           {544,30},
           {var,{544,30},'Live'},
           {op,
            {544,38},
            '++',
            {var,{544,35},'Ops'},
            {cons,{544,40},{var,{544,41},'Dst'},{nil,{544,44}}}}}}}]},
      {var,{544,48},'Dict'}]}]},
  {clause,
   {545,1},
   [{tuple,
     {545,9},
     [{atom,{545,10},make_fun3},
      {tuple,{545,20},[{atom,{545,21},f},{var,{545,23},'Lbl'}]},
      {var,{545,28},'_Index'},
      {var,{545,35},'_OldUniq'},
      {var,{545,44},'Dst'},
      {tuple,{545,48},[{atom,{545,49},list},{var,{545,54},'Env'}]}]},
    {var,{545,61},'Dict0'}],
   [],
   [{debug_line,546,236},
    {match,
     {546,5},
     {var,{546,5},'NumFree'},
     {call,
      {546,15},
      {remote,{546,15},{atom,{546,15},erlang},{atom,{546,15},length}},
      [{var,{546,22},'Env'}]}},
    {debug_line,547,237},
    {match,
     {547,5},
     {tuple,{547,5},[{var,{547,6},'Fun'},{var,{547,10},'Dict'}]},
     {call,
      {547,18},
      {remote,{547,27},{atom,{547,18},beam_dict},{atom,{547,28},lambda}},
      [{var,{547,35},'Lbl'},{var,{547,40},'NumFree'},{var,{547,49},'Dict0'}]}},
    {debug_line,548,238},
    {call,
     {548,5},
     {atom,{548,5},make_op},
     [{block,0,
       [{tuple,
         {548,13},
         [{atom,{548,14},make_fun3},
          {var,{548,24},'Fun'},
          {var,{548,28},'Dst'},
          {tuple,{548,32},[{atom,{548,33},list},{var,{548,38},'Env'}]}]}]},
      {var,{548,45},'Dict'}]}]},
  {clause,
   {549,1},
   [{tuple,
     {549,9},
     [{atom,{549,10},call_fun2},
      {tuple,{549,20},[{atom,{549,21},f},{var,{549,23},'Lbl'}]},
      {var,{549,28},'Arity'},
      {var,{549,34},'Func'}]},
    {var,{549,41},'Dict0'}],
   [],
   [{debug_line,551,239},
    {match,
     {551,5},
     {tuple,
      {551,5},
      [{atom,{551,5},tr},
       {var,{551,5},'_'},
       {tuple,
        {551,11},
        [{atom,{551,11},t_fun},
         {var,{551,11},'_'},
         {tuple,{551,25},[{var,{551,26},'_Name'},{var,{551,33},'TotalArity'}]},
         {var,{551,11},'_'}]}]},
     {var,{551,49},'Func'}},
    {debug_line,552,240},
    {match,
     {552,5},
     {var,{552,5},'NumFree'},
     {op,{552,26},'-',{var,{552,15},'TotalArity'},{var,{552,28},'Arity'}}},
    {debug_line,553,241},
    {match,
     {553,5},
     {tuple,{553,5},[{var,{553,6},'Lambda'},{var,{553,13},'Dict'}]},
     {call,
      {553,21},
      {remote,{553,30},{atom,{553,21},beam_dict},{atom,{553,31},lambda}},
      [{var,{553,38},'Lbl'},{var,{553,43},'NumFree'},{var,{553,52},'Dict0'}]}},
    {debug_line,554,242},
    {call,
     {554,5},
     {atom,{554,5},make_op},
     [{block,0,
       [{tuple,
         {554,13},
         [{atom,{554,14},call_fun2},
          {var,{554,24},'Lambda'},
          {var,{554,31},'Arity'},
          {var,{554,37},'Func'}]}]},
      {var,{554,44},'Dict'}]}]},
  {clause,
   {555,1},
   [{tuple,{555,9},[{var,{555,10},'Name'},{var,{555,15},'Arg1'}]},
    {var,{555,22},'Dict'}],
   [],
   [{debug_line,556,243},
    {call,
     {556,5},
     {atom,{556,5},encode_op},
     [{var,{556,15},'Name'},
      {block,0,[{cons,{556,21},{var,{556,22},'Arg1'},{nil,{556,26}}}]},
      {var,{556,29},'Dict'}]}]},
  {clause,
   {557,1},
   [{tuple,
     {557,9},
     [{var,{557,10},'Name'},{var,{557,15},'Arg1'},{var,{557,20},'Arg2'}]},
    {var,{557,27},'Dict'}],
   [],
   [{debug_line,558,244},
    {call,
     {558,5},
     {atom,{558,5},encode_op},
     [{var,{558,15},'Name'},
      {block,0,
       [{cons,
         {558,21},
         {var,{558,22},'Arg1'},
         {cons,{558,27},{var,{558,27},'Arg2'},{nil,{558,31}}}}]},
      {var,{558,34},'Dict'}]}]},
  {clause,
   {559,1},
   [{tuple,
     {559,9},
     [{var,{559,10},'Name'},
      {var,{559,15},'Arg1'},
      {var,{559,20},'Arg2'},
      {var,{559,25},'Arg3'}]},
    {var,{559,32},'Dict'}],
   [],
   [{debug_line,560,245},
    {call,
     {560,5},
     {atom,{560,5},encode_op},
     [{var,{560,15},'Name'},
      {block,0,
       [{cons,
         {560,21},
         {var,{560,22},'Arg1'},
         {cons,
          {560,27},
          {var,{560,27},'Arg2'},
          {cons,{560,32},{var,{560,32},'Arg3'},{nil,{560,36}}}}}]},
      {var,{560,39},'Dict'}]}]},
  {clause,
   {561,1},
   [{tuple,
     {561,9},
     [{var,{561,10},'Name'},
      {var,{561,15},'Arg1'},
      {var,{561,20},'Arg2'},
      {var,{561,25},'Arg3'},
      {var,{561,30},'Arg4'}]},
    {var,{561,37},'Dict'}],
   [],
   [{debug_line,562,246},
    {call,
     {562,5},
     {atom,{562,5},encode_op},
     [{var,{562,15},'Name'},
      {block,0,
       [{cons,
         {562,21},
         {var,{562,22},'Arg1'},
         {cons,
          {562,27},
          {var,{562,27},'Arg2'},
          {cons,
           {562,32},
           {var,{562,32},'Arg3'},
           {cons,{562,37},{var,{562,37},'Arg4'},{nil,{562,41}}}}}}]},
      {var,{562,44},'Dict'}]}]},
  {clause,
   {563,1},
   [{var,{563,9},'Instr'},{var,{563,16},'Dict'}],
   [[{op,
      {563,45},
      '>=',
      {call,
       {563,27},
       {remote,{563,27},{atom,{563,27},erlang},{atom,{563,27},tuple_size}},
       [{var,{563,38},'Instr'}]},
      {integer,{563,48},6}}]],
   [{debug_line,564,247},
    {match,
     {564,5},
     {cons,{564,5},{var,{564,6},'Name'},{var,{564,11},'Args'}},
     {call,
      {564,19},
      {remote,{564,19},{atom,{564,19},erlang},{atom,{564,19},tuple_to_list}},
      [{var,{564,33},'Instr'}]}},
    {debug_line,565,248},
    {call,
     {565,5},
     {atom,{565,5},encode_op},
     [{var,{565,15},'Name'},{var,{565,21},'Args'},{var,{565,27},'Dict'}]}]},
  {clause,
   {566,1},
   [{var,{566,9},'Op'},{var,{566,13},'Dict'}],
   [[{call,
      {566,24},
      {remote,{566,24},{atom,{566,24},erlang},{atom,{566,24},is_atom}},
      [{var,{566,32},'Op'}]}]],
   [{debug_line,567,249},
    {call,
     {567,5},
     {atom,{567,5},encode_op},
     [{var,{567,15},'Op'},{nil,{567,19}},{var,{567,23},'Dict'}]}]}]}.
{function,
    {569,1},
    encode_op,3,
    [{clause,
         {569,1},
         [{var,{569,1},'_'},{var,{569,1},'_'},{var,{569,1},'_'}],
         [[{call,
               {569,1},
               {remote,
                   {569,1},
                   {atom,{569,1},fake},
                   {atom,{569,1},is_beam_bif_info}},
               []}]],
         [{debug_line,569,250},{atom,{569,1},ignore}]},
     {clause,
         {569,1},
         [{var,{569,11},'Name'},{var,{569,17},'Args'},{var,{569,23},'Dict0'}],
         [[{call,
               {569,35},
               {remote,
                   {569,35},
                   {atom,{569,35},erlang},
                   {atom,{569,35},is_atom}},
               [{var,{569,43},'Name'}]}]],
         [{debug_line,570,251},
          {match,
              {570,5},
              {var,{570,5},'Op'},
              {call,
                  {570,10},
                  {remote,
                      {570,22},
                      {atom,{570,10},beam_opcodes},
                      {atom,{570,23},opcode}},
                  [{var,{570,30},'Name'},
                   {block,0,
                       [{call,
                            {570,36},
                            {remote,
                                {570,36},
                                {atom,{570,36},erlang},
                                {atom,{570,36},length}},
                            [{var,{570,43},'Args'}]}]}]}},
          {debug_line,571,252},
          {match,
              {571,5},
              {var,{571,5},'Dict'},
              {call,
                  {571,12},
                  {remote,
                      {571,21},
                      {atom,{571,12},beam_dict},
                      {atom,{571,22},opcode}},
                  [{var,{571,29},'Op'},{var,{571,33},'Dict0'}]}},
          {debug_line,572,253},
          {call,
              {572,5},
              {atom,{572,5},encode_op_1},
              [{var,{572,17},'Args'},
               {var,{572,23},'Dict'},
               {var,{572,29},'Op'}]}]}]}.
{function,
    {574,1},
    encode_op_1,3,
    [{clause,
         {574,1},
         [{var,{574,1},'_'},{var,{574,1},'_'},{var,{574,1},'_'}],
         [[{call,
               {574,1},
               {remote,
                   {574,1},
                   {atom,{574,1},fake},
                   {atom,{574,1},is_beam_bif_info}},
               []}]],
         [{debug_line,574,254},{atom,{574,1},ignore}]},
     {clause,
         {574,1},
         [{cons,{574,13},{var,{574,14},'A0'},{var,{574,17},'As'}},
          {var,{574,22},'Dict0'},
          {var,{574,29},'Acc'}],
         [],
         [{debug_line,575,255},
          {match,
              {575,5},
              {tuple,{575,5},[{var,{575,6},'A'},{var,{575,8},'Dict'}]},
              {call,
                  {575,16},
                  {atom,{575,16},encode_arg},
                  [{var,{575,27},'A0'},{var,{575,31},'Dict0'}]}},
          {debug_line,576,256},
          {call,
              {576,5},
              {atom,{576,5},encode_op_1},
              [{var,{576,17},'As'},
               {var,{576,21},'Dict'},
               {block,0,
                   [{cons,
                        {576,27},
                        {var,{576,28},'Acc'},
                        {cons,
                            {576,32},
                            {var,{576,32},'A'},
                            {nil,{576,33}}}}]}]}]},
     {clause,
         {577,1},
         [{nil,{577,13}},{var,{577,17},'Dict'},{var,{577,23},'Acc'}],
         [],
         [{debug_line,577,257},
          {tuple,{577,31},[{var,{577,32},'Acc'},{var,{577,36},'Dict'}]}]}]}.
{function,
 {579,1},
 encode_arg,2,
 [{clause,
   {579,1},
   [{var,{579,1},'_'},{var,{579,1},'_'}],
   [[{call,
      {579,1},
      {remote,{579,1},{atom,{579,1},fake},{atom,{579,1},is_beam_bif_info}},
      []}]],
   [{debug_line,579,258},{atom,{579,1},ignore}]},
  {clause,
   {579,1},
   [{tuple,
     {579,12},
     [{atom,{579,12},tr},
      {tuple,{579,18},[{atom,{579,19},x},{var,{579,22},'X'}]},
      {var,{579,27},'Type'}]},
    {var,{579,34},'Dict0'}],
   [[{call,
      {579,46},
      {remote,{579,46},{atom,{579,46},erlang},{atom,{579,46},is_integer}},
      [{var,{579,57},'X'}]},
     {op,{579,63},'>=',{var,{579,61},'X'},{integer,{579,66},0}}]],
   [{debug_line,583,259},
    {match,
     {583,5},
     {var,{583,5},'Canary'},
     {call,
      {583,14},
      {remote,{583,26},{atom,{583,14},beam_opcodes},{atom,{583,27},opcode}},
      [{atom,{583,34},call_fun2},{integer,{583,45},3}]}},
    {debug_line,584,260},
    {match,
     {584,5},
     {tuple,{584,5},[{var,{584,6},'Index'},{var,{584,13},'Dict'}]},
     {call,
      {584,21},
      {remote,{584,30},{atom,{584,21},beam_dict},{atom,{584,31},type}},
      [{var,{584,36},'Type'},
       {block,0,
        [{call,
          {584,42},
          {remote,{584,51},{atom,{584,42},beam_dict},{atom,{584,52},opcode}},
          [{var,{584,59},'Canary'},{var,{584,67},'Dict0'}]}]}]}},
    {debug_line,585,261},
    {match,
     {585,5},
     {var,{585,5},'Data'},
     {cons,
      {585,12},
      {call,
       {585,13},
       {atom,{585,13},encode},
       [{integer,{585,21},7},{integer,{585,28},5}]},
      {cons,
       {586,13},
       {call,
        {586,13},
        {atom,{586,13},encode},
        [{integer,{586,21},3},{var,{586,28},'X'}]},
       {cons,
        {587,13},
        {call,
         {587,13},
         {atom,{587,13},encode},
         [{integer,{587,21},0},{var,{587,28},'Index'}]},
        {nil,{587,34}}}}}},
    {debug_line,588,262},
    {tuple,{588,5},[{var,{588,6},'Data'},{var,{588,12},'Dict'}]}]},
  {clause,
   {589,1},
   [{tuple,
     {589,12},
     [{atom,{589,12},tr},
      {tuple,{589,18},[{atom,{589,19},y},{var,{589,22},'Y'}]},
      {var,{589,27},'Type'}]},
    {var,{589,34},'Dict0'}],
   [[{call,
      {589,46},
      {remote,{589,46},{atom,{589,46},erlang},{atom,{589,46},is_integer}},
      [{var,{589,57},'Y'}]},
     {op,{589,63},'>=',{var,{589,61},'Y'},{integer,{589,66},0}}]],
   [{debug_line,590,263},
    {match,
     {590,5},
     {var,{590,5},'Canary'},
     {call,
      {590,14},
      {remote,{590,26},{atom,{590,14},beam_opcodes},{atom,{590,27},opcode}},
      [{atom,{590,34},call_fun2},{integer,{590,45},3}]}},
    {debug_line,591,264},
    {match,
     {591,5},
     {tuple,{591,5},[{var,{591,6},'Index'},{var,{591,13},'Dict'}]},
     {call,
      {591,21},
      {remote,{591,30},{atom,{591,21},beam_dict},{atom,{591,31},type}},
      [{var,{591,36},'Type'},
       {block,0,
        [{call,
          {591,42},
          {remote,{591,51},{atom,{591,42},beam_dict},{atom,{591,52},opcode}},
          [{var,{591,59},'Canary'},{var,{591,67},'Dict0'}]}]}]}},
    {debug_line,592,265},
    {match,
     {592,5},
     {var,{592,5},'Data'},
     {cons,
      {592,12},
      {call,
       {592,13},
       {atom,{592,13},encode},
       [{integer,{592,21},7},{integer,{592,28},5}]},
      {cons,
       {593,13},
       {call,
        {593,13},
        {atom,{593,13},encode},
        [{integer,{593,21},4},{var,{593,28},'Y'}]},
       {cons,
        {594,13},
        {call,
         {594,13},
         {atom,{594,13},encode},
         [{integer,{594,21},0},{var,{594,28},'Index'}]},
        {nil,{594,34}}}}}},
    {debug_line,595,266},
    {tuple,{595,5},[{var,{595,6},'Data'},{var,{595,12},'Dict'}]}]},
  {clause,
   {596,1},
   [{tuple,{596,12},[{atom,{596,13},x},{var,{596,16},'X'}]},
    {var,{596,20},'Dict'}],
   [[{call,
      {596,31},
      {remote,{596,31},{atom,{596,31},erlang},{atom,{596,31},is_integer}},
      [{var,{596,42},'X'}]},
     {op,{596,48},'>=',{var,{596,46},'X'},{integer,{596,51},0}}]],
   [{debug_line,597,267},
    {tuple,
     {597,5},
     [{call,
       {597,6},
       {atom,{597,6},encode},
       [{integer,{597,14},3},{var,{597,21},'X'}]},
      {var,{597,25},'Dict'}]}]},
  {clause,
   {598,1},
   [{tuple,{598,12},[{atom,{598,13},y},{var,{598,16},'Y'}]},
    {var,{598,20},'Dict'}],
   [[{call,
      {598,31},
      {remote,{598,31},{atom,{598,31},erlang},{atom,{598,31},is_integer}},
      [{var,{598,42},'Y'}]},
     {op,{598,48},'>=',{var,{598,46},'Y'},{integer,{598,51},0}}]],
   [{debug_line,599,268},
    {tuple,
     {599,5},
     [{call,
       {599,6},
       {atom,{599,6},encode},
       [{integer,{599,14},4},{var,{599,21},'Y'}]},
      {var,{599,25},'Dict'}]}]},
  {clause,
   {600,1},
   [{tuple,{600,12},[{atom,{600,13},atom},{var,{600,19},'Atom'}]},
    {var,{600,26},'Dict0'}],
   [[{call,
      {600,38},
      {remote,{600,38},{atom,{600,38},erlang},{atom,{600,38},is_atom}},
      [{var,{600,46},'Atom'}]}]],
   [{debug_line,601,269},
    {match,
     {601,5},
     {tuple,{601,5},[{var,{601,6},'Index'},{var,{601,13},'Dict'}]},
     {call,
      {601,21},
      {remote,{601,30},{atom,{601,21},beam_dict},{atom,{601,31},atom}},
      [{var,{601,36},'Atom'},{var,{601,42},'Dict0'}]}},
    {debug_line,602,270},
    {tuple,
     {602,5},
     [{call,
       {602,6},
       {atom,{602,6},encode},
       [{integer,{602,14},2},{var,{602,21},'Index'}]},
      {var,{602,29},'Dict'}]}]},
  {clause,
   {603,1},
   [{tuple,{603,12},[{atom,{603,13},integer},{var,{603,22},'N'}]},
    {var,{603,26},'Dict'}],
   [],
   [{debug_line,607,271},
    {'if',
     {607,5},
     [{clause,
       {608,9},
       [],
       [[{op,
          {608,11},
          '>=',
          {var,{608,9},'N'},
          {op,{608,16},'bsl',{integer,{608,14},1},{integer,{608,20},128}}}]],
       [{debug_line,609,272},
        {call,
         {609,13},
         {atom,{609,13},encode_literal},
         [{var,{609,28},'N'},{var,{609,31},'Dict'}]}]},
      {clause,
       {610,9},
       [],
       [[{op,
          {610,11},
          '=<',
          {var,{610,9},'N'},
          {op,
           {610,14},
           '-',
           {op,{610,18},'bsl',{integer,{610,16},1},{integer,{610,22},128}}}}]],
       [{debug_line,611,273},
        {call,
         {611,13},
         {atom,{611,13},encode_literal},
         [{var,{611,28},'N'},{var,{611,31},'Dict'}]}]},
      {clause,
       {612,9},
       [],
       [[{atom,{612,9},true}]],
       [{debug_line,613,274},
        {tuple,
         {613,13},
         [{call,
           {613,14},
           {atom,{613,14},encode},
           [{integer,{613,22},1},{var,{613,29},'N'}]},
          {var,{613,33},'Dict'}]}]}]}]},
  {clause,
   {615,1},
   [{atom,{615,12},nil},{var,{615,17},'Dict'}],
   [],
   [{debug_line,616,275},
    {tuple,
     {616,5},
     [{call,
       {616,6},
       {atom,{616,6},encode},
       [{integer,{616,14},2},{integer,{616,21},0}]},
      {var,{616,25},'Dict'}]}]},
  {clause,
   {617,1},
   [{tuple,{617,12},[{atom,{617,13},f},{var,{617,16},'W'}]},
    {var,{617,20},'Dict'}],
   [],
   [{debug_line,618,276},
    {tuple,
     {618,5},
     [{call,
       {618,6},
       {atom,{618,6},encode},
       [{integer,{618,14},5},{var,{618,21},'W'}]},
      {var,{618,25},'Dict'}]}]},
  {clause,
   {621,1},
   [{tuple,{621,12},[{atom,{621,13},string},{var,{621,21},'BinString'}]},
    {var,{621,33},'Dict0'}],
   [[{call,
      {621,45},
      {remote,{621,45},{atom,{621,45},erlang},{atom,{621,45},is_binary}},
      [{var,{621,55},'BinString'}]}]],
   [{debug_line,622,277},
    {match,
     {622,5},
     {tuple,{622,5},[{var,{622,6},'Offset'},{var,{622,14},'Dict'}]},
     {call,
      {622,22},
      {remote,{622,31},{atom,{622,22},beam_dict},{atom,{622,32},string}},
      [{var,{622,39},'BinString'},{var,{622,50},'Dict0'}]}},
    {debug_line,623,278},
    {tuple,
     {623,5},
     [{call,
       {623,6},
       {atom,{623,6},encode},
       [{integer,{623,14},0},{var,{623,21},'Offset'}]},
      {var,{623,30},'Dict'}]}]},
  {clause,
   {624,1},
   [{tuple,
     {624,12},
     [{atom,{624,13},extfunc},
      {var,{624,22},'M'},
      {var,{624,25},'F'},
      {var,{624,28},'A'}]},
    {var,{624,32},'Dict0'}],
   [],
   [{debug_line,625,279},
    {match,
     {625,5},
     {tuple,{625,5},[{var,{625,6},'Index'},{var,{625,13},'Dict'}]},
     {call,
      {625,21},
      {remote,{625,30},{atom,{625,21},beam_dict},{atom,{625,31},import}},
      [{var,{625,38},'M'},
       {var,{625,41},'F'},
       {var,{625,44},'A'},
       {var,{625,47},'Dict0'}]}},
    {debug_line,626,280},
    {tuple,
     {626,5},
     [{call,
       {626,6},
       {atom,{626,6},encode},
       [{integer,{626,14},0},{var,{626,21},'Index'}]},
      {var,{626,29},'Dict'}]}]},
  {clause,
   {627,1},
   [{tuple,{627,12},[{atom,{627,13},list},{var,{627,19},'List'}]},
    {var,{627,26},'Dict0'}],
   [],
   [{debug_line,628,281},
    {match,
     {628,5},
     {tuple,{628,5},[{var,{628,6},'L'},{var,{628,9},'Dict'}]},
     {call,
      {628,17},
      {atom,{628,17},encode_list},
      [{var,{628,29},'List'},{var,{628,35},'Dict0'},{nil,{628,42}}]}},
    {debug_line,629,282},
    {tuple,
     {629,5},
     [{cons,
       {629,6},
       {call,
        {629,7},
        {atom,{629,7},encode},
        [{integer,{629,15},7},{integer,{629,22},1}]},
       {cons,
        {629,26},
        {call,
         {629,26},
         {atom,{629,26},encode},
         [{integer,{629,34},0},
          {block,0,
           [{call,
             {629,41},
             {remote,{629,41},{atom,{629,41},erlang},{atom,{629,41},length}},
             [{var,{629,48},'List'}]}]}]},
        {var,{629,55},'L'}}},
      {var,{629,59},'Dict'}]}]},
  {clause,
   {630,1},
   [{tuple,{630,12},[{atom,{630,13},commands},{var,{630,23},'List0'}]},
    {var,{630,31},'Dict'}],
   [],
   [{debug_line,631,283},
    {match,
     {631,5},
     {var,{631,5},'List1'},
     {lc,
      {631,13},
      {block,
       {631,14},
       [{debug_line,632,284},
        {match,
         {632,18},
         {cons,{632,18},{var,{632,19},'H'},{var,{632,21},'T'}},
         {call,
          {632,26},
          {remote,
           {632,26},
           {atom,{632,26},erlang},
           {atom,{632,26},tuple_to_list}},
          [{var,{632,40},'Tuple'}]}},
        {debug_line,633,285},
        {cons,
         {633,18},
         {tuple,{633,19},[{atom,{633,20},atom},{var,{633,25},'H'}]},
         {var,{633,28},'T'}}]},
      [{block,0,[{debug_line,634,286},{atom,{634,30},true}]},
       {generate,{634,27},{var,{634,21},'Tuple'},{var,{634,30},'List0'}}]}},
    {debug_line,635,287},
    {match,
     {635,5},
     {var,{635,5},'List'},
     {call,
      {635,12},
      {remote,{635,12},{atom,{635,12},lists},{atom,{635,12},append}},
      [{var,{635,19},'List1'}]}},
    {debug_line,636,288},
    {call,
     {636,5},
     {atom,{636,5},encode_arg},
     [{block,0,
       [{tuple,{636,16},[{atom,{636,17},list},{var,{636,23},'List'}]}]},
      {var,{636,30},'Dict'}]}]},
  {clause,
   {637,1},
   [{tuple,{637,12},[{atom,{637,13},float},{var,{637,20},'Float'}]},
    {var,{637,28},'Dict'}],
   [[{call,
      {637,39},
      {remote,{637,39},{atom,{637,39},erlang},{atom,{637,39},is_float}},
      [{var,{637,48},'Float'}]}]],
   [{debug_line,638,289},
    {call,
     {638,5},
     {atom,{638,5},encode_literal},
     [{var,{638,20},'Float'},{var,{638,27},'Dict'}]}]},
  {clause,
   {639,1},
   [{tuple,{639,12},[{atom,{639,13},fr},{var,{639,16},'Fr'}]},
    {var,{639,21},'Dict'}],
   [],
   [{debug_line,640,290},
    {tuple,
     {640,5},
     [{cons,
       {640,6},
       {call,
        {640,7},
        {atom,{640,7},encode},
        [{integer,{640,15},7},{integer,{640,22},2}]},
       {cons,
        {640,25},
        {call,
         {640,25},
         {atom,{640,25},encode},
         [{integer,{640,33},0},{var,{640,40},'Fr'}]},
        {nil,{640,43}}}},
      {var,{640,46},'Dict'}]}]},
  {clause,
   {641,1},
   [{tuple,{641,12},[{atom,{641,13},field_flags},{var,{641,25},'Flags0'}]},
    {var,{641,34},'Dict'}],
   [],
   [{debug_line,642,291},
    {match,
     {642,5},
     {var,{642,5},'Flags'},
     {call,
      {642,13},
      {remote,{642,18},{atom,{642,13},lists},{atom,{642,19},foldl}},
      [{block,0,
        [{'fun',
          {642,25},
          {clauses,
           [{clause,
             {642,29},
             [{var,{642,30},'F'},{var,{642,33},'S'}],
             [],
             [{op,
               {642,41},
               'bor',
               {var,{642,39},'S'},
               {call,
                {642,45},
                {atom,{642,45},flag_to_bit},
                [{var,{642,57},'F'}]}}]}]}}]},
       {integer,{642,65},0},
       {var,{642,68},'Flags0'}]}},
    {debug_line,643,292},
    {tuple,
     {643,5},
     [{call,
       {643,6},
       {atom,{643,6},encode},
       [{integer,{643,14},0},{var,{643,21},'Flags'}]},
      {var,{643,29},'Dict'}]}]},
  {clause,
   {644,1},
   [{tuple,{644,12},[{atom,{644,13},alloc},{var,{644,19},'List'}]},
    {var,{644,26},'Dict'}],
   [],
   [{debug_line,645,293},
    {call,
     {645,5},
     {atom,{645,5},encode_alloc_list},
     [{var,{645,23},'List'},{var,{645,29},'Dict'}]}]},
  {clause,
   {646,1},
   [{tuple,{646,12},[{atom,{646,13},literal},{var,{646,21},'Lit'}]},
    {var,{646,27},'Dict'}],
   [],
   [{debug_line,647,294},
    {'if',
     {647,5},
     [{clause,
       {648,9},
       [],
       [[{op,{648,13},'=:=',{var,{648,9},'Lit'},{nil,{648,17}}}]],
       [{debug_line,649,295},
        {call,
         {649,13},
         {atom,{649,13},encode_arg},
         [{atom,{649,24},nil},{var,{649,29},'Dict'}]}]},
      {clause,
       {650,9},
       [],
       [[{call,
          {650,9},
          {remote,{650,9},{atom,{650,9},erlang},{atom,{650,9},is_atom}},
          [{var,{650,17},'Lit'}]}]],
       [{debug_line,651,296},
        {call,
         {651,13},
         {atom,{651,13},encode_arg},
         [{block,0,
           [{tuple,{651,24},[{atom,{651,25},atom},{var,{651,30},'Lit'}]}]},
          {var,{651,36},'Dict'}]}]},
      {clause,
       {652,9},
       [],
       [[{call,
          {652,9},
          {remote,{652,9},{atom,{652,9},erlang},{atom,{652,9},is_integer}},
          [{var,{652,20},'Lit'}]}]],
       [{debug_line,653,297},
        {call,
         {653,13},
         {atom,{653,13},encode_arg},
         [{block,0,
           [{tuple,{653,24},[{atom,{653,25},integer},{var,{653,33},'Lit'}]}]},
          {var,{653,39},'Dict'}]}]},
      {clause,
       {654,9},
       [],
       [[{atom,{654,9},true}]],
       [{debug_line,655,298},
        {call,
         {655,13},
         {atom,{655,13},encode_literal},
         [{var,{655,28},'Lit'},{var,{655,33},'Dict'}]}]}]}]},
  {clause,
   {657,1},
   [{var,{657,12},'Int'},{var,{657,17},'Dict'}],
   [[{call,
      {657,28},
      {remote,{657,28},{atom,{657,28},erlang},{atom,{657,28},is_integer}},
      [{var,{657,39},'Int'}]}]],
   [{debug_line,658,299},
    {tuple,
     {658,5},
     [{call,
       {658,6},
       {atom,{658,6},encode},
       [{integer,{658,14},0},{var,{658,21},'Int'}]},
      {var,{658,26},'Dict'}]}]}]}.
{function,
    {660,1},
    encode_literal,2,
    [{clause,
         {660,1},
         [{var,{660,1},'_'},{var,{660,1},'_'}],
         [[{call,
               {660,1},
               {remote,
                   {660,1},
                   {atom,{660,1},fake},
                   {atom,{660,1},is_beam_bif_info}},
               []}]],
         [{debug_line,660,300},{atom,{660,1},ignore}]},
     {clause,
         {660,1},
         [{var,{660,16},'Literal'},{var,{660,25},'Dict0'}],
         [],
         [{debug_line,661,301},
          {match,
              {661,5},
              {tuple,{661,5},[{var,{661,6},'Index'},{var,{661,12},'Dict'}]},
              {call,
                  {661,20},
                  {remote,
                      {661,29},
                      {atom,{661,20},beam_dict},
                      {atom,{661,30},literal}},
                  [{var,{661,38},'Literal'},{var,{661,47},'Dict0'}]}},
          {debug_line,662,302},
          {tuple,
              {662,5},
              [{cons,
                   {662,6},
                   {call,
                       {662,7},
                       {atom,{662,7},encode},
                       [{integer,{662,15},7},{integer,{662,22},4}]},
                   {cons,
                       {662,25},
                       {call,
                           {662,25},
                           {atom,{662,25},encode},
                           [{integer,{662,33},0},{var,{662,40},'Index'}]},
                       {nil,{662,46}}}},
               {var,{662,48},'Dict'}]}]}]}.
{function,{665,1},
          flag_to_bit,1,
          [{clause,{665,1},
                   [{var,{665,1},'_'}],
                   [[{call,{665,1},
                           {remote,{665,1},
                                   {atom,{665,1},fake},
                                   {atom,{665,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,665,303},{atom,{665,1},ignore}]},
           {clause,{665,1},
                   [{atom,{665,13},little}],
                   [],
                   [{debug_line,665,304},{integer,{665,25},2}]},
           {clause,{666,1},
                   [{atom,{666,13},big}],
                   [],
                   [{debug_line,666,305},{integer,{666,25},0}]},
           {clause,{667,1},
                   [{atom,{667,13},signed}],
                   [],
                   [{debug_line,667,306},{integer,{667,25},4}]},
           {clause,{668,1},
                   [{atom,{668,13},unsigned}],
                   [],
                   [{debug_line,668,307},{integer,{668,25},0}]},
           {clause,{670,1},
                   [{atom,{670,13},native}],
                   [],
                   [{debug_line,670,308},{integer,{670,25},16}]},
           {clause,{671,1},
                   [{tuple,{671,13},
                           [{atom,{671,14},anno},{var,{671,19},'_'}]}],
                   [],
                   [{debug_line,671,309},{integer,{671,26},0}]}]}.
{function,
    {673,1},
    encode_list,3,
    [{clause,
         {673,1},
         [{var,{673,1},'_'},{var,{673,1},'_'},{var,{673,1},'_'}],
         [[{call,
               {673,1},
               {remote,
                   {673,1},
                   {atom,{673,1},fake},
                   {atom,{673,1},is_beam_bif_info}},
               []}]],
         [{debug_line,673,310},{atom,{673,1},ignore}]},
     {clause,
         {673,1},
         [{cons,{673,13},{var,{673,14},'H'},{var,{673,16},'T'}},
          {var,{673,20},'Dict0'},
          {var,{673,27},'Acc'}],
         [[{op,{673,37},
               'not',
               {call,
                   {673,41},
                   {remote,
                       {673,41},
                       {atom,{673,41},erlang},
                       {atom,{673,41},is_list}},
                   [{var,{673,49},'H'}]}}]],
         [{debug_line,674,311},
          {match,
              {674,5},
              {tuple,{674,5},[{var,{674,6},'Enc'},{var,{674,10},'Dict'}]},
              {call,
                  {674,18},
                  {atom,{674,18},encode_arg},
                  [{var,{674,29},'H'},{var,{674,32},'Dict0'}]}},
          {debug_line,675,312},
          {call,
              {675,5},
              {atom,{675,5},encode_list},
              [{var,{675,17},'T'},
               {var,{675,20},'Dict'},
               {block,0,
                   [{cons,
                        {675,26},
                        {var,{675,27},'Acc'},
                        {cons,
                            {675,31},
                            {var,{675,31},'Enc'},
                            {nil,{675,34}}}}]}]}]},
     {clause,
         {676,1},
         [{nil,{676,13}},{var,{676,17},'Dict'},{var,{676,23},'Acc'}],
         [],
         [{debug_line,676,313},
          {tuple,{676,31},[{var,{676,32},'Acc'},{var,{676,36},'Dict'}]}]}]}.
{function,
 {678,1},
 encode_alloc_list,2,
 [{clause,
   {678,1},
   [{var,{678,1},'_'},{var,{678,1},'_'}],
   [[{call,
      {678,1},
      {remote,{678,1},{atom,{678,1},fake},{atom,{678,1},is_beam_bif_info}},
      []}]],
   [{debug_line,678,314},{atom,{678,1},ignore}]},
  {clause,
   {678,1},
   [{var,{678,19},'L0'},{var,{678,23},'Dict0'}],
   [],
   [{debug_line,679,315},
    {match,
     {679,5},
     {tuple,{679,5},[{var,{679,6},'Bin'},{var,{679,10},'Dict'}]},
     {call,
      {679,18},
      {atom,{679,18},encode_alloc_list_1},
      [{var,{679,38},'L0'},{var,{679,42},'Dict0'},{nil,{679,49}}]}},
    {debug_line,680,316},
    {tuple,
     {680,5},
     [{cons,
       {680,6},
       {call,
        {680,7},
        {atom,{680,7},encode},
        [{integer,{680,15},7},{integer,{680,22},3}]},
       {cons,
        {680,25},
        {call,
         {680,25},
         {atom,{680,25},encode},
         [{integer,{680,33},0},
          {block,0,
           [{call,
             {680,40},
             {remote,{680,40},{atom,{680,40},erlang},{atom,{680,40},length}},
             [{var,{680,47},'L0'}]}]}]},
        {cons,{680,52},{var,{680,52},'Bin'},{nil,{680,55}}}}},
      {var,{680,57},'Dict'}]}]}]}.
{function,
    {682,1},
    encode_alloc_list_1,3,
    [{clause,
         {682,1},
         [{var,{682,1},'_'},{var,{682,1},'_'},{var,{682,1},'_'}],
         [[{call,
               {682,1},
               {remote,
                   {682,1},
                   {atom,{682,1},fake},
                   {atom,{682,1},is_beam_bif_info}},
               []}]],
         [{debug_line,682,317},{atom,{682,1},ignore}]},
     {clause,
         {682,1},
         [{cons,
              {682,21},
              {tuple,{682,22},[{atom,{682,23},words},{var,{682,29},'Words'}]},
              {var,{682,36},'T'}},
          {var,{682,40},'Dict'},
          {var,{682,46},'Acc0'}],
         [],
         [{debug_line,683,318},
          {match,
              {683,5},
              {var,{683,5},'Acc'},
              {cons,
                  {683,11},
                  {var,{683,12},'Acc0'},
                  {cons,
                      {683,17},
                      {call,
                          {683,17},
                          {atom,{683,17},encode},
                          [{integer,{683,25},0},{integer,{683,32},0}]},
                      {cons,
                          {683,35},
                          {call,
                              {683,35},
                              {atom,{683,35},encode},
                              [{integer,{683,43},0},{var,{683,50},'Words'}]},
                          {nil,{683,56}}}}}},
          {debug_line,684,319},
          {call,
              {684,5},
              {atom,{684,5},encode_alloc_list_1},
              [{var,{684,25},'T'},
               {var,{684,28},'Dict'},
               {var,{684,34},'Acc'}]}]},
     {clause,
         {685,1},
         [{cons,
              {685,21},
              {tuple,
                  {685,22},
                  [{atom,{685,23},floats},{var,{685,30},'Floats'}]},
              {var,{685,38},'T'}},
          {var,{685,42},'Dict'},
          {var,{685,48},'Acc0'}],
         [],
         [{debug_line,686,320},
          {match,
              {686,5},
              {var,{686,5},'Acc'},
              {cons,
                  {686,11},
                  {var,{686,12},'Acc0'},
                  {cons,
                      {686,17},
                      {call,
                          {686,17},
                          {atom,{686,17},encode},
                          [{integer,{686,25},0},{integer,{686,32},1}]},
                      {cons,
                          {686,35},
                          {call,
                              {686,35},
                              {atom,{686,35},encode},
                              [{integer,{686,43},0},{var,{686,50},'Floats'}]},
                          {nil,{686,57}}}}}},
          {debug_line,687,321},
          {call,
              {687,5},
              {atom,{687,5},encode_alloc_list_1},
              [{var,{687,25},'T'},
               {var,{687,28},'Dict'},
               {var,{687,34},'Acc'}]}]},
     {clause,
         {688,1},
         [{cons,
              {688,21},
              {tuple,{688,22},[{atom,{688,23},funs},{var,{688,28},'Funs'}]},
              {var,{688,34},'T'}},
          {var,{688,38},'Dict'},
          {var,{688,44},'Acc0'}],
         [],
         [{debug_line,689,322},
          {match,
              {689,5},
              {var,{689,5},'Acc'},
              {cons,
                  {689,11},
                  {var,{689,12},'Acc0'},
                  {cons,
                      {689,17},
                      {call,
                          {689,17},
                          {atom,{689,17},encode},
                          [{integer,{689,25},0},{integer,{689,32},2}]},
                      {cons,
                          {689,35},
                          {call,
                              {689,35},
                              {atom,{689,35},encode},
                              [{integer,{689,43},0},{var,{689,50},'Funs'}]},
                          {nil,{689,55}}}}}},
          {debug_line,690,323},
          {call,
              {690,5},
              {atom,{690,5},encode_alloc_list_1},
              [{var,{690,25},'T'},
               {var,{690,28},'Dict'},
               {var,{690,34},'Acc'}]}]},
     {clause,
         {691,1},
         [{nil,{691,21}},{var,{691,25},'Dict'},{var,{691,31},'Acc'}],
         [],
         [{debug_line,692,324},
          {tuple,
              {692,5},
              [{call,
                   {692,6},
                   {remote,
                       {692,6},
                       {atom,{692,6},erlang},
                       {atom,{692,6},iolist_to_binary}},
                   [{var,{692,23},'Acc'}]},
               {var,{692,28},'Dict'}]}]}]}.
{attribute,{694,2},
           spec,
           {{encode,2},
            [{type,{694,13},
                   'fun',
                   [{type,{694,13},
                          product,
                          [{type,{694,14},non_neg_integer,[]},
                           {type,{694,33},integer,[]}]},
                    {type,{694,47},
                          union,
                          [{type,{694,47},iolist,[]},
                           {type,{694,58},integer,[]}]}]}]}}.
{function,
    {696,1},
    encode,2,
    [{clause,
         {696,1},
         [{var,{696,1},'_'},{var,{696,1},'_'}],
         [[{call,
               {696,1},
               {remote,
                   {696,1},
                   {atom,{696,1},fake},
                   {atom,{696,1},is_beam_bif_info}},
               []}]],
         [{debug_line,696,325},{atom,{696,1},ignore}]},
     {clause,
         {696,1},
         [{var,{696,8},'Tag'},{var,{696,13},'N'}],
         [[{call,
               {696,21},
               {remote,
                   {696,21},
                   {atom,{696,21},erlang},
                   {atom,{696,21},is_integer}},
               [{var,{696,32},'N'}]},
           {op,{696,38},'<',{var,{696,36},'N'},{integer,{696,40},0}}]],
         [{debug_line,697,326},
          {call,
              {697,5},
              {atom,{697,5},encode1},
              [{var,{697,13},'Tag'},
               {block,0,
                   [{call,
                        {697,18},
                        {atom,{697,18},negative_to_bytes},
                        [{var,{697,36},'N'}]}]}]}]},
     {clause,
         {698,1},
         [{var,{698,8},'Tag'},{var,{698,13},'N'}],
         [[{call,
               {698,21},
               {remote,
                   {698,21},
                   {atom,{698,21},erlang},
                   {atom,{698,21},is_integer}},
               [{var,{698,32},'N'}]},
           {op,{698,38},'<',{var,{698,36},'N'},{integer,{698,40},16}}]],
         [{debug_line,699,327},
          {op,{699,15},
              'bor',
              {op,{699,8},'bsl',{var,{699,6},'N'},{integer,{699,12},4}},
              {var,{699,19},'Tag'}}]},
     {clause,
         {700,1},
         [{var,{700,8},'Tag'},{var,{700,13},'N'}],
         [[{call,
               {700,21},
               {remote,
                   {700,21},
                   {atom,{700,21},erlang},
                   {atom,{700,21},is_integer}},
               [{var,{700,32},'N'}]},
           {op,{700,38},'<',{var,{700,36},'N'},{integer,{700,40},2048}}]],
         [{debug_line,701,328},
          {cons,
              {701,5},
              {op,{701,42},
                  'bor',
                  {op,{701,34},
                      'bor',
                      {op,{701,17},
                          'band',
                          {op,{701,10},
                              'bsr',
                              {var,{701,8},'N'},
                              {integer,{701,14},3}},
                          {integer,{701,22},224}},
                      {var,{701,38},'Tag'}},
                  {integer,{701,46},8}},
              {cons,
                  {701,58},
                  {op,{701,60},
                      'band',
                      {var,{701,58},'N'},
                      {integer,{701,65},255}},
                  {nil,{701,70}}}}]},
     {clause,
         {702,1},
         [{var,{702,8},'Tag'},{var,{702,13},'N'}],
         [[{call,
               {702,21},
               {remote,
                   {702,21},
                   {atom,{702,21},erlang},
                   {atom,{702,21},is_integer}},
               [{var,{702,32},'N'}]}]],
         [{debug_line,703,329},
          {call,
              {703,5},
              {atom,{703,5},encode1},
              [{var,{703,13},'Tag'},
               {block,0,
                   [{call,
                        {703,18},
                        {atom,{703,18},to_bytes},
                        [{var,{703,27},'N'}]}]}]}]}]}.
{function,
 {705,1},
 encode1,2,
 [{clause,
   {705,1},
   [{var,{705,1},'_'},{var,{705,1},'_'}],
   [[{call,
      {705,1},
      {remote,{705,1},{atom,{705,1},fake},{atom,{705,1},is_beam_bif_info}},
      []}]],
   [{debug_line,705,330},{atom,{705,1},ignore}]},
  {clause,
   {705,1},
   [{var,{705,9},'Tag'},{var,{705,14},'Bytes'}],
   [],
   [{debug_line,706,331},
    {'case',
     {706,5},
     {call,
      {706,10},
      {remote,{706,10},{atom,{706,10},erlang},{atom,{706,10},iolist_size}},
      [{var,{706,22},'Bytes'}]},
     [{clause,
       {707,2},
       [{var,{707,2},'Num'}],
       [[{op,{707,13},'=<',{integer,{707,11},2},{var,{707,16},'Num'}},
         {op,{707,25},'=<',{var,{707,21},'Num'},{integer,{707,28},8}}]],
       [{debug_line,708,332},
        {cons,
         {708,6},
         {op,
          {708,38},
          'bor',
          {op,
           {708,23},
           'bor',
           {op,
            {708,16},
            'bsl',
            {op,{708,12},'-',{var,{708,9},'Num'},{integer,{708,13},2}},
            {integer,{708,20},5}},
           {integer,{708,27},24}},
          {var,{708,42},'Tag'}},
         {var,{708,47},'Bytes'}}]},
      {clause,
       {709,2},
       [{var,{709,2},'Num'}],
       [[{op,{709,13},'<',{integer,{709,11},8},{var,{709,15},'Num'}}]],
       [{debug_line,710,333},
        {cons,
         {710,6},
         {op,{710,18},'bor',{integer,{710,7},248},{var,{710,22},'Tag'}},
         {cons,
          {710,27},
          {call,
           {710,27},
           {atom,{710,27},encode},
           [{integer,{710,35},0},
            {block,0,
             [{op,{710,45},'-',{var,{710,42},'Num'},{integer,{710,46},9}}]}]},
          {var,{710,50},'Bytes'}}}]}]}]}]}.
{function,
    {713,1},
    to_bytes,1,
    [{clause,
         {713,1},
         [{var,{713,1},'_'}],
         [[{call,
               {713,1},
               {remote,
                   {713,1},
                   {atom,{713,1},fake},
                   {atom,{713,1},is_beam_bif_info}},
               []}]],
         [{debug_line,713,334},{atom,{713,1},ignore}]},
     {clause,
         {713,1},
         [{var,{713,10},'N'}],
         [],
         [{debug_line,714,335},
          {match,
              {714,5},
              {var,{714,5},'Bin'},
              {call,
                  {714,11},
                  {remote,
                      {714,17},
                      {atom,{714,11},binary},
                      {atom,{714,18},encode_unsigned}},
                  [{var,{714,34},'N'}]}},
          {debug_line,715,336},
          {'case',
              {715,5},
              {var,{715,10},'Bin'},
              [{clause,
                   {716,2},
                   [{bin,
                        {716,2},
                        [{bin_element,
                             {716,4},
                             {integer,{716,4},0},
                             {integer,{716,6},1},
                             default},
                         {bin_element,
                             {716,8},
                             {var,{716,8},'_'},
                             default,
                             [bits]}]}],
                   [],
                   [{debug_line,716,337},{var,{716,20},'Bin'}]},
               {clause,
                   {717,2},
                   [{bin,
                        {717,2},
                        [{bin_element,
                             {717,4},
                             {integer,{717,4},1},
                             {integer,{717,6},1},
                             default},
                         {bin_element,
                             {717,8},
                             {var,{717,8},'_'},
                             default,
                             [bits]}]}],
                   [],
                   [{debug_line,717,338},
                    {cons,
                        {717,20},
                        {integer,{717,21},0},
                        {cons,
                            {717,23},
                            {var,{717,23},'Bin'},
                            {nil,{717,26}}}}]}]}]}]}.
{function,
    {720,1},
    negative_to_bytes,1,
    [{clause,
         {720,1},
         [{var,{720,1},'_'}],
         [[{call,
               {720,1},
               {remote,
                   {720,1},
                   {atom,{720,1},fake},
                   {atom,{720,1},is_beam_bif_info}},
               []}]],
         [{debug_line,720,339},{atom,{720,1},ignore}]},
     {clause,
         {720,1},
         [{var,{720,19},'N'}],
         [[{op,{720,29},
               '>=',
               {var,{720,27},'N'},
               {op,{720,32},'-',{integer,{720,33},32768}}}]],
         [{debug_line,721,340},
          {bin,
              {721,5},
              [{bin_element,
                   {721,7},
                   {var,{721,7},'N'},
                   {integer,{721,9},16},
                   default}]}]},
     {clause,
         {722,1},
         [{var,{722,19},'N'}],
         [],
         [{debug_line,723,341},
          {match,
              {723,5},
              {var,{723,5},'Bytes'},
              {call,
                  {723,13},
                  {remote,
                      {723,13},
                      {atom,{723,13},erlang},
                      {atom,{723,13},byte_size}},
                  [{block,0,
                       [{call,
                            {723,23},
                            {remote,
                                {723,29},
                                {atom,{723,23},binary},
                                {atom,{723,30},encode_unsigned}},
                            [{block,0,
                                 [{op,{723,46},
                                      '-',
                                      {var,{723,47},'N'}}]}]}]}]}},
          {debug_line,724,342},
          {match,
              {724,5},
              {var,{724,5},'Bin'},
              {bin,
                  {724,11},
                  [{bin_element,
                       {724,13},
                       {var,{724,13},'N'},
                       {var,{724,15},'Bytes'},
                       [{unit,8}]}]}},
          {debug_line,725,343},
          {'case',
              {725,5},
              {var,{725,10},'Bin'},
              [{clause,
                   {726,2},
                   [{bin,
                        {726,2},
                        [{bin_element,
                             {726,4},
                             {integer,{726,4},0},
                             {integer,{726,6},1},
                             default},
                         {bin_element,
                             {726,8},
                             {var,{726,8},'_'},
                             default,
                             [bits]}]}],
                   [],
                   [{debug_line,726,344},
                    {cons,
                        {726,20},
                        {integer,{726,21},255},
                        {cons,{726,27},{var,{726,27},'Bin'},{nil,{726,30}}}}]},
               {clause,
                   {727,2},
                   [{bin,
                        {727,2},
                        [{bin_element,
                             {727,4},
                             {integer,{727,4},1},
                             {integer,{727,6},1},
                             default},
                         {bin_element,
                             {727,8},
                             {var,{727,8},'_'},
                             default,
                             [bits]}]}],
                   [],
                   [{debug_line,727,345},{var,{727,20},'Bin'}]}]}]}]}.
{eof,{729,1}}.
