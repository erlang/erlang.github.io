{attribute,{1,1},file,{"beam_ssa.erl",1}}.
{attribute,{22,2},module,beam_ssa}.
{attribute,{24,2},
           export,
           [{add_anno,3},
            {get_anno,2},
            {get_anno,3},
            {between,4},
            {clobbers_xregs,1},
            {def,2},
            {def_unused,3},
            {definitions,2},
            {dominators,2},
            {dominators_from_predecessors,2},
            {common_dominators,3},
            {eval_instr,1},
            {flatmapfold_instrs,4},
            {fold_blocks,4},
            {fold_instrs,4},
            {insert_on_edges,3},
            {is_loop_header,1},
            {linearize,1},
            {mapfold_blocks,4},
            {mapfold_instrs,4},
            {merge_blocks,2},
            {normalize,1},
            {no_side_effect,1},
            {can_be_guard_bif,3},
            {predecessors,1},
            {rename_vars,3},
            {rpo,1},
            {rpo,2},
            {split_blocks_before,4},
            {split_blocks_after,4},
            {successors,1},
            {successors,2},
            {trim_unreachable,1},
            {used,1},
            {uses,2}]}.
{attribute,{50,2},
           export_type,
           [{b_module,0},
            {b_function,0},
            {b_blk,0},
            {b_set,0},
            {b_ret,0},
            {b_br,0},
            {b_switch,0},
            {terminator,0},
            {b_var,0},
            {b_literal,0},
            {b_remote,0},
            {b_local,0},
            {value,0},
            {argument,0},
            {label,0},
            {var_name,0},
            {literal_value,0},
            {op,0},
            {anno,0},
            {block_map,0},
            {dominator_map,0},
            {rename_map,0},
            {rename_proplist,0},
            {usage_map,0},
            {definition_map,0},
            {predecessor_map,0}]}.
{attribute,{1,1},file,{"beam_ssa.hrl",1}}.
{attribute,
    {21,2},
    record,
    {b_module,
        [{typed_record_field,
             {record_field,{21,20},{atom,{21,20},anno},{map,{21,25},[]}},
             {remote_type,
                 {21,32},
                 [{atom,{21,32},beam_ssa},{atom,{21,41},anno},[]]}},
         {typed_record_field,
             {record_field,{22,20},{atom,{22,20},name}},
             {type,{22,28},module,[]}},
         {typed_record_field,
             {record_field,{23,20},{atom,{23,20},exports}},
             {type,
                 {23,31},
                 list,
                 [{type,
                      {23,32},
                      tuple,
                      [{type,{23,33},atom,[]},{type,{23,40},arity,[]}]}]}},
         {typed_record_field,
             {record_field,{24,20},{atom,{24,20},attributes}},
             {type,{24,34},list,[]}},
         {typed_record_field,
             {record_field,{25,20},{atom,{25,20},body}},
             {type,
                 {25,28},
                 list,
                 [{remote_type,
                      {25,29},
                      [{atom,{25,29},beam_ssa},
                       {atom,{25,38},b_function},
                       []]}]}}]}}.
{attribute,
    {26,2},
    record,
    {b_function,
        [{typed_record_field,
             {record_field,{26,22},{atom,{26,22},anno},{map,{26,27},[]}},
             {remote_type,
                 {26,34},
                 [{atom,{26,34},beam_ssa},{atom,{26,43},anno},[]]}},
         {typed_record_field,
             {record_field,{27,22},{atom,{27,22},args}},
             {type,
                 {27,30},
                 list,
                 [{remote_type,
                      {27,31},
                      [{atom,{27,31},beam_ssa},{atom,{27,40},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{28,22},{atom,{28,22},bs}},
             {type,
                 {28,28},
                 map,
                 [{type,
                      {28,46},
                      map_field_exact,
                      [{remote_type,
                           {28,30},
                           [{atom,{28,30},beam_ssa},{atom,{28,39},label},[]]},
                       {remote_type,
                           {28,48},
                           [{atom,{28,48},beam_ssa},
                            {atom,{28,57},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{29,22},{atom,{29,22},cnt}},
             {remote_type,
                 {29,29},
                 [{atom,{29,29},beam_ssa},{atom,{29,38},label},[]]}}]}}.
{attribute,
    {31,2},
    record,
    {b_blk,
        [{typed_record_field,
             {record_field,{31,17},{atom,{31,17},anno},{map,{31,22},[]}},
             {remote_type,
                 {31,29},
                 [{atom,{31,29},beam_ssa},{atom,{31,38},anno},[]]}},
         {typed_record_field,
             {record_field,{32,17},{atom,{32,17},is}},
             {type,
                 {32,23},
                 list,
                 [{remote_type,
                      {32,24},
                      [{atom,{32,24},beam_ssa},{atom,{32,33},b_set},[]]}]}},
         {typed_record_field,
             {record_field,{33,17},{atom,{33,17},last}},
             {remote_type,
                 {33,25},
                 [{atom,{33,25},beam_ssa},{atom,{33,34},terminator},[]]}}]}}.
{attribute,
    {34,2},
    record,
    {b_set,
        [{typed_record_field,
             {record_field,{34,17},{atom,{34,17},anno},{map,{34,22},[]}},
             {remote_type,
                 {34,29},
                 [{atom,{34,29},beam_ssa},{atom,{34,38},anno},[]]}},
         {typed_record_field,
             {record_field,{35,17},{atom,{35,17},dst},{atom,{35,21},none}},
             {type,
                 {35,29},
                 union,
                 [{atom,{35,29},none},
                  {remote_type,
                      {35,36},
                      [{atom,{35,36},beam_ssa},{atom,{35,45},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{36,17},{atom,{36,17},op}},
             {remote_type,
                 {36,23},
                 [{atom,{36,23},beam_ssa},{atom,{36,32},op},[]]}},
         {typed_record_field,
             {record_field,{37,17},{atom,{37,17},args},{nil,{37,22}}},
             {type,
                 {37,28},
                 list,
                 [{remote_type,
                      {37,29},
                      [{atom,{37,29},beam_ssa},
                       {atom,{37,38},argument},
                       []]}]}}]}}.
{attribute,
    {40,2},
    record,
    {b_ret,
        [{typed_record_field,
             {record_field,{40,17},{atom,{40,17},anno},{map,{40,22},[]}},
             {remote_type,
                 {40,29},
                 [{atom,{40,29},beam_ssa},{atom,{40,38},anno},[]]}},
         {typed_record_field,
             {record_field,{41,17},{atom,{41,17},arg}},
             {remote_type,
                 {41,24},
                 [{atom,{41,24},beam_ssa},{atom,{41,33},value},[]]}}]}}.
{attribute,
    {43,2},
    record,
    {b_br,
        [{record_field,{43,16},{atom,{43,16},anno},{map,{43,21},[]}},
         {typed_record_field,
             {record_field,{44,16},{atom,{44,16},bool}},
             {remote_type,
                 {44,24},
                 [{atom,{44,24},beam_ssa},{atom,{44,33},value},[]]}},
         {typed_record_field,
             {record_field,{45,16},{atom,{45,16},succ}},
             {remote_type,
                 {45,24},
                 [{atom,{45,24},beam_ssa},{atom,{45,33},label},[]]}},
         {typed_record_field,
             {record_field,{46,16},{atom,{46,16},fail}},
             {remote_type,
                 {46,24},
                 [{atom,{46,24},beam_ssa},{atom,{46,33},label},[]]}}]}}.
{attribute,
    {48,2},
    record,
    {b_switch,
        [{typed_record_field,
             {record_field,{48,20},{atom,{48,20},anno},{map,{48,25},[]}},
             {remote_type,
                 {48,32},
                 [{atom,{48,32},beam_ssa},{atom,{48,41},anno},[]]}},
         {typed_record_field,
             {record_field,{49,20},{atom,{49,20},arg}},
             {remote_type,
                 {49,27},
                 [{atom,{49,27},beam_ssa},{atom,{49,36},value},[]]}},
         {typed_record_field,
             {record_field,{50,20},{atom,{50,20},fail}},
             {remote_type,
                 {50,28},
                 [{atom,{50,28},beam_ssa},{atom,{50,37},label},[]]}},
         {typed_record_field,
             {record_field,{51,20},{atom,{51,20},list}},
             {type,
                 {51,28},
                 list,
                 [{type,
                      {51,29},
                      tuple,
                      [{remote_type,
                           {51,30},
                           [{atom,{51,30},beam_ssa},
                            {atom,{51,39},b_literal},
                            []]},
                       {remote_type,
                           {51,51},
                           [{atom,{51,51},beam_ssa},
                            {atom,{51,60},label},
                            []]}]}]}}]}}.
{attribute,
    {54,2},
    record,
    {b_var,
        [{typed_record_field,
             {record_field,{54,17},{atom,{54,17},name}},
             {remote_type,
                 {54,25},
                 [{atom,{54,25},beam_ssa},{atom,{54,34},var_name},[]]}}]}}.
{attribute,
    {56,2},
    record,
    {b_literal,
        [{typed_record_field,
             {record_field,{56,21},{atom,{56,21},val}},
             {remote_type,
                 {56,28},
                 [{atom,{56,28},beam_ssa},
                  {atom,{56,37},literal_value},
                  []]}}]}}.
{attribute,
    {58,2},
    record,
    {b_remote,
        [{typed_record_field,
             {record_field,{58,20},{atom,{58,20},mod}},
             {remote_type,
                 {58,29},
                 [{atom,{58,29},beam_ssa},{atom,{58,38},value},[]]}},
         {typed_record_field,
             {record_field,{59,20},{atom,{59,20},name}},
             {remote_type,
                 {59,29},
                 [{atom,{59,29},beam_ssa},{atom,{59,38},value},[]]}},
         {typed_record_field,
             {record_field,{60,20},{atom,{60,20},arity}},
             {type,{60,29},non_neg_integer,[]}}]}}.
{attribute,
    {62,2},
    record,
    {b_local,
        [{typed_record_field,
             {record_field,{62,19},{atom,{62,19},name}},
             {remote_type,
                 {62,28},
                 [{atom,{62,28},beam_ssa},{atom,{62,37},b_literal},[]]}},
         {typed_record_field,
             {record_field,{63,19},{atom,{63,19},arity}},
             {type,{63,28},non_neg_integer,[]}}]}}.
{attribute,{60,1},file,{"beam_ssa.erl",60}}.
{attribute,{61,2},
           type,
           {b_module,{type,{61,23},record,[{atom,{61,24},b_module}]},[]}}.
{attribute,{62,2},
           type,
           {b_function,{type,{62,23},record,[{atom,{62,24},b_function}]},[]}}.
{attribute,{63,2},
           type,
           {b_blk,{type,{63,23},record,[{atom,{63,24},b_blk}]},[]}}.
{attribute,{64,2},
           type,
           {b_set,{type,{64,23},record,[{atom,{64,24},b_set}]},[]}}.
{attribute,{66,2},type,{b_br,{type,{66,23},record,[{atom,{66,24},b_br}]},[]}}.
{attribute,{67,2},
           type,
           {b_ret,{type,{67,23},record,[{atom,{67,24},b_ret}]},[]}}.
{attribute,{68,2},
           type,
           {b_switch,{type,{68,23},record,[{atom,{68,24},b_switch}]},[]}}.
{attribute,{69,2},
           type,
           {terminator,{type,{69,23},
                             union,
                             [{user_type,{69,23},b_br,[]},
                              {user_type,{69,32},b_ret,[]},
                              {user_type,{69,42},b_switch,[]}]},
                       []}}.
{attribute,{71,2},
           type,
           {construct,{type,{71,23},
                            union,
                            [{user_type,{71,23},b_module,[]},
                             {user_type,{71,36},b_function,[]},
                             {user_type,{71,51},b_blk,[]},
                             {user_type,{71,61},b_set,[]},
                             {user_type,{72,23},terminator,[]}]},
                      []}}.
{attribute,{74,2},
           type,
           {b_var,{type,{74,23},record,[{atom,{74,24},b_var}]},[]}}.
{attribute,{75,2},
           type,
           {b_literal,{type,{75,23},record,[{atom,{75,24},b_literal}]},[]}}.
{attribute,{76,2},
           type,
           {b_remote,{type,{76,23},record,[{atom,{76,24},b_remote}]},[]}}.
{attribute,{77,2},
           type,
           {b_local,{type,{77,23},record,[{atom,{77,24},b_local}]},[]}}.
{attribute,{79,2},
           type,
           {value,{type,{79,23},
                        union,
                        [{user_type,{79,23},b_var,[]},
                         {user_type,{79,33},b_literal,[]}]},
                  []}}.
{attribute,{80,2},
           type,
           {phi_value,{type,{80,23},
                            tuple,
                            [{user_type,{80,24},value,[]},
                             {user_type,{80,32},label,[]}]},
                      []}}.
{attribute,{81,2},
           type,
           {argument,{type,{81,23},
                           union,
                           [{user_type,{81,23},value,[]},
                            {user_type,{81,33},b_remote,[]},
                            {user_type,{81,46},b_local,[]},
                            {user_type,{81,58},phi_value,[]}]},
                     []}}.
{attribute,{82,2},type,{label,{type,{82,23},non_neg_integer,[]},[]}}.
{attribute,{84,2},
           type,
           {var_name,{type,{84,23},
                           union,
                           [{type,{84,23},atom,[]},
                            {type,{84,32},non_neg_integer,[]}]},
                     []}}.
{attribute,{86,2},
           type,
           {literal_value,{type,{86,26},
                                union,
                                [{type,{86,26},atom,[]},
                                 {type,{86,35},integer,[]},
                                 {type,{86,47},float,[]},
                                 {type,{86,57},list,[]},
                                 {type,{87,26},nil,[]},
                                 {type,{87,34},tuple,any},
                                 {type,{87,44},map,any},
                                 {type,{87,52},binary,[]},
                                 {type,{87,63},'fun',[]}]},
                          []}}.
{attribute,{89,2},
           type,
           {op,{type,{89,17},
                     union,
                     [{type,{89,17},
                            tuple,
                            [{atom,{89,18},bif},{type,{89,24},atom,[]}]},
                      {type,{90,17},
                            tuple,
                            [{atom,{90,18},float},
                             {user_type,{90,26},float_op,[]}]},
                      {type,{91,17},
                            tuple,
                            [{atom,{91,18},succeeded},
                             {type,{91,31},
                                   union,
                                   [{atom,{91,31},guard},
                                    {atom,{91,41},body}]}]},
                      {user_type,{92,17},prim_op,[]},
                      {user_type,{93,17},cg_prim_op,[]}]},
               []}}.
{attribute,{95,2},
           type,
           {anno,{type,{95,17},
                       map,
                       [{type,{95,26},
                              map_field_exact,
                              [{type,{95,19},atom,[]},
                               {type,{95,29},any,[]}]}]},
                 []}}.
{attribute,{97,2},
           type,
           {block_map,{type,{97,22},
                            map,
                            [{type,{97,31},
                                   map_field_exact,
                                   [{user_type,{97,24},label,[]},
                                    {user_type,{97,33},b_blk,[]}]}]},
                      []}}.
{attribute,
    {98,2},
    type,
    {dominator_map,
        {type,
            {98,26},
            map,
            [{type,
                 {98,35},
                 map_field_exact,
                 [{user_type,{98,28},label,[]},
                  {type,{98,37},list,[{user_type,{98,38},label,[]}]}]}]},
        []}}.
{attribute,
    {99,2},
    type,
    {numbering_map,
        {type,
            {99,26},
            map,
            [{type,
                 {99,35},
                 map_field_exact,
                 [{user_type,{99,28},label,[]},
                  {type,{99,37},non_neg_integer,[]}]}]},
        []}}.
{attribute,
    {100,2},
    type,
    {usage_map,
        {type,
            {100,22},
            map,
            [{type,
                 {100,31},
                 map_field_exact,
                 [{user_type,{100,24},b_var,[]},
                  {type,
                      {100,33},
                      list,
                      [{type,
                           {100,34},
                           tuple,
                           [{user_type,{100,35},label,[]},
                            {type,
                                {100,43},
                                union,
                                [{user_type,{100,43},b_set,[]},
                                 {user_type,{100,53},terminator,[]}]}]}]}]}]},
        []}}.
{attribute,
    {101,2},
    type,
    {definition_map,
        {type,
            {101,27},
            map,
            [{type,
                 {101,36},
                 map_field_exact,
                 [{user_type,{101,29},b_var,[]},
                  {user_type,{101,38},b_set,[]}]}]},
        []}}.
{attribute,
    {102,2},
    type,
    {predecessor_map,
        {type,
            {102,28},
            map,
            [{type,
                 {102,37},
                 map_field_exact,
                 [{user_type,{102,30},label,[]},
                  {type,{102,39},list,[{user_type,{102,40},label,[]}]}]}]},
        []}}.
{attribute,{103,2},
           type,
           {rename_map,{type,{103,23},
                             map,
                             [{type,{103,32},
                                    map_field_exact,
                                    [{user_type,{103,25},b_var,[]},
                                     {user_type,{103,34},value,[]}]}]},
                       []}}.
{attribute,
    {104,2},
    type,
    {rename_proplist,
        {type,
            {104,28},
            list,
            [{type,
                 {104,29},
                 tuple,
                 [{user_type,{104,30},b_var,[]},
                  {user_type,{104,38},value,[]}]}]},
        []}}.
{attribute,{110,2},
           type,
           {prim_op,{type,{110,20},
                          union,
                          [{atom,{110,20},bs_create_bin},
                           {atom,{111,20},bs_extract},
                           {atom,{111,35},bs_ensure},
                           {atom,{111,49},bs_get_tail},
                           {atom,{111,65},bs_init_writable},
                           {atom,{112,20},bs_match},
                           {atom,{112,33},bs_start_match},
                           {atom,{112,52},bs_test_tail},
                           {atom,{113,20},build_stacktrace},
                           {atom,{114,20},call},
                           {atom,{114,29},catch_end},
                           {atom,{115,20},executable_line},
                           {atom,{115,40},extract},
                           {atom,{116,20},get_hd},
                           {atom,{116,31},get_map_element},
                           {atom,{116,51},get_tl},
                           {atom,{116,62},get_tuple_element},
                           {atom,{117,20},has_map_field},
                           {atom,{118,20},is_nonempty_list},
                           {atom,{118,41},is_tagged_tuple},
                           {atom,{119,20},kill_try_tag},
                           {atom,{120,20},landingpad},
                           {atom,{121,20},make_fun},
                           {atom,{121,33},match_fail},
                           {atom,{121,48},new_try_tag},
                           {atom,{122,20},nif_start},
                           {atom,{123,20},peek_message},
                           {atom,{123,37},phi},
                           {atom,{123,45},put_list},
                           {atom,{123,58},put_map},
                           {atom,{123,70},put_tuple},
                           {atom,{124,20},raw_raise},
                           {atom,{125,20},recv_marker_bind},
                           {atom,{126,20},recv_marker_clear},
                           {atom,{127,20},recv_marker_reserve},
                           {atom,{128,20},recv_next},
                           {atom,{128,34},remove_message},
                           {atom,{128,53},resume},
                           {atom,{129,20},update_tuple},
                           {atom,{129,37},update_record},
                           {atom,{130,20},wait_timeout}]},
                    []}}.
{attribute,{132,2},
           type,
           {float_op,{type,{132,21},
                           union,
                           [{atom,{132,21},checkerror},
                            {atom,{132,36},clearerror},
                            {atom,{132,51},convert},
                            {atom,{132,63},get},
                            {atom,{132,71},put},
                            {atom,{133,21},'+'},
                            {atom,{133,27},'-'},
                            {atom,{133,33},'*'},
                            {atom,{133,39},'/'}]},
                     []}}.
{attribute,{136,2},
           type,
           {cg_prim_op,{type,{136,23},
                             union,
                             [{atom,{136,23},bs_checked_get},
                              {atom,{136,42},bs_checked_skip},
                              {atom,{137,23},bs_get},
                              {atom,{137,34},bs_get_position},
                              {atom,{137,54},bs_match_string},
                              {atom,{138,23},bs_restore},
                              {atom,{138,38},bs_save},
                              {atom,{138,50},bs_set_position},
                              {atom,{138,70},bs_skip},
                              {atom,{139,23},copy},
                              {atom,{139,32},match_fail},
                              {atom,{139,47},put_tuple_arity},
                              {atom,{140,23},set_tuple_element},
                              {atom,{140,45},succeeded},
                              {atom,{141,23},update_record}]},
                       []}}.
{attribute,{143,2},
           import,
           {lists,[{foldl,3},
                   {mapfoldl,3},
                   {member,2},
                   {reverse,1},
                   {reverse,2},
                   {sort,1}]}}.
{attribute,{145,2},
           spec,
           {{add_anno,3},
            [{type,{145,15},
                   bounded_fun,
                   [{type,{145,15},
                          'fun',
                          [{type,{145,15},
                                 product,
                                 [{var,{145,16},'Key'},
                                  {var,{145,21},'Value'},
                                  {var,{145,28},'Construct0'}]},
                           {var,{145,43},'Construct'}]},
                    [{type,{146,7},
                           constraint,
                           [{atom,{146,7},is_subtype},
                            [{var,{146,7},'Key'},{type,{146,14},atom,[]}]]},
                     {type,{147,7},
                           constraint,
                           [{atom,{147,7},is_subtype},
                            [{var,{147,7},'Value'},{type,{147,16},any,[]}]]},
                     {type,{148,7},
                           constraint,
                           [{atom,{148,7},is_subtype},
                            [{var,{148,7},'Construct0'},
                             {user_type,{148,21},construct,[]}]]},
                     {type,{149,7},
                           constraint,
                           [{atom,{149,7},is_subtype},
                            [{var,{149,7},'Construct'},
                             {user_type,{149,20},construct,[]}]]}]]}]}}.
{function,
    {151,1},
    add_anno,3,
    [{clause,
         {151,1},
         [{var,{151,1},'_'},{var,{151,1},'_'},{var,{151,1},'_'}],
         [[{call,
               {151,1},
               {remote,
                   {151,1},
                   {atom,{151,1},fake},
                   {atom,{151,1},is_beam_bif_info}},
               []}]],
         [{debug_line,151,1},{atom,{151,1},ignore}]},
     {clause,
         {151,1},
         [{var,{151,10},'Key'},
          {var,{151,15},'Val'},
          {match,
              {151,20},
              {tuple,
                  {151,20},
                  [{atom,{151,20},b_function},
                   {var,{151,37},'Anno'},
                   {var,{151,20},'_'},
                   {var,{151,20},'_'},
                   {var,{151,20},'_'}]},
              {var,{151,43},'Bl'}}],
         [],
         [{debug_line,152,2},
          {block,
              {152,5},
              [{match,
                   {152,19},
                   {var,{152,19},rec0},
                   {map,
                       {152,28},
                       {var,{152,24},'Anno'},
                       [{map_field_assoc,
                            {152,33},
                            {var,{152,30},'Key'},
                            {var,{152,35},'Val'}}]}},
               {match,{152,5},{var,{152,5},rec1},{var,{152,5},'Bl'}},
               {'case',
                   {152,19},
                   {var,{152,5},rec1},
                   [{clause,
                        {152,19},
                        [{tuple,
                             {152,19},
                             [{atom,{152,19},b_function},
                              {var,{152,19},'_'},
                              {var,{152,19},'_'},
                              {var,{152,19},'_'},
                              {var,{152,19},'_'}]}],
                        [],
                        [{call,
                             {152,19},
                             {remote,
                                 {152,19},
                                 {atom,{152,19},erlang},
                                 {atom,{152,19},setelement}},
                             [{integer,{152,19},2},
                              {var,{152,5},rec1},
                              {var,{152,19},rec0}]}]},
                    {clause,
                        [{generated,true},{location,{152,19}}],
                        [{var,[{generated,true},{location,{152,19}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{152,19}}],
                             {remote,
                                 [{generated,true},{location,{152,19}}],
                                 {atom,
                                     [{generated,true},{location,{152,19}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{152,19}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{152,19}}],
                                  [{atom,
                                       [{generated,true},{location,{152,19}}],
                                       badrecord},
                                   {var,{152,5},rec1}]}]}]}]}]}]},
     {clause,
         {153,1},
         [{var,{153,10},'Key'},
          {var,{153,15},'Val'},
          {match,
              {153,20},
              {tuple,
                  {153,20},
                  [{atom,{153,20},b_blk},
                   {var,{153,32},'Anno'},
                   {var,{153,20},'_'},
                   {var,{153,20},'_'}]},
              {var,{153,38},'Bl'}}],
         [],
         [{debug_line,154,3},
          {block,
              {154,5},
              [{match,
                   {154,14},
                   {var,{154,14},rec2},
                   {map,
                       {154,23},
                       {var,{154,19},'Anno'},
                       [{map_field_assoc,
                            {154,28},
                            {var,{154,25},'Key'},
                            {var,{154,30},'Val'}}]}},
               {match,{154,5},{var,{154,5},rec3},{var,{154,5},'Bl'}},
               {'case',
                   {154,14},
                   {var,{154,5},rec3},
                   [{clause,
                        {154,14},
                        [{tuple,
                             {154,14},
                             [{atom,{154,14},b_blk},
                              {var,{154,14},'_'},
                              {var,{154,14},'_'},
                              {var,{154,14},'_'}]}],
                        [],
                        [{call,
                             {154,14},
                             {remote,
                                 {154,14},
                                 {atom,{154,14},erlang},
                                 {atom,{154,14},setelement}},
                             [{integer,{154,14},2},
                              {var,{154,5},rec3},
                              {var,{154,14},rec2}]}]},
                    {clause,
                        [{generated,true},{location,{154,14}}],
                        [{var,[{generated,true},{location,{154,14}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{154,14}}],
                             {remote,
                                 [{generated,true},{location,{154,14}}],
                                 {atom,
                                     [{generated,true},{location,{154,14}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{154,14}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{154,14}}],
                                  [{atom,
                                       [{generated,true},{location,{154,14}}],
                                       badrecord},
                                   {var,{154,5},rec3}]}]}]}]}]}]},
     {clause,
         {155,1},
         [{var,{155,10},'Key'},
          {var,{155,15},'Val'},
          {match,
              {155,20},
              {tuple,
                  {155,20},
                  [{atom,{155,20},b_set},
                   {var,{155,32},'Anno'},
                   {var,{155,20},'_'},
                   {var,{155,20},'_'},
                   {var,{155,20},'_'}]},
              {var,{155,38},'Bl'}}],
         [],
         [{debug_line,156,4},
          {block,
              {156,5},
              [{match,
                   {156,14},
                   {var,{156,14},rec4},
                   {map,
                       {156,23},
                       {var,{156,19},'Anno'},
                       [{map_field_assoc,
                            {156,28},
                            {var,{156,25},'Key'},
                            {var,{156,30},'Val'}}]}},
               {match,{156,5},{var,{156,5},rec5},{var,{156,5},'Bl'}},
               {'case',
                   {156,14},
                   {var,{156,5},rec5},
                   [{clause,
                        {156,14},
                        [{tuple,
                             {156,14},
                             [{atom,{156,14},b_set},
                              {var,{156,14},'_'},
                              {var,{156,14},'_'},
                              {var,{156,14},'_'},
                              {var,{156,14},'_'}]}],
                        [],
                        [{call,
                             {156,14},
                             {remote,
                                 {156,14},
                                 {atom,{156,14},erlang},
                                 {atom,{156,14},setelement}},
                             [{integer,{156,14},2},
                              {var,{156,5},rec5},
                              {var,{156,14},rec4}]}]},
                    {clause,
                        [{generated,true},{location,{156,14}}],
                        [{var,[{generated,true},{location,{156,14}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{156,14}}],
                             {remote,
                                 [{generated,true},{location,{156,14}}],
                                 {atom,
                                     [{generated,true},{location,{156,14}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{156,14}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{156,14}}],
                                  [{atom,
                                       [{generated,true},{location,{156,14}}],
                                       badrecord},
                                   {var,{156,5},rec5}]}]}]}]}]}]},
     {clause,
         {157,1},
         [{var,{157,10},'Key'},
          {var,{157,15},'Val'},
          {match,
              {157,20},
              {tuple,
                  {157,20},
                  [{atom,{157,20},b_br},
                   {var,{157,31},'Anno'},
                   {var,{157,20},'_'},
                   {var,{157,20},'_'},
                   {var,{157,20},'_'}]},
              {var,{157,37},'Bl'}}],
         [],
         [{debug_line,158,5},
          {block,
              {158,5},
              [{match,
                   {158,13},
                   {var,{158,13},rec6},
                   {map,
                       {158,22},
                       {var,{158,18},'Anno'},
                       [{map_field_assoc,
                            {158,27},
                            {var,{158,24},'Key'},
                            {var,{158,29},'Val'}}]}},
               {match,{158,5},{var,{158,5},rec7},{var,{158,5},'Bl'}},
               {'case',
                   {158,13},
                   {var,{158,5},rec7},
                   [{clause,
                        {158,13},
                        [{tuple,
                             {158,13},
                             [{atom,{158,13},b_br},
                              {var,{158,13},'_'},
                              {var,{158,13},'_'},
                              {var,{158,13},'_'},
                              {var,{158,13},'_'}]}],
                        [],
                        [{call,
                             {158,13},
                             {remote,
                                 {158,13},
                                 {atom,{158,13},erlang},
                                 {atom,{158,13},setelement}},
                             [{integer,{158,13},2},
                              {var,{158,5},rec7},
                              {var,{158,13},rec6}]}]},
                    {clause,
                        [{generated,true},{location,{158,13}}],
                        [{var,[{generated,true},{location,{158,13}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{158,13}}],
                             {remote,
                                 [{generated,true},{location,{158,13}}],
                                 {atom,
                                     [{generated,true},{location,{158,13}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{158,13}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{158,13}}],
                                  [{atom,
                                       [{generated,true},{location,{158,13}}],
                                       badrecord},
                                   {var,{158,5},rec7}]}]}]}]}]}]},
     {clause,
         {159,1},
         [{var,{159,10},'Key'},
          {var,{159,15},'Val'},
          {match,
              {159,20},
              {tuple,
                  {159,20},
                  [{atom,{159,20},b_ret},
                   {var,{159,32},'Anno'},
                   {var,{159,20},'_'}]},
              {var,{159,38},'Bl'}}],
         [],
         [{debug_line,160,6},
          {block,
              {160,5},
              [{match,
                   {160,14},
                   {var,{160,14},rec8},
                   {map,
                       {160,23},
                       {var,{160,19},'Anno'},
                       [{map_field_assoc,
                            {160,28},
                            {var,{160,25},'Key'},
                            {var,{160,30},'Val'}}]}},
               {match,{160,5},{var,{160,5},rec9},{var,{160,5},'Bl'}},
               {'case',
                   {160,14},
                   {var,{160,5},rec9},
                   [{clause,
                        {160,14},
                        [{tuple,
                             {160,14},
                             [{atom,{160,14},b_ret},
                              {var,{160,14},'_'},
                              {var,{160,14},'_'}]}],
                        [],
                        [{call,
                             {160,14},
                             {remote,
                                 {160,14},
                                 {atom,{160,14},erlang},
                                 {atom,{160,14},setelement}},
                             [{integer,{160,14},2},
                              {var,{160,5},rec9},
                              {var,{160,14},rec8}]}]},
                    {clause,
                        [{generated,true},{location,{160,14}}],
                        [{var,[{generated,true},{location,{160,14}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{160,14}}],
                             {remote,
                                 [{generated,true},{location,{160,14}}],
                                 {atom,
                                     [{generated,true},{location,{160,14}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{160,14}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{160,14}}],
                                  [{atom,
                                       [{generated,true},{location,{160,14}}],
                                       badrecord},
                                   {var,{160,5},rec9}]}]}]}]}]}]},
     {clause,
         {161,1},
         [{var,{161,10},'Key'},
          {var,{161,15},'Val'},
          {match,
              {161,20},
              {tuple,
                  {161,20},
                  [{atom,{161,20},b_switch},
                   {var,{161,35},'Anno'},
                   {var,{161,20},'_'},
                   {var,{161,20},'_'},
                   {var,{161,20},'_'}]},
              {var,{161,41},'Bl'}}],
         [],
         [{debug_line,162,7},
          {block,
              {162,5},
              [{match,
                   {162,17},
                   {var,{162,17},rec10},
                   {map,
                       {162,26},
                       {var,{162,22},'Anno'},
                       [{map_field_assoc,
                            {162,31},
                            {var,{162,28},'Key'},
                            {var,{162,33},'Val'}}]}},
               {match,{162,5},{var,{162,5},rec11},{var,{162,5},'Bl'}},
               {'case',
                   {162,17},
                   {var,{162,5},rec11},
                   [{clause,
                        {162,17},
                        [{tuple,
                             {162,17},
                             [{atom,{162,17},b_switch},
                              {var,{162,17},'_'},
                              {var,{162,17},'_'},
                              {var,{162,17},'_'},
                              {var,{162,17},'_'}]}],
                        [],
                        [{call,
                             {162,17},
                             {remote,
                                 {162,17},
                                 {atom,{162,17},erlang},
                                 {atom,{162,17},setelement}},
                             [{integer,{162,17},2},
                              {var,{162,5},rec11},
                              {var,{162,17},rec10}]}]},
                    {clause,
                        [{generated,true},{location,{162,17}}],
                        [{var,[{generated,true},{location,{162,17}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{162,17}}],
                             {remote,
                                 [{generated,true},{location,{162,17}}],
                                 {atom,
                                     [{generated,true},{location,{162,17}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{162,17}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{162,17}}],
                                  [{atom,
                                       [{generated,true},{location,{162,17}}],
                                       badrecord},
                                   {var,{162,5},rec11}]}]}]}]}]}]}]}.
{attribute,{164,2},
           spec,
           {{get_anno,2},
            [{type,{164,15},
                   'fun',
                   [{type,{164,15},
                          product,
                          [{type,{164,16},atom,[]},
                           {user_type,{164,24},construct,[]}]},
                    {type,{164,40},any,[]}]}]}}.
{function,
    {166,1},
    get_anno,2,
    [{clause,
         {166,1},
         [{var,{166,1},'_'},{var,{166,1},'_'}],
         [[{call,
               {166,1},
               {remote,
                   {166,1},
                   {atom,{166,1},fake},
                   {atom,{166,1},is_beam_bif_info}},
               []}]],
         [{debug_line,166,8},{atom,{166,1},ignore}]},
     {clause,
         {166,1},
         [{var,{166,10},'Key'},{var,{166,15},'Construct'}],
         [],
         [{debug_line,167,9},
          {call,
              {167,5},
              {remote,{167,5},{atom,{167,5},erlang},{atom,{167,5},map_get}},
              [{var,{167,13},'Key'},
               {block,0,
                   [{call,
                        {167,18},
                        {atom,{167,18},get_anno},
                        [{var,{167,27},'Construct'}]}]}]}]}]}.
{attribute,{169,2},
           spec,
           {{get_anno,3},
            [{type,{169,15},
                   'fun',
                   [{type,{169,15},
                          product,
                          [{type,{169,16},atom,[]},
                           {user_type,{169,24},construct,[]},
                           {type,{169,37},any,[]}]},
                    {type,{169,47},any,[]}]}]}}.
{function,
    {171,1},
    get_anno,3,
    [{clause,
         {171,1},
         [{var,{171,1},'_'},{var,{171,1},'_'},{var,{171,1},'_'}],
         [[{call,
               {171,1},
               {remote,
                   {171,1},
                   {atom,{171,1},fake},
                   {atom,{171,1},is_beam_bif_info}},
               []}]],
         [{debug_line,171,10},{atom,{171,1},ignore}]},
     {clause,
         {171,1},
         [{var,{171,10},'Key'},
          {var,{171,15},'Construct'},
          {var,{171,26},'Default'}],
         [],
         [{debug_line,172,11},
          {call,
              {172,5},
              {remote,{172,9},{atom,{172,5},maps},{atom,{172,10},get}},
              [{var,{172,14},'Key'},
               {block,0,
                   [{call,
                        {172,19},
                        {atom,{172,19},get_anno},
                        [{var,{172,28},'Construct'}]}]},
               {var,{172,40},'Default'}]}]}]}.
{function,{174,1},
          get_anno,1,
          [{clause,{174,1},
                   [{var,{174,1},'_'}],
                   [[{call,{174,1},
                           {remote,{174,1},
                                   {atom,{174,1},fake},
                                   {atom,{174,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,174,12},{atom,{174,1},ignore}]},
           {clause,{174,1},
                   [{tuple,{174,10},
                           [{atom,{174,10},b_function},
                            {var,{174,27},'Anno'},
                            {var,{174,10},'_'},
                            {var,{174,10},'_'},
                            {var,{174,10},'_'}]}],
                   [],
                   [{debug_line,174,13},{var,{174,37},'Anno'}]},
           {clause,{175,1},
                   [{tuple,{175,10},
                           [{atom,{175,10},b_blk},
                            {var,{175,22},'Anno'},
                            {var,{175,10},'_'},
                            {var,{175,10},'_'}]}],
                   [],
                   [{debug_line,175,14},{var,{175,32},'Anno'}]},
           {clause,{176,1},
                   [{tuple,{176,10},
                           [{atom,{176,10},b_set},
                            {var,{176,22},'Anno'},
                            {var,{176,10},'_'},
                            {var,{176,10},'_'},
                            {var,{176,10},'_'}]}],
                   [],
                   [{debug_line,176,15},{var,{176,32},'Anno'}]},
           {clause,{177,1},
                   [{tuple,{177,10},
                           [{atom,{177,10},b_br},
                            {var,{177,21},'Anno'},
                            {var,{177,10},'_'},
                            {var,{177,10},'_'},
                            {var,{177,10},'_'}]}],
                   [],
                   [{debug_line,177,16},{var,{177,31},'Anno'}]},
           {clause,{178,1},
                   [{tuple,{178,10},
                           [{atom,{178,10},b_ret},
                            {var,{178,22},'Anno'},
                            {var,{178,10},'_'}]}],
                   [],
                   [{debug_line,178,17},{var,{178,32},'Anno'}]},
           {clause,{179,1},
                   [{tuple,{179,10},
                           [{atom,{179,10},b_switch},
                            {var,{179,25},'Anno'},
                            {var,{179,10},'_'},
                            {var,{179,10},'_'},
                            {var,{179,10},'_'}]}],
                   [],
                   [{debug_line,179,18},{var,{179,35},'Anno'}]}]}.
{attribute,{184,2},
           spec,
           {{clobbers_xregs,1},
            [{type,{184,21},
                   'fun',
                   [{type,{184,21},product,[{user_type,{184,22},b_set,[]}]},
                    {type,{184,34},boolean,[]}]}]}}.
{function,{186,1},
          clobbers_xregs,1,
          [{clause,{186,1},
                   [{var,{186,1},'_'}],
                   [[{call,{186,1},
                           {remote,{186,1},
                                   {atom,{186,1},fake},
                                   {atom,{186,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,186,19},{atom,{186,1},ignore}]},
           {clause,{186,1},
                   [{tuple,{186,16},
                           [{atom,{186,16},b_set},
                            {var,{186,16},'_'},
                            {var,{186,16},'_'},
                            {var,{186,26},'Op'},
                            {var,{186,16},'_'}]}],
                   [],
                   [{debug_line,187,20},
                    {'case',{187,5},
                            {var,{187,10},'Op'},
                            [{clause,{188,9},
                                     [{atom,{188,9},bs_init_writable}],
                                     [],
                                     [{debug_line,188,21},
                                      {atom,{188,29},true}]},
                             {clause,{189,9},
                                     [{atom,{189,9},build_stacktrace}],
                                     [],
                                     [{debug_line,189,22},
                                      {atom,{189,29},true}]},
                             {clause,{190,9},
                                     [{atom,{190,9},call}],
                                     [],
                                     [{debug_line,190,23},
                                      {atom,{190,17},true}]},
                             {clause,{191,9},
                                     [{atom,{191,9},landingpad}],
                                     [],
                                     [{debug_line,191,24},
                                      {atom,{191,23},true}]},
                             {clause,{192,9},
                                     [{atom,{192,9},peek_message}],
                                     [],
                                     [{debug_line,192,25},
                                      {atom,{192,25},true}]},
                             {clause,{193,9},
                                     [{atom,{193,9},raw_raise}],
                                     [],
                                     [{debug_line,193,26},
                                      {atom,{193,22},true}]},
                             {clause,{194,9},
                                     [{atom,{194,9},wait_timeout}],
                                     [],
                                     [{debug_line,194,27},
                                      {atom,{194,25},true}]},
                             {clause,{195,9},
                                     [{var,{195,9},'_'}],
                                     [],
                                     [{debug_line,195,28},
                                      {atom,{195,14},false}]}]}]}]}.
{attribute,{203,2},
           spec,
           {{no_side_effect,1},
            [{type,{203,21},
                   'fun',
                   [{type,{203,21},product,[{user_type,{203,22},b_set,[]}]},
                    {type,{203,34},boolean,[]}]}]}}.
{function,
    {205,1},
    no_side_effect,1,
    [{clause,
         {205,1},
         [{var,{205,1},'_'}],
         [[{call,
               {205,1},
               {remote,
                   {205,1},
                   {atom,{205,1},fake},
                   {atom,{205,1},is_beam_bif_info}},
               []}]],
         [{debug_line,205,29},{atom,{205,1},ignore}]},
     {clause,
         {205,1},
         [{tuple,
              {205,16},
              [{atom,{205,16},b_set},
               {var,{205,16},'_'},
               {var,{205,16},'_'},
               {var,{205,26},'Op'},
               {var,{205,16},'_'}]}],
         [],
         [{debug_line,206,30},
          {'case',
              {206,5},
              {var,{206,10},'Op'},
              [{clause,
                   {207,9},
                   [{tuple,{207,9},[{atom,{207,10},bif},{var,{207,14},'_'}]}],
                   [],
                   [{debug_line,207,31},{atom,{207,20},true}]},
               {clause,
                   {208,9},
                   [{tuple,
                        {208,9},
                        [{atom,{208,10},float},{atom,{208,16},get}]}],
                   [],
                   [{debug_line,208,32},{atom,{208,24},true}]},
               {clause,
                   {209,9},
                   [{atom,{209,9},bs_create_bin}],
                   [],
                   [{debug_line,209,33},{atom,{209,26},true}]},
               {clause,
                   {210,9},
                   [{atom,{210,9},bs_init_writable}],
                   [],
                   [{debug_line,210,34},{atom,{210,29},true}]},
               {clause,
                   {211,9},
                   [{atom,{211,9},bs_extract}],
                   [],
                   [{debug_line,211,35},{atom,{211,23},true}]},
               {clause,
                   {212,9},
                   [{atom,{212,9},bs_match}],
                   [],
                   [{debug_line,212,36},{atom,{212,21},true}]},
               {clause,
                   {213,9},
                   [{atom,{213,9},bs_start_match}],
                   [],
                   [{debug_line,213,37},{atom,{213,27},true}]},
               {clause,
                   {214,9},
                   [{atom,{214,9},bs_test_tail}],
                   [],
                   [{debug_line,214,38},{atom,{214,25},true}]},
               {clause,
                   {215,9},
                   [{atom,{215,9},bs_get_tail}],
                   [],
                   [{debug_line,215,39},{atom,{215,24},true}]},
               {clause,
                   {216,9},
                   [{atom,{216,9},build_stacktrace}],
                   [],
                   [{debug_line,216,40},{atom,{216,29},true}]},
               {clause,
                   {217,9},
                   [{atom,{217,9},extract}],
                   [],
                   [{debug_line,217,41},{atom,{217,20},true}]},
               {clause,
                   {218,9},
                   [{atom,{218,9},get_hd}],
                   [],
                   [{debug_line,218,42},{atom,{218,19},true}]},
               {clause,
                   {219,9},
                   [{atom,{219,9},get_tl}],
                   [],
                   [{debug_line,219,43},{atom,{219,19},true}]},
               {clause,
                   {220,9},
                   [{atom,{220,9},get_map_element}],
                   [],
                   [{debug_line,220,44},{atom,{220,28},true}]},
               {clause,
                   {221,9},
                   [{atom,{221,9},get_tuple_element}],
                   [],
                   [{debug_line,221,45},{atom,{221,30},true}]},
               {clause,
                   {222,9},
                   [{atom,{222,9},has_map_field}],
                   [],
                   [{debug_line,222,46},{atom,{222,26},true}]},
               {clause,
                   {223,9},
                   [{atom,{223,9},is_nonempty_list}],
                   [],
                   [{debug_line,223,47},{atom,{223,29},true}]},
               {clause,
                   {224,9},
                   [{atom,{224,9},is_tagged_tuple}],
                   [],
                   [{debug_line,224,48},{atom,{224,28},true}]},
               {clause,
                   {225,9},
                   [{atom,{225,9},make_fun}],
                   [],
                   [{debug_line,225,49},{atom,{225,21},true}]},
               {clause,
                   {226,9},
                   [{atom,{226,9},match_fail}],
                   [],
                   [{debug_line,226,50},{atom,{226,23},true}]},
               {clause,
                   {227,9},
                   [{atom,{227,9},phi}],
                   [],
                   [{debug_line,227,51},{atom,{227,16},true}]},
               {clause,
                   {228,9},
                   [{atom,{228,9},put_map}],
                   [],
                   [{debug_line,228,52},{atom,{228,20},true}]},
               {clause,
                   {229,9},
                   [{atom,{229,9},put_list}],
                   [],
                   [{debug_line,229,53},{atom,{229,21},true}]},
               {clause,
                   {230,9},
                   [{atom,{230,9},put_tuple}],
                   [],
                   [{debug_line,230,54},{atom,{230,22},true}]},
               {clause,
                   {231,9},
                   [{atom,{231,9},raw_raise}],
                   [],
                   [{debug_line,231,55},{atom,{231,22},true}]},
               {clause,
                   {232,9},
                   [{tuple,
                        {232,9},
                        [{atom,{232,10},succeeded},{atom,{232,20},guard}]}],
                   [],
                   [{debug_line,232,56},{atom,{232,30},true}]},
               {clause,
                   {233,9},
                   [{atom,{233,9},update_record}],
                   [],
                   [{debug_line,233,57},{atom,{233,26},true}]},
               {clause,
                   {234,9},
                   [{atom,{234,9},update_tuple}],
                   [],
                   [{debug_line,234,58},{atom,{234,25},true}]},
               {clause,
                   {235,9},
                   [{var,{235,9},'_'}],
                   [],
                   [{debug_line,235,59},{atom,{235,14},false}]}]}]}]}.
{attribute,{238,2},
           spec,
           {{can_be_guard_bif,3},
            [{type,{238,23},
                   'fun',
                   [{type,{238,23},
                          product,
                          [{type,{238,24},atom,[]},
                           {type,{238,32},atom,[]},
                           {type,{238,40},integer,[]}]},
                    {type,{238,54},boolean,[]}]}]}}.
{function,
    {240,1},
    can_be_guard_bif,3,
    [{clause,
         {240,1},
         [{var,{240,1},'_'},{var,{240,1},'_'},{var,{240,1},'_'}],
         [[{call,
               {240,1},
               {remote,
                   {240,1},
                   {atom,{240,1},fake},
                   {atom,{240,1},is_beam_bif_info}},
               []}]],
         [{debug_line,240,60},{atom,{240,1},ignore}]},
     {clause,
         {240,1},
         [{var,{240,18},'M'},{var,{240,21},'F'},{var,{240,24},'A'}],
         [],
         [{debug_line,241,61},
          {'case',
              {241,5},
              {tuple,
                  {241,10},
                  [{var,{241,11},'M'},{var,{241,13},'F'},{var,{241,15},'A'}]},
              [{clause,
                   {242,9},
                   [{tuple,
                        {242,9},
                        [{atom,{242,10},erlang},
                         {atom,{242,18},binary_to_atom},
                         {integer,{242,34},1}]}],
                   [],
                   [{debug_line,242,62},{atom,{242,40},true}]},
               {clause,
                   {243,9},
                   [{tuple,
                        {243,9},
                        [{atom,{243,10},erlang},
                         {atom,{243,18},binary_to_atom},
                         {integer,{243,34},2}]}],
                   [],
                   [{debug_line,243,63},{atom,{243,40},true}]},
               {clause,
                   {244,9},
                   [{tuple,
                        {244,9},
                        [{atom,{244,10},erlang},
                         {atom,{244,18},binary_to_existing_atom},
                         {integer,{244,43},1}]}],
                   [],
                   [{debug_line,244,64},{atom,{244,49},true}]},
               {clause,
                   {245,9},
                   [{tuple,
                        {245,9},
                        [{atom,{245,10},erlang},
                         {atom,{245,18},binary_to_existing_atom},
                         {integer,{245,43},2}]}],
                   [],
                   [{debug_line,245,65},{atom,{245,49},true}]},
               {clause,
                   {246,9},
                   [{tuple,
                        {246,9},
                        [{atom,{246,10},erlang},
                         {atom,{246,18},list_to_atom},
                         {integer,{246,32},1}]}],
                   [],
                   [{debug_line,246,66},{atom,{246,38},true}]},
               {clause,
                   {247,9},
                   [{tuple,
                        {247,9},
                        [{atom,{247,10},erlang},
                         {atom,{247,18},list_to_existing_atom},
                         {integer,{247,41},1}]}],
                   [],
                   [{debug_line,247,67},{atom,{247,47},true}]},
               {clause,
                   {248,9},
                   [{tuple,
                        {248,9},
                        [{var,{248,10},'_'},
                         {var,{248,12},'_'},
                         {var,{248,14},'_'}]}],
                   [],
                   [{debug_line,248,68},{atom,{248,20},false}]}]}]}]}.
{attribute,
    {259,2},
    spec,
    {{insert_on_edges,3},
     [{type,
          {259,22},
          bounded_fun,
          [{type,
               {259,22},
               'fun',
               [{type,
                    {259,22},
                    product,
                    [{var,{259,23},'Insertions'},
                     {var,{259,35},'Blocks'},
                     {var,{259,43},'Count'}]},
                {var,{259,53},'Result'}]},
           [{type,
                {260,5},
                constraint,
                [{atom,{260,5},is_subtype},
                 [{var,{260,5},'Insertions'},
                  {type,
                      {260,19},
                      list,
                      [{type,
                           {260,20},
                           tuple,
                           [{var,{260,21},'From'},
                            {var,{260,27},'To'},
                            {var,{260,31},'Is'}]}]}]]},
            {type,
                {261,5},
                constraint,
                [{atom,{261,5},is_subtype},
                 [{var,{261,5},'From'},{user_type,{261,13},label,[]}]]},
            {type,
                {262,5},
                constraint,
                [{atom,{262,5},is_subtype},
                 [{var,{262,5},'To'},{user_type,{262,11},label,[]}]]},
            {type,
                {263,5},
                constraint,
                [{atom,{263,5},is_subtype},
                 [{var,{263,5},'Is'},
                  {type,{263,11},list,[{user_type,{263,12},b_set,[]}]}]]},
            {type,
                {264,5},
                constraint,
                [{atom,{264,5},is_subtype},
                 [{var,{264,5},'Blocks'},{user_type,{264,15},block_map,[]}]]},
            {type,
                {265,5},
                constraint,
                [{atom,{265,5},is_subtype},
                 [{var,{265,5},'Count'},{user_type,{265,14},label,[]}]]},
            {type,
                {266,5},
                constraint,
                [{atom,{266,5},is_subtype},
                 [{var,{266,5},'Result'},
                  {type,
                      {266,15},
                      tuple,
                      [{user_type,{266,16},block_map,[]},
                       {user_type,{266,29},label,[]}]}]]}]]}]}}.
{function,
    {268,1},
    insert_on_edges,3,
    [{clause,
         {268,1},
         [{var,{268,1},'_'},{var,{268,1},'_'},{var,{268,1},'_'}],
         [[{call,
               {268,1},
               {remote,
                   {268,1},
                   {atom,{268,1},fake},
                   {atom,{268,1},is_beam_bif_info}},
               []}]],
         [{debug_line,268,69},{atom,{268,1},ignore}]},
     {clause,
         {268,1},
         [{var,{268,17},'Insertions'},
          {var,{268,29},'Blocks'},
          {var,{268,37},'Count'}],
         [[{call,
               {268,49},
               {remote,{268,49},{atom,{268,49},erlang},{atom,{268,49},is_map}},
               [{var,{268,56},'Blocks'}]}]],
         [{debug_line,270,70},
          {call,
              {270,5},
              {atom,{270,5},insert_on_edges_1},
              [{block,0,
                   [{call,
                        {270,23},
                        {remote,
                            {270,23},
                            {atom,{270,23},lists},
                            {atom,{270,23},sort}},
                        [{var,{270,28},'Insertions'}]}]},
               {var,{270,41},'Blocks'},
               {var,{270,49},'Count'}]}]}]}.
{function,
 {272,1},
 insert_on_edges_1,3,
 [{clause,
   {272,1},
   [{var,{272,1},'_'},{var,{272,1},'_'},{var,{272,1},'_'}],
   [[{call,
      {272,1},
      {remote,{272,1},{atom,{272,1},fake},{atom,{272,1},is_beam_bif_info}},
      []}]],
   [{debug_line,272,71},{atom,{272,1},ignore}]},
  {clause,
   {272,1},
   [{cons,
     {272,19},
     {tuple,
      {272,20},
      [{var,{272,21},'_'},{integer,{272,25},1},{var,{272,42},'_'}]},
     {var,{272,47},'_'}},
    {var,{272,51},'_'},
    {var,{272,54},'_'}],
   [],
   [{debug_line,275,72},
    {call,
     {275,5},
     {remote,{275,5},{atom,{275,5},erlang},{atom,{275,5},error}},
     [{atom,{275,11},unsafe_edge}]}]},
  {clause,
   {276,1},
   [{cons,
     {276,19},
     {tuple,
      {276,20},
      [{var,{276,21},'From'},{var,{276,27},'To'},{var,{276,31},'IsA'}]},
     {cons,
      {276,37},
      {tuple,
       {276,37},
       [{var,{276,38},'From'},{var,{276,44},'To'},{var,{276,48},'IsB'}]},
      {var,{276,55},'Insertions'}}},
    {var,{277,19},'Blocks'},
    {var,{277,27},'Count'}],
   [],
   [{debug_line,280,73},
    {call,
     {280,5},
     {atom,{280,5},insert_on_edges_1},
     [{block,0,
       [{cons,
         {280,23},
         {tuple,
          {280,24},
          [{var,{280,25},'From'},
           {var,{280,31},'To'},
           {op,{280,39},'++',{var,{280,35},'IsA'},{var,{280,42},'IsB'}}]},
         {var,{280,49},'Insertions'}}]},
      {var,{280,62},'Blocks'},
      {var,{280,70},'Count'}]}]},
  {clause,
   {281,1},
   [{cons,
     {281,19},
     {tuple,
      {281,20},
      [{var,{281,21},'From'},{var,{281,27},'To'},{var,{281,31},'Is'}]},
     {var,{281,37},'Insertions'}},
    {var,{281,50},'Blocks0'},
    {var,{281,59},'Count0'}],
   [],
   [{debug_line,282,74},
    {match,
     {282,5},
     {tuple,
      {282,5},
      [{atom,{282,5},b_blk},
       {var,{282,5},'_'},
       {var,{282,5},'_'},
       {var,{282,17},'FromLast0'}]},
     {match,
      {282,30},
      {var,{282,30},'FromBlk0'},
      {call,
       {282,41},
       {remote,{282,41},{atom,{282,41},erlang},{atom,{282,41},map_get}},
       [{var,{282,49},'From'},{var,{282,55},'Blocks0'}]}}},
    {debug_line,283,75},
    {match,
     {283,5},
     {tuple,
      {283,5},
      [{atom,{283,5},b_blk},
       {var,{283,5},'_'},
       {var,{283,15},'ToIs0'},
       {var,{283,5},'_'}]},
     {match,
      {283,24},
      {var,{283,24},'ToBlk0'},
      {call,
       {283,33},
       {remote,{283,33},{atom,{283,33},erlang},{atom,{283,33},map_get}},
       [{var,{283,41},'To'},{var,{283,45},'Blocks0'}]}}},
    {debug_line,285,76},
    {match,{285,5},{var,{285,5},'EdgeLbl'},{var,{285,15},'Count0'}},
    {debug_line,286,77},
    {match,
     {286,5},
     {var,{286,5},'Count'},
     {op,{286,20},'+',{var,{286,13},'Count0'},{integer,{286,22},1}}},
    {debug_line,288,78},
    {match,
     {288,5},
     {var,{288,5},'FromLast'},
     {call,
      {288,16},
      {atom,{288,16},insert_on_edges_reroute},
      [{var,{288,40},'FromLast0'},
       {var,{288,51},'To'},
       {var,{288,55},'EdgeLbl'}]}},
    {debug_line,289,79},
    {match,
     {289,5},
     {var,{289,5},'FromBlk'},
     {block,
      {289,15},
      [{match,{289,15},{var,{289,15},rec12},{var,{289,15},'FromBlk0'}},
       {'case',
        {289,30},
        {var,{289,15},rec12},
        [{clause,
          {289,30},
          [{tuple,
            {289,30},
            [{atom,{289,30},b_blk},
             {var,{289,30},'_'},
             {var,{289,30},'_'},
             {var,{289,30},'_'}]}],
          [],
          [{call,
            {289,30},
            {remote,
             {289,30},
             {atom,{289,30},erlang},
             {atom,{289,30},setelement}},
            [{integer,{289,30},4},
             {var,{289,15},rec12},
             {var,{289,35},'FromLast'}]}]},
         {clause,
          [{generated,true},{location,{289,30}}],
          [{var,[{generated,true},{location,{289,30}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{289,30}}],
            {remote,
             [{generated,true},{location,{289,30}}],
             {atom,[{generated,true},{location,{289,30}}],erlang},
             {atom,[{generated,true},{location,{289,30}}],error}},
            [{tuple,
              [{generated,true},{location,{289,30}}],
              [{atom,[{generated,true},{location,{289,30}}],badrecord},
               {var,{289,15},rec12}]}]}]}]}]}},
    {debug_line,291,80},
    {match,
     {291,5},
     {tuple,{291,5},[{var,{291,6},'EdgeIs0'},{var,{291,15},'ToIs'}]},
     {call,
      {291,23},
      {atom,{291,23},insert_on_edges_is},
      [{var,{291,42},'ToIs0'},
       {var,{291,49},'From'},
       {var,{291,55},'EdgeLbl'},
       {nil,{291,64}}]}},
    {debug_line,292,81},
    {match,
     {292,5},
     {var,{292,5},'EdgeIs'},
     {op,{292,22},'++',{var,{292,14},'EdgeIs0'},{var,{292,25},'Is'}}},
    {debug_line,294,82},
    {match,
     {294,5},
     {var,{294,5},'Br'},
     {tuple,
      {294,10},
      [{atom,{294,10},b_br},
       {map,{294,10},[]},
       {tuple,{294,21},[{atom,{294,21},b_literal},{atom,{294,36},true}]},
       {var,{295,21},'To'},
       {var,{296,21},'To'}]}},
    {debug_line,298,83},
    {match,
     {298,5},
     {var,{298,5},'EdgeBlk'},
     {tuple,
      {298,15},
      [{atom,{298,15},b_blk},
       {map,{298,15},[]},
       {var,{298,25},'EdgeIs'},
       {var,{298,37},'Br'}]}},
    {debug_line,299,84},
    {match,
     {299,5},
     {var,{299,5},'ToBlk'},
     {block,
      {299,13},
      [{match,{299,13},{var,{299,13},rec13},{var,{299,13},'ToBlk0'}},
       {'case',
        {299,26},
        {var,{299,13},rec13},
        [{clause,
          {299,26},
          [{tuple,
            {299,26},
            [{atom,{299,26},b_blk},
             {var,{299,26},'_'},
             {var,{299,26},'_'},
             {var,{299,26},'_'}]}],
          [],
          [{call,
            {299,26},
            {remote,
             {299,26},
             {atom,{299,26},erlang},
             {atom,{299,26},setelement}},
            [{integer,{299,26},3},
             {var,{299,13},rec13},
             {var,{299,29},'ToIs'}]}]},
         {clause,
          [{generated,true},{location,{299,26}}],
          [{var,[{generated,true},{location,{299,26}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{299,26}}],
            {remote,
             [{generated,true},{location,{299,26}}],
             {atom,[{generated,true},{location,{299,26}}],erlang},
             {atom,[{generated,true},{location,{299,26}}],error}},
            [{tuple,
              [{generated,true},{location,{299,26}}],
              [{atom,[{generated,true},{location,{299,26}}],badrecord},
               {var,{299,13},rec13}]}]}]}]}]}},
    {debug_line,301,85},
    {match,
     {301,5},
     {var,{301,5},'Blocks1'},
     {map,
      {301,22},
      {var,{301,15},'Blocks0'},
      [{map_field_assoc,
        {301,33},
        {var,{301,25},'EdgeLbl'},
        {var,{301,36},'EdgeBlk'}},
       {map_field_exact,
        {302,30},
        {var,{302,25},'From'},
        {var,{302,33},'FromBlk'}},
       {map_field_exact,
        {303,28},
        {var,{303,25},'To'},
        {var,{303,31},'ToBlk'}}]}},
    {debug_line,304,86},
    {match,
     {304,5},
     {var,{304,5},'Blocks'},
     {call,
      {304,14},
      {atom,{304,14},update_phi_labels},
      [{block,0,[{cons,{304,32},{var,{304,33},'To'},{nil,{304,35}}}]},
       {var,{304,38},'From'},
       {var,{304,44},'EdgeLbl'},
       {var,{304,53},'Blocks1'}]}},
    {debug_line,306,87},
    {call,
     {306,5},
     {atom,{306,5},insert_on_edges_1},
     [{var,{306,23},'Insertions'},
      {var,{306,35},'Blocks'},
      {var,{306,43},'Count'}]}]},
  {clause,
   {307,1},
   [{nil,{307,19}},{var,{307,23},'Blocks'},{var,{307,31},'Count'}],
   [],
   [{debug_line,308,88},
    {tuple,{308,5},[{var,{308,6},'Blocks'},{var,{308,14},'Count'}]}]}]}.
{function,
    {310,1},
    insert_on_edges_reroute,3,
    [{clause,
         {310,1},
         [{var,{310,1},'_'},{var,{310,1},'_'},{var,{310,1},'_'}],
         [[{call,
               {310,1},
               {remote,
                   {310,1},
                   {atom,{310,1},fake},
                   {atom,{310,1},is_beam_bif_info}},
               []}]],
         [{debug_line,310,89},{atom,{310,1},ignore}]},
     {clause,
         {310,1},
         [{match,
              {310,25},
              {tuple,
                  {310,25},
                  [{atom,{310,25},b_switch},
                   {var,{310,25},'_'},
                   {var,{310,25},'_'},
                   {var,{310,40},'Fail0'},
                   {var,{310,51},'List0'}]},
              {var,{310,58},'Sw'}},
          {var,{310,62},'Old'},
          {var,{310,67},'New'}],
         [],
         [{debug_line,311,90},
          {match,
              {311,5},
              {var,{311,5},'Fail'},
              {call,
                  {311,12},
                  {atom,{311,12},rename_label},
                  [{var,{311,25},'Fail0'},
                   {var,{311,32},'Old'},
                   {var,{311,37},'New'}]}},
          {debug_line,312,91},
          {match,
              {312,5},
              {var,{312,5},'List'},
              {lc,{312,12},
                  {block,0,
                      [{tuple,
                           {312,13},
                           [{var,{312,14},'Value'},
                            {call,
                                {312,21},
                                {atom,{312,21},rename_label},
                                [{var,{312,34},'Dst'},
                                 {var,{312,39},'Old'},
                                 {var,{312,44},'New'}]}]}]},
                  [{block,0,[{atom,{312,70},true}]},
                   {generate_strict,
                       {312,66},
                       {tuple,
                           {312,53},
                           [{var,{312,54},'Value'},{var,{312,61},'Dst'}]},
                       {var,{312,70},'List0'}}]}},
          {debug_line,313,92},
          {block,
              {313,5},
              [{match,{313,5},{var,{313,5},rec14},{var,{313,5},'Sw'}},
               {'case',
                   {313,17},
                   {var,{313,5},rec14},
                   [{clause,
                        {313,17},
                        [{tuple,
                             {313,17},
                             [{atom,{313,17},b_switch},
                              {var,{313,17},'_'},
                              {var,{313,17},'_'},
                              {var,{313,17},'_'},
                              {var,{313,17},'_'}]}],
                        [],
                        [{call,
                             {313,17},
                             {remote,
                                 {313,17},
                                 {atom,{313,17},erlang},
                                 {atom,{313,17},setelement}},
                             [{integer,{313,17},4},
                              {call,
                                  {313,27},
                                  {remote,
                                      {313,27},
                                      {atom,{313,27},erlang},
                                      {atom,{313,27},setelement}},
                                  [{integer,{313,27},5},
                                   {var,{313,5},rec14},
                                   {var,{313,32},'List'}]},
                              {var,{313,22},'Fail'}]}]},
                    {clause,
                        [{generated,true},{location,{313,17}}],
                        [{var,[{generated,true},{location,{313,17}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{313,17}}],
                             {remote,
                                 [{generated,true},{location,{313,17}}],
                                 {atom,
                                     [{generated,true},{location,{313,17}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{313,17}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{313,17}}],
                                  [{atom,
                                       [{generated,true},{location,{313,17}}],
                                       badrecord},
                                   {var,{313,5},rec14}]}]}]}]}]}]},
     {clause,
         {314,1},
         [{match,
              {314,25},
              {tuple,
                  {314,25},
                  [{atom,{314,25},b_br},
                   {var,{314,25},'_'},
                   {var,{314,25},'_'},
                   {var,{314,36},'Succ0'},
                   {var,{314,47},'Fail0'}]},
              {var,{314,54},'Br'}},
          {var,{314,58},'Old'},
          {var,{314,63},'New'}],
         [],
         [{debug_line,315,93},
          {match,
              {315,5},
              {var,{315,5},'Succ'},
              {call,
                  {315,12},
                  {atom,{315,12},rename_label},
                  [{var,{315,25},'Succ0'},
                   {var,{315,32},'Old'},
                   {var,{315,37},'New'}]}},
          {debug_line,316,94},
          {match,
              {316,5},
              {var,{316,5},'Fail'},
              {call,
                  {316,12},
                  {atom,{316,12},rename_label},
                  [{var,{316,25},'Fail0'},
                   {var,{316,32},'Old'},
                   {var,{316,37},'New'}]}},
          {debug_line,317,95},
          {block,
              {317,5},
              [{match,{317,5},{var,{317,5},rec15},{var,{317,5},'Br'}},
               {'case',
                   {317,13},
                   {var,{317,5},rec15},
                   [{clause,
                        {317,13},
                        [{tuple,
                             {317,13},
                             [{atom,{317,13},b_br},
                              {var,{317,13},'_'},
                              {var,{317,13},'_'},
                              {var,{317,13},'_'},
                              {var,{317,13},'_'}]}],
                        [],
                        [{call,
                             {317,13},
                             {remote,
                                 {317,13},
                                 {atom,{317,13},erlang},
                                 {atom,{317,13},setelement}},
                             [{integer,{317,13},4},
                              {call,
                                  {317,23},
                                  {remote,
                                      {317,23},
                                      {atom,{317,23},erlang},
                                      {atom,{317,23},setelement}},
                                  [{integer,{317,23},5},
                                   {var,{317,5},rec15},
                                   {var,{317,28},'Fail'}]},
                              {var,{317,18},'Succ'}]}]},
                    {clause,
                        [{generated,true},{location,{317,13}}],
                        [{var,[{generated,true},{location,{317,13}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{317,13}}],
                             {remote,
                                 [{generated,true},{location,{317,13}}],
                                 {atom,
                                     [{generated,true},{location,{317,13}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{317,13}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{317,13}}],
                                  [{atom,
                                       [{generated,true},{location,{317,13}}],
                                       badrecord},
                                   {var,{317,5},rec15}]}]}]}]}]}]}]}.
{function,
    {319,1},
    insert_on_edges_is,4,
    [{clause,
         {319,1},
         [{var,{319,1},'_'},
          {var,{319,1},'_'},
          {var,{319,1},'_'},
          {var,{319,1},'_'}],
         [[{call,
               {319,1},
               {remote,
                   {319,1},
                   {atom,{319,1},fake},
                   {atom,{319,1},is_beam_bif_info}},
               []}]],
         [{debug_line,319,96},{atom,{319,1},ignore}]},
     {clause,
         {319,1},
         [{cons,
              {319,20},
              {match,
                  {319,21},
                  {tuple,
                      {319,21},
                      [{atom,{319,21},b_set},
                       {var,{319,21},'_'},
                       {var,{319,21},'_'},
                       {atom,{319,31},bs_extract},
                       {var,{319,21},'_'}]},
                  {var,{319,43},'I'}},
              {var,{319,47},'Is'}},
          {var,{319,52},'FromLbl'},
          {var,{319,61},'EdgeLbl'},
          {var,{319,70},'EdgeIs'}],
         [],
         [{debug_line,325,97},
          {call,
              {325,5},
              {atom,{325,5},insert_on_edges_is},
              [{var,{325,24},'Is'},
               {var,{325,28},'FromLbl'},
               {var,{325,37},'EdgeLbl'},
               {block,0,
                   [{cons,
                        {325,46},
                        {var,{325,47},'I'},
                        {var,{325,51},'EdgeIs'}}]}]}]},
     {clause,
         {326,1},
         [{var,{326,20},'ToIs0'},
          {var,{326,27},'FromLbl'},
          {var,{326,36},'EdgeLbl'},
          {var,{326,45},'EdgeIs'}],
         [],
         [{debug_line,327,98},
          {'case',
              {327,5},
              {var,{327,10},'ToIs0'},
              [{clause,
                   {328,9},
                   [{cons,
                        {328,9},
                        {tuple,
                            {328,10},
                            [{atom,{328,10},b_set},
                             {var,{328,10},'_'},
                             {var,{328,10},'_'},
                             {atom,{328,20},landingpad},
                             {var,{328,10},'_'}]},
                        {var,{328,34},'_'}}],
                   [],
                   [{debug_line,331,99},
                    {call,
                        {331,13},
                        {remote,
                            {331,13},
                            {atom,{331,13},erlang},
                            {atom,{331,13},error}},
                        [{atom,{331,19},unsafe_edge}]}]},
               {clause,
                   {332,9},
                   [{var,{332,9},'_'}],
                   [],
                   [{debug_line,333,100},
                    {match,
                        {333,13},
                        {var,{333,13},'ToIs'},
                        {call,
                            {333,20},
                            {atom,{333,20},update_phi_labels_is},
                            [{var,{333,41},'ToIs0'},
                             {var,{333,48},'FromLbl'},
                             {var,{333,57},'EdgeLbl'}]}},
                    {debug_line,334,101},
                    {tuple,
                        {334,13},
                        [{call,
                             {334,14},
                             {remote,
                                 {334,14},
                                 {atom,{334,14},lists},
                                 {atom,{334,14},reverse}},
                             [{var,{334,22},'EdgeIs'}]},
                         {var,{334,31},'ToIs'}]}]}]}]}]}.
{attribute,{340,2},
           spec,
           {{is_loop_header,1},
            [{type,{340,21},
                   'fun',
                   [{type,{340,21},product,[{user_type,{340,22},b_set,[]}]},
                    {type,{340,34},boolean,[]}]}]}}.
{function,
    {342,1},
    is_loop_header,1,
    [{clause,
         {342,1},
         [{var,{342,1},'_'}],
         [[{call,
               {342,1},
               {remote,
                   {342,1},
                   {atom,{342,1},fake},
                   {atom,{342,1},is_beam_bif_info}},
               []}]],
         [{debug_line,342,102},{atom,{342,1},ignore}]},
     {clause,
         {342,1},
         [{tuple,
              {342,16},
              [{atom,{342,16},b_set},
               {var,{342,16},'_'},
               {var,{342,16},'_'},
               {atom,{342,26},wait_timeout},
               {cons,{342,44},{var,{342,45},'Args'},{nil,{342,49}}}]}],
         [],
         [{debug_line,343,103},
          {'case',
              {343,5},
              {var,{343,10},'Args'},
              [{clause,
                   {344,9},
                   [{tuple,
                        {344,9},
                        [{atom,{344,9},b_literal},{integer,{344,24},0}]}],
                   [],
                   [{debug_line,346,104},{atom,{346,13},false}]},
               {clause,
                   {347,9},
                   [{var,{347,9},'_'}],
                   [],
                   [{debug_line,348,105},{atom,{348,13},true}]}]}]},
     {clause,
         {350,1},
         [{tuple,
              {350,16},
              [{atom,{350,16},b_set},
               {var,{350,16},'_'},
               {var,{350,16},'_'},
               {var,{350,26},'Op'},
               {var,{350,16},'_'}]}],
         [],
         [{debug_line,351,106},
          {op,{351,8},
              '=:=',
              {var,{351,5},'Op'},
              {atom,{351,12},peek_message}}]}]}.
{attribute,{353,2},
           spec,
           {{predecessors,1},
            [{type,{353,19},
                   bounded_fun,
                   [{type,{353,19},
                          'fun',
                          [{type,{353,19},product,[{var,{353,20},'Blocks'}]},
                           {var,{353,31},'Result'}]},
                    [{type,{354,7},
                           constraint,
                           [{atom,{354,7},is_subtype},
                            [{var,{354,7},'Blocks'},
                             {user_type,{354,17},block_map,[]}]]},
                     {type,{355,7},
                           constraint,
                           [{atom,{355,7},is_subtype},
                            [{var,{355,7},'Result'},
                             {user_type,{355,17},predecessor_map,[]}]]}]]}]}}.
{function,
    {357,1},
    predecessors,1,
    [{clause,
         {357,1},
         [{var,{357,1},'_'}],
         [[{call,
               {357,1},
               {remote,
                   {357,1},
                   {atom,{357,1},fake},
                   {atom,{357,1},is_beam_bif_info}},
               []}]],
         [{debug_line,357,107},{atom,{357,1},ignore}]},
     {clause,
         {357,1},
         [{var,{357,14},'Blocks'}],
         [],
         [{debug_line,358,108},
          {match,
              {358,5},
              {var,{358,5},'P0'},
              {lc,{358,10},
                  {block,0,
                      [{tuple,
                           {358,11},
                           [{var,{358,12},'S'},{var,{358,14},'L'}]}]},
                  [{block,0,[{atom,{358,32},true}]},
                   {m_generate,
                       {358,29},
                       {map_field_exact,
                           {358,22},
                           {var,{358,20},'L'},
                           {var,{358,25},'Blk'}},
                       {var,{358,32},'Blocks'}},
                   {block,0,[{debug_line,359,109},{atom,{359,25},true}]},
                   {generate,
                       {359,22},
                       {var,{359,20},'S'},
                       {call,
                           {359,25},
                           {atom,{359,25},successors},
                           [{var,{359,36},'Blk'}]}}]}},
          {debug_line,360,110},
          {match,
              {360,5},
              {var,{360,5},'P1'},
              {call,
                  {360,10},
                  {remote,
                      {360,14},
                      {atom,{360,10},sofs},
                      {atom,{360,15},relation}},
                  [{var,{360,24},'P0'}]}},
          {debug_line,361,111},
          {match,
              {361,5},
              {var,{361,5},'P2'},
              {call,
                  {361,10},
                  {remote,
                      {361,14},
                      {atom,{361,10},sofs},
                      {atom,{361,15},rel2fam}},
                  [{var,{361,23},'P1'}]}},
          {debug_line,362,112},
          {match,
              {362,5},
              {var,{362,5},'P3'},
              {call,
                  {362,10},
                  {remote,
                      {362,14},
                      {atom,{362,10},sofs},
                      {atom,{362,15},to_external}},
                  [{var,{362,27},'P2'}]}},
          {debug_line,363,113},
          {match,
              {363,5},
              {var,{363,5},'P'},
              {cons,
                  {363,9},
                  {tuple,{363,10},[{integer,{363,11},0},{nil,{363,13}}]},
                  {var,{363,17},'P3'}}},
          {debug_line,364,114},
          {call,
              {364,5},
              {remote,{364,9},{atom,{364,5},maps},{atom,{364,10},from_list}},
              [{var,{364,20},'P'}]}]}]}.
{attribute,{366,2},
           spec,
           {{successors,1},
            [{type,{366,17},
                   'fun',
                   [{type,{366,17},product,[{user_type,{366,18},b_blk,[]}]},
                    {type,{366,30},list,[{user_type,{366,31},label,[]}]}]}]}}.
{function,
    {368,1},
    successors,1,
    [{clause,
         {368,1},
         [{var,{368,1},'_'}],
         [[{call,
               {368,1},
               {remote,
                   {368,1},
                   {atom,{368,1},fake},
                   {atom,{368,1},is_beam_bif_info}},
               []}]],
         [{debug_line,368,115},{atom,{368,1},ignore}]},
     {clause,
         {368,1},
         [{tuple,
              {368,12},
              [{atom,{368,12},b_blk},
               {var,{368,12},'_'},
               {var,{368,12},'_'},
               {var,{368,24},'Terminator'}]}],
         [],
         [{debug_line,369,116},
          {'case',
              {369,5},
              {var,{369,10},'Terminator'},
              [{clause,
                   {370,9},
                   [{tuple,
                        {370,9},
                        [{atom,{370,9},b_br},
                         {var,{370,9},'_'},
                         {tuple,
                             {370,20},
                             [{atom,{370,20},b_literal},{atom,{370,35},true}]},
                         {var,{370,46},'Succ'},
                         {var,{370,9},'_'}]}],
                   [],
                   [{debug_line,371,117},
                    {cons,{371,13},{var,{371,14},'Succ'},{nil,{371,18}}}]},
               {clause,
                   {372,9},
                   [{tuple,
                        {372,9},
                        [{atom,{372,9},b_br},
                         {var,{372,9},'_'},
                         {tuple,
                             {372,20},
                             [{atom,{372,20},b_literal},
                              {atom,{372,35},false}]},
                         {var,{372,9},'_'},
                         {var,{372,47},'Fail'}]}],
                   [],
                   [{debug_line,373,118},
                    {cons,{373,13},{var,{373,14},'Fail'},{nil,{373,18}}}]},
               {clause,
                   {374,9},
                   [{tuple,
                        {374,9},
                        [{atom,{374,9},b_br},
                         {var,{374,9},'_'},
                         {var,{374,9},'_'},
                         {var,{374,20},'Succ'},
                         {var,{374,30},'Fail'}]}],
                   [],
                   [{debug_line,375,119},
                    {cons,
                        {375,13},
                        {var,{375,14},'Fail'},
                        {cons,
                            {375,19},
                            {var,{375,19},'Succ'},
                            {nil,{375,23}}}}]},
               {clause,
                   {376,9},
                   [{tuple,
                        {376,9},
                        [{atom,{376,9},b_switch},
                         {var,{376,9},'_'},
                         {var,{376,9},'_'},
                         {var,{376,24},'Fail'},
                         {var,{376,34},'List'}]}],
                   [],
                   [{debug_line,377,120},
                    {cons,
                        {377,13},
                        {var,{377,14},'Fail'},
                        {lc,{377,19},
                            {block,0,[{var,{377,20},'L'}]},
                            [{block,0,[{atom,{377,35},true}]},
                             {generate_strict,
                                 {377,31},
                                 {tuple,
                                     {377,25},
                                     [{var,{377,26},'_'},{var,{377,28},'L'}]},
                                 {var,{377,35},'List'}}]}}]},
               {clause,
                   {378,9},
                   [{tuple,
                        {378,9},
                        [{atom,{378,9},b_ret},
                         {var,{378,9},'_'},
                         {var,{378,9},'_'}]}],
                   [],
                   [{debug_line,379,121},{nil,{379,13}}]}]}]}]}.
{attribute,{398,2},
           spec,
           {{normalize,1},
            [{type,{398,16},
                   'fun',
                   [{type,{398,16},
                          product,
                          [{type,{398,17},
                                 union,
                                 [{user_type,{398,17},b_set,[]},
                                  {user_type,{398,27},terminator,[]}]}]},
                    {type,{399,11},
                          union,
                          [{user_type,{399,11},b_set,[]},
                           {user_type,{399,21},terminator,[]}]}]}]}}.
{function,
 {401,1},
 normalize,1,
 [{clause,
   {401,1},
   [{var,{401,1},'_'}],
   [[{call,
      {401,1},
      {remote,{401,1},{atom,{401,1},fake},{atom,{401,1},is_beam_bif_info}},
      []}]],
   [{debug_line,401,122},{atom,{401,1},ignore}]},
  {clause,
   {401,1},
   [{match,
     {401,11},
     {tuple,
      {401,11},
      [{atom,{401,11},b_set},
       {var,{401,23},'Anno0'},
       {var,{401,11},'_'},
       {tuple,{401,32},[{atom,{401,33},bif},{var,{401,37},'Bif'}]},
       {var,{401,47},'Args'}]},
     {var,{401,53},'Set'}}],
   [],
   [{debug_line,402,123},
    {'case',
     {402,5},
     {tuple,
      {402,10},
      [{call,{402,11},{atom,{402,11},is_commutative},[{var,{402,26},'Bif'}]},
       {var,{402,31},'Args'}]},
     [{clause,
       {403,9},
       [{tuple,
         {403,9},
         [{atom,{403,10},true},
          {cons,
           {403,16},
           {match,
            {403,17},
            {tuple,{403,17},[{atom,{403,17},b_literal},{var,{403,17},'_'}]},
            {var,{403,30},'Lit'}},
           {cons,
            {403,34},
            {match,
             {403,34},
             {tuple,{403,34},[{atom,{403,34},b_var},{var,{403,34},'_'}]},
             {var,{403,43},'Var'}},
            {nil,{403,46}}}}]}],
       [],
       [{debug_line,404,124},
        {match,
         {404,13},
         {var,{404,13},'Anno'},
         {'case',
          {404,20},
          {var,{404,25},'Anno0'},
          [{clause,
            {405,24},
            [{map,
              {405,24},
              [{map_field_exact,
                {405,36},
                {atom,{405,26},arg_types},
                {var,{405,39},'ArgTypes0'}}]}],
            [],
            [{debug_line,406,125},
             {'case',
              {406,28},
              {var,{406,33},'ArgTypes0'},
              [{clause,
                {407,32},
                [{map,
                  {407,32},
                  [{map_field_exact,
                    {407,36},
                    {integer,{407,34},1},
                    {var,{407,39},'Type'}}]}],
                [],
                [{debug_line,408,126},
                 {map,
                  {408,41},
                  {var,{408,36},'Anno0'},
                  [{map_field_assoc,
                    {408,53},
                    {atom,{408,43},arg_types},
                    {map,
                     {408,56},
                     [{map_field_assoc,
                       {408,60},
                       {integer,{408,58},0},
                       {var,{408,63},'Type'}}]}}]}]},
               {clause,
                {409,32},
                [{map,{409,32},[]}],
                [],
                [{debug_line,410,127},
                 {map,
                  {410,41},
                  {var,{410,36},'Anno0'},
                  [{map_field_assoc,
                    {410,53},
                    {atom,{410,43},arg_types},
                    {map,{410,56},[]}}]}]}]}]},
           {clause,
            {412,24},
            [{map,{412,24},[]}],
            [],
            [{debug_line,413,128},{var,{413,28},'Anno0'}]}]}},
        {debug_line,415,129},
        {block,
         {415,13},
         [{match,
           {415,33},
           {var,{415,33},rec16},
           {cons,
            {415,38},
            {var,{415,39},'Var'},
            {cons,{415,43},{var,{415,43},'Lit'},{nil,{415,46}}}}},
          {match,{415,13},{var,{415,13},rec17},{var,{415,13},'Set'}},
          {'case',
           {415,23},
           {var,{415,13},rec17},
           [{clause,
             {415,23},
             [{tuple,
               {415,23},
               [{atom,{415,23},b_set},
                {var,{415,23},'_'},
                {var,{415,23},'_'},
                {var,{415,23},'_'},
                {var,{415,23},'_'}]}],
             [],
             [{call,
               {415,23},
               {remote,
                {415,23},
                {atom,{415,23},erlang},
                {atom,{415,23},setelement}},
               [{integer,{415,23},2},
                {call,
                 {415,33},
                 {remote,
                  {415,33},
                  {atom,{415,33},erlang},
                  {atom,{415,33},setelement}},
                 [{integer,{415,33},5},
                  {var,{415,13},rec17},
                  {var,{415,33},rec16}]},
                {var,{415,28},'Anno'}]}]},
            {clause,
             [{generated,true},{location,{415,23}}],
             [{var,[{generated,true},{location,{415,23}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{415,23}}],
               {remote,
                [{generated,true},{location,{415,23}}],
                {atom,[{generated,true},{location,{415,23}}],erlang},
                {atom,[{generated,true},{location,{415,23}}],error}},
               [{tuple,
                 [{generated,true},{location,{415,23}}],
                 [{atom,[{generated,true},{location,{415,23}}],badrecord},
                  {var,{415,13},rec17}]}]}]}]}]}]},
      {clause,
       {416,9},
       [{tuple,{416,9},[{var,{416,10},'_'},{var,{416,13},'_'}]}],
       [],
       [{debug_line,417,130},{var,{417,13},'Set'}]}]}]},
  {clause,
   {419,1},
   [{match,
     {419,11},
     {tuple,
      {419,11},
      [{atom,{419,11},b_set},
       {var,{419,11},'_'},
       {var,{419,11},'_'},
       {var,{419,11},'_'},
       {var,{419,11},'_'}]},
     {var,{419,20},'Set'}}],
   [],
   [{debug_line,420,131},{var,{420,5},'Set'}]},
  {clause,
   {421,1},
   [{match,
     {421,11},
     {tuple,
      {421,11},
      [{atom,{421,11},b_br},
       {var,{421,11},'_'},
       {var,{421,11},'_'},
       {var,{421,11},'_'},
       {var,{421,11},'_'}]},
     {var,{421,19},'Br'}}],
   [],
   [{debug_line,422,132},
    {'case',
     {422,5},
     {var,{422,10},'Br'},
     [{clause,
       {423,9},
       [{tuple,
         {423,9},
         [{atom,{423,9},b_br},
          {var,{423,9},'_'},
          {var,{423,20},'Bool'},
          {var,{423,30},'Same'},
          {var,{423,40},'Same'}]}],
       [],
       [{debug_line,424,133},
        {'case',
         {424,13},
         {var,{424,18},'Bool'},
         [{clause,
           {425,17},
           [{tuple,{425,17},[{atom,{425,17},b_literal},{atom,{425,32},true}]}],
           [],
           [{debug_line,426,134},{var,{426,21},'Br'}]},
          {clause,
           {427,17},
           [{var,{427,17},'_'}],
           [],
           [{debug_line,428,135},
            {block,
             {428,21},
             [{match,
               {428,29},
               {var,{428,29},rec18},
               {tuple,
                {428,34},
                [{atom,{428,34},b_literal},{atom,{428,49},true}]}},
              {match,{428,21},{var,{428,21},rec19},{var,{428,21},'Br'}},
              {'case',
               {428,29},
               {var,{428,21},rec19},
               [{clause,
                 {428,29},
                 [{tuple,
                   {428,29},
                   [{atom,{428,29},b_br},
                    {var,{428,29},'_'},
                    {var,{428,29},'_'},
                    {var,{428,29},'_'},
                    {var,{428,29},'_'}]}],
                 [],
                 [{call,
                   {428,29},
                   {remote,
                    {428,29},
                    {atom,{428,29},erlang},
                    {atom,{428,29},setelement}},
                   [{integer,{428,29},3},
                    {var,{428,21},rec19},
                    {var,{428,29},rec18}]}]},
                {clause,
                 [{generated,true},{location,{428,29}}],
                 [{var,[{generated,true},{location,{428,29}}],'_'}],
                 [],
                 [{call,
                   [{generated,true},{location,{428,29}}],
                   {remote,
                    [{generated,true},{location,{428,29}}],
                    {atom,[{generated,true},{location,{428,29}}],erlang},
                    {atom,[{generated,true},{location,{428,29}}],error}},
                   [{tuple,
                     [{generated,true},{location,{428,29}}],
                     [{atom,[{generated,true},{location,{428,29}}],badrecord},
                      {var,{428,21},rec19}]}]}]}]}]}]}]}]},
      {clause,
       {430,9},
       [{tuple,
         {430,9},
         [{atom,{430,9},b_br},
          {var,{430,9},'_'},
          {tuple,{430,20},[{atom,{430,20},b_literal},{atom,{430,35},true}]},
          {var,{430,46},'Succ'},
          {var,{430,9},'_'}]}],
       [],
       [{debug_line,431,136},
        {block,
         {431,13},
         [{match,{431,13},{var,{431,13},rec20},{var,{431,13},'Br'}},
          {'case',
           {431,21},
           {var,{431,13},rec20},
           [{clause,
             {431,21},
             [{tuple,
               {431,21},
               [{atom,{431,21},b_br},
                {var,{431,21},'_'},
                {var,{431,21},'_'},
                {var,{431,21},'_'},
                {var,{431,21},'_'}]}],
             [],
             [{call,
               {431,21},
               {remote,
                {431,21},
                {atom,{431,21},erlang},
                {atom,{431,21},setelement}},
               [{integer,{431,21},5},
                {var,{431,13},rec20},
                {var,{431,26},'Succ'}]}]},
            {clause,
             [{generated,true},{location,{431,21}}],
             [{var,[{generated,true},{location,{431,21}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{431,21}}],
               {remote,
                [{generated,true},{location,{431,21}}],
                {atom,[{generated,true},{location,{431,21}}],erlang},
                {atom,[{generated,true},{location,{431,21}}],error}},
               [{tuple,
                 [{generated,true},{location,{431,21}}],
                 [{atom,[{generated,true},{location,{431,21}}],badrecord},
                  {var,{431,13},rec20}]}]}]}]}]}]},
      {clause,
       {432,9},
       [{tuple,
         {432,9},
         [{atom,{432,9},b_br},
          {var,{432,9},'_'},
          {tuple,{432,20},[{atom,{432,20},b_literal},{atom,{432,35},false}]},
          {var,{432,9},'_'},
          {var,{432,47},'Fail'}]}],
       [],
       [{debug_line,433,137},
        {block,
         {433,13},
         [{match,
           {433,21},
           {var,{433,21},rec21},
           {tuple,{433,26},[{atom,{433,26},b_literal},{atom,{433,41},true}]}},
          {match,{433,13},{var,{433,13},rec22},{var,{433,13},'Br'}},
          {'case',
           {433,21},
           {var,{433,13},rec22},
           [{clause,
             {433,21},
             [{tuple,
               {433,21},
               [{atom,{433,21},b_br},
                {var,{433,21},'_'},
                {var,{433,21},'_'},
                {var,{433,21},'_'},
                {var,{433,21},'_'}]}],
             [],
             [{call,
               {433,21},
               {remote,
                {433,21},
                {atom,{433,21},erlang},
                {atom,{433,21},setelement}},
               [{integer,{433,21},3},
                {call,
                 {433,47},
                 {remote,
                  {433,47},
                  {atom,{433,47},erlang},
                  {atom,{433,47},setelement}},
                 [{integer,{433,47},4},
                  {var,{433,13},rec22},
                  {var,{433,52},'Fail'}]},
                {var,{433,21},rec21}]}]},
            {clause,
             [{generated,true},{location,{433,21}}],
             [{var,[{generated,true},{location,{433,21}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{433,21}}],
               {remote,
                [{generated,true},{location,{433,21}}],
                {atom,[{generated,true},{location,{433,21}}],erlang},
                {atom,[{generated,true},{location,{433,21}}],error}},
               [{tuple,
                 [{generated,true},{location,{433,21}}],
                 [{atom,[{generated,true},{location,{433,21}}],badrecord},
                  {var,{433,13},rec22}]}]}]}]}]}]},
      {clause,
       {434,9},
       [{tuple,
         {434,9},
         [{atom,{434,9},b_br},
          {var,{434,9},'_'},
          {var,{434,9},'_'},
          {var,{434,9},'_'},
          {var,{434,9},'_'}]}],
       [],
       [{debug_line,435,138},{var,{435,13},'Br'}]}]}]},
  {clause,
   {437,1},
   [{match,
     {437,11},
     {tuple,
      {437,11},
      [{atom,{437,11},b_switch},
       {var,{437,11},'_'},
       {var,{437,25},'Arg'},
       {var,{437,34},'Fail'},
       {var,{437,44},'List'}]},
     {var,{437,50},'Sw'}}],
   [],
   [{debug_line,438,139},
    {'case',
     {438,5},
     {var,{438,10},'Arg'},
     [{clause,
       {439,9},
       [{tuple,{439,9},[{atom,{439,9},b_literal},{var,{439,9},'_'}]}],
       [],
       [{debug_line,440,140},
        {call,
         {440,13},
         {atom,{440,13},normalize_switch},
         [{var,{440,30},'Arg'},{var,{440,35},'List'},{var,{440,41},'Fail'}]}]},
      {clause,
       {441,9},
       [{tuple,{441,9},[{atom,{441,9},b_var},{var,{441,9},'_'}]}],
       [[{op,{441,28},'=:=',{var,{441,23},'List'},{nil,{441,32}}}]],
       [{debug_line,442,141},
        {tuple,
         {442,13},
         [{atom,{442,13},b_br},
          {map,{442,13},[]},
          {tuple,{442,24},[{atom,{442,24},b_literal},{atom,{442,39},true}]},
          {var,{442,50},'Fail'},
          {var,{442,60},'Fail'}]}]},
      {clause,
       {443,9},
       [{tuple,{443,9},[{atom,{443,9},b_var},{var,{443,9},'_'}]}],
       [],
       [{debug_line,444,142},
        {block,
         {444,13},
         [{match,
           {444,25},
           {var,{444,25},rec23},
           {call,
            {444,30},
            {remote,{444,30},{atom,{444,30},lists},{atom,{444,30},sort}},
            [{var,{444,35},'List'}]}},
          {match,{444,13},{var,{444,13},rec24},{var,{444,13},'Sw'}},
          {'case',
           {444,25},
           {var,{444,13},rec24},
           [{clause,
             {444,25},
             [{tuple,
               {444,25},
               [{atom,{444,25},b_switch},
                {var,{444,25},'_'},
                {var,{444,25},'_'},
                {var,{444,25},'_'},
                {var,{444,25},'_'}]}],
             [],
             [{call,
               {444,25},
               {remote,
                {444,25},
                {atom,{444,25},erlang},
                {atom,{444,25},setelement}},
               [{integer,{444,25},5},
                {var,{444,13},rec24},
                {var,{444,25},rec23}]}]},
            {clause,
             [{generated,true},{location,{444,25}}],
             [{var,[{generated,true},{location,{444,25}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{444,25}}],
               {remote,
                [{generated,true},{location,{444,25}}],
                {atom,[{generated,true},{location,{444,25}}],erlang},
                {atom,[{generated,true},{location,{444,25}}],error}},
               [{tuple,
                 [{generated,true},{location,{444,25}}],
                 [{atom,[{generated,true},{location,{444,25}}],badrecord},
                  {var,{444,13},rec24}]}]}]}]}]}]}]}]},
  {clause,
   {446,1},
   [{match,
     {446,11},
     {tuple,
      {446,11},
      [{atom,{446,11},b_ret},{var,{446,11},'_'},{var,{446,11},'_'}]},
     {var,{446,20},'Ret'}}],
   [],
   [{debug_line,447,143},{var,{447,5},'Ret'}]}]}.
{function,{449,1},
          normalize_switch,3,
          [{clause,{449,1},
                   [{var,{449,1},'_'},{var,{449,1},'_'},{var,{449,1},'_'}],
                   [[{call,{449,1},
                           {remote,{449,1},
                                   {atom,{449,1},fake},
                                   {atom,{449,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,449,144},{atom,{449,1},ignore}]},
           {clause,{449,1},
                   [{var,{449,18},'Val'},
                    {cons,{449,23},
                          {tuple,{449,24},
                                 [{var,{449,25},'Val'},{var,{449,29},'L'}]},
                          {var,{449,32},'_'}},
                    {var,{449,36},'_Fail'}],
                   [],
                   [{debug_line,450,145},
                    {tuple,{450,5},
                           [{atom,{450,5},b_br},
                            {map,{450,5},[]},
                            {tuple,{450,16},
                                   [{atom,{450,16},b_literal},
                                    {atom,{450,31},true}]},
                            {var,{450,42},'L'},
                            {var,{450,49},'L'}]}]},
           {clause,{451,1},
                   [{var,{451,18},'Val'},
                    {cons,{451,23},{var,{451,24},'_'},{var,{451,26},'T'}},
                    {var,{451,30},'Fail'}],
                   [],
                   [{debug_line,452,146},
                    {call,{452,5},
                          {atom,{452,5},normalize_switch},
                          [{var,{452,22},'Val'},
                           {var,{452,27},'T'},
                           {var,{452,30},'Fail'}]}]},
           {clause,{453,1},
                   [{var,{453,18},'_Val'},
                    {nil,{453,24}},
                    {var,{453,28},'Fail'}],
                   [],
                   [{debug_line,454,147},
                    {tuple,{454,5},
                           [{atom,{454,5},b_br},
                            {map,{454,5},[]},
                            {tuple,{454,16},
                                   [{atom,{454,16},b_literal},
                                    {atom,{454,31},true}]},
                            {var,{454,42},'Fail'},
                            {var,{454,52},'Fail'}]}]}]}.
{attribute,{456,2},
           spec,
           {{successors,2},
            [{type,{456,17},
                   'fun',
                   [{type,{456,17},
                          product,
                          [{user_type,{456,18},label,[]},
                           {user_type,{456,27},block_map,[]}]},
                    {type,{456,43},list,[{user_type,{456,44},label,[]}]}]}]}}.
{function,
    {458,1},
    successors,2,
    [{clause,
         {458,1},
         [{var,{458,1},'_'},{var,{458,1},'_'}],
         [[{call,
               {458,1},
               {remote,
                   {458,1},
                   {atom,{458,1},fake},
                   {atom,{458,1},is_beam_bif_info}},
               []}]],
         [{debug_line,458,148},{atom,{458,1},ignore}]},
     {clause,
         {458,1},
         [{var,{458,12},'L'},{var,{458,15},'Blocks'}],
         [],
         [{debug_line,459,149},
          {call,
              {459,5},
              {atom,{459,5},successors},
              [{block,0,
                   [{call,
                        {459,16},
                        {remote,
                            {459,16},
                            {atom,{459,16},erlang},
                            {atom,{459,16},map_get}},
                        [{var,{459,24},'L'},{var,{459,27},'Blocks'}]}]}]}]}]}.
{attribute,
    {461,2},
    spec,
    {{def,2},
     [{type,
          {461,10},
          bounded_fun,
          [{type,
               {461,10},
               'fun',
               [{type,
                    {461,10},
                    product,
                    [{var,{461,11},'Ls'},{var,{461,15},'Blocks'}]},
                {var,{461,26},'Def'}]},
           [{type,
                {462,7},
                constraint,
                [{atom,{462,7},is_subtype},
                 [{var,{462,7},'Ls'},
                  {type,{462,13},list,[{user_type,{462,14},label,[]}]}]]},
            {type,
                {463,7},
                constraint,
                [{atom,{463,7},is_subtype},
                 [{var,{463,7},'Blocks'},{user_type,{463,17},block_map,[]}]]},
            {type,
                {464,7},
                constraint,
                [{atom,{464,7},is_subtype},
                 [{var,{464,7},'Def'},
                  {remote_type,
                      {464,14},
                      [{atom,{464,14},ordsets},
                       {atom,{464,22},ordset},
                       [{user_type,{464,29},b_var,[]}]]}]]}]]}]}}.
{function,
    {466,1},
    def,2,
    [{clause,
         {466,1},
         [{var,{466,1},'_'},{var,{466,1},'_'}],
         [[{call,
               {466,1},
               {remote,
                   {466,1},
                   {atom,{466,1},fake},
                   {atom,{466,1},is_beam_bif_info}},
               []}]],
         [{debug_line,466,150},{atom,{466,1},ignore}]},
     {clause,
         {466,1},
         [{var,{466,5},'Ls'},{var,{466,9},'Blocks'}],
         [[{call,
               {466,22},
               {remote,{466,22},{atom,{466,22},erlang},{atom,{466,22},is_map}},
               [{var,{466,29},'Blocks'}]}]],
         [{debug_line,467,151},
          {match,
              {467,5},
              {var,{467,5},'Blks'},
              {lc,{467,12},
                  {block,0,
                      [{call,
                           {467,13},
                           {remote,
                               {467,13},
                               {atom,{467,13},erlang},
                               {atom,{467,13},map_get}},
                           [{var,{467,21},'L'},{var,{467,24},'Blocks'}]}]},
                  [{block,0,[{atom,{467,40},true}]},
                   {generate,
                       {467,37},
                       {var,{467,35},'L'},
                       {var,{467,40},'Ls'}}]}},
          {debug_line,468,152},
          {call,
              {468,5},
              {atom,{468,5},def_1},
              [{var,{468,11},'Blks'},{nil,{468,17}}]}]}]}.
{attribute,
    {470,2},
    spec,
    {{def_unused,3},
     [{type,
          {470,17},
          bounded_fun,
          [{type,
               {470,17},
               'fun',
               [{type,
                    {470,17},
                    product,
                    [{var,{470,18},'Ls'},
                     {var,{470,22},'Used'},
                     {var,{470,28},'Blocks'}]},
                {type,
                    {470,39},
                    tuple,
                    [{var,{470,40},'Def'},{var,{470,44},'Unused'}]}]},
           [{type,
                {471,7},
                constraint,
                [{atom,{471,7},is_subtype},
                 [{var,{471,7},'Ls'},
                  {type,{471,13},list,[{user_type,{471,14},label,[]}]}]]},
            {type,
                {472,7},
                constraint,
                [{atom,{472,7},is_subtype},
                 [{var,{472,7},'Used'},
                  {remote_type,
                      {472,15},
                      [{atom,{472,15},ordsets},
                       {atom,{472,23},ordset},
                       [{user_type,{472,30},b_var,[]}]]}]]},
            {type,
                {473,7},
                constraint,
                [{atom,{473,7},is_subtype},
                 [{var,{473,7},'Blocks'},{user_type,{473,17},block_map,[]}]]},
            {type,
                {474,7},
                constraint,
                [{atom,{474,7},is_subtype},
                 [{var,{474,7},'Def'},
                  {remote_type,
                      {474,14},
                      [{atom,{474,14},ordsets},
                       {atom,{474,22},ordset},
                       [{user_type,{474,29},b_var,[]}]]}]]},
            {type,
                {475,7},
                constraint,
                [{atom,{475,7},is_subtype},
                 [{var,{475,7},'Unused'},
                  {remote_type,
                      {475,17},
                      [{atom,{475,17},ordsets},
                       {atom,{475,25},ordset},
                       [{user_type,{475,32},b_var,[]}]]}]]}]]}]}}.
{function,
    {477,1},
    def_unused,3,
    [{clause,
         {477,1},
         [{var,{477,1},'_'},{var,{477,1},'_'},{var,{477,1},'_'}],
         [[{call,
               {477,1},
               {remote,
                   {477,1},
                   {atom,{477,1},fake},
                   {atom,{477,1},is_beam_bif_info}},
               []}]],
         [{debug_line,477,153},{atom,{477,1},ignore}]},
     {clause,
         {477,1},
         [{var,{477,12},'Ls'},{var,{477,16},'Unused'},{var,{477,24},'Blocks'}],
         [[{call,
               {477,37},
               {remote,{477,37},{atom,{477,37},erlang},{atom,{477,37},is_map}},
               [{var,{477,44},'Blocks'}]}]],
         [{debug_line,478,154},
          {match,
              {478,5},
              {var,{478,5},'Blks'},
              {lc,{478,12},
                  {block,0,
                      [{call,
                           {478,13},
                           {remote,
                               {478,13},
                               {atom,{478,13},erlang},
                               {atom,{478,13},map_get}},
                           [{var,{478,21},'L'},{var,{478,24},'Blocks'}]}]},
                  [{block,0,[{atom,{478,40},true}]},
                   {generate,
                       {478,37},
                       {var,{478,35},'L'},
                       {var,{478,40},'Ls'}}]}},
          {debug_line,479,155},
          {match,
              {479,5},
              {var,{479,5},'Preds'},
              {call,
                  {479,13},
                  {remote,
                      {479,17},
                      {atom,{479,13},sets},
                      {atom,{479,18},from_list}},
                  [{var,{479,28},'Ls'}]}},
          {debug_line,480,156},
          {call,
              {480,5},
              {atom,{480,5},def_unused_1},
              [{var,{480,18},'Blks'},
               {var,{480,24},'Preds'},
               {nil,{480,31}},
               {var,{480,35},'Unused'}]}]}]}.
{attribute,
    {495,2},
    spec,
    {{dominators,2},
     [{type,
          {495,17},
          bounded_fun,
          [{type,
               {495,17},
               'fun',
               [{type,
                    {495,17},
                    product,
                    [{var,{495,18},'Labels'},{var,{495,26},'Blocks'}]},
                {var,{495,37},'Result'}]},
           [{type,
                {496,7},
                constraint,
                [{atom,{496,7},is_subtype},
                 [{var,{496,7},'Labels'},
                  {type,{496,17},list,[{user_type,{496,18},label,[]}]}]]},
            {type,
                {497,7},
                constraint,
                [{atom,{497,7},is_subtype},
                 [{var,{497,7},'Blocks'},{user_type,{497,17},block_map,[]}]]},
            {type,
                {498,7},
                constraint,
                [{atom,{498,7},is_subtype},
                 [{var,{498,7},'Result'},
                  {type,
                      {498,17},
                      tuple,
                      [{user_type,{498,18},dominator_map,[]},
                       {user_type,{498,35},numbering_map,[]}]}]]}]]}]}}.
{function,{499,1},
          dominators,2,
          [{clause,{499,1},
                   [{var,{499,1},'_'},{var,{499,1},'_'}],
                   [[{call,{499,1},
                           {remote,{499,1},
                                   {atom,{499,1},fake},
                                   {atom,{499,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,499,157},{atom,{499,1},ignore}]},
           {clause,{499,1},
                   [{var,{499,12},'Labels'},{var,{499,20},'Blocks'}],
                   [[{call,{499,33},
                           {remote,{499,33},
                                   {atom,{499,33},erlang},
                                   {atom,{499,33},is_map}},
                           [{var,{499,40},'Blocks'}]}]],
                   [{debug_line,500,158},
                    {match,{500,5},
                           {var,{500,5},'Preds'},
                           {call,{500,13},
                                 {atom,{500,13},predecessors},
                                 [{var,{500,26},'Blocks'}]}},
                    {debug_line,501,159},
                    {call,{501,5},
                          {atom,{501,5},dominators_from_predecessors},
                          [{var,{501,34},'Labels'},
                           {var,{501,42},'Preds'}]}]}]}.
{attribute,
    {503,2},
    spec,
    {{dominators_from_predecessors,2},
     [{type,
          {503,35},
          bounded_fun,
          [{type,
               {503,35},
               'fun',
               [{type,
                    {503,35},
                    product,
                    [{var,{503,36},'Labels'},{var,{503,44},'Preds'}]},
                {var,{503,54},'Result'}]},
           [{type,
                {504,7},
                constraint,
                [{atom,{504,7},is_subtype},
                 [{var,{504,7},'Labels'},
                  {type,{504,17},list,[{user_type,{504,18},label,[]}]}]]},
            {type,
                {505,7},
                constraint,
                [{atom,{505,7},is_subtype},
                 [{var,{505,7},'Preds'},
                  {user_type,{505,16},predecessor_map,[]}]]},
            {type,
                {506,7},
                constraint,
                [{atom,{506,7},is_subtype},
                 [{var,{506,7},'Result'},
                  {type,
                      {506,17},
                      tuple,
                      [{user_type,{506,18},dominator_map,[]},
                       {user_type,{506,35},numbering_map,[]}]}]]}]]}]}}.
{function,
    {507,1},
    dominators_from_predecessors,2,
    [{clause,
         {507,1},
         [{var,{507,1},'_'},{var,{507,1},'_'}],
         [[{call,
               {507,1},
               {remote,
                   {507,1},
                   {atom,{507,1},fake},
                   {atom,{507,1},is_beam_bif_info}},
               []}]],
         [{debug_line,507,160},{atom,{507,1},ignore}]},
     {clause,
         {507,1},
         [{var,{507,30},'Top0'},{var,{507,36},'Preds'}],
         [[{call,
               {507,48},
               {remote,{507,48},{atom,{507,48},erlang},{atom,{507,48},is_map}},
               [{var,{507,55},'Preds'}]}]],
         [{debug_line,508,161},
          {match,
              {508,5},
              {var,{508,5},'Df'},
              {call,
                  {508,10},
                  {remote,
                      {508,14},
                      {atom,{508,10},maps},
                      {atom,{508,15},from_list}},
                  [{block,0,
                       [{call,
                            {508,25},
                            {atom,{508,25},number},
                            [{var,{508,32},'Top0'},{integer,{508,38},0}]}]}]}},
          {debug_line,509,162},
          {match,
              {509,5},
              {cons,
                  {509,5},
                  {tuple,{509,6},[{integer,{509,7},0},{nil,{509,9}}]},
                  {var,{509,13},'Top'}},
              {lc,{509,20},
                  {block,0,
                      [{tuple,
                           {509,21},
                           [{var,{509,22},'L'},
                            {call,
                                {509,24},
                                {remote,
                                    {509,24},
                                    {atom,{509,24},erlang},
                                    {atom,{509,24},map_get}},
                                [{var,{509,32},'L'},
                                 {var,{509,35},'Preds'}]}]}]},
                  [{block,0,[{atom,{509,51},true}]},
                   {generate,
                       {509,48},
                       {var,{509,46},'L'},
                       {var,{509,51},'Top0'}}]}},
          {debug_line,513,163},
          {match,
              {513,5},
              {var,{513,5},'Acc'},
              {map,
                  {513,11},
                  [{map_field_assoc,
                       {513,14},
                       {integer,{513,13},0},
                       {cons,{513,16},{integer,{513,17},0},{nil,{513,18}}}}]}},
          {debug_line,514,164},
          {tuple,
              {514,5},
              [{call,
                   {514,6},
                   {atom,{514,6},dominators_1},
                   [{var,{514,19},'Top'},
                    {var,{514,24},'Df'},
                    {var,{514,28},'Acc'}]},
               {var,{514,33},'Df'}]}]}]}.
{attribute,{520,2},
           spec,
           {{common_dominators,3},
            [{type,{520,24},
                   'fun',
                   [{type,{520,24},
                          product,
                          [{type,{520,25},
                                 list,
                                 [{user_type,{520,26},label,[]}]},
                           {user_type,{520,36},dominator_map,[]},
                           {user_type,{520,53},numbering_map,[]}]},
                    {type,{520,73},list,[{user_type,{520,74},label,[]}]}]}]}}.
{function,
    {521,1},
    common_dominators,3,
    [{clause,
         {521,1},
         [{var,{521,1},'_'},{var,{521,1},'_'},{var,{521,1},'_'}],
         [[{call,
               {521,1},
               {remote,
                   {521,1},
                   {atom,{521,1},fake},
                   {atom,{521,1},is_beam_bif_info}},
               []}]],
         [{debug_line,521,165},{atom,{521,1},ignore}]},
     {clause,
         {521,1},
         [{var,{521,19},'Ls'},{var,{521,23},'Dom'},{var,{521,28},'Numbering'}],
         [[{call,
               {521,44},
               {remote,{521,44},{atom,{521,44},erlang},{atom,{521,44},is_map}},
               [{var,{521,51},'Dom'}]}]],
         [{debug_line,522,166},
          {match,
              {522,5},
              {var,{522,5},'Doms'},
              {lc,{522,12},
                  {block,0,
                      [{call,
                           {522,13},
                           {remote,
                               {522,13},
                               {atom,{522,13},erlang},
                               {atom,{522,13},map_get}},
                           [{var,{522,21},'L'},{var,{522,24},'Dom'}]}]},
                  [{block,0,[{atom,{522,37},true}]},
                   {generate,
                       {522,34},
                       {var,{522,32},'L'},
                       {var,{522,37},'Ls'}}]}},
          {debug_line,523,167},
          {call,
              {523,5},
              {atom,{523,5},dom_intersection},
              [{var,{523,22},'Doms'},{var,{523,28},'Numbering'}]}]}]}.
{attribute,{532,2},
           spec,
           {{eval_instr,1},
            [{type,{532,17},
                   'fun',
                   [{type,{532,17},product,[{user_type,{532,18},b_set,[]}]},
                    {type,{532,30},
                          union,
                          [{user_type,{532,30},b_literal,[]},
                           {atom,{532,44},any},
                           {atom,{532,52},failed}]}]}]}}.
{function,
 {534,1},
 eval_instr,1,
 [{clause,
   {534,1},
   [{var,{534,1},'_'}],
   [[{call,
      {534,1},
      {remote,{534,1},{atom,{534,1},fake},{atom,{534,1},is_beam_bif_info}},
      []}]],
   [{debug_line,534,168},{atom,{534,1},ignore}]},
  {clause,
   {534,1},
   [{tuple,
     {534,12},
     [{atom,{534,12},b_set},
      {var,{534,12},'_'},
      {var,{534,12},'_'},
      {tuple,{534,22},[{atom,{534,23},bif},{var,{534,27},'Bif'}]},
      {var,{534,37},'Args'}]}],
   [],
   [{debug_line,535,169},
    {match,
     {535,5},
     {var,{535,5},'LitArgs'},
     {'case',
      {535,15},
      {var,{535,20},'Args'},
      [{clause,
        {536,19},
        [{cons,
          {536,19},
          {tuple,{536,20},[{atom,{536,20},b_literal},{var,{536,35},'Arg1'}]},
          {nil,{536,40}}}],
        [],
        [{debug_line,537,170},
         {cons,{537,23},{var,{537,24},'Arg1'},{nil,{537,28}}}]},
       {clause,
        {538,19},
        [{cons,
          {538,19},
          {tuple,{538,20},[{atom,{538,20},b_literal},{var,{538,35},'Arg1'}]},
          {cons,
           {538,41},
           {tuple,{538,41},[{atom,{538,41},b_literal},{var,{538,56},'Arg2'}]},
           {nil,{538,61}}}}],
        [],
        [{debug_line,539,171},
         {cons,
          {539,23},
          {var,{539,24},'Arg1'},
          {cons,{539,29},{var,{539,29},'Arg2'},{nil,{539,33}}}}]},
       {clause,
        {540,19},
        [{cons,
          {540,19},
          {tuple,{540,20},[{atom,{540,20},b_literal},{var,{540,35},'Arg1'}]},
          {cons,
           {540,41},
           {tuple,{540,41},[{atom,{540,41},b_literal},{var,{540,56},'Arg2'}]},
           {cons,
            {540,62},
            {tuple,{540,62},[{atom,{540,62},b_literal},{var,{540,77},'Arg3'}]},
            {nil,{540,82}}}}}],
        [],
        [{debug_line,541,172},
         {cons,
          {541,23},
          {var,{541,24},'Arg1'},
          {cons,
           {541,29},
           {var,{541,29},'Arg2'},
           {cons,{541,34},{var,{541,34},'Arg3'},{nil,{541,38}}}}}]},
       {clause,
        {542,19},
        [{var,{542,19},'_'}],
        [],
        [{debug_line,543,173},{atom,{543,23},none}]}]}},
    {debug_line,545,174},
    {'case',
     {545,5},
     {var,{545,10},'LitArgs'},
     [{clause,
       {546,9},
       [{atom,{546,9},none}],
       [],
       [{debug_line,547,175},{atom,{547,13},any}]},
      {clause,
       {548,9},
       [{var,{548,9},'_'}],
       [],
       [{debug_line,549,176},
        {match,
         {549,13},
         {var,{549,13},'Arity'},
         {call,
          {549,21},
          {remote,{549,21},{atom,{549,21},erlang},{atom,{549,21},length}},
          [{var,{549,28},'LitArgs'}]}},
        {debug_line,550,177},
        {'case',
         {550,13},
         {call,
          {550,18},
          {remote,{550,26},{atom,{550,18},erl_bifs},{atom,{550,27},is_pure}},
          [{atom,{550,35},erlang},
           {var,{550,43},'Bif'},
           {var,{550,48},'Arity'}]},
         [{clause,
           {551,17},
           [{atom,{551,17},true}],
           [],
           [{debug_line,552,178},
            {'try',
             {552,21},
             [{call,
               {552,25},
               {remote,{552,25},{atom,{552,25},erlang},{atom,{552,25},apply}},
               [{atom,{552,31},erlang},
                {var,{552,39},'Bif'},
                {var,{552,44},'LitArgs'}]}],
             [{clause,
               {553,25},
               [{var,{553,25},'Result'}],
               [],
               [{debug_line,554,179},
                {tuple,
                 {554,29},
                 [{atom,{554,29},b_literal},{var,{554,44},'Result'}]}]}],
             [{clause,
               {555,27},
               [{tuple,
                 {555,27},
                 [{atom,{555,27},error},
                  {var,{555,33},'_'},
                  {var,{555,33},'_'}]}],
               [],
               [{debug_line,556,180},{atom,{556,29},failed}]}],
             []}]},
          {clause,
           {558,17},
           [{atom,{558,17},false}],
           [],
           [{debug_line,559,181},{atom,{559,21},any}]}]}]}]}]},
  {clause,
   {562,1},
   [{var,{562,12},'_'}],
   [],
   [{debug_line,563,182},{atom,{563,5},any}]}]}.
{attribute,
    {565,2},
    spec,
    {{fold_instrs,4},
     [{type,
          {565,18},
          bounded_fun,
          [{type,
               {565,18},
               'fun',
               [{type,
                    {565,18},
                    product,
                    [{var,{565,19},'Fun'},
                     {var,{565,24},'Labels'},
                     {var,{565,32},'Acc0'},
                     {var,{565,38},'Blocks'}]},
                {type,{565,49},any,[]}]},
           [{type,
                {566,7},
                constraint,
                [{atom,{566,7},is_subtype},
                 [{var,{566,7},'Fun'},
                  {type,
                      {566,18},
                      'fun',
                      [{type,
                           {566,18},
                           product,
                           [{type,
                                {566,19},
                                union,
                                [{user_type,{566,19},b_set,[]},
                                 {user_type,{566,27},terminator,[]}]},
                            {type,{566,41},any,[]}]},
                       {type,{566,51},any,[]}]}]]},
            {type,
                {567,7},
                constraint,
                [{atom,{567,7},is_subtype},
                 [{var,{567,7},'Labels'},
                  {type,{567,17},list,[{user_type,{567,18},label,[]}]}]]},
            {type,
                {568,7},
                constraint,
                [{atom,{568,7},is_subtype},
                 [{var,{568,7},'Acc0'},{type,{568,15},any,[]}]]},
            {type,
                {569,7},
                constraint,
                [{atom,{569,7},is_subtype},
                 [{var,{569,7},'Blocks'},
                  {user_type,{569,17},block_map,[]}]]}]]}]}}.
{function,{571,1},
          fold_instrs,4,
          [{clause,{571,1},
                   [{var,{571,1},'_'},
                    {var,{571,1},'_'},
                    {var,{571,1},'_'},
                    {var,{571,1},'_'}],
                   [[{call,{571,1},
                           {remote,{571,1},
                                   {atom,{571,1},fake},
                                   {atom,{571,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,571,183},{atom,{571,1},ignore}]},
           {clause,{571,1},
                   [{var,{571,13},'Fun'},
                    {var,{571,18},'Labels'},
                    {var,{571,26},'Acc0'},
                    {var,{571,32},'Blocks'}],
                   [[{call,{571,45},
                           {remote,{571,45},
                                   {atom,{571,45},erlang},
                                   {atom,{571,45},is_map}},
                           [{var,{571,52},'Blocks'}]}]],
                   [{debug_line,572,184},
                    {call,{572,5},
                          {atom,{572,5},fold_instrs_1},
                          [{var,{572,19},'Labels'},
                           {var,{572,27},'Fun'},
                           {var,{572,32},'Blocks'},
                           {var,{572,40},'Acc0'}]}]}]}.
{attribute,
    {578,2},
    spec,
    {{mapfold_blocks,4},
     [{type,
          {578,21},
          bounded_fun,
          [{type,
               {578,21},
               'fun',
               [{type,
                    {578,21},
                    product,
                    [{var,{578,22},'Fun'},
                     {var,{578,27},'Labels'},
                     {var,{578,35},'Acc'},
                     {var,{578,40},'Blocks'}]},
                {var,{578,51},'Result'}]},
           [{type,
                {579,7},
                constraint,
                [{atom,{579,7},is_subtype},
                 [{var,{579,7},'Fun'},
                  {type,
                      {579,18},
                      'fun',
                      [{type,
                           {579,18},
                           product,
                           [{user_type,{579,19},label,[]},
                            {user_type,{579,28},b_blk,[]},
                            {type,{579,37},any,[]}]},
                       {type,
                           {579,47},
                           tuple,
                           [{user_type,{579,48},b_blk,[]},
                            {type,{579,57},any,[]}]}]}]]},
            {type,
                {580,7},
                constraint,
                [{atom,{580,7},is_subtype},
                 [{var,{580,7},'Labels'},
                  {type,{580,17},list,[{user_type,{580,18},label,[]}]}]]},
            {type,
                {581,7},
                constraint,
                [{atom,{581,7},is_subtype},
                 [{var,{581,7},'Acc'},{type,{581,14},any,[]}]]},
            {type,
                {582,7},
                constraint,
                [{atom,{582,7},is_subtype},
                 [{var,{582,7},'Blocks'},{user_type,{582,17},block_map,[]}]]},
            {type,
                {583,7},
                constraint,
                [{atom,{583,7},is_subtype},
                 [{var,{583,7},'Result'},
                  {type,
                      {583,17},
                      tuple,
                      [{user_type,{583,18},block_map,[]},
                       {type,{583,31},any,[]}]}]]}]]}]}}.
{function,
    {584,1},
    mapfold_blocks,4,
    [{clause,
         {584,1},
         [{var,{584,1},'_'},
          {var,{584,1},'_'},
          {var,{584,1},'_'},
          {var,{584,1},'_'}],
         [[{call,
               {584,1},
               {remote,
                   {584,1},
                   {atom,{584,1},fake},
                   {atom,{584,1},is_beam_bif_info}},
               []}]],
         [{debug_line,584,185},{atom,{584,1},ignore}]},
     {clause,
         {584,1},
         [{var,{584,16},'Fun'},
          {var,{584,21},'Labels'},
          {var,{584,29},'Acc'},
          {var,{584,34},'Blocks'}],
         [[{call,
               {584,47},
               {remote,{584,47},{atom,{584,47},erlang},{atom,{584,47},is_map}},
               [{var,{584,54},'Blocks'}]}]],
         [{debug_line,585,186},
          {call,
              {585,5},
              {remote,{585,5},{atom,{585,5},lists},{atom,{585,5},foldl}},
              [{block,0,
                   [{'fun',
                        {585,11},
                        {clauses,
                            [{clause,
                                 {585,14},
                                 [{var,{585,15},'Lbl'},{var,{585,20},'A'}],
                                 [],
                                 [{debug_line,586,187},
                                  {call,
                                      {586,19},
                                      {atom,{586,19},mapfold_blocks_1},
                                      [{var,{586,36},'Fun'},
                                       {var,{586,41},'Lbl'},
                                       {var,{586,46},'A'}]}]}]}}]},
               {block,0,
                   [{debug_line,587,188},
                    {tuple,
                        {587,16},
                        [{var,{587,17},'Blocks'},{var,{587,25},'Acc'}]}]},
               {var,{587,31},'Labels'}]}]}]}.
{function,
    {589,1},
    mapfold_blocks_1,3,
    [{clause,
         {589,1},
         [{var,{589,1},'_'},{var,{589,1},'_'},{var,{589,1},'_'}],
         [[{call,
               {589,1},
               {remote,
                   {589,1},
                   {atom,{589,1},fake},
                   {atom,{589,1},is_beam_bif_info}},
               []}]],
         [{debug_line,589,189},{atom,{589,1},ignore}]},
     {clause,
         {589,1},
         [{var,{589,18},'Fun'},
          {var,{589,23},'Lbl'},
          {tuple,{589,28},[{var,{589,29},'Blocks0'},{var,{589,38},'Acc0'}]}],
         [],
         [{debug_line,590,190},
          {match,
              {590,5},
              {var,{590,5},'Block0'},
              {call,
                  {590,14},
                  {remote,
                      {590,14},
                      {atom,{590,14},erlang},
                      {atom,{590,14},map_get}},
                  [{var,{590,22},'Lbl'},{var,{590,27},'Blocks0'}]}},
          {debug_line,591,191},
          {match,
              {591,5},
              {tuple,{591,5},[{var,{591,6},'Block'},{var,{591,13},'Acc'}]},
              {call,
                  {591,20},
                  {var,{591,20},'Fun'},
                  [{var,{591,24},'Lbl'},
                   {var,{591,29},'Block0'},
                   {var,{591,37},'Acc0'}]}},
          {debug_line,592,192},
          {match,
              {592,5},
              {var,{592,5},'Blocks'},
              {map,
                  {592,21},
                  {var,{592,14},'Blocks0'},
                  [{map_field_exact,
                       {592,26},
                       {var,{592,23},'Lbl'},
                       {var,{592,28},'Block'}}]}},
          {debug_line,593,193},
          {tuple,{593,5},[{var,{593,6},'Blocks'},{var,{593,14},'Acc'}]}]}]}.
{attribute,
    {595,2},
    spec,
    {{mapfold_instrs,4},
     [{type,
          {595,21},
          bounded_fun,
          [{type,
               {595,21},
               'fun',
               [{type,
                    {595,21},
                    product,
                    [{var,{595,22},'Fun'},
                     {var,{595,27},'Labels'},
                     {var,{595,35},'Acc0'},
                     {var,{595,41},'Blocks0'}]},
                {type,
                    {595,53},
                    tuple,
                    [{var,{595,54},'Blocks'},{var,{595,61},'Acc'}]}]},
           [{type,
                {596,7},
                constraint,
                [{atom,{596,7},is_subtype},
                 [{var,{596,7},'Fun'},
                  {type,
                      {596,18},
                      'fun',
                      [{type,
                           {596,18},
                           product,
                           [{type,
                                {596,19},
                                union,
                                [{user_type,{596,19},b_set,[]},
                                 {user_type,{596,27},terminator,[]}]},
                            {type,{596,41},any,[]}]},
                       {type,{596,51},any,[]}]}]]},
            {type,
                {597,7},
                constraint,
                [{atom,{597,7},is_subtype},
                 [{var,{597,7},'Labels'},
                  {type,{597,17},list,[{user_type,{597,18},label,[]}]}]]},
            {type,
                {598,7},
                constraint,
                [{atom,{598,7},is_subtype},
                 [{var,{598,7},'Acc0'},{type,{598,15},any,[]}]]},
            {type,
                {599,7},
                constraint,
                [{atom,{599,7},is_subtype},
                 [{var,{599,7},'Acc'},{type,{599,14},any,[]}]]},
            {type,
                {600,7},
                constraint,
                [{atom,{600,7},is_subtype},
                 [{var,{600,7},'Blocks0'},{user_type,{600,18},block_map,[]}]]},
            {type,
                {601,7},
                constraint,
                [{atom,{601,7},is_subtype},
                 [{var,{601,7},'Blocks'},
                  {user_type,{601,17},block_map,[]}]]}]]}]}}.
{function,{603,1},
          mapfold_instrs,4,
          [{clause,{603,1},
                   [{var,{603,1},'_'},
                    {var,{603,1},'_'},
                    {var,{603,1},'_'},
                    {var,{603,1},'_'}],
                   [[{call,{603,1},
                           {remote,{603,1},
                                   {atom,{603,1},fake},
                                   {atom,{603,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,603,194},{atom,{603,1},ignore}]},
           {clause,{603,1},
                   [{var,{603,16},'Fun'},
                    {var,{603,21},'Labels'},
                    {var,{603,29},'Acc0'},
                    {var,{603,35},'Blocks'}],
                   [[{call,{603,48},
                           {remote,{603,48},
                                   {atom,{603,48},erlang},
                                   {atom,{603,48},is_map}},
                           [{var,{603,55},'Blocks'}]}]],
                   [{debug_line,604,195},
                    {call,{604,5},
                          {atom,{604,5},mapfold_instrs_1},
                          [{var,{604,22},'Labels'},
                           {var,{604,30},'Fun'},
                           {var,{604,35},'Blocks'},
                           {var,{604,43},'Acc0'}]}]}]}.
{attribute,
    {606,2},
    spec,
    {{flatmapfold_instrs,4},
     [{type,
          {606,25},
          bounded_fun,
          [{type,
               {606,25},
               'fun',
               [{type,
                    {606,25},
                    product,
                    [{var,{606,26},'Fun'},
                     {var,{606,31},'Labels'},
                     {var,{606,39},'Acc0'},
                     {var,{606,45},'Blocks0'}]},
                {type,
                    {606,57},
                    tuple,
                    [{var,{606,58},'Blocks'},{var,{606,65},'Acc'}]}]},
           [{type,
                {607,7},
                constraint,
                [{atom,{607,7},is_subtype},
                 [{var,{607,7},'Fun'},
                  {type,
                      {607,18},
                      'fun',
                      [{type,
                           {607,18},
                           product,
                           [{type,
                                {607,19},
                                union,
                                [{user_type,{607,19},b_set,[]},
                                 {user_type,{607,27},terminator,[]}]},
                            {type,{607,41},any,[]}]},
                       {type,{607,51},any,[]}]}]]},
            {type,
                {608,7},
                constraint,
                [{atom,{608,7},is_subtype},
                 [{var,{608,7},'Labels'},
                  {type,{608,17},list,[{user_type,{608,18},label,[]}]}]]},
            {type,
                {609,7},
                constraint,
                [{atom,{609,7},is_subtype},
                 [{var,{609,7},'Acc0'},{type,{609,15},any,[]}]]},
            {type,
                {610,7},
                constraint,
                [{atom,{610,7},is_subtype},
                 [{var,{610,7},'Acc'},{type,{610,14},any,[]}]]},
            {type,
                {611,7},
                constraint,
                [{atom,{611,7},is_subtype},
                 [{var,{611,7},'Blocks0'},{user_type,{611,18},block_map,[]}]]},
            {type,
                {612,7},
                constraint,
                [{atom,{612,7},is_subtype},
                 [{var,{612,7},'Blocks'},
                  {user_type,{612,17},block_map,[]}]]}]]}]}}.
{function,{614,1},
          flatmapfold_instrs,4,
          [{clause,{614,1},
                   [{var,{614,1},'_'},
                    {var,{614,1},'_'},
                    {var,{614,1},'_'},
                    {var,{614,1},'_'}],
                   [[{call,{614,1},
                           {remote,{614,1},
                                   {atom,{614,1},fake},
                                   {atom,{614,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,614,196},{atom,{614,1},ignore}]},
           {clause,{614,1},
                   [{var,{614,20},'Fun'},
                    {var,{614,25},'Labels'},
                    {var,{614,33},'Acc0'},
                    {var,{614,39},'Blocks'}],
                   [[{call,{614,52},
                           {remote,{614,52},
                                   {atom,{614,52},erlang},
                                   {atom,{614,52},is_map}},
                           [{var,{614,59},'Blocks'}]}]],
                   [{debug_line,615,197},
                    {call,{615,5},
                          {atom,{615,5},flatmapfold_instrs_1},
                          [{var,{615,26},'Labels'},
                           {var,{615,34},'Fun'},
                           {var,{615,39},'Blocks'},
                           {var,{615,47},'Acc0'}]}]}]}.
{attribute,{617,2},
           type,
           {fold_fun,{type,{617,25},
                           'fun',
                           [{type,{617,25},
                                  product,
                                  [{user_type,{617,26},label,[]},
                                   {user_type,{617,35},b_blk,[]},
                                   {type,{617,44},any,[]}]},
                            {type,{617,54},any,[]}]},
                     []}}.
{attribute,
    {623,2},
    spec,
    {{fold_blocks,4},
     [{type,
          {623,18},
          bounded_fun,
          [{type,
               {623,18},
               'fun',
               [{type,
                    {623,18},
                    product,
                    [{var,{623,19},'Fun'},
                     {var,{623,24},'Labels'},
                     {var,{623,32},'Acc0'},
                     {var,{623,38},'Blocks'}]},
                {type,{623,49},any,[]}]},
           [{type,
                {624,7},
                constraint,
                [{atom,{624,7},is_subtype},
                 [{var,{624,7},'Fun'},{user_type,{624,14},fold_fun,[]}]]},
            {type,
                {625,7},
                constraint,
                [{atom,{625,7},is_subtype},
                 [{var,{625,7},'Labels'},
                  {type,{625,17},list,[{user_type,{625,18},label,[]}]}]]},
            {type,
                {626,7},
                constraint,
                [{atom,{626,7},is_subtype},
                 [{var,{626,7},'Acc0'},{type,{626,15},any,[]}]]},
            {type,
                {627,7},
                constraint,
                [{atom,{627,7},is_subtype},
                 [{var,{627,7},'Blocks'},
                  {type,
                      {627,17},
                      map,
                      [{type,
                           {627,26},
                           map_field_exact,
                           [{user_type,{627,19},label,[]},
                            {user_type,{627,28},b_blk,[]}]}]}]]}]]}]}}.
{function,{629,1},
          fold_blocks,4,
          [{clause,{629,1},
                   [{var,{629,1},'_'},
                    {var,{629,1},'_'},
                    {var,{629,1},'_'},
                    {var,{629,1},'_'}],
                   [[{call,{629,1},
                           {remote,{629,1},
                                   {atom,{629,1},fake},
                                   {atom,{629,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,629,198},{atom,{629,1},ignore}]},
           {clause,{629,1},
                   [{var,{629,13},'Fun'},
                    {var,{629,18},'Labels'},
                    {var,{629,26},'Acc0'},
                    {var,{629,32},'Blocks'}],
                   [[{call,{629,45},
                           {remote,{629,45},
                                   {atom,{629,45},erlang},
                                   {atom,{629,45},is_map}},
                           [{var,{629,52},'Blocks'}]}]],
                   [{debug_line,630,199},
                    {call,{630,5},
                          {atom,{630,5},fold_blocks_1},
                          [{var,{630,19},'Labels'},
                           {var,{630,27},'Fun'},
                           {var,{630,32},'Blocks'},
                           {var,{630,40},'Acc0'}]}]}]}.
{attribute,
    {639,2},
    spec,
    {{linearize,1},
     [{type,
          {639,16},
          bounded_fun,
          [{type,
               {639,16},
               'fun',
               [{type,{639,16},product,[{var,{639,17},'Blocks'}]},
                {var,{639,28},'Linear'}]},
           [{type,
                {640,7},
                constraint,
                [{atom,{640,7},is_subtype},
                 [{var,{640,7},'Blocks'},{user_type,{640,17},block_map,[]}]]},
            {type,
                {641,7},
                constraint,
                [{atom,{641,7},is_subtype},
                 [{var,{641,7},'Linear'},
                  {type,
                      {641,17},
                      list,
                      [{type,
                           {641,18},
                           tuple,
                           [{user_type,{641,19},label,[]},
                            {user_type,{641,27},b_blk,[]}]}]}]]}]]}]}}.
{function,
    {643,1},
    linearize,1,
    [{clause,
         {643,1},
         [{var,{643,1},'_'}],
         [[{call,
               {643,1},
               {remote,
                   {643,1},
                   {atom,{643,1},fake},
                   {atom,{643,1},is_beam_bif_info}},
               []}]],
         [{debug_line,643,200},{atom,{643,1},ignore}]},
     {clause,
         {643,1},
         [{var,{643,11},'Blocks'}],
         [[{call,
               {643,24},
               {remote,{643,24},{atom,{643,24},erlang},{atom,{643,24},is_map}},
               [{var,{643,31},'Blocks'}]}]],
         [{debug_line,644,201},
          {match,
              {644,5},
              {var,{644,5},'Seen'},
              {call,
                  {644,12},
                  {remote,{644,16},{atom,{644,12},sets},{atom,{644,17},new}},
                  []}},
          {debug_line,645,202},
          {match,
              {645,5},
              {tuple,{645,5},[{var,{645,6},'Linear0'},{var,{645,14},'_'}]},
              {call,
                  {645,19},
                  {atom,{645,19},linearize_1},
                  [{block,0,
                       [{cons,{645,31},{integer,{645,32},0},{nil,{645,33}}}]},
                   {var,{645,36},'Blocks'},
                   {var,{645,44},'Seen'},
                   {nil,{645,50}}]}},
          {debug_line,646,203},
          {match,
              {646,5},
              {var,{646,5},'Linear'},
              {call,
                  {646,14},
                  {atom,{646,14},fix_phis},
                  [{var,{646,23},'Linear0'},{block,0,[{map,{646,32},[]}]}]}},
          {debug_line,647,204},
          {var,{647,5},'Linear'}]}]}.
{attribute,{649,2},
           spec,
           {{rpo,1},
            [{type,{649,10},
                   bounded_fun,
                   [{type,{649,10},
                          'fun',
                          [{type,{649,10},product,[{var,{649,11},'Blocks'}]},
                           {type,{649,22},list,[{var,{649,23},'Label'}]}]},
                    [{type,{650,7},
                           constraint,
                           [{atom,{650,7},is_subtype},
                            [{var,{650,7},'Blocks'},
                             {user_type,{650,17},block_map,[]}]]},
                     {type,{651,7},
                           constraint,
                           [{atom,{651,7},is_subtype},
                            [{var,{651,7},'Label'},
                             {user_type,{651,16},label,[]}]]}]]}]}}.
{function,
    {653,1},
    rpo,1,
    [{clause,
         {653,1},
         [{var,{653,1},'_'}],
         [[{call,
               {653,1},
               {remote,
                   {653,1},
                   {atom,{653,1},fake},
                   {atom,{653,1},is_beam_bif_info}},
               []}]],
         [{debug_line,653,205},{atom,{653,1},ignore}]},
     {clause,
         {653,1},
         [{var,{653,5},'Blocks'}],
         [],
         [{debug_line,654,206},
          {call,
              {654,5},
              {atom,{654,5},rpo},
              [{block,0,[{cons,{654,9},{integer,{654,10},0},{nil,{654,11}}}]},
               {var,{654,14},'Blocks'}]}]}]}.
{attribute,{656,2},
           spec,
           {{rpo,2},
            [{type,{656,10},
                   bounded_fun,
                   [{type,{656,10},
                          'fun',
                          [{type,{656,10},
                                 product,
                                 [{var,{656,11},'From'},
                                  {var,{656,17},'Blocks'}]},
                           {var,{656,28},'Labels'}]},
                    [{type,{657,7},
                           constraint,
                           [{atom,{657,7},is_subtype},
                            [{var,{657,7},'From'},
                             {type,{657,15},
                                   list,
                                   [{user_type,{657,16},label,[]}]}]]},
                     {type,{658,7},
                           constraint,
                           [{atom,{658,7},is_subtype},
                            [{var,{658,7},'Blocks'},
                             {user_type,{658,17},block_map,[]}]]},
                     {type,{659,7},
                           constraint,
                           [{atom,{659,7},is_subtype},
                            [{var,{659,7},'Labels'},
                             {type,{659,17},
                                   list,
                                   [{user_type,{659,18},label,[]}]}]]}]]}]}}.
{function,
    {661,1},
    rpo,2,
    [{clause,
         {661,1},
         [{var,{661,1},'_'},{var,{661,1},'_'}],
         [[{call,
               {661,1},
               {remote,
                   {661,1},
                   {atom,{661,1},fake},
                   {atom,{661,1},is_beam_bif_info}},
               []}]],
         [{debug_line,661,207},{atom,{661,1},ignore}]},
     {clause,
         {661,1},
         [{var,{661,5},'From'},{var,{661,11},'Blocks'}],
         [[{call,
               {661,24},
               {remote,{661,24},{atom,{661,24},erlang},{atom,{661,24},is_map}},
               [{var,{661,31},'Blocks'}]}]],
         [{debug_line,662,208},
          {match,
              {662,5},
              {var,{662,5},'Seen'},
              {call,
                  {662,12},
                  {remote,{662,16},{atom,{662,12},sets},{atom,{662,17},new}},
                  []}},
          {debug_line,663,209},
          {match,
              {663,5},
              {tuple,{663,5},[{var,{663,6},'Ls'},{var,{663,9},'_'}]},
              {call,
                  {663,14},
                  {atom,{663,14},rpo_1},
                  [{var,{663,20},'From'},
                   {var,{663,26},'Blocks'},
                   {var,{663,34},'Seen'},
                   {nil,{663,40}}]}},
          {debug_line,664,210},
          {var,{664,5},'Ls'}]}]}.
{attribute,{671,2},
           spec,
           {{between,4},
            [{type,{671,14},
                   bounded_fun,
                   [{type,{671,14},
                          'fun',
                          [{type,{671,14},
                                 product,
                                 [{var,{671,15},'From'},
                                  {var,{671,21},'To'},
                                  {var,{671,25},'Preds'},
                                  {var,{671,32},'Blocks'}]},
                           {var,{671,43},'Labels'}]},
                    [{type,{672,7},
                           constraint,
                           [{atom,{672,7},is_subtype},
                            [{var,{672,7},'From'},
                             {user_type,{672,15},label,[]}]]},
                     {type,{673,7},
                           constraint,
                           [{atom,{673,7},is_subtype},
                            [{var,{673,7},'To'},
                             {user_type,{673,13},label,[]}]]},
                     {type,{674,7},
                           constraint,
                           [{atom,{674,7},is_subtype},
                            [{var,{674,7},'Preds'},
                             {user_type,{674,16},predecessor_map,[]}]]},
                     {type,{675,7},
                           constraint,
                           [{atom,{675,7},is_subtype},
                            [{var,{675,7},'Blocks'},
                             {user_type,{675,17},block_map,[]}]]},
                     {type,{676,7},
                           constraint,
                           [{atom,{676,7},is_subtype},
                            [{var,{676,7},'Labels'},
                             {type,{676,17},
                                   list,
                                   [{user_type,{676,18},label,[]}]}]]}]]}]}}.
{function,
    {678,1},
    between,4,
    [{clause,
         {678,1},
         [{var,{678,1},'_'},
          {var,{678,1},'_'},
          {var,{678,1},'_'},
          {var,{678,1},'_'}],
         [[{call,
               {678,1},
               {remote,
                   {678,1},
                   {atom,{678,1},fake},
                   {atom,{678,1},is_beam_bif_info}},
               []}]],
         [{debug_line,678,211},{atom,{678,1},ignore}]},
     {clause,
         {678,1},
         [{var,{678,9},'From'},
          {var,{678,15},'To'},
          {var,{678,19},'Preds'},
          {var,{678,26},'Blocks'}],
         [[{call,
               {678,39},
               {remote,{678,39},{atom,{678,39},erlang},{atom,{678,39},is_map}},
               [{var,{678,46},'Preds'}]},
           {call,
               {678,54},
               {remote,{678,54},{atom,{678,54},erlang},{atom,{678,54},is_map}},
               [{var,{678,61},'Blocks'}]}]],
         [{debug_line,686,212},
          {match,
              {686,5},
              {var,{686,5},'Filter'},
              {call,
                  {686,14},
                  {atom,{686,14},between_make_filter},
                  [{block,0,
                       [{cons,{686,34},{var,{686,35},'To'},{nil,{686,37}}}]},
                   {var,{686,40},'Preds'},
                   {block,0,
                       [{call,
                            {686,47},
                            {remote,
                                {686,51},
                                {atom,{686,47},sets},
                                {atom,{686,52},from_list}},
                            [{block,0,
                                 [{cons,
                                      {686,62},
                                      {var,{686,63},'From'},
                                      {nil,{686,67}}}]}]}]}]}},
          {debug_line,687,213},
          {match,
              {687,5},
              {tuple,{687,5},[{var,{687,6},'Paths'},{var,{687,13},'_'}]},
              {call,
                  {687,18},
                  {atom,{687,18},between_rpo},
                  [{block,0,
                       [{cons,{687,30},{var,{687,31},'From'},{nil,{687,35}}}]},
                   {var,{687,38},'Blocks'},
                   {var,{687,46},'Filter'},
                   {nil,{687,54}}]}},
          {debug_line,689,214},
          {var,{689,5},'Paths'}]}]}.
{attribute,
    {691,2},
    spec,
    {{rename_vars,3},
     [{type,
          {691,18},
          bounded_fun,
          [{type,
               {691,18},
               'fun',
               [{type,
                    {691,18},
                    product,
                    [{var,{691,19},'Rename'},
                     {type,{691,27},list,[{user_type,{691,28},label,[]}]},
                     {user_type,{691,38},block_map,[]}]},
                {user_type,{691,54},block_map,[]}]},
           [{type,
                {692,7},
                constraint,
                [{atom,{692,7},is_subtype},
                 [{var,{692,7},'Rename'},
                  {type,
                      {692,17},
                      union,
                      [{user_type,{692,17},rename_map,[]},
                       {user_type,{692,32},rename_proplist,[]}]}]]}]]}]}}.
{function,
 {694,1},
 rename_vars,3,
 [{clause,
   {694,1},
   [{var,{694,1},'_'},{var,{694,1},'_'},{var,{694,1},'_'}],
   [[{call,
      {694,1},
      {remote,{694,1},{atom,{694,1},fake},{atom,{694,1},is_beam_bif_info}},
      []}]],
   [{debug_line,694,215},{atom,{694,1},ignore}]},
  {clause,
   {694,1},
   [{var,{694,13},'Rename'},{var,{694,21},'Labels'},{var,{694,29},'Blocks'}],
   [[{call,
      {694,42},
      {remote,{694,42},{atom,{694,42},erlang},{atom,{694,42},is_list}},
      [{var,{694,50},'Rename'}]}]],
   [{debug_line,695,216},
    {call,
     {695,5},
     {atom,{695,5},rename_vars},
     [{block,0,
       [{call,
         {695,17},
         {remote,{695,21},{atom,{695,17},maps},{atom,{695,22},from_list}},
         [{var,{695,32},'Rename'}]}]},
      {var,{695,41},'Labels'},
      {var,{695,49},'Blocks'}]}]},
  {clause,
   {696,1},
   [{var,{696,13},'Rename'},{var,{696,21},'Labels'},{var,{696,29},'Blocks'}],
   [[{call,
      {696,42},
      {remote,{696,42},{atom,{696,42},erlang},{atom,{696,42},is_map}},
      [{var,{696,49},'Rename'}]},
     {call,
      {696,58},
      {remote,{696,58},{atom,{696,58},erlang},{atom,{696,58},is_map}},
      [{var,{696,65},'Blocks'}]}]],
   [{debug_line,697,217},
    {match,
     {697,5},
     {var,{697,5},'Preds'},
     {call,
      {697,13},
      {remote,{697,17},{atom,{697,13},sets},{atom,{697,18},from_list}},
      [{var,{697,28},'Labels'}]}},
    {debug_line,698,218},
    {match,
     {698,5},
     {var,{698,5},'F'},
     {'fun',
      {698,9},
      {clauses,
       [{clause,
         {698,12},
         [{match,
           {698,13},
           {tuple,
            {698,13},
            [{atom,{698,13},b_set},
             {var,{698,13},'_'},
             {var,{698,13},'_'},
             {atom,{698,23},phi},
             {var,{698,32},'Args0'}]},
           {var,{698,39},'Set'}}],
         [],
         [{debug_line,699,219},
          {match,
           {699,17},
           {var,{699,17},'Args'},
           {call,
            {699,24},
            {atom,{699,24},rename_phi_vars},
            [{var,{699,40},'Args0'},
             {var,{699,47},'Preds'},
             {var,{699,54},'Rename'}]}},
          {debug_line,700,220},
          {call,
           {700,17},
           {atom,{700,17},normalize},
           [{block,0,
             [{block,
               {700,27},
               [{match,{700,27},{var,{700,27},rec25},{var,{700,27},'Set'}},
                {'case',
                 {700,37},
                 {var,{700,27},rec25},
                 [{clause,
                   {700,37},
                   [{tuple,
                     {700,37},
                     [{atom,{700,37},b_set},
                      {var,{700,37},'_'},
                      {var,{700,37},'_'},
                      {var,{700,37},'_'},
                      {var,{700,37},'_'}]}],
                   [],
                   [{call,
                     {700,37},
                     {remote,
                      {700,37},
                      {atom,{700,37},erlang},
                      {atom,{700,37},setelement}},
                     [{integer,{700,37},5},
                      {var,{700,27},rec25},
                      {var,{700,42},'Args'}]}]},
                  {clause,
                   [{generated,true},{location,{700,37}}],
                   [{var,[{generated,true},{location,{700,37}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{700,37}}],
                     {remote,
                      [{generated,true},{location,{700,37}}],
                      {atom,[{generated,true},{location,{700,37}}],erlang},
                      {atom,[{generated,true},{location,{700,37}}],error}},
                     [{tuple,
                       [{generated,true},{location,{700,37}}],
                       [{atom,
                         [{generated,true},{location,{700,37}}],
                         badrecord},
                        {var,{700,27},rec25}]}]}]}]}]}]}]}]},
        {clause,
         {701,12},
         [{match,
           {701,13},
           {tuple,
            {701,13},
            [{atom,{701,13},b_set},
             {var,{701,13},'_'},
             {var,{701,13},'_'},
             {var,{701,13},'_'},
             {var,{701,25},'Args0'}]},
           {var,{701,32},'Set'}}],
         [],
         [{debug_line,702,221},
          {match,
           {702,17},
           {var,{702,17},'Args'},
           {lc,
            {702,24},
            {block,0,
             [{call,
               {702,25},
               {atom,{702,25},rename_var},
               [{var,{702,36},'A'},{var,{702,39},'Rename'}]}]},
            [{block,0,[{atom,{702,55},true}]},
             {generate,{702,52},{var,{702,50},'A'},{var,{702,55},'Args0'}}]}},
          {debug_line,703,222},
          {call,
           {703,17},
           {atom,{703,17},normalize},
           [{block,0,
             [{block,
               {703,27},
               [{match,{703,27},{var,{703,27},rec26},{var,{703,27},'Set'}},
                {'case',
                 {703,37},
                 {var,{703,27},rec26},
                 [{clause,
                   {703,37},
                   [{tuple,
                     {703,37},
                     [{atom,{703,37},b_set},
                      {var,{703,37},'_'},
                      {var,{703,37},'_'},
                      {var,{703,37},'_'},
                      {var,{703,37},'_'}]}],
                   [],
                   [{call,
                     {703,37},
                     {remote,
                      {703,37},
                      {atom,{703,37},erlang},
                      {atom,{703,37},setelement}},
                     [{integer,{703,37},5},
                      {var,{703,27},rec26},
                      {var,{703,42},'Args'}]}]},
                  {clause,
                   [{generated,true},{location,{703,37}}],
                   [{var,[{generated,true},{location,{703,37}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{703,37}}],
                     {remote,
                      [{generated,true},{location,{703,37}}],
                      {atom,[{generated,true},{location,{703,37}}],erlang},
                      {atom,[{generated,true},{location,{703,37}}],error}},
                     [{tuple,
                       [{generated,true},{location,{703,37}}],
                       [{atom,
                         [{generated,true},{location,{703,37}}],
                         badrecord},
                        {var,{703,27},rec26}]}]}]}]}]}]}]}]},
        {clause,
         {704,12},
         [{match,
           {704,13},
           {tuple,
            {704,13},
            [{atom,{704,13},b_switch},
             {var,{704,13},'_'},
             {var,{704,27},'Bool'},
             {var,{704,13},'_'},
             {var,{704,13},'_'}]},
           {var,{704,33},'Sw'}}],
         [],
         [{debug_line,705,223},
          {call,
           {705,17},
           {atom,{705,17},normalize},
           [{block,0,
             [{block,
               {705,27},
               [{match,
                 {705,39},
                 {var,{705,39},rec27},
                 {call,
                  {705,43},
                  {atom,{705,43},rename_var},
                  [{var,{705,54},'Bool'},{var,{705,60},'Rename'}]}},
                {match,{705,27},{var,{705,27},rec28},{var,{705,27},'Sw'}},
                {'case',
                 {705,39},
                 {var,{705,27},rec28},
                 [{clause,
                   {705,39},
                   [{tuple,
                     {705,39},
                     [{atom,{705,39},b_switch},
                      {var,{705,39},'_'},
                      {var,{705,39},'_'},
                      {var,{705,39},'_'},
                      {var,{705,39},'_'}]}],
                   [],
                   [{call,
                     {705,39},
                     {remote,
                      {705,39},
                      {atom,{705,39},erlang},
                      {atom,{705,39},setelement}},
                     [{integer,{705,39},3},
                      {var,{705,27},rec28},
                      {var,{705,39},rec27}]}]},
                  {clause,
                   [{generated,true},{location,{705,39}}],
                   [{var,[{generated,true},{location,{705,39}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{705,39}}],
                     {remote,
                      [{generated,true},{location,{705,39}}],
                      {atom,[{generated,true},{location,{705,39}}],erlang},
                      {atom,[{generated,true},{location,{705,39}}],error}},
                     [{tuple,
                       [{generated,true},{location,{705,39}}],
                       [{atom,
                         [{generated,true},{location,{705,39}}],
                         badrecord},
                        {var,{705,27},rec28}]}]}]}]}]}]}]}]},
        {clause,
         {706,12},
         [{match,
           {706,13},
           {tuple,
            {706,13},
            [{atom,{706,13},b_br},
             {var,{706,13},'_'},
             {var,{706,24},'Bool'},
             {var,{706,13},'_'},
             {var,{706,13},'_'}]},
           {var,{706,30},'Br'}}],
         [],
         [{debug_line,707,224},
          {call,
           {707,17},
           {atom,{707,17},normalize},
           [{block,0,
             [{block,
               {707,27},
               [{match,
                 {707,35},
                 {var,{707,35},rec29},
                 {call,
                  {707,40},
                  {atom,{707,40},rename_var},
                  [{var,{707,51},'Bool'},{var,{707,57},'Rename'}]}},
                {match,{707,27},{var,{707,27},rec30},{var,{707,27},'Br'}},
                {'case',
                 {707,35},
                 {var,{707,27},rec30},
                 [{clause,
                   {707,35},
                   [{tuple,
                     {707,35},
                     [{atom,{707,35},b_br},
                      {var,{707,35},'_'},
                      {var,{707,35},'_'},
                      {var,{707,35},'_'},
                      {var,{707,35},'_'}]}],
                   [],
                   [{call,
                     {707,35},
                     {remote,
                      {707,35},
                      {atom,{707,35},erlang},
                      {atom,{707,35},setelement}},
                     [{integer,{707,35},3},
                      {var,{707,27},rec30},
                      {var,{707,35},rec29}]}]},
                  {clause,
                   [{generated,true},{location,{707,35}}],
                   [{var,[{generated,true},{location,{707,35}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{707,35}}],
                     {remote,
                      [{generated,true},{location,{707,35}}],
                      {atom,[{generated,true},{location,{707,35}}],erlang},
                      {atom,[{generated,true},{location,{707,35}}],error}},
                     [{tuple,
                       [{generated,true},{location,{707,35}}],
                       [{atom,
                         [{generated,true},{location,{707,35}}],
                         badrecord},
                        {var,{707,27},rec30}]}]}]}]}]}]}]}]},
        {clause,
         {708,12},
         [{match,
           {708,13},
           {tuple,
            {708,13},
            [{atom,{708,13},b_ret},{var,{708,13},'_'},{var,{708,24},'Arg'}]},
           {var,{708,29},'Ret'}}],
         [],
         [{debug_line,709,225},
          {call,
           {709,17},
           {atom,{709,17},normalize},
           [{block,0,
             [{block,
               {709,27},
               [{match,
                 {709,37},
                 {var,{709,37},rec31},
                 {call,
                  {709,41},
                  {atom,{709,41},rename_var},
                  [{var,{709,52},'Arg'},{var,{709,57},'Rename'}]}},
                {match,{709,27},{var,{709,27},rec32},{var,{709,27},'Ret'}},
                {'case',
                 {709,37},
                 {var,{709,27},rec32},
                 [{clause,
                   {709,37},
                   [{tuple,
                     {709,37},
                     [{atom,{709,37},b_ret},
                      {var,{709,37},'_'},
                      {var,{709,37},'_'}]}],
                   [],
                   [{call,
                     {709,37},
                     {remote,
                      {709,37},
                      {atom,{709,37},erlang},
                      {atom,{709,37},setelement}},
                     [{integer,{709,37},3},
                      {var,{709,27},rec32},
                      {var,{709,37},rec31}]}]},
                  {clause,
                   [{generated,true},{location,{709,37}}],
                   [{var,[{generated,true},{location,{709,37}}],'_'}],
                   [],
                   [{call,
                     [{generated,true},{location,{709,37}}],
                     {remote,
                      [{generated,true},{location,{709,37}}],
                      {atom,[{generated,true},{location,{709,37}}],erlang},
                      {atom,[{generated,true},{location,{709,37}}],error}},
                     [{tuple,
                       [{generated,true},{location,{709,37}}],
                       [{atom,
                         [{generated,true},{location,{709,37}}],
                         badrecord},
                        {var,{709,27},rec32}]}]}]}]}]}]}]}]}]}}},
    {debug_line,711,226},
    {call,
     {711,5},
     {atom,{711,5},map_instrs_1},
     [{var,{711,18},'Labels'},{var,{711,26},'F'},{var,{711,29},'Blocks'}]}]}]}.
{attribute,
    {720,2},
    spec,
    {{split_blocks_before,4},
     [{type,
          {720,26},
          bounded_fun,
          [{type,
               {720,26},
               'fun',
               [{type,
                    {720,26},
                    product,
                    [{var,{720,27},'Labels'},
                     {var,{720,35},'Pred'},
                     {var,{720,41},'Blocks0'},
                     {var,{720,50},'Count0'}]},
                {type,
                    {720,61},
                    tuple,
                    [{var,{720,62},'Blocks'},{var,{720,69},'Count'}]}]},
           [{type,
                {721,7},
                constraint,
                [{atom,{721,7},is_subtype},
                 [{var,{721,7},'Labels'},
                  {type,{721,17},list,[{user_type,{721,18},label,[]}]}]]},
            {type,
                {722,7},
                constraint,
                [{atom,{722,7},is_subtype},
                 [{var,{722,7},'Pred'},
                  {type,
                      {722,19},
                      'fun',
                      [{type,{722,19},product,[{user_type,{722,20},b_set,[]}]},
                       {type,{722,32},boolean,[]}]}]]},
            {type,
                {723,7},
                constraint,
                [{atom,{723,7},is_subtype},
                 [{var,{723,7},'Blocks'},{user_type,{723,17},block_map,[]}]]},
            {type,
                {724,7},
                constraint,
                [{atom,{724,7},is_subtype},
                 [{var,{724,7},'Count0'},{user_type,{724,17},label,[]}]]},
            {type,
                {725,7},
                constraint,
                [{atom,{725,7},is_subtype},
                 [{var,{725,7},'Blocks0'},{user_type,{725,18},block_map,[]}]]},
            {type,
                {726,7},
                constraint,
                [{atom,{726,7},is_subtype},
                 [{var,{726,7},'Blocks'},{user_type,{726,17},block_map,[]}]]},
            {type,
                {727,7},
                constraint,
                [{atom,{727,7},is_subtype},
                 [{var,{727,7},'Count'},{user_type,{727,16},label,[]}]]}]]}]}}.
{function,
    {729,1},
    split_blocks_before,4,
    [{clause,
         {729,1},
         [{var,{729,1},'_'},
          {var,{729,1},'_'},
          {var,{729,1},'_'},
          {var,{729,1},'_'}],
         [[{call,
               {729,1},
               {remote,
                   {729,1},
                   {atom,{729,1},fake},
                   {atom,{729,1},is_beam_bif_info}},
               []}]],
         [{debug_line,729,227},{atom,{729,1},ignore}]},
     {clause,
         {729,1},
         [{var,{729,21},'Ls'},
          {var,{729,25},'P'},
          {var,{729,28},'Blocks'},
          {var,{729,36},'Count'}],
         [[{call,
               {729,48},
               {remote,{729,48},{atom,{729,48},erlang},{atom,{729,48},is_map}},
               [{var,{729,55},'Blocks'}]}]],
         [{debug_line,730,228},
          {call,
              {730,5},
              {atom,{730,5},split_blocks_1},
              [{var,{730,20},'Ls'},
               {var,{730,24},'P'},
               {block,0,
                   [{'fun',{730,27},{function,split_blocks_before_is,3}}]},
               {var,{730,57},'Blocks'},
               {var,{730,65},'Count'}]}]}]}.
{attribute,
    {737,2},
    spec,
    {{split_blocks_after,4},
     [{type,
          {737,25},
          bounded_fun,
          [{type,
               {737,25},
               'fun',
               [{type,
                    {737,25},
                    product,
                    [{var,{737,26},'Labels'},
                     {var,{737,34},'Pred'},
                     {var,{737,40},'Blocks0'},
                     {var,{737,49},'Count0'}]},
                {type,
                    {737,60},
                    tuple,
                    [{var,{737,61},'Blocks'},{var,{737,68},'Count'}]}]},
           [{type,
                {738,7},
                constraint,
                [{atom,{738,7},is_subtype},
                 [{var,{738,7},'Labels'},
                  {type,{738,17},list,[{user_type,{738,18},label,[]}]}]]},
            {type,
                {739,7},
                constraint,
                [{atom,{739,7},is_subtype},
                 [{var,{739,7},'Pred'},
                  {type,
                      {739,19},
                      'fun',
                      [{type,{739,19},product,[{user_type,{739,20},b_set,[]}]},
                       {type,{739,32},boolean,[]}]}]]},
            {type,
                {740,7},
                constraint,
                [{atom,{740,7},is_subtype},
                 [{var,{740,7},'Blocks'},{user_type,{740,17},block_map,[]}]]},
            {type,
                {741,7},
                constraint,
                [{atom,{741,7},is_subtype},
                 [{var,{741,7},'Count0'},{user_type,{741,17},label,[]}]]},
            {type,
                {742,7},
                constraint,
                [{atom,{742,7},is_subtype},
                 [{var,{742,7},'Blocks0'},{user_type,{742,18},block_map,[]}]]},
            {type,
                {743,7},
                constraint,
                [{atom,{743,7},is_subtype},
                 [{var,{743,7},'Blocks'},{user_type,{743,17},block_map,[]}]]},
            {type,
                {744,7},
                constraint,
                [{atom,{744,7},is_subtype},
                 [{var,{744,7},'Count'},{user_type,{744,16},label,[]}]]}]]}]}}.
{function,
    {746,1},
    split_blocks_after,4,
    [{clause,
         {746,1},
         [{var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'},
          {var,{746,1},'_'}],
         [[{call,
               {746,1},
               {remote,
                   {746,1},
                   {atom,{746,1},fake},
                   {atom,{746,1},is_beam_bif_info}},
               []}]],
         [{debug_line,746,229},{atom,{746,1},ignore}]},
     {clause,
         {746,1},
         [{var,{746,20},'Ls'},
          {var,{746,24},'P'},
          {var,{746,27},'Blocks'},
          {var,{746,35},'Count'}],
         [[{call,
               {746,47},
               {remote,{746,47},{atom,{746,47},erlang},{atom,{746,47},is_map}},
               [{var,{746,54},'Blocks'}]}]],
         [{debug_line,747,230},
          {call,
              {747,5},
              {atom,{747,5},split_blocks_1},
              [{var,{747,20},'Ls'},
               {var,{747,24},'P'},
               {block,0,[{'fun',{747,27},{function,split_blocks_after_is,3}}]},
               {var,{747,56},'Blocks'},
               {var,{747,64},'Count'}]}]}]}.
{attribute,
    {749,2},
    spec,
    {{trim_unreachable,1},
     [{type,
          {749,23},
          bounded_fun,
          [{type,
               {749,23},
               'fun',
               [{type,{749,23},product,[{var,{749,24},'SSA0'}]},
                {var,{749,33},'SSA'}]},
           [{type,
                {750,7},
                constraint,
                [{atom,{750,7},is_subtype},
                 [{var,{750,7},'SSA0'},
                  {type,
                      {750,15},
                      union,
                      [{user_type,{750,15},block_map,[]},
                       {type,
                           {750,29},
                           list,
                           [{type,
                                {750,30},
                                tuple,
                                [{user_type,{750,31},label,[]},
                                 {user_type,{750,39},b_blk,[]}]}]}]}]]},
            {type,
                {751,7},
                constraint,
                [{atom,{751,7},is_subtype},
                 [{var,{751,7},'SSA'},
                  {type,
                      {751,14},
                      union,
                      [{user_type,{751,14},block_map,[]},
                       {type,
                           {751,28},
                           list,
                           [{type,
                                {751,29},
                                tuple,
                                [{user_type,{751,30},label,[]},
                                 {user_type,{751,38},b_blk,[]}]}]}]}]]}]]}]}}.
{function,
    {758,1},
    trim_unreachable,1,
    [{clause,
         {758,1},
         [{var,{758,1},'_'}],
         [[{call,
               {758,1},
               {remote,
                   {758,1},
                   {atom,{758,1},fake},
                   {atom,{758,1},is_beam_bif_info}},
               []}]],
         [{debug_line,758,231},{atom,{758,1},ignore}]},
     {clause,
         {758,1},
         [{var,{758,18},'Blocks'}],
         [[{call,
               {758,31},
               {remote,{758,31},{atom,{758,31},erlang},{atom,{758,31},is_map}},
               [{var,{758,38},'Blocks'}]}]],
         [{debug_line,760,232},
          {call,
              {760,5},
              {remote,{760,9},{atom,{760,5},maps},{atom,{760,10},from_list}},
              [{block,0,
                   [{call,
                        {760,20},
                        {atom,{760,20},linearize},
                        [{var,{760,30},'Blocks'}]}]}]}]},
     {clause,
         {761,1},
         [{match,
              {761,18},
              {cons,{761,18},{var,{761,19},'_'},{var,{761,21},'_'}},
              {var,{761,24},'Blocks'}}],
         [],
         [{debug_line,762,233},
          {call,
              {762,5},
              {atom,{762,5},trim_unreachable_1},
              [{var,{762,24},'Blocks'},
               {block,0,
                   [{call,
                        {762,32},
                        {remote,
                            {762,36},
                            {atom,{762,32},sets},
                            {atom,{762,37},from_list}},
                        [{block,0,
                             [{cons,
                                  {762,47},
                                  {integer,{762,48},0},
                                  {nil,{762,49}}}]}]}]}]}]}]}.
{attribute,{764,2},
           spec,
           {{used,1},
            [{type,{764,11},
                   'fun',
                   [{type,{764,11},
                          product,
                          [{type,{764,12},
                                 union,
                                 [{user_type,{764,12},b_blk,[]},
                                  {user_type,{764,22},b_set,[]},
                                  {user_type,{764,32},terminator,[]}]}]},
                    {type,{764,49},list,[{user_type,{764,50},b_var,[]}]}]}]}}.
{function,
 {766,1},
 used,1,
 [{clause,
   {766,1},
   [{var,{766,1},'_'}],
   [[{call,
      {766,1},
      {remote,{766,1},{atom,{766,1},fake},{atom,{766,1},is_beam_bif_info}},
      []}]],
   [{debug_line,766,234},{atom,{766,1},ignore}]},
  {clause,
   {766,1},
   [{tuple,
     {766,6},
     [{atom,{766,6},b_blk},
      {var,{766,6},'_'},
      {var,{766,16},'Is'},
      {var,{766,24},'Last'}]}],
   [],
   [{debug_line,767,235},
    {call,
     {767,5},
     {atom,{767,5},used_1},
     [{block,0,[{cons,{767,12},{var,{767,13},'Last'},{var,{767,18},'Is'}}]},
      {block,0,
       [{call,
         {767,23},
         {remote,{767,30},{atom,{767,23},ordsets},{atom,{767,31},new}},
         []}]}]}]},
  {clause,
   {768,1},
   [{tuple,
     {768,6},
     [{atom,{768,6},b_br},
      {var,{768,6},'_'},
      {match,
       {768,17},
       {tuple,{768,17},[{atom,{768,17},b_var},{var,{768,17},'_'}]},
       {var,{768,26},'V'}},
      {var,{768,6},'_'},
      {var,{768,6},'_'}]}],
   [],
   [{debug_line,769,236},{cons,{769,5},{var,{769,6},'V'},{nil,{769,7}}}]},
  {clause,
   {770,1},
   [{tuple,
     {770,6},
     [{atom,{770,6},b_ret},
      {var,{770,6},'_'},
      {match,
       {770,17},
       {tuple,{770,17},[{atom,{770,17},b_var},{var,{770,17},'_'}]},
       {var,{770,26},'V'}}]}],
   [],
   [{debug_line,771,237},{cons,{771,5},{var,{771,6},'V'},{nil,{771,7}}}]},
  {clause,
   {772,1},
   [{tuple,
     {772,6},
     [{atom,{772,6},b_set},
      {var,{772,6},'_'},
      {var,{772,6},'_'},
      {atom,{772,16},phi},
      {var,{772,25},'Args'}]}],
   [],
   [{debug_line,773,238},
    {call,
     {773,5},
     {remote,{773,12},{atom,{773,5},ordsets},{atom,{773,13},from_list}},
     [{block,0,
       [{lc,
         {773,23},
         {block,0,[{var,{773,24},'V'}]},
         [{block,0,[{atom,{773,47},true}]},
          {generate,
           {773,44},
           {tuple,
            {773,29},
            [{match,
              {773,30},
              {tuple,{773,30},[{atom,{773,30},b_var},{var,{773,30},'_'}]},
              {var,{773,39},'V'}},
             {var,{773,41},'_'}]},
           {var,{773,47},'Args'}}]}]}]}]},
  {clause,
   {774,1},
   [{tuple,
     {774,6},
     [{atom,{774,6},b_set},
      {var,{774,6},'_'},
      {var,{774,6},'_'},
      {var,{774,6},'_'},
      {var,{774,18},'Args'}]}],
   [],
   [{debug_line,775,239},
    {call,
     {775,5},
     {remote,{775,12},{atom,{775,5},ordsets},{atom,{775,13},from_list}},
     [{block,0,
       [{call,
         {775,23},
         {atom,{775,23},used_args},
         [{var,{775,33},'Args'}]}]}]}]},
  {clause,
   {776,1},
   [{tuple,
     {776,6},
     [{atom,{776,6},b_switch},
      {var,{776,6},'_'},
      {match,
       {776,20},
       {tuple,{776,20},[{atom,{776,20},b_var},{var,{776,20},'_'}]},
       {var,{776,29},'V'}},
      {var,{776,6},'_'},
      {var,{776,6},'_'}]}],
   [],
   [{debug_line,777,240},{cons,{777,5},{var,{777,6},'V'},{nil,{777,7}}}]},
  {clause,
   {778,1},
   [{var,{778,6},'_'}],
   [],
   [{debug_line,778,241},{nil,{778,12}}]}]}.
{attribute,
    {780,2},
    spec,
    {{definitions,2},
     [{type,
          {780,18},
          'fun',
          [{type,
               {780,18},
               product,
               [{ann_type,
                    {780,19},
                    [{var,{780,19},'Labels'},
                     {type,{780,29},list,[{user_type,{780,30},label,[]}]}]},
                {ann_type,
                    {780,40},
                    [{var,{780,40},'Blocks'},
                     {user_type,{780,50},block_map,[]}]}]},
           {user_type,{780,66},definition_map,[]}]}]}}.
{function,
 {781,1},
 definitions,2,
 [{clause,
   {781,1},
   [{var,{781,1},'_'},{var,{781,1},'_'}],
   [[{call,
      {781,1},
      {remote,{781,1},{atom,{781,1},fake},{atom,{781,1},is_beam_bif_info}},
      []}]],
   [{debug_line,781,242},{atom,{781,1},ignore}]},
  {clause,
   {781,1},
   [{var,{781,13},'Labels'},{var,{781,21},'Blocks'}],
   [],
   [{debug_line,782,243},
    {call,
     {782,5},
     {atom,{782,5},fold_instrs},
     [{block,0,
       [{'fun',
         {782,17},
         {clauses,
          [{clause,
            {782,20},
            [{match,
              {782,21},
              {tuple,
               {782,21},
               [{atom,{782,21},b_set},
                {var,{782,21},'_'},
                {var,{782,35},'Var'},
                {var,{782,21},'_'},
                {var,{782,21},'_'}]},
              {var,{782,41},'I'}},
             {var,{782,44},'Acc'}],
            [],
            [{debug_line,783,244},
             {map,
              {783,32},
              {var,{783,29},'Acc'},
              [{map_field_assoc,
                {783,38},
                {var,{783,34},'Var'},
                {var,{783,41},'I'}}]}]},
           {clause,
            {784,24},
            [{var,{784,25},'_Terminator'},{var,{784,38},'Acc'}],
            [],
            [{debug_line,785,245},{var,{785,29},'Acc'}]}]}}]},
      {var,{786,26},'Labels'},
      {block,0,[{debug_line,786,246},{map,{786,34},[]}]},
      {var,{786,39},'Blocks'}]}]}]}.
{attribute,{792,2},
           spec,
           {{uses,2},
            [{type,{792,11},
                   bounded_fun,
                   [{type,{792,11},
                          'fun',
                          [{type,{792,11},
                                 product,
                                 [{var,{792,12},'Labels'},
                                  {var,{792,20},'Blocks'}]},
                           {user_type,{792,31},usage_map,[]}]},
                    [{type,{793,7},
                           constraint,
                           [{atom,{793,7},is_subtype},
                            [{var,{793,7},'Labels'},
                             {type,{793,17},
                                   list,
                                   [{user_type,{793,18},label,[]}]}]]},
                     {type,{794,7},
                           constraint,
                           [{atom,{794,7},is_subtype},
                            [{var,{794,7},'Blocks'},
                             {user_type,{794,17},block_map,[]}]]}]]}]}}.
{function,
    {795,1},
    uses,2,
    [{clause,
         {795,1},
         [{var,{795,1},'_'},{var,{795,1},'_'}],
         [[{call,
               {795,1},
               {remote,
                   {795,1},
                   {atom,{795,1},fake},
                   {atom,{795,1},is_beam_bif_info}},
               []}]],
         [{debug_line,795,247},{atom,{795,1},ignore}]},
     {clause,
         {795,1},
         [{var,{795,6},'Labels'},{var,{795,14},'Blocks'}],
         [[{call,
               {795,27},
               {remote,{795,27},{atom,{795,27},erlang},{atom,{795,27},is_map}},
               [{var,{795,34},'Blocks'}]}]],
         [{debug_line,796,248},
          {call,
              {796,5},
              {atom,{796,5},fold_blocks},
              [{block,0,[{'fun',{796,17},{function,fold_uses_block,3}}]},
               {var,{796,40},'Labels'},
               {block,0,[{map,{796,48},[]}]},
               {var,{796,53},'Blocks'}]}]}]}.
{function,
 {798,1},
 fold_uses_block,3,
 [{clause,
   {798,1},
   [{var,{798,1},'_'},{var,{798,1},'_'},{var,{798,1},'_'}],
   [[{call,
      {798,1},
      {remote,{798,1},{atom,{798,1},fake},{atom,{798,1},is_beam_bif_info}},
      []}]],
   [{debug_line,798,249},{atom,{798,1},ignore}]},
  {clause,
   {798,1},
   [{var,{798,17},'Lbl'},
    {tuple,
     {798,22},
     [{atom,{798,22},b_blk},
      {var,{798,22},'_'},
      {var,{798,32},'Is'},
      {var,{798,40},'Last'}]},
    {var,{798,47},'UseMap0'}],
   [],
   [{debug_line,799,250},
    {match,
     {799,5},
     {var,{799,5},'F'},
     {'fun',
      {799,9},
      {clauses,
       [{clause,
         {799,12},
         [{var,{799,13},'I'},{var,{799,16},'UseMap'}],
         [],
         [{debug_line,800,251},
          {call,
           {800,17},
           {remote,{800,17},{atom,{800,17},lists},{atom,{800,17},foldl}},
           [{block,0,
             [{'fun',
               {800,23},
               {clauses,
                [{clause,
                  {800,26},
                  [{var,{800,27},'Var'},{var,{800,32},'Acc'}],
                  [],
                  [{debug_line,801,252},
                   {match,
                    {801,31},
                    {var,{801,31},'Uses0'},
                    {call,
                     {801,39},
                     {remote,
                      {801,43},
                      {atom,{801,39},maps},
                      {atom,{801,44},get}},
                     [{var,{801,48},'Var'},
                      {var,{801,53},'Acc'},
                      {nil,{801,58}}]}},
                   {debug_line,802,253},
                   {match,
                    {802,31},
                    {var,{802,31},'Uses'},
                    {cons,
                     {802,38},
                     {tuple,
                      {802,39},
                      [{var,{802,40},'Lbl'},{var,{802,45},'I'}]},
                     {var,{802,50},'Uses0'}}},
                   {debug_line,803,254},
                   {call,
                    {803,31},
                    {remote,{803,35},{atom,{803,31},maps},{atom,{803,36},put}},
                    [{var,{803,40},'Var'},
                     {var,{803,45},'Uses'},
                     {var,{803,51},'Acc'}]}]}]}}]},
            {var,{804,28},'UseMap'},
            {block,0,
             [{debug_line,804,255},
              {call,
               {804,36},
               {atom,{804,36},used},
               [{var,{804,41},'I'}]}]}]}]}]}}},
    {debug_line,806,256},
    {call,
     {806,5},
     {var,{806,5},'F'},
     [{var,{806,7},'Last'},
      {block,0,
       [{call,
         {806,13},
         {remote,{806,13},{atom,{806,13},lists},{atom,{806,13},foldl}},
         [{var,{806,19},'F'},
          {var,{806,22},'UseMap0'},
          {var,{806,31},'Is'}]}]}]}]}]}.
{attribute,{808,2},
           spec,
           {{merge_blocks,2},
            [{type,{808,19},
                   'fun',
                   [{type,{808,19},
                          product,
                          [{type,{808,20},
                                 list,
                                 [{user_type,{808,21},label,[]}]},
                           {user_type,{808,31},block_map,[]}]},
                    {user_type,{808,47},block_map,[]}]}]}}.
{function,{810,1},
          merge_blocks,2,
          [{clause,{810,1},
                   [{var,{810,1},'_'},{var,{810,1},'_'}],
                   [[{call,{810,1},
                           {remote,{810,1},
                                   {atom,{810,1},fake},
                                   {atom,{810,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,810,257},{atom,{810,1},ignore}]},
           {clause,{810,1},
                   [{var,{810,14},'Labels'},{var,{810,22},'Blocks'}],
                   [],
                   [{debug_line,811,258},
                    {match,{811,5},
                           {var,{811,5},'Preds'},
                           {call,{811,13},
                                 {atom,{811,13},predecessors},
                                 [{var,{811,26},'Blocks'}]}},
                    {debug_line,816,259},
                    {call,{816,5},
                          {atom,{816,5},merge_blocks_1},
                          [{var,{816,20},'Labels'},
                           {var,{816,28},'Preds'},
                           {var,{816,35},'Blocks'}]}]}]}.
{function,{822,1},
          is_commutative,1,
          [{clause,{822,1},
                   [{var,{822,1},'_'}],
                   [[{call,{822,1},
                           {remote,{822,1},
                                   {atom,{822,1},fake},
                                   {atom,{822,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,822,260},{atom,{822,1},ignore}]},
           {clause,{822,1},
                   [{atom,{822,16},'and'}],
                   [],
                   [{debug_line,822,261},{atom,{822,26},true}]},
           {clause,{823,1},
                   [{atom,{823,16},'or'}],
                   [],
                   [{debug_line,823,262},{atom,{823,25},true}]},
           {clause,{824,1},
                   [{atom,{824,16},'xor'}],
                   [],
                   [{debug_line,824,263},{atom,{824,26},true}]},
           {clause,{825,1},
                   [{atom,{825,16},'band'}],
                   [],
                   [{debug_line,825,264},{atom,{825,27},true}]},
           {clause,{826,1},
                   [{atom,{826,16},'bor'}],
                   [],
                   [{debug_line,826,265},{atom,{826,26},true}]},
           {clause,{827,1},
                   [{atom,{827,16},'bxor'}],
                   [],
                   [{debug_line,827,266},{atom,{827,27},true}]},
           {clause,{828,1},
                   [{atom,{828,16},'+'}],
                   [],
                   [{debug_line,828,267},{atom,{828,24},true}]},
           {clause,{829,1},
                   [{atom,{829,16},'*'}],
                   [],
                   [{debug_line,829,268},{atom,{829,24},true}]},
           {clause,{830,1},
                   [{atom,{830,16},'=:='}],
                   [],
                   [{debug_line,830,269},{atom,{830,26},true}]},
           {clause,{831,1},
                   [{atom,{831,16},'=='}],
                   [],
                   [{debug_line,831,270},{atom,{831,25},true}]},
           {clause,{832,1},
                   [{atom,{832,16},'=/='}],
                   [],
                   [{debug_line,832,271},{atom,{832,26},true}]},
           {clause,{833,1},
                   [{atom,{833,16},'/='}],
                   [],
                   [{debug_line,833,272},{atom,{833,25},true}]},
           {clause,{834,1},
                   [{var,{834,16},'_'}],
                   [],
                   [{debug_line,834,273},{atom,{834,22},false}]}]}.
{function,
    {836,1},
    def_unused_1,4,
    [{clause,
         {836,1},
         [{var,{836,1},'_'},
          {var,{836,1},'_'},
          {var,{836,1},'_'},
          {var,{836,1},'_'}],
         [[{call,
               {836,1},
               {remote,
                   {836,1},
                   {atom,{836,1},fake},
                   {atom,{836,1},is_beam_bif_info}},
               []}]],
         [{debug_line,836,274},{atom,{836,1},ignore}]},
     {clause,
         {836,1},
         [{cons,
              {836,14},
              {tuple,
                  {836,15},
                  [{atom,{836,15},b_blk},
                   {var,{836,15},'_'},
                   {var,{836,25},'Is'},
                   {var,{836,33},'Last'}]},
              {var,{836,39},'Bs'}},
          {var,{836,44},'Preds'},
          {var,{836,51},'Def0'},
          {var,{836,57},'Unused0'}],
         [],
         [{debug_line,837,275},
          {match,
              {837,5},
              {var,{837,5},'Unused1'},
              {call,
                  {837,15},
                  {remote,
                      {837,22},
                      {atom,{837,15},ordsets},
                      {atom,{837,23},subtract}},
                  [{var,{837,32},'Unused0'},
                   {block,0,
                       [{call,
                            {837,41},
                            {atom,{837,41},used},
                            [{var,{837,46},'Last'}]}]}]}},
          {debug_line,838,276},
          {match,
              {838,5},
              {tuple,{838,5},[{var,{838,6},'Def'},{var,{838,10},'Unused'}]},
              {call,
                  {838,20},
                  {atom,{838,20},def_unused_is},
                  [{var,{838,34},'Is'},
                   {var,{838,38},'Preds'},
                   {var,{838,45},'Def0'},
                   {var,{838,51},'Unused1'}]}},
          {debug_line,839,277},
          {call,
              {839,5},
              {atom,{839,5},def_unused_1},
              [{var,{839,18},'Bs'},
               {var,{839,22},'Preds'},
               {var,{839,29},'Def'},
               {var,{839,34},'Unused'}]}]},
     {clause,
         {840,1},
         [{nil,{840,14}},
          {var,{840,18},'_Preds'},
          {var,{840,26},'Def'},
          {var,{840,31},'Unused'}],
         [],
         [{debug_line,841,278},
          {tuple,
              {841,5},
              [{call,
                   {841,6},
                   {remote,
                       {841,13},
                       {atom,{841,6},ordsets},
                       {atom,{841,14},from_list}},
                   [{var,{841,24},'Def'}]},
               {var,{841,30},'Unused'}]}]}]}.
{function,
    {843,1},
    def_unused_is,4,
    [{clause,
         {843,1},
         [{var,{843,1},'_'},
          {var,{843,1},'_'},
          {var,{843,1},'_'},
          {var,{843,1},'_'}],
         [[{call,
               {843,1},
               {remote,
                   {843,1},
                   {atom,{843,1},fake},
                   {atom,{843,1},is_beam_bif_info}},
               []}]],
         [{debug_line,843,279},{atom,{843,1},ignore}]},
     {clause,
         {843,1},
         [{cons,
              {843,15},
              {tuple,
                  {843,16},
                  [{atom,{843,16},b_set},
                   {var,{843,16},'_'},
                   {var,{843,34},'Dst'},
                   {atom,{843,26},phi},
                   {var,{843,43},'Args'}]},
              {var,{843,49},'Is'}},
          {var,{844,13},'Preds'},
          {var,{844,20},'Def0'},
          {var,{844,26},'Unused0'}],
         [],
         [{debug_line,845,280},
          {match,
              {845,5},
              {var,{845,5},'Def'},
              {cons,{845,11},{var,{845,12},'Dst'},{var,{845,16},'Def0'}}},
          {debug_line,849,281},
          {match,
              {849,5},
              {var,{849,5},'Unused1'},
              {lc,{849,15},
                  {block,0,[{var,{849,16},'V'}]},
                  [{block,0,[{atom,{849,39},true}]},
                   {generate,
                       {849,36},
                       {tuple,
                           {849,21},
                           [{match,
                                {849,22},
                                {tuple,
                                    {849,22},
                                    [{atom,{849,22},b_var},
                                     {var,{849,22},'_'}]},
                                {var,{849,31},'V'}},
                            {var,{849,33},'L'}]},
                       {var,{849,39},'Args'}},
                   {block,0,[{atom,{849,45},true}]},
                   {call,
                       {849,45},
                       {remote,
                           {849,49},
                           {atom,{849,45},sets},
                           {atom,{849,50},is_element}},
                       [{var,{849,61},'L'},{var,{849,64},'Preds'}]}]}},
          {debug_line,850,282},
          {match,
              {850,5},
              {var,{850,5},'Unused'},
              {call,
                  {850,14},
                  {remote,
                      {850,21},
                      {atom,{850,14},ordsets},
                      {atom,{850,22},subtract}},
                  [{var,{850,31},'Unused0'},
                   {block,0,
                       [{call,
                            {850,40},
                            {remote,
                                {850,47},
                                {atom,{850,40},ordsets},
                                {atom,{850,48},from_list}},
                            [{var,{850,58},'Unused1'}]}]}]}},
          {debug_line,851,283},
          {call,
              {851,5},
              {atom,{851,5},def_unused_is},
              [{var,{851,19},'Is'},
               {var,{851,23},'Preds'},
               {var,{851,30},'Def'},
               {var,{851,35},'Unused'}]}]},
     {clause,
         {852,1},
         [{cons,
              {852,15},
              {match,
                  {852,16},
                  {tuple,
                      {852,16},
                      [{atom,{852,16},b_set},
                       {var,{852,16},'_'},
                       {var,{852,27},'Dst'},
                       {var,{852,16},'_'},
                       {var,{852,16},'_'}]},
                  {var,{852,32},'I'}},
              {var,{852,34},'Is'}},
          {var,{852,39},'Preds'},
          {var,{852,46},'Def0'},
          {var,{852,52},'Unused0'}],
         [],
         [{debug_line,853,284},
          {match,
              {853,5},
              {var,{853,5},'Def'},
              {cons,{853,11},{var,{853,12},'Dst'},{var,{853,16},'Def0'}}},
          {debug_line,854,285},
          {match,
              {854,5},
              {var,{854,5},'Unused'},
              {call,
                  {854,14},
                  {remote,
                      {854,21},
                      {atom,{854,14},ordsets},
                      {atom,{854,22},subtract}},
                  [{var,{854,31},'Unused0'},
                   {block,0,
                       [{call,
                            {854,40},
                            {atom,{854,40},used},
                            [{var,{854,45},'I'}]}]}]}},
          {debug_line,855,286},
          {call,
              {855,5},
              {atom,{855,5},def_unused_is},
              [{var,{855,19},'Is'},
               {var,{855,23},'Preds'},
               {var,{855,30},'Def'},
               {var,{855,35},'Unused'}]}]},
     {clause,
         {856,1},
         [{nil,{856,15}},
          {var,{856,19},'_Preds'},
          {var,{856,27},'Def'},
          {var,{856,32},'Unused'}],
         [],
         [{debug_line,857,287},
          {tuple,{857,5},[{var,{857,6},'Def'},{var,{857,10},'Unused'}]}]}]}.
{function,{859,1},
          def_1,2,
          [{clause,{859,1},
                   [{var,{859,1},'_'},{var,{859,1},'_'}],
                   [[{call,{859,1},
                           {remote,{859,1},
                                   {atom,{859,1},fake},
                                   {atom,{859,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,859,288},{atom,{859,1},ignore}]},
           {clause,{859,1},
                   [{cons,{859,7},
                          {tuple,{859,8},
                                 [{atom,{859,8},b_blk},
                                  {var,{859,8},'_'},
                                  {var,{859,18},'Is'},
                                  {var,{859,8},'_'}]},
                          {var,{859,22},'Bs'}},
                    {var,{859,27},'Def0'}],
                   [],
                   [{debug_line,860,289},
                    {match,{860,5},
                           {var,{860,5},'Def'},
                           {call,{860,11},
                                 {atom,{860,11},def_is},
                                 [{var,{860,18},'Is'},{var,{860,22},'Def0'}]}},
                    {debug_line,861,290},
                    {call,{861,5},
                          {atom,{861,5},def_1},
                          [{var,{861,11},'Bs'},{var,{861,15},'Def'}]}]},
           {clause,{862,1},
                   [{nil,{862,7}},{var,{862,11},'Def'}],
                   [],
                   [{debug_line,863,291},
                    {call,{863,5},
                          {remote,{863,12},
                                  {atom,{863,5},ordsets},
                                  {atom,{863,13},from_list}},
                          [{var,{863,23},'Def'}]}]}]}.
{function,
    {865,1},
    def_is,2,
    [{clause,
         {865,1},
         [{var,{865,1},'_'},{var,{865,1},'_'}],
         [[{call,
               {865,1},
               {remote,
                   {865,1},
                   {atom,{865,1},fake},
                   {atom,{865,1},is_beam_bif_info}},
               []}]],
         [{debug_line,865,292},{atom,{865,1},ignore}]},
     {clause,
         {865,1},
         [{cons,
              {865,8},
              {tuple,
                  {865,9},
                  [{atom,{865,9},b_set},
                   {var,{865,9},'_'},
                   {var,{865,20},'Dst'},
                   {var,{865,9},'_'},
                   {var,{865,9},'_'}]},
              {var,{865,25},'Is'}},
          {var,{865,30},'Def'}],
         [],
         [{debug_line,866,293},
          {call,
              {866,5},
              {atom,{866,5},def_is},
              [{var,{866,12},'Is'},
               {block,0,
                   [{cons,
                        {866,16},
                        {var,{866,17},'Dst'},
                        {var,{866,21},'Def'}}]}]}]},
     {clause,
         {867,1},
         [{nil,{867,8}},{var,{867,12},'Def'}],
         [],
         [{debug_line,867,294},{var,{867,20},'Def'}]}]}.
{function,
    {869,1},
    dominators_1,3,
    [{clause,
         {869,1},
         [{var,{869,1},'_'},{var,{869,1},'_'},{var,{869,1},'_'}],
         [[{call,
               {869,1},
               {remote,
                   {869,1},
                   {atom,{869,1},fake},
                   {atom,{869,1},is_beam_bif_info}},
               []}]],
         [{debug_line,869,295},{atom,{869,1},ignore}]},
     {clause,
         {869,1},
         [{cons,
              {869,14},
              {tuple,{869,15},[{var,{869,16},'L'},{var,{869,18},'Preds'}]},
              {var,{869,25},'Ls'}},
          {var,{869,30},'Df'},
          {var,{869,34},'Doms'}],
         [],
         [{debug_line,870,296},
          {match,
              {870,5},
              {var,{870,5},'DomPreds'},
              {lc,{870,16},
                  {block,0,
                      [{call,
                           {870,17},
                           {remote,
                               {870,17},
                               {atom,{870,17},erlang},
                               {atom,{870,17},map_get}},
                           [{var,{870,25},'P'},{var,{870,28},'Doms'}]}]},
                  [{block,0,[{atom,{870,42},true}]},
                   {generate,
                       {870,39},
                       {var,{870,37},'P'},
                       {var,{870,42},'Preds'}},
                   {block,0,[{atom,{870,49},true}]},
                   {call,
                       {870,49},
                       {remote,
                           {870,49},
                           {atom,{870,49},erlang},
                           {atom,{870,49},is_map_key}},
                       [{var,{870,60},'P'},{var,{870,63},'Doms'}]}]}},
          {debug_line,871,297},
          {match,
              {871,5},
              {var,{871,5},'Dom'},
              {cons,
                  {871,11},
                  {var,{871,12},'L'},
                  {call,
                      {871,14},
                      {atom,{871,14},dom_intersection},
                      [{var,{871,31},'DomPreds'},{var,{871,41},'Df'}]}}},
          {debug_line,872,298},
          {call,
              {872,5},
              {atom,{872,5},dominators_1},
              [{var,{872,18},'Ls'},
               {var,{872,22},'Df'},
               {block,0,
                   [{map,
                        {872,30},
                        {var,{872,26},'Doms'},
                        [{map_field_assoc,
                             {872,33},
                             {var,{872,32},'L'},
                             {var,{872,35},'Dom'}}]}]}]}]},
     {clause,
         {873,1},
         [{nil,{873,14}},{var,{873,18},'_Df'},{var,{873,23},'Doms'}],
         [],
         [{debug_line,873,299},{var,{873,32},'Doms'}]}]}.
{function,{875,1},
          dom_intersection,2,
          [{clause,{875,1},
                   [{var,{875,1},'_'},{var,{875,1},'_'}],
                   [[{call,{875,1},
                           {remote,{875,1},
                                   {atom,{875,1},fake},
                                   {atom,{875,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,875,300},{atom,{875,1},ignore}]},
           {clause,{875,1},
                   [{cons,{875,18},{var,{875,19},'S'},{nil,{875,20}}},
                    {var,{875,23},'_Df'}],
                   [],
                   [{debug_line,876,301},{var,{876,5},'S'}]},
           {clause,{877,1},
                   [{cons,{877,18},{var,{877,19},'S'},{var,{877,21},'Ss'}},
                    {var,{877,26},'Df'}],
                   [],
                   [{debug_line,878,302},
                    {call,{878,5},
                          {atom,{878,5},dom_intersection},
                          [{var,{878,22},'S'},
                           {var,{878,25},'Ss'},
                           {var,{878,29},'Df'}]}]}]}.
{function,
    {880,1},
    dom_intersection,3,
    [{clause,
         {880,1},
         [{var,{880,1},'_'},{var,{880,1},'_'},{var,{880,1},'_'}],
         [[{call,
               {880,1},
               {remote,
                   {880,1},
                   {atom,{880,1},fake},
                   {atom,{880,1},is_beam_bif_info}},
               []}]],
         [{debug_line,880,303},{atom,{880,1},ignore}]},
     {clause,
         {880,1},
         [{match,
              {880,18},
              {cons,{880,18},{integer,{880,19},0},{nil,{880,20}}},
              {var,{880,22},'S'}},
          {cons,{880,25},{var,{880,26},'_'},{var,{880,28},'_'}},
          {var,{880,32},'_Df'}],
         [],
         [{debug_line,882,304},{var,{882,5},'S'}]},
     {clause,
         {883,1},
         [{var,{883,18},'S1'},
          {cons,{883,22},{var,{883,23},'S2'},{var,{883,26},'Ss'}},
          {var,{883,31},'Df'}],
         [],
         [{debug_line,884,305},
          {call,
              {884,5},
              {atom,{884,5},dom_intersection},
              [{block,0,
                   [{call,
                        {884,22},
                        {atom,{884,22},dom_intersection_1},
                        [{var,{884,41},'S1'},
                         {var,{884,45},'S2'},
                         {var,{884,49},'Df'}]}]},
               {var,{884,54},'Ss'},
               {var,{884,58},'Df'}]}]},
     {clause,
         {885,1},
         [{var,{885,18},'S'},{nil,{885,21}},{var,{885,25},'_Df'}],
         [],
         [{debug_line,885,306},{var,{885,33},'S'}]}]}.
{function,
    {887,1},
    dom_intersection_1,3,
    [{clause,
         {887,1},
         [{var,{887,1},'_'},{var,{887,1},'_'},{var,{887,1},'_'}],
         [[{call,
               {887,1},
               {remote,
                   {887,1},
                   {atom,{887,1},fake},
                   {atom,{887,1},is_beam_bif_info}},
               []}]],
         [{debug_line,887,307},{atom,{887,1},ignore}]},
     {clause,
         {887,1},
         [{match,
              {887,20},
              {cons,{887,20},{var,{887,21},'E1'},{var,{887,24},'Es1'}},
              {var,{887,29},'Set1'}},
          {match,
              {887,35},
              {cons,{887,35},{var,{887,36},'E2'},{var,{887,39},'Es2'}},
              {var,{887,44},'Set2'}},
          {var,{887,50},'Df'}],
         [],
         [{debug_line,890,308},
          {match,
              {890,5},
              {map,
                  {890,5},
                  [{map_field_exact,
                       {890,9},
                       {var,{890,7},'E1'},
                       {var,{890,11},'Df1'}},
                   {map_field_exact,
                       {890,17},
                       {var,{890,15},'E2'},
                       {var,{890,19},'Df2'}}]},
              {var,{890,26},'Df'}},
          {debug_line,891,309},
          {'if',
              {891,5},
              [{clause,
                   {892,9},
                   [],
                   [[{op,{892,13},
                         '>',
                         {var,{892,9},'Df1'},
                         {var,{892,15},'Df2'}}]],
                   [{debug_line,893,310},
                    {call,
                        {893,13},
                        {atom,{893,13},dom_intersection_2},
                        [{var,{893,32},'Es1'},
                         {var,{893,37},'Set2'},
                         {var,{893,43},'Df'},
                         {var,{893,47},'Df2'}]}]},
               {clause,
                   {894,9},
                   [],
                   [[{op,{894,13},
                         '>',
                         {var,{894,9},'Df2'},
                         {var,{894,15},'Df1'}}]],
                   [{debug_line,895,311},
                    {call,
                        {895,13},
                        {atom,{895,13},dom_intersection_2},
                        [{var,{895,32},'Es2'},
                         {var,{895,37},'Set1'},
                         {var,{895,43},'Df'},
                         {var,{895,47},'Df1'}]}]},
               {clause,
                   {896,9},
                   [],
                   [[{atom,{896,9},true}]],
                   [{debug_line,898,312},{var,{898,13},'Set1'}]}]}]}]}.
{function,
    {901,1},
    dom_intersection_2,4,
    [{clause,
         {901,1},
         [{var,{901,1},'_'},
          {var,{901,1},'_'},
          {var,{901,1},'_'},
          {var,{901,1},'_'}],
         [[{call,
               {901,1},
               {remote,
                   {901,1},
                   {atom,{901,1},fake},
                   {atom,{901,1},is_beam_bif_info}},
               []}]],
         [{debug_line,901,313},{atom,{901,1},ignore}]},
     {clause,
         {901,1},
         [{match,
              {901,20},
              {cons,{901,20},{var,{901,21},'E1'},{var,{901,24},'Es1'}},
              {var,{901,29},'Set1'}},
          {match,
              {901,35},
              {cons,{901,35},{var,{901,36},'_'},{var,{901,38},'Es2'}},
              {var,{901,43},'Set2'}},
          {var,{901,49},'Df'},
          {var,{901,53},'Df2'}],
         [],
         [{debug_line,904,314},
          {match,
              {904,5},
              {map,
                  {904,5},
                  [{map_field_exact,
                       {904,9},
                       {var,{904,7},'E1'},
                       {var,{904,11},'Df1'}}]},
              {var,{904,18},'Df'}},
          {debug_line,905,315},
          {'if',
              {905,5},
              [{clause,
                   {906,9},
                   [],
                   [[{op,{906,13},
                         '>',
                         {var,{906,9},'Df1'},
                         {var,{906,15},'Df2'}}]],
                   [{debug_line,907,316},
                    {call,
                        {907,13},
                        {atom,{907,13},dom_intersection_2},
                        [{var,{907,32},'Es1'},
                         {var,{907,37},'Set2'},
                         {var,{907,43},'Df'},
                         {var,{907,47},'Df2'}]}]},
               {clause,
                   {908,9},
                   [],
                   [[{op,{908,13},
                         '>',
                         {var,{908,9},'Df2'},
                         {var,{908,15},'Df1'}}]],
                   [{debug_line,909,317},
                    {call,
                        {909,13},
                        {atom,{909,13},dom_intersection_2},
                        [{var,{909,32},'Es2'},
                         {var,{909,37},'Set1'},
                         {var,{909,43},'Df'},
                         {var,{909,47},'Df1'}]}]},
               {clause,
                   {910,9},
                   [],
                   [[{atom,{910,9},true}]],
                   [{debug_line,912,318},{var,{912,13},'Set1'}]}]}]}]}.
{function,
    {915,1},
    number,2,
    [{clause,
         {915,1},
         [{var,{915,1},'_'},{var,{915,1},'_'}],
         [[{call,
               {915,1},
               {remote,
                   {915,1},
                   {atom,{915,1},fake},
                   {atom,{915,1},is_beam_bif_info}},
               []}]],
         [{debug_line,915,319},{atom,{915,1},ignore}]},
     {clause,
         {915,1},
         [{cons,{915,8},{var,{915,9},'L'},{var,{915,11},'Ls'}},
          {var,{915,16},'N'}],
         [],
         [{debug_line,916,320},
          {cons,
              {916,5},
              {tuple,{916,6},[{var,{916,7},'L'},{var,{916,9},'N'}]},
              {call,
                  {916,12},
                  {atom,{916,12},number},
                  [{var,{916,19},'Ls'},
                   {block,0,
                       [{op,{916,24},
                            '+',
                            {var,{916,23},'N'},
                            {integer,{916,25},1}}]}]}}]},
     {clause,
         {917,1},
         [{nil,{917,8}},{var,{917,12},'_'}],
         [],
         [{debug_line,917,321},{nil,{917,18}}]}]}.
{function,
    {919,1},
    fold_blocks_1,4,
    [{clause,
         {919,1},
         [{var,{919,1},'_'},
          {var,{919,1},'_'},
          {var,{919,1},'_'},
          {var,{919,1},'_'}],
         [[{call,
               {919,1},
               {remote,
                   {919,1},
                   {atom,{919,1},fake},
                   {atom,{919,1},is_beam_bif_info}},
               []}]],
         [{debug_line,919,322},{atom,{919,1},ignore}]},
     {clause,
         {919,1},
         [{cons,{919,15},{var,{919,16},'L'},{var,{919,18},'Ls'}},
          {var,{919,23},'Fun'},
          {var,{919,28},'Blocks'},
          {var,{919,36},'Acc0'}],
         [],
         [{debug_line,920,323},
          {match,
              {920,5},
              {var,{920,5},'Block'},
              {call,
                  {920,13},
                  {remote,
                      {920,13},
                      {atom,{920,13},erlang},
                      {atom,{920,13},map_get}},
                  [{var,{920,21},'L'},{var,{920,24},'Blocks'}]}},
          {debug_line,921,324},
          {match,
              {921,5},
              {var,{921,5},'Acc'},
              {call,
                  {921,11},
                  {var,{921,11},'Fun'},
                  [{var,{921,15},'L'},
                   {var,{921,18},'Block'},
                   {var,{921,25},'Acc0'}]}},
          {debug_line,922,325},
          {call,
              {922,5},
              {atom,{922,5},fold_blocks_1},
              [{var,{922,19},'Ls'},
               {var,{922,23},'Fun'},
               {var,{922,28},'Blocks'},
               {var,{922,36},'Acc'}]}]},
     {clause,
         {923,1},
         [{nil,{923,15}},
          {var,{923,19},'_'},
          {var,{923,22},'_'},
          {var,{923,25},'Acc'}],
         [],
         [{debug_line,923,326},{var,{923,33},'Acc'}]}]}.
{function,
    {925,1},
    fold_instrs_1,4,
    [{clause,
         {925,1},
         [{var,{925,1},'_'},
          {var,{925,1},'_'},
          {var,{925,1},'_'},
          {var,{925,1},'_'}],
         [[{call,
               {925,1},
               {remote,
                   {925,1},
                   {atom,{925,1},fake},
                   {atom,{925,1},is_beam_bif_info}},
               []}]],
         [{debug_line,925,327},{atom,{925,1},ignore}]},
     {clause,
         {925,1},
         [{cons,{925,15},{var,{925,16},'L'},{var,{925,18},'Ls'}},
          {var,{925,23},'Fun'},
          {var,{925,28},'Blocks'},
          {var,{925,36},'Acc0'}],
         [],
         [{debug_line,926,328},
          {match,
              {926,5},
              {tuple,
                  {926,5},
                  [{atom,{926,5},b_blk},
                   {var,{926,5},'_'},
                   {var,{926,15},'Is'},
                   {var,{926,23},'Last'}]},
              {call,
                  {926,31},
                  {remote,
                      {926,31},
                      {atom,{926,31},erlang},
                      {atom,{926,31},map_get}},
                  [{var,{926,39},'L'},{var,{926,42},'Blocks'}]}},
          {debug_line,927,329},
          {match,
              {927,5},
              {var,{927,5},'Acc1'},
              {call,
                  {927,12},
                  {remote,
                      {927,12},
                      {atom,{927,12},lists},
                      {atom,{927,12},foldl}},
                  [{var,{927,18},'Fun'},
                   {var,{927,23},'Acc0'},
                   {var,{927,29},'Is'}]}},
          {debug_line,928,330},
          {match,
              {928,5},
              {var,{928,5},'Acc'},
              {call,
                  {928,11},
                  {var,{928,11},'Fun'},
                  [{var,{928,15},'Last'},{var,{928,21},'Acc1'}]}},
          {debug_line,929,331},
          {call,
              {929,5},
              {atom,{929,5},fold_instrs_1},
              [{var,{929,19},'Ls'},
               {var,{929,23},'Fun'},
               {var,{929,28},'Blocks'},
               {var,{929,36},'Acc'}]}]},
     {clause,
         {930,1},
         [{nil,{930,15}},
          {var,{930,19},'_'},
          {var,{930,22},'_'},
          {var,{930,25},'Acc'}],
         [],
         [{debug_line,930,332},{var,{930,33},'Acc'}]}]}.
{function,
 {932,1},
 mapfold_instrs_1,4,
 [{clause,
   {932,1},
   [{var,{932,1},'_'},{var,{932,1},'_'},{var,{932,1},'_'},{var,{932,1},'_'}],
   [[{call,
      {932,1},
      {remote,{932,1},{atom,{932,1},fake},{atom,{932,1},is_beam_bif_info}},
      []}]],
   [{debug_line,932,333},{atom,{932,1},ignore}]},
  {clause,
   {932,1},
   [{cons,{932,18},{var,{932,19},'L'},{var,{932,21},'Ls'}},
    {var,{932,26},'Fun'},
    {var,{932,31},'Blocks0'},
    {var,{932,40},'Acc0'}],
   [],
   [{debug_line,933,334},
    {match,
     {933,5},
     {tuple,
      {933,5},
      [{atom,{933,5},b_blk},
       {var,{933,5},'_'},
       {var,{933,15},'Is0'},
       {var,{933,24},'Last0'}]},
     {match,
      {933,33},
      {var,{933,33},'Block0'},
      {call,
       {933,42},
       {remote,{933,42},{atom,{933,42},erlang},{atom,{933,42},map_get}},
       [{var,{933,50},'L'},{var,{933,53},'Blocks0'}]}}},
    {debug_line,934,335},
    {match,
     {934,5},
     {tuple,{934,5},[{var,{934,6},'Is'},{var,{934,9},'Acc1'}]},
     {call,
      {934,17},
      {remote,{934,17},{atom,{934,17},lists},{atom,{934,17},mapfoldl}},
      [{var,{934,26},'Fun'},{var,{934,31},'Acc0'},{var,{934,37},'Is0'}]}},
    {debug_line,935,336},
    {match,
     {935,5},
     {tuple,{935,5},[{var,{935,6},'Last'},{var,{935,11},'Acc'}]},
     {call,
      {935,18},
      {var,{935,18},'Fun'},
      [{var,{935,22},'Last0'},{var,{935,29},'Acc1'}]}},
    {debug_line,936,337},
    {match,
     {936,5},
     {var,{936,5},'Block'},
     {block,
      {936,13},
      [{match,{936,13},{var,{936,13},rec33},{var,{936,13},'Block0'}},
       {'case',
        {936,26},
        {var,{936,13},rec33},
        [{clause,
          {936,26},
          [{tuple,
            {936,26},
            [{atom,{936,26},b_blk},
             {var,{936,26},'_'},
             {var,{936,26},'_'},
             {var,{936,26},'_'}]}],
          [],
          [{call,
            {936,26},
            {remote,
             {936,26},
             {atom,{936,26},erlang},
             {atom,{936,26},setelement}},
            [{integer,{936,26},3},
             {call,
              {936,32},
              {remote,
               {936,32},
               {atom,{936,32},erlang},
               {atom,{936,32},setelement}},
              [{integer,{936,32},4},
               {var,{936,13},rec33},
               {var,{936,37},'Last'}]},
             {var,{936,29},'Is'}]}]},
         {clause,
          [{generated,true},{location,{936,26}}],
          [{var,[{generated,true},{location,{936,26}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{936,26}}],
            {remote,
             [{generated,true},{location,{936,26}}],
             {atom,[{generated,true},{location,{936,26}}],erlang},
             {atom,[{generated,true},{location,{936,26}}],error}},
            [{tuple,
              [{generated,true},{location,{936,26}}],
              [{atom,[{generated,true},{location,{936,26}}],badrecord},
               {var,{936,13},rec33}]}]}]}]}]}},
    {debug_line,937,338},
    {match,
     {937,5},
     {var,{937,5},'Blocks'},
     {map,
      {937,21},
      {var,{937,14},'Blocks0'},
      [{map_field_exact,{937,24},{var,{937,23},'L'},{var,{937,26},'Block'}}]}},
    {debug_line,938,339},
    {call,
     {938,5},
     {atom,{938,5},mapfold_instrs_1},
     [{var,{938,22},'Ls'},
      {var,{938,26},'Fun'},
      {var,{938,31},'Blocks'},
      {var,{938,39},'Acc'}]}]},
  {clause,
   {939,1},
   [{nil,{939,18}},
    {var,{939,22},'_'},
    {var,{939,25},'Blocks'},
    {var,{939,33},'Acc'}],
   [],
   [{debug_line,940,340},
    {tuple,{940,5},[{var,{940,6},'Blocks'},{var,{940,13},'Acc'}]}]}]}.
{function,
 {942,1},
 flatmapfold_instrs_1,4,
 [{clause,
   {942,1},
   [{var,{942,1},'_'},{var,{942,1},'_'},{var,{942,1},'_'},{var,{942,1},'_'}],
   [[{call,
      {942,1},
      {remote,{942,1},{atom,{942,1},fake},{atom,{942,1},is_beam_bif_info}},
      []}]],
   [{debug_line,942,341},{atom,{942,1},ignore}]},
  {clause,
   {942,1},
   [{cons,{942,22},{var,{942,23},'L'},{var,{942,25},'Ls'}},
    {var,{942,30},'Fun'},
    {var,{942,35},'Blocks0'},
    {var,{942,44},'Acc0'}],
   [],
   [{debug_line,943,342},
    {match,
     {943,5},
     {tuple,
      {943,5},
      [{atom,{943,5},b_blk},
       {var,{943,5},'_'},
       {var,{943,15},'Is0'},
       {var,{943,24},'Last0'}]},
     {match,
      {943,33},
      {var,{943,33},'Block0'},
      {call,
       {943,42},
       {remote,{943,42},{atom,{943,42},erlang},{atom,{943,42},map_get}},
       [{var,{943,50},'L'},{var,{943,53},'Blocks0'}]}}},
    {debug_line,944,343},
    {match,
     {944,5},
     {tuple,{944,5},[{var,{944,6},'Is'},{var,{944,9},'Acc1'}]},
     {call,
      {944,17},
      {atom,{944,17},flatmapfoldl},
      [{var,{944,30},'Fun'},{var,{944,35},'Acc0'},{var,{944,41},'Is0'}]}},
    {debug_line,945,344},
    {match,
     {945,5},
     {tuple,
      {945,5},
      [{cons,{945,6},{var,{945,7},'Last'},{nil,{945,11}}},
       {var,{945,13},'Acc'}]},
     {call,
      {945,20},
      {var,{945,20},'Fun'},
      [{var,{945,24},'Last0'},{var,{945,31},'Acc1'}]}},
    {debug_line,946,345},
    {match,
     {946,5},
     {var,{946,5},'Block'},
     {block,
      {946,13},
      [{match,{946,13},{var,{946,13},rec34},{var,{946,13},'Block0'}},
       {'case',
        {946,26},
        {var,{946,13},rec34},
        [{clause,
          {946,26},
          [{tuple,
            {946,26},
            [{atom,{946,26},b_blk},
             {var,{946,26},'_'},
             {var,{946,26},'_'},
             {var,{946,26},'_'}]}],
          [],
          [{call,
            {946,26},
            {remote,
             {946,26},
             {atom,{946,26},erlang},
             {atom,{946,26},setelement}},
            [{integer,{946,26},3},
             {call,
              {946,32},
              {remote,
               {946,32},
               {atom,{946,32},erlang},
               {atom,{946,32},setelement}},
              [{integer,{946,32},4},
               {var,{946,13},rec34},
               {var,{946,37},'Last'}]},
             {var,{946,29},'Is'}]}]},
         {clause,
          [{generated,true},{location,{946,26}}],
          [{var,[{generated,true},{location,{946,26}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{946,26}}],
            {remote,
             [{generated,true},{location,{946,26}}],
             {atom,[{generated,true},{location,{946,26}}],erlang},
             {atom,[{generated,true},{location,{946,26}}],error}},
            [{tuple,
              [{generated,true},{location,{946,26}}],
              [{atom,[{generated,true},{location,{946,26}}],badrecord},
               {var,{946,13},rec34}]}]}]}]}]}},
    {debug_line,947,346},
    {match,
     {947,5},
     {var,{947,5},'Blocks'},
     {map,
      {947,21},
      {var,{947,14},'Blocks0'},
      [{map_field_exact,{947,24},{var,{947,23},'L'},{var,{947,26},'Block'}}]}},
    {debug_line,948,347},
    {call,
     {948,5},
     {atom,{948,5},flatmapfold_instrs_1},
     [{var,{948,26},'Ls'},
      {var,{948,30},'Fun'},
      {var,{948,35},'Blocks'},
      {var,{948,43},'Acc'}]}]},
  {clause,
   {949,1},
   [{nil,{949,22}},
    {var,{949,26},'_'},
    {var,{949,29},'Blocks'},
    {var,{949,37},'Acc'}],
   [],
   [{debug_line,950,348},
    {tuple,{950,5},[{var,{950,6},'Blocks'},{var,{950,13},'Acc'}]}]}]}.
{function,
    {952,1},
    linearize_1,4,
    [{clause,
         {952,1},
         [{var,{952,1},'_'},
          {var,{952,1},'_'},
          {var,{952,1},'_'},
          {var,{952,1},'_'}],
         [[{call,
               {952,1},
               {remote,
                   {952,1},
                   {atom,{952,1},fake},
                   {atom,{952,1},is_beam_bif_info}},
               []}]],
         [{debug_line,952,349},{atom,{952,1},ignore}]},
     {clause,
         {952,1},
         [{cons,{952,13},{var,{952,14},'L'},{var,{952,16},'Ls'}},
          {var,{952,21},'Blocks'},
          {var,{952,29},'Seen0'},
          {var,{952,36},'Acc0'}],
         [],
         [{debug_line,953,350},
          {'case',
              {953,5},
              {call,
                  {953,10},
                  {remote,
                      {953,14},
                      {atom,{953,10},sets},
                      {atom,{953,15},is_element}},
                  [{var,{953,26},'L'},{var,{953,29},'Seen0'}]},
              [{clause,
                   {954,9},
                   [{atom,{954,9},true}],
                   [],
                   [{debug_line,955,351},
                    {call,
                        {955,13},
                        {atom,{955,13},linearize_1},
                        [{var,{955,25},'Ls'},
                         {var,{955,29},'Blocks'},
                         {var,{955,37},'Seen0'},
                         {var,{955,44},'Acc0'}]}]},
               {clause,
                   {956,9},
                   [{atom,{956,9},false}],
                   [],
                   [{debug_line,957,352},
                    {match,
                        {957,13},
                        {var,{957,13},'Seen1'},
                        {call,
                            {957,21},
                            {remote,
                                {957,25},
                                {atom,{957,21},sets},
                                {atom,{957,26},add_element}},
                            [{var,{957,38},'L'},{var,{957,41},'Seen0'}]}},
                    {debug_line,958,353},
                    {match,
                        {958,13},
                        {var,{958,13},'Block'},
                        {call,
                            {958,21},
                            {remote,
                                {958,21},
                                {atom,{958,21},erlang},
                                {atom,{958,21},map_get}},
                            [{var,{958,29},'L'},{var,{958,32},'Blocks'}]}},
                    {debug_line,959,354},
                    {match,
                        {959,13},
                        {var,{959,13},'Successors'},
                        {call,
                            {959,26},
                            {atom,{959,26},successors},
                            [{var,{959,37},'Block'}]}},
                    {debug_line,960,355},
                    {match,
                        {960,13},
                        {tuple,
                            {960,13},
                            [{var,{960,14},'Acc'},{var,{960,18},'Seen'}]},
                        {call,
                            {960,26},
                            {atom,{960,26},linearize_1},
                            [{var,{960,38},'Successors'},
                             {var,{960,50},'Blocks'},
                             {var,{960,58},'Seen1'},
                             {var,{960,65},'Acc0'}]}},
                    {debug_line,961,356},
                    {call,
                        {961,13},
                        {atom,{961,13},linearize_1},
                        [{var,{961,25},'Ls'},
                         {var,{961,29},'Blocks'},
                         {var,{961,37},'Seen'},
                         {block,0,
                             [{cons,
                                  {961,43},
                                  {tuple,
                                      {961,44},
                                      [{var,{961,45},'L'},
                                       {var,{961,47},'Block'}]},
                                  {var,{961,54},'Acc'}}]}]}]}]}]},
     {clause,
         {963,1},
         [{nil,{963,13}},
          {var,{963,17},'_'},
          {var,{963,20},'Seen'},
          {var,{963,26},'Acc'}],
         [],
         [{debug_line,964,357},
          {tuple,{964,5},[{var,{964,6},'Acc'},{var,{964,10},'Seen'}]}]}]}.
{function,
 {966,1},
 fix_phis,2,
 [{clause,
   {966,1},
   [{var,{966,1},'_'},{var,{966,1},'_'}],
   [[{call,
      {966,1},
      {remote,{966,1},{atom,{966,1},fake},{atom,{966,1},is_beam_bif_info}},
      []}]],
   [{debug_line,966,358},{atom,{966,1},ignore}]},
  {clause,
   {966,1},
   [{cons,
     {966,10},
     {tuple,{966,11},[{var,{966,12},'L'},{var,{966,14},'Blk0'}]},
     {var,{966,20},'Bs'}},
    {var,{966,25},'S'}],
   [],
   [{debug_line,967,359},
    {match,
     {967,5},
     {var,{967,5},'Blk'},
     {'case',
      {967,11},
      {var,{967,16},'Blk0'},
      [{clause,
        {968,15},
        [{tuple,
          {968,15},
          [{atom,{968,15},b_blk},
           {var,{968,15},'_'},
           {match,
            {968,25},
            {cons,
             {968,25},
             {tuple,
              {968,26},
              [{atom,{968,26},b_set},
               {var,{968,26},'_'},
               {var,{968,26},'_'},
               {atom,{968,36},phi},
               {var,{968,26},'_'}]},
             {var,{968,41},'_'}},
            {var,{968,44},'Is0'}},
           {var,{968,15},'_'}]}],
        [],
        [{debug_line,969,360},
         {match,
          {969,19},
          {var,{969,19},'Is'},
          {call,
           {969,24},
           {atom,{969,24},fix_phis_1},
           [{var,{969,35},'Is0'},{var,{969,40},'L'},{var,{969,43},'S'}]}},
         {debug_line,970,361},
         {block,
          {970,19},
          [{match,{970,19},{var,{970,19},rec35},{var,{970,19},'Blk0'}},
           {'case',
            {970,30},
            {var,{970,19},rec35},
            [{clause,
              {970,30},
              [{tuple,
                {970,30},
                [{atom,{970,30},b_blk},
                 {var,{970,30},'_'},
                 {var,{970,30},'_'},
                 {var,{970,30},'_'}]}],
              [],
              [{call,
                {970,30},
                {remote,
                 {970,30},
                 {atom,{970,30},erlang},
                 {atom,{970,30},setelement}},
                [{integer,{970,30},3},
                 {var,{970,19},rec35},
                 {var,{970,33},'Is'}]}]},
             {clause,
              [{generated,true},{location,{970,30}}],
              [{var,[{generated,true},{location,{970,30}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{970,30}}],
                {remote,
                 [{generated,true},{location,{970,30}}],
                 {atom,[{generated,true},{location,{970,30}}],erlang},
                 {atom,[{generated,true},{location,{970,30}}],error}},
                [{tuple,
                  [{generated,true},{location,{970,30}}],
                  [{atom,[{generated,true},{location,{970,30}}],badrecord},
                   {var,{970,19},rec35}]}]}]}]}]}]},
       {clause,
        {971,15},
        [{tuple,
          {971,15},
          [{atom,{971,15},b_blk},
           {var,{971,15},'_'},
           {var,{971,15},'_'},
           {var,{971,15},'_'}]}],
        [],
        [{debug_line,972,362},{var,{972,19},'Blk0'}]}]}},
    {debug_line,974,363},
    {match,
     {974,5},
     {var,{974,5},'Successors'},
     {call,{974,18},{atom,{974,18},successors},[{var,{974,29},'Blk'}]}},
    {debug_line,975,364},
    {cons,
     {975,5},
     {tuple,{975,6},[{var,{975,7},'L'},{var,{975,9},'Blk'}]},
     {call,
      {975,14},
      {atom,{975,14},fix_phis},
      [{var,{975,23},'Bs'},
       {block,0,
        [{map,
          {975,28},
          {var,{975,27},'S'},
          [{map_field_assoc,
            {975,31},
            {var,{975,30},'L'},
            {var,{975,33},'Successors'}}]}]}]}}]},
  {clause,
   {976,1},
   [{nil,{976,10}},{var,{976,14},'_'}],
   [],
   [{debug_line,976,365},{nil,{976,20}}]}]}.
{function,
 {978,1},
 fix_phis_1,3,
 [{clause,
   {978,1},
   [{var,{978,1},'_'},{var,{978,1},'_'},{var,{978,1},'_'}],
   [[{call,
      {978,1},
      {remote,{978,1},{atom,{978,1},fake},{atom,{978,1},is_beam_bif_info}},
      []}]],
   [{debug_line,978,366},{atom,{978,1},ignore}]},
  {clause,
   {978,1},
   [{cons,
     {978,12},
     {match,
      {978,13},
      {tuple,
       {978,13},
       [{atom,{978,13},b_set},
        {var,{978,13},'_'},
        {var,{978,13},'_'},
        {atom,{978,23},phi},
        {var,{978,32},'Args0'}]},
      {var,{978,39},'I'}},
     {var,{978,41},'Is'}},
    {var,{978,46},'L'},
    {var,{978,49},'S'}],
   [],
   [{debug_line,979,367},
    {match,
     {979,5},
     {var,{979,5},'Args'},
     {lc,
      {979,12},
      {block,0,
       [{tuple,{979,13},[{var,{979,14},'Val'},{var,{979,18},'Pred'}]}]},
      [{block,0,[{atom,{979,42},true}]},
       {generate_strict,
        {979,38},
        {tuple,{979,27},[{var,{979,28},'Val'},{var,{979,32},'Pred'}]},
        {var,{979,42},'Args0'}},
       {block,0,[{debug_line,980,368},{atom,{980,27},true}]},
       {call,
        {980,27},
        {atom,{980,27},is_successor},
        [{var,{980,40},'L'},{var,{980,43},'Pred'},{var,{980,49},'S'}]}]}},
    {debug_line,981,369},
    {cons,
     {981,5},
     {block,
      {981,6},
      [{match,{981,6},{var,{981,6},rec36},{var,{981,6},'I'}},
       {'case',
        {981,14},
        {var,{981,6},rec36},
        [{clause,
          {981,14},
          [{tuple,
            {981,14},
            [{atom,{981,14},b_set},
             {var,{981,14},'_'},
             {var,{981,14},'_'},
             {var,{981,14},'_'},
             {var,{981,14},'_'}]}],
          [],
          [{call,
            {981,14},
            {remote,
             {981,14},
             {atom,{981,14},erlang},
             {atom,{981,14},setelement}},
            [{integer,{981,14},5},
             {var,{981,6},rec36},
             {var,{981,19},'Args'}]}]},
         {clause,
          [{generated,true},{location,{981,14}}],
          [{var,[{generated,true},{location,{981,14}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{981,14}}],
            {remote,
             [{generated,true},{location,{981,14}}],
             {atom,[{generated,true},{location,{981,14}}],erlang},
             {atom,[{generated,true},{location,{981,14}}],error}},
            [{tuple,
              [{generated,true},{location,{981,14}}],
              [{atom,[{generated,true},{location,{981,14}}],badrecord},
               {var,{981,6},rec36}]}]}]}]}]},
     {call,
      {981,25},
      {atom,{981,25},fix_phis_1},
      [{var,{981,36},'Is'},{var,{981,40},'L'},{var,{981,43},'S'}]}}]},
  {clause,
   {982,1},
   [{var,{982,12},'Is'},{var,{982,16},'_'},{var,{982,19},'_'}],
   [],
   [{debug_line,982,370},{var,{982,25},'Is'}]}]}.
{function,
    {984,1},
    is_successor,3,
    [{clause,
         {984,1},
         [{var,{984,1},'_'},{var,{984,1},'_'},{var,{984,1},'_'}],
         [[{call,
               {984,1},
               {remote,
                   {984,1},
                   {atom,{984,1},fake},
                   {atom,{984,1},is_beam_bif_info}},
               []}]],
         [{debug_line,984,371},{atom,{984,1},ignore}]},
     {clause,
         {984,1},
         [{var,{984,14},'L'},{var,{984,17},'Pred'},{var,{984,23},'S'}],
         [],
         [{debug_line,985,372},
          {'case',
              {985,5},
              {var,{985,10},'S'},
              [{clause,
                   {986,9},
                   [{map,
                        {986,9},
                        [{map_field_exact,
                             {986,15},
                             {var,{986,11},'Pred'},
                             {var,{986,17},'Successors'}}]}],
                   [],
                   [{debug_line,987,373},
                    {call,
                        {987,13},
                        {remote,
                            {987,13},
                            {atom,{987,13},lists},
                            {atom,{987,13},member}},
                        [{var,{987,20},'L'},{var,{987,23},'Successors'}]}]},
               {clause,
                   {988,9},
                   [{map,{988,9},[]}],
                   [],
                   [{debug_line,990,374},{atom,{990,13},false}]}]}]}]}.
{function,
 {993,1},
 trim_unreachable_1,2,
 [{clause,
   {993,1},
   [{var,{993,1},'_'},{var,{993,1},'_'}],
   [[{call,
      {993,1},
      {remote,{993,1},{atom,{993,1},fake},{atom,{993,1},is_beam_bif_info}},
      []}]],
   [{debug_line,993,375},{atom,{993,1},ignore}]},
  {clause,
   {993,1},
   [{cons,
     {993,20},
     {tuple,{993,21},[{var,{993,22},'L'},{var,{993,24},'Blk0'}]},
     {var,{993,30},'Bs'}},
    {var,{993,35},'Seen0'}],
   [],
   [{debug_line,994,376},
    {match,
     {994,5},
     {var,{994,5},'Blk'},
     {call,
      {994,11},
      {atom,{994,11},trim_phis},
      [{var,{994,21},'Blk0'},{var,{994,27},'Seen0'}]}},
    {debug_line,995,377},
    {'case',
     {995,5},
     {call,
      {995,10},
      {remote,{995,14},{atom,{995,10},sets},{atom,{995,15},is_element}},
      [{var,{995,26},'L'},{var,{995,29},'Seen0'}]},
     [{clause,
       {996,9},
       [{atom,{996,9},false}],
       [],
       [{debug_line,997,378},
        {call,
         {997,13},
         {atom,{997,13},trim_unreachable_1},
         [{var,{997,32},'Bs'},{var,{997,36},'Seen0'}]}]},
      {clause,
       {998,9},
       [{atom,{998,9},true}],
       [],
       [{debug_line,999,379},
        {'case',
         {999,13},
         {call,{999,18},{atom,{999,18},successors},[{var,{999,29},'Blk'}]},
         [{clause,
           {1000,17},
           [{nil,{1000,17}}],
           [],
           [{debug_line,1001,380},
            {cons,
             {1001,21},
             {tuple,{1001,22},[{var,{1001,23},'L'},{var,{1001,25},'Blk'}]},
             {call,
              {1001,30},
              {atom,{1001,30},trim_unreachable_1},
              [{var,{1001,49},'Bs'},{var,{1001,53},'Seen0'}]}}]},
          {clause,
           {1002,17},
           [{cons,{1002,17},{var,{1002,18},'Next'},{nil,{1002,22}}}],
           [],
           [{debug_line,1003,381},
            {match,
             {1003,21},
             {var,{1003,21},'Seen'},
             {call,
              {1003,28},
              {remote,
               {1003,32},
               {atom,{1003,28},sets},
               {atom,{1003,33},add_element}},
              [{var,{1003,45},'Next'},{var,{1003,51},'Seen0'}]}},
            {debug_line,1004,382},
            {cons,
             {1004,21},
             {tuple,{1004,22},[{var,{1004,23},'L'},{var,{1004,25},'Blk'}]},
             {call,
              {1004,30},
              {atom,{1004,30},trim_unreachable_1},
              [{var,{1004,49},'Bs'},{var,{1004,53},'Seen'}]}}]},
          {clause,
           {1005,17},
           [{match,
             {1005,17},
             {cons,{1005,17},{var,{1005,18},'_'},{var,{1005,20},'_'}},
             {var,{1005,23},'Successors'}}],
           [],
           [{debug_line,1006,383},
            {match,
             {1006,21},
             {var,{1006,21},'Seen'},
             {call,
              {1006,28},
              {remote,{1006,32},{atom,{1006,28},sets},{atom,{1006,33},union}},
              [{var,{1006,39},'Seen0'},
               {block,0,
                [{call,
                  {1006,46},
                  {remote,
                   {1006,50},
                   {atom,{1006,46},sets},
                   {atom,{1006,51},from_list}},
                  [{var,{1006,61},'Successors'}]}]}]}},
            {debug_line,1007,384},
            {cons,
             {1007,21},
             {tuple,{1007,22},[{var,{1007,23},'L'},{var,{1007,25},'Blk'}]},
             {call,
              {1007,30},
              {atom,{1007,30},trim_unreachable_1},
              [{var,{1007,49},'Bs'},{var,{1007,53},'Seen'}]}}]}]}]}]}]},
  {clause,
   {1010,1},
   [{nil,{1010,20}},{var,{1010,24},'_'}],
   [],
   [{debug_line,1010,385},{nil,{1010,30}}]}]}.
{function,
    {1012,1},
    trim_phis,2,
    [{clause,
         {1012,1},
         [{var,{1012,1},'_'},{var,{1012,1},'_'}],
         [[{call,
               {1012,1},
               {remote,
                   {1012,1},
                   {atom,{1012,1},fake},
                   {atom,{1012,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1012,386},{atom,{1012,1},ignore}]},
     {clause,
         {1012,1},
         [{match,
              {1012,11},
              {tuple,
                  {1012,11},
                  [{atom,{1012,11},b_blk},
                   {var,{1012,11},'_'},
                   {match,
                       {1012,21},
                       {cons,
                           {1012,21},
                           {tuple,
                               {1012,22},
                               [{atom,{1012,22},b_set},
                                {var,{1012,22},'_'},
                                {var,{1012,22},'_'},
                                {atom,{1012,32},phi},
                                {var,{1012,22},'_'}]},
                           {var,{1012,37},'_'}},
                       {var,{1012,40},'Is0'}},
                   {var,{1012,11},'_'}]},
              {var,{1012,45},'Blk'}},
          {var,{1012,50},'Seen'}],
         [],
         [{debug_line,1013,387},
          {match,
              {1013,5},
              {var,{1013,5},'Is'},
              {call,
                  {1013,10},
                  {atom,{1013,10},trim_phis_1},
                  [{var,{1013,22},'Is0'},{var,{1013,27},'Seen'}]}},
          {debug_line,1014,388},
          {block,
              {1014,5},
              [{match,{1014,5},{var,{1014,5},rec37},{var,{1014,5},'Blk'}},
               {'case',
                   {1014,15},
                   {var,{1014,5},rec37},
                   [{clause,
                        {1014,15},
                        [{tuple,
                             {1014,15},
                             [{atom,{1014,15},b_blk},
                              {var,{1014,15},'_'},
                              {var,{1014,15},'_'},
                              {var,{1014,15},'_'}]}],
                        [],
                        [{call,
                             {1014,15},
                             {remote,
                                 {1014,15},
                                 {atom,{1014,15},erlang},
                                 {atom,{1014,15},setelement}},
                             [{integer,{1014,15},3},
                              {var,{1014,5},rec37},
                              {var,{1014,18},'Is'}]}]},
                    {clause,
                        [{generated,true},{location,{1014,15}}],
                        [{var,[{generated,true},{location,{1014,15}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{1014,15}}],
                             {remote,
                                 [{generated,true},{location,{1014,15}}],
                                 {atom,
                                     [{generated,true},{location,{1014,15}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{1014,15}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{1014,15}}],
                                  [{atom,
                                       [{generated,true},{location,{1014,15}}],
                                       badrecord},
                                   {var,{1014,5},rec37}]}]}]}]}]}]},
     {clause,
         {1015,1},
         [{var,{1015,11},'Blk'},{var,{1015,16},'_Seen'}],
         [],
         [{debug_line,1015,389},{var,{1015,26},'Blk'}]}]}.
{function,
 {1017,1},
 trim_phis_1,2,
 [{clause,
   {1017,1},
   [{var,{1017,1},'_'},{var,{1017,1},'_'}],
   [[{call,
      {1017,1},
      {remote,{1017,1},{atom,{1017,1},fake},{atom,{1017,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1017,390},{atom,{1017,1},ignore}]},
  {clause,
   {1017,1},
   [{cons,
     {1017,13},
     {match,
      {1017,14},
      {tuple,
       {1017,14},
       [{atom,{1017,14},b_set},
        {var,{1017,14},'_'},
        {var,{1017,14},'_'},
        {atom,{1017,24},phi},
        {var,{1017,33},'Args0'}]},
      {var,{1017,40},'I'}},
     {var,{1017,42},'Is'}},
    {var,{1017,47},'Seen'}],
   [],
   [{debug_line,1018,391},
    {match,
     {1018,5},
     {var,{1018,5},'Args'},
     {lc,
      {1018,12},
      {block,0,[{var,{1018,13},'P'}]},
      [{block,0,[{atom,{1018,30},true}]},
       {generate_strict,
        {1018,26},
        {match,
         {1018,18},
         {tuple,{1018,18},[{var,{1018,19},'_'},{var,{1018,21},'L'}]},
         {var,{1018,24},'P'}},
        {var,{1018,30},'Args0'}},
       {block,0,[{atom,{1018,37},true}]},
       {call,
        {1018,37},
        {remote,{1018,41},{atom,{1018,37},sets},{atom,{1018,42},is_element}},
        [{var,{1018,53},'L'},{var,{1018,56},'Seen'}]}]}},
    {debug_line,1019,392},
    {cons,
     {1019,5},
     {block,
      {1019,6},
      [{match,{1019,6},{var,{1019,6},rec38},{var,{1019,6},'I'}},
       {'case',
        {1019,14},
        {var,{1019,6},rec38},
        [{clause,
          {1019,14},
          [{tuple,
            {1019,14},
            [{atom,{1019,14},b_set},
             {var,{1019,14},'_'},
             {var,{1019,14},'_'},
             {var,{1019,14},'_'},
             {var,{1019,14},'_'}]}],
          [],
          [{call,
            {1019,14},
            {remote,
             {1019,14},
             {atom,{1019,14},erlang},
             {atom,{1019,14},setelement}},
            [{integer,{1019,14},5},
             {var,{1019,6},rec38},
             {var,{1019,19},'Args'}]}]},
         {clause,
          [{generated,true},{location,{1019,14}}],
          [{var,[{generated,true},{location,{1019,14}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{1019,14}}],
            {remote,
             [{generated,true},{location,{1019,14}}],
             {atom,[{generated,true},{location,{1019,14}}],erlang},
             {atom,[{generated,true},{location,{1019,14}}],error}},
            [{tuple,
              [{generated,true},{location,{1019,14}}],
              [{atom,[{generated,true},{location,{1019,14}}],badrecord},
               {var,{1019,6},rec38}]}]}]}]}]},
     {call,
      {1019,25},
      {atom,{1019,25},trim_phis_1},
      [{var,{1019,37},'Is'},{var,{1019,41},'Seen'}]}}]},
  {clause,
   {1020,1},
   [{var,{1020,13},'Is'},{var,{1020,17},'_Seen'}],
   [],
   [{debug_line,1020,393},{var,{1020,27},'Is'}]}]}.
{function,
    {1022,1},
    between_make_filter,3,
    [{clause,
         {1022,1},
         [{var,{1022,1},'_'},{var,{1022,1},'_'},{var,{1022,1},'_'}],
         [[{call,
               {1022,1},
               {remote,
                   {1022,1},
                   {atom,{1022,1},fake},
                   {atom,{1022,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1022,394},{atom,{1022,1},ignore}]},
     {clause,
         {1022,1},
         [{cons,{1022,21},{var,{1022,22},'L'},{var,{1022,26},'Ls'}},
          {var,{1022,31},'Preds'},
          {var,{1022,38},'Acc0'}],
         [],
         [{debug_line,1023,395},
          {'case',
              {1023,5},
              {call,
                  {1023,10},
                  {remote,
                      {1023,14},
                      {atom,{1023,10},sets},
                      {atom,{1023,15},is_element}},
                  [{var,{1023,26},'L'},{var,{1023,29},'Acc0'}]},
              [{clause,
                   {1024,9},
                   [{atom,{1024,9},true}],
                   [],
                   [{debug_line,1025,396},
                    {call,
                        {1025,13},
                        {atom,{1025,13},between_make_filter},
                        [{var,{1025,33},'Ls'},
                         {var,{1025,37},'Preds'},
                         {var,{1025,44},'Acc0'}]}]},
               {clause,
                   {1026,9},
                   [{atom,{1026,9},false}],
                   [],
                   [{debug_line,1027,397},
                    {match,
                        {1027,13},
                        {var,{1027,13},'Next'},
                        {call,
                            {1027,20},
                            {remote,
                                {1027,20},
                                {atom,{1027,20},erlang},
                                {atom,{1027,20},map_get}},
                            [{var,{1027,28},'L'},{var,{1027,31},'Preds'}]}},
                    {debug_line,1028,398},
                    {match,
                        {1028,13},
                        {var,{1028,13},'Acc1'},
                        {call,
                            {1028,20},
                            {remote,
                                {1028,24},
                                {atom,{1028,20},sets},
                                {atom,{1028,25},add_element}},
                            [{var,{1028,37},'L'},{var,{1028,40},'Acc0'}]}},
                    {debug_line,1030,399},
                    {match,
                        {1030,13},
                        {var,{1030,13},'Acc'},
                        {call,
                            {1030,19},
                            {atom,{1030,19},between_make_filter},
                            [{var,{1030,39},'Next'},
                             {var,{1030,45},'Preds'},
                             {var,{1030,52},'Acc1'}]}},
                    {debug_line,1031,400},
                    {call,
                        {1031,13},
                        {atom,{1031,13},between_make_filter},
                        [{var,{1031,33},'Ls'},
                         {var,{1031,37},'Preds'},
                         {var,{1031,44},'Acc'}]}]}]}]},
     {clause,
         {1033,1},
         [{nil,{1033,21}},{var,{1033,25},'_Preds'},{var,{1033,33},'Acc'}],
         [],
         [{debug_line,1034,401},{var,{1034,5},'Acc'}]}]}.
{function,
    {1036,1},
    between_rpo,4,
    [{clause,
         {1036,1},
         [{var,{1036,1},'_'},
          {var,{1036,1},'_'},
          {var,{1036,1},'_'},
          {var,{1036,1},'_'}],
         [[{call,
               {1036,1},
               {remote,
                   {1036,1},
                   {atom,{1036,1},fake},
                   {atom,{1036,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1036,402},{atom,{1036,1},ignore}]},
     {clause,
         {1036,1},
         [{cons,{1036,13},{var,{1036,14},'L'},{var,{1036,18},'Ls'}},
          {var,{1036,23},'Blocks'},
          {var,{1036,31},'Filter0'},
          {var,{1036,40},'Acc0'}],
         [],
         [{debug_line,1037,403},
          {'case',
              {1037,5},
              {call,
                  {1037,10},
                  {remote,
                      {1037,14},
                      {atom,{1037,10},sets},
                      {atom,{1037,15},is_element}},
                  [{var,{1037,26},'L'},{var,{1037,29},'Filter0'}]},
              [{clause,
                   {1038,9},
                   [{atom,{1038,9},true}],
                   [],
                   [{debug_line,1039,404},
                    {match,
                        {1039,13},
                        {var,{1039,13},'Block'},
                        {call,
                            {1039,21},
                            {remote,
                                {1039,21},
                                {atom,{1039,21},erlang},
                                {atom,{1039,21},map_get}},
                            [{var,{1039,29},'L'},{var,{1039,32},'Blocks'}]}},
                    {debug_line,1040,405},
                    {match,
                        {1040,13},
                        {var,{1040,13},'Filter1'},
                        {call,
                            {1040,23},
                            {remote,
                                {1040,27},
                                {atom,{1040,23},sets},
                                {atom,{1040,28},del_element}},
                            [{var,{1040,40},'L'},{var,{1040,43},'Filter0'}]}},
                    {debug_line,1042,406},
                    {match,
                        {1042,13},
                        {var,{1042,13},'Successors'},
                        {call,
                            {1042,26},
                            {atom,{1042,26},successors},
                            [{var,{1042,37},'Block'}]}},
                    {debug_line,1043,407},
                    {match,
                        {1043,13},
                        {tuple,
                            {1043,13},
                            [{var,{1043,14},'Acc'},{var,{1043,19},'Filter'}]},
                        {call,
                            {1043,29},
                            {atom,{1043,29},between_rpo},
                            [{var,{1043,41},'Successors'},
                             {var,{1043,53},'Blocks'},
                             {var,{1043,61},'Filter1'},
                             {var,{1043,70},'Acc0'}]}},
                    {debug_line,1044,408},
                    {call,
                        {1044,13},
                        {atom,{1044,13},between_rpo},
                        [{var,{1044,25},'Ls'},
                         {var,{1044,29},'Blocks'},
                         {var,{1044,37},'Filter'},
                         {block,0,
                             [{cons,
                                  {1044,45},
                                  {var,{1044,46},'L'},
                                  {var,{1044,50},'Acc'}}]}]}]},
               {clause,
                   {1045,9},
                   [{atom,{1045,9},false}],
                   [],
                   [{debug_line,1046,409},
                    {call,
                        {1046,13},
                        {atom,{1046,13},between_rpo},
                        [{var,{1046,25},'Ls'},
                         {var,{1046,29},'Blocks'},
                         {var,{1046,37},'Filter0'},
                         {var,{1046,46},'Acc0'}]}]}]}]},
     {clause,
         {1048,1},
         [{nil,{1048,13}},
          {var,{1048,17},'_'},
          {var,{1048,20},'Filter'},
          {var,{1048,28},'Acc'}],
         [],
         [{debug_line,1049,410},
          {tuple,{1049,5},[{var,{1049,6},'Acc'},{var,{1049,11},'Filter'}]}]}]}.
{function,
    {1051,1},
    rpo_1,4,
    [{clause,
         {1051,1},
         [{var,{1051,1},'_'},
          {var,{1051,1},'_'},
          {var,{1051,1},'_'},
          {var,{1051,1},'_'}],
         [[{call,
               {1051,1},
               {remote,
                   {1051,1},
                   {atom,{1051,1},fake},
                   {atom,{1051,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1051,411},{atom,{1051,1},ignore}]},
     {clause,
         {1051,1},
         [{cons,{1051,7},{var,{1051,8},'L'},{var,{1051,10},'Ls'}},
          {var,{1051,15},'Blocks'},
          {var,{1051,23},'Seen0'},
          {var,{1051,30},'Acc0'}],
         [],
         [{debug_line,1052,412},
          {'case',
              {1052,5},
              {call,
                  {1052,10},
                  {remote,
                      {1052,14},
                      {atom,{1052,10},sets},
                      {atom,{1052,15},is_element}},
                  [{var,{1052,26},'L'},{var,{1052,29},'Seen0'}]},
              [{clause,
                   {1053,9},
                   [{atom,{1053,9},true}],
                   [],
                   [{debug_line,1054,413},
                    {call,
                        {1054,13},
                        {atom,{1054,13},rpo_1},
                        [{var,{1054,19},'Ls'},
                         {var,{1054,23},'Blocks'},
                         {var,{1054,31},'Seen0'},
                         {var,{1054,38},'Acc0'}]}]},
               {clause,
                   {1055,9},
                   [{atom,{1055,9},false}],
                   [],
                   [{debug_line,1056,414},
                    {match,
                        {1056,13},
                        {var,{1056,13},'Block'},
                        {call,
                            {1056,21},
                            {remote,
                                {1056,21},
                                {atom,{1056,21},erlang},
                                {atom,{1056,21},map_get}},
                            [{var,{1056,29},'L'},{var,{1056,32},'Blocks'}]}},
                    {debug_line,1057,415},
                    {match,
                        {1057,13},
                        {var,{1057,13},'Seen1'},
                        {call,
                            {1057,21},
                            {remote,
                                {1057,25},
                                {atom,{1057,21},sets},
                                {atom,{1057,26},add_element}},
                            [{var,{1057,38},'L'},{var,{1057,41},'Seen0'}]}},
                    {debug_line,1058,416},
                    {match,
                        {1058,13},
                        {var,{1058,13},'Successors'},
                        {call,
                            {1058,26},
                            {atom,{1058,26},successors},
                            [{var,{1058,37},'Block'}]}},
                    {debug_line,1059,417},
                    {match,
                        {1059,13},
                        {tuple,
                            {1059,13},
                            [{var,{1059,14},'Acc'},{var,{1059,18},'Seen'}]},
                        {call,
                            {1059,26},
                            {atom,{1059,26},rpo_1},
                            [{var,{1059,32},'Successors'},
                             {var,{1059,44},'Blocks'},
                             {var,{1059,52},'Seen1'},
                             {var,{1059,59},'Acc0'}]}},
                    {debug_line,1060,418},
                    {call,
                        {1060,13},
                        {atom,{1060,13},rpo_1},
                        [{var,{1060,19},'Ls'},
                         {var,{1060,23},'Blocks'},
                         {var,{1060,31},'Seen'},
                         {block,0,
                             [{cons,
                                  {1060,37},
                                  {var,{1060,38},'L'},
                                  {var,{1060,40},'Acc'}}]}]}]}]}]},
     {clause,
         {1062,1},
         [{nil,{1062,7}},
          {var,{1062,11},'_'},
          {var,{1062,14},'Seen'},
          {var,{1062,20},'Acc'}],
         [],
         [{debug_line,1063,419},
          {tuple,{1063,5},[{var,{1063,6},'Acc'},{var,{1063,10},'Seen'}]}]}]}.
{function,
    {1065,1},
    rename_var,2,
    [{clause,
         {1065,1},
         [{var,{1065,1},'_'},{var,{1065,1},'_'}],
         [[{call,
               {1065,1},
               {remote,
                   {1065,1},
                   {atom,{1065,1},fake},
                   {atom,{1065,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1065,420},{atom,{1065,1},ignore}]},
     {clause,
         {1065,1},
         [{match,
              {1065,12},
              {tuple,{1065,12},[{atom,{1065,12},b_var},{var,{1065,12},'_'}]},
              {var,{1065,21},'Old'}},
          {var,{1065,26},'Rename'}],
         [],
         [{debug_line,1066,421},
          {'case',
              {1066,5},
              {var,{1066,10},'Rename'},
              [{clause,
                   {1067,9},
                   [{map,
                        {1067,9},
                        [{map_field_exact,
                             {1067,14},
                             {var,{1067,11},'Old'},
                             {var,{1067,16},'New'}}]}],
                   [],
                   [{debug_line,1067,422},{var,{1067,24},'New'}]},
               {clause,
                   {1068,9},
                   [{map,{1068,9},[]}],
                   [],
                   [{debug_line,1068,423},{var,{1068,16},'Old'}]}]}]},
     {clause,
         {1070,1},
         [{match,
              {1070,12},
              {tuple,
                  {1070,12},
                  [{atom,{1070,12},b_remote},
                   {var,{1070,26},'Mod0'},
                   {var,{1070,36},'Name0'},
                   {var,{1070,12},'_'}]},
              {var,{1070,43},'Remote'}},
          {var,{1070,51},'Rename'}],
         [],
         [{debug_line,1071,424},
          {match,
              {1071,5},
              {var,{1071,5},'Mod'},
              {call,
                  {1071,11},
                  {atom,{1071,11},rename_var},
                  [{var,{1071,22},'Mod0'},{var,{1071,28},'Rename'}]}},
          {debug_line,1072,425},
          {match,
              {1072,5},
              {var,{1072,5},'Name'},
              {call,
                  {1072,12},
                  {atom,{1072,12},rename_var},
                  [{var,{1072,23},'Name0'},{var,{1072,30},'Rename'}]}},
          {debug_line,1073,426},
          {block,
              {1073,5},
              [{match,{1073,5},{var,{1073,5},rec39},{var,{1073,5},'Remote'}},
               {'case',
                   {1073,21},
                   {var,{1073,5},rec39},
                   [{clause,
                        {1073,21},
                        [{tuple,
                             {1073,21},
                             [{atom,{1073,21},b_remote},
                              {var,{1073,21},'_'},
                              {var,{1073,21},'_'},
                              {var,{1073,21},'_'}]}],
                        [],
                        [{call,
                             {1073,21},
                             {remote,
                                 {1073,21},
                                 {atom,{1073,21},erlang},
                                 {atom,{1073,21},setelement}},
                             [{integer,{1073,21},2},
                              {call,
                                  {1073,29},
                                  {remote,
                                      {1073,29},
                                      {atom,{1073,29},erlang},
                                      {atom,{1073,29},setelement}},
                                  [{integer,{1073,29},3},
                                   {var,{1073,5},rec39},
                                   {var,{1073,34},'Name'}]},
                              {var,{1073,25},'Mod'}]}]},
                    {clause,
                        [{generated,true},{location,{1073,21}}],
                        [{var,[{generated,true},{location,{1073,21}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{1073,21}}],
                             {remote,
                                 [{generated,true},{location,{1073,21}}],
                                 {atom,
                                     [{generated,true},{location,{1073,21}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{1073,21}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{1073,21}}],
                                  [{atom,
                                       [{generated,true},{location,{1073,21}}],
                                       badrecord},
                                   {var,{1073,5},rec39}]}]}]}]}]}]},
     {clause,
         {1074,1},
         [{var,{1074,12},'Old'},{var,{1074,17},'_'}],
         [],
         [{debug_line,1074,427},{var,{1074,23},'Old'}]}]}.
{function,
    {1076,1},
    rename_phi_vars,3,
    [{clause,
         {1076,1},
         [{var,{1076,1},'_'},{var,{1076,1},'_'},{var,{1076,1},'_'}],
         [[{call,
               {1076,1},
               {remote,
                   {1076,1},
                   {atom,{1076,1},fake},
                   {atom,{1076,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1076,428},{atom,{1076,1},ignore}]},
     {clause,
         {1076,1},
         [{cons,
              {1076,17},
              {tuple,{1076,18},[{var,{1076,19},'Var'},{var,{1076,23},'L'}]},
              {var,{1076,26},'As'}},
          {var,{1076,31},'Preds'},
          {var,{1076,38},'Ren'}],
         [],
         [{debug_line,1077,429},
          {'case',
              {1077,5},
              {call,
                  {1077,10},
                  {remote,
                      {1077,14},
                      {atom,{1077,10},sets},
                      {atom,{1077,15},is_element}},
                  [{var,{1077,26},'L'},{var,{1077,29},'Preds'}]},
              [{clause,
                   {1078,9},
                   [{atom,{1078,9},true}],
                   [],
                   [{debug_line,1079,430},
                    {cons,
                        {1079,13},
                        {tuple,
                            {1079,14},
                            [{call,
                                 {1079,15},
                                 {atom,{1079,15},rename_var},
                                 [{var,{1079,26},'Var'},
                                  {var,{1079,31},'Ren'}]},
                             {var,{1079,36},'L'}]},
                        {call,
                            {1079,39},
                            {atom,{1079,39},rename_phi_vars},
                            [{var,{1079,55},'As'},
                             {var,{1079,59},'Preds'},
                             {var,{1079,66},'Ren'}]}}]},
               {clause,
                   {1080,9},
                   [{atom,{1080,9},false}],
                   [],
                   [{debug_line,1081,431},
                    {cons,
                        {1081,13},
                        {tuple,
                            {1081,14},
                            [{var,{1081,15},'Var'},{var,{1081,19},'L'}]},
                        {call,
                            {1081,22},
                            {atom,{1081,22},rename_phi_vars},
                            [{var,{1081,38},'As'},
                             {var,{1081,42},'Preds'},
                             {var,{1081,49},'Ren'}]}}]}]}]},
     {clause,
         {1083,1},
         [{nil,{1083,17}},{var,{1083,21},'_'},{var,{1083,24},'_'}],
         [],
         [{debug_line,1083,432},{nil,{1083,30}}]}]}.
{function,
 {1085,1},
 map_instrs_1,3,
 [{clause,
   {1085,1},
   [{var,{1085,1},'_'},{var,{1085,1},'_'},{var,{1085,1},'_'}],
   [[{call,
      {1085,1},
      {remote,{1085,1},{atom,{1085,1},fake},{atom,{1085,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1085,433},{atom,{1085,1},ignore}]},
  {clause,
   {1085,1},
   [{cons,{1085,14},{var,{1085,15},'L'},{var,{1085,17},'Ls'}},
    {var,{1085,22},'Fun'},
    {var,{1085,27},'Blocks0'}],
   [],
   [{debug_line,1086,434},
    {match,
     {1086,5},
     {tuple,
      {1086,5},
      [{atom,{1086,5},b_blk},
       {var,{1086,5},'_'},
       {var,{1086,15},'Is0'},
       {var,{1086,24},'Last0'}]},
     {match,
      {1086,33},
      {var,{1086,33},'Blk0'},
      {call,
       {1086,40},
       {remote,{1086,40},{atom,{1086,40},erlang},{atom,{1086,40},map_get}},
       [{var,{1086,48},'L'},{var,{1086,51},'Blocks0'}]}}},
    {debug_line,1087,435},
    {match,
     {1087,5},
     {var,{1087,5},'Is'},
     {lc,
      {1087,10},
      {block,0,[{call,{1087,11},{var,{1087,11},'Fun'},[{var,{1087,15},'I'}]}]},
      [{block,0,[{atom,{1087,26},true}]},
       {generate,{1087,23},{var,{1087,21},'I'},{var,{1087,26},'Is0'}}]}},
    {debug_line,1088,436},
    {match,
     {1088,5},
     {var,{1088,5},'Last'},
     {call,{1088,12},{var,{1088,12},'Fun'},[{var,{1088,16},'Last0'}]}},
    {debug_line,1089,437},
    {match,
     {1089,5},
     {var,{1089,5},'Blk'},
     {block,
      {1089,11},
      [{match,{1089,11},{var,{1089,11},rec40},{var,{1089,11},'Blk0'}},
       {'case',
        {1089,22},
        {var,{1089,11},rec40},
        [{clause,
          {1089,22},
          [{tuple,
            {1089,22},
            [{atom,{1089,22},b_blk},
             {var,{1089,22},'_'},
             {var,{1089,22},'_'},
             {var,{1089,22},'_'}]}],
          [],
          [{call,
            {1089,22},
            {remote,
             {1089,22},
             {atom,{1089,22},erlang},
             {atom,{1089,22},setelement}},
            [{integer,{1089,22},3},
             {call,
              {1089,28},
              {remote,
               {1089,28},
               {atom,{1089,28},erlang},
               {atom,{1089,28},setelement}},
              [{integer,{1089,28},4},
               {var,{1089,11},rec40},
               {var,{1089,33},'Last'}]},
             {var,{1089,25},'Is'}]}]},
         {clause,
          [{generated,true},{location,{1089,22}}],
          [{var,[{generated,true},{location,{1089,22}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{1089,22}}],
            {remote,
             [{generated,true},{location,{1089,22}}],
             {atom,[{generated,true},{location,{1089,22}}],erlang},
             {atom,[{generated,true},{location,{1089,22}}],error}},
            [{tuple,
              [{generated,true},{location,{1089,22}}],
              [{atom,[{generated,true},{location,{1089,22}}],badrecord},
               {var,{1089,11},rec40}]}]}]}]}]}},
    {debug_line,1090,438},
    {match,
     {1090,5},
     {var,{1090,5},'Blocks'},
     {map,
      {1090,21},
      {var,{1090,14},'Blocks0'},
      [{map_field_exact,
        {1090,24},
        {var,{1090,23},'L'},
        {var,{1090,26},'Blk'}}]}},
    {debug_line,1091,439},
    {call,
     {1091,5},
     {atom,{1091,5},map_instrs_1},
     [{var,{1091,18},'Ls'},{var,{1091,22},'Fun'},{var,{1091,27},'Blocks'}]}]},
  {clause,
   {1092,1},
   [{nil,{1092,14}},{var,{1092,18},'_'},{var,{1092,21},'Blocks'}],
   [],
   [{debug_line,1092,440},{var,{1092,32},'Blocks'}]}]}.
{function,{1094,1},
          flatmapfoldl,3,
          [{clause,{1094,1},
                   [{var,{1094,1},'_'},{var,{1094,1},'_'},{var,{1094,1},'_'}],
                   [[{call,{1094,1},
                           {remote,{1094,1},
                                   {atom,{1094,1},fake},
                                   {atom,{1094,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,1094,441},{atom,{1094,1},ignore}]},
           {clause,{1094,1},
                   [{var,{1094,14},'F'},
                    {var,{1094,17},'Accu0'},
                    {cons,{1094,24},
                          {var,{1094,25},'Hd'},
                          {var,{1094,28},'Tail'}}],
                   [],
                   [{debug_line,1095,442},
                    {match,{1095,5},
                           {tuple,{1095,5},
                                  [{var,{1095,6},'R'},{var,{1095,8},'Accu1'}]},
                           {call,{1095,17},
                                 {var,{1095,17},'F'},
                                 [{var,{1095,19},'Hd'},
                                  {var,{1095,23},'Accu0'}]}},
                    {debug_line,1096,443},
                    {match,{1096,5},
                           {tuple,{1096,5},
                                  [{var,{1096,6},'Rs'},
                                   {var,{1096,9},'Accu2'}]},
                           {call,{1096,18},
                                 {atom,{1096,18},flatmapfoldl},
                                 [{var,{1096,31},'F'},
                                  {var,{1096,34},'Accu1'},
                                  {var,{1096,41},'Tail'}]}},
                    {debug_line,1097,444},
                    {tuple,{1097,5},
                           [{op,{1097,7},
                                '++',
                                {var,{1097,6},'R'},
                                {var,{1097,9},'Rs'}},
                            {var,{1097,12},'Accu2'}]}]},
           {clause,{1098,1},
                   [{var,{1098,14},'_'},
                    {var,{1098,17},'Accu'},
                    {nil,{1098,23}}],
                   [],
                   [{debug_line,1098,445},
                    {tuple,{1098,30},
                           [{nil,{1098,31}},{var,{1098,34},'Accu'}]}]}]}.
{function,
 {1100,1},
 split_blocks_1,5,
 [{clause,
   {1100,1},
   [{var,{1100,1},'_'},
    {var,{1100,1},'_'},
    {var,{1100,1},'_'},
    {var,{1100,1},'_'},
    {var,{1100,1},'_'}],
   [[{call,
      {1100,1},
      {remote,{1100,1},{atom,{1100,1},fake},{atom,{1100,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1100,446},{atom,{1100,1},ignore}]},
  {clause,
   {1100,1},
   [{cons,{1100,16},{var,{1100,17},'L'},{var,{1100,19},'Ls'}},
    {var,{1100,24},'P'},
    {var,{1100,27},'Split'},
    {var,{1100,34},'Blocks0'},
    {var,{1100,43},'Count0'}],
   [],
   [{debug_line,1101,447},
    {match,
     {1101,5},
     {tuple,
      {1101,5},
      [{atom,{1101,5},b_blk},
       {var,{1101,5},'_'},
       {var,{1101,15},'Is0'},
       {var,{1101,5},'_'}]},
     {match,
      {1101,22},
      {var,{1101,22},'Blk'},
      {call,
       {1101,28},
       {remote,{1101,28},{atom,{1101,28},erlang},{atom,{1101,28},map_get}},
       [{var,{1101,36},'L'},{var,{1101,39},'Blocks0'}]}}},
    {debug_line,1102,448},
    {'case',
     {1102,5},
     {call,
      {1102,10},
      {var,{1102,10},'Split'},
      [{var,{1102,16},'Is0'},{var,{1102,21},'P'},{nil,{1102,24}}]},
     [{clause,
       {1103,9},
       [{tuple,
         {1103,9},
         [{atom,{1103,10},yes},{var,{1103,14},'Bef'},{var,{1103,18},'Aft'}]}],
       [],
       [{debug_line,1104,449},
        {match,{1104,13},{var,{1104,13},'NewLbl'},{var,{1104,22},'Count0'}},
        {debug_line,1105,450},
        {match,
         {1105,13},
         {var,{1105,13},'Count'},
         {op,{1105,28},'+',{var,{1105,21},'Count0'},{integer,{1105,30},1}}},
        {debug_line,1106,451},
        {match,
         {1106,13},
         {var,{1106,13},'Br'},
         {tuple,
          {1106,18},
          [{atom,{1106,18},b_br},
           {map,{1106,18},[]},
           {tuple,
            {1106,29},
            [{atom,{1106,29},b_literal},{atom,{1106,44},true}]},
           {var,{1106,55},'NewLbl'},
           {var,{1106,67},'NewLbl'}]}},
        {debug_line,1107,452},
        {match,
         {1107,13},
         {var,{1107,13},'BefBlk'},
         {block,
          {1107,22},
          [{match,{1107,22},{var,{1107,22},rec41},{var,{1107,22},'Blk'}},
           {'case',
            {1107,32},
            {var,{1107,22},rec41},
            [{clause,
              {1107,32},
              [{tuple,
                {1107,32},
                [{atom,{1107,32},b_blk},
                 {var,{1107,32},'_'},
                 {var,{1107,32},'_'},
                 {var,{1107,32},'_'}]}],
              [],
              [{call,
                {1107,32},
                {remote,
                 {1107,32},
                 {atom,{1107,32},erlang},
                 {atom,{1107,32},setelement}},
                [{integer,{1107,32},3},
                 {call,
                  {1107,39},
                  {remote,
                   {1107,39},
                   {atom,{1107,39},erlang},
                   {atom,{1107,39},setelement}},
                  [{integer,{1107,39},4},
                   {var,{1107,22},rec41},
                   {var,{1107,44},'Br'}]},
                 {var,{1107,35},'Bef'}]}]},
             {clause,
              [{generated,true},{location,{1107,32}}],
              [{var,[{generated,true},{location,{1107,32}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{1107,32}}],
                {remote,
                 [{generated,true},{location,{1107,32}}],
                 {atom,[{generated,true},{location,{1107,32}}],erlang},
                 {atom,[{generated,true},{location,{1107,32}}],error}},
                [{tuple,
                  [{generated,true},{location,{1107,32}}],
                  [{atom,[{generated,true},{location,{1107,32}}],badrecord},
                   {var,{1107,22},rec41}]}]}]}]}]}},
        {debug_line,1108,453},
        {match,
         {1108,13},
         {var,{1108,13},'NewBlk'},
         {block,
          {1108,22},
          [{match,{1108,22},{var,{1108,22},rec42},{var,{1108,22},'Blk'}},
           {'case',
            {1108,32},
            {var,{1108,22},rec42},
            [{clause,
              {1108,32},
              [{tuple,
                {1108,32},
                [{atom,{1108,32},b_blk},
                 {var,{1108,32},'_'},
                 {var,{1108,32},'_'},
                 {var,{1108,32},'_'}]}],
              [],
              [{call,
                {1108,32},
                {remote,
                 {1108,32},
                 {atom,{1108,32},erlang},
                 {atom,{1108,32},setelement}},
                [{integer,{1108,32},3},
                 {var,{1108,22},rec42},
                 {var,{1108,35},'Aft'}]}]},
             {clause,
              [{generated,true},{location,{1108,32}}],
              [{var,[{generated,true},{location,{1108,32}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{1108,32}}],
                {remote,
                 [{generated,true},{location,{1108,32}}],
                 {atom,[{generated,true},{location,{1108,32}}],erlang},
                 {atom,[{generated,true},{location,{1108,32}}],error}},
                [{tuple,
                  [{generated,true},{location,{1108,32}}],
                  [{atom,[{generated,true},{location,{1108,32}}],badrecord},
                   {var,{1108,22},rec42}]}]}]}]}]}},
        {debug_line,1109,454},
        {match,
         {1109,13},
         {var,{1109,13},'Blocks1'},
         {map,
          {1109,30},
          {var,{1109,23},'Blocks0'},
          [{map_field_exact,
            {1109,33},
            {var,{1109,32},'L'},
            {var,{1109,35},'BefBlk'}},
           {map_field_assoc,
            {1109,48},
            {var,{1109,42},'NewLbl'},
            {var,{1109,50},'NewBlk'}}]}},
        {debug_line,1110,455},
        {match,
         {1110,13},
         {var,{1110,13},'Successors'},
         {call,
          {1110,26},
          {atom,{1110,26},successors},
          [{var,{1110,37},'NewBlk'}]}},
        {debug_line,1111,456},
        {match,
         {1111,13},
         {var,{1111,13},'Blocks'},
         {call,
          {1111,22},
          {atom,{1111,22},update_phi_labels},
          [{var,{1111,40},'Successors'},
           {var,{1111,52},'L'},
           {var,{1111,55},'NewLbl'},
           {var,{1111,63},'Blocks1'}]}},
        {debug_line,1112,457},
        {call,
         {1112,13},
         {atom,{1112,13},split_blocks_1},
         [{block,0,
           [{cons,{1112,28},{var,{1112,29},'NewLbl'},{var,{1112,36},'Ls'}}]},
          {var,{1112,41},'P'},
          {var,{1112,44},'Split'},
          {var,{1112,51},'Blocks'},
          {var,{1112,59},'Count'}]}]},
      {clause,
       {1113,9},
       [{atom,{1113,9},no}],
       [],
       [{debug_line,1114,458},
        {call,
         {1114,13},
         {atom,{1114,13},split_blocks_1},
         [{var,{1114,28},'Ls'},
          {var,{1114,32},'P'},
          {var,{1114,35},'Split'},
          {var,{1114,42},'Blocks0'},
          {var,{1114,51},'Count0'}]}]}]}]},
  {clause,
   {1116,1},
   [{nil,{1116,16}},
    {var,{1116,20},'_'},
    {var,{1116,23},'_'},
    {var,{1116,26},'Blocks'},
    {var,{1116,34},'Count'}],
   [],
   [{debug_line,1117,459},
    {tuple,{1117,5},[{var,{1117,6},'Blocks'},{var,{1117,13},'Count'}]}]}]}.
{function,
    {1119,1},
    split_blocks_before_is,3,
    [{clause,
         {1119,1},
         [{var,{1119,1},'_'},{var,{1119,1},'_'},{var,{1119,1},'_'}],
         [[{call,
               {1119,1},
               {remote,
                   {1119,1},
                   {atom,{1119,1},fake},
                   {atom,{1119,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1119,460},{atom,{1119,1},ignore}]},
     {clause,
         {1119,1},
         [{cons,{1119,24},{var,{1119,25},'I'},{var,{1119,27},'Is'}},
          {var,{1119,32},'P'},
          {nil,{1119,35}}],
         [],
         [{debug_line,1120,461},
          {call,
              {1120,5},
              {atom,{1120,5},split_blocks_before_is},
              [{var,{1120,28},'Is'},
               {var,{1120,32},'P'},
               {block,0,
                   [{cons,{1120,35},{var,{1120,36},'I'},{nil,{1120,37}}}]}]}]},
     {clause,
         {1121,1},
         [{cons,{1121,24},{var,{1121,25},'I'},{var,{1121,27},'Is'}},
          {var,{1121,32},'P'},
          {var,{1121,35},'Acc'}],
         [],
         [{debug_line,1122,462},
          {'case',
              {1122,5},
              {call,{1122,10},{var,{1122,10},'P'},[{var,{1122,12},'I'}]},
              [{clause,
                   {1123,9},
                   [{atom,{1123,9},true}],
                   [],
                   [{debug_line,1124,463},
                    {tuple,
                        {1124,13},
                        [{atom,{1124,14},yes},
                         {call,
                             {1124,18},
                             {remote,
                                 {1124,18},
                                 {atom,{1124,18},lists},
                                 {atom,{1124,18},reverse}},
                             [{var,{1124,26},'Acc'}]},
                         {cons,
                             {1124,31},
                             {var,{1124,32},'I'},
                             {var,{1124,34},'Is'}}]}]},
               {clause,
                   {1125,9},
                   [{atom,{1125,9},false}],
                   [],
                   [{debug_line,1126,464},
                    {call,
                        {1126,13},
                        {atom,{1126,13},split_blocks_before_is},
                        [{var,{1126,36},'Is'},
                         {var,{1126,40},'P'},
                         {block,0,
                             [{cons,
                                  {1126,43},
                                  {var,{1126,44},'I'},
                                  {var,{1126,46},'Acc'}}]}]}]}]}]},
     {clause,
         {1128,1},
         [{nil,{1128,24}},{var,{1128,28},'_'},{var,{1128,31},'_'}],
         [],
         [{debug_line,1128,465},{atom,{1128,37},no}]}]}.
{function,
    {1130,1},
    split_blocks_after_is,3,
    [{clause,
         {1130,1},
         [{var,{1130,1},'_'},{var,{1130,1},'_'},{var,{1130,1},'_'}],
         [[{call,
               {1130,1},
               {remote,
                   {1130,1},
                   {atom,{1130,1},fake},
                   {atom,{1130,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1130,466},{atom,{1130,1},ignore}]},
     {clause,
         {1130,1},
         [{cons,{1130,23},{var,{1130,24},'I'},{var,{1130,26},'Is'}},
          {var,{1130,31},'P'},
          {var,{1130,34},'Acc'}],
         [],
         [{debug_line,1131,467},
          {'case',
              {1131,5},
              {call,{1131,10},{var,{1131,10},'P'},[{var,{1131,12},'I'}]},
              [{clause,
                   {1132,9},
                   [{atom,{1132,9},true}],
                   [],
                   [{debug_line,1133,468},
                    {tuple,
                        {1133,13},
                        [{atom,{1133,14},yes},
                         {call,
                             {1133,18},
                             {remote,
                                 {1133,18},
                                 {atom,{1133,18},lists},
                                 {atom,{1133,18},reverse}},
                             [{var,{1133,26},'Acc'},
                              {block,0,
                                  [{cons,
                                       {1133,31},
                                       {var,{1133,32},'I'},
                                       {nil,{1133,33}}}]}]},
                         {var,{1133,36},'Is'}]}]},
               {clause,
                   {1134,9},
                   [{atom,{1134,9},false}],
                   [],
                   [{debug_line,1135,469},
                    {call,
                        {1135,13},
                        {atom,{1135,13},split_blocks_after_is},
                        [{var,{1135,35},'Is'},
                         {var,{1135,39},'P'},
                         {block,0,
                             [{cons,
                                  {1135,42},
                                  {var,{1135,43},'I'},
                                  {var,{1135,45},'Acc'}}]}]}]}]}]},
     {clause,
         {1137,1},
         [{nil,{1137,23}},{var,{1137,27},'_'},{var,{1137,30},'_'}],
         [],
         [{debug_line,1137,470},{atom,{1137,36},no}]}]}.
{function,
 {1139,1},
 update_phi_labels_is,3,
 [{clause,
   {1139,1},
   [{var,{1139,1},'_'},{var,{1139,1},'_'},{var,{1139,1},'_'}],
   [[{call,
      {1139,1},
      {remote,{1139,1},{atom,{1139,1},fake},{atom,{1139,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1139,471},{atom,{1139,1},ignore}]},
  {clause,
   {1139,1},
   [{cons,
     {1139,22},
     {match,
      {1139,23},
      {tuple,
       {1139,23},
       [{atom,{1139,23},b_set},
        {var,{1139,23},'_'},
        {var,{1139,23},'_'},
        {atom,{1139,33},phi},
        {var,{1139,42},'Args0'}]},
      {var,{1139,49},'I0'}},
     {var,{1139,52},'Is'}},
    {var,{1139,57},'Old'},
    {var,{1139,62},'New'}],
   [],
   [{debug_line,1140,472},
    {match,
     {1140,5},
     {var,{1140,5},'Args'},
     {lc,
      {1140,12},
      {block,0,
       [{tuple,
         {1140,13},
         [{var,{1140,14},'Arg'},
          {call,
           {1140,18},
           {atom,{1140,18},rename_label},
           [{var,{1140,31},'Lbl'},
            {var,{1140,36},'Old'},
            {var,{1140,41},'New'}]}]}]},
      [{block,0,[{atom,{1140,64},true}]},
       {generate_strict,
        {1140,60},
        {tuple,{1140,50},[{var,{1140,51},'Arg'},{var,{1140,55},'Lbl'}]},
        {var,{1140,64},'Args0'}}]}},
    {debug_line,1141,473},
    {match,
     {1141,5},
     {var,{1141,5},'I'},
     {block,
      {1141,9},
      [{match,{1141,9},{var,{1141,9},rec43},{var,{1141,9},'I0'}},
       {'case',
        {1141,18},
        {var,{1141,9},rec43},
        [{clause,
          {1141,18},
          [{tuple,
            {1141,18},
            [{atom,{1141,18},b_set},
             {var,{1141,18},'_'},
             {var,{1141,18},'_'},
             {var,{1141,18},'_'},
             {var,{1141,18},'_'}]}],
          [],
          [{call,
            {1141,18},
            {remote,
             {1141,18},
             {atom,{1141,18},erlang},
             {atom,{1141,18},setelement}},
            [{integer,{1141,18},5},
             {var,{1141,9},rec43},
             {var,{1141,23},'Args'}]}]},
         {clause,
          [{generated,true},{location,{1141,18}}],
          [{var,[{generated,true},{location,{1141,18}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{1141,18}}],
            {remote,
             [{generated,true},{location,{1141,18}}],
             {atom,[{generated,true},{location,{1141,18}}],erlang},
             {atom,[{generated,true},{location,{1141,18}}],error}},
            [{tuple,
              [{generated,true},{location,{1141,18}}],
              [{atom,[{generated,true},{location,{1141,18}}],badrecord},
               {var,{1141,9},rec43}]}]}]}]}]}},
    {debug_line,1142,474},
    {cons,
     {1142,5},
     {var,{1142,6},'I'},
     {call,
      {1142,8},
      {atom,{1142,8},update_phi_labels_is},
      [{var,{1142,29},'Is'},{var,{1142,33},'Old'},{var,{1142,38},'New'}]}}]},
  {clause,
   {1143,1},
   [{var,{1143,22},'Is'},{var,{1143,26},'_'},{var,{1143,29},'_'}],
   [],
   [{debug_line,1143,475},{var,{1143,35},'Is'}]}]}.
{function,{1145,1},
          rename_label,3,
          [{clause,{1145,1},
                   [{var,{1145,1},'_'},{var,{1145,1},'_'},{var,{1145,1},'_'}],
                   [[{call,{1145,1},
                           {remote,{1145,1},
                                   {atom,{1145,1},fake},
                                   {atom,{1145,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,1145,476},{atom,{1145,1},ignore}]},
           {clause,{1145,1},
                   [{var,{1145,14},'Old'},
                    {var,{1145,19},'Old'},
                    {var,{1145,24},'New'}],
                   [],
                   [{debug_line,1145,477},{var,{1145,32},'New'}]},
           {clause,{1146,1},
                   [{var,{1146,14},'Lbl'},
                    {var,{1146,19},'_Old'},
                    {var,{1146,25},'_New'}],
                   [],
                   [{debug_line,1146,478},{var,{1146,34},'Lbl'}]}]}.
{function,
    {1148,1},
    used_args,1,
    [{clause,
         {1148,1},
         [{var,{1148,1},'_'}],
         [[{call,
               {1148,1},
               {remote,
                   {1148,1},
                   {atom,{1148,1},fake},
                   {atom,{1148,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1148,479},{atom,{1148,1},ignore}]},
     {clause,
         {1148,1},
         [{cons,
              {1148,11},
              {match,
                  {1148,12},
                  {tuple,
                      {1148,12},
                      [{atom,{1148,12},b_var},{var,{1148,12},'_'}]},
                  {var,{1148,21},'V'}},
              {var,{1148,23},'As'}}],
         [],
         [{debug_line,1149,480},
          {cons,
              {1149,5},
              {var,{1149,6},'V'},
              {call,
                  {1149,8},
                  {atom,{1149,8},used_args},
                  [{var,{1149,18},'As'}]}}]},
     {clause,
         {1150,1},
         [{cons,
              {1150,11},
              {tuple,
                  {1150,12},
                  [{atom,{1150,12},b_remote},
                   {var,{1150,26},'Mod'},
                   {var,{1150,35},'Name'},
                   {var,{1150,12},'_'}]},
              {var,{1150,41},'As'}}],
         [],
         [{debug_line,1151,481},
          {call,
              {1151,5},
              {atom,{1151,5},used_args},
              [{block,0,
                   [{cons,
                        {1151,15},
                        {var,{1151,16},'Mod'},
                        {cons,
                            {1151,20},
                            {var,{1151,20},'Name'},
                            {var,{1151,25},'As'}}}]}]}]},
     {clause,
         {1152,1},
         [{cons,{1152,11},{var,{1152,12},'_'},{var,{1152,14},'As'}}],
         [],
         [{debug_line,1153,482},
          {call,{1153,5},{atom,{1153,5},used_args},[{var,{1153,15},'As'}]}]},
     {clause,
         {1154,1},
         [{nil,{1154,11}}],
         [],
         [{debug_line,1154,483},{nil,{1154,18}}]}]}.
{function,
    {1156,1},
    used_1,2,
    [{clause,
         {1156,1},
         [{var,{1156,1},'_'},{var,{1156,1},'_'}],
         [[{call,
               {1156,1},
               {remote,
                   {1156,1},
                   {atom,{1156,1},fake},
                   {atom,{1156,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1156,484},{atom,{1156,1},ignore}]},
     {clause,
         {1156,1},
         [{cons,{1156,8},{var,{1156,9},'H'},{var,{1156,11},'T'}},
          {var,{1156,15},'Used0'}],
         [],
         [{debug_line,1157,485},
          {match,
              {1157,5},
              {var,{1157,5},'Used'},
              {call,
                  {1157,12},
                  {remote,
                      {1157,19},
                      {atom,{1157,12},ordsets},
                      {atom,{1157,20},union}},
                  [{block,0,
                       [{call,
                            {1157,26},
                            {atom,{1157,26},used},
                            [{var,{1157,31},'H'}]}]},
                   {var,{1157,35},'Used0'}]}},
          {debug_line,1158,486},
          {call,
              {1158,5},
              {atom,{1158,5},used_1},
              [{var,{1158,12},'T'},{var,{1158,15},'Used'}]}]},
     {clause,
         {1159,1},
         [{nil,{1159,8}},{var,{1159,12},'Used'}],
         [],
         [{debug_line,1159,487},{var,{1159,21},'Used'}]}]}.
{function,
 {1164,1},
 merge_blocks_1,3,
 [{clause,
   {1164,1},
   [{var,{1164,1},'_'},{var,{1164,1},'_'},{var,{1164,1},'_'}],
   [[{call,
      {1164,1},
      {remote,{1164,1},{atom,{1164,1},fake},{atom,{1164,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1164,488},{atom,{1164,1},ignore}]},
  {clause,
   {1164,1},
   [{cons,{1164,16},{var,{1164,17},'L'},{var,{1164,19},'Ls'}},
    {var,{1164,24},'Preds0'},
    {var,{1164,32},'Blocks0'}],
   [],
   [{debug_line,1165,489},
    {'case',
     {1165,5},
     {var,{1165,10},'Preds0'},
     [{clause,
       {1166,9},
       [{map,
         {1166,9},
         [{map_field_exact,
           {1166,12},
           {var,{1166,11},'L'},
           {cons,{1166,14},{var,{1166,15},'P'},{nil,{1166,16}}}}]}],
       [],
       [{debug_line,1167,490},
        {match,
         {1167,13},
         {map,
          {1167,13},
          [{map_field_exact,
            {1167,16},
            {var,{1167,15},'P'},
            {var,{1167,18},'Blk0'}},
           {map_field_exact,
            {1167,24},
            {var,{1167,23},'L'},
            {var,{1167,26},'Blk1'}}]},
         {var,{1167,34},'Blocks0'}},
        {debug_line,1168,491},
        {'case',
         {1168,13},
         {call,
          {1168,18},
          {atom,{1168,18},is_merge_allowed},
          [{var,{1168,35},'L'},{var,{1168,38},'Blk0'},{var,{1168,44},'Blk1'}]},
         [{clause,
           {1169,17},
           [{atom,{1169,17},true}],
           [],
           [{debug_line,1170,492},
            {match,
             {1170,21},
             {tuple,
              {1170,21},
              [{atom,{1170,21},b_blk},
               {var,{1170,21},'_'},
               {var,{1170,31},'Is0'},
               {var,{1170,21},'_'}]},
             {var,{1170,38},'Blk0'}},
            {debug_line,1171,493},
            {match,
             {1171,21},
             {tuple,
              {1171,21},
              [{atom,{1171,21},b_blk},
               {var,{1171,21},'_'},
               {var,{1171,31},'Is1'},
               {var,{1171,21},'_'}]},
             {var,{1171,38},'Blk1'}},
            {debug_line,1172,494},
            {call,
             {1172,21},
             {atom,{1172,21},verify_merge_is},
             [{var,{1172,37},'Is1'}]},
            {debug_line,1173,495},
            {match,
             {1173,21},
             {var,{1173,21},'Is'},
             {call,
              {1173,26},
              {atom,{1173,26},merge_fix_succeeded},
              [{block,0,
                [{op,
                  {1173,50},
                  '++',
                  {var,{1173,46},'Is0'},
                  {var,{1173,53},'Is1'}}]},
               {var,{1173,58},'Blk1'}]}},
            {debug_line,1174,496},
            {match,
             {1174,21},
             {var,{1174,21},'Blk'},
             {block,
              {1174,27},
              [{match,{1174,27},{var,{1174,27},rec44},{var,{1174,27},'Blk1'}},
               {'case',
                {1174,38},
                {var,{1174,27},rec44},
                [{clause,
                  {1174,38},
                  [{tuple,
                    {1174,38},
                    [{atom,{1174,38},b_blk},
                     {var,{1174,38},'_'},
                     {var,{1174,38},'_'},
                     {var,{1174,38},'_'}]}],
                  [],
                  [{call,
                    {1174,38},
                    {remote,
                     {1174,38},
                     {atom,{1174,38},erlang},
                     {atom,{1174,38},setelement}},
                    [{integer,{1174,38},3},
                     {var,{1174,27},rec44},
                     {var,{1174,41},'Is'}]}]},
                 {clause,
                  [{generated,true},{location,{1174,38}}],
                  [{var,[{generated,true},{location,{1174,38}}],'_'}],
                  [],
                  [{call,
                    [{generated,true},{location,{1174,38}}],
                    {remote,
                     [{generated,true},{location,{1174,38}}],
                     {atom,[{generated,true},{location,{1174,38}}],erlang},
                     {atom,[{generated,true},{location,{1174,38}}],error}},
                    [{tuple,
                      [{generated,true},{location,{1174,38}}],
                      [{atom,
                        [{generated,true},{location,{1174,38}}],
                        badrecord},
                       {var,{1174,27},rec44}]}]}]}]}]}},
            {debug_line,1175,497},
            {match,
             {1175,21},
             {var,{1175,21},'Blocks1'},
             {call,
              {1175,31},
              {remote,{1175,35},{atom,{1175,31},maps},{atom,{1175,36},remove}},
              [{var,{1175,43},'L'},{var,{1175,46},'Blocks0'}]}},
            {debug_line,1176,498},
            {match,
             {1176,21},
             {var,{1176,21},'Blocks2'},
             {map,
              {1176,38},
              {var,{1176,31},'Blocks1'},
              [{map_field_exact,
                {1176,41},
                {var,{1176,40},'P'},
                {var,{1176,43},'Blk'}}]}},
            {debug_line,1177,499},
            {match,
             {1177,21},
             {var,{1177,21},'Successors'},
             {call,
              {1177,34},
              {atom,{1177,34},successors},
              [{var,{1177,45},'Blk'}]}},
            {debug_line,1178,500},
            {match,
             {1178,21},
             {var,{1178,21},'Blocks'},
             {call,
              {1178,30},
              {atom,{1178,30},update_phi_labels},
              [{var,{1178,48},'Successors'},
               {var,{1178,60},'L'},
               {var,{1178,63},'P'},
               {var,{1178,66},'Blocks2'}]}},
            {debug_line,1179,501},
            {match,
             {1179,21},
             {var,{1179,21},'Preds'},
             {call,
              {1179,29},
              {atom,{1179,29},merge_update_preds},
              [{var,{1179,48},'Successors'},
               {var,{1179,60},'L'},
               {var,{1179,63},'P'},
               {var,{1179,66},'Preds0'}]}},
            {debug_line,1180,502},
            {call,
             {1180,21},
             {atom,{1180,21},merge_blocks_1},
             [{var,{1180,36},'Ls'},
              {var,{1180,40},'Preds'},
              {var,{1180,47},'Blocks'}]}]},
          {clause,
           {1181,17},
           [{atom,{1181,17},false}],
           [],
           [{debug_line,1182,503},
            {call,
             {1182,21},
             {atom,{1182,21},merge_blocks_1},
             [{var,{1182,36},'Ls'},
              {var,{1182,40},'Preds0'},
              {var,{1182,48},'Blocks0'}]}]}]}]},
      {clause,
       {1184,9},
       [{map,{1184,9},[]}],
       [],
       [{debug_line,1185,504},
        {call,
         {1185,13},
         {atom,{1185,13},merge_blocks_1},
         [{var,{1185,28},'Ls'},
          {var,{1185,32},'Preds0'},
          {var,{1185,40},'Blocks0'}]}]}]}]},
  {clause,
   {1187,1},
   [{nil,{1187,16}},{var,{1187,20},'_Preds'},{var,{1187,28},'Blocks'}],
   [],
   [{debug_line,1187,505},{var,{1187,39},'Blocks'}]}]}.
{function,
 {1193,1},
 merge_update_preds,4,
 [{clause,
   {1193,1},
   [{var,{1193,1},'_'},
    {var,{1193,1},'_'},
    {var,{1193,1},'_'},
    {var,{1193,1},'_'}],
   [[{call,
      {1193,1},
      {remote,{1193,1},{atom,{1193,1},fake},{atom,{1193,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1193,506},{atom,{1193,1},ignore}]},
  {clause,
   {1193,1},
   [{cons,{1193,20},{var,{1193,21},'L'},{var,{1193,23},'Ls'}},
    {var,{1193,28},'From'},
    {var,{1193,34},'To'},
    {var,{1193,38},'Preds0'}],
   [],
   [{debug_line,1194,507},
    {'case',
     {1194,5},
     {var,{1194,10},'Preds0'},
     [{clause,
       {1195,9},
       [{map,
         {1195,9},
         [{map_field_exact,
           {1195,13},
           {var,{1195,11},'L'},
           {cons,{1195,16},{var,{1195,17},'P'},{nil,{1195,18}}}}]}],
       [],
       [{debug_line,1196,508},
        {match,
         {1196,13},
         {var,{1196,13},'Preds'},
         {map,
          {1196,27},
          {var,{1196,21},'Preds0'},
          [{map_field_exact,
            {1196,31},
            {var,{1196,29},'L'},
            {cons,
             {1196,34},
             {call,
              {1196,35},
              {atom,{1196,35},rename_label},
              [{var,{1196,48},'P'},
               {var,{1196,51},'From'},
               {var,{1196,57},'To'}]},
             {nil,{1196,60}}}}]}},
        {debug_line,1197,509},
        {call,
         {1197,13},
         {atom,{1197,13},merge_update_preds},
         [{var,{1197,32},'Ls'},
          {var,{1197,36},'From'},
          {var,{1197,42},'To'},
          {var,{1197,46},'Preds'}]}]},
      {clause,
       {1198,9},
       [{map,{1198,9},[]}],
       [],
       [{debug_line,1203,510},
        {call,
         {1203,13},
         {atom,{1203,13},merge_update_preds},
         [{var,{1203,32},'Ls'},
          {var,{1203,36},'From'},
          {var,{1203,42},'To'},
          {var,{1203,46},'Preds0'}]}]}]}]},
  {clause,
   {1205,1},
   [{nil,{1205,20}},
    {var,{1205,24},'_'},
    {var,{1205,27},'_'},
    {var,{1205,30},'Preds'}],
   [],
   [{debug_line,1205,511},{var,{1205,40},'Preds'}]}]}.
{function,
    {1207,1},
    merge_fix_succeeded,2,
    [{clause,
         {1207,1},
         [{var,{1207,1},'_'},{var,{1207,1},'_'}],
         [[{call,
               {1207,1},
               {remote,
                   {1207,1},
                   {atom,{1207,1},fake},
                   {atom,{1207,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1207,512},{atom,{1207,1},ignore}]},
     {clause,
         {1207,1},
         [{var,{1207,21},'Is'},
          {tuple,
              {1207,25},
              [{atom,{1207,25},b_blk},
               {var,{1207,25},'_'},
               {var,{1207,25},'_'},
               {tuple,
                   {1207,37},
                   [{atom,{1207,37},b_br},
                    {var,{1207,37},'_'},
                    {var,{1207,37},'_'},
                    {var,{1207,48},'Succ'},
                    {var,{1207,58},'Fail'}]}]}],
         [[{op,{1207,76},
               '=/=',
               {var,{1207,71},'Succ'},
               {var,{1207,80},'Fail'}}]],
         [{debug_line,1209,513},{var,{1209,5},'Is'}]},
     {clause,
         {1210,1},
         [{match,
              {1210,21},
              {cons,{1210,21},{var,{1210,22},'_'},{var,{1210,24},'_'}},
              {var,{1210,27},'Is0'}},
          {tuple,
              {1210,32},
              [{atom,{1210,32},b_blk},
               {var,{1210,32},'_'},
               {var,{1210,32},'_'},
               {var,{1210,32},'_'}]}],
         [],
         [{debug_line,1212,514},
          {'case',
              {1212,5},
              {call,
                  {1212,10},
                  {remote,
                      {1212,10},
                      {atom,{1212,10},lists},
                      {atom,{1212,10},reverse}},
                  [{var,{1212,18},'Is0'}]},
              [{clause,
                   {1213,9},
                   [{cons,
                        {1213,9},
                        {tuple,
                            {1213,10},
                            [{atom,{1213,10},b_set},
                             {var,{1213,10},'_'},
                             {var,{1213,10},'_'},
                             {tuple,
                                 {1213,20},
                                 [{atom,{1213,21},succeeded},
                                  {atom,{1213,31},guard}]},
                             {cons,
                                 {1213,43},
                                 {var,{1213,44},'Dst'},
                                 {nil,{1213,47}}}]},
                        {cons,
                            {1213,50},
                            {tuple,
                                {1213,50},
                                [{atom,{1213,50},b_set},
                                 {var,{1213,50},'_'},
                                 {var,{1213,61},'Dst'},
                                 {var,{1213,50},'_'},
                                 {var,{1213,50},'_'}]},
                            {var,{1213,66},'Is'}}}],
                   [],
                   [{debug_line,1222,515},
                    {call,
                        {1222,13},
                        {remote,
                            {1222,13},
                            {atom,{1222,13},lists},
                            {atom,{1222,13},reverse}},
                        [{var,{1222,21},'Is'}]}]},
               {clause,
                   {1223,9},
                   [{var,{1223,9},'_'}],
                   [],
                   [{debug_line,1224,516},{var,{1224,13},'Is0'}]}]}]},
     {clause,
         {1226,1},
         [{var,{1226,21},'Is'},{var,{1226,25},'_Blk'}],
         [],
         [{debug_line,1226,517},{var,{1226,34},'Is'}]}]}.
{function,{1228,1},
          verify_merge_is,1,
          [{clause,{1228,1},
                   [{var,{1228,1},'_'}],
                   [[{call,{1228,1},
                           {remote,{1228,1},
                                   {atom,{1228,1},fake},
                                   {atom,{1228,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,1228,518},{atom,{1228,1},ignore}]},
           {clause,{1228,1},
                   [{cons,{1228,17},
                          {tuple,{1228,18},
                                 [{atom,{1228,18},b_set},
                                  {var,{1228,18},'_'},
                                  {var,{1228,18},'_'},
                                  {var,{1228,28},'Op'},
                                  {var,{1228,18},'_'}]},
                          {var,{1228,32},'_'}}],
                   [],
                   [{debug_line,1231,519},
                    {match,{1231,5},
                           {atom,{1231,5},true},
                           {op,{1231,15},
                               '=/=',
                               {var,{1231,12},'Op'},
                               {atom,{1231,19},phi}}}]},
           {clause,{1232,1},
                   [{var,{1232,17},'_'}],
                   [],
                   [{debug_line,1233,520},{atom,{1233,5},ok}]}]}.
{function,
    {1235,1},
    is_merge_allowed,3,
    [{clause,
         {1235,1},
         [{var,{1235,1},'_'},{var,{1235,1},'_'},{var,{1235,1},'_'}],
         [[{call,
               {1235,1},
               {remote,
                   {1235,1},
                   {atom,{1235,1},fake},
                   {atom,{1235,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1235,521},{atom,{1235,1},ignore}]},
     {clause,
         {1235,1},
         [{integer,{1235,19},1},
          {tuple,
              {1235,36},
              [{atom,{1235,36},b_blk},
               {var,{1235,36},'_'},
               {var,{1235,36},'_'},
               {var,{1235,36},'_'}]},
          {tuple,
              {1235,46},
              [{atom,{1235,46},b_blk},
               {var,{1235,46},'_'},
               {var,{1235,46},'_'},
               {var,{1235,46},'_'}]}],
         [],
         [{debug_line,1236,522},{atom,{1236,5},false}]},
     {clause,
         {1237,1},
         [{var,{1237,18},'_L'},
          {tuple,
              {1237,22},
              [{atom,{1237,22},b_blk},
               {var,{1237,22},'_'},
               {cons,
                   {1237,32},
                   {tuple,
                       {1237,33},
                       [{atom,{1237,33},b_set},
                        {var,{1237,33},'_'},
                        {var,{1237,33},'_'},
                        {atom,{1237,43},landingpad},
                        {var,{1237,33},'_'}]},
                   {var,{1237,57},'_'}},
               {var,{1237,22},'_'}]},
          {tuple,
              {1237,62},
              [{atom,{1237,62},b_blk},
               {var,{1237,62},'_'},
               {var,{1237,62},'_'},
               {var,{1237,62},'_'}]}],
         [],
         [{debug_line,1238,523},{atom,{1238,5},false}]},
     {clause,
         {1239,1},
         [{var,{1239,18},'_L'},
          {tuple,
              {1239,22},
              [{atom,{1239,22},b_blk},
               {var,{1239,22},'_'},
               {var,{1239,22},'_'},
               {var,{1239,22},'_'}]},
          {tuple,
              {1239,32},
              [{atom,{1239,32},b_blk},
               {var,{1239,32},'_'},
               {cons,
                   {1239,42},
                   {tuple,
                       {1239,43},
                       [{atom,{1239,43},b_set},
                        {var,{1239,43},'_'},
                        {var,{1239,43},'_'},
                        {atom,{1239,53},landingpad},
                        {var,{1239,43},'_'}]},
                   {var,{1239,67},'_'}},
               {var,{1239,32},'_'}]}],
         [],
         [{debug_line,1240,524},{atom,{1240,5},false}]},
     {clause,
         {1241,1},
         [{var,{1241,18},'L'},
          {match,
              {1241,21},
              {tuple,
                  {1241,21},
                  [{atom,{1241,21},b_blk},
                   {var,{1241,21},'_'},
                   {var,{1241,21},'_'},
                   {var,{1241,21},'_'}]},
              {var,{1241,30},'Blk1'}},
          {match,
              {1241,36},
              {tuple,
                  {1241,36},
                  [{atom,{1241,36},b_blk},
                   {var,{1241,36},'_'},
                   {cons,
                       {1241,46},
                       {match,
                           {1241,47},
                           {tuple,
                               {1241,47},
                               [{atom,{1241,47},b_set},
                                {var,{1241,47},'_'},
                                {var,{1241,47},'_'},
                                {var,{1241,47},'_'},
                                {var,{1241,47},'_'}]},
                           {var,{1241,56},'I'}},
                       {var,{1241,58},'_'}},
                   {var,{1241,36},'_'}]},
              {var,{1241,62},'Blk2'}}],
         [],
         [{debug_line,1242,525},
          {'case',
              {1242,5},
              {op,{1242,5},
                  'not',
                  {call,
                      {1242,9},
                      {atom,{1242,9},is_loop_header},
                      [{var,{1242,24},'I'}]}},
              [{clause,
                   {1242,5},
                   [{atom,{1242,5},true}],
                   [],
                   [{debug_line,1243,526},
                    {call,
                        {1243,9},
                        {atom,{1243,9},is_merge_allowed_1},
                        [{var,{1243,28},'L'},
                         {var,{1243,31},'Blk1'},
                         {var,{1243,37},'Blk2'}]}]},
               {clause,
                   {1242,5},
                   [{atom,{1242,5},false}],
                   [],
                   [{atom,{1242,5},false}]},
               {clause,
                   [{generated,true},{location,{1242,5}}],
                   [{var,{1242,5},cov1}],
                   [],
                   [{call,
                        {1242,5},
                        {remote,
                            {1242,5},
                            {atom,{1242,5},erlang},
                            {atom,{1242,5},error}},
                        [{block,0,
                             [{tuple,
                                  {1242,5},
                                  [{atom,{1242,5},badarg},
                                   {var,{1242,5},cov1}]}]}]}]}]}]},
     {clause,
         {1244,1},
         [{var,{1244,18},'L'},{var,{1244,21},'Blk1'},{var,{1244,27},'Blk2'}],
         [],
         [{debug_line,1245,527},
          {call,
              {1245,5},
              {atom,{1245,5},is_merge_allowed_1},
              [{var,{1245,24},'L'},
               {var,{1245,27},'Blk1'},
               {var,{1245,33},'Blk2'}]}]}]}.
{function,
 {1247,1},
 is_merge_allowed_1,3,
 [{clause,
   {1247,1},
   [{var,{1247,1},'_'},{var,{1247,1},'_'},{var,{1247,1},'_'}],
   [[{call,
      {1247,1},
      {remote,{1247,1},{atom,{1247,1},fake},{atom,{1247,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1247,528},{atom,{1247,1},ignore}]},
  {clause,
   {1247,1},
   [{var,{1247,20},'L'},
    {match,
     {1247,23},
     {tuple,
      {1247,23},
      [{atom,{1247,23},b_blk},
       {var,{1247,23},'_'},
       {var,{1247,23},'_'},
       {tuple,
        {1247,35},
        [{atom,{1247,35},b_br},
         {var,{1247,35},'_'},
         {var,{1247,35},'_'},
         {var,{1247,35},'_'},
         {var,{1247,35},'_'}]}]},
     {var,{1247,44},'Blk'}},
    {tuple,
     {1247,49},
     [{atom,{1247,49},b_blk},
      {var,{1247,49},'_'},
      {var,{1247,59},'Is'},
      {var,{1247,49},'_'}]}],
   [],
   [{debug_line,1250,529},
    {'case',
     {1250,5},
     {call,{1250,10},{atom,{1250,10},successors},[{var,{1250,21},'Blk'}]},
     [{clause,
       {1251,9},
       [{cons,{1251,9},{var,{1251,10},'L'},{nil,{1251,11}}}],
       [],
       [{debug_line,1252,530},
        {'case',
         {1252,13},
         {var,{1252,18},'Is'},
         [{clause,
           {1253,17},
           [{cons,
             {1253,17},
             {tuple,
              {1253,18},
              [{atom,{1253,18},b_set},
               {var,{1253,18},'_'},
               {var,{1253,18},'_'},
               {atom,{1253,28},phi},
               {cons,{1253,37},{var,{1253,38},'_'},{nil,{1253,39}}}]},
             {var,{1253,42},'_'}}],
           [],
           [{debug_line,1259,531},{atom,{1259,21},false}]},
          {clause,
           {1260,17},
           [{var,{1260,17},'_'}],
           [],
           [{debug_line,1261,532},{atom,{1261,21},true}]}]}]},
      {clause,
       {1263,9},
       [{cons,{1263,9},{var,{1263,10},'_'},{var,{1263,12},'_'}}],
       [],
       [{debug_line,1264,533},{atom,{1264,13},false}]}]}]},
  {clause,
   {1266,1},
   [{var,{1266,20},'_'},
    {tuple,
     {1266,23},
     [{atom,{1266,23},b_blk},
      {var,{1266,23},'_'},
      {var,{1266,23},'_'},
      {tuple,
       {1266,35},
       [{atom,{1266,35},b_switch},
        {var,{1266,35},'_'},
        {var,{1266,35},'_'},
        {var,{1266,35},'_'},
        {var,{1266,35},'_'}]}]},
    {tuple,
     {1266,49},
     [{atom,{1266,49},b_blk},
      {var,{1266,49},'_'},
      {var,{1266,49},'_'},
      {var,{1266,49},'_'}]}],
   [],
   [{debug_line,1267,534},{atom,{1267,5},false}]}]}.
{function,
 {1274,1},
 update_phi_labels,4,
 [{clause,
   {1274,1},
   [{var,{1274,1},'_'},
    {var,{1274,1},'_'},
    {var,{1274,1},'_'},
    {var,{1274,1},'_'}],
   [[{call,
      {1274,1},
      {remote,{1274,1},{atom,{1274,1},fake},{atom,{1274,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1274,535},{atom,{1274,1},ignore}]},
  {clause,
   {1274,1},
   [{cons,{1274,19},{var,{1274,20},'L'},{var,{1274,22},'Ls'}},
    {var,{1274,27},'Old'},
    {var,{1274,32},'New'},
    {var,{1274,37},'Blocks0'}],
   [],
   [{debug_line,1275,536},
    {'case',
     {1275,5},
     {var,{1275,10},'Blocks0'},
     [{clause,
       {1276,9},
       [{map,
         {1276,9},
         [{map_field_exact,
           {1276,12},
           {var,{1276,11},'L'},
           {match,
            {1276,14},
            {tuple,
             {1276,14},
             [{atom,{1276,14},b_blk},
              {var,{1276,14},'_'},
              {match,
               {1276,24},
               {cons,
                {1276,24},
                {tuple,
                 {1276,25},
                 [{atom,{1276,25},b_set},
                  {var,{1276,25},'_'},
                  {var,{1276,25},'_'},
                  {atom,{1276,35},phi},
                  {var,{1276,25},'_'}]},
                {var,{1276,40},'_'}},
               {var,{1276,43},'Is0'}},
              {var,{1276,14},'_'}]},
            {var,{1276,48},'Blk0'}}}]}],
       [],
       [{debug_line,1277,537},
        {match,
         {1277,13},
         {var,{1277,13},'Is'},
         {call,
          {1277,18},
          {atom,{1277,18},update_phi_labels_is},
          [{var,{1277,39},'Is0'},
           {var,{1277,44},'Old'},
           {var,{1277,49},'New'}]}},
        {debug_line,1278,538},
        {match,
         {1278,13},
         {var,{1278,13},'Blk'},
         {block,
          {1278,19},
          [{match,{1278,19},{var,{1278,19},rec45},{var,{1278,19},'Blk0'}},
           {'case',
            {1278,30},
            {var,{1278,19},rec45},
            [{clause,
              {1278,30},
              [{tuple,
                {1278,30},
                [{atom,{1278,30},b_blk},
                 {var,{1278,30},'_'},
                 {var,{1278,30},'_'},
                 {var,{1278,30},'_'}]}],
              [],
              [{call,
                {1278,30},
                {remote,
                 {1278,30},
                 {atom,{1278,30},erlang},
                 {atom,{1278,30},setelement}},
                [{integer,{1278,30},3},
                 {var,{1278,19},rec45},
                 {var,{1278,33},'Is'}]}]},
             {clause,
              [{generated,true},{location,{1278,30}}],
              [{var,[{generated,true},{location,{1278,30}}],'_'}],
              [],
              [{call,
                [{generated,true},{location,{1278,30}}],
                {remote,
                 [{generated,true},{location,{1278,30}}],
                 {atom,[{generated,true},{location,{1278,30}}],erlang},
                 {atom,[{generated,true},{location,{1278,30}}],error}},
                [{tuple,
                  [{generated,true},{location,{1278,30}}],
                  [{atom,[{generated,true},{location,{1278,30}}],badrecord},
                   {var,{1278,19},rec45}]}]}]}]}]}},
        {debug_line,1279,539},
        {match,
         {1279,13},
         {var,{1279,13},'Blocks'},
         {map,
          {1279,29},
          {var,{1279,22},'Blocks0'},
          [{map_field_exact,
            {1279,32},
            {var,{1279,31},'L'},
            {var,{1279,34},'Blk'}}]}},
        {debug_line,1280,540},
        {call,
         {1280,13},
         {atom,{1280,13},update_phi_labels},
         [{var,{1280,31},'Ls'},
          {var,{1280,35},'Old'},
          {var,{1280,40},'New'},
          {var,{1280,45},'Blocks'}]}]},
      {clause,
       {1281,9},
       [{map,
         {1281,9},
         [{map_field_exact,
           {1281,12},
           {var,{1281,11},'L'},
           {tuple,
            {1281,14},
            [{atom,{1281,14},b_blk},
             {var,{1281,14},'_'},
             {var,{1281,14},'_'},
             {var,{1281,14},'_'}]}}]}],
       [],
       [{debug_line,1283,541},
        {call,
         {1283,13},
         {atom,{1283,13},update_phi_labels},
         [{var,{1283,31},'Ls'},
          {var,{1283,35},'Old'},
          {var,{1283,40},'New'},
          {var,{1283,45},'Blocks0'}]}]}]}]},
  {clause,
   {1285,1},
   [{nil,{1285,19}},
    {var,{1285,23},'_'},
    {var,{1285,26},'_'},
    {var,{1285,29},'Blocks'}],
   [],
   [{debug_line,1285,542},{var,{1285,40},'Blocks'}]}]}.
{eof,{1286,1}}.
