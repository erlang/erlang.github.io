{attribute,{1,1},file,{"error_SUITE.erl",1}}.
{attribute,{19,2},module,error_SUITE}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,99,111,109,109,
             111,110,95,116,101,115,116,45,49,46,50,55,46,53,47,105,110,99,
             108,117,100,101,47,99,116,46,104,114,108],
            1}}.
{attribute,{22,1},file,{"error_SUITE.erl",22}}.
{attribute,{23,2},
           export,
           [{all,0},
            {suite,0},
            {groups,0},
            {init_per_suite,1},
            {end_per_suite,1},
            {init_per_group,2},
            {end_per_group,2},
            {head_mismatch_line,1},
            {head_mismatch_same_function_name,1},
            {warnings_as_errors,1},
            {bif_clashes,1},
            {transforms,1},
            {maps_warnings,1},
            {bad_utf8,1},
            {bad_decls,1}]}.
{attribute,{29,2},export,[{parse_transform,2}]}.
{function,
    {31,1},
    suite,0,
    [{clause,
         {31,1},
         [],
         [[{call,
               {31,1},
               {remote,
                   {31,1},
                   {atom,{31,1},fake},
                   {atom,{31,1},is_beam_bif_info}},
               []}]],
         [{debug_line,31,1},{atom,{31,1},ignore}]},
     {clause,
         {31,1},
         [],[],
         [{debug_line,31,2},
          {cons,
              {31,12},
              {tuple,
                  {31,13},
                  [{atom,{31,14},ct_hooks},
                   {cons,
                       {31,23},
                       {atom,{31,24},ts_install_cth},
                       {nil,{31,38}}}]},
              {nil,{31,40}}}]}]}.
{function,{33,1},
          all,0,
          [{clause,{33,1},
                   [],
                   [[{call,{33,1},
                           {remote,{33,1},
                                   {atom,{33,1},fake},
                                   {atom,{33,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,33,3},{atom,{33,1},ignore}]},
           {clause,{33,1},
                   [],[],
                   [{debug_line,34,4},
                    {cons,{34,5},
                          {tuple,{34,6},
                                 [{atom,{34,7},group},{atom,{34,13},p}]},
                          {nil,{34,15}}}]}]}.
{function,
 {36,1},
 groups,0,
 [{clause,
   {36,1},
   [],
   [[{call,
      {36,1},
      {remote,{36,1},{atom,{36,1},fake},{atom,{36,1},is_beam_bif_info}},
      []}]],
   [{debug_line,36,5},{atom,{36,1},ignore}]},
  {clause,
   {36,1},
   [],[],
   [{debug_line,37,6},
    {cons,
     {37,5},
     {tuple,
      {37,6},
      [{atom,{37,7},p},
       {call,
        {37,9},
        {remote,{37,17},{atom,{37,9},test_lib},{atom,{37,18},parallel}},
        []},
       {cons,
        {38,7},
        {atom,{38,8},head_mismatch_line},
        {cons,
         {38,27},
         {atom,{38,27},head_mismatch_same_function_name},
         {cons,
          {39,8},
          {atom,{39,8},warnings_as_errors},
          {cons,
           {39,27},
           {atom,{39,27},bif_clashes},
           {cons,
            {40,8},
            {atom,{40,8},transforms},
            {cons,
             {40,19},
             {atom,{40,19},maps_warnings},
             {cons,
              {40,33},
              {atom,{40,33},bad_utf8},
              {cons,{40,42},{atom,{40,42},bad_decls},{nil,{40,51}}}}}}}}}}]},
     {nil,{40,53}}}]}]}.
{function,{42,1},
          init_per_suite,1,
          [{clause,{42,1},
                   [{var,{42,1},'_'}],
                   [[{call,{42,1},
                           {remote,{42,1},
                                   {atom,{42,1},fake},
                                   {atom,{42,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,42,7},{atom,{42,1},ignore}]},
           {clause,{42,1},
                   [{var,{42,16},'Config'}],
                   [],
                   [{debug_line,43,8},
                    {call,{43,5},
                          {remote,{43,13},
                                  {atom,{43,5},test_lib},
                                  {atom,{43,14},recompile}},
                          [{atom,{43,25},error_SUITE}]},
                    {debug_line,44,9},
                    {var,{44,5},'Config'}]}]}.
{function,{46,1},
          end_per_suite,1,
          [{clause,{46,1},
                   [{var,{46,1},'_'}],
                   [[{call,{46,1},
                           {remote,{46,1},
                                   {atom,{46,1},fake},
                                   {atom,{46,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,46,10},{atom,{46,1},ignore}]},
           {clause,{46,1},
                   [{var,{46,15},'_Config'}],
                   [],
                   [{debug_line,47,11},{atom,{47,5},ok}]}]}.
{function,{49,1},
          init_per_group,2,
          [{clause,{49,1},
                   [{var,{49,1},'_'},{var,{49,1},'_'}],
                   [[{call,{49,1},
                           {remote,{49,1},
                                   {atom,{49,1},fake},
                                   {atom,{49,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,49,12},{atom,{49,1},ignore}]},
           {clause,{49,1},
                   [{var,{49,16},'_GroupName'},{var,{49,28},'Config'}],
                   [],
                   [{debug_line,50,13},{var,{50,5},'Config'}]}]}.
{function,{52,1},
          end_per_group,2,
          [{clause,{52,1},
                   [{var,{52,1},'_'},{var,{52,1},'_'}],
                   [[{call,{52,1},
                           {remote,{52,1},
                                   {atom,{52,1},fake},
                                   {atom,{52,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,52,14},{atom,{52,1},ignore}]},
           {clause,{52,1},
                   [{var,{52,15},'_GroupName'},{var,{52,27},'Config'}],
                   [],
                   [{debug_line,53,15},{var,{53,5},'Config'}]}]}.
{function,
 {56,1},
 bif_clashes,1,
 [{clause,
   {56,1},
   [{var,{56,1},'_'}],
   [[{call,
      {56,1},
      {remote,{56,1},{atom,{56,1},fake},{atom,{56,1},is_beam_bif_info}},
      []}]],
   [{debug_line,56,16},{atom,{56,1},ignore}]},
  {clause,
   {56,1},
   [{var,{56,13},'Config'}],
   [[{call,
      {56,26},
      {remote,{56,26},{atom,{56,26},erlang},{atom,{56,26},is_list}},
      [{var,{56,34},'Config'}]}]],
   [{debug_line,57,17},
    {match,
     {57,5},
     {var,{57,5},'Ts'},
     {cons,
      {57,10},
      {tuple,
       {57,11},
       [{atom,{57,12},bif_clashes1},
        {bin,
         {58,12},
         [{bin_element,
           {58,14},
           {string,
            {58,14},
            "\n              -export([t/0]).\n              t() ->\n                 length([a,b,c]).\n\n              length(X) ->\n               erlang:length(X).\n             "},
           default,default}]},
        {cons,{66,12},{atom,{66,13},return_warnings},{nil,{66,28}}},
        {tuple,
         {67,5},
         [{atom,{67,6},warning},
          {cons,
           {68,6},
           {tuple,
            {68,7},
            [{tuple,{68,8},[{integer,{68,9},4},{integer,{68,11},18}]},
             {atom,{68,16},erl_lint},
             {tuple,
              {68,25},
              [{atom,{68,26},call_to_redefined_bif},
               {tuple,{68,48},[{atom,{68,49},length},{integer,{68,56},1}]}]}]},
           {nil,{68,60}}}]}]},
      {nil,{68,64}}}},
    {debug_line,69,18},
    {match,
     {69,5},
     {nil,{69,5}},
     {call,
      {69,10},
      {atom,{69,10},run},
      [{var,{69,14},'Config'},{var,{69,22},'Ts'}]}},
    {debug_line,70,19},
    {match,
     {70,5},
     {var,{70,5},'Ts1'},
     {cons,
      {70,11},
      {tuple,
       {70,12},
       [{atom,{70,13},bif_clashes2},
        {bin,
         {71,12},
         [{bin_element,
           {71,14},
           {string,
            {71,14},
            "\n              -export([t/0]).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n             "},
           default,default}]},
        {cons,{77,12},{atom,{77,13},return_warnings},{nil,{77,28}}},
        {tuple,
         {78,6},
         [{atom,{78,7},warning},
          {cons,
           {79,7},
           {tuple,
            {79,8},
            [{tuple,{79,9},[{integer,{79,10},3},{integer,{79,12},16}]},
             {atom,{79,17},erl_lint},
             {tuple,
              {79,26},
              [{atom,{79,27},redefine_bif_import},
               {tuple,{79,47},[{atom,{79,48},length},{integer,{79,55},1}]}]}]},
           {nil,{79,59}}}]}]},
      {nil,{79,63}}}},
    {debug_line,80,20},
    {match,
     {80,5},
     {nil,{80,5}},
     {call,
      {80,10},
      {atom,{80,10},run},
      [{var,{80,14},'Config'},{var,{80,22},'Ts1'}]}},
    {debug_line,81,21},
    {match,
     {81,5},
     {var,{81,5},'Ts00'},
     {cons,
      {81,12},
      {tuple,
       {81,13},
       [{atom,{81,14},bif_clashes3},
        {bin,
         {82,12},
         [{bin_element,
           {82,14},
           {string,
            {82,14},
            "\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              t() ->\n                 length([a,b,c]).\n\n              length(X) ->\n               erlang:length(X).\n             "},
           default,default}]},
        {cons,{91,12},{atom,{91,13},return_warnings},{nil,{91,28}}},
        {nil,{92,5}}]},
      {nil,{92,8}}}},
    {debug_line,93,22},
    {match,
     {93,5},
     {nil,{93,5}},
     {call,
      {93,10},
      {atom,{93,10},run},
      [{var,{93,14},'Config'},{var,{93,22},'Ts00'}]}},
    {debug_line,94,23},
    {match,
     {94,5},
     {var,{94,5},'Ts11'},
     {cons,
      {94,12},
      {tuple,
       {94,13},
       [{atom,{94,14},bif_clashes4},
        {bin,
         {95,12},
         [{bin_element,
           {95,14},
           {string,
            {95,14},
            "\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n             "},
           default,default}]},
        {cons,{102,12},{atom,{102,13},return_warnings},{nil,{102,28}}},
        {nil,{103,6}}]},
      {nil,{103,9}}}},
    {debug_line,104,24},
    {match,
     {104,5},
     {nil,{104,5}},
     {call,
      {104,10},
      {atom,{104,10},run},
      [{var,{104,14},'Config'},{var,{104,22},'Ts11'}]}},
    {debug_line,105,25},
    {match,
     {105,5},
     {var,{105,5},'Ts000'},
     {cons,
      {105,13},
      {tuple,
       {105,14},
       [{atom,{105,15},bif_clashes5},
        {bin,
         {106,12},
         [{bin_element,
           {106,14},
           {string,
            {106,14},
            "\n              -export([t/0]).\n              t() ->\n                 binary_part(<<1,2,3,4>>,1,2).\n\n              binary_part(X,Y,Z) ->\n               erlang:binary_part(X,Y,Z).\n             "},
           default,default}]},
        {cons,{114,12},{atom,{114,13},return_warnings},{nil,{114,28}}},
        {tuple,
         {115,5},
         [{atom,{115,6},warning},
          {cons,
           {116,6},
           {tuple,
            {116,7},
            [{tuple,{116,8},[{integer,{116,9},4},{integer,{116,11},18}]},
             {atom,{116,16},erl_lint},
             {tuple,
              {116,25},
              [{atom,{116,26},call_to_redefined_bif},
               {tuple,
                {116,48},
                [{atom,{116,49},binary_part},{integer,{116,61},3}]}]}]},
           {nil,{116,65}}}]}]},
      {nil,{116,69}}}},
    {debug_line,117,26},
    {match,
     {117,5},
     {nil,{117,5}},
     {call,
      {117,10},
      {atom,{117,10},run},
      [{var,{117,14},'Config'},{var,{117,22},'Ts000'}]}},
    {debug_line,118,27},
    {match,
     {118,5},
     {var,{118,5},'Ts111'},
     {cons,
      {118,13},
      {tuple,
       {118,14},
       [{atom,{118,15},bif_clashes6},
        {bin,
         {119,12},
         [{bin_element,
           {119,14},
           {string,
            {119,14},
            "\n              -export([t/0]).\n              -import(x,[binary_part/3]).\n              t() ->\n                  binary_part(<<1,2,3,4>>,1,2).\n             "},
           default,default}]},
        {cons,{125,12},{atom,{125,13},return_warnings},{nil,{125,28}}},
        {tuple,
         {126,6},
         [{atom,{126,7},warning},
          {cons,
           {127,7},
           {tuple,
            {127,8},
            [{tuple,{127,9},[{integer,{127,10},3},{integer,{127,12},16}]},
             {atom,{127,17},erl_lint},
             {tuple,
              {127,26},
              [{atom,{127,27},redefine_bif_import},
               {tuple,
                {127,47},
                [{atom,{127,48},binary_part},{integer,{127,60},3}]}]}]},
           {nil,{127,64}}}]}]},
      {nil,{127,68}}}},
    {debug_line,128,28},
    {match,
     {128,5},
     {nil,{128,5}},
     {call,
      {128,10},
      {atom,{128,10},run},
      [{var,{128,14},'Config'},{var,{128,22},'Ts111'}]}},
    {debug_line,129,29},
    {match,
     {129,5},
     {var,{129,5},'Ts2'},
     {cons,
      {129,11},
      {tuple,
       {129,12},
       [{atom,{129,13},bif_clashes7},
        {bin,
         {130,12},
         [{bin_element,
           {130,14},
           {string,
            {130,14},
            "\n              -export([t/0]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t() ->\n                 length([a,b,c]).\n              length(X) ->\n                 erlang:length(X).\n             "},
           default,default}]},
        {nil,{139,12}},
        {tuple,
         {140,11},
         [{atom,{140,12},error},
          {cons,
           {141,12},
           {tuple,
            {141,13},
            [{tuple,{141,14},[{integer,{141,15},7},{integer,{141,17},15}]},
             {atom,{141,21},erl_lint},
             {tuple,
              {141,30},
              [{atom,{141,31},define_import},
               {tuple,
                {141,45},
                [{atom,{141,46},length},{integer,{141,53},1}]}]}]},
           {nil,{141,57}}},
          {nil,{142,12}}]}]},
      {nil,{142,17}}}},
    {debug_line,143,30},
    {match,
     {143,5},
     {nil,{143,5}},
     {call,
      {143,10},
      {atom,{143,10},run2},
      [{var,{143,15},'Config'},{var,{143,23},'Ts2'}]}},
    {debug_line,144,31},
    {match,
     {144,5},
     {var,{144,5},'Ts3'},
     {cons,
      {144,11},
      {tuple,
       {144,12},
       [{atom,{144,13},bif_clashes8},
        {bin,
         {145,12},
         [{bin_element,
           {145,14},
           {string,
            {145,14},
            "\n              -export([t/1]).\n              -compile({no_auto_import,[length/1]}).\n              t(X) when length(X) > 3 ->\n                 length([a,b,c]).\n              length(X) ->\n                 erlang:length(X).\n             "},
           default,default}]},
        {nil,{153,12}},
        {tuple,
         {154,11},
         [{atom,{154,12},error},
          {cons,
           {155,12},
           {tuple,
            {155,13},
            [{tuple,{155,14},[{integer,{155,15},4},{integer,{155,17},25}]},
             {atom,{155,21},erl_lint},
             {tuple,
              {155,30},
              [{atom,{155,31},illegal_guard_local_call},
               {tuple,
                {155,56},
                [{atom,{155,57},length},{integer,{155,64},1}]}]}]},
           {nil,{155,68}}},
          {nil,{156,12}}]}]},
      {nil,{156,17}}}},
    {debug_line,157,32},
    {match,
     {157,5},
     {nil,{157,5}},
     {call,
      {157,10},
      {atom,{157,10},run2},
      [{var,{157,15},'Config'},{var,{157,23},'Ts3'}]}},
    {debug_line,158,33},
    {match,
     {158,5},
     {var,{158,5},'Ts4'},
     {cons,
      {158,11},
      {tuple,
       {158,12},
       [{atom,{158,13},bif_clashes9},
        {bin,
         {159,12},
         [{bin_element,
           {159,14},
           {string,
            {159,14},
            "\n              -export([t/1]).\n              -compile({no_auto_import,[length/1]}).\n              -import(x,[length/1]).\n              t(X) when length(X) > 3 ->\n                 length([a,b,c]).\n             "},
           default,default}]},
        {nil,{166,12}},
        {tuple,
         {167,11},
         [{atom,{167,12},error},
          {cons,
           {168,12},
           {tuple,
            {168,13},
            [{tuple,{168,14},[{integer,{168,15},5},{integer,{168,17},25}]},
             {atom,{168,21},erl_lint},
             {tuple,
              {168,30},
              [{atom,{168,31},illegal_guard_local_call},
               {tuple,
                {168,56},
                [{atom,{168,57},length},{integer,{168,64},1}]}]}]},
           {nil,{168,68}}},
          {nil,{169,12}}]}]},
      {nil,{169,17}}}},
    {debug_line,170,34},
    {match,
     {170,5},
     {nil,{170,5}},
     {call,
      {170,10},
      {atom,{170,10},run2},
      [{var,{170,15},'Config'},{var,{170,23},'Ts4'}]}},
    {debug_line,172,35},
    {atom,{172,5},ok}]}]}.
{function,
    {178,1},
    head_mismatch_line,1,
    [{clause,
         {178,1},
         [{var,{178,1},'_'}],
         [[{call,
               {178,1},
               {remote,
                   {178,1},
                   {atom,{178,1},fake},
                   {atom,{178,1},is_beam_bif_info}},
               []}]],
         [{debug_line,178,36},{atom,{178,1},ignore}]},
     {clause,
         {178,1},
         [{var,{178,20},'Config'}],
         [[{call,
               {178,33},
               {remote,
                   {178,33},
                   {atom,{178,33},erlang},
                   {atom,{178,33},is_list}},
               [{var,{178,41},'Config'}]}]],
         [{debug_line,179,37},
          {match,
              {179,5},
              {cons,{179,5},{var,{179,6},'E'},{var,{179,8},'_'}},
              {call,
                  {179,13},
                  {atom,{179,13},get_compilation_errors},
                  [{var,{179,36},'Config'},
                   {block,0,[{string,{179,44},"head_mismatch_line"}]}]}},
          {debug_line,180,38},
          {match,
              {180,5},
              {tuple,
                  {180,5},
                  [{tuple,{180,6},[{integer,{180,7},26},{integer,{180,10},1}]},
                   {var,{180,14},'Mod'},
                   {var,{180,19},'Reason'}]},
              {var,{180,29},'E'}},
          {debug_line,181,39},
          {match,
              {181,6},
              {string,
                  {181,6},
                  "head mismatch: previous function foo/1 is distinct from bar/1. Is the semicolon in foo/1 unwanted?"},
              {call,
                  {182,47},
                  {remote,
                      {182,52},
                      {atom,{182,47},lists},
                      {atom,{182,53},flatten}},
                  [{var,{182,61},'Reason'}]}},
          {debug_line,183,40},
          {call,
              {183,5},
              {remote,{183,8},{var,{183,5},'Mod'},{atom,{183,9},format_error}},
              [{var,{183,22},'Reason'}]},
          {debug_line,184,41},
          {atom,{184,5},ok}]}]}.
{function,
    {188,1},
    head_mismatch_same_function_name,1,
    [{clause,
         {188,1},
         [{var,{188,1},'_'}],
         [[{call,
               {188,1},
               {remote,
                   {188,1},
                   {atom,{188,1},fake},
                   {atom,{188,1},is_beam_bif_info}},
               []}]],
         [{debug_line,188,42},{atom,{188,1},ignore}]},
     {clause,
         {188,1},
         [{var,{188,34},'Config'}],
         [[{call,
               {188,47},
               {remote,
                   {188,47},
                   {atom,{188,47},erlang},
                   {atom,{188,47},is_list}},
               [{var,{188,55},'Config'}]}]],
         [{debug_line,189,43},
          {match,
              {189,5},
              {cons,{189,5},{var,{189,6},'E'},{var,{189,8},'_'}},
              {call,
                  {189,13},
                  {atom,{189,13},get_compilation_errors},
                  [{var,{189,36},'Config'},
                   {block,0,
                       [{string,
                            {189,44},
                            "head_mismatch_same_function_name"}]}]}},
          {debug_line,190,44},
          {match,
              {190,5},
              {tuple,
                  {190,5},
                  [{tuple,{190,6},[{integer,{190,7},25},{integer,{190,10},1}]},
                   {var,{190,14},'Mod'},
                   {var,{190,19},'Reason'}]},
              {var,{190,29},'E'}},
          {debug_line,191,45},
          {match,
              {191,6},
              {string,
                  {191,6},
                  "head mismatch: function foo with arities 1 and 2 is regarded as two distinct functions. Is the number of arguments incorrect or is the semicolon in foo/1 unwanted?"},
              {call,
                  {193,50},
                  {remote,
                      {193,55},
                      {atom,{193,50},lists},
                      {atom,{193,56},flatten}},
                  [{var,{193,64},'Reason'}]}},
          {debug_line,194,46},
          {call,
              {194,5},
              {remote,{194,8},{var,{194,5},'Mod'},{atom,{194,9},format_error}},
              [{var,{194,22},'Reason'}]},
          {debug_line,195,47},
          {atom,{195,5},ok}]}]}.
{function,
    {199,1},
    get_compilation_errors,2,
    [{clause,
         {199,1},
         [{var,{199,1},'_'},{var,{199,1},'_'}],
         [[{call,
               {199,1},
               {remote,
                   {199,1},
                   {atom,{199,1},fake},
                   {atom,{199,1},is_beam_bif_info}},
               []}]],
         [{debug_line,199,48},{atom,{199,1},ignore}]},
     {clause,
         {199,1},
         [{var,{199,24},'Config'},{var,{199,32},'Filename'}],
         [],
         [{debug_line,200,49},
          {match,
              {200,5},
              {var,{200,5},'DataDir'},
              {call,
                  {200,15},
                  {remote,
                      {200,24},
                      {atom,{200,15},proplists},
                      {atom,{200,25},get_value}},
                  [{atom,{200,35},data_dir},{var,{200,45},'Config'}]}},
          {debug_line,201,50},
          {match,
              {201,5},
              {var,{201,5},'File'},
              {call,
                  {201,12},
                  {remote,
                      {201,20},
                      {atom,{201,12},filename},
                      {atom,{201,21},join}},
                  [{var,{201,26},'DataDir'},{var,{201,35},'Filename'}]}},
          {debug_line,202,51},
          {match,
              {202,5},
              {tuple,
                  {202,5},
                  [{atom,{202,6},error},
                   {cons,
                       {202,13},
                       {tuple,
                           {202,14},
                           [{var,{202,15},'_Name'},{var,{202,22},'E'}]},
                       {var,{202,25},'_'}},
                   {nil,{202,29}}]},
              {call,
                  {202,35},
                  {remote,
                      {202,42},
                      {atom,{202,35},compile},
                      {atom,{202,43},file}},
                  [{var,{202,48},'File'},
                   {block,0,
                       [{cons,
                            {202,54},
                            {atom,{202,55},return_errors},
                            {nil,{202,68}}}]}]}},
          {debug_line,203,52},
          {var,{203,5},'E'}]}]}.
{function,
 {205,1},
 warnings_as_errors,1,
 [{clause,
   {205,1},
   [{var,{205,1},'_'}],
   [[{call,
      {205,1},
      {remote,{205,1},{atom,{205,1},fake},{atom,{205,1},is_beam_bif_info}},
      []}]],
   [{debug_line,205,53},{atom,{205,1},ignore}]},
  {clause,
   {205,1},
   [{var,{205,20},'Config'}],
   [[{call,
      {205,33},
      {remote,{205,33},{atom,{205,33},erlang},{atom,{205,33},is_list}},
      [{var,{205,41},'Config'}]}]],
   [{debug_line,206,54},
    {match,
     {206,5},
     {var,{206,5},'TestFile'},
     {call,{206,16},{atom,{206,16},test_filename},[{var,{206,30},'Config'}]}},
    {debug_line,207,55},
    {match,
     {207,5},
     {var,{207,5},'BeamFile'},
     {op,
      {207,52},
      '++',
      {call,
       {207,16},
       {remote,{207,24},{atom,{207,16},filename},{atom,{207,25},rootname}},
       [{var,{207,34},'TestFile'},{block,0,[{string,{207,44},".erl"}]}]},
      {string,{207,55},".beam"}}},
    {debug_line,208,56},
    {match,
     {208,5},
     {var,{208,5},'OutDir'},
     {call,
      {208,14},
      {remote,{208,23},{atom,{208,14},proplists},{atom,{208,24},get_value}},
      [{atom,{208,34},priv_dir},{var,{208,44},'Config'}]}},
    {debug_line,210,57},
    {match,
     {210,5},
     {var,{210,5},'Ts1'},
     {cons,
      {210,11},
      {tuple,
       {210,12},
       [{atom,{210,13},warnings_as_errors},
        {bin,
         {211,12},
         [{bin_element,
           {211,14},
           {string,
            {211,14},
            "\n               t() ->\n                 A = unused,\n                 ok.\n             "},
           default,default}]},
        {cons,
         {216,6},
         {atom,{216,7},warnings_as_errors},
         {cons,
          {216,27},
          {atom,{216,27},export_all},
          {cons,
           {216,39},
           {tuple,{216,39},[{atom,{216,40},outdir},{var,{216,48},'OutDir'}]},
           {nil,{216,55}}}}},
        {tuple,
         {217,6},
         [{atom,{217,7},error},
          {nil,{218,7}},
          {cons,
           {219,7},
           {tuple,
            {219,8},
            [{tuple,{219,9},[{integer,{219,10},3},{integer,{219,12},18}]},
             {atom,{219,16},erl_lint},
             {tuple,
              {219,25},
              [{atom,{219,26},unused_var},{atom,{219,37},'A'}]}]},
           {nil,{219,42}}}]}]},
      {nil,{219,46}}}},
    {debug_line,220,58},
    {match,
     {220,5},
     {nil,{220,5}},
     {call,
      {220,10},
      {atom,{220,10},run},
      [{var,{220,14},'Ts1'},
       {var,{220,19},'TestFile'},
       {atom,{220,29},write_beam}]}},
    {debug_line,221,59},
    {match,
     {221,5},
     {atom,{221,5},false},
     {call,
      {221,13},
      {remote,{221,20},{atom,{221,13},filelib},{atom,{221,21},is_regular}},
      [{var,{221,32},'BeamFile'}]}},
    {debug_line,223,60},
    {match,
     {223,5},
     {var,{223,5},'Ts2'},
     {cons,
      {223,11},
      {tuple,
       {223,12},
       [{atom,{223,13},warning_unused_var},
        {bin,
         {224,12},
         [{bin_element,
           {224,14},
           {string,
            {224,14},
            "\n               t() ->\n                 A = unused,\n                 ok.\n             "},
           default,default}]},
        {cons,
         {229,6},
         {atom,{229,7},return_warnings},
         {cons,
          {229,24},
          {atom,{229,24},export_all},
          {cons,
           {229,36},
           {tuple,{229,36},[{atom,{229,37},outdir},{var,{229,45},'OutDir'}]},
           {nil,{229,52}}}}},
        {tuple,
         {230,6},
         [{atom,{230,7},warning},
          {cons,
           {231,9},
           {tuple,
            {231,10},
            [{tuple,{231,11},[{integer,{231,12},3},{integer,{231,14},18}]},
             {atom,{231,18},erl_lint},
             {tuple,
              {231,27},
              [{atom,{231,28},unused_var},{atom,{231,39},'A'}]}]},
           {nil,{231,44}}}]}]},
      {nil,{231,48}}}},
    {debug_line,233,61},
    {match,
     {233,5},
     {nil,{233,5}},
     {call,
      {233,10},
      {atom,{233,10},run},
      [{var,{233,14},'Ts2'},
       {var,{233,19},'TestFile'},
       {atom,{233,29},write_beam}]}},
    {debug_line,234,62},
    {match,
     {234,5},
     {atom,{234,5},true},
     {call,
      {234,12},
      {remote,{234,19},{atom,{234,12},filelib},{atom,{234,20},is_regular}},
      [{var,{234,31},'BeamFile'}]}},
    {debug_line,235,63},
    {match,
     {235,5},
     {atom,{235,5},ok},
     {call,
      {235,10},
      {remote,{235,14},{atom,{235,10},file},{atom,{235,15},delete}},
      [{var,{235,22},'BeamFile'}]}},
    {debug_line,237,64},
    {atom,{237,5},ok}]}]}.
{function,
 {239,1},
 transforms,1,
 [{clause,
   {239,1},
   [{var,{239,1},'_'}],
   [[{call,
      {239,1},
      {remote,{239,1},{atom,{239,1},fake},{atom,{239,1},is_beam_bif_info}},
      []}]],
   [{debug_line,239,65},{atom,{239,1},ignore}]},
  {clause,
   {239,1},
   [{var,{239,12},'Config'}],
   [],
   [{debug_line,240,66},
    {match,
     {240,5},
     {var,{240,5},'Ts1'},
     {cons,
      {240,11},
      {tuple,
       {240,12},
       [{atom,{240,13},undef_parse_transform},
        {bin,
         {241,6},
         [{bin_element,
           {241,8},
           {string,
            {241,8},
            "\n              -compile({parse_transform,non_existing}).\n             "},
           default,default}]},
        {cons,{244,6},{atom,{244,7},return},{nil,{244,13}}},
        {tuple,
         {245,6},
         [{atom,{245,7},error},
          {cons,
           {245,13},
           {tuple,
            {245,14},
            [{atom,{245,15},none},
             {atom,{245,20},compile},
             {tuple,
              {245,28},
              [{atom,{245,29},undef_parse_transform},
               {atom,{245,51},non_existing}]}]},
           {nil,{245,65}}},
          {nil,{245,67}}]}]},
      {nil,{245,71}}}},
    {debug_line,246,67},
    {match,
     {246,5},
     {nil,{246,5}},
     {call,
      {246,10},
      {atom,{246,10},run},
      [{var,{246,14},'Config'},{var,{246,22},'Ts1'}]}},
    {debug_line,248,68},
    {match,
     {248,5},
     {var,{248,5},'Ts2'},
     {bin,
      {248,11},
      [{bin_element,
        {248,13},
        {string,{248,13},"\n              -compile({parse_transform,"},
        default,default},
       {bin_element,{249,44},{string,{249,44},"error_SUITE"},default,default},
       {bin_element,
        {249,58},
        {string,{249,58},"}).\n             "},
        default,default}]}},
    {debug_line,252,69},
    {match,
     {252,5},
     {tuple,
      {252,5},
      [{atom,{252,6},error},
       {cons,
        {252,12},
        {tuple,
         {252,13},
         [{atom,{252,14},none},
          {atom,{252,19},compile},
          {tuple,
           {252,27},
           [{atom,{252,28},parse_transform},
            {atom,{252,45},error_SUITE},
            {tuple,
             {252,52},
             [{atom,{252,53},error},
              {atom,{252,59},too_bad},
              {var,{252,67},'_'}]}]}]},
        {nil,{252,71}}},
       {nil,{252,73}}]},
     {call,
      {253,2},
      {atom,{253,2},run_test},
      [{var,{253,11},'Ts2'},
       {block,0,
        [{debug_line,253,70},
         {call,
          {253,16},
          {atom,{253,16},test_filename},
          [{var,{253,30},'Config'}]}]},
       {block,0,
        [{cons,
          {253,39},
          {tuple,{253,40},[{atom,{253,41},pt_error},{atom,{253,50},error}]},
          {nil,{253,56}}}]},
       {atom,{253,59},dont_write_beam}]}},
    {debug_line,255,71},
    {match,
     {255,5},
     {tuple,
      {255,5},
      [{atom,{255,6},error},
       {cons,
        {255,12},
        {tuple,
         {255,13},
         [{atom,{255,14},none},
          {atom,{255,19},compile},
          {tuple,
           {255,27},
           [{atom,{255,28},parse_transform},
            {atom,{255,45},error_SUITE},
            {tuple,
             {255,52},
             [{atom,{255,53},error},
              {atom,{255,59},undef},
              {var,{255,65},'_'}]}]}]},
        {nil,{255,69}}},
       {nil,{255,71}}]},
     {call,
      {256,9},
      {atom,{256,9},run_test},
      [{var,{256,18},'Ts2'},
       {block,0,
        [{debug_line,256,72},
         {call,
          {256,23},
          {atom,{256,23},test_filename},
          [{var,{256,37},'Config'}]}]},
       {block,0,
        [{cons,
          {256,46},
          {tuple,
           {256,47},
           [{atom,{256,48},pt_error},{atom,{256,57},call_undef}]},
          {nil,{256,68}}}]},
       {atom,{256,71},dont_write_beam}]}},
    {debug_line,258,73},
    {match,
     {258,5},
     {tuple,
      {258,5},
      [{atom,{258,6},error},
       {cons,
        {258,12},
        {tuple,
         {258,13},
         [{atom,{258,14},none},
          {atom,{258,19},compile},
          {tuple,
           {258,27},
           [{atom,{258,28},parse_transform},
            {atom,{258,45},error_SUITE},
            {tuple,
             {258,52},
             [{atom,{258,53},exit},
              {atom,{258,58},exited},
              {var,{258,65},'_'}]}]}]},
        {nil,{258,69}}},
       {nil,{258,71}}]},
     {call,
      {259,9},
      {atom,{259,9},run_test},
      [{var,{259,18},'Ts2'},
       {block,0,
        [{debug_line,259,74},
         {call,
          {259,23},
          {atom,{259,23},test_filename},
          [{var,{259,37},'Config'}]}]},
       {block,0,
        [{cons,
          {259,46},
          {tuple,{259,47},[{atom,{259,48},pt_error},{atom,{259,57},exit}]},
          {nil,{259,62}}}]},
       {atom,{259,65},dont_write_beam}]}},
    {debug_line,261,75},
    {match,
     {261,5},
     {tuple,
      {261,5},
      [{atom,{261,6},error},
       {cons,
        {261,12},
        {tuple,
         {261,13},
         [{atom,{261,14},none},
          {atom,{261,19},compile},
          {tuple,
           {261,27},
           [{atom,{261,28},parse_transform},
            {atom,{261,45},error_SUITE},
            {tuple,
             {261,52},
             [{atom,{261,53},throw},
              {atom,{261,59},thrown},
              {cons,{261,66},{var,{261,67},'_'},{var,{261,69},'_'}}]}]}]},
        {nil,{261,74}}},
       {nil,{261,76}}]},
     {call,
      {262,9},
      {atom,{262,9},run_test},
      [{var,{262,18},'Ts2'},
       {block,0,
        [{debug_line,262,76},
         {call,
          {262,23},
          {atom,{262,23},test_filename},
          [{var,{262,37},'Config'}]}]},
       {block,0,
        [{cons,
          {262,46},
          {tuple,{262,47},[{atom,{262,48},pt_error},{atom,{262,57},throw}]},
          {nil,{262,63}}}]},
       {atom,{262,66},dont_write_beam}]}},
    {debug_line,264,77},
    {atom,{264,5},ok}]}]}.
{function,
    {266,1},
    parse_transform,2,
    [{clause,
         {266,1},
         [{var,{266,1},'_'},{var,{266,1},'_'}],
         [[{call,
               {266,1},
               {remote,
                   {266,1},
                   {atom,{266,1},fake},
                   {atom,{266,1},is_beam_bif_info}},
               []}]],
         [{debug_line,266,78},{atom,{266,1},ignore}]},
     {clause,
         {266,1},
         [{var,{266,17},'_'},{var,{266,20},'Opts'}],
         [],
         [{debug_line,267,79},
          {match,
              {267,5},
              {tuple,{267,5},[{var,{267,6},'_'},{var,{267,8},'Error'}]},
              {call,
                  {267,17},
                  {remote,
                      {267,22},
                      {atom,{267,17},lists},
                      {atom,{267,23},keyfind}},
                  [{atom,{267,31},pt_error},
                   {integer,{267,41},1},
                   {var,{267,44},'Opts'}]}},
          {debug_line,268,80},
          {'case',
              {268,5},
              {var,{268,10},'Error'},
              [{clause,
                   {269,9},
                   [{atom,{269,9},call_undef}],
                   [],
                   [{debug_line,270,81},
                    {call,
                        {270,13},
                        {remote,
                            {270,22},
                            {atom,{270,13},camembert},
                            {atom,{270,23},délicieux}},
                        []}]},
               {clause,
                   {271,9},
                   [{atom,{271,9},throw}],
                   [],
                   [{debug_line,272,82},
                    {call,
                        {272,13},
                        {remote,
                            {272,13},
                            {atom,{272,13},erlang},
                            {atom,{272,13},throw}},
                        [{atom,{272,19},thrown}]}]},
               {clause,
                   {273,9},
                   [{atom,{273,9},exit}],
                   [],
                   [{debug_line,274,83},
                    {call,
                        {274,13},
                        {remote,
                            {274,13},
                            {atom,{274,13},erlang},
                            {atom,{274,13},exit}},
                        [{atom,{274,18},exited}]}]},
               {clause,
                   {275,9},
                   [{atom,{275,9},error}],
                   [],
                   [{debug_line,276,84},
                    {call,
                        {276,13},
                        {remote,
                            {276,13},
                            {atom,{276,13},erlang},
                            {atom,{276,13},error}},
                        [{atom,{276,19},too_bad}]}]}]}]}]}.
{function,
 {279,1},
 maps_warnings,1,
 [{clause,
   {279,1},
   [{var,{279,1},'_'}],
   [[{call,
      {279,1},
      {remote,{279,1},{atom,{279,1},fake},{atom,{279,1},is_beam_bif_info}},
      []}]],
   [{debug_line,279,85},{atom,{279,1},ignore}]},
  {clause,
   {279,1},
   [{var,{279,15},'Config'}],
   [[{call,
      {279,28},
      {remote,{279,28},{atom,{279,28},erlang},{atom,{279,28},is_list}},
      [{var,{279,36},'Config'}]}]],
   [{debug_line,280,86},
    {match,
     {280,5},
     {var,{280,5},'Ts1'},
     {cons,
      {280,11},
      {tuple,
       {280,12},
       [{atom,{280,13},map_ok_use_of_pattern},
        {bin,
         {281,5},
         [{bin_element,
           {281,7},
           {string,
            {281,7},
            "\n              -export([t/1]).\n              t(K) ->\n                 #{K := 1 = V} = id(#{<<\"hi all\">> => 1}),\n\t\t V.\n              id(I) -> I.\n             "},
           default,default}]},
        {cons,{288,6},{atom,{288,7},return},{nil,{288,13}}},
        {nil,{289,6}}]},
      {cons,
       {290,2},
       {tuple,
        {290,2},
        [{atom,{290,3},map_illegal_use_of_pattern},
         {bin,
          {291,5},
          [{bin_element,
            {291,7},
            {string,
             {291,7},
             "\n              -export([t/0,t/2]).\n\t      t(K,#{ K := V }) -> V.\n              t() ->\n                 V = 32,\n                 #{<<\"hi\",V,\"all\">> := 1} = id(#{<<\"hi all\">> => 1}).\n              id(I) -> I.\n             "},
            default,default}]},
         {cons,{299,6},{atom,{299,7},return},{nil,{299,13}}},
         {tuple,
          {300,6},
          [{atom,{300,7},error},
           {cons,
            {300,13},
            {tuple,
             {300,14},
             [{tuple,{300,15},[{integer,{300,16},3},{integer,{300,18},15}]},
              {atom,{300,22},erl_lint},
              {tuple,
               {300,31},
               [{atom,{300,32},unbound_var},{atom,{300,44},'K'}]}]},
            {nil,{300,49}}},
           {nil,{300,51}}]}]},
       {nil,{301,5}}}}},
    {debug_line,302,87},
    {match,
     {302,5},
     {nil,{302,5}},
     {call,
      {302,10},
      {atom,{302,10},run2},
      [{var,{302,15},'Config'},{var,{302,23},'Ts1'}]}},
    {debug_line,303,88},
    {atom,{303,5},ok}]}]}.
{function,
 {305,1},
 bad_utf8,1,
 [{clause,
   {305,1},
   [{var,{305,1},'_'}],
   [[{call,
      {305,1},
      {remote,{305,1},{atom,{305,1},fake},{atom,{305,1},is_beam_bif_info}},
      []}]],
   [{debug_line,305,89},{atom,{305,1},ignore}]},
  {clause,
   {305,1},
   [{var,{305,10},'Config'}],
   [],
   [{debug_line,306,90},
    {match,
     {306,5},
     {var,{306,5},'Ts'},
     {cons,
      {306,10},
      {tuple,
       {306,11},
       [{atom,{306,12},bad_explicit_utf8},
        {bin,
         {309,5},
         [{bin_element,
           {309,7},
           {string,{309,7},"%% coding: utf-8\n              %% Bj"},
           default,default},
          {bin_element,{310,22},{integer,{310,22},246},default,default},
          {bin_element,
           {310,26},
           {string,{310,26},"rn\n              t() -> \""},
           default,default},
          {bin_element,{311,26},{integer,{311,26},246},default,default},
          {bin_element,
           {311,30},
           {string,{311,30},"\".\n             "},
           default,default}]},
        {nil,{313,5}},
        {tuple,
         {314,5},
         [{atom,{314,6},error},
          {cons,
           {314,12},
           {tuple,
            {314,13},
            [{tuple,{314,14},[{integer,{314,15},2},{integer,{314,17},15}]},
             {atom,{314,21},epp},
             {atom,{314,25},cannot_parse}]},
           {cons,
            {315,6},
            {tuple,
             {315,6},
             [{tuple,{315,7},[{integer,{315,8},2},{integer,{315,10},15}]},
              {atom,{315,14},file_io_server},
              {atom,{315,29},invalid_unicode}]},
            {nil,{315,45}}}},
          {nil,{316,6}}]}]},
      {cons,
       {319,11},
       {tuple,
        {319,11},
        [{atom,{319,12},bad_implicit_utf8},
         {bin,
          {322,5},
          [{bin_element,
            {322,7},
            {string,{322,7},"\n              %% Bj"},
            default,default},
           {bin_element,{323,22},{integer,{323,22},246},default,default},
           {bin_element,
            {323,26},
            {string,{323,26},"rn\n              t() -> \""},
            default,default},
           {bin_element,{324,26},{integer,{324,26},246},default,default},
           {bin_element,
            {324,30},
            {string,{324,30},"\".\n             "},
            default,default}]},
         {nil,{326,5}},
         {tuple,
          {327,5},
          [{atom,{327,6},error},
           {cons,
            {327,12},
            {tuple,
             {327,13},
             [{tuple,{327,14},[{integer,{327,15},2},{integer,{327,17},15}]},
              {atom,{327,21},epp},
              {atom,{327,25},cannot_parse}]},
            {cons,
             {328,6},
             {tuple,
              {328,6},
              [{tuple,{328,7},[{integer,{328,8},2},{integer,{328,10},15}]},
               {atom,{328,14},file_io_server},
               {atom,{328,29},invalid_unicode}]},
             {nil,{328,45}}}},
           {nil,{329,6}}]}]},
       {nil,{331,10}}}}},
    {debug_line,332,91},
    {match,
     {332,5},
     {nil,{332,5}},
     {call,
      {332,10},
      {atom,{332,10},run2},
      [{var,{332,15},'Config'},{var,{332,23},'Ts'}]}},
    {debug_line,333,92},
    {atom,{333,5},ok}]}]}.
{function,
 {335,1},
 bad_decls,1,
 [{clause,
   {335,1},
   [{var,{335,1},'_'}],
   [[{call,
      {335,1},
      {remote,{335,1},{atom,{335,1},fake},{atom,{335,1},is_beam_bif_info}},
      []}]],
   [{debug_line,335,93},{atom,{335,1},ignore}]},
  {clause,
   {335,1},
   [{var,{335,11},'Config'}],
   [],
   [{debug_line,336,94},
    {match,
     {336,5},
     {var,{336,5},'Ts'},
     {cons,
      {336,10},
      {tuple,
       {336,11},
       [{atom,{336,12},bad_decls_1},
        {bin,
         {337,5},
         [{bin_element,
           {337,7},
           {string,{337,7},"\n-module({l}).\n             "},
           default,default}]},
        {nil,{339,5}},
        {tuple,
         {340,12},
         [{atom,{340,13},error},
          {cons,
           {340,19},
           {tuple,
            {340,20},
            [{tuple,{340,21},[{integer,{340,22},2},{integer,{340,24},9}]},
             {atom,{340,27},erl_parse},
             {op,
              {340,44},
              '++',
              {string,{340,37},"bad "},
              {op,
               {340,58},
               '++',
               {cons,{340,47},{string,{340,48},"module"},{nil,{340,56}}},
               {string,{340,61}," declaration"}}}]},
           {nil,{340,76}}},
          {nil,{341,13}}]}]},
      {cons,
       {343,11},
       {tuple,
        {343,11},
        [{atom,{343,12},bad_decls_2},
         {bin,
          {344,5},
          [{bin_element,
            {344,7},
            {string,{344,7},"\n-module(l, m).\n             "},
            default,default}]},
         {nil,{346,5}},
         {tuple,
          {347,12},
          [{atom,{347,13},error},
           {cons,
            {347,19},
            {tuple,
             {347,20},
             [{tuple,{347,21},[{integer,{347,22},2},{integer,{347,24},12}]},
              {atom,{347,28},erl_parse},
              {string,{347,38},"bad variable list"}]},
            {nil,{347,58}}},
           {nil,{347,60}}]}]},
       {cons,
        {349,11},
        {tuple,
         {349,11},
         [{atom,{349,12},bad_decls_3},
          {bin,
           {350,5},
           [{bin_element,
             {350,7},
             {string,{350,7},"\n-export([a/1], Y).\n             "},
             default,default}]},
          {nil,{352,5}},
          {tuple,
           {353,12},
           [{atom,{353,13},error},
            {cons,
             {353,19},
             {tuple,
              {353,20},
              [{tuple,{353,21},[{integer,{353,22},2},{integer,{353,24},16}]},
               {atom,{353,28},erl_parse},
               {op,
                {353,45},
                '++',
                {string,{353,38},"bad "},
                {op,
                 {353,59},
                 '++',
                 {cons,{353,48},{string,{353,49},"export"},{nil,{353,57}}},
                 {string,{353,62}," declaration"}}}]},
             {nil,{353,77}}},
            {nil,{354,13}}]}]},
        {cons,
         {356,11},
         {tuple,
          {356,11},
          [{atom,{356,12},bad_decls_4},
           {bin,
            {357,5},
            [{bin_element,
              {357,7},
              {string,{357,7},"\n-import([a/1], Y).\n             "},
              default,default}]},
           {nil,{359,5}},
           {tuple,
            {360,12},
            [{atom,{360,13},error},
             {cons,
              {360,19},
              {tuple,
               {360,20},
               [{tuple,{360,21},[{integer,{360,22},2},{integer,{360,24},16}]},
                {atom,{360,28},erl_parse},
                {op,
                 {360,45},
                 '++',
                 {string,{360,38},"bad "},
                 {op,
                  {360,59},
                  '++',
                  {cons,{360,48},{string,{360,49},"import"},{nil,{360,57}}},
                  {string,{360,62}," declaration"}}}]},
              {nil,{360,77}}},
             {nil,{361,13}}]}]},
         {cons,
          {363,11},
          {tuple,
           {363,11},
           [{atom,{363,12},bad_decls_5},
            {bin,
             {364,5},
             [{bin_element,
               {364,7},
               {string,{364,7},"\n-ugly({A,B}).\n             "},
               default,default}]},
            {nil,{366,5}},
            {tuple,
             {367,12},
             [{atom,{367,13},error},
              {cons,
               {367,19},
               {tuple,
                {367,20},
                [{tuple,{367,21},[{integer,{367,22},2},{integer,{367,24},7}]},
                 {atom,{367,27},erl_parse},
                 {string,{367,37},"bad attribute"}]},
               {nil,{367,53}}},
              {nil,{367,55}}]}]},
          {cons,
           {369,11},
           {tuple,
            {369,11},
            [{atom,{369,12},bad_decls_6},
             {bin,
              {370,5},
              [{bin_element,
                {370,7},
                {string,{370,7},"\n-ugly(a, b).\n             "},
                default,default}]},
             {nil,{372,5}},
             {tuple,
              {373,12},
              [{atom,{373,13},error},
               {cons,
                {373,19},
                {tuple,
                 {373,20},
                 [{tuple,
                   {373,21},
                   [{integer,{373,22},2},{integer,{373,24},10}]},
                  {atom,{373,28},erl_parse},
                  {string,{373,38},"bad attribute"}]},
                {nil,{373,54}}},
               {nil,{373,56}}]}]},
           {cons,
            {375,11},
            {tuple,
             {375,11},
             [{atom,{375,12},bad_decls_7},
              {bin,
               {376,5},
               [{bin_element,
                 {376,7},
                 {string,{376,7},"\n-export([A/1]).\n             "},
                 default,default}]},
              {nil,{378,5}},
              {tuple,
               {379,12},
               [{atom,{379,13},error},
                {cons,
                 {379,19},
                 {tuple,
                  {379,20},
                  [{tuple,
                    {379,21},
                    [{integer,{379,22},2},{integer,{379,24},10}]},
                   {atom,{379,28},erl_parse},
                   {string,{379,38},"bad function name"}]},
                 {nil,{379,58}}},
                {nil,{379,60}}]}]},
            {cons,
             {381,11},
             {tuple,
              {381,11},
              [{atom,{381,12},bad_decls_8},
               {bin,
                {382,5},
                [{bin_element,
                  {382,7},
                  {string,{382,7},"\n-export([a/a]).\n             "},
                  default,default}]},
               {nil,{384,5}},
               {tuple,
                {385,12},
                [{atom,{385,13},error},
                 {cons,
                  {385,19},
                  {tuple,
                   {385,20},
                   [{tuple,
                     {385,21},
                     [{integer,{385,22},2},{integer,{385,24},12}]},
                    {atom,{385,28},erl_parse},
                    {string,{385,38},"bad function arity"}]},
                  {nil,{385,59}}},
                 {nil,{385,61}}]}]},
             {cons,
              {387,11},
              {tuple,
               {387,11},
               [{atom,{387,12},bad_decls_9},
                {bin,
                 {388,5},
                 [{bin_element,
                   {388,7},
                   {string,{388,7},"\n-export([a/1, {3,4}]).\n             "},
                   default,default}]},
                {nil,{390,5}},
                {tuple,
                 {391,12},
                 [{atom,{391,13},error},
                  {cons,
                   {391,19},
                   {tuple,
                    {391,20},
                    [{tuple,
                      {391,21},
                      [{integer,{391,22},2},{integer,{391,24},15}]},
                     {atom,{391,28},erl_parse},
                     {string,{391,38},"bad Name/Arity"}]},
                   {nil,{391,55}}},
                  {nil,{391,57}}]}]},
              {cons,
               {393,11},
               {tuple,
                {393,11},
                [{atom,{393,12},bad_decls_10},
                 {bin,
                  {394,5},
                  [{bin_element,
                    {394,7},
                    {string,{394,7},"\n-record(A, {{bad,a}}).\n             "},
                    default,default}]},
                 {nil,{396,5}},
                 {tuple,
                  {397,12},
                  [{atom,{397,13},error},
                   {cons,
                    {397,19},
                    {tuple,
                     {397,20},
                     [{tuple,
                       {397,21},
                       [{integer,{397,22},2},{integer,{397,24},9}]},
                      {atom,{397,27},erl_parse},
                      {op,
                       {397,44},
                       '++',
                       {string,{397,37},"bad "},
                       {op,
                        {397,58},
                        '++',
                        {cons,
                         {397,47},
                         {string,{397,48},"record"},
                         {nil,{397,56}}},
                        {string,{397,61}," declaration"}}}]},
                    {nil,{397,76}}},
                   {nil,{398,13}}]}]},
               {cons,
                {400,11},
                {tuple,
                 {400,11},
                 [{atom,{400,12},bad_decls_11},
                  {bin,
                   {401,5},
                   [{bin_element,
                     {401,7},
                     {string,
                      {401,7},
                      "\n-record(a, [a,b,c,d]).\n             "},
                     default,default}]},
                  {nil,{403,5}},
                  {tuple,
                   {404,12},
                   [{atom,{404,13},error},
                    {cons,
                     {404,19},
                     {tuple,
                      {404,20},
                      [{tuple,
                        {404,21},
                        [{integer,{404,22},2},{integer,{404,24},12}]},
                       {atom,{404,28},erl_parse},
                       {string,{404,38},"bad record declaration"}]},
                     {nil,{404,63}}},
                    {nil,{404,65}}]}]},
                {cons,
                 {406,11},
                 {tuple,
                  {406,11},
                  [{atom,{406,12},bad_decls_12},
                   {bin,
                    {407,5},
                    [{bin_element,
                      {407,7},
                      {string,{407,7},"\n-record(a).\n             "},
                      default,default}]},
                   {nil,{409,5}},
                   {tuple,
                    {410,12},
                    [{atom,{410,13},error},
                     {cons,
                      {410,19},
                      {tuple,
                       {410,20},
                       [{tuple,
                         {410,21},
                         [{integer,{410,22},2},{integer,{410,24},9}]},
                        {atom,{410,27},erl_parse},
                        {op,
                         {410,44},
                         '++',
                         {string,{410,37},"bad "},
                         {op,
                          {410,58},
                          '++',
                          {cons,
                           {410,47},
                           {string,{410,48},"record"},
                           {nil,{410,56}}},
                          {string,{410,61}," declaration"}}}]},
                      {nil,{410,76}}},
                     {nil,{411,13}}]}]},
                 {nil,{413,11}}}}}}}}}}}}}}},
    {debug_line,414,95},
    {match,
     {414,5},
     {nil,{414,5}},
     {call,
      {414,10},
      {atom,{414,10},run2},
      [{var,{414,15},'Config'},{var,{414,23},'Ts'}]}},
    {debug_line,416,96},
    {match,
     {416,5},
     {tuple,
      {416,5},
      [{atom,{416,6},error},
       {tuple,
        {416,12},
        [{tuple,{416,13},[{integer,{416,14},1},{integer,{416,16},4}]},
         {atom,{416,19},erl_parse},
         {string,{416,29},"bad term"}]}]},
     {call,
      {416,44},
      {atom,{416,44},parse_string},
      [{block,0,[{string,{416,57},"1, 2 + 4."}]}]}},
    {debug_line,417,97},
    {match,
     {417,5},
     {tuple,
      {417,5},
      [{atom,{417,6},error},
       {tuple,
        {417,12},
        [{tuple,{417,13},[{integer,{417,14},1},{integer,{417,16},1}]},
         {atom,{417,19},erl_parse},
         {string,{417,29},"bad term"}]}]},
     {call,
      {417,44},
      {atom,{417,44},parse_string},
      [{block,0,[{string,{417,57},"34 + begin 34 end."}]}]}},
    {debug_line,418,98},
    {atom,{418,5},ok}]}]}.
{function,
    {420,1},
    parse_string,1,
    [{clause,
         {420,1},
         [{var,{420,1},'_'}],
         [[{call,
               {420,1},
               {remote,
                   {420,1},
                   {atom,{420,1},fake},
                   {atom,{420,1},is_beam_bif_info}},
               []}]],
         [{debug_line,420,99},{atom,{420,1},ignore}]},
     {clause,
         {420,1},
         [{var,{420,14},'S'}],
         [],
         [{debug_line,421,100},
          {match,
              {421,5},
              {tuple,
                  {421,5},
                  [{atom,{421,6},ok},{var,{421,9},'Ts'},{var,{421,12},'_'}]},
              {call,
                  {421,17},
                  {remote,
                      {421,25},
                      {atom,{421,17},erl_scan},
                      {atom,{421,26},string}},
                  [{var,{421,33},'S'},
                   {block,0,
                       [{tuple,
                            {421,36},
                            [{integer,{421,37},1},{integer,{421,40},1}]}]}]}},
          {debug_line,422,101},
          {call,
              {422,5},
              {remote,
                  {422,14},
                  {atom,{422,5},erl_parse},
                  {atom,{422,15},parse_term}},
              [{var,{422,26},'Ts'}]}]}]}.
{function,{425,1},
          run,2,
          [{clause,{425,1},
                   [{var,{425,1},'_'},{var,{425,1},'_'}],
                   [[{call,{425,1},
                           {remote,{425,1},
                                   {atom,{425,1},fake},
                                   {atom,{425,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,425,102},{atom,{425,1},ignore}]},
           {clause,{425,1},
                   [{var,{425,5},'Config'},{var,{425,13},'Tests'}],
                   [],
                   [{debug_line,426,103},
                    {match,{426,5},
                           {var,{426,5},'File'},
                           {call,{426,12},
                                 {atom,{426,12},test_filename},
                                 [{var,{426,26},'Config'}]}},
                    {debug_line,427,104},
                    {call,{427,5},
                          {atom,{427,5},run},
                          [{var,{427,9},'Tests'},
                           {var,{427,16},'File'},
                           {atom,{427,22},dont_write_beam}]}]}]}.
{function,
 {429,1},
 run,3,
 [{clause,
   {429,1},
   [{var,{429,1},'_'},{var,{429,1},'_'},{var,{429,1},'_'}],
   [[{call,
      {429,1},
      {remote,{429,1},{atom,{429,1},fake},{atom,{429,1},is_beam_bif_info}},
      []}]],
   [{debug_line,429,105},{atom,{429,1},ignore}]},
  {clause,
   {429,1},
   [{var,{429,5},'Tests'},{var,{429,12},'File'},{var,{429,18},'WriteBeam'}],
   [],
   [{debug_line,430,106},
    {match,
     {430,5},
     {var,{430,5},'F'},
     {'fun',
      {430,9},
      {clauses,
       [{clause,
         {430,12},
         [{tuple,
           {430,13},
           [{var,{430,14},'N'},
            {var,{430,16},'P'},
            {var,{430,18},'Ws'},
            {var,{430,21},'E'}]},
          {var,{430,25},'BadL'}],
         [],
         [{debug_line,431,107},
          {'case',
           {431,17},
           {'catch',
            {431,22},
            {call,
             {431,28},
             {atom,{431,28},run_test},
             [{var,{431,37},'P'},
              {var,{431,40},'File'},
              {var,{431,46},'Ws'},
              {var,{431,50},'WriteBeam'}]}},
           [{clause,
             {432,21},
             [{var,{432,21},'E'}],
             [],
             [{debug_line,433,108},{var,{433,25},'BadL'}]},
            {clause,
             {434,21},
             [{var,{434,21},'Bad'}],
             [],
             [{debug_line,435,109},
              {call,
               {435,25},
               {remote,{435,27},{atom,{435,25},io},{atom,{435,28},format}},
               [{block,0,
                 [{string,
                   {435,35},
                   "~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"}]},
                {block,0,
                 [{debug_line,436,110},
                  {cons,
                   {436,54},
                   {var,{436,55},'N'},
                   {cons,
                    {436,58},
                    {var,{436,58},'E'},
                    {cons,{436,61},{var,{436,61},'Bad'},{nil,{436,64}}}}}]}]},
              {debug_line,437,111},
              {call,{437,4},{atom,{437,4},fail},[]}]}]}]}]}}},
    {debug_line,440,112},
    {call,
     {440,5},
     {remote,{440,10},{atom,{440,5},lists},{atom,{440,11},foldl}},
     [{var,{440,17},'F'},{nil,{440,20}},{var,{440,24},'Tests'}]}]}]}.
{function,{442,1},
          run2,2,
          [{clause,{442,1},
                   [{var,{442,1},'_'},{var,{442,1},'_'}],
                   [[{call,{442,1},
                           {remote,{442,1},
                                   {atom,{442,1},fake},
                                   {atom,{442,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,442,113},{atom,{442,1},ignore}]},
           {clause,{442,1},
                   [{var,{442,6},'Config'},{var,{442,14},'Tests'}],
                   [],
                   [{debug_line,443,114},
                    {match,{443,5},
                           {var,{443,5},'File'},
                           {call,{443,12},
                                 {atom,{443,12},test_filename},
                                 [{var,{443,26},'Config'}]}},
                    {debug_line,444,115},
                    {call,{444,5},
                          {atom,{444,5},run2},
                          [{var,{444,10},'Tests'},
                           {var,{444,17},'File'},
                           {atom,{444,23},dont_write_beam}]}]}]}.
{function,
 {446,1},
 run2,3,
 [{clause,
   {446,1},
   [{var,{446,1},'_'},{var,{446,1},'_'},{var,{446,1},'_'}],
   [[{call,
      {446,1},
      {remote,{446,1},{atom,{446,1},fake},{atom,{446,1},is_beam_bif_info}},
      []}]],
   [{debug_line,446,116},{atom,{446,1},ignore}]},
  {clause,
   {446,1},
   [{var,{446,6},'Tests'},{var,{446,13},'File'},{var,{446,19},'WriteBeam'}],
   [],
   [{debug_line,447,117},
    {match,
     {447,5},
     {var,{447,5},'F'},
     {'fun',
      {447,9},
      {clauses,
       [{clause,
         {447,12},
         [{tuple,
           {447,13},
           [{var,{447,14},'N'},
            {var,{447,16},'P'},
            {var,{447,18},'Ws'},
            {var,{447,21},'E'}]},
          {var,{447,25},'BadL'}],
         [],
         [{debug_line,448,118},
          {'case',
           {448,17},
           {'catch',
            {448,22},
            {call,
             {448,28},
             {atom,{448,28},filter},
             [{block,0,
               [{call,
                 {448,35},
                 {atom,{448,35},run_test},
                 [{var,{448,44},'P'},
                  {var,{448,47},'File'},
                  {var,{448,53},'Ws'},
                  {var,{448,57},'WriteBeam'}]}]}]}},
           [{clause,
             {449,21},
             [{var,{449,21},'E'}],
             [],
             [{debug_line,450,119},{var,{450,25},'BadL'}]},
            {clause,
             {451,21},
             [{var,{451,21},'Bad'}],
             [],
             [{debug_line,452,120},
              {call,
               {452,25},
               {remote,{452,27},{atom,{452,25},io},{atom,{452,28},format}},
               [{block,0,
                 [{string,
                   {452,35},
                   "~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"}]},
                {block,0,
                 [{debug_line,453,121},
                  {cons,
                   {453,54},
                   {var,{453,55},'N'},
                   {cons,
                    {453,58},
                    {var,{453,58},'E'},
                    {cons,{453,61},{var,{453,61},'Bad'},{nil,{453,64}}}}}]}]},
              {debug_line,454,122},
              {call,{454,4},{atom,{454,4},fail},[]}]}]}]}]}}},
    {debug_line,457,123},
    {call,
     {457,5},
     {remote,{457,10},{atom,{457,5},lists},{atom,{457,11},foldl}},
     [{var,{457,17},'F'},{nil,{457,20}},{var,{457,24},'Tests'}]}]}]}.
{function,{459,1},
          filter,1,
          [{clause,{459,1},
                   [{var,{459,1},'_'}],
                   [[{call,{459,1},
                           {remote,{459,1},
                                   {atom,{459,1},fake},
                                   {atom,{459,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,459,124},{atom,{459,1},ignore}]},
           {clause,{459,1},
                   [{tuple,{459,8},
                           [{atom,{459,9},error},
                            {var,{459,15},'Es'},
                            {var,{459,18},'_Ws'}]}],
                   [],
                   [{debug_line,460,125},
                    {tuple,{460,5},
                           [{atom,{460,6},error},
                            {var,{460,12},'Es'},
                            {nil,{460,15}}]}]},
           {clause,{461,1},
                   [{var,{461,8},'X'}],
                   [],
                   [{debug_line,462,126},{var,{462,5},'X'}]}]}.
{function,
    {467,1},
    test_filename,1,
    [{clause,
         {467,1},
         [{var,{467,1},'_'}],
         [[{call,
               {467,1},
               {remote,
                   {467,1},
                   {atom,{467,1},fake},
                   {atom,{467,1},is_beam_bif_info}},
               []}]],
         [{debug_line,467,127},{atom,{467,1},ignore}]},
     {clause,
         {467,1},
         [{var,{467,15},'Conf'}],
         [],
         [{debug_line,468,128},
          {match,
              {468,5},
              {var,{468,5},'Filename'},
              {cons,
                  {468,16},
                  {string,{468,17},"errors_test_"},
                  {cons,
                      {468,32},
                      {call,
                          {468,32},
                          {remote,
                              {468,40},
                              {atom,{468,32},test_lib},
                              {atom,{468,41},uniq}},
                          []},
                      {cons,
                          {468,48},
                          {string,{468,48},".erl"},
                          {nil,{468,54}}}}}},
          {debug_line,469,129},
          {match,
              {469,5},
              {var,{469,5},'DataDir'},
              {call,
                  {469,15},
                  {remote,
                      {469,24},
                      {atom,{469,15},proplists},
                      {atom,{469,25},get_value}},
                  [{atom,{469,35},priv_dir},{var,{469,45},'Conf'}]}},
          {debug_line,470,130},
          {call,
              {470,5},
              {remote,{470,13},{atom,{470,5},filename},{atom,{470,14},join}},
              [{var,{470,19},'DataDir'},{var,{470,28},'Filename'}]}]}]}.
{function,
 {472,1},
 run_test,4,
 [{clause,
   {472,1},
   [{var,{472,1},'_'},{var,{472,1},'_'},{var,{472,1},'_'},{var,{472,1},'_'}],
   [[{call,
      {472,1},
      {remote,{472,1},{atom,{472,1},fake},{atom,{472,1},is_beam_bif_info}},
      []}]],
   [{debug_line,472,131},{atom,{472,1},ignore}]},
  {clause,
   {472,1},
   [{var,{472,10},'Test0'},
    {var,{472,17},'File'},
    {var,{472,23},'Warnings'},
    {var,{472,33},'WriteBeam'}],
   [],
   [{debug_line,473,132},
    {match,
     {473,5},
     {var,{473,5},'ModName'},
     {call,
      {473,15},
      {remote,{473,23},{atom,{473,15},filename},{atom,{473,24},rootname}},
      [{block,0,
        [{call,
          {473,33},
          {remote,{473,41},{atom,{473,33},filename},{atom,{473,42},basename}},
          [{var,{473,51},'File'}]}]},
       {block,0,[{string,{473,58},".erl"}]}]}},
    {debug_line,474,133},
    {match,
     {474,5},
     {var,{474,5},'Mod'},
     {call,
      {474,11},
      {remote,{474,11},{atom,{474,11},erlang},{atom,{474,11},list_to_atom}},
      [{var,{474,24},'ModName'}]}},
    {debug_line,475,134},
    {match,
     {475,5},
     {var,{475,5},'Test'},
     {call,
      {475,12},
      {remote,
       {475,12},
       {atom,{475,12},erlang},
       {atom,{475,12},iolist_to_binary}},
      [{block,0,
        [{cons,
          {475,29},
          {string,{475,30},"-module("},
          {cons,
           {475,41},
           {var,{475,41},'ModName'},
           {cons,
            {475,49},
            {string,{475,49},"). "},
            {cons,{475,55},{var,{475,55},'Test0'},{nil,{475,60}}}}}}]}]}},
    {debug_line,476,135},
    {match,
     {476,5},
     {var,{476,5},'Opts'},
     {'case',
      {476,12},
      {var,{476,17},'WriteBeam'},
      [{clause,
        {477,9},
        [{atom,{477,9},dont_write_beam}],
        [],
        [{debug_line,478,136},
         {cons,
          {478,6},
          {atom,{478,7},binary},
          {cons,
           {478,14},
           {atom,{478,14},return_errors},
           {var,{478,28},'Warnings'}}}]},
       {clause,
        {479,9},
        [{atom,{479,9},write_beam}],
        [],
        [{debug_line,480,137},
         {cons,
          {480,6},
          {atom,{480,7},return_errors},
          {var,{480,21},'Warnings'}}]}]}},
    {debug_line,482,138},
    {match,
     {482,5},
     {atom,{482,5},ok},
     {call,
      {482,10},
      {remote,{482,14},{atom,{482,10},file},{atom,{482,15},write_file}},
      [{var,{482,26},'File'},{var,{482,32},'Test'}]}},
    {debug_line,485,139},
    {call,
     {485,5},
     {remote,{485,12},{atom,{485,5},compile},{atom,{485,13},file}},
     [{var,{485,18},'File'},
      {block,0,
       [{cons,
         {485,24},
         {atom,{485,25},binary},
         {cons,{485,32},{atom,{485,32},report},{var,{485,39},'Warnings'}}}]}]},
    {debug_line,488,140},
    {call,
     {488,5},
     {remote,{488,7},{atom,{488,5},io},{atom,{488,8},format}},
     [{block,0,[{string,{488,15},"~p\n"}]},
      {block,0,[{cons,{488,23},{var,{488,24},'Opts'},{nil,{488,28}}}]}]},
    {debug_line,489,141},
    {match,
     {489,5},
     {var,{489,5},'Res'},
     {'case',
      {489,11},
      {call,
       {489,16},
       {remote,{489,23},{atom,{489,16},compile},{atom,{489,24},file}},
       [{var,{489,29},'File'},{var,{489,35},'Opts'}]},
      [{clause,
        {490,8},
        [{tuple,
          {490,8},
          [{atom,{490,9},ok},
           {var,{490,12},'Mod'},
           {var,{490,16},'_'},
           {cons,
            {490,18},
            {tuple,{490,19},[{var,{490,20},'_File'},{var,{490,26},'Ws'}]},
            {nil,{490,29}}}]}],
        [],
        [{debug_line,491,142},
         {call,
          {491,19},
          {atom,{491,19},print_diagnostics},
          [{var,{491,37},'Ws'},{var,{491,41},'Test'}]},
         {debug_line,492,143},
         {tuple,{492,5},[{atom,{492,6},warning},{var,{492,14},'Ws'}]}]},
       {clause,
        {493,8},
        [{tuple,
          {493,8},
          [{atom,{493,9},ok},
           {var,{493,12},'Mod'},
           {var,{493,16},'_'},
           {nil,{493,18}}]}],
        [],
        [{debug_line,494,144},{nil,{494,5}}]},
       {clause,
        {495,8},
        [{tuple,
          {495,8},
          [{atom,{495,9},ok},
           {var,{495,12},'Mod'},
           {cons,
            {495,16},
            {tuple,{495,17},[{var,{495,18},'_File'},{var,{495,24},'Ws'}]},
            {nil,{495,27}}}]}],
        [],
        [{debug_line,496,145},
         {tuple,{496,5},[{atom,{496,6},warning},{var,{496,14},'Ws'}]}]},
       {clause,
        {497,8},
        [{tuple,
          {497,8},
          [{atom,{497,9},ok},{var,{497,12},'Mod'},{nil,{497,16}}]}],
        [],
        [{debug_line,498,146},{nil,{498,5}}]},
       {clause,
        {499,8},
        [{match,
          {499,8},
          {tuple,
           {499,8},
           [{atom,{499,9},error},
            {cons,
             {499,15},
             {tuple,{499,16},[{var,{499,17},'XFile'},{var,{499,23},'Es'}]},
             {nil,{499,26}}},
            {var,{499,28},'Ws'}]},
          {var,{499,34},'_ZZ'}}],
        [[{call,
           {499,43},
           {remote,{499,43},{atom,{499,43},erlang},{atom,{499,43},is_list}},
           [{var,{499,51},'XFile'}]}]],
        [{debug_line,500,147},
         {call,
          {500,19},
          {atom,{500,19},print_diagnostics},
          [{var,{500,37},'Es'},{var,{500,41},'Test'}]},
         {debug_line,501,148},
         {tuple,
          {501,5},
          [{atom,{501,6},error},{var,{501,12},'Es'},{var,{501,15},'Ws'}]}]},
       {clause,
        {502,8},
        [{match,
          {502,8},
          {tuple,
           {502,8},
           [{atom,{502,9},error},
            {cons,
             {502,15},
             {tuple,{502,16},[{var,{502,17},'XFile'},{var,{502,23},'Es1'}]},
             {cons,
              {502,28},
              {tuple,{502,28},[{var,{502,29},'XFile'},{var,{502,35},'Es2'}]},
              {nil,{502,39}}}},
            {var,{502,41},'Ws'}]},
          {var,{502,47},'_ZZ'}}],
        [[{call,
           {503,8},
           {remote,{503,8},{atom,{503,8},erlang},{atom,{503,8},is_list}},
           [{var,{503,16},'XFile'}]}]],
        [{debug_line,504,149},
         {match,
          {504,19},
          {var,{504,19},'Es'},
          {op,{504,28},'++',{var,{504,24},'Es1'},{var,{504,31},'Es2'}}},
         {debug_line,505,150},
         {call,
          {505,19},
          {atom,{505,19},print_diagnostics},
          [{var,{505,37},'Es'},{var,{505,41},'Test'}]},
         {debug_line,506,151},
         {tuple,
          {506,5},
          [{atom,{506,6},error},{var,{506,12},'Es'},{var,{506,15},'Ws'}]}]},
       {clause,
        {507,8},
        [{match,
          {507,8},
          {tuple,
           {507,8},
           [{atom,{507,9},error},
            {var,{507,15},'Es'},
            {cons,
             {507,18},
             {tuple,{507,19},[{var,{507,20},'_File'},{var,{507,26},'Ws'}]},
             {nil,{507,29}}}]},
          {var,{507,34},'_ZZ'}}],
        [],
        [{debug_line,508,152},
         {call,
          {508,19},
          {atom,{508,19},print_diagnostics},
          [{block,0,
            [{op,{508,40},'++',{var,{508,37},'Es'},{var,{508,43},'Ws'}}]},
           {var,{508,47},'Test'}]},
         {debug_line,509,153},
         {tuple,
          {509,5},
          [{atom,{509,6},error},{var,{509,12},'Es'},{var,{509,15},'Ws'}]}]}]}},
    {debug_line,511,154},
    {call,
     {511,5},
     {remote,{511,9},{atom,{511,5},file},{atom,{511,10},delete}},
     [{var,{511,17},'File'}]},
    {debug_line,512,155},
    {var,{512,5},'Res'}]}]}.
{function,
 {514,1},
 print_diagnostics,2,
 [{clause,
   {514,1},
   [{var,{514,1},'_'},{var,{514,1},'_'}],
   [[{call,
      {514,1},
      {remote,{514,1},{atom,{514,1},fake},{atom,{514,1},is_beam_bif_info}},
      []}]],
   [{debug_line,514,156},{atom,{514,1},ignore}]},
  {clause,
   {514,1},
   [{var,{514,19},'Warnings'},{var,{514,29},'Source'}],
   [],
   [{debug_line,515,157},
    {'case',
     {515,5},
     {call,
      {515,10},
      {remote,{515,16},{atom,{515,10},binary},{atom,{515,17},match}},
      [{var,{515,23},'Source'},
       {block,0,
        [{bin,
          {515,31},
          [{bin_element,
            {515,33},
            {string,{515,33},"-file("},
            default,default}]}]}]},
     [{clause,
       {516,9},
       [{atom,{516,9},nomatch}],
       [],
       [{debug_line,517,158},
        {match,
         {517,13},
         {var,{517,13},'Lines'},
         {call,
          {517,21},
          {remote,{517,27},{atom,{517,21},binary},{atom,{517,28},split}},
          [{var,{517,34},'Source'},
           {block,0,
            [{bin,
              {517,42},
              [{bin_element,
                {517,44},
                {string,{517,44},"\n"},
                default,default}]}]},
           {block,0,
            [{cons,{517,52},{atom,{517,53},global},{nil,{517,59}}}]}]}},
        {debug_line,518,159},
        {match,
         {518,13},
         {var,{518,13},'Cs'},
         {lc,
          {518,18},
          {block,0,
           [{call,
             {518,19},
             {atom,{518,19},print_diagnostic},
             [{var,{518,36},'W'},{var,{518,39},'Lines'}]}]},
          [{block,0,[{atom,{518,54},true}]},
           {generate,{518,51},{var,{518,49},'W'},{var,{518,54},'Warnings'}}]}},
        {debug_line,519,160},
        {call,
         {519,13},
         {remote,{519,15},{atom,{519,13},io},{atom,{519,16},put_chars}},
         [{var,{519,26},'Cs'}]}]},
      {clause,
       {520,9},
       [{var,{520,9},'_'}],
       [],
       [{debug_line,523,161},{atom,{523,13},ok}]}]}]}]}.
{function,
 {526,1},
 print_diagnostic,2,
 [{clause,
   {526,1},
   [{var,{526,1},'_'},{var,{526,1},'_'}],
   [[{call,
      {526,1},
      {remote,{526,1},{atom,{526,1},fake},{atom,{526,1},is_beam_bif_info}},
      []}]],
   [{debug_line,526,162},{atom,{526,1},ignore}]},
  {clause,
   {526,1},
   [{tuple,
     {526,18},
     [{tuple,{526,19},[{var,{526,20},'LineNum'},{var,{526,28},'Column'}]},
      {var,{526,36},'Mod'},
      {var,{526,40},'Data'}]},
    {var,{526,47},'Lines'}],
   [],
   [{debug_line,527,163},
    {match,
     {527,5},
     {var,{527,5},'Line0'},
     {call,
      {527,13},
      {remote,{527,18},{atom,{527,13},lists},{atom,{527,19},nth}},
      [{var,{527,23},'LineNum'},{var,{527,32},'Lines'}]}},
    {debug_line,528,164},
    {match,
     {528,5},
     {bin,
      {528,5},
      [{bin_element,
        {528,7},
        {var,{528,7},'Line1'},
        {op,{528,20},'-',{var,{528,14},'Column'},{integer,{528,21},1}},
        [binary]},
       {bin_element,{528,31},{var,{528,31},'_'},default,[binary]}]},
     {var,{528,44},'Line0'}},
    {debug_line,529,165},
    {match,
     {529,5},
     {var,{529,5},'Spaces'},
     {call,
      {529,14},
      {remote,{529,16},{atom,{529,14},re},{atom,{529,17},replace}},
      [{var,{529,25},'Line1'},
       {block,0,
        [{bin,
          {529,32},
          [{bin_element,
            {529,34},
            {string,{529,34},"[^\t]"},
            default,default}]}]},
       {block,0,
        [{bin,
          {529,45},
          [{bin_element,{529,47},{string,{529,47}," "},default,default}]}]},
       {block,0,[{cons,{529,54},{atom,{529,55},global},{nil,{529,61}}}]}]}},
    {debug_line,530,166},
    {match,
     {530,5},
     {var,{530,5},'CaretLine'},
     {cons,
      {530,17},
      {var,{530,18},'Spaces'},
      {cons,{530,25},{string,{530,25},"^"},{nil,{530,28}}}}},
    {debug_line,531,167},
    {cons,
     {531,5},
     {call,
      {531,6},
      {remote,{531,12},{atom,{531,6},io_lib},{atom,{531,13},format}},
      [{block,0,[{string,{531,20},"~p:~p: ~ts\n"}]},
       {block,0,
        [{cons,
          {531,36},
          {var,{531,37},'LineNum'},
          {cons,
           {531,45},
           {var,{531,45},'Column'},
           {cons,
            {531,52},
            {call,
             {531,52},
             {remote,
              {531,55},
              {var,{531,52},'Mod'},
              {atom,{531,56},format_error}},
             [{var,{531,69},'Data'}]},
            {nil,{531,74}}}}}]}]},
     {cons,
      {532,6},
      {var,{532,6},'Line0'},
      {cons,
       {532,13},
       {string,{532,13},"\n"},
       {cons,
        {533,6},
        {var,{533,6},'CaretLine'},
        {cons,{533,17},{string,{533,17},"\n\n"},{nil,{533,23}}}}}}}]},
  {clause,
   {534,1},
   [{var,{534,18},'_'},{var,{534,21},'_'}],
   [],
   [{debug_line,535,168},{nil,{535,5}}]}]}.
{function,{537,1},
          fail,0,
          [{clause,{537,1},
                   [],
                   [[{call,{537,1},
                           {remote,{537,1},
                                   {atom,{537,1},fake},
                                   {atom,{537,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,537,169},{atom,{537,1},ignore}]},
           {clause,{537,1},
                   [],[],
                   [{debug_line,538,170},
                    {call,{538,5},
                          {remote,{538,7},
                                  {atom,{538,5},ct},
                                  {atom,{538,8},fail}},
                          [{atom,{538,13},failed}]}]}]}.
{eof,{539,1}}.
