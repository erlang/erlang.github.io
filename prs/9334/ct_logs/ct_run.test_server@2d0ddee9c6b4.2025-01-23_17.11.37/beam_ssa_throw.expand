{attribute,{1,1},file,{"beam_ssa_throw.erl",1}}.
{attribute,{31,2},module,beam_ssa_throw}.
{attribute,{34,2},export,[{module,2}]}.
{attribute,{36,2},import,{lists,[{foldl,3}]}}.
{attribute,{1,1},file,{"beam_ssa.hrl",1}}.
{attribute,
    {21,2},
    record,
    {b_module,
        [{typed_record_field,
             {record_field,{21,20},{atom,{21,20},anno},{map,{21,25},[]}},
             {remote_type,
                 {21,32},
                 [{atom,{21,32},beam_ssa},{atom,{21,41},anno},[]]}},
         {typed_record_field,
             {record_field,{22,20},{atom,{22,20},name}},
             {type,{22,28},module,[]}},
         {typed_record_field,
             {record_field,{23,20},{atom,{23,20},exports}},
             {type,
                 {23,31},
                 list,
                 [{type,
                      {23,32},
                      tuple,
                      [{type,{23,33},atom,[]},{type,{23,40},arity,[]}]}]}},
         {typed_record_field,
             {record_field,{24,20},{atom,{24,20},attributes}},
             {type,{24,34},list,[]}},
         {typed_record_field,
             {record_field,{25,20},{atom,{25,20},body}},
             {type,
                 {25,28},
                 list,
                 [{remote_type,
                      {25,29},
                      [{atom,{25,29},beam_ssa},
                       {atom,{25,38},b_function},
                       []]}]}}]}}.
{attribute,
    {26,2},
    record,
    {b_function,
        [{typed_record_field,
             {record_field,{26,22},{atom,{26,22},anno},{map,{26,27},[]}},
             {remote_type,
                 {26,34},
                 [{atom,{26,34},beam_ssa},{atom,{26,43},anno},[]]}},
         {typed_record_field,
             {record_field,{27,22},{atom,{27,22},args}},
             {type,
                 {27,30},
                 list,
                 [{remote_type,
                      {27,31},
                      [{atom,{27,31},beam_ssa},{atom,{27,40},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{28,22},{atom,{28,22},bs}},
             {type,
                 {28,28},
                 map,
                 [{type,
                      {28,46},
                      map_field_exact,
                      [{remote_type,
                           {28,30},
                           [{atom,{28,30},beam_ssa},{atom,{28,39},label},[]]},
                       {remote_type,
                           {28,48},
                           [{atom,{28,48},beam_ssa},
                            {atom,{28,57},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{29,22},{atom,{29,22},cnt}},
             {remote_type,
                 {29,29},
                 [{atom,{29,29},beam_ssa},{atom,{29,38},label},[]]}}]}}.
{attribute,
    {31,2},
    record,
    {b_blk,
        [{typed_record_field,
             {record_field,{31,17},{atom,{31,17},anno},{map,{31,22},[]}},
             {remote_type,
                 {31,29},
                 [{atom,{31,29},beam_ssa},{atom,{31,38},anno},[]]}},
         {typed_record_field,
             {record_field,{32,17},{atom,{32,17},is}},
             {type,
                 {32,23},
                 list,
                 [{remote_type,
                      {32,24},
                      [{atom,{32,24},beam_ssa},{atom,{32,33},b_set},[]]}]}},
         {typed_record_field,
             {record_field,{33,17},{atom,{33,17},last}},
             {remote_type,
                 {33,25},
                 [{atom,{33,25},beam_ssa},{atom,{33,34},terminator},[]]}}]}}.
{attribute,
    {34,2},
    record,
    {b_set,
        [{typed_record_field,
             {record_field,{34,17},{atom,{34,17},anno},{map,{34,22},[]}},
             {remote_type,
                 {34,29},
                 [{atom,{34,29},beam_ssa},{atom,{34,38},anno},[]]}},
         {typed_record_field,
             {record_field,{35,17},{atom,{35,17},dst},{atom,{35,21},none}},
             {type,
                 {35,29},
                 union,
                 [{atom,{35,29},none},
                  {remote_type,
                      {35,36},
                      [{atom,{35,36},beam_ssa},{atom,{35,45},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{36,17},{atom,{36,17},op}},
             {remote_type,
                 {36,23},
                 [{atom,{36,23},beam_ssa},{atom,{36,32},op},[]]}},
         {typed_record_field,
             {record_field,{37,17},{atom,{37,17},args},{nil,{37,22}}},
             {type,
                 {37,28},
                 list,
                 [{remote_type,
                      {37,29},
                      [{atom,{37,29},beam_ssa},
                       {atom,{37,38},argument},
                       []]}]}}]}}.
{attribute,
    {40,2},
    record,
    {b_ret,
        [{typed_record_field,
             {record_field,{40,17},{atom,{40,17},anno},{map,{40,22},[]}},
             {remote_type,
                 {40,29},
                 [{atom,{40,29},beam_ssa},{atom,{40,38},anno},[]]}},
         {typed_record_field,
             {record_field,{41,17},{atom,{41,17},arg}},
             {remote_type,
                 {41,24},
                 [{atom,{41,24},beam_ssa},{atom,{41,33},value},[]]}}]}}.
{attribute,
    {43,2},
    record,
    {b_br,
        [{record_field,{43,16},{atom,{43,16},anno},{map,{43,21},[]}},
         {typed_record_field,
             {record_field,{44,16},{atom,{44,16},bool}},
             {remote_type,
                 {44,24},
                 [{atom,{44,24},beam_ssa},{atom,{44,33},value},[]]}},
         {typed_record_field,
             {record_field,{45,16},{atom,{45,16},succ}},
             {remote_type,
                 {45,24},
                 [{atom,{45,24},beam_ssa},{atom,{45,33},label},[]]}},
         {typed_record_field,
             {record_field,{46,16},{atom,{46,16},fail}},
             {remote_type,
                 {46,24},
                 [{atom,{46,24},beam_ssa},{atom,{46,33},label},[]]}}]}}.
{attribute,
    {48,2},
    record,
    {b_switch,
        [{typed_record_field,
             {record_field,{48,20},{atom,{48,20},anno},{map,{48,25},[]}},
             {remote_type,
                 {48,32},
                 [{atom,{48,32},beam_ssa},{atom,{48,41},anno},[]]}},
         {typed_record_field,
             {record_field,{49,20},{atom,{49,20},arg}},
             {remote_type,
                 {49,27},
                 [{atom,{49,27},beam_ssa},{atom,{49,36},value},[]]}},
         {typed_record_field,
             {record_field,{50,20},{atom,{50,20},fail}},
             {remote_type,
                 {50,28},
                 [{atom,{50,28},beam_ssa},{atom,{50,37},label},[]]}},
         {typed_record_field,
             {record_field,{51,20},{atom,{51,20},list}},
             {type,
                 {51,28},
                 list,
                 [{type,
                      {51,29},
                      tuple,
                      [{remote_type,
                           {51,30},
                           [{atom,{51,30},beam_ssa},
                            {atom,{51,39},b_literal},
                            []]},
                       {remote_type,
                           {51,51},
                           [{atom,{51,51},beam_ssa},
                            {atom,{51,60},label},
                            []]}]}]}}]}}.
{attribute,
    {54,2},
    record,
    {b_var,
        [{typed_record_field,
             {record_field,{54,17},{atom,{54,17},name}},
             {remote_type,
                 {54,25},
                 [{atom,{54,25},beam_ssa},{atom,{54,34},var_name},[]]}}]}}.
{attribute,
    {56,2},
    record,
    {b_literal,
        [{typed_record_field,
             {record_field,{56,21},{atom,{56,21},val}},
             {remote_type,
                 {56,28},
                 [{atom,{56,28},beam_ssa},
                  {atom,{56,37},literal_value},
                  []]}}]}}.
{attribute,
    {58,2},
    record,
    {b_remote,
        [{typed_record_field,
             {record_field,{58,20},{atom,{58,20},mod}},
             {remote_type,
                 {58,29},
                 [{atom,{58,29},beam_ssa},{atom,{58,38},value},[]]}},
         {typed_record_field,
             {record_field,{59,20},{atom,{59,20},name}},
             {remote_type,
                 {59,29},
                 [{atom,{59,29},beam_ssa},{atom,{59,38},value},[]]}},
         {typed_record_field,
             {record_field,{60,20},{atom,{60,20},arity}},
             {type,{60,29},non_neg_integer,[]}}]}}.
{attribute,
    {62,2},
    record,
    {b_local,
        [{typed_record_field,
             {record_field,{62,19},{atom,{62,19},name}},
             {remote_type,
                 {62,28},
                 [{atom,{62,28},beam_ssa},{atom,{62,37},b_literal},[]]}},
         {typed_record_field,
             {record_field,{63,19},{atom,{63,19},arity}},
             {type,{63,28},non_neg_integer,[]}}]}}.
{attribute,{39,1},file,{"beam_ssa_throw.erl",39}}.
{attribute,{1,1},file,{"beam_types.hrl",1}}.
{attribute,{91,2},
           type,
           {float_range,{type,{91,24},
                              union,
                              [{atom,{91,24},any},
                               {type,{91,32},
                                     tuple,
                                     [{atom,{91,33},'-inf'},
                                      {type,{91,40},float,[]}]},
                               {type,{91,51},
                                     tuple,
                                     [{type,{91,52},float,[]},
                                      {atom,{91,60},'+inf'}]}]},
                        []}}.
{attribute,
    {93,2},
    record,
    {t_atom,
        [{typed_record_field,
             {record_field,{93,18},{atom,{93,18},elements},{atom,{93,27},any}},
             {type,
                 {93,34},
                 union,
                 [{atom,{93,34},any},
                  {remote_type,
                      {93,42},
                      [{atom,{93,42},ordsets},
                       {atom,{93,50},ordset},
                       [{type,{93,57},atom,[]}]]}]}}]}}.
{attribute,
    {94,2},
    record,
    {t_bitstring,
        [{typed_record_field,
             {record_field,
                 {94,23},
                 {atom,{94,23},size_unit},
                 {integer,{94,33},1}},
             {type,{94,38},pos_integer,[]}},
         {typed_record_field,
             {record_field,
                 {99,23},
                 {atom,{99,23},appendable},
                 {atom,{99,34},false}},
             {type,{99,43},boolean,[]}}]}}.
{attribute,
    {100,2},
    record,
    {t_bs_context,
        [{typed_record_field,
             {record_field,
                 {100,24},
                 {atom,{100,24},tail_unit},
                 {integer,{100,34},1}},
             {type,{100,39},pos_integer,[]}}]}}.
{attribute,
    {101,2},
    record,
    {t_bs_matchable,
        [{typed_record_field,
             {record_field,
                 {101,26},
                 {atom,{101,26},tail_unit},
                 {integer,{101,36},1}},
             {type,{101,41},pos_integer,[]}}]}}.
{attribute,
    {102,2},
    record,
    {t_float,
        [{typed_record_field,
             {record_field,
                 {102,19},
                 {atom,{102,19},elements},
                 {atom,{102,28},any}},
             {user_type,{102,35},float_range,[]}}]}}.
{attribute,
    {103,2},
    record,
    {t_fun,
        [{typed_record_field,
             {record_field,{103,17},{atom,{103,17},arity},{atom,{103,23},any}},
             {type,
                 {103,30},
                 union,
                 [{type,{103,30},arity,[]},{atom,{103,40},any}]}},
         {typed_record_field,
             {record_field,
                 {104,17},
                 {atom,{104,17},target},
                 {atom,{104,24},any}},
             {type,
                 {104,31},
                 union,
                 [{type,
                      {104,31},
                      tuple,
                      [{type,{104,32},atom,[]},
                       {type,{104,40},non_neg_integer,[]}]},
                  {atom,{104,61},any}]}},
         {typed_record_field,
             {record_field,{105,17},{atom,{105,17},type},{atom,{105,22},any}},
             {user_type,{105,29},type,[]}}]}}.
{attribute,
    {106,2},
    record,
    {t_integer,
        [{typed_record_field,
             {record_field,
                 {106,21},
                 {atom,{106,21},elements},
                 {atom,{106,30},any}},
             {type,
                 {106,37},
                 union,
                 [{atom,{106,37},any},
                  {remote_type,
                      {106,45},
                      [{atom,{106,45},beam_bounds},
                       {atom,{106,57},range},
                       []]}]}}]}}.
{attribute,
    {107,2},
    record,
    {t_number,
        [{typed_record_field,
             {record_field,
                 {107,20},
                 {atom,{107,20},elements},
                 {atom,{107,29},any}},
             {type,
                 {107,36},
                 union,
                 [{atom,{107,36},any},
                  {remote_type,
                      {107,44},
                      [{atom,{107,44},beam_bounds},
                       {atom,{107,56},range},
                       []]}]}}]}}.
{attribute,
    {113,2},
    record,
    {t_map,
        [{typed_record_field,
             {record_field,
                 {113,17},
                 {atom,{113,17},super_key},
                 {atom,{113,27},any}},
             {user_type,{113,34},type,[]}},
         {typed_record_field,
             {record_field,
                 {114,17},
                 {atom,{114,17},super_value},
                 {atom,{114,29},any}},
             {user_type,{114,36},type,[]}}]}}.
{attribute,
    {122,2},
    record,
    {t_cons,
        [{typed_record_field,
             {record_field,{122,18},{atom,{122,18},type},{atom,{122,23},any}},
             {user_type,{122,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {122,38},
                 {atom,{122,38},terminator},
                 {atom,{122,49},any}},
             {user_type,{122,56},type,[]}}]}}.
{attribute,
    {123,2},
    record,
    {t_list,
        [{typed_record_field,
             {record_field,{123,18},{atom,{123,18},type},{atom,{123,23},any}},
             {user_type,{123,30},type,[]}},
         {typed_record_field,
             {record_field,
                 {123,38},
                 {atom,{123,38},terminator},
                 {atom,{123,49},any}},
             {user_type,{123,56},type,[]}}]}}.
{attribute,
    {125,2},
    record,
    {t_tuple,
        [{typed_record_field,
             {record_field,{125,19},{atom,{125,19},size},{integer,{125,24},0}},
             {type,{125,29},integer,[]}},
         {typed_record_field,
             {record_field,
                 {126,19},
                 {atom,{126,19},exact},
                 {atom,{126,25},false}},
             {type,{126,34},boolean,[]}},
         {typed_record_field,
             {record_field,
                 {127,19},
                 {atom,{127,19},elements},
                 {map,{127,28},[]}},
             {user_type,{127,35},tuple_elements,[]}}]}}.
{attribute,
    {146,2},
    type,
    {tuple_elements,
        {type,
            {146,27},
            map,
            [{type,
                 {146,51},
                 map_field_assoc,
                 [{ann_type,
                      {146,30},
                      [{var,{146,30},'Key'},{type,{146,37},pos_integer,[]}]},
                  {user_type,{146,54},type,[]}]}]},
        []}}.
{attribute,{148,2},
           type,
           {normal_type,{type,{148,24},
                              union,
                              [{atom,{148,24},any},
                               {atom,{148,32},none},
                               {type,{149,24},
                                     record,
                                     [{atom,{149,25},t_number}]},
                               {type,{149,38},
                                     record,
                                     [{atom,{149,39},t_float}]},
                               {type,{149,51},
                                     record,
                                     [{atom,{149,52},t_integer}]},
                               {type,{150,24},record,[{atom,{150,25},t_atom}]},
                               {type,{151,24},
                                     record,
                                     [{atom,{151,25},t_bitstring}]},
                               {type,{151,41},
                                     record,
                                     [{atom,{151,42},t_bs_context}]},
                               {type,{151,59},
                                     record,
                                     [{atom,{151,60},t_bs_matchable}]},
                               {type,{152,24},record,[{atom,{152,25},t_fun}]},
                               {type,{153,24},record,[{atom,{153,25},t_list}]},
                               {type,{153,36},record,[{atom,{153,37},t_cons}]},
                               {atom,{153,48},nil},
                               {atom,{154,24},other},
                               {type,{155,24},record,[{atom,{155,25},t_map}]},
                               {atom,{156,24},identifier},
                               {atom,{157,24},pid},
                               {atom,{158,24},port},
                               {atom,{159,24},reference},
                               {type,{160,24},
                                     record,
                                     [{atom,{160,25},t_tuple}]}]},
                        []}}.
{attribute,{162,2},
           type,
           {other_type,{type,{162,23},
                             union,
                             [{atom,{162,23},none},
                              {type,{162,32},record,[{atom,{162,33},t_fun}]},
                              {type,{162,43},record,[{atom,{162,44},t_map}]},
                              {atom,{163,23},pid},
                              {atom,{163,31},port},
                              {atom,{163,40},reference},
                              {atom,{163,54},identifier},
                              {type,{164,23},
                                    record,
                                    [{atom,{164,24},t_bitstring}]},
                              {type,{164,40},
                                    record,
                                    [{atom,{164,41},t_bs_context}]},
                              {type,{165,23},
                                    record,
                                    [{atom,{165,24},t_bs_matchable}]}]},
                       []}}.
{attribute,
    {167,2},
    type,
    {record_key,
        {type,
            {167,23},
            tuple,
            [{ann_type,
                 {167,24},
                 [{var,{167,24},'Arity'},{type,{167,33},integer,[]}]},
             {ann_type,
                 {167,44},
                 [{var,{167,44},'Tag'},{user_type,{167,51},normal_type,[]}]}]},
        []}}.
{attribute,
    {168,2},
    type,
    {record_set,
        {remote_type,
            {168,23},
            [{atom,{168,23},ordsets},
             {atom,{168,31},ordset},
             [{type,
                  {168,38},
                  tuple,
                  [{user_type,{168,39},record_key,[]},
                   {type,{168,53},record,[{atom,{168,54},t_tuple}]}]}]]},
        []}}.
{attribute,{169,2},
           type,
           {tuple_set,{type,{169,22},
                            union,
                            [{type,{169,22},record,[{atom,{169,23},t_tuple}]},
                             {user_type,{169,35},record_set,[]}]},
                      []}}.
{attribute,
    {173,2},
    record,
    {t_union,
        [{typed_record_field,
             {record_field,{173,19},{atom,{173,19},atom},{atom,{173,24},none}},
             {type,
                 {173,32},
                 union,
                 [{atom,{173,32},none},
                  {type,{173,41},record,[{atom,{173,42},t_atom}]}]}},
         {typed_record_field,
             {record_field,{174,19},{atom,{174,19},list},{atom,{174,24},none}},
             {type,
                 {174,32},
                 union,
                 [{atom,{174,32},none},
                  {type,{174,41},record,[{atom,{174,42},t_list}]},
                  {type,{174,53},record,[{atom,{174,54},t_cons}]},
                  {atom,{174,65},nil}]}},
         {typed_record_field,
             {record_field,
                 {175,19},
                 {atom,{175,19},number},
                 {atom,{175,26},none}},
             {type,
                 {175,34},
                 union,
                 [{atom,{175,34},none},
                  {type,{175,43},record,[{atom,{175,44},t_number}]},
                  {type,{175,57},record,[{atom,{175,58},t_float}]},
                  {type,{175,70},record,[{atom,{175,71},t_integer}]}]}},
         {typed_record_field,
             {record_field,
                 {176,19},
                 {atom,{176,19},tuple_set},
                 {atom,{176,29},none}},
             {type,
                 {176,37},
                 union,
                 [{atom,{176,37},none},{user_type,{176,46},tuple_set,[]}]}},
         {typed_record_field,
             {record_field,
                 {177,19},
                 {atom,{177,19},other},
                 {atom,{177,25},none}},
             {type,
                 {177,33},
                 union,
                 [{atom,{177,33},other},
                  {user_type,{177,43},other_type,[]}]}}]}}.
{attribute,{179,2},
           type,
           {type,{type,{179,17},
                       union,
                       [{type,{179,17},record,[{atom,{179,18},t_union}]},
                        {user_type,{179,30},normal_type,[]}]},
                 []}}.
{attribute,{40,1},file,{"beam_ssa_throw.erl",40}}.
{attribute,
    {41,2},
    type,
    {exception_var,
        {type,
            {41,26},
            union,
            [{atom,{41,26},none},
             {type,{41,33},record,[{atom,{41,34},b_var}]}]},
        []}}.
{attribute,
    {42,2},
    type,
    {exception_vars,
        {type,
            {42,27},
            tuple,
            [{ann_type,
                 {42,28},
                 [{var,{42,28},'Class'},{user_type,{42,37},exception_var,[]}]},
             {ann_type,
                 {43,28},
                 [{var,{43,28},'Reason'},
                  {user_type,{43,38},exception_var,[]}]},
             {ann_type,
                 {44,28},
                 [{var,{44,28},'Stacktrace'},
                  {user_type,{44,42},exception_var,[]}]}]},
        []}}.
{attribute,
    {45,2},
    type,
    {tentative,
        {type,
            {45,22},
            tuple,
            [{atom,{45,23},tentative},
             {ann_type,
                 {46,23},
                 [{var,{46,23},'Start'},
                  {remote_type,
                      {46,32},
                      [{atom,{46,32},beam_ssa},{atom,{46,41},label},[]]}]},
             {ann_type,
                 {47,23},
                 [{var,{47,23},'Vars'},{user_type,{47,31},exception_vars,[]}]},
             {ann_type,
                 {48,23},
                 [{var,{48,23},'Blocks'},
                  {remote_type,
                      {48,33},
                      [{atom,{48,33},beam_ssa},
                       {atom,{48,42},block_map},
                       []]}]}]},
        []}}.
{attribute,{50,2},
           type,
           {handler,{type,{50,20},
                          union,
                          [{user_type,{50,20},tentative,[]},
                           {atom,{50,34},unsuitable},
                           {atom,{50,47},suitable}]},
                    []}}.
{attribute,
    {51,2},
    type,
    {handler_id,
        {type,
            {51,23},
            tuple,
            [{type,{51,24},record,[{atom,{51,25},b_local}]},
             {remote_type,
                 {51,36},
                 [{atom,{51,36},beam_ssa},{atom,{51,45},label},[]]}]},
        []}}.
{attribute,
    {53,2},
    type,
    {suitability,
        {type,
            {53,24},
            union,
            [{type,
                 {53,24},
                 tuple,
                 [{atom,{53,25},tentative},
                  {remote_type,
                      {53,36},
                      [{atom,{53,36},beam_ssa},{atom,{53,45},label},[]]}]},
             {atom,{54,24},unsuitable},
             {atom,{55,24},suitable}]},
        []}}.
{attribute,
    {58,2},
    record,
    {gst,
        [{typed_record_field,
             {record_field,{58,15},{atom,{58,15},tlh_roots}},
             {remote_type,
                 {58,28},
                 [{atom,{58,28},gb_trees},
                  {atom,{58,37},tree},
                  [{type,{58,42},record,[{atom,{58,43},b_local}]},
                   {remote_type,
                       {58,54},
                       [{atom,{58,54},gb_sets},
                        {atom,{58,62},set},
                        [{user_type,{58,66},handler,[]}]]}]]}},
         {typed_record_field,
             {record_field,{59,15},{atom,{59,15},tlh_edges},{map,{59,25},[]}},
             {type,
                 {59,32},
                 map,
                 [{type,
                      {59,46},
                      map_field_assoc,
                      [{type,{59,35},record,[{atom,{59,36},b_local}]},
                       {remote_type,
                           {59,49},
                           [{atom,{59,49},gb_sets},
                            {atom,{59,57},set},
                            [{type,
                                 {59,61},
                                 record,
                                 [{atom,{59,62},b_local}]}]]}]}]}},
         {typed_record_field,
             {record_field,
                 {60,15},
                 {atom,{60,15},throws},
                 {call,
                     {60,22},
                     {remote,{60,26},{atom,{60,22},sets},{atom,{60,27},new}},
                     []}},
             {remote_type,
                 {60,36},
                 [{atom,{60,36},sets},
                  {atom,{60,41},set},
                  [{type,{60,45},record,[{atom,{60,46},b_local}]}]]}}]}}.
{attribute,
    {63,2},
    record,
    {lst,
        [{typed_record_field,
             {record_field,
                 {63,15},
                 {atom,{63,15},suitability},
                 {map,{63,27},[]}},
             {type,
                 {63,34},
                 map,
                 [{type,
                      {63,46},
                      map_field_assoc,
                      [{type,{63,37},record,[{atom,{63,38},b_var}]},
                       {user_type,{63,49},suitability,[]}]}]}},
         {typed_record_field,
             {record_field,{64,15},{atom,{64,15},handlers},{map,{64,24},[]}},
             {type,
                 {64,31},
                 map,
                 [{type,
                      {64,47},
                      map_field_assoc,
                      [{user_type,{64,34},handler_id,[]},
                       {user_type,{64,50},handler,[]}]}]}},
         {typed_record_field,
             {record_field,{65,15},{atom,{65,15},blocks}},
             {remote_type,
                 {65,25},
                 [{atom,{65,25},beam_ssa},{atom,{65,34},block_map},[]]}},
         {typed_record_field,
             {record_field,{66,15},{atom,{66,15},predecessors}},
             {remote_type,
                 {66,31},
                 [{atom,{66,31},beam_ssa},
                  {atom,{66,40},predecessor_map},
                  []]}}]}}.
{attribute,
    {68,2},
    spec,
    {{module,2},
     [{type,
          {68,13},
          'fun',
          [{type,
               {68,13},
               product,
               [{remote_type,
                    {68,14},
                    [{atom,{68,14},beam_ssa},{atom,{68,23},b_module},[]]},
                {type,
                    {68,35},
                    list,
                    [{remote_type,
                         {68,36},
                         [{atom,{68,36},compile},
                          {atom,{68,44},option},
                          []]}]}]},
           {type,
               {69,11},
               tuple,
               [{atom,{69,12},ok},
                {remote_type,
                    {69,17},
                    [{atom,{69,17},beam_ssa},
                     {atom,{69,26},b_module},
                     []]}]}]}]}}.
{function,
 {71,1},
 module,2,
 [{clause,
   {71,1},
   [{var,{71,1},'_'},{var,{71,1},'_'}],
   [[{call,
      {71,1},
      {remote,{71,1},{atom,{71,1},fake},{atom,{71,1},is_beam_bif_info}},
      []}]],
   [{debug_line,71,1},{atom,{71,1},ignore}]},
  {clause,
   {71,1},
   [{match,
     {71,8},
     {tuple,
      {71,8},
      [{atom,{71,8},b_module},
       {var,{71,8},'_'},
       {var,{71,8},'_'},
       {var,{71,8},'_'},
       {var,{71,8},'_'},
       {var,{71,23},'Fs0'}]},
     {var,{71,28},'Module'}},
    {var,{71,36},'_Opts'}],
   [],
   [{debug_line,72,2},
    {'case',
     {72,5},
     {call,{72,10},{atom,{72,10},scan},[{var,{72,15},'Module'}]},
     [{clause,
       {73,9},
       [{tuple,{73,9},[{var,{73,10},'Throws'},{var,{73,18},'TLHs'}]}],
       [],
       [{debug_line,74,3},
        {match,
         {74,13},
         {var,{74,13},'Fs'},
         {call,
          {74,18},
          {atom,{74,18},opt},
          [{var,{74,22},'Fs0'},{var,{74,27},'Throws'},{var,{74,35},'TLHs'}]}},
        {debug_line,75,4},
        {tuple,
         {75,13},
         [{atom,{75,14},ok},
          {block,
           {75,18},
           [{match,{75,18},{var,{75,18},rec0},{var,{75,18},'Module'}},
            {'case',
             {75,34},
             {var,{75,18},rec0},
             [{clause,
               {75,34},
               [{tuple,
                 {75,34},
                 [{atom,{75,34},b_module},
                  {var,{75,34},'_'},
                  {var,{75,34},'_'},
                  {var,{75,34},'_'},
                  {var,{75,34},'_'},
                  {var,{75,34},'_'}]}],
               [],
               [{call,
                 {75,34},
                 {remote,
                  {75,34},
                  {atom,{75,34},erlang},
                  {atom,{75,34},setelement}},
                 [{integer,{75,34},6},
                  {var,{75,18},rec0},
                  {var,{75,39},'Fs'}]}]},
              {clause,
               [{generated,true},{location,{75,34}}],
               [{var,[{generated,true},{location,{75,34}}],'_'}],
               [],
               [{call,
                 [{generated,true},{location,{75,34}}],
                 {remote,
                  [{generated,true},{location,{75,34}}],
                  {atom,[{generated,true},{location,{75,34}}],erlang},
                  {atom,[{generated,true},{location,{75,34}}],error}},
                 [{tuple,
                   [{generated,true},{location,{75,34}}],
                   [{atom,[{generated,true},{location,{75,34}}],badrecord},
                    {var,{75,18},rec0}]}]}]}]}]}]}]},
      {clause,
       {76,9},
       [{atom,{76,9},no_throws}],
       [],
       [{debug_line,77,5},
        {tuple,{77,13},[{atom,{77,14},ok},{var,{77,18},'Module'}]}]}]}]}]}.
{function,
    {82,1},
    scan,1,
    [{clause,
         {82,1},
         [{var,{82,1},'_'}],
         [[{call,
               {82,1},
               {remote,
                   {82,1},
                   {atom,{82,1},fake},
                   {atom,{82,1},is_beam_bif_info}},
               []}]],
         [{debug_line,82,6},{atom,{82,1},ignore}]},
     {clause,
         {82,1},
         [{match,
              {82,6},
              {tuple,
                  {82,6},
                  [{atom,{82,6},b_module},
                   {var,{82,6},'_'},
                   {var,{82,6},'_'},
                   {var,{82,6},'_'},
                   {var,{82,6},'_'},
                   {var,{82,21},'Fs0'}]},
              {var,{82,26},'Module'}}],
         [],
         [{debug_line,83,7},
          {call,
              {83,5},
              {atom,{83,5},scan_1},
              [{var,{83,12},'Fs0'},
               {block,0,
                   [{call,
                        {83,17},
                        {atom,{83,17},init_gst},
                        [{var,{83,26},'Module'}]}]}]}]}]}.
{function,
 {85,1},
 init_gst,1,
 [{clause,
   {85,1},
   [{var,{85,1},'_'}],
   [[{call,
      {85,1},
      {remote,{85,1},{atom,{85,1},fake},{atom,{85,1},is_beam_bif_info}},
      []}]],
   [{debug_line,85,8},{atom,{85,1},ignore}]},
  {clause,
   {85,1},
   [{tuple,
     {85,10},
     [{atom,{85,10},b_module},
      {var,{85,10},'_'},
      {var,{85,10},'_'},
      {var,{85,28},'Exports'},
      {var,{85,10},'_'},
      {var,{85,10},'_'}]}],
   [],
   [{debug_line,88,9},
    {match,
     {88,5},
     {var,{88,5},'Unsuitable'},
     {call,
      {88,18},
      {remote,{88,25},{atom,{88,18},gb_sets},{atom,{88,26},singleton}},
      [{atom,{88,36},unsuitable}]}},
    {debug_line,89,10},
    {match,
     {89,5},
     {var,{89,5},'Roots'},
     {call,
      {89,13},
      {remote,{89,13},{atom,{89,13},lists},{atom,{89,13},foldl}},
      [{block,0,
        [{'fun',
          {89,19},
          {clauses,
           [{clause,
             {89,22},
             [{tuple,{89,23},[{var,{89,24},'Name'},{var,{89,30},'Arity'}]},
              {var,{89,38},'Acc'}],
             [],
             [{debug_line,90,11},
              {match,
               {90,27},
               {var,{90,27},'Id'},
               {tuple,
                {90,32},
                [{atom,{90,32},b_local},
                 {tuple,
                  {90,46},
                  [{atom,{90,46},b_literal},{var,{90,61},'Name'}]},
                 {var,{90,73},'Arity'}]}},
              {debug_line,91,12},
              {call,
               {91,27},
               {remote,{91,35},{atom,{91,27},gb_trees},{atom,{91,36},insert}},
               [{var,{91,43},'Id'},
                {var,{91,47},'Unsuitable'},
                {var,{91,59},'Acc'}]}]}]}}]},
       {block,0,
        [{debug_line,92,13},
         {call,
          {92,24},
          {remote,{92,32},{atom,{92,24},gb_trees},{atom,{92,33},empty}},
          []}]},
       {var,{92,42},'Exports'}]}},
    {debug_line,93,14},
    {tuple,
     {93,5},
     [{atom,{93,5},gst},
      {var,{93,20},'Roots'},
      {map,{93,5},[]},
      {call,
       {93,5},
       {remote,{93,5},{atom,{93,5},sets},{atom,{93,5},new}},
       []}]}]}]}.
{function,
 {95,1},
 scan_1,2,
 [{clause,
   {95,1},
   [{var,{95,1},'_'},{var,{95,1},'_'}],
   [[{call,
      {95,1},
      {remote,{95,1},{atom,{95,1},fake},{atom,{95,1},is_beam_bif_info}},
      []}]],
   [{debug_line,95,15},{atom,{95,1},ignore}]},
  {clause,
   {95,1},
   [{cons,
     {95,8},
     {match,
      {95,9},
      {tuple,
       {95,9},
       [{atom,{95,9},b_function},
        {var,{95,9},'_'},
        {var,{95,9},'_'},
        {var,{95,24},'Blocks'},
        {var,{95,9},'_'}]},
      {var,{95,32},'F'}},
     {var,{95,36},'Fs'}},
    {var,{95,41},'Gst0'}],
   [],
   [{debug_line,96,16},
    {match,
     {96,5},
     {var,{96,5},'Id'},
     {call,{96,10},{atom,{96,10},get_func_id},[{var,{96,22},'F'}]}},
    {debug_line,98,17},
    {match,
     {98,5},
     {var,{98,5},'Preds'},
     {call,
      {98,13},
      {remote,{98,21},{atom,{98,13},beam_ssa},{atom,{98,22},predecessors}},
      [{var,{98,35},'Blocks'}]}},
    {debug_line,99,18},
    {match,
     {99,5},
     {var,{99,5},'Linear'},
     {call,
      {99,14},
      {remote,{99,22},{atom,{99,14},beam_ssa},{atom,{99,23},linearize}},
      [{var,{99,33},'Blocks'}]}},
    {debug_line,101,19},
    {match,
     {101,5},
     {var,{101,5},'Lst'},
     {tuple,
      {101,11},
      [{atom,{101,11},lst},
       {map,{101,11},[]},
       {map,{101,11},[]},
       {var,{101,23},'Blocks'},
       {var,{101,43},'Preds'}]}},
    {debug_line,102,20},
    {match,
     {102,5},
     {tuple,{102,5},[{var,{102,6},'_'},{var,{102,9},'Gst'}]},
     {call,
      {102,16},
      {atom,{102,16},scan_bs},
      [{var,{102,24},'Linear'},
       {var,{102,32},'Id'},
       {var,{102,36},'Lst'},
       {var,{102,41},'Gst0'}]}},
    {debug_line,104,21},
    {call,
     {104,5},
     {atom,{104,5},scan_1},
     [{var,{104,12},'Fs'},{var,{104,16},'Gst'}]}]},
  {clause,
   {105,1},
   [{nil,{105,8}},{var,{105,12},'Gst'}],
   [],
   [{debug_line,106,22},
    {match,
     {106,5},
     {tuple,
      {106,5},
      [{atom,{106,5},gst},
       {var,{106,20},'Roots'},
       {var,{107,20},'Edges'},
       {var,{108,17},'Throws'}]},
     {var,{108,27},'Gst'}},
    {debug_line,110,23},
    {'case',
     {110,5},
     {call,
      {110,10},
      {remote,{110,14},{atom,{110,10},sets},{atom,{110,15},is_empty}},
      [{var,{110,24},'Throws'}]},
     [{clause,
       {111,9},
       [{atom,{111,9},true}],
       [],
       [{debug_line,112,24},{atom,{112,13},no_throws}]},
      {clause,
       {113,9},
       [{atom,{113,9},false}],
       [],
       [{debug_line,114,25},
        {match,
         {114,13},
         {var,{114,13},'TLHs'},
         {call,
          {114,20},
          {atom,{114,20},propagate_tlhs},
          [{block,0,
            [{call,
              {114,35},
              {remote,
               {114,43},
               {atom,{114,35},gb_trees},
               {atom,{114,44},to_list}},
              [{var,{114,52},'Roots'}]}]},
           {var,{114,60},'Edges'},
           {block,0,[{map,{114,67},[]}]}]}},
        {debug_line,115,26},
        {tuple,
         {115,13},
         [{var,{115,14},'Throws'},{var,{115,22},'TLHs'}]}]}]}]}]}.
{function,
 {120,1},
 propagate_tlhs,3,
 [{clause,
   {120,1},
   [{var,{120,1},'_'},{var,{120,1},'_'},{var,{120,1},'_'}],
   [[{call,
      {120,1},
      {remote,{120,1},{atom,{120,1},fake},{atom,{120,1},is_beam_bif_info}},
      []}]],
   [{debug_line,120,27},{atom,{120,1},ignore}]},
  {clause,
   {120,1},
   [{cons,
     {120,16},
     {tuple,{120,17},[{var,{120,18},'Id'},{var,{120,22},'HandlersA'}]},
     {var,{120,35},'Roots'}},
    {var,{120,43},'Edges'},
    {var,{120,50},'Acc0'}],
   [],
   [{debug_line,121,28},
    {match,
     {121,5},
     {var,{121,5},'HandlersB'},
     {call,
      {121,17},
      {remote,{121,21},{atom,{121,17},maps},{atom,{121,22},get}},
      [{var,{121,26},'Id'},
       {var,{121,30},'Acc0'},
       {block,0,
        [{call,
          {121,36},
          {remote,{121,43},{atom,{121,36},gb_sets},{atom,{121,44},empty}},
          []}]}]}},
    {debug_line,122,29},
    {'case',
     {122,5},
     {call,
      {122,10},
      {remote,{122,17},{atom,{122,10},gb_sets},{atom,{122,18},is_subset}},
      [{var,{122,28},'HandlersA'},{var,{122,39},'HandlersB'}]},
     [{clause,
       {123,9},
       [{atom,{123,9},true}],
       [],
       [{debug_line,124,30},
        {call,
         {124,13},
         {atom,{124,13},propagate_tlhs},
         [{var,{124,28},'Roots'},
          {var,{124,35},'Edges'},
          {var,{124,42},'Acc0'}]}]},
      {clause,
       {125,9},
       [{atom,{125,9},false}],
       [],
       [{debug_line,126,31},
        {match,
         {126,13},
         {var,{126,13},'Merged'},
         {call,
          {126,22},
          {remote,{126,29},{atom,{126,22},gb_sets},{atom,{126,30},union}},
          [{var,{126,36},'HandlersA'},{var,{126,47},'HandlersB'}]}},
        {debug_line,127,32},
        {match,
         {127,13},
         {var,{127,13},'Callees'},
         {call,
          {127,23},
          {atom,{127,23},pt_callees},
          [{var,{127,34},'Id'},
           {var,{127,38},'Merged'},
           {var,{127,46},'Edges'}]}},
        {debug_line,129,33},
        {match,
         {129,13},
         {var,{129,13},'Acc'},
         {call,
          {129,19},
          {atom,{129,19},propagate_tlhs},
          [{var,{129,34},'Callees'},
           {var,{129,43},'Edges'},
           {block,0,
            [{map,
              {129,54},
              {var,{129,50},'Acc0'},
              [{map_field_assoc,
                {129,60},
                {var,{129,57},'Id'},
                {var,{129,63},'Merged'}}]}]}]}},
        {debug_line,130,34},
        {call,
         {130,13},
         {atom,{130,13},propagate_tlhs},
         [{var,{130,28},'Roots'},
          {var,{130,35},'Edges'},
          {var,{130,42},'Acc'}]}]}]}]},
  {clause,
   {132,1},
   [{nil,{132,16}},{var,{132,20},'_Edges'},{var,{132,28},'Acc'}],
   [],
   [{debug_line,133,35},{var,{133,5},'Acc'}]}]}.
{function,
 {135,1},
 pt_callees,3,
 [{clause,
   {135,1},
   [{var,{135,1},'_'},{var,{135,1},'_'},{var,{135,1},'_'}],
   [[{call,
      {135,1},
      {remote,{135,1},{atom,{135,1},fake},{atom,{135,1},is_beam_bif_info}},
      []}]],
   [{debug_line,135,36},{atom,{135,1},ignore}]},
  {clause,
   {135,1},
   [{var,{135,12},'Id'},{var,{135,16},'Merged'},{var,{135,24},'Edges'}],
   [],
   [{debug_line,136,37},
    {'case',
     {136,5},
     {var,{136,10},'Edges'},
     [{clause,
       {137,9},
       [{map,
         {137,9},
         [{map_field_exact,
           {137,15},
           {var,{137,12},'Id'},
           {var,{137,18},'Callees'}}]}],
       [],
       [{debug_line,138,38},
        {call,
         {138,13},
         {remote,{138,20},{atom,{138,13},gb_sets},{atom,{138,21},fold}},
         [{block,0,
           [{'fun',
             {138,26},
             {clauses,
              [{clause,
                {138,29},
                [{var,{138,30},'Callee'},{var,{138,38},'Acc'}],
                [],
                [{debug_line,139,39},
                 {cons,
                  {139,34},
                  {tuple,
                   {139,35},
                   [{var,{139,36},'Callee'},{var,{139,44},'Merged'}]},
                  {var,{139,54},'Acc'}}]}]}}]},
          {nil,{140,31}},
          {var,{140,35},'Callees'}]}]},
      {clause,
       {141,9},
       [{map,{141,9},[]}],
       [],
       [{debug_line,142,40},{nil,{142,13}}]}]}]}]}.
{function,
    {148,1},
    scan_bs,4,
    [{clause,
         {148,1},
         [{var,{148,1},'_'},
          {var,{148,1},'_'},
          {var,{148,1},'_'},
          {var,{148,1},'_'}],
         [[{call,
               {148,1},
               {remote,
                   {148,1},
                   {atom,{148,1},fake},
                   {atom,{148,1},is_beam_bif_info}},
               []}]],
         [{debug_line,148,41},{atom,{148,1},ignore}]},
     {clause,
         {148,1},
         [{cons,
              {148,9},
              {tuple,{148,10},[{integer,{148,12},1},{var,{148,29},'_'}]},
              {var,{148,34},'Bs'}},
          {var,{148,39},'Id'},
          {var,{148,43},'Lst'},
          {var,{148,48},'Gst'}],
         [],
         [{debug_line,149,42},
          {call,
              {149,5},
              {atom,{149,5},scan_bs},
              [{var,{149,13},'Bs'},
               {var,{149,17},'Id'},
               {var,{149,21},'Lst'},
               {var,{149,26},'Gst'}]}]},
     {clause,
         {150,1},
         [{cons,
              {150,9},
              {tuple,
                  {150,10},
                  [{var,{150,11},'Lbl'},
                   {tuple,
                       {150,16},
                       [{atom,{150,16},b_blk},
                        {var,{150,16},'_'},
                        {var,{150,36},'Is'},
                        {var,{150,28},'Last'}]}]},
              {var,{150,43},'Bs'}},
          {var,{150,48},'Id'},
          {var,{150,52},'Lst0'},
          {var,{150,58},'Gst0'}],
         [],
         [{debug_line,151,43},
          {match,
              {151,5},
              {tuple,{151,5},[{var,{151,6},'Lst'},{var,{151,11},'Gst'}]},
              {call,
                  {151,18},
                  {atom,{151,18},scan_bs},
                  [{var,{151,26},'Bs'},
                   {var,{151,30},'Id'},
                   {var,{151,34},'Lst0'},
                   {var,{151,40},'Gst0'}]}},
          {debug_line,152,44},
          {call,
              {152,5},
              {atom,{152,5},si_is},
              [{var,{152,11},'Is'},
               {var,{152,15},'Id'},
               {var,{152,19},'Lbl'},
               {var,{152,24},'Last'},
               {var,{152,30},'Lst'},
               {var,{152,35},'Gst'}]}]},
     {clause,
         {153,1},
         [{nil,{153,9}},
          {var,{153,13},'_Id'},
          {var,{153,18},'Lst'},
          {var,{153,23},'Gst'}],
         [],
         [{debug_line,154,45},
          {tuple,{154,5},[{var,{154,6},'Lst'},{var,{154,11},'Gst'}]}]}]}.
{function,
 {156,1},
 si_is,6,
 [{clause,
   {156,1},
   [{var,{156,1},'_'},
    {var,{156,1},'_'},
    {var,{156,1},'_'},
    {var,{156,1},'_'},
    {var,{156,1},'_'},
    {var,{156,1},'_'}],
   [[{call,
      {156,1},
      {remote,{156,1},{atom,{156,1},fake},{atom,{156,1},is_beam_bif_info}},
      []}]],
   [{debug_line,156,46},{atom,{156,1},ignore}]},
  {clause,
   {156,1},
   [{cons,
     {156,7},
     {tuple,
      {156,8},
      [{atom,{156,8},b_set},
       {var,{156,8},'_'},
       {var,{156,8},'_'},
       {atom,{156,18},landingpad},
       {cons,
        {156,34},
        {var,{156,35},'_Kind'},
        {cons,{156,42},{var,{156,42},'_Tag'},{nil,{156,46}}}}]},
     {var,{156,51},'Is'}},
    {var,{157,7},'Id'},
    {var,{157,11},'Lbl'},
    {var,{157,16},'Last'},
    {var,{157,22},'Lst'},
    {var,{157,27},'Gst'}],
   [],
   [{debug_line,159,47},
    {match,
     {159,5},
     {var,{159,5},'Vars'},
     {tuple,
      {159,12},
      [{atom,{159,13},none},{atom,{159,19},none},{atom,{159,25},none}]}},
    {debug_line,160,48},
    {call,
     {160,5},
     {atom,{160,5},si_handler_start},
     [{var,{160,22},'Is'},
      {var,{160,26},'Id'},
      {var,{160,30},'Lbl'},
      {var,{160,35},'Last'},
      {var,{160,41},'Vars'},
      {var,{160,47},'Lst'},
      {var,{160,52},'Gst'}]}]},
  {clause,
   {161,1},
   [{cons,
     {161,7},
     {tuple,
      {161,8},
      [{atom,{161,8},b_set},
       {var,{161,8},'_'},
       {var,{161,8},'_'},
       {atom,{161,18},resume},
       {cons,
        {161,30},
        {var,{161,31},'Stacktrace'},
        {cons,{161,43},{var,{161,43},'_Reason'},{nil,{161,50}}}}]},
     {var,{161,55},'Is'}},
    {var,{162,7},'Id'},
    {var,{162,11},'Lbl'},
    {var,{162,16},'Last'},
    {var,{162,22},'Lst'},
    {var,{162,27},'Gst'}],
   [],
   [{debug_line,163,49},
    {call,
     {163,5},
     {atom,{163,5},si_handler_end},
     [{var,{163,20},'Is'},
      {var,{163,24},'Id'},
      {var,{163,28},'Lbl'},
      {var,{163,33},'Last'},
      {var,{163,39},'Stacktrace'},
      {var,{163,51},'Lst'},
      {var,{163,56},'Gst'}]}]},
  {clause,
   {164,1},
   [{cons,
     {164,7},
     {tuple,
      {164,8},
      [{atom,{164,8},b_set},
       {var,{164,8},'_'},
       {var,{164,8},'_'},
       {atom,{164,18},raw_raise},
       {cons,
        {164,33},
        {var,{164,34},'_'},
        {cons,
         {164,36},
         {var,{164,36},'_'},
         {cons,{164,38},{var,{164,38},'Stacktrace'},{nil,{164,48}}}}}]},
     {var,{164,53},'Is'}},
    {var,{165,7},'Id'},
    {var,{165,11},'Lbl'},
    {var,{165,16},'Last'},
    {var,{165,22},'Lst'},
    {var,{165,27},'Gst'}],
   [],
   [{debug_line,166,50},
    {call,
     {166,5},
     {atom,{166,5},si_handler_end},
     [{var,{166,20},'Is'},
      {var,{166,24},'Id'},
      {var,{166,28},'Lbl'},
      {var,{166,33},'Last'},
      {var,{166,39},'Stacktrace'},
      {var,{166,51},'Lst'},
      {var,{166,56},'Gst'}]}]},
  {clause,
   {167,1},
   [{cons,
     {167,7},
     {tuple,
      {167,8},
      [{atom,{167,8},b_set},
       {var,{167,8},'_'},
       {var,{167,8},'_'},
       {atom,{167,18},build_stacktrace},
       {cons,{167,40},{var,{167,41},'Stacktrace'},{nil,{167,51}}}]},
     {var,{167,56},'Is'}},
    {var,{168,7},'Id'},
    {var,{168,11},'Lbl'},
    {var,{168,16},'Last'},
    {var,{168,22},'Lst'},
    {var,{168,27},'Gst'}],
   [],
   [{debug_line,169,51},
    {call,
     {169,5},
     {atom,{169,5},si_handler_end},
     [{var,{169,20},'Is'},
      {var,{169,24},'Id'},
      {var,{169,28},'Lbl'},
      {var,{169,33},'Last'},
      {var,{169,39},'Stacktrace'},
      {var,{169,51},'Lst'},
      {var,{169,56},'Gst'}]}]},
  {clause,
   {170,1},
   [{cons,
     {170,7},
     {tuple,
      {170,8},
      [{atom,{170,8},b_set},
       {var,{170,8},'_'},
       {var,{170,8},'_'},
       {var,{170,18},'MakeFun'},
       {cons,
        {170,31},
        {match,
         {170,32},
         {tuple,
          {170,32},
          [{atom,{170,32},b_local},{var,{170,32},'_'},{var,{170,32},'_'}]},
         {var,{170,43},'Callee'}},
        {var,{170,52},'_'}}]},
     {var,{170,58},'_Is'}},
    {var,{171,7},'_Id'},
    {var,{171,12},'_Lbl'},
    {var,{171,18},'_Last'},
    {var,{171,25},'Lst'},
    {var,{171,30},'Gst'}],
   [[{op,{172,16},'=:=',{var,{172,8},'MakeFun'},{atom,{172,20},make_fun}}],
    [{op,
      {173,16},
      '=:=',
      {var,{173,8},'MakeFun'},
      {atom,{173,20},old_make_fun}}]],
   [{debug_line,174,52},
    {match,
     {174,5},
     {tuple,
      {174,5},
      [{atom,{174,5},gst},
       {var,{174,22},'Roots0'},
       {var,{174,5},'_'},
       {var,{174,5},'_'}]},
     {var,{174,32},'Gst'}},
    {debug_line,178,53},
    {match,
     {178,5},
     {var,{178,5},'Handlers'},
     {'case',
      {178,16},
      {call,
       {178,21},
       {remote,{178,29},{atom,{178,21},gb_trees},{atom,{178,30},lookup}},
       [{var,{178,37},'Callee'},{var,{178,45},'Roots0'}]},
      [{clause,
        {179,21},
        [{tuple,{179,21},[{atom,{179,22},value},{var,{179,29},'Handlers0'}]}],
        [],
        [{debug_line,179,54},
         {call,
          {179,43},
          {remote,{179,50},{atom,{179,43},gb_sets},{atom,{179,51},add}},
          [{atom,{179,55},unsuitable},{var,{179,67},'Handlers0'}]}]},
       {clause,
        {180,21},
        [{atom,{180,21},none}],
        [],
        [{debug_line,180,55},
         {call,
          {180,29},
          {remote,{180,36},{atom,{180,29},gb_sets},{atom,{180,37},singleton}},
          [{atom,{180,47},unsuitable}]}]}]}},
    {debug_line,182,56},
    {match,
     {182,5},
     {var,{182,5},'Roots'},
     {call,
      {182,13},
      {remote,{182,21},{atom,{182,13},gb_trees},{atom,{182,22},enter}},
      [{var,{182,28},'Callee'},
       {var,{182,36},'Handlers'},
       {var,{182,46},'Roots0'}]}},
    {debug_line,184,57},
    {tuple,
     {184,5},
     [{var,{184,6},'Lst'},
      {block,
       {184,11},
       [{match,{184,11},{var,{184,11},rec1},{var,{184,11},'Gst'}},
        {'case',
         {184,19},
         {var,{184,11},rec1},
         [{clause,
           {184,19},
           [{tuple,
             {184,19},
             [{atom,{184,19},gst},
              {var,{184,19},'_'},
              {var,{184,19},'_'},
              {var,{184,19},'_'}]}],
           [],
           [{call,
             {184,19},
             {remote,
              {184,19},
              {atom,{184,19},erlang},
              {atom,{184,19},setelement}},
             [{integer,{184,19},2},
              {var,{184,11},rec1},
              {var,{184,29},'Roots'}]}]},
          {clause,
           [{generated,true},{location,{184,19}}],
           [{var,[{generated,true},{location,{184,19}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{184,19}}],
             {remote,
              [{generated,true},{location,{184,19}}],
              {atom,[{generated,true},{location,{184,19}}],erlang},
              {atom,[{generated,true},{location,{184,19}}],error}},
             [{tuple,
               [{generated,true},{location,{184,19}}],
               [{atom,[{generated,true},{location,{184,19}}],badrecord},
                {var,{184,11},rec1}]}]}]}]}]}]}]},
  {clause,
   {185,1},
   [{cons,
     {185,7},
     {tuple,
      {185,8},
      [{atom,{185,8},b_set},
       {var,{185,8},'_'},
       {var,{186,19},'Dst'},
       {atom,{185,18},call},
       {cons,
        {187,20},
        {tuple,
         {187,21},
         [{atom,{187,21},b_remote},
          {tuple,{187,35},[{atom,{187,35},b_literal},{atom,{187,50},erlang}]},
          {tuple,{188,36},[{atom,{188,36},b_literal},{atom,{188,51},throw}]},
          {integer,{189,37},1}]},
        {cons,{189,41},{var,{189,41},'_Term'},{nil,{189,46}}}}]},
     {cons,
      {190,8},
      {tuple,
       {190,8},
       [{atom,{190,8},b_set},
        {var,{190,8},'_'},
        {var,{190,8},'_'},
        {tuple,{190,18},[{atom,{190,19},succeeded},{atom,{190,29},body}]},
        {cons,{190,40},{var,{190,41},'Dst'},{nil,{190,44}}}]},
      {nil,{190,46}}}},
    {var,{191,7},'Id'},
    {var,{191,11},'_Lbl'},
    {tuple,
     {191,17},
     [{atom,{191,17},b_br},
      {var,{191,17},'_'},
      {var,{191,17},'_'},
      {var,{191,17},'_'},
      {integer,{191,29},1}]},
    {var,{191,47},'Lst'},
    {var,{191,52},'Gst'}],
   [],
   [{debug_line,193,58},
    {match,
     {193,5},
     {tuple,
      {193,5},
      [{atom,{193,5},gst},
       {var,{193,5},'_'},
       {var,{193,5},'_'},
       {var,{193,17},'Throws0'}]},
     {var,{193,28},'Gst'}},
    {debug_line,194,59},
    {match,
     {194,5},
     {var,{194,5},'Throws'},
     {call,
      {194,14},
      {remote,{194,18},{atom,{194,14},sets},{atom,{194,19},add_element}},
      [{var,{194,31},'Id'},{var,{194,35},'Throws0'}]}},
    {debug_line,195,60},
    {tuple,
     {195,5},
     [{var,{195,6},'Lst'},
      {block,
       {195,11},
       [{match,{195,11},{var,{195,11},rec2},{var,{195,11},'Gst'}},
        {'case',
         {195,19},
         {var,{195,11},rec2},
         [{clause,
           {195,19},
           [{tuple,
             {195,19},
             [{atom,{195,19},gst},
              {var,{195,19},'_'},
              {var,{195,19},'_'},
              {var,{195,19},'_'}]}],
           [],
           [{call,
             {195,19},
             {remote,
              {195,19},
              {atom,{195,19},erlang},
              {atom,{195,19},setelement}},
             [{integer,{195,19},4},
              {var,{195,11},rec2},
              {var,{195,26},'Throws'}]}]},
          {clause,
           [{generated,true},{location,{195,19}}],
           [{var,[{generated,true},{location,{195,19}}],'_'}],
           [],
           [{call,
             [{generated,true},{location,{195,19}}],
             {remote,
              [{generated,true},{location,{195,19}}],
              {atom,[{generated,true},{location,{195,19}}],erlang},
              {atom,[{generated,true},{location,{195,19}}],error}},
             [{tuple,
               [{generated,true},{location,{195,19}}],
               [{atom,[{generated,true},{location,{195,19}}],badrecord},
                {var,{195,11},rec2}]}]}]}]}]}]}]},
  {clause,
   {196,1},
   [{cons,
     {196,7},
     {tuple,
      {196,8},
      [{atom,{196,8},b_set},
       {var,{196,8},'_'},
       {var,{196,27},'Dst'},
       {atom,{196,18},call},
       {cons,
        {196,36},
        {match,
         {196,37},
         {tuple,
          {196,37},
          [{atom,{196,37},b_local},{var,{196,37},'_'},{var,{196,37},'_'}]},
         {var,{196,48},'Callee'}},
        {var,{196,57},'_'}}]},
     {cons,
      {197,8},
      {tuple,
       {197,8},
       [{atom,{197,8},b_set},
        {var,{197,8},'_'},
        {var,{197,8},'_'},
        {tuple,{197,18},[{atom,{197,19},succeeded},{atom,{197,29},body}]},
        {cons,{197,40},{var,{197,41},'Dst'},{nil,{197,44}}}]},
      {nil,{197,46}}}},
    {var,{198,7},'Id'},
    {var,{198,11},'_Lbl'},
    {tuple,
     {198,17},
     [{atom,{198,17},b_br},
      {var,{198,17},'_'},
      {var,{198,17},'_'},
      {var,{198,17},'_'},
      {integer,{198,29},1}]},
    {var,{198,47},'Lst'},
    {var,{198,52},'Gst'}],
   [],
   [{debug_line,200,61},
    {tuple,
     {200,5},
     [{var,{200,6},'Lst'},
      {call,
       {200,11},
       {atom,{200,11},inherit_tlh},
       [{var,{200,23},'Id'},{var,{200,27},'Callee'},{var,{200,35},'Gst'}]}]}]},
  {clause,
   {201,1},
   [{cons,
     {201,7},
     {tuple,
      {201,8},
      [{atom,{201,8},b_set},
       {var,{201,8},'_'},
       {var,{201,27},'Dst'},
       {atom,{201,18},call},
       {cons,
        {201,36},
        {match,
         {201,37},
         {tuple,
          {201,37},
          [{atom,{201,37},b_local},{var,{201,37},'_'},{var,{201,37},'_'}]},
         {var,{201,48},'Callee'}},
        {var,{201,57},'_'}}]},
     {cons,
      {202,8},
      {tuple,
       {202,8},
       [{atom,{202,8},b_set},
        {var,{202,8},'_'},
        {var,{202,8},'_'},
        {tuple,{202,18},[{atom,{202,19},succeeded},{atom,{202,29},body}]},
        {cons,{202,40},{var,{202,41},'Dst'},{nil,{202,44}}}]},
      {nil,{202,46}}}},
    {var,{203,7},'Id'},
    {var,{203,11},'_Lbl'},
    {tuple,
     {203,17},
     [{atom,{203,17},b_br},
      {var,{203,17},'_'},
      {var,{203,17},'_'},
      {var,{203,17},'_'},
      {var,{203,28},'Fail'}]},
    {var,{203,35},'Lst'},
    {var,{203,40},'Gst'}],
   [],
   [{debug_line,205,62},
    {match,
     {205,5},
     {var,{205,5},'HandlerId'},
     {tuple,{205,17},[{var,{205,18},'Id'},{var,{205,22},'Fail'}]}},
    {debug_line,206,63},
    {tuple,
     {206,5},
     [{var,{206,6},'Lst'},
      {call,
       {206,11},
       {atom,{206,11},add_tlh},
       [{var,{206,19},'HandlerId'},
        {var,{206,30},'Callee'},
        {var,{206,38},'Lst'},
        {var,{206,43},'Gst'}]}]}]},
  {clause,
   {207,1},
   [{cons,
     {207,7},
     {tuple,
      {207,8},
      [{atom,{207,8},b_set},
       {var,{207,8},'_'},
       {var,{207,8},'_'},
       {var,{207,8},'_'},
       {var,{207,8},'_'}]},
     {var,{207,19},'Is'}},
    {var,{207,24},'Id'},
    {var,{207,28},'Lbl'},
    {var,{207,33},'Last'},
    {var,{207,39},'Lst'},
    {var,{207,44},'Gst'}],
   [],
   [{debug_line,208,64},
    {call,
     {208,5},
     {atom,{208,5},si_is},
     [{var,{208,11},'Is'},
      {var,{208,15},'Id'},
      {var,{208,19},'Lbl'},
      {var,{208,24},'Last'},
      {var,{208,30},'Lst'},
      {var,{208,35},'Gst'}]}]},
  {clause,
   {209,1},
   [{nil,{209,7}},
    {var,{209,11},'_Id'},
    {var,{209,16},'_Lbl'},
    {var,{209,22},'_Last'},
    {var,{209,29},'Lst'},
    {var,{209,34},'Gst'}],
   [],
   [{debug_line,210,65},
    {tuple,{210,5},[{var,{210,6},'Lst'},{var,{210,11},'Gst'}]}]}]}.
{function,
 {214,1},
 si_handler_end,7,
 [{clause,
   {214,1},
   [{var,{214,1},'_'},
    {var,{214,1},'_'},
    {var,{214,1},'_'},
    {var,{214,1},'_'},
    {var,{214,1},'_'},
    {var,{214,1},'_'},
    {var,{214,1},'_'}],
   [[{call,
      {214,1},
      {remote,{214,1},{atom,{214,1},fake},{atom,{214,1},is_beam_bif_info}},
      []}]],
   [{debug_line,214,66},{atom,{214,1},ignore}]},
  {clause,
   {214,1},
   [{var,{214,16},'Is'},
    {var,{214,20},'Id'},
    {var,{214,24},'EndLbl'},
    {var,{214,32},'Last'},
    {var,{214,38},'Stacktrace'},
    {var,{214,50},'Lst0'},
    {var,{214,56},'Gst'}],
   [],
   [{debug_line,215,67},
    {match,
     {215,5},
     {tuple,
      {215,5},
      [{atom,{215,5},lst},
       {var,{215,22},'Suitability0'},
       {var,{215,5},'_'},
       {var,{215,5},'_'},
       {var,{215,5},'_'}]},
     {var,{215,38},'Lst0'}},
    {debug_line,217,68},
    {match,
     {217,5},
     {var,{217,5},'Marker'},
     {'case',
      {217,14},
      {var,{217,19},'Suitability0'},
      [{clause,
        {218,18},
        [{map,
          {218,18},
          [{map_field_exact,
            {218,32},
            {var,{218,21},'Stacktrace'},
            {tuple,
             {218,35},
             [{atom,{218,36},tentative},{var,{218,47},'_'}]}}]}],
        [],
        [{debug_line,221,69},{atom,{221,22},unsuitable}]},
       {clause,
        {222,18},
        [{map,{222,18},[]}],
        [],
        [{debug_line,225,70},
         {tuple,
          {225,22},
          [{atom,{225,23},tentative},{var,{225,34},'EndLbl'}]}]}]}},
    {debug_line,228,71},
    {match,
     {228,5},
     {var,{228,5},'Suitability'},
     {map,
      {228,31},
      {var,{228,19},'Suitability0'},
      [{map_field_assoc,
        {228,45},
        {var,{228,34},'Stacktrace'},
        {var,{228,48},'Marker'}}]}},
    {debug_line,230,72},
    {match,
     {230,5},
     {var,{230,5},'Lst'},
     {block,
      {230,11},
      [{match,{230,11},{var,{230,11},rec3},{var,{230,11},'Lst0'}},
       {'case',
        {230,20},
        {var,{230,11},rec3},
        [{clause,
          {230,20},
          [{tuple,
            {230,20},
            [{atom,{230,20},lst},
             {var,{230,20},'_'},
             {var,{230,20},'_'},
             {var,{230,20},'_'},
             {var,{230,20},'_'}]}],
          [],
          [{call,
            {230,20},
            {remote,
             {230,20},
             {atom,{230,20},erlang},
             {atom,{230,20},setelement}},
            [{integer,{230,20},2},
             {var,{230,11},rec3},
             {var,{230,32},'Suitability'}]}]},
         {clause,
          [{generated,true},{location,{230,20}}],
          [{var,[{generated,true},{location,{230,20}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{230,20}}],
            {remote,
             [{generated,true},{location,{230,20}}],
             {atom,[{generated,true},{location,{230,20}}],erlang},
             {atom,[{generated,true},{location,{230,20}}],error}},
            [{tuple,
              [{generated,true},{location,{230,20}}],
              [{atom,[{generated,true},{location,{230,20}}],badrecord},
               {var,{230,11},rec3}]}]}]}]}]}},
    {debug_line,231,73},
    {call,
     {231,5},
     {atom,{231,5},si_is},
     [{var,{231,11},'Is'},
      {var,{231,15},'Id'},
      {var,{231,19},'EndLbl'},
      {var,{231,27},'Last'},
      {var,{231,33},'Lst'},
      {var,{231,38},'Gst'}]}]}]}.
{function,
 {233,1},
 si_handler_start,7,
 [{clause,
   {233,1},
   [{var,{233,1},'_'},
    {var,{233,1},'_'},
    {var,{233,1},'_'},
    {var,{233,1},'_'},
    {var,{233,1},'_'},
    {var,{233,1},'_'},
    {var,{233,1},'_'}],
   [[{call,
      {233,1},
      {remote,{233,1},{atom,{233,1},fake},{atom,{233,1},is_beam_bif_info}},
      []}]],
   [{debug_line,233,74},{atom,{233,1},ignore}]},
  {clause,
   {233,1},
   [{cons,
     {233,18},
     {tuple,
      {233,19},
      [{atom,{233,19},b_set},
       {var,{233,19},'_'},
       {var,{234,30},'Dst'},
       {atom,{233,29},extract},
       {cons,
        {235,31},
        {var,{235,32},'_'},
        {cons,
         {235,35},
         {tuple,{235,35},[{atom,{235,35},b_literal},{var,{235,50},'Idx'}]},
         {nil,{235,54}}}}]},
     {var,{235,59},'Is'}},
    {var,{236,18},'Id'},
    {var,{236,22},'StartLbl'},
    {var,{236,32},'Last'},
    {var,{236,38},'Vars0'},
    {var,{236,45},'Lst'},
    {var,{236,50},'Gst'}],
   [],
   [{debug_line,237,75},
    {match,
     {237,5},
     {atom,{237,5},none},
     {call,
      {237,12},
      {remote,{237,12},{atom,{237,12},erlang},{atom,{237,12},element}},
      [{block,0,[{op,{237,22},'+',{integer,{237,20},1},{var,{237,24},'Idx'}}]},
       {var,{237,29},'Vars0'}]}},
    {debug_line,238,76},
    {match,
     {238,5},
     {var,{238,5},'Vars'},
     {call,
      {238,12},
      {remote,{238,12},{atom,{238,12},erlang},{atom,{238,12},setelement}},
      [{block,0,[{op,{238,25},'+',{integer,{238,23},1},{var,{238,27},'Idx'}}]},
       {var,{238,32},'Vars0'},
       {var,{238,39},'Dst'}]}},
    {debug_line,239,77},
    {call,
     {239,5},
     {atom,{239,5},si_handler_start},
     [{var,{239,22},'Is'},
      {var,{239,26},'Id'},
      {var,{239,30},'StartLbl'},
      {var,{239,40},'Last'},
      {var,{239,46},'Vars'},
      {var,{239,52},'Lst'},
      {var,{239,57},'Gst'}]}]},
  {clause,
   {240,1},
   [{var,{240,18},'Is'},
    {var,{240,22},'Id'},
    {var,{240,26},'StartLbl'},
    {var,{240,36},'Last'},
    {var,{240,42},'Vars'},
    {var,{240,48},'Lst0'},
    {var,{240,54},'Gst'}],
   [],
   [{debug_line,241,78},
    {match,
     {241,5},
     {var,{241,5},'HandlerId'},
     {tuple,{241,17},[{var,{241,18},'Id'},{var,{241,22},'StartLbl'}]}},
    {debug_line,243,79},
    {match,
     {243,5},
     {tuple,
      {243,5},
      [{atom,{243,5},lst},
       {var,{245,22},'Suitability'},
       {var,{246,19},'Handlers0'},
       {var,{243,17},'Blocks'},
       {var,{244,23},'Preds'}]},
     {var,{246,32},'Lst0'}},
    {debug_line,248,80},
    {match,
     {248,5},
     {tuple,
      {248,5},
      [{var,{248,6},'_'},{var,{248,9},'_'},{var,{248,12},'Stacktrace'}]},
     {var,{248,26},'Vars'}},
    {debug_line,250,81},
    {match,
     {250,5},
     {var,{250,5},'Handlers'},
     {'case',
      {250,16},
      {var,{250,21},'Suitability'},
      [{clause,
        {251,20},
        [{map,
          {251,20},
          [{map_field_exact,
            {251,34},
            {var,{251,23},'Stacktrace'},
            {tuple,
             {251,37},
             [{atom,{251,38},tentative},{var,{251,49},'EndLbl'}]}}]}],
        [],
        [{debug_line,255,82},
         {match,
          {255,24},
          {var,{255,24},'Path'},
          {call,
           {255,31},
           {remote,{255,39},{atom,{255,31},beam_ssa},{atom,{255,40},between}},
           [{var,{255,48},'StartLbl'},
            {var,{255,58},'EndLbl'},
            {var,{255,66},'Preds'},
            {var,{255,73},'Blocks'}]}},
         {debug_line,256,83},
         {match,
          {256,24},
          {var,{256,24},'Partition'},
          {call,
           {256,36},
           {remote,{256,40},{atom,{256,36},maps},{atom,{256,41},with}},
           [{var,{256,46},'Path'},{var,{256,52},'Blocks'}]}},
         {debug_line,258,84},
         {match,
          {258,24},
          {var,{258,24},'Handler'},
          {tuple,
           {258,34},
           [{atom,{258,35},tentative},
            {var,{258,46},'StartLbl'},
            {var,{258,56},'Vars'},
            {var,{258,62},'Partition'}]}},
         {debug_line,259,85},
         {map,
          {259,33},
          {var,{259,24},'Handlers0'},
          [{map_field_assoc,
            {259,46},
            {var,{259,36},'HandlerId'},
            {var,{259,49},'Handler'}}]}]},
       {clause,
        {260,20},
        [{map,{260,20},[]}],
        [[{op,
           {260,40},
           '=/=',
           {var,{260,29},'Stacktrace'},
           {atom,{260,44},none}}]],
        [{debug_line,262,86},
         {map,
          {262,33},
          {var,{262,24},'Handlers0'},
          [{map_field_assoc,
            {262,46},
            {var,{262,36},'HandlerId'},
            {atom,{262,49},unsuitable}}]}]},
       {clause,
        {263,20},
        [{map,{263,20},[]}],
        [[{op,
           {263,40},
           '=:=',
           {var,{263,29},'Stacktrace'},
           {atom,{263,44},none}}]],
        [{debug_line,266,87},
         {map,
          {266,33},
          {var,{266,24},'Handlers0'},
          [{map_field_assoc,
            {266,46},
            {var,{266,36},'HandlerId'},
            {atom,{266,49},suitable}}]}]}]}},
    {debug_line,269,88},
    {match,
     {269,5},
     {var,{269,5},'Lst'},
     {block,
      {269,11},
      [{match,{269,11},{var,{269,11},rec4},{var,{269,11},'Lst0'}},
       {'case',
        {269,20},
        {var,{269,11},rec4},
        [{clause,
          {269,20},
          [{tuple,
            {269,20},
            [{atom,{269,20},lst},
             {var,{269,20},'_'},
             {var,{269,20},'_'},
             {var,{269,20},'_'},
             {var,{269,20},'_'}]}],
          [],
          [{call,
            {269,20},
            {remote,
             {269,20},
             {atom,{269,20},erlang},
             {atom,{269,20},setelement}},
            [{integer,{269,20},3},
             {var,{269,11},rec4},
             {var,{269,29},'Handlers'}]}]},
         {clause,
          [{generated,true},{location,{269,20}}],
          [{var,[{generated,true},{location,{269,20}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{269,20}}],
            {remote,
             [{generated,true},{location,{269,20}}],
             {atom,[{generated,true},{location,{269,20}}],erlang},
             {atom,[{generated,true},{location,{269,20}}],error}},
            [{tuple,
              [{generated,true},{location,{269,20}}],
              [{atom,[{generated,true},{location,{269,20}}],badrecord},
               {var,{269,11},rec4}]}]}]}]}]}},
    {debug_line,271,89},
    {call,
     {271,5},
     {atom,{271,5},si_is},
     [{var,{271,11},'Is'},
      {var,{271,15},'Id'},
      {var,{271,19},'StartLbl'},
      {var,{271,29},'Last'},
      {var,{271,35},'Lst'},
      {var,{271,40},'Gst'}]}]}]}.
{function,
    {274,1},
    inherit_tlh,3,
    [{clause,
         {274,1},
         [{var,{274,1},'_'},{var,{274,1},'_'},{var,{274,1},'_'}],
         [[{call,
               {274,1},
               {remote,
                   {274,1},
                   {atom,{274,1},fake},
                   {atom,{274,1},is_beam_bif_info}},
               []}]],
         [{debug_line,274,90},{atom,{274,1},ignore}]},
     {clause,
         {274,1},
         [{var,{274,13},'Caller'},
          {var,{274,21},'Callee'},
          {match,
              {274,29},
              {tuple,
                  {274,29},
                  [{atom,{274,29},gst},
                   {var,{274,29},'_'},
                   {var,{274,44},'Edges0'},
                   {var,{274,29},'_'}]},
              {var,{274,52},'Gst'}}],
         [],
         [{debug_line,275,91},
          {match,
              {275,5},
              {var,{275,5},'Callees'},
              {'case',
                  {275,15},
                  {var,{275,20},'Edges0'},
                  [{clause,
                       {276,19},
                       [{map,
                            {276,19},
                            [{map_field_exact,
                                 {276,29},
                                 {var,{276,22},'Caller'},
                                 {var,{276,32},'Callees0'}}]}],
                       [],
                       [{debug_line,277,92},
                        {call,
                            {277,23},
                            {remote,
                                {277,30},
                                {atom,{277,23},gb_sets},
                                {atom,{277,31},add_element}},
                            [{var,{277,43},'Callee'},
                             {var,{277,51},'Callees0'}]}]},
                   {clause,
                       {278,19},
                       [{map,{278,19},[]}],
                       [],
                       [{debug_line,279,93},
                        {call,
                            {279,23},
                            {remote,
                                {279,30},
                                {atom,{279,23},gb_sets},
                                {atom,{279,31},singleton}},
                            [{var,{279,41},'Callee'}]}]}]}},
          {debug_line,281,94},
          {match,
              {281,5},
              {var,{281,5},'Edges'},
              {map,
                  {281,19},
                  {var,{281,13},'Edges0'},
                  [{map_field_assoc,
                       {281,29},
                       {var,{281,22},'Caller'},
                       {var,{281,32},'Callees'}}]}},
          {debug_line,282,95},
          {block,
              {282,5},
              [{match,{282,5},{var,{282,5},rec5},{var,{282,5},'Gst'}},
               {'case',
                   {282,13},
                   {var,{282,5},rec5},
                   [{clause,
                        {282,13},
                        [{tuple,
                             {282,13},
                             [{atom,{282,13},gst},
                              {var,{282,13},'_'},
                              {var,{282,13},'_'},
                              {var,{282,13},'_'}]}],
                        [],
                        [{call,
                             {282,13},
                             {remote,
                                 {282,13},
                                 {atom,{282,13},erlang},
                                 {atom,{282,13},setelement}},
                             [{integer,{282,13},3},
                              {var,{282,5},rec5},
                              {var,{282,23},'Edges'}]}]},
                    {clause,
                        [{generated,true},{location,{282,13}}],
                        [{var,[{generated,true},{location,{282,13}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{282,13}}],
                             {remote,
                                 [{generated,true},{location,{282,13}}],
                                 {atom,
                                     [{generated,true},{location,{282,13}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{282,13}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{282,13}}],
                                  [{atom,
                                       [{generated,true},{location,{282,13}}],
                                       badrecord},
                                   {var,{282,5},rec5}]}]}]}]}]}]}]}.
{function,
    {285,1},
    add_tlh,4,
    [{clause,
         {285,1},
         [{var,{285,1},'_'},
          {var,{285,1},'_'},
          {var,{285,1},'_'},
          {var,{285,1},'_'}],
         [[{call,
               {285,1},
               {remote,
                   {285,1},
                   {atom,{285,1},fake},
                   {atom,{285,1},is_beam_bif_info}},
               []}]],
         [{debug_line,285,96},{atom,{285,1},ignore}]},
     {clause,
         {285,1},
         [{var,{285,9},'Id'},
          {var,{285,13},'Callee'},
          {var,{285,21},'Lst'},
          {var,{285,26},'Gst'}],
         [],
         [{debug_line,286,97},
          {match,
              {286,5},
              {tuple,
                  {286,5},
                  [{atom,{286,5},lst},
                   {var,{286,5},'_'},
                   {var,{286,19},'Handlers'},
                   {var,{286,5},'_'},
                   {var,{286,5},'_'}]},
              {var,{286,31},'Lst'}},
          {debug_line,287,98},
          {match,
              {287,5},
              {tuple,
                  {287,5},
                  [{atom,{287,5},gst},
                   {var,{287,20},'Roots0'},
                   {var,{287,5},'_'},
                   {var,{287,5},'_'}]},
              {var,{287,30},'Gst'}},
          {debug_line,289,99},
          {match,
              {289,5},
              {map,
                  {289,5},
                  [{map_field_exact,
                       {289,11},
                       {var,{289,8},'Id'},
                       {var,{289,14},'Handler'}}]},
              {var,{289,26},'Handlers'}},
          {debug_line,291,100},
          {match,
              {291,5},
              {var,{291,5},'TLHs0'},
              {'case',
                  {291,13},
                  {call,
                      {291,18},
                      {remote,
                          {291,26},
                          {atom,{291,18},gb_trees},
                          {atom,{291,27},lookup}},
                      [{var,{291,34},'Callee'},{var,{291,42},'Roots0'}]},
                  [{clause,
                       {292,17},
                       [{atom,{292,17},none}],
                       [],
                       [{debug_line,292,101},
                        {call,
                            {292,25},
                            {remote,
                                {292,32},
                                {atom,{292,25},gb_sets},
                                {atom,{292,33},singleton}},
                            [{var,{292,43},'Handler'}]}]},
                   {clause,
                       {293,17},
                       [{tuple,
                            {293,17},
                            [{atom,{293,18},value},{var,{293,25},'V'}]}],
                       [],
                       [{debug_line,293,102},{var,{293,31},'V'}]}]}},
          {debug_line,296,103},
          {match,
              {296,5},
              {var,{296,5},'TLHs'},
              {'case',
                  {296,12},
                  {call,
                      {296,17},
                      {remote,
                          {296,24},
                          {atom,{296,17},gb_sets},
                          {atom,{296,25},is_element}},
                      [{atom,{296,36},unsuitable},{var,{296,48},'TLHs0'}]},
                  [{clause,
                       {297,16},
                       [{atom,{297,16},true}],
                       [],
                       [{debug_line,299,104},{var,{299,20},'TLHs0'}]},
                   {clause,
                       {300,16},
                       [{atom,{300,16},false}],
                       [],
                       [{debug_line,301,105},
                        {call,
                            {301,20},
                            {remote,
                                {301,27},
                                {atom,{301,20},gb_sets},
                                {atom,{301,28},add_element}},
                            [{var,{301,40},'Handler'},
                             {var,{301,49},'TLHs0'}]}]}]}},
          {debug_line,304,106},
          {match,
              {304,5},
              {var,{304,5},'Roots'},
              {call,
                  {304,13},
                  {remote,
                      {304,21},
                      {atom,{304,13},gb_trees},
                      {atom,{304,22},enter}},
                  [{var,{304,28},'Callee'},
                   {var,{304,36},'TLHs'},
                   {var,{304,42},'Roots0'}]}},
          {debug_line,305,107},
          {block,
              {305,5},
              [{match,{305,5},{var,{305,5},rec6},{var,{305,5},'Gst'}},
               {'case',
                   {305,13},
                   {var,{305,5},rec6},
                   [{clause,
                        {305,13},
                        [{tuple,
                             {305,13},
                             [{atom,{305,13},gst},
                              {var,{305,13},'_'},
                              {var,{305,13},'_'},
                              {var,{305,13},'_'}]}],
                        [],
                        [{call,
                             {305,13},
                             {remote,
                                 {305,13},
                                 {atom,{305,13},erlang},
                                 {atom,{305,13},setelement}},
                             [{integer,{305,13},2},
                              {var,{305,5},rec6},
                              {var,{305,23},'Roots'}]}]},
                    {clause,
                        [{generated,true},{location,{305,13}}],
                        [{var,[{generated,true},{location,{305,13}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{305,13}}],
                             {remote,
                                 [{generated,true},{location,{305,13}}],
                                 {atom,
                                     [{generated,true},{location,{305,13}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{305,13}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{305,13}}],
                                  [{atom,
                                       [{generated,true},{location,{305,13}}],
                                       badrecord},
                                   {var,{305,5},rec6}]}]}]}]}]}]}]}.
{function,
 {310,1},
 opt,3,
 [{clause,
   {310,1},
   [{var,{310,1},'_'},{var,{310,1},'_'},{var,{310,1},'_'}],
   [[{call,
      {310,1},
      {remote,{310,1},{atom,{310,1},fake},{atom,{310,1},is_beam_bif_info}},
      []}]],
   [{debug_line,310,108},{atom,{310,1},ignore}]},
  {clause,
   {310,1},
   [{cons,
     {310,5},
     {match,
      {310,6},
      {tuple,
       {310,6},
       [{atom,{310,6},b_function},
        {var,{310,6},'_'},
        {var,{310,6},'_'},
        {var,{310,21},'Blocks0'},
        {var,{310,6},'_'}]},
      {var,{310,30},'F'}},
     {var,{310,34},'Fs'}},
    {var,{310,39},'Throws'},
    {var,{310,47},'TLHs'}],
   [],
   [{debug_line,311,109},
    {match,
     {311,5},
     {var,{311,5},'Id'},
     {call,{311,10},{atom,{311,10},get_func_id},[{var,{311,22},'F'}]}},
    {debug_line,313,110},
    {match,
     {313,5},
     {var,{313,5},'Blocks'},
     {'case',
      {313,14},
      {tuple,
       {313,19},
       [{call,
         {313,20},
         {remote,{313,24},{atom,{313,20},sets},{atom,{313,25},is_element}},
         [{var,{313,36},'Id'},{var,{313,40},'Throws'}]},
        {var,{313,49},'TLHs'}]},
      [{clause,
        {314,18},
        [{tuple,
          {314,18},
          [{atom,{314,19},true},
           {map,
            {314,25},
            [{map_field_exact,
              {314,31},
              {var,{314,28},'Id'},
              {var,{314,34},'Handlers'}}]}]}],
        [],
        [{debug_line,315,111},
         {call,
          {315,22},
          {atom,{315,22},opt_function},
          [{var,{315,35},'Handlers'},{var,{315,45},'Blocks0'}]}]},
       {clause,
        {316,18},
        [{tuple,{316,18},[{var,{316,19},'_'},{var,{316,22},'_'}]}],
        [],
        [{debug_line,318,112},{var,{318,22},'Blocks0'}]}]}},
    {debug_line,321,113},
    {cons,
     {321,5},
     {block,
      {321,6},
      [{match,{321,6},{var,{321,6},rec7},{var,{321,6},'F'}},
       {'case',
        {321,19},
        {var,{321,6},rec7},
        [{clause,
          {321,19},
          [{tuple,
            {321,19},
            [{atom,{321,19},b_function},
             {var,{321,19},'_'},
             {var,{321,19},'_'},
             {var,{321,19},'_'},
             {var,{321,19},'_'}]}],
          [],
          [{call,
            {321,19},
            {remote,
             {321,19},
             {atom,{321,19},erlang},
             {atom,{321,19},setelement}},
            [{integer,{321,19},4},
             {var,{321,6},rec7},
             {var,{321,22},'Blocks'}]}]},
         {clause,
          [{generated,true},{location,{321,19}}],
          [{var,[{generated,true},{location,{321,19}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{321,19}}],
            {remote,
             [{generated,true},{location,{321,19}}],
             {atom,[{generated,true},{location,{321,19}}],erlang},
             {atom,[{generated,true},{location,{321,19}}],error}},
            [{tuple,
              [{generated,true},{location,{321,19}}],
              [{atom,[{generated,true},{location,{321,19}}],badrecord},
               {var,{321,6},rec7}]}]}]}]}]},
     {call,
      {321,32},
      {atom,{321,32},opt},
      [{var,{321,36},'Fs'},{var,{321,40},'Throws'},{var,{321,48},'TLHs'}]}}]},
  {clause,
   {322,1},
   [{nil,{322,5}},{var,{322,9},'_Throws'},{var,{322,18},'_TLHs'}],
   [],
   [{debug_line,323,114},{nil,{323,5}}]}]}.
{function,
    {325,1},
    get_func_id,1,
    [{clause,
         {325,1},
         [{var,{325,1},'_'}],
         [[{call,
               {325,1},
               {remote,
                   {325,1},
                   {atom,{325,1},fake},
                   {atom,{325,1},is_beam_bif_info}},
               []}]],
         [{debug_line,325,115},{atom,{325,1},ignore}]},
     {clause,
         {325,1},
         [{tuple,
              {325,13},
              [{atom,{325,13},b_function},
               {var,{325,30},'Anno'},
               {var,{325,13},'_'},
               {var,{325,13},'_'},
               {var,{325,13},'_'}]}],
         [],
         [{debug_line,326,116},
          {match,
              {326,5},
              {tuple,
                  {326,5},
                  [{var,{326,6},'_'},
                   {var,{326,8},'Name'},
                   {var,{326,13},'Arity'}]},
              {call,
                  {326,22},
                  {remote,{326,26},{atom,{326,22},maps},{atom,{326,27},get}},
                  [{atom,{326,31},func_info},{var,{326,42},'Anno'}]}},
          {debug_line,327,117},
          {tuple,
              {327,5},
              [{atom,{327,5},b_local},
               {tuple,
                   {327,19},
                   [{atom,{327,19},b_literal},{var,{327,34},'Name'}]},
               {var,{327,46},'Arity'}]}]}]}.
{function,
 {329,1},
 opt_function,2,
 [{clause,
   {329,1},
   [{var,{329,1},'_'},{var,{329,1},'_'}],
   [[{call,
      {329,1},
      {remote,{329,1},{atom,{329,1},fake},{atom,{329,1},is_beam_bif_info}},
      []}]],
   [{debug_line,329,118},{atom,{329,1},ignore}]},
  {clause,
   {329,1},
   [{var,{329,14},'Handlers'},{var,{329,24},'Blocks'}],
   [],
   [{debug_line,330,119},
    {'case',
     {330,5},
     {call,
      {330,10},
      {remote,{330,17},{atom,{330,10},gb_sets},{atom,{330,18},is_member}},
      [{atom,{330,28},unsuitable},{var,{330,40},'Handlers'}]},
     [{clause,
       {331,9},
       [{atom,{331,9},true}],
       [],
       [{debug_line,332,120},{var,{332,13},'Blocks'}]},
      {clause,
       {333,9},
       [{atom,{333,9},false}],
       [],
       [{debug_line,334,121},
        {match,
         {334,13},
         {var,{334,13},'Linear0'},
         {call,
          {334,23},
          {remote,{334,31},{atom,{334,23},beam_ssa},{atom,{334,32},linearize}},
          [{var,{334,42},'Blocks'}]}},
        {debug_line,335,122},
        {match,
         {335,13},
         {var,{335,13},'Linear'},
         {call,
          {335,22},
          {atom,{335,22},opt_bs},
          [{var,{335,29},'Linear0'},
           {block,0,
            [{call,
              {335,38},
              {remote,
               {335,45},
               {atom,{335,38},gb_sets},
               {atom,{335,46},to_list}},
              [{var,{335,54},'Handlers'}]}]}]}},
        {debug_line,336,123},
        {call,
         {336,13},
         {remote,{336,17},{atom,{336,13},maps},{atom,{336,18},from_list}},
         [{var,{336,28},'Linear'}]}]}]}]}]}.
{function,
 {339,1},
 opt_bs,2,
 [{clause,
   {339,1},
   [{var,{339,1},'_'},{var,{339,1},'_'}],
   [[{call,
      {339,1},
      {remote,{339,1},{atom,{339,1},fake},{atom,{339,1},is_beam_bif_info}},
      []}]],
   [{debug_line,339,124},{atom,{339,1},ignore}]},
  {clause,
   {339,1},
   [{cons,
     {339,8},
     {tuple,
      {339,9},
      [{var,{339,10},'Lbl'},
       {match,
        {339,15},
        {tuple,
         {339,15},
         [{atom,{339,15},b_blk},
          {var,{339,15},'_'},
          {var,{339,35},'Is0'},
          {var,{339,27},'Last'}]},
        {var,{339,40},'Blk'}}]},
     {var,{339,47},'Bs'}},
    {var,{339,52},'Hs'}],
   [],
   [{debug_line,340,125},
    {match,
     {340,5},
     {var,{340,5},'Is'},
     {call,
      {340,10},
      {atom,{340,10},opt_is},
      [{var,{340,17},'Is0'},{var,{340,22},'Last'},{var,{340,28},'Hs'}]}},
    {debug_line,341,126},
    {cons,
     {341,5},
     {tuple,
      {341,6},
      [{var,{341,7},'Lbl'},
       {block,
        {341,12},
        [{match,{341,12},{var,{341,12},rec8},{var,{341,12},'Blk'}},
         {'case',
          {341,22},
          {var,{341,12},rec8},
          [{clause,
            {341,22},
            [{tuple,
              {341,22},
              [{atom,{341,22},b_blk},
               {var,{341,22},'_'},
               {var,{341,22},'_'},
               {var,{341,22},'_'}]}],
            [],
            [{call,
              {341,22},
              {remote,
               {341,22},
               {atom,{341,22},erlang},
               {atom,{341,22},setelement}},
              [{integer,{341,22},3},
               {var,{341,12},rec8},
               {var,{341,25},'Is'}]}]},
           {clause,
            [{generated,true},{location,{341,22}}],
            [{var,[{generated,true},{location,{341,22}}],'_'}],
            [],
            [{call,
              [{generated,true},{location,{341,22}}],
              {remote,
               [{generated,true},{location,{341,22}}],
               {atom,[{generated,true},{location,{341,22}}],erlang},
               {atom,[{generated,true},{location,{341,22}}],error}},
              [{tuple,
                [{generated,true},{location,{341,22}}],
                [{atom,[{generated,true},{location,{341,22}}],badrecord},
                 {var,{341,12},rec8}]}]}]}]}]}]},
     {call,
      {341,32},
      {atom,{341,32},opt_bs},
      [{var,{341,39},'Bs'},{var,{341,43},'Hs'}]}}]},
  {clause,
   {342,1},
   [{nil,{342,8}},{var,{342,12},'_Hs'}],
   [],
   [{debug_line,343,127},{nil,{343,5}}]}]}.
{function,
    {345,1},
    opt_is,3,
    [{clause,
         {345,1},
         [{var,{345,1},'_'},{var,{345,1},'_'},{var,{345,1},'_'}],
         [[{call,
               {345,1},
               {remote,
                   {345,1},
                   {atom,{345,1},fake},
                   {atom,{345,1},is_beam_bif_info}},
               []}]],
         [{debug_line,345,128},{atom,{345,1},ignore}]},
     {clause,
         {345,1},
         [{cons,
              {345,8},
              {match,
                  {345,9},
                  {tuple,
                      {345,9},
                      [{atom,{345,9},b_set},
                       {var,{345,9},'_'},
                       {var,{346,20},'Dst'},
                       {atom,{345,19},call},
                       {cons,
                           {347,21},
                           {tuple,
                               {347,22},
                               [{atom,{347,22},b_remote},
                                {tuple,
                                    {347,36},
                                    [{atom,{347,36},b_literal},
                                     {atom,{347,51},erlang}]},
                                {tuple,
                                    {348,37},
                                    [{atom,{348,37},b_literal},
                                     {atom,{348,52},throw}]},
                                {integer,{349,38},1}]},
                           {cons,
                               {349,42},
                               {var,{349,42},'_Term'},
                               {nil,{349,47}}}}]},
                  {var,{349,50},'I0'}},
              {cons,
                  {350,9},
                  {match,
                      {350,9},
                      {tuple,
                          {350,9},
                          [{atom,{350,9},b_set},
                           {var,{350,9},'_'},
                           {var,{350,9},'_'},
                           {tuple,
                               {350,19},
                               [{atom,{350,20},succeeded},
                                {atom,{350,30},body}]},
                           {cons,
                               {350,41},
                               {var,{350,42},'Dst'},
                               {nil,{350,45}}}]},
                      {var,{350,48},'Succ'}},
                  {nil,{350,52}}}},
          {tuple,
              {351,8},
              [{atom,{351,8},b_br},
               {var,{351,8},'_'},
               {var,{351,8},'_'},
               {var,{351,8},'_'},
               {var,{351,8},'_'}]},
          {var,{351,17},'Hs'}],
         [],
         [{debug_line,352,129},
          {match,
              {352,5},
              {var,{352,5},'ThrownType'},
              {call,
                  {352,18},
                  {remote,
                      {352,26},
                      {atom,{352,18},beam_ssa},
                      {atom,{352,27},get_anno}},
                  [{atom,{352,36},thrown_type},
                   {var,{352,49},'I0'},
                   {atom,{352,53},any}]}},
          {debug_line,353,130},
          {match,
              {353,5},
              {var,{353,5},'I'},
              {call,
                  {353,9},
                  {atom,{353,9},opt_throw},
                  [{var,{353,19},'Hs'},
                   {var,{353,23},'ThrownType'},
                   {var,{353,35},'I0'}]}},
          {debug_line,354,131},
          {cons,
              {354,5},
              {var,{354,6},'I'},
              {cons,{354,9},{var,{354,9},'Succ'},{nil,{354,13}}}}]},
     {clause,
         {355,1},
         [{cons,{355,8},{var,{355,9},'I'},{var,{355,13},'Is'}},
          {var,{355,18},'Last'},
          {var,{355,24},'Hs'}],
         [],
         [{debug_line,356,132},
          {cons,
              {356,5},
              {var,{356,6},'I'},
              {call,
                  {356,10},
                  {atom,{356,10},opt_is},
                  [{var,{356,17},'Is'},
                   {var,{356,21},'Last'},
                   {var,{356,27},'Hs'}]}}]},
     {clause,
         {357,1},
         [{nil,{357,8}},{var,{357,12},'_Last'},{var,{357,19},'_Hs'}],
         [],
         [{debug_line,358,133},{nil,{358,5}}]}]}.
{function,
    {360,1},
    opt_throw,3,
    [{clause,
         {360,1},
         [{var,{360,1},'_'},{var,{360,1},'_'},{var,{360,1},'_'}],
         [[{call,
               {360,1},
               {remote,
                   {360,1},
                   {atom,{360,1},fake},
                   {atom,{360,1},is_beam_bif_info}},
               []}]],
         [{debug_line,360,134},{atom,{360,1},ignore}]},
     {clause,
         {360,1},
         [{cons,{360,11},{atom,{360,12},suitable},{var,{360,23},'Hs'}},
          {var,{360,28},'ThrownType'},
          {var,{360,40},'I'}],
         [],
         [{debug_line,361,135},
          {call,
              {361,5},
              {atom,{361,5},opt_throw},
              [{var,{361,15},'Hs'},
               {var,{361,19},'ThrownType'},
               {var,{361,31},'I'}]}]},
     {clause,
         {362,1},
         [{cons,
              {362,11},
              {tuple,
                  {362,12},
                  [{atom,{362,13},tentative},
                   {var,{362,24},'Start'},
                   {var,{362,31},'Vars'},
                   {var,{362,37},'Blocks'}]},
              {var,{362,47},'Hs'}},
          {var,{362,52},'ThrownType'},
          {var,{362,64},'I'}],
         [],
         [{debug_line,363,136},
          {'case',
              {363,5},
              {call,
                  {363,10},
                  {atom,{363,10},opt_is_suitable},
                  [{var,{363,26},'Start'},
                   {var,{363,33},'Blocks'},
                   {var,{363,41},'Vars'},
                   {var,{363,47},'ThrownType'}]},
              [{clause,
                   {364,9},
                   [{atom,{364,9},true}],
                   [],
                   [{debug_line,364,137},
                    {call,
                        {364,17},
                        {atom,{364,17},opt_throw},
                        [{var,{364,27},'Hs'},
                         {var,{364,31},'ThrownType'},
                         {var,{364,43},'I'}]}]},
               {clause,
                   {365,9},
                   [{atom,{365,9},false}],
                   [],
                   [{debug_line,365,138},{var,{365,18},'I'}]}]}]},
     {clause,
         {367,1},
         [{nil,{367,11}},
          {var,{367,15},'_ThrownType'},
          {match,
              {367,28},
              {tuple,
                  {367,28},
                  [{atom,{367,28},b_set},
                   {var,{367,28},'_'},
                   {var,{367,28},'_'},
                   {var,{367,28},'_'},
                   {cons,
                       {367,40},
                       {var,{367,41},'_'},
                       {cons,
                           {367,44},
                           {var,{367,44},'Reason'},
                           {nil,{367,50}}}}]},
              {var,{367,53},'I'}}],
         [],
         [{debug_line,370,139},
          {match,
              {370,5},
              {var,{370,5},'MFA'},
              {tuple,
                  {370,11},
                  [{atom,{370,11},b_remote},
                   {tuple,
                       {370,25},
                       [{atom,{370,25},b_literal},{atom,{370,40},erlang}]},
                   {tuple,
                       {371,26},
                       [{atom,{371,26},b_literal},{atom,{371,41},raise}]},
                   {integer,{372,27},3}]}},
          {debug_line,373,140},
          {match,
              {373,5},
              {var,{373,5},'Stacktrace'},
              {tuple,{373,18},[{atom,{373,18},b_literal},{nil,{373,33}}]}},
          {debug_line,374,141},
          {block,
              {374,5},
              [{match,
                   {374,13},
                   {var,{374,13},rec9},
                   {cons,
                       {374,18},
                       {var,{374,19},'MFA'},
                       {cons,
                           {374,24},
                           {tuple,
                               {374,24},
                               [{atom,{374,24},b_literal},
                                {atom,{374,39},throw}]},
                           {cons,
                               {374,47},
                               {var,{374,47},'Reason'},
                               {cons,
                                   {374,55},
                                   {var,{374,55},'Stacktrace'},
                                   {nil,{374,65}}}}}}},
               {match,{374,5},{var,{374,5},rec10},{var,{374,5},'I'}},
               {'case',
                   {374,13},
                   {var,{374,5},rec10},
                   [{clause,
                        {374,13},
                        [{tuple,
                             {374,13},
                             [{atom,{374,13},b_set},
                              {var,{374,13},'_'},
                              {var,{374,13},'_'},
                              {var,{374,13},'_'},
                              {var,{374,13},'_'}]}],
                        [],
                        [{call,
                             {374,13},
                             {remote,
                                 {374,13},
                                 {atom,{374,13},erlang},
                                 {atom,{374,13},setelement}},
                             [{integer,{374,13},5},
                              {var,{374,5},rec10},
                              {var,{374,13},rec9}]}]},
                    {clause,
                        [{generated,true},{location,{374,13}}],
                        [{var,[{generated,true},{location,{374,13}}],'_'}],
                        [],
                        [{call,
                             [{generated,true},{location,{374,13}}],
                             {remote,
                                 [{generated,true},{location,{374,13}}],
                                 {atom,
                                     [{generated,true},{location,{374,13}}],
                                     erlang},
                                 {atom,
                                     [{generated,true},{location,{374,13}}],
                                     error}},
                             [{tuple,
                                  [{generated,true},{location,{374,13}}],
                                  [{atom,
                                       [{generated,true},{location,{374,13}}],
                                       badrecord},
                                   {var,{374,5},rec10}]}]}]}]}]}]}]}.
{function,
    {383,1},
    opt_is_suitable,4,
    [{clause,
         {383,1},
         [{var,{383,1},'_'},
          {var,{383,1},'_'},
          {var,{383,1},'_'},
          {var,{383,1},'_'}],
         [[{call,
               {383,1},
               {remote,
                   {383,1},
                   {atom,{383,1},fake},
                   {atom,{383,1},is_beam_bif_info}},
               []}]],
         [{debug_line,383,142},{atom,{383,1},ignore}]},
     {clause,
         {383,1},
         [{var,{383,17},'Start'},
          {var,{383,24},'Blocks'},
          {var,{383,32},'Vars'},
          {var,{383,38},'ThrownType'}],
         [],
         [{debug_line,384,143},
          {match,
              {384,5},
              {var,{384,5},'Ts'},
              {call,
                  {384,10},
                  {atom,{384,10},ois_init_ts},
                  [{var,{384,22},'Vars'},{var,{384,28},'ThrownType'}]}},
          {debug_line,385,144},
          {call,
              {385,5},
              {atom,{385,5},ois_1},
              [{block,0,
                   [{cons,{385,11},{var,{385,12},'Start'},{nil,{385,17}}}]},
               {var,{385,20},'Blocks'},
               {var,{385,28},'Ts'}]}]}]}.
{function,
 {387,1},
 ois_1,3,
 [{clause,
   {387,1},
   [{var,{387,1},'_'},{var,{387,1},'_'},{var,{387,1},'_'}],
   [[{call,
      {387,1},
      {remote,{387,1},{atom,{387,1},fake},{atom,{387,1},is_beam_bif_info}},
      []}]],
   [{debug_line,387,145},{atom,{387,1},ignore}]},
  {clause,
   {387,1},
   [{cons,{387,7},{var,{387,8},'Lbl'},{var,{387,14},'Lbls'}},
    {var,{387,21},'Blocks'},
    {var,{387,29},'Ts0'}],
   [],
   [{debug_line,388,146},
    {'case',
     {388,5},
     {var,{388,10},'Blocks'},
     [{clause,
       {389,9},
       [{map,
         {389,9},
         [{map_field_exact,
           {389,16},
           {var,{389,12},'Lbl'},
           {tuple,
            {389,19},
            [{atom,{389,19},b_blk},
             {var,{389,19},'_'},
             {var,{389,39},'Is'},
             {var,{389,31},'Last'}]}}]}],
       [],
       [{debug_line,390,147},
        {'case',
         {390,13},
         {call,
          {390,18},
          {atom,{390,18},ois_is},
          [{var,{390,25},'Is'},{var,{390,29},'Ts0'}]},
         [{clause,
           {391,17},
           [{tuple,{391,17},[{atom,{391,18},ok},{var,{391,22},'Ts'}]}],
           [],
           [{debug_line,392,148},
            {match,
             {392,21},
             {var,{392,21},'Next'},
             {call,
              {392,28},
              {atom,{392,28},ois_successors},
              [{var,{392,43},'Last'},{var,{392,49},'Ts'}]}},
            {debug_line,393,149},
            {call,
             {393,21},
             {atom,{393,21},ois_1},
             [{block,0,
               [{op,
                 {393,32},
                 '++',
                 {var,{393,27},'Next'},
                 {var,{393,35},'Lbls'}}]},
              {var,{393,41},'Blocks'},
              {var,{393,49},'Ts'}]}]},
          {clause,
           {394,17},
           [{atom,{394,17},error}],
           [],
           [{debug_line,395,150},{atom,{395,21},false}]}]}]},
      {clause,
       {397,9},
       [{map,{397,9},[]}],
       [],
       [{debug_line,398,151},
        {call,
         {398,13},
         {atom,{398,13},ois_1},
         [{var,{398,19},'Lbls'},
          {var,{398,25},'Blocks'},
          {var,{398,33},'Ts0'}]}]}]}]},
  {clause,
   {400,1},
   [{nil,{400,7}},{var,{400,11},'_Blocks'},{var,{400,20},'_Ts'}],
   [],
   [{debug_line,401,152},{atom,{401,5},true}]}]}.
{function,
    {403,1},
    ois_successors,2,
    [{clause,
         {403,1},
         [{var,{403,1},'_'},{var,{403,1},'_'}],
         [[{call,
               {403,1},
               {remote,
                   {403,1},
                   {atom,{403,1},fake},
                   {atom,{403,1},is_beam_bif_info}},
               []}]],
         [{debug_line,403,153},{atom,{403,1},ignore}]},
     {clause,
         {403,1},
         [{tuple,
              {403,16},
              [{atom,{403,16},b_switch},
               {var,{403,16},'_'},
               {var,{403,16},'_'},
               {var,{403,31},'Fail'},
               {var,{403,41},'List'}]},
          {var,{403,48},'_Ts'}],
         [],
         [{debug_line,404,154},
          {match,
              {404,5},
              {var,{404,5},'Lbls'},
              {lc,{404,12},
                  {block,0,[{var,{404,13},'Lbl'}]},
                  [{block,0,[{atom,{404,33},true}]},
                   {generate_strict,
                       {404,29},
                       {tuple,
                           {404,20},
                           [{var,{404,21},'_'},{var,{404,24},'Lbl'}]},
                       {var,{404,33},'List'}}]}},
          {debug_line,405,155},
          {cons,{405,5},{var,{405,6},'Fail'},{var,{405,13},'Lbls'}}]},
     {clause,
         {406,1},
         [{tuple,
              {406,16},
              [{atom,{406,16},b_br},
               {var,{406,16},'_'},
               {var,{406,27},'Bool'},
               {var,{406,37},'Succ'},
               {var,{406,47},'Fail'}]},
          {var,{406,54},'Ts'}],
         [],
         [{debug_line,407,156},
          {'case',
              {407,5},
              {call,
                  {407,10},
                  {remote,
                      {407,20},
                      {atom,{407,10},beam_types},
                      {atom,{407,21},get_singleton_value}},
                  [{block,0,
                       [{call,
                            {407,41},
                            {atom,{407,41},ois_get_type},
                            [{var,{407,54},'Bool'},{var,{407,60},'Ts'}]}]}]},
              [{clause,
                   {408,9},
                   [{tuple,{408,9},[{atom,{408,10},ok},{atom,{408,14},true}]}],
                   [],
                   [{debug_line,408,157},
                    {cons,{408,23},{var,{408,24},'Succ'},{nil,{408,28}}}]},
               {clause,
                   {409,9},
                   [{tuple,
                        {409,9},
                        [{atom,{409,10},ok},{atom,{409,14},false}]}],
                   [],
                   [{debug_line,409,158},
                    {cons,{409,24},{var,{409,25},'Fail'},{nil,{409,29}}}]},
               {clause,
                   {410,9},
                   [{atom,{410,9},error}],
                   [],
                   [{debug_line,410,159},
                    {cons,
                        {410,18},
                        {var,{410,19},'Succ'},
                        {cons,
                            {410,25},
                            {var,{410,25},'Fail'},
                            {nil,{410,29}}}}]}]}]}]}.
{function,
    {413,1},
    ois_init_ts,2,
    [{clause,
         {413,1},
         [{var,{413,1},'_'},{var,{413,1},'_'}],
         [[{call,
               {413,1},
               {remote,
                   {413,1},
                   {atom,{413,1},fake},
                   {atom,{413,1},is_beam_bif_info}},
               []}]],
         [{debug_line,413,160},{atom,{413,1},ignore}]},
     {clause,
         {413,1},
         [{tuple,
              {413,13},
              [{var,{413,14},'Class'},
               {var,{413,21},'Reason'},
               {var,{413,29},'Stacktrace'}]},
          {var,{413,42},'ThrownType'}],
         [],
         [{debug_line,414,161},
          {match,
              {414,5},
              {var,{414,5},'Ts'},
              {map,
                  {414,10},
                  [{map_field_assoc,
                       {414,19},
                       {var,{414,13},'Class'},
                       {call,
                           {414,22},
                           {remote,
                               {414,32},
                               {atom,{414,22},beam_types},
                               {atom,{414,33},make_atom}},
                           [{atom,{414,43},throw}]}},
                   {map_field_assoc,
                       {415,20},
                       {var,{415,13},'Reason'},
                       {var,{415,23},'ThrownType'}},
                   {map_field_assoc,
                       {416,24},
                       {var,{416,13},'Stacktrace'},
                       {atom,{416,27},any}}]}},
          {debug_line,417,162},
          {call,
              {417,5},
              {remote,{417,9},{atom,{417,5},maps},{atom,{417,10},remove}},
              [{atom,{417,17},none},{var,{417,23},'Ts'}]}]}]}.
{function,
    {419,1},
    ois_is,2,
    [{clause,
         {419,1},
         [{var,{419,1},'_'},{var,{419,1},'_'}],
         [[{call,
               {419,1},
               {remote,
                   {419,1},
                   {atom,{419,1},fake},
                   {atom,{419,1},is_beam_bif_info}},
               []}]],
         [{debug_line,419,163},{atom,{419,1},ignore}]},
     {clause,
         {419,1},
         [{cons,
              {419,8},
              {tuple,
                  {419,9},
                  [{atom,{419,9},b_set},
                   {var,{419,9},'_'},
                   {var,{419,9},'_'},
                   {atom,{419,19},build_stacktrace},
                   {var,{419,9},'_'}]},
              {var,{419,39},'_'}},
          {var,{419,43},'_Ts'}],
         [],
         [{debug_line,420,164},{atom,{420,5},error}]},
     {clause,
         {421,1},
         [{cons,
              {421,8},
              {tuple,
                  {421,9},
                  [{atom,{421,9},b_set},
                   {var,{421,9},'_'},
                   {var,{421,9},'_'},
                   {atom,{421,19},raw_raise},
                   {var,{421,9},'_'}]},
              {var,{421,32},'_'}},
          {var,{421,36},'_Ts'}],
         [],
         [{debug_line,422,165},{atom,{422,5},error}]},
     {clause,
         {423,1},
         [{cons,
              {423,8},
              {tuple,
                  {423,9},
                  [{atom,{423,9},b_set},
                   {var,{423,9},'_'},
                   {var,{423,9},'_'},
                   {atom,{423,19},resume},
                   {var,{423,9},'_'}]},
              {var,{423,29},'_'}},
          {var,{423,33},'_Ts'}],
         [],
         [{debug_line,424,166},{atom,{424,5},error}]},
     {clause,
         {425,1},
         [{cons,
              {425,8},
              {tuple,
                  {425,9},
                  [{atom,{425,9},b_set},
                   {var,{425,9},'_'},
                   {var,{425,30},'Dst'},
                   {atom,{425,19},get_hd},
                   {cons,{425,39},{var,{425,40},'Src'},{nil,{425,43}}}]},
              {var,{425,48},'Is'}},
          {var,{425,53},'Ts0'}],
         [],
         [{debug_line,426,167},
          {match,
              {426,5},
              {var,{426,5},'SrcType'},
              {call,
                  {426,15},
                  {atom,{426,15},ois_get_type},
                  [{var,{426,28},'Src'},{var,{426,33},'Ts0'}]}},
          {debug_line,427,168},
          {match,
              {427,5},
              {tuple,
                  {427,5},
                  [{var,{427,6},'Type'},
                   {var,{427,12},'_'},
                   {var,{427,15},'_'}]},
              {call,
                  {427,20},
                  {remote,
                      {427,35},
                      {atom,{427,20},beam_call_types},
                      {atom,{427,36},types}},
                  [{atom,{427,42},erlang},
                   {atom,{427,50},hd},
                   {block,0,
                       [{cons,
                            {427,54},
                            {var,{427,55},'SrcType'},
                            {nil,{427,62}}}]}]}},
          {debug_line,428,169},
          {match,
              {428,5},
              {var,{428,5},'Ts'},
              {map,
                  {428,13},
                  {var,{428,10},'Ts0'},
                  [{map_field_assoc,
                       {428,20},
                       {var,{428,16},'Dst'},
                       {var,{428,23},'Type'}}]}},
          {debug_line,429,170},
          {call,
              {429,5},
              {atom,{429,5},ois_is},
              [{var,{429,12},'Is'},{var,{429,16},'Ts'}]}]},
     {clause,
         {430,1},
         [{cons,
              {430,8},
              {tuple,
                  {430,9},
                  [{atom,{430,9},b_set},
                   {var,{430,9},'_'},
                   {var,{430,30},'Dst'},
                   {atom,{430,19},get_tl},
                   {cons,{430,39},{var,{430,40},'Src'},{nil,{430,43}}}]},
              {var,{430,48},'Is'}},
          {var,{430,53},'Ts0'}],
         [],
         [{debug_line,431,171},
          {match,
              {431,5},
              {var,{431,5},'SrcType'},
              {call,
                  {431,15},
                  {atom,{431,15},ois_get_type},
                  [{var,{431,28},'Src'},{var,{431,33},'Ts0'}]}},
          {debug_line,432,172},
          {match,
              {432,5},
              {tuple,
                  {432,5},
                  [{var,{432,6},'Type'},
                   {var,{432,12},'_'},
                   {var,{432,15},'_'}]},
              {call,
                  {432,20},
                  {remote,
                      {432,35},
                      {atom,{432,20},beam_call_types},
                      {atom,{432,36},types}},
                  [{atom,{432,42},erlang},
                   {atom,{432,50},tl},
                   {block,0,
                       [{cons,
                            {432,54},
                            {var,{432,55},'SrcType'},
                            {nil,{432,62}}}]}]}},
          {debug_line,433,173},
          {match,
              {433,5},
              {var,{433,5},'Ts'},
              {map,
                  {433,13},
                  {var,{433,10},'Ts0'},
                  [{map_field_assoc,
                       {433,20},
                       {var,{433,16},'Dst'},
                       {var,{433,23},'Type'}}]}},
          {debug_line,434,174},
          {call,
              {434,5},
              {atom,{434,5},ois_is},
              [{var,{434,12},'Is'},{var,{434,16},'Ts'}]}]},
     {clause,
         {435,1},
         [{cons,
              {435,8},
              {tuple,
                  {435,9},
                  [{atom,{435,9},b_set},
                   {var,{435,9},'_'},
                   {var,{436,20},'Dst'},
                   {atom,{435,19},get_tuple_element},
                   {cons,
                       {437,21},
                       {var,{437,22},'Src'},
                       {cons,
                           {437,27},
                           {tuple,
                               {437,27},
                               [{atom,{437,27},b_literal},
                                {var,{437,42},'Offset'}]},
                           {nil,{437,49}}}}]},
              {var,{437,54},'Is'}},
          {var,{437,59},'Ts0'}],
         [],
         [{debug_line,438,175},
          {match,
              {438,5},
              {var,{438,5},'Type'},
              {'case',
                  {438,12},
                  {var,{438,17},'Ts0'},
                  [{clause,
                       {439,16},
                       [{map,
                            {439,16},
                            [{map_field_exact,
                                 {439,23},
                                 {var,{439,19},'Src'},
                                 {tuple,
                                     {439,26},
                                     [{atom,{439,26},t_tuple},
                                      {var,{439,40},'Size'},
                                      {var,{439,26},'_'},
                                      {var,{439,54},'Es'}]}}]}],
                       [[{op,{439,72},
                             '<',
                             {var,{439,65},'Offset'},
                             {var,{439,74},'Size'}}]],
                       [{debug_line,440,176},
                        {call,
                            {440,20},
                            {remote,
                                {440,30},
                                {atom,{440,20},beam_types},
                                {atom,{440,31},get_tuple_element}},
                            [{block,0,
                                 [{op,{440,56},
                                      '+',
                                      {var,{440,49},'Offset'},
                                      {integer,{440,58},1}}]},
                             {var,{440,61},'Es'}]}]},
                   {clause,
                       {441,16},
                       [{map,{441,16},[]}],
                       [],
                       [{debug_line,442,177},{atom,{442,20},any}]}]}},
          {debug_line,444,178},
          {match,
              {444,5},
              {var,{444,5},'Ts'},
              {map,
                  {444,13},
                  {var,{444,10},'Ts0'},
                  [{map_field_assoc,
                       {444,20},
                       {var,{444,16},'Dst'},
                       {var,{444,23},'Type'}}]}},
          {debug_line,445,179},
          {call,
              {445,5},
              {atom,{445,5},ois_is},
              [{var,{445,12},'Is'},{var,{445,16},'Ts'}]}]},
     {clause,
         {446,1},
         [{cons,
              {446,8},
              {tuple,
                  {446,9},
                  [{atom,{446,9},b_set},
                   {var,{446,9},'_'},
                   {var,{446,37},'Dst'},
                   {tuple,
                       {446,19},
                       [{atom,{446,20},bif},{atom,{446,24},is_atom}]},
                   {cons,{446,46},{var,{446,47},'Src'},{nil,{446,50}}}]},
              {var,{446,55},'Is'}},
          {var,{446,60},'Ts'}],
         [],
         [{debug_line,447,180},
          {call,
              {447,5},
              {atom,{447,5},ois_type_test},
              [{var,{447,19},'Src'},
               {var,{447,24},'Dst'},
               {block,0,
                   [{tuple,
                        {447,29},
                        [{atom,{447,29},t_atom},{atom,{447,29},any}]}]},
               {var,{447,40},'Is'},
               {var,{447,44},'Ts'}]}]},
     {clause,
         {448,1},
         [{cons,
              {448,8},
              {tuple,
                  {448,9},
                  [{atom,{448,9},b_set},
                   {var,{448,9},'_'},
                   {var,{448,42},'Dst'},
                   {tuple,
                       {448,19},
                       [{atom,{448,20},bif},{atom,{448,24},is_bitstring}]},
                   {cons,{448,51},{var,{448,52},'Src'},{nil,{448,55}}}]},
              {var,{448,60},'Is'}},
          {var,{448,65},'Ts'}],
         [],
         [{debug_line,449,181},
          {call,
              {449,5},
              {atom,{449,5},ois_type_test},
              [{var,{449,19},'Src'},
               {var,{449,24},'Dst'},
               {block,0,
                   [{tuple,
                        {449,29},
                        [{atom,{449,29},t_bitstring},
                         {integer,{449,29},1},
                         {atom,{449,29},false}]}]},
               {var,{449,45},'Is'},
               {var,{449,49},'Ts'}]}]},
     {clause,
         {450,1},
         [{cons,
              {450,8},
              {tuple,
                  {450,9},
                  [{atom,{450,9},b_set},
                   {var,{450,9},'_'},
                   {var,{450,39},'Dst'},
                   {tuple,
                       {450,19},
                       [{atom,{450,20},bif},{atom,{450,24},is_binary}]},
                   {cons,{450,48},{var,{450,49},'Src'},{nil,{450,52}}}]},
              {var,{450,57},'Is'}},
          {var,{450,62},'Ts'}],
         [],
         [{debug_line,451,182},
          {call,
              {451,5},
              {atom,{451,5},ois_type_test},
              [{var,{451,19},'Src'},
               {var,{451,24},'Dst'},
               {block,0,
                   [{tuple,
                        {451,29},
                        [{atom,{451,29},t_bitstring},
                         {integer,{451,52},8},
                         {atom,{451,29},false}]}]},
               {var,{451,56},'Is'},
               {var,{451,60},'Ts'}]}]},
     {clause,
         {452,1},
         [{cons,
              {452,8},
              {tuple,
                  {452,9},
                  [{atom,{452,9},b_set},
                   {var,{452,9},'_'},
                   {var,{452,38},'Dst'},
                   {tuple,
                       {452,19},
                       [{atom,{452,20},bif},{atom,{452,24},is_float}]},
                   {cons,{452,47},{var,{452,48},'Src'},{nil,{452,51}}}]},
              {var,{452,56},'Is'}},
          {var,{452,61},'Ts'}],
         [],
         [{debug_line,453,183},
          {call,
              {453,5},
              {atom,{453,5},ois_type_test},
              [{var,{453,19},'Src'},
               {var,{453,24},'Dst'},
               {block,0,
                   [{tuple,
                        {453,29},
                        [{atom,{453,29},t_float},{atom,{453,29},any}]}]},
               {var,{453,41},'Is'},
               {var,{453,45},'Ts'}]}]},
     {clause,
         {454,1},
         [{cons,
              {454,8},
              {tuple,
                  {454,9},
                  [{atom,{454,9},b_set},
                   {var,{454,9},'_'},
                   {var,{454,40},'Dst'},
                   {tuple,
                       {454,19},
                       [{atom,{454,20},bif},{atom,{454,24},is_integer}]},
                   {cons,{454,49},{var,{454,50},'Src'},{nil,{454,53}}}]},
              {var,{454,58},'Is'}},
          {var,{454,63},'Ts'}],
         [],
         [{debug_line,455,184},
          {call,
              {455,5},
              {atom,{455,5},ois_type_test},
              [{var,{455,19},'Src'},
               {var,{455,24},'Dst'},
               {block,0,
                   [{tuple,
                        {455,29},
                        [{atom,{455,29},t_integer},{atom,{455,29},any}]}]},
               {var,{455,43},'Is'},
               {var,{455,47},'Ts'}]}]},
     {clause,
         {456,1},
         [{cons,
              {456,8},
              {tuple,
                  {456,9},
                  [{atom,{456,9},b_set},
                   {var,{456,9},'_'},
                   {var,{456,37},'Dst'},
                   {tuple,
                       {456,19},
                       [{atom,{456,20},bif},{atom,{456,24},is_list}]},
                   {cons,{456,46},{var,{456,47},'Src'},{nil,{456,50}}}]},
              {var,{456,55},'Is'}},
          {var,{456,60},'Ts'}],
         [],
         [{debug_line,457,185},
          {call,
              {457,5},
              {atom,{457,5},ois_type_test},
              [{var,{457,19},'Src'},
               {var,{457,24},'Dst'},
               {block,0,
                   [{tuple,
                        {457,29},
                        [{atom,{457,29},t_list},
                         {atom,{457,29},any},
                         {atom,{457,29},any}]}]},
               {var,{457,40},'Is'},
               {var,{457,44},'Ts'}]}]},
     {clause,
         {458,1},
         [{cons,
              {458,8},
              {tuple,
                  {458,9},
                  [{atom,{458,9},b_set},
                   {var,{458,9},'_'},
                   {var,{458,36},'Dst'},
                   {tuple,
                       {458,19},
                       [{atom,{458,20},bif},{atom,{458,24},is_map}]},
                   {cons,{458,45},{var,{458,46},'Src'},{nil,{458,49}}}]},
              {var,{458,54},'Is'}},
          {var,{458,59},'Ts'}],
         [],
         [{debug_line,459,186},
          {call,
              {459,5},
              {atom,{459,5},ois_type_test},
              [{var,{459,19},'Src'},
               {var,{459,24},'Dst'},
               {block,0,
                   [{tuple,
                        {459,29},
                        [{atom,{459,29},t_map},
                         {atom,{459,29},any},
                         {atom,{459,29},any}]}]},
               {var,{459,39},'Is'},
               {var,{459,43},'Ts'}]}]},
     {clause,
         {460,1},
         [{cons,
              {460,8},
              {tuple,
                  {460,9},
                  [{atom,{460,9},b_set},
                   {var,{460,9},'_'},
                   {var,{460,39},'Dst'},
                   {tuple,
                       {460,19},
                       [{atom,{460,20},bif},{atom,{460,24},is_number}]},
                   {cons,{460,48},{var,{460,49},'Src'},{nil,{460,52}}}]},
              {var,{460,57},'Is'}},
          {var,{460,62},'Ts'}],
         [],
         [{debug_line,461,187},
          {call,
              {461,5},
              {atom,{461,5},ois_type_test},
              [{var,{461,19},'Src'},
               {var,{461,24},'Dst'},
               {block,0,
                   [{tuple,
                        {461,29},
                        [{atom,{461,29},t_number},{atom,{461,29},any}]}]},
               {var,{461,42},'Is'},
               {var,{461,46},'Ts'}]}]},
     {clause,
         {462,1},
         [{cons,
              {462,8},
              {tuple,
                  {462,9},
                  [{atom,{462,9},b_set},
                   {var,{462,9},'_'},
                   {var,{462,38},'Dst'},
                   {tuple,
                       {462,19},
                       [{atom,{462,20},bif},{atom,{462,24},is_tuple}]},
                   {cons,{462,47},{var,{462,48},'Src'},{nil,{462,51}}}]},
              {var,{462,56},'Is'}},
          {var,{462,61},'Ts'}],
         [],
         [{debug_line,463,188},
          {call,
              {463,5},
              {atom,{463,5},ois_type_test},
              [{var,{463,19},'Src'},
               {var,{463,24},'Dst'},
               {block,0,
                   [{tuple,
                        {463,29},
                        [{atom,{463,29},t_tuple},
                         {integer,{463,29},0},
                         {atom,{463,29},false},
                         {map,{463,29},[]}]}]},
               {var,{463,41},'Is'},
               {var,{463,45},'Ts'}]}]},
     {clause,
         {464,1},
         [{cons,
              {464,8},
              {tuple,
                  {464,9},
                  [{atom,{464,9},b_set},
                   {var,{464,9},'_'},
                   {var,{464,40},'Dst'},
                   {atom,{464,19},is_nonempty_list},
                   {cons,{464,49},{var,{464,50},'Src'},{nil,{464,53}}}]},
              {var,{464,58},'Is'}},
          {var,{464,63},'Ts'}],
         [],
         [{debug_line,465,189},
          {call,
              {465,5},
              {atom,{465,5},ois_type_test},
              [{var,{465,19},'Src'},
               {var,{465,24},'Dst'},
               {block,0,
                   [{tuple,
                        {465,29},
                        [{atom,{465,29},t_cons},
                         {atom,{465,29},any},
                         {atom,{465,29},any}]}]},
               {var,{465,40},'Is'},
               {var,{465,44},'Ts'}]}]},
     {clause,
         {466,1},
         [{cons,
              {466,8},
              {tuple,
                  {466,9},
                  [{atom,{466,9},b_set},
                   {var,{466,9},'_'},
                   {var,{466,39},'Dst'},
                   {atom,{466,19},is_tagged_tuple},
                   {cons,
                       {466,48},
                       {var,{466,49},'Src'},
                       {cons,
                           {466,54},
                           {var,{466,54},'Size'},
                           {cons,
                               {466,60},
                               {var,{466,60},'Tag'},
                               {nil,{466,63}}}}}]},
              {var,{466,68},'Is'}},
          {var,{466,73},'Ts'}],
         [],
         [{debug_line,467,190},
          {match,
              {467,5},
              {var,{467,5},'Es'},
              {call,
                  {467,10},
                  {remote,
                      {467,20},
                      {atom,{467,10},beam_types},
                      {atom,{467,21},set_tuple_element}},
                  [{integer,{467,39},1},
                   {block,0,
                       [{call,
                            {467,42},
                            {atom,{467,42},ois_get_type},
                            [{var,{467,55},'Tag'},{var,{467,60},'Ts'}]}]},
                   {block,0,[{map,{467,65},[]}]}]}},
          {debug_line,468,191},
          {match,
              {468,5},
              {tuple,{468,5},[{atom,{468,5},b_literal},{var,{468,20},'N'}]},
              {var,{468,25},'Size'}},
          {debug_line,470,192},
          {match,
              {470,5},
              {var,{470,5},'Type'},
              {tuple,
                  {470,12},
                  [{atom,{470,12},t_tuple},
                   {var,{470,37},'N'},
                   {atom,{470,27},true},
                   {var,{470,48},'Es'}]}},
          {debug_line,472,193},
          {call,
              {472,5},
              {atom,{472,5},ois_type_test},
              [{var,{472,19},'Src'},
               {var,{472,24},'Dst'},
               {var,{472,29},'Type'},
               {var,{472,35},'Is'},
               {var,{472,39},'Ts'}]}]},
     {clause,
         {473,1},
         [{cons,
              {473,8},
              {tuple,
                  {473,9},
                  [{atom,{473,9},b_set},
                   {var,{473,9},'_'},
                   {var,{473,40},'Dst'},
                   {tuple,
                       {473,19},
                       [{atom,{473,20},bif},{atom,{473,24},tuple_size}]},
                   {cons,{473,49},{var,{473,50},'Src'},{nil,{473,53}}}]},
              {var,{473,58},'Is'}},
          {var,{473,63},'Ts0'}],
         [],
         [{debug_line,474,194},
          {match,
              {474,5},
              {var,{474,5},'SrcType'},
              {call,
                  {474,15},
                  {atom,{474,15},ois_get_type},
                  [{var,{474,28},'Src'},{var,{474,33},'Ts0'}]}},
          {debug_line,475,195},
          {match,
              {475,5},
              {tuple,
                  {475,5},
                  [{var,{475,6},'Type'},
                   {var,{475,12},'_'},
                   {var,{475,15},'_'}]},
              {call,
                  {475,20},
                  {remote,
                      {475,35},
                      {atom,{475,20},beam_call_types},
                      {atom,{475,36},types}},
                  [{atom,{475,42},erlang},
                   {atom,{475,50},tuple_size},
                   {block,0,
                       [{cons,
                            {475,62},
                            {var,{475,63},'SrcType'},
                            {nil,{475,70}}}]}]}},
          {debug_line,476,196},
          {match,
              {476,5},
              {var,{476,5},'Ts'},
              {map,
                  {476,13},
                  {var,{476,10},'Ts0'},
                  [{map_field_assoc,
                       {476,20},
                       {var,{476,16},'Dst'},
                       {var,{476,23},'Type'}}]}},
          {debug_line,477,197},
          {call,
              {477,5},
              {atom,{477,5},ois_is},
              [{var,{477,12},'Is'},{var,{477,16},'Ts'}]}]},
     {clause,
         {478,1},
         [{cons,
              {478,8},
              {tuple,
                  {478,9},
                  [{atom,{478,9},b_set},
                   {var,{478,9},'_'},
                   {var,{479,20},'Dst'},
                   {tuple,
                       {478,19},
                       [{atom,{478,20},bif},{atom,{478,24},'=:='}]},
                   {cons,
                       {480,21},
                       {var,{480,22},'LHS'},
                       {cons,
                           {480,26},
                           {tuple,
                               {480,26},
                               [{atom,{480,26},b_literal},
                                {var,{480,41},'RHS'}]},
                           {nil,{480,45}}}}]},
              {var,{480,50},'Is'}},
          {var,{480,55},'Ts0'}],
         [],
         [{debug_line,481,198},
          {match,
              {481,5},
              {var,{481,5},'Type'},
              {'case',
                  {481,12},
                  {call,
                      {481,17},
                      {remote,
                          {481,27},
                          {atom,{481,17},beam_types},
                          {atom,{481,28},get_singleton_value}},
                      [{block,0,
                           [{call,
                                {481,48},
                                {atom,{481,48},ois_get_type},
                                [{var,{481,61},'LHS'},
                                 {var,{481,66},'Ts0'}]}]}]},
                  [{clause,
                       {482,16},
                       [{tuple,
                            {482,16},
                            [{atom,{482,17},ok},{var,{482,21},'RHS'}]}],
                       [],
                       [{debug_line,482,199},
                        {call,
                            {482,29},
                            {remote,
                                {482,39},
                                {atom,{482,29},beam_types},
                                {atom,{482,40},make_atom}},
                            [{atom,{482,50},true}]}]},
                   {clause,
                       {483,16},
                       [{tuple,
                            {483,16},
                            [{atom,{483,17},ok},{var,{483,21},'_Other'}]}],
                       [],
                       [{debug_line,483,200},
                        {call,
                            {483,32},
                            {remote,
                                {483,42},
                                {atom,{483,32},beam_types},
                                {atom,{483,43},make_atom}},
                            [{atom,{483,53},false}]}]},
                   {clause,
                       {484,16},
                       [{atom,{484,16},error}],
                       [],
                       [{debug_line,484,201},
                        {call,
                            {484,25},
                            {remote,
                                {484,35},
                                {atom,{484,25},beam_types},
                                {atom,{484,36},make_boolean}},
                            []}]}]}},
          {debug_line,486,202},
          {match,
              {486,5},
              {var,{486,5},'Ts'},
              {map,
                  {486,13},
                  {var,{486,10},'Ts0'},
                  [{map_field_assoc,
                       {486,20},
                       {var,{486,16},'Dst'},
                       {var,{486,23},'Type'}}]}},
          {debug_line,487,203},
          {call,
              {487,5},
              {atom,{487,5},ois_is},
              [{var,{487,12},'Is'},{var,{487,16},'Ts'}]}]},
     {clause,
         {488,1},
         [{cons,
              {488,8},
              {tuple,
                  {488,9},
                  [{atom,{488,9},b_set},
                   {var,{488,9},'_'},
                   {var,{488,9},'_'},
                   {var,{488,9},'_'},
                   {var,{488,9},'_'}]},
              {var,{488,20},'Is'}},
          {var,{488,25},'Ts'}],
         [],
         [{debug_line,489,204},
          {call,
              {489,5},
              {atom,{489,5},ois_is},
              [{var,{489,12},'Is'},{var,{489,16},'Ts'}]}]},
     {clause,
         {490,1},
         [{nil,{490,8}},{var,{490,12},'Ts'}],
         [],
         [{debug_line,491,205},
          {tuple,{491,5},[{atom,{491,6},ok},{var,{491,10},'Ts'}]}]}]}.
{function,
    {493,1},
    ois_type_test,5,
    [{clause,
         {493,1},
         [{var,{493,1},'_'},
          {var,{493,1},'_'},
          {var,{493,1},'_'},
          {var,{493,1},'_'},
          {var,{493,1},'_'}],
         [[{call,
               {493,1},
               {remote,
                   {493,1},
                   {atom,{493,1},fake},
                   {atom,{493,1},is_beam_bif_info}},
               []}]],
         [{debug_line,493,206},{atom,{493,1},ignore}]},
     {clause,
         {493,1},
         [{var,{493,15},'Src'},
          {var,{493,20},'Dst'},
          {var,{493,25},'RequiredType'},
          {var,{493,39},'Is'},
          {var,{493,43},'Ts0'}],
         [],
         [{debug_line,494,207},
          {match,
              {494,5},
              {var,{494,5},'GivenType'},
              {call,
                  {494,17},
                  {atom,{494,17},ois_get_type},
                  [{var,{494,30},'Src'},{var,{494,35},'Ts0'}]}},
          {debug_line,495,208},
          {match,
              {495,5},
              {var,{495,5},'Type'},
              {'case',
                  {495,12},
                  {call,
                      {495,17},
                      {remote,
                          {495,27},
                          {atom,{495,17},beam_types},
                          {atom,{495,28},meet}},
                      [{var,{495,33},'GivenType'},
                       {var,{495,44},'RequiredType'}]},
                  [{clause,
                       {496,16},
                       [{var,{496,16},'GivenType'}],
                       [],
                       [{debug_line,496,209},
                        {call,
                            {496,29},
                            {remote,
                                {496,39},
                                {atom,{496,29},beam_types},
                                {atom,{496,40},make_atom}},
                            [{atom,{496,50},true}]}]},
                   {clause,
                       {497,16},
                       [{atom,{497,16},none}],
                       [],
                       [{debug_line,497,210},
                        {call,
                            {497,24},
                            {remote,
                                {497,34},
                                {atom,{497,24},beam_types},
                                {atom,{497,35},make_atom}},
                            [{atom,{497,45},false}]}]},
                   {clause,
                       {498,16},
                       [{var,{498,16},'_Other'}],
                       [],
                       [{debug_line,498,211},
                        {call,
                            {498,26},
                            {remote,
                                {498,36},
                                {atom,{498,26},beam_types},
                                {atom,{498,37},make_boolean}},
                            []}]}]}},
          {debug_line,500,212},
          {match,
              {500,5},
              {var,{500,5},'Ts'},
              {map,
                  {500,13},
                  {var,{500,10},'Ts0'},
                  [{map_field_assoc,
                       {500,20},
                       {var,{500,16},'Dst'},
                       {var,{500,23},'Type'}}]}},
          {debug_line,501,213},
          {call,
              {501,5},
              {atom,{501,5},ois_is},
              [{var,{501,12},'Is'},{var,{501,16},'Ts'}]}]}]}.
{function,
    {503,1},
    ois_get_type,2,
    [{clause,
         {503,1},
         [{var,{503,1},'_'},{var,{503,1},'_'}],
         [[{call,
               {503,1},
               {remote,
                   {503,1},
                   {atom,{503,1},fake},
                   {atom,{503,1},is_beam_bif_info}},
               []}]],
         [{debug_line,503,214},{atom,{503,1},ignore}]},
     {clause,
         {503,1},
         [{tuple,{503,14},[{atom,{503,14},b_literal},{var,{503,29},'Value'}]},
          {var,{503,37},'_Ts'}],
         [],
         [{debug_line,504,215},
          {call,
              {504,5},
              {remote,
                  {504,15},
                  {atom,{504,5},beam_types},
                  {atom,{504,16},make_type_from_value}},
              [{var,{504,37},'Value'}]}]},
     {clause,
         {505,1},
         [{match,
              {505,14},
              {tuple,{505,14},[{atom,{505,14},b_var},{var,{505,14},'_'}]},
              {var,{505,23},'Arg'}},
          {var,{505,28},'Ts'}],
         [],
         [{debug_line,506,216},
          {'case',
              {506,5},
              {var,{506,10},'Ts'},
              [{clause,
                   {507,9},
                   [{map,
                        {507,9},
                        [{map_field_exact,
                             {507,16},
                             {var,{507,12},'Arg'},
                             {var,{507,19},'Type'}}]}],
                   [],
                   [{debug_line,507,217},{var,{507,29},'Type'}]},
               {clause,
                   {508,9},
                   [{map,{508,9},[]}],
                   [],
                   [{debug_line,508,218},{atom,{508,16},any}]}]}]}]}.
{eof,{510,1}}.
