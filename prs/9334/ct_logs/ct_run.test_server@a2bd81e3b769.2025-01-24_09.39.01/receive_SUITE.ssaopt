module receive_SUITE.
exports [{after_expression,1},
         {all,0},
         {bs_get_tail,1},
         {coverage,1},
         {double_recv,1},
         {elusive_common_exit,1},
         {end_per_group,2},
         {end_per_suite,1},
         {end_per_testcase,2},
         {export,1},
         {groups,0},
         {in_after,1},
         {init_per_group,2},
         {init_per_suite,1},
         {init_per_testcase,2},
         {match_built_terms,1},
         {module_info,0},
         {module_info,1},
         {otp_7980,1},
         {receive_var_zero,1},
         {recv,1},
         {recv_in_try,1},
         {ref_opt,1},
         {return_before_receive,1},
         {suite,0},
         {trapping,1},
         {type_optimized_markers,1},
         {wait,1}].
attributes [].

%% receive_SUITE.erl:37
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`init_per_testcase`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% receive_SUITE.erl:40
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`end_per_testcase`(_0, _1) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:43
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`suite`() {
0:
  %% Result type:
  %%    nonempty_list({'ct_hooks', nonempty_list('ts_install_cth')} | {'timetrap', {'minutes', 2}})
  ret `[{ct_hooks,[ts_install_cth]},{timetrap,{minutes,2}}]`
}

%% receive_SUITE.erl:47
%% Counter = 7
%% bs_ensure_opt: true
function `receive_SUITE`:`all`() {
0:
  %% receive_SUITE.erl:48
  %% Result type:
  %%    nonempty_list({'group', 'slow'})
  _0 = call (`slow_group`/0)

  %% Unique:
  %%    _0
  _5 = succeeded:body _0
  br _5, ^5, ^1

5:
  %% receive_SUITE.erl:48
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`'++'`/2), _0, `[{group,p}]`
  %% Result type:
  %%    nonempty_list({'group', 'p' | 'slow'})
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:50
%% Counter = 7
%% bs_ensure_opt: true
function `receive_SUITE`:`groups`() {
0:
  %% receive_SUITE.erl:51
  _0 = call (`test_lib`:`parallel`/0)

  %% Aliased:
  %%    _0
  _6 = succeeded:body _0
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _2 = put_tuple `p`, _0, `[recv,coverage,otp_7980,export,wait,recv_in_try,double_recv,receive_var_zero,
  match_built_terms,elusive_common_exit,return_before_receive,trapping,
  after_expression,in_after,type_optimized_markers,bs_get_tail]`

  %% Argument types:
  %%    _2 => {'p', any(), nonempty_list(atom())}
  %% Unique:
  %%    _2
  _3 = put_list _2, `[{slow,[],[ref_opt]}]`
  %% Result type:
  %%    nonempty_list({'p', any(), nonempty_list(atom())} | {'slow', nil(), nonempty_list('ref_opt')})
  %% Unique:
  %%    _3
  ret _3

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% receive_SUITE.erl:61
%% Counter = 6
%% bs_ensure_opt: true
function `receive_SUITE`:`init_per_suite`(_0) {
0:
  %% receive_SUITE.erl:62
  _2 = call (`test_lib`:`recompile`/1), `receive_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _0
  ret _0

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:65
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`end_per_suite`(_0) {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:68
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`init_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% receive_SUITE.erl:71
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`end_per_group`(_0, _1) {
0:
  %% Aliased:
  %%    _1
  ret _1
}

%% receive_SUITE.erl:74
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`slow_group`() {
0:
  %% Result type:
  %%    nonempty_list({'group', 'slow'})
  ret `[{group,slow}]`
}

%% receive_SUITE.erl:86
%% Counter = 81
%% bs_ensure_opt: true
function `receive_SUITE`:`recv`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _36 = bif:is_list _0
  br _36, ^36, ^35

36:
  %% Result type:
  %%    none()
  _1 = make_fun (`'-recv/1-fun-0-'`/0)

  %% receive_SUITE.erl:87
  %% Aliased:
  %%    _1
  Pid = call (`erlang`:`spawn_link`/1), _1

  %% Aliased:
  %%    Pid
  _37 = succeeded:body Pid
  br _37, ^37, ^1

37:
  %% receive_SUITE.erl:88
  %% Argument types:
  %%    
  Self = bif:self

  %% Argument types:
  %%    Self => pid()
  %% Unique:
  %%    Self
  _11 = put_tuple Self, `test`

  %% receive_SUITE.erl:89
  %% Aliased:
  %%    Pid
  %% Unique:
  %%    _11
  _20 = call (`erlang`:`'!'`/2), Pid, _11

  %% Aliased:
  %%    _20
  _38 = succeeded:body _20
  br _38, ^38, ^1

38:
  br ^12

12:
  %% receive_SUITE.erl:90
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _61 = succeeded:guard _5
  br _61, ^60, ^59

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _56 = bif:is_tuple _5
  br _56, ^56, ^48

56:
  %% Argument types:
  %%    _5 => {...}
  %% Aliased:
  %%    _5
  _57 = bif:tuple_size _5

  %% Argument types:
  %%    _57 => 0..16777215
  %% Unique:
  %%    _57
  _58 = bif:'=:=' _57, `2`
  br _58, ^55, ^48

55:
  %% Argument types:
  %%    _5 => {any(), any()}
  %% Aliased:
  %%    _5
  _15 = get_tuple_element _5, `0`

  %% Argument types:
  %%    _5 => {any(), any()}
  %% Aliased:
  %%    _5
  _14 = get_tuple_element _5, `1`
  switch _15, ^48, [
    { `error`, ^53 },
    { `ok`, ^54 }
  ]

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _50 = bif:'=:=' _14, `test`
  br _50, ^49, ^48

49:
  _24 = remove_message
  br ^40

53:
  _21 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _16 = put_list _14, `[]`

  %% receive_SUITE.erl:93
  %% Unique:
  %%    _16
  _22 = call (`io`:`format`/2), `"Got unpexected ~p"`, _16

  %% Aliased:
  %%    _22
  _51 = succeeded:body _22
  br _51, ^51, ^1

51:
  %% receive_SUITE.erl:94
  _23 = call (`ct`:`fail`/1), `unexpected`

  %% Aliased:
  %%    _23
  _52 = succeeded:body _23
  br _52, ^40, ^1

48:
  _25 = recv_next
  br ^12

59:
  _41 = wait_timeout `10000`

  %% Unique:
  %%    _41
  _42 = succeeded:body _41
  br _42, ^42, ^1

42:
  br _41, ^46, ^45

46:
  %% receive_SUITE.erl:96
  _26 = call (`ct`:`fail`/1), `no_answer`

  %% Aliased:
  %%    _26
  _44 = succeeded:body _26
  br _44, ^40, ^1

40:
  br ^17

17:
  %% receive_SUITE.erl:98
  _8 = peek_message `none`

  %% Aliased:
  %%    _8
  _75 = succeeded:guard _8
  br _75, ^73, ^74

73:
  _27 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _18 = put_list _8, `[]`

  %% receive_SUITE.erl:100
  %% Unique:
  %%    _18
  _28 = call (`io`:`format`/2), `"Unexpected extra message: ~p"`, _18

  %% Aliased:
  %%    _28
  _71 = succeeded:body _28
  br _71, ^71, ^1

71:
  %% receive_SUITE.erl:101
  _29 = call (`ct`:`fail`/1), `unexpected`

  %% Aliased:
  %%    _29
  _72 = succeeded:body _29
  br _72, ^63, ^1

74:
  _64 = wait_timeout `10`

  %% Unique:
  %%    _64
  _65 = succeeded:body _64
  br _65, ^65, ^1

65:
  br _64, ^70, ^69

70:
  %% receive_SUITE.erl:103
  %% Aliased:
  %%    Pid
  _30 = call (`erlang`:`unlink`/1), Pid

  %% Aliased:
  %%    _30
  _67 = succeeded:body _30
  br _67, ^67, ^1

67:
  %% receive_SUITE.erl:104
  %% Aliased:
  %%    Pid
  _31 = call (`erlang`:`exit`/2), Pid, `kill`

  %% Aliased:
  %%    _31
  _68 = succeeded:body _31
  br _68, ^63, ^1

63:
  %% Result type:
  %%    'ok'
  ret `ok`

69:
  br ^17

45:
  br ^12

35:
  %% receive_SUITE.erl:86
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-recv/1-',1}}
  _32 = match_fail `function_clause`, _0

  %% Unique:
  %%    _32
  _76 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% receive_SUITE.erl:109
%% Counter = 75
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'state', 'true'}
function `receive_SUITE`:`loop`(_0) {
0:
  br ^12

12:
  %% receive_SUITE.erl:110
  _9 = peek_message `none`

  %% Aliased:
  %%    _9
  _65 = succeeded:guard _9
  br _65, ^31, ^64

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _54 = bif:is_tuple _9
  br _54, ^54, ^48

54:
  %% Argument types:
  %%    _9 => {...}
  %% Aliased:
  %%    _9
  _55 = bif:tuple_size _9

  %% Argument types:
  %%    _55 => 0..16777215
  %% Unique:
  %%    _55
  _56 = bif:'=:=' _55, `2`
  br _56, ^53, ^48

53:
  %% Argument types:
  %%    _9 => {any(), any()}
  %% Aliased:
  %%    _9
  _13 = get_tuple_element _9, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _52 = bif:'=:=' _13, `test`
  br _52, ^51, ^48

51:
  _21 = remove_message

  %% Argument types:
  %%    _9 => {any(), 'test'}
  %% Aliased:
  %%    _9
  _14 = get_tuple_element _9, `0`

  %% receive_SUITE.erl:114
  %% Aliased:
  %%    _14
  _22 = call (`erlang`:`'!'`/2), _14, `{ok,test}`

  %% Aliased:
  %%    _22
  _49 = succeeded:body _22
  br _49, ^49, ^1

49:
  %% receive_SUITE.erl:115
  %% Result type:
  %%    none()
  _23 = call (`loop`/1), `{state,true}`
  _50 = succeeded:body _23
  br ^1

48:
  _24 = remove_message

  %% receive_SUITE.erl:117
  %% Result type:
  %%    none()
  _25 = call (`loop`/1), `{state,true}`
  _57 = succeeded:body _25
  br ^1

64:
  _58 = wait_timeout `infinity`

  %% Unique:
  %%    _58
  _59 = succeeded:body _58
  br _59, ^62, ^1

62:
  br ^12

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% receive_SUITE.erl:120
%% Counter = 461
%% bs_ensure_opt: true
function `receive_SUITE`:`coverage`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _167 = bif:is_list _0
  br _167, ^167, ^166

167:
  %% receive_SUITE.erl:121
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:121
  %% Unique:
  %%    _1
  _102 = call (`do_link`/1), _1

  %% Aliased:
  %%    _102
  _168 = succeeded:body _102
  br _168, ^168, ^1

168:
  %% receive_SUITE.erl:122
  %% Argument types:
  %%    
  _2 = bif:self

  %% receive_SUITE.erl:122
  %% Unique:
  %%    _2
  _103 = call (`do_unlink`/1), _2

  %% Aliased:
  %%    _103
  _169 = succeeded:body _103
  br _169, ^169, ^1

169:
  %% receive_SUITE.erl:123
  %% Argument types:
  %%    
  _3 = bif:node

  %% receive_SUITE.erl:123
  %% Unique:
  %%    _3
  _104 = call (`do_monitor_node`/2), _3, `true`

  %% Aliased:
  %%    _104
  _170 = succeeded:body _104
  br _170, ^170, ^1

170:
  %% receive_SUITE.erl:124
  %% Argument types:
  %%    
  _4 = bif:node

  %% receive_SUITE.erl:124
  %% Unique:
  %%    _4
  _105 = call (`do_monitor_node`/2), _4, `false`

  %% Aliased:
  %%    _105
  _171 = succeeded:body _105
  br _171, ^171, ^1

171:
  %% receive_SUITE.erl:125
  _6 = call (`erlang`:`group_leader`/0)

  %% receive_SUITE.erl:125
  %% Argument types:
  %%    
  _5 = bif:self

  %% receive_SUITE.erl:125
  %% Aliased:
  %%    _6
  %% Unique:
  %%    _5
  _106 = call (`do_group_leader`/2), _6, _5

  %% Aliased:
  %%    _106
  _173 = succeeded:body _106
  br _173, ^173, ^1

173:
  %% receive_SUITE.erl:126
  %% Argument types:
  %%    
  _7 = bif:self

  %% receive_SUITE.erl:126
  %% Argument types:
  %%    _7 => pid()
  %% Unique:
  %%    _7
  _8 = bif:node _7

  %% receive_SUITE.erl:126
  %% Unique:
  %%    _8
  _107 = call (`id`/1), _8

  %% Aliased:
  %%    _107
  _175 = succeeded:body _107
  br _175, ^175, ^1

175:
  %% receive_SUITE.erl:128
  %% Argument types:
  %%    
  _9 = bif:self

  %% receive_SUITE.erl:128
  %% Unique:
  %%    _9
  _108 = call (`erlang`:`'!'`/2), _9, `{a,10}`

  %% Aliased:
  %%    _108
  _176 = succeeded:body _108
  br _176, ^176, ^1

176:
  %% receive_SUITE.erl:129
  %% Argument types:
  %%    
  _10 = bif:self

  %% receive_SUITE.erl:129
  %% Unique:
  %%    _10
  _109 = call (`erlang`:`'!'`/2), _10, `{b,20}`

  %% Aliased:
  %%    _109
  _177 = succeeded:body _109
  br _177, ^177, ^1

177:
  %% receive_SUITE.erl:130
  %% Result type:
  %%    list(any())
  _75 = call (`receive_all`/0)

  %% Unique:
  %%    _75
  _178 = succeeded:body _75
  br _178, ^178, ^1

178:
  %% Argument types:
  %%    _75 => list(any())
  %% Unique:
  %%    _75
  _374 = bif:'=:=' _75, `[{a,10},{b,20}]`
  br _374, ^374, ^180

374:
  %% receive_SUITE.erl:131
  %% Argument types:
  %%    
  _12 = bif:self

  %% receive_SUITE.erl:131
  %% Unique:
  %%    _12
  _110 = call (`erlang`:`'!'`/2), _12, `{c,42}`

  %% Aliased:
  %%    _110
  _181 = succeeded:body _110
  br _181, ^181, ^1

181:
  br ^76

76:
  %% receive_SUITE.erl:132
  _63 = peek_message `none`

  %% Aliased:
  %%    _63
  _195 = succeeded:guard _63
  br _195, ^193, ^194

193:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _63
  _186 = bif:'=:=' _63, `{c,42}`
  br _186, ^186, ^185

186:
  _112 = remove_message

  %% receive_SUITE.erl:139
  %% Argument types:
  %%    
  _13 = bif:self

  %% receive_SUITE.erl:139
  %% Unique:
  %%    _13
  _114 = call (`erlang`:`'!'`/2), _13, `17`

  %% Aliased:
  %%    _114
  _196 = succeeded:body _114
  br _196, ^196, ^1

196:
  %% receive_SUITE.erl:140
  %% Argument types:
  %%    
  _14 = bif:self

  %% receive_SUITE.erl:140
  %% Unique:
  %%    _14
  _115 = call (`erlang`:`'!'`/2), _14, `19`

  %% Aliased:
  %%    _115
  _197 = succeeded:body _115
  br _197, ^197, ^1

197:
  %% receive_SUITE.erl:141
  %% Result type:
  %%    number()
  _77 = call (`tuple_to_values`/2), `infinity`, `x`

  %% Unique:
  %%    _77
  _198 = succeeded:body _77
  br _198, ^198, ^1

198:
  %% Argument types:
  %%    _77 => number()
  %% Unique:
  %%    _77
  _372 = bif:'=:=' _77, `59`
  br _372, ^371, ^200

371:
  %% receive_SUITE.erl:142
  %% Result type:
  %%    number()
  _78 = call (`tuple_to_values`/2), `999999`, `x`

  %% Unique:
  %%    _78
  _201 = succeeded:body _78
  br _201, ^201, ^1

201:
  %% Argument types:
  %%    _78 => number()
  %% Unique:
  %%    _78
  _369 = bif:'=:=' _78, `61`
  br _369, ^368, ^203

368:
  %% receive_SUITE.erl:143
  %% Result type:
  %%    number()
  _79 = call (`tuple_to_values`/2), `1`, `x`

  %% Unique:
  %%    _79
  _204 = succeeded:body _79
  br _204, ^204, ^1

204:
  %% Argument types:
  %%    _79 => number()
  %% Unique:
  %%    _79
  _366 = bif:'=:=' _79, `0`
  br _366, ^365, ^206

365:
  %% receive_SUITE.erl:145
  %% Argument types:
  %%    
  _18 = bif:self
  _210 = new_try_tag `'catch'`
  br _210, ^393, ^209

393:
  %% receive_SUITE.erl:145
  %% Result type:
  %%    none()
  %% Unique:
  %%    _18
  _117 = call (`monitor_plus_badmap`/1), _18

  %% Aliased:
  %%    _117
  _212 = succeeded:body _117
  br ^209

209:
  %% Unique:
  %%    _210
  _215 = landingpad `'catch'`, _210

  %% Aliased:
  %%    _215
  _213 = extract _215, `0`
  br ^207

207:
  %% Aliased:
  %%    _213
  %% Unique:
  %%    _210
  _19 = catch_end _210, _213

  %% Argument types:
  %%    
  %% Aliased:
  %%    _19
  _361 = is_tagged_tuple _19, `2`, `'EXIT'`
  br _361, ^358, ^218

358:
  %% Argument types:
  %%    _19 => {''EXIT'', any()}
  %% Aliased:
  %%    _19
  _80 = get_tuple_element _19, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _80
  _355 = bif:is_tuple _80
  br _355, ^355, ^218

355:
  %% Argument types:
  %%    _80 => {...}
  %% Aliased:
  %%    _80
  _356 = bif:tuple_size _80

  %% Argument types:
  %%    _356 => 0..16777215
  %% Unique:
  %%    _356
  _357 = bif:'=:=' _356, `2`
  br _357, ^354, ^218

354:
  %% Argument types:
  %%    _80 => {any(), any()}
  %% Aliased:
  %%    _80
  _83 = get_tuple_element _80, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _83
  _353 = bif:'=:=' _83, `{badmap,[]}`
  br _353, ^353, ^218

353:
  %% receive_SUITE.erl:148
  %% Argument types:
  %%    
  _21 = bif:self

  %% receive_SUITE.erl:148
  %% Unique:
  %%    _21
  _118 = call (`erlang`:`'!'`/2), _21, `{data,no_data}`

  %% Aliased:
  %%    _118
  _219 = succeeded:body _118
  br _219, ^219, ^1

219:
  %% receive_SUITE.erl:149
  _84 = call (`receive_sink_tuple`/1), `{any,pattern}`

  %% Aliased:
  %%    _84
  _220 = succeeded:body _84
  br _220, ^220, ^1

220:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _84
  _351 = bif:'=:=' _84, `ok`
  br _351, ^350, ^222

350:
  %% receive_SUITE.erl:150
  _85 = call (`receive_sink_tuple`/1), `{a,b}`

  %% Aliased:
  %%    _85
  _223 = succeeded:body _85
  br _223, ^223, ^1

223:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _85
  _348 = bif:'=:=' _85, `{b,a}`
  br _348, ^348, ^225

348:
  %% Result type:
  %%    none()
  _24 = make_fun (`no_clauses_left_1`/0)

  %% receive_SUITE.erl:153
  %% Aliased:
  %%    _24
  _119 = call (`smoke_receive`/1), _24

  %% Aliased:
  %%    _119
  _226 = succeeded:body _119
  br _226, ^226, ^1

226:
  %% Result type:
  %%    none()
  _25 = make_fun (`no_clauses_left_2`/0)

  %% receive_SUITE.erl:154
  %% Aliased:
  %%    _25
  _120 = call (`smoke_receive`/1), _25

  %% Aliased:
  %%    _120
  _227 = succeeded:body _120
  br _227, ^227, ^1

227:
  %% Result type:
  %%    none()
  _26 = make_fun (`no_clauses_left_3`/0)

  %% receive_SUITE.erl:155
  %% Aliased:
  %%    _26
  _121 = call (`smoke_receive`/1), _26

  %% Aliased:
  %%    _121
  _228 = succeeded:body _121
  br _228, ^228, ^1

228:
  %% receive_SUITE.erl:157
  %% Result type:
  %%    'ok'
  _122 = call (`receive_in_called_function`/0)

  %% Unique:
  %%    _122
  _229 = succeeded:body _122
  br _229, ^229, ^1

229:
  %% receive_SUITE.erl:161
  _377 = recv_marker_reserve

  %% receive_SUITE.erl:161
  Ref = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _377
  _378 = recv_marker_bind _377, Ref
  br ^86

86:
  %% receive_SUITE.erl:162
  %% Aliased:
  %%    Ref
  _66 = peek_message Ref

  %% Aliased:
  %%    _66
  _243 = succeeded:guard _66
  br _243, ^242, ^241

242:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _66
  %% Unique:
  %%    Ref
  _240 = bif:'=:=' _66, Ref
  br _240, ^382, ^239

382:
  %% Aliased:
  %%    Ref
  _379 = recv_marker_clear Ref
  _123 = remove_message
  br ^232

239:
  _124 = recv_next
  br ^86

241:
  _233 = wait_timeout `0`

  %% Unique:
  %%    _233
  _234 = succeeded:body _233
  br _234, ^234, ^1

234:
  br _233, ^381, ^237

381:
  %% Aliased:
  %%    Ref
  _380 = recv_marker_clear Ref
  br ^232

232:
  %% receive_SUITE.erl:165
  %% Argument types:
  %%    
  _28 = bif:self

  %% receive_SUITE.erl:165
  %% Unique:
  %%    _28
  _125 = call (`erlang`:`'!'`/2), _28, `ok`

  %% Aliased:
  %%    _125
  _244 = succeeded:body _125
  br _244, ^244, ^1

244:
  %% receive_SUITE.erl:165
  %% Result type:
  %%    'ok'
  _88 = call (`mc_fail_requests`/0)

  %% Unique:
  %%    _88
  _245 = succeeded:body _88
  br _245, ^345, ^1

345:
  %% receive_SUITE.erl:166
  %% Argument types:
  %%    
  _30 = bif:self

  %% receive_SUITE.erl:166
  %% Unique:
  %%    _30
  _126 = call (`erlang`:`'!'`/2), _30, `{error,true}`

  %% Aliased:
  %%    _126
  _248 = succeeded:body _126
  br _248, ^248, ^1

248:
  %% receive_SUITE.erl:166
  %% Result type:
  %%    'ok'
  _89 = call (`mc_fail_requests`/0)

  %% Unique:
  %%    _89
  _249 = succeeded:body _89
  br _249, ^342, ^1

342:
  %% receive_SUITE.erl:167
  %% Argument types:
  %%    
  _32 = bif:self

  %% receive_SUITE.erl:167
  %% Unique:
  %%    _32
  _127 = call (`erlang`:`'!'`/2), _32, `{error,false}`

  %% Aliased:
  %%    _127
  _252 = succeeded:body _127
  br _252, ^252, ^1

252:
  %% receive_SUITE.erl:167
  %% Argument types:
  %%    
  _33 = bif:self

  %% receive_SUITE.erl:167
  %% Unique:
  %%    _33
  _128 = call (`erlang`:`'!'`/2), _33, `{'DOWN',false}`

  %% Aliased:
  %%    _128
  _253 = succeeded:body _128
  br _253, ^253, ^1

253:
  %% receive_SUITE.erl:167
  %% Result type:
  %%    'ok'
  _90 = call (`mc_fail_requests`/0)

  %% Unique:
  %%    _90
  _254 = succeeded:body _90
  br _254, ^339, ^1

339:
  %% receive_SUITE.erl:170
  %% Argument types:
  %%    
  _36 = bif:self

  %% receive_SUITE.erl:170
  %% Unique:
  %%    _36
  _129 = call (`erlang`:`'!'`/2), _36, `{{commit,[]},pre_commit}`

  %% Aliased:
  %%    _129
  _257 = succeeded:body _129
  br _257, ^257, ^1

257:
  %% receive_SUITE.erl:171
  %% Argument types:
  %%    
  _37 = bif:self

  %% receive_SUITE.erl:171
  %% Unique:
  %%    _37
  _130 = call (`erlang`:`'!'`/2), _37, `{{commit,[]},committed}`

  %% Aliased:
  %%    _130
  _258 = succeeded:body _130
  br _258, ^258, ^1

258:
  %% receive_SUITE.erl:172
  %% Result type:
  %%    'ok'
  _91 = call (`commit_participant`/2), `whatever`, `{commit,[]}`

  %% Unique:
  %%    _91
  _259 = succeeded:body _91
  br _259, ^336, ^1

336:
  %% Result type:
  %%    'ok'
  _39 = make_fun (`'-coverage/1-fun-0-'`/0)

  %% receive_SUITE.erl:176
  %% Aliased:
  %%    _39
  X = call (`id`/1), _39

  %% Aliased:
  %%    X
  _262 = succeeded:body X
  br _262, ^262, ^1

262:
  %% receive_SUITE.erl:177
  %% Argument types:
  %%    
  _41 = bif:self

  %% receive_SUITE.erl:177
  %% Unique:
  %%    _41
  _131 = call (`erlang`:`'!'`/2), _41, `whatever`

  %% Aliased:
  %%    _131
  _263 = succeeded:body _131
  br _263, ^457, ^1

457:
  br ^459

459:
  _268 = new_try_tag `'try'`
  br _268, ^267, ^265

267:
  %% receive_SUITE.erl:179
  %% Argument types:
  %%    
  %% Aliased:
  %%    X
  _134 = call X

  %% Aliased:
  %%    _134
  _269 = succeeded:body _134
  br _269, ^269, ^265

269:
  %% Unique:
  %%    _268
  _275 = kill_try_tag _268

  %% receive_SUITE.erl:178
  %% Result type:
  %%    'ok'
  _135 = call (`'-coverage/1-after$^1/0-0-'`/0)

  %% Unique:
  %%    _135
  _270 = succeeded:body _135
  br _270, ^266, ^1

266:
  %% receive_SUITE.erl:192
  %% Argument types:
  %%    
  _48 = bif:self

  %% receive_SUITE.erl:192
  %% Unique:
  %%    _48
  _138 = call (`erlang`:`'!'`/2), _48, `whatever`

  %% Aliased:
  %%    _138
  _276 = succeeded:body _138
  br _276, ^458, ^1

458:
  br ^460

460:
  _280 = new_try_tag `'catch'`
  br _280, ^278, ^279

278:
  br ^93

93:
  %% receive_SUITE.erl:193
  _72 = peek_message `none`

  %% Aliased:
  %%    _72
  _295 = succeeded:guard _72
  br _295, ^293, ^294

293:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _287 = bif:'=:=' _72, `whatever`
  br _287, ^286, ^285

286:
  _143 = remove_message

  %% receive_SUITE.erl:193
  _148 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _148
  _305 = succeeded:body _148
  br ^279

285:
  _144 = recv_next
  br ^93

294:
  _288 = wait_timeout `infinity`

  %% Unique:
  %%    _288
  _289 = succeeded:body _288
  br _289, ^292, ^279

292:
  br ^93

279:
  %% Unique:
  %%    _280
  _308 = landingpad `'catch'`, _280

  %% Aliased:
  %%    _308
  _306 = extract _308, `0`
  br ^277

277:
  %% Aliased:
  %%    _306
  %% Unique:
  %%    _280
  _52 = catch_end _280, _306

  %% Argument types:
  %%    
  %% Aliased:
  %%    _52
  _332 = is_tagged_tuple _52, `2`, `'EXIT'`
  br _332, ^329, ^311

329:
  %% Argument types:
  %%    _52 => {''EXIT'', any()}
  %% Aliased:
  %%    _52
  _95 = get_tuple_element _52, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _95
  _326 = bif:is_tuple _95
  br _326, ^326, ^311

326:
  %% Argument types:
  %%    _95 => {...}
  %% Aliased:
  %%    _95
  _327 = bif:tuple_size _95

  %% Argument types:
  %%    _327 => 0..16777215
  %% Unique:
  %%    _327
  _328 = bif:'=:=' _327, `2`
  br _328, ^325, ^311

325:
  %% Argument types:
  %%    _95 => {any(), any()}
  %% Aliased:
  %%    _95
  _98 = get_tuple_element _95, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _98
  _322 = is_tagged_tuple _98, `2`, `badmatch`
  br _322, ^319, ^311

319:
  %% receive_SUITE.erl:196
  %% Argument types:
  %%    
  _54 = bif:self

  %% receive_SUITE.erl:196
  %% Unique:
  %%    _54
  _149 = call (`erlang`:`'!'`/2), _54, `0`

  %% Aliased:
  %%    _149
  _312 = succeeded:body _149
  br _312, ^312, ^1

312:
  %% receive_SUITE.erl:197
  _101 = call (`receive_in_try_and_after`/0)

  %% Aliased:
  %%    _101
  _313 = succeeded:body _101
  br _313, ^313, ^1

313:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _101
  _317 = bif:'=:=' _101, `42`
  br _317, ^316, ^315

316:
  %% Result type:
  %%    'ok'
  ret `ok`

315:
  %% receive_SUITE.erl:197
  %% Aliased:
  %%    _101
  _150 = match_fail `badmatch`, _101

  %% Unique:
  %%    _150
  _318 = succeeded:body _150
  br ^1

311:
  %% receive_SUITE.erl:193
  %% Aliased:
  %%    _52
  _151 = match_fail `badmatch`, _52

  %% Unique:
  %%    _151
  _335 = succeeded:body _151
  br ^1

265:
  %% Unique:
  %%    _268
  _273 = landingpad `'try'`, _268

  %% Aliased:
  %%    _273
  _46 = extract _273, `1`

  %% Aliased:
  %%    _273
  _45 = extract _273, `2`

  %% Unique:
  %%    _268
  _274 = kill_try_tag _268
  br ^408

408:
  %% receive_SUITE.erl:178
  %% Result type:
  %%    'ok'
  _136 = call (`'-coverage/1-after$^1/0-0-'`/0)

  %% Unique:
  %%    _136
  _271 = succeeded:body _136
  br _271, ^271, ^1

271:
  %% Aliased:
  %%    _45, 
  %%    _46
  _137 = resume _45, _46

  %% Unique:
  %%    _137
  _272 = succeeded:body _137
  br ^1

237:
  br ^86

225:
  %% receive_SUITE.erl:150
  %% Aliased:
  %%    _85
  _156 = match_fail `badmatch`, _85

  %% Unique:
  %%    _156
  _349 = succeeded:body _156
  br ^1

222:
  %% receive_SUITE.erl:149
  %% Aliased:
  %%    _84
  _157 = match_fail `badmatch`, _84

  %% Unique:
  %%    _157
  _352 = succeeded:body _157
  br ^1

218:
  %% receive_SUITE.erl:145
  %% Aliased:
  %%    _19
  _158 = match_fail `badmatch`, _19

  %% Unique:
  %%    _158
  _364 = succeeded:body _158
  br ^1

206:
  %% receive_SUITE.erl:143
  %% Unique:
  %%    _79
  _159 = match_fail `badmatch`, _79

  %% Unique:
  %%    _159
  _367 = succeeded:body _159
  br ^1

203:
  %% receive_SUITE.erl:142
  %% Unique:
  %%    _78
  _160 = match_fail `badmatch`, _78

  %% Unique:
  %%    _160
  _370 = succeeded:body _160
  br ^1

200:
  %% receive_SUITE.erl:141
  %% Unique:
  %%    _77
  _161 = match_fail `badmatch`, _77

  %% Unique:
  %%    _161
  _373 = succeeded:body _161
  br ^1

185:
  _113 = recv_next
  br ^76

194:
  _187 = wait_timeout `infinity`

  %% Unique:
  %%    _187
  _188 = succeeded:body _187
  br _188, ^191, ^1

191:
  br ^76

180:
  %% receive_SUITE.erl:130
  %% Unique:
  %%    _75
  _162 = match_fail `badmatch`, _75

  %% Unique:
  %%    _162
  _375 = succeeded:body _162
  br ^1

166:
  %% receive_SUITE.erl:120
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-coverage/1-',1}}
  _163 = match_fail `function_clause`, _0

  %% Unique:
  %%    _163
  _376 = succeeded:body _163
  br ^1

1:
  _164 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _164
}

%% receive_SUITE.erl:201
%% Counter = 49
%% bs_ensure_opt: true
function `receive_SUITE`:`receive_in_called_function`() {
0:
  %% receive_SUITE.erl:202
  _34 = recv_marker_reserve

  %% receive_SUITE.erl:202
  RefA = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    RefA
  %% Unique:
  %%    _34
  _35 = recv_marker_bind _34, RefA

  %% receive_SUITE.erl:203
  %% Result type:
  %%    reference()
  RefB = call (`returns_reference`/0)

  %% Aliased:
  %%    RefB
  _22 = succeeded:body RefB
  br _22, ^22, ^1

22:
  %% receive_SUITE.erl:205
  %% Argument types:
  %%    
  _2 = bif:self

  %% receive_SUITE.erl:205
  %% Unique:
  %%    _2
  _10 = call (`erlang`:`'!'`/2), _2, `hello`

  %% Aliased:
  %%    _10
  _23 = succeeded:body _10
  br _23, ^23, ^1

23:
  %% receive_SUITE.erl:206
  %% Argument types:
  %%    
  _3 = bif:self

  %% receive_SUITE.erl:206
  %% Aliased:
  %%    RefA
  %% Unique:
  %%    _3
  _11 = call (`erlang`:`'!'`/2), _3, RefA

  %% Aliased:
  %%    _11
  _24 = succeeded:body _11
  br _24, ^24, ^1

24:
  %% receive_SUITE.erl:208
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    RefA
  _12 = call (`ricf_1`/2), `hello`, RefA

  %% Unique:
  %%    _12
  _25 = succeeded:body _12
  br _25, ^38, ^1

38:
  %% Aliased:
  %%    RefA
  _37 = recv_marker_clear RefA

  %% receive_SUITE.erl:210
  %% Argument types:
  %%    
  _4 = bif:self

  %% receive_SUITE.erl:210
  %% Aliased:
  %%    RefB
  %% Unique:
  %%    _4
  _13 = call (`erlang`:`'!'`/2), _4, RefB

  %% Aliased:
  %%    _13
  _26 = succeeded:body _13
  br _26, ^26, ^1

26:
  %% receive_SUITE.erl:211
  %% Argument types:
  %%    
  _5 = bif:self

  %% receive_SUITE.erl:211
  %% Unique:
  %%    _5
  _14 = call (`erlang`:`'!'`/2), _5, `hello`

  %% Aliased:
  %%    _14
  _27 = succeeded:body _14
  br _27, ^27, ^1

27:
  %% receive_SUITE.erl:213
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    RefB
  _15 = call (`ricf_1`/2), RefB, `hello`

  %% Unique:
  %%    _15
  _28 = succeeded:body _15
  br _28, ^39, ^1

39:
  %% Aliased:
  %%    RefB
  _36 = recv_marker_clear RefB

  %% receive_SUITE.erl:215
  Foo = call (`id`/1), `gurka`

  %% Aliased:
  %%    Foo
  _29 = succeeded:body Foo
  br _29, ^29, ^1

29:
  %% receive_SUITE.erl:216
  Bar = call (`id`/1), `gaffel`

  %% Aliased:
  %%    Bar
  _30 = succeeded:body Bar
  br _30, ^30, ^1

30:
  %% receive_SUITE.erl:218
  %% Argument types:
  %%    
  _8 = bif:self

  %% receive_SUITE.erl:218
  %% Aliased:
  %%    Foo
  %% Unique:
  %%    _8
  _16 = call (`erlang`:`'!'`/2), _8, Foo

  %% Aliased:
  %%    _16
  _31 = succeeded:body _16
  br _31, ^31, ^1

31:
  %% receive_SUITE.erl:219
  %% Argument types:
  %%    
  _9 = bif:self

  %% receive_SUITE.erl:219
  %% Aliased:
  %%    Bar
  %% Unique:
  %%    _9
  _17 = call (`erlang`:`'!'`/2), _9, Bar

  %% Aliased:
  %%    _17
  _32 = succeeded:body _17
  br _32, ^32, ^1

32:
  %% receive_SUITE.erl:221
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    Bar, 
  %%    Foo
  _18 = call (`ricf_1`/2), Foo, Bar

  %% Unique:
  %%    _18
  _33 = succeeded:body _18
  br _33, ^48, ^1

48:
  ret _18

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% receive_SUITE.erl:225
%% Counter = 9
%% bs_ensure_opt: true
function `receive_SUITE`:`returns_reference`() {
0:
  %% receive_SUITE.erl:226
  _6 = recv_marker_reserve

  %% receive_SUITE.erl:226
  _2 = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    _2
  %% Unique:
  %%    _6
  _7 = recv_marker_bind _6, _2
  %% Result type:
  %%    reference()
  %% Aliased:
  %%    _2
  ret _2
}

%% receive_SUITE.erl:228
%% Counter = 55
%% bs_ensure_opt: true
function `receive_SUITE`:`ricf_1`(_0, _1) {
0:
  br ^12

12:
  %% receive_SUITE.erl:231
  %% Aliased:
  %%    _0
  _6 = peek_message _0

  %% Aliased:
  %%    _6
  _33 = succeeded:guard _6
  br _33, ^31, ^32

31:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _6
  _25 = bif:'=:=' _6, _0
  br _25, ^52, ^24

52:
  %% Aliased:
  %%    _0
  _49 = recv_marker_clear _0
  _15 = remove_message
  br ^13

13:
  %% receive_SUITE.erl:232
  %% Aliased:
  %%    _1
  _9 = peek_message _1

  %% Aliased:
  %%    _9
  _46 = succeeded:guard _9
  br _46, ^44, ^45

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1, 
  %%    _9
  _38 = bif:'=:=' _9, _1
  br _38, ^54, ^37

54:
  %% Aliased:
  %%    _1
  _47 = recv_marker_clear _1
  _17 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  _18 = recv_next
  br ^13

45:
  _39 = wait_timeout `infinity`

  %% Unique:
  %%    _39
  _40 = succeeded:body _39
  br _40, ^43, ^1

43:
  br ^13

24:
  _16 = recv_next
  br ^12

32:
  _26 = wait_timeout `infinity`

  %% Unique:
  %%    _26
  _27 = succeeded:body _26
  br _27, ^30, ^1

30:
  br ^12

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% receive_SUITE.erl:234
%% Counter = 8
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
function `receive_SUITE`:`monitor_plus_badmap`(_0) {
0:
  %% receive_SUITE.erl:235
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`monitor`/2), `process`, _0

  %% Aliased:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% receive_SUITE.erl:235
  _3 = match_fail `badmap`, `[]`

  %% Unique:
  %%    _3
  _7 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% receive_SUITE.erl:237
%% Counter = 21
%% bs_ensure_opt: true
function `receive_SUITE`:`receive_all`() {
0:
  br ^4

4:
  %% receive_SUITE.erl:238
  _1 = peek_message `none`

  %% Aliased:
  %%    _1
  _19 = succeeded:guard _1
  br _19, ^17, ^18

17:
  _5 = remove_message

  %% receive_SUITE.erl:240
  %% Result type:
  %%    list(any())
  _0 = call (`receive_all`/0)

  %% Unique:
  %%    _0
  _16 = succeeded:body _0
  br _16, ^16, ^1

16:
  %% Argument types:
  %%    _0 => list(any())
  %% Aliased:
  %%    _1
  %% Unique:
  %%    _0
  _6 = put_list _1, _0
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _6
  ret _6

18:
  _11 = wait_timeout `0`

  %% Unique:
  %%    _11
  _12 = succeeded:body _11
  br _12, ^12, ^1

12:
  br _11, ^14, ^15

14:
  %% Result type:
  %%    nil()
  ret `[]`

15:
  br ^4

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% receive_SUITE.erl:245
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     atom()
%%    _1 =>
%%     'false' | 'true'
function `receive_SUITE`:`do_monitor_node`(_0, _1) {
0:
  %% receive_SUITE.erl:246
  %% Unique:
  %%    _0, 
  %%    _1
  _2 = call (`erlang`:`monitor_node`/2), _0, _1

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:248
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
function `receive_SUITE`:`do_link`(_0) {
0:
  %% receive_SUITE.erl:249
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`link`/1), _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:251
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
function `receive_SUITE`:`do_unlink`(_0) {
0:
  %% receive_SUITE.erl:252
  %% Unique:
  %%    _0
  _2 = call (`erlang`:`unlink`/1), _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:254
%% Counter = 6
%% bs_ensure_opt: true
%% Parameters
%%    _1 =>
%%     pid()
function `receive_SUITE`:`do_group_leader`(_0, _1) {
0:
  %% receive_SUITE.erl:255
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _1
  _2 = call (`erlang`:`group_leader`/2), _0, _1

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:259
%% Counter = 92
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'infinity' | 1..999999
%%    _1 =>
%%     'x'
function `receive_SUITE`:`tuple_to_values`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 'infinity' | 1..999999
  %% Unique:
  %%    _0
  _68 = bif:'=:=' _0, `infinity`
  br _68, ^56, ^81

56:
  br ^20

20:
  %% receive_SUITE.erl:262
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _55 = succeeded:guard _10
  br _55, ^53, ^54

53:
  _28 = remove_message

  %% receive_SUITE.erl:267
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _31 = bif:'+' _10, `42`

  %% Unique:
  %%    _31
  _61 = succeeded:body _31
  br _61, ^61, ^1

61:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _31
  ret _31

54:
  _48 = wait_timeout `infinity`

  %% Unique:
  %%    _48
  _49 = succeeded:body _48
  br _49, ^52, ^1

52:
  br ^20

81:
  br ^17

17:
  %% receive_SUITE.erl:271
  _13 = peek_message `none`

  %% Aliased:
  %%    _13
  _80 = succeeded:guard _13
  br _80, ^78, ^79

78:
  _35 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _36 = put_tuple `42`, _13
  br ^69

79:
  %% Unique:
  %%    _0
  _73 = wait_timeout _0

  %% Unique:
  %%    _73
  _74 = succeeded:body _73
  br _74, ^74, ^1

74:
  br _73, ^76, ^77

76:
  br ^69

69:
  _6 = phi { `{0,0}`, ^76 }, { _36, ^78 }

  %% Argument types:
  %%    _6 => {0, 0} | {42, any()}
  %% Unique:
  %%    _6
  _19 = get_tuple_element _6, `0`

  %% Argument types:
  %%    _6 => {0, 0} | {42, any()}
  %% Unique:
  %%    _6
  _18 = get_tuple_element _6, `1`

  %% receive_SUITE.erl:278
  %% Argument types:
  %%    _19 => 0..42
  %% Aliased:
  %%    _18
  %% Unique:
  %%    _19
  _39 = bif:'+' _19, _18

  %% Unique:
  %%    _39
  _86 = succeeded:body _39
  br _86, ^86, ^1

86:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _39
  ret _39

77:
  br ^17

1:
  _41 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _41
}

%% receive_SUITE.erl:280
%% Counter = 23
%% bs_ensure_opt: true
function `receive_SUITE`:`no_clauses_left_1`() {
0:
  br ^5

5:
  %% receive_SUITE.erl:281
  _2 = peek_message `none`

  %% Aliased:
  %%    _2
  _22 = succeeded:guard _2
  br _22, ^20, ^21

20:
  _10 = recv_next
  br ^5

21:
  _15 = wait_timeout `infinity`

  %% Unique:
  %%    _15
  _16 = succeeded:body _15
  br _16, ^19, ^1

19:
  br ^5

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% receive_SUITE.erl:289
%% Counter = 22
%% bs_ensure_opt: true
function `receive_SUITE`:`no_clauses_left_2`() {
0:
  br ^4

4:
  %% receive_SUITE.erl:290
  _1 = peek_message `none`

  %% Aliased:
  %%    _1
  _21 = succeeded:guard _1
  br _21, ^19, ^20

19:
  _9 = recv_next
  br ^4

20:
  _14 = wait_timeout `infinity`

  %% Unique:
  %%    _14
  _15 = succeeded:body _14
  br _15, ^18, ^1

18:
  br ^4

1:
  _10 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _10
}

%% receive_SUITE.erl:298
%% Counter = 34
%% bs_ensure_opt: true
function `receive_SUITE`:`no_clauses_left_3`() {
0:
  %% receive_SUITE.erl:299
  _7 = call (`id`/1), `[]`

  %% Aliased:
  %%    _7
  _19 = succeeded:body _7
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _32 = bif:'=:=' _7, `[]`
  br _32, ^32, ^21

32:
  br ^8

8:
  %% receive_SUITE.erl:301
  _4 = peek_message `none`

  %% Aliased:
  %%    _4
  _31 = succeeded:guard _4
  br _31, ^29, ^30

29:
  _14 = recv_next
  br ^8

30:
  _24 = wait_timeout `infinity`

  %% Unique:
  %%    _24
  _25 = succeeded:body _24
  br _25, ^28, ^1

28:
  br ^8

21:
  %% receive_SUITE.erl:299
  %% Aliased:
  %%    _7
  _16 = match_fail `case_clause`, _7

  %% Unique:
  %%    _16
  _33 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% receive_SUITE.erl:309
%% Counter = 44
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     {'a', 'b'} | {'any', 'pattern'}
function `receive_SUITE`:`receive_sink_tuple`(_0) {
0:
  br ^8

8:
  %% receive_SUITE.erl:310
  _3 = peek_message `none`

  %% Aliased:
  %%    _3
  _37 = succeeded:guard _3
  br _37, ^36, ^35

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _32 = is_tagged_tuple _3, `2`, `data`
  br _32, ^29, ^28

29:
  _12 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

28:
  _13 = recv_next
  br ^8

35:
  _21 = wait_timeout `1`

  %% Unique:
  %%    _21
  _22 = succeeded:body _21
  br _22, ^22, ^1

22:
  br _21, ^26, ^25

26:
  %% Argument types:
  %%    _0 => {'a', 'b'} | {'any', 'pattern'}
  %% Unique:
  %%    _0
  _7 = get_tuple_element _0, `0`

  %% Argument types:
  %%    _0 => {'a', 'b'} | {'any', 'pattern'}
  %% Unique:
  %%    _0
  _6 = get_tuple_element _0, `1`

  %% Argument types:
  %%    _6 => 'b' | 'pattern'
  %%    _7 => 'a' | 'any'
  %% Unique:
  %%    _6, 
  %%    _7
  _9 = put_tuple _6, _7

  %% receive_SUITE.erl:314
  %% Unique:
  %%    _9
  _14 = call (`id`/1), _9

  %% Aliased:
  %%    _14
  _24 = succeeded:body _14
  br _24, ^24, ^1

24:
  %% Aliased:
  %%    _14
  ret _14

25:
  br ^8

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% receive_SUITE.erl:318
%% Counter = 75
%% bs_ensure_opt: true
function `receive_SUITE`:`mc_fail_requests`() {
0:
  br ^8

8:
  %% receive_SUITE.erl:319
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _73 = succeeded:guard _5
  br _73, ^72, ^71

72:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _66 = bif:is_tuple _5
  br _66, ^66, ^36

66:
  %% Argument types:
  %%    _5 => {...}
  %% Aliased:
  %%    _5
  _68 = is_tagged_tuple _5, `2`, `error`
  br _68, ^63, ^35

63:
  _17 = remove_message

  %% Argument types:
  %%    _5 => {'error', any()}
  %% Aliased:
  %%    _5
  _9 = get_tuple_element _5, `1`

  %% receive_SUITE.erl:323
  %% Aliased:
  %%    _9
  _11 = call (`id`/1), _9

  %% Aliased:
  %%    _11
  _37 = succeeded:body _11
  br _37, ^37, ^1

37:
  switch _11, ^39, [
    { `false`, ^61 },
    { `true`, ^27 }
  ]

61:
  br ^12

12:
  %% receive_SUITE.erl:327
  _2 = peek_message `none`

  %% Aliased:
  %%    _2
  _59 = succeeded:guard _2
  br _59, ^58, ^57

58:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _54 = is_tagged_tuple _2, `2`, `'DOWN'`
  br _54, ^53, ^49

53:
  %% Argument types:
  %%    _2 => {''DOWN'', any()}
  %% Aliased:
  %%    _2
  _14 = get_tuple_element _2, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9, 
  %%    _14
  _50 = bif:'=:=' _14, _9
  br _50, ^50, ^49

50:
  _18 = remove_message
  br ^27

49:
  _19 = recv_next
  br ^12

57:
  _42 = wait_timeout `0`

  %% Unique:
  %%    _42
  _43 = succeeded:body _42
  br _43, ^43, ^1

43:
  br _42, ^47, ^46

47:
  %% receive_SUITE.erl:331
  _20 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _20
  _45 = succeeded:body _20
  br _45, ^27, ^1

46:
  br ^12

39:
  %% receive_SUITE.erl:323
  %% Aliased:
  %%    _11
  _21 = match_fail `case_clause`, _11

  %% Unique:
  %%    _21
  _62 = succeeded:body _21
  br ^1

36:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _70 = bif:'=:=' _5, `ok`
  br _70, ^69, ^35

69:
  _16 = remove_message
  br ^27

35:
  _22 = recv_next
  br ^8

71:
  _28 = wait_timeout `0`

  %% Unique:
  %%    _28
  _29 = succeeded:body _28
  br _29, ^29, ^1

29:
  br _28, ^33, ^32

33:
  %% receive_SUITE.erl:335
  _23 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _23
  _31 = succeeded:body _23
  br _31, ^27, ^1

27:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  br ^8

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% receive_SUITE.erl:341
%% Counter = 126
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'whatever'
%%    _1 =>
%%     {'commit', nil()}
function `receive_SUITE`:`commit_participant`(_0, _1) {
0:
  br ^125

125:
  _50 = new_try_tag `'try'`
  br _50, ^49, ^47

49:
  %% receive_SUITE.erl:342
  _35 = call (`id`/1), `{commit,[]}`

  %% Aliased:
  %%    _35
  _51 = succeeded:body _35
  br _51, ^51, ^47

51:
  %% Unique:
  %%    _50
  _108 = kill_try_tag _50
  br ^24

24:
  %% receive_SUITE.erl:344
  _21 = peek_message `none`

  %% Aliased:
  %%    _21
  _105 = succeeded:guard _21
  br _105, ^104, ^103

104:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _21
  _100 = bif:is_tuple _21
  br _100, ^100, ^61

100:
  %% Argument types:
  %%    _21 => {...}
  %% Aliased:
  %%    _21
  _101 = bif:tuple_size _21

  %% Argument types:
  %%    _101 => 0..16777215
  %% Unique:
  %%    _101
  _102 = bif:'=:=' _101, `2`
  br _102, ^99, ^61

99:
  %% Argument types:
  %%    _21 => {any(), any()}
  %% Aliased:
  %%    _21
  _26 = get_tuple_element _21, `0`

  %% Argument types:
  %%    _21 => {any(), any()}
  %% Aliased:
  %%    _21
  _25 = get_tuple_element _21, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _25
  _98 = bif:'=:=' _25, `pre_commit`
  br _98, ^97, ^61

97:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _62 = bif:'=:=' _26, `{commit,[]}`
  br _62, ^62, ^61

62:
  _36 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _35
  _68 = is_tagged_tuple _35, `2`, `commit`
  br _68, ^63, ^64

63:
  %% Argument types:
  %%    _35 => {'commit', any()}
  %% Aliased:
  %%    _35
  _28 = get_tuple_element _35, `1`

  %% receive_SUITE.erl:346
  %% Argument types:
  %%    
  %% Aliased:
  %%    _28
  ExpectAck = bif:'=/=' _28, `[]`
  br ^30

30:
  %% receive_SUITE.erl:347
  _18 = peek_message `none`

  %% Aliased:
  %%    _18
  _96 = succeeded:guard _18
  br _96, ^94, ^95

94:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _86 = bif:is_tuple _18
  br _86, ^86, ^75

86:
  %% Argument types:
  %%    _18 => {...}
  %% Aliased:
  %%    _18
  _87 = bif:tuple_size _18

  %% Argument types:
  %%    _87 => 0..16777215
  %% Unique:
  %%    _87
  _88 = bif:'=:=' _87, `2`
  br _88, ^85, ^75

85:
  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _33 = get_tuple_element _18, `0`

  %% Argument types:
  %%    _18 => {any(), any()}
  %% Aliased:
  %%    _18
  _32 = get_tuple_element _18, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _32
  _84 = bif:'=:=' _32, `committed`
  br _84, ^83, ^75

83:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _33
  _76 = bif:'=:=' _33, `{commit,[]}`
  br _76, ^76, ^75

76:
  _38 = remove_message
  br ExpectAck, ^81, ^48

81:
  %% receive_SUITE.erl:353
  _39 = call (`id`/1), `whatever`

  %% Aliased:
  %%    _39
  _79 = succeeded:body _39
  br _79, ^48, ^1

75:
  _41 = remove_message
  br ^48

95:
  _89 = wait_timeout `infinity`

  %% Unique:
  %%    _89
  _90 = succeeded:body _89
  br _90, ^93, ^1

93:
  br ^30

64:
  %% receive_SUITE.erl:346
  %% Aliased:
  %%    _35
  _37 = match_fail `badrecord`, _35

  %% Unique:
  %%    _37
  _71 = succeeded:body _37
  br ^1

61:
  _42 = recv_next
  br ^24

103:
  _54 = wait_timeout `0`

  %% Unique:
  %%    _54
  _55 = succeeded:body _54
  br _55, ^55, ^1

55:
  br _54, ^59, ^58

59:
  %% receive_SUITE.erl:359
  _43 = call (`ct`:`fail`/1), `failed`

  %% Aliased:
  %%    _43
  _57 = succeeded:body _43
  br _57, ^48, ^1

58:
  br ^24

1:
  _44 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _44

47:
  %% Unique:
  %%    _50
  _106 = landingpad `'try'`, _50

  %% Unique:
  %%    _50
  _107 = kill_try_tag _50
  br ^48

48:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:367
%% Counter = 126
%% bs_ensure_opt: true
function `receive_SUITE`:`receive_in_try_and_after`() {
0:
  br ^124

124:
  _49 = new_try_tag `'try'`
  br _49, ^123, ^46

123:
  br ^125

125:
  _54 = new_try_tag `'try'`
  br _54, ^53, ^51

53:
  %% receive_SUITE.erl:369
  _36 = call (`id`/1), `42`

  %% Aliased:
  %%    _36
  _55 = succeeded:body _36
  br _55, ^55, ^51

55:
  %% Unique:
  %%    _54
  _59 = kill_try_tag _54

  %% Unique:
  %%    _49
  _91 = kill_try_tag _49
  br ^30

30:
  %% receive_SUITE.erl:377
  _24 = peek_message `none`

  %% Aliased:
  %%    _24
  _73 = succeeded:guard _24
  br _73, ^71, ^72

71:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _24
  _65 = bif:'=:=' _24, `0`
  br _65, ^64, ^63

64:
  _38 = remove_message
  %% Aliased:
  %%    _36
  ret _36

63:
  _39 = recv_next
  br ^30

72:
  _66 = wait_timeout `infinity`

  %% Unique:
  %%    _66
  _67 = succeeded:body _66
  br _67, ^70, ^1

70:
  br ^30

51:
  %% Unique:
  %%    _54
  _57 = landingpad `'try'`, _54

  %% Aliased:
  %%    _57
  _2 = extract _57, `1`

  %% Aliased:
  %%    _57
  _1 = extract _57, `2`

  %% Unique:
  %%    _54
  _58 = kill_try_tag _54

  %% Aliased:
  %%    _1, 
  %%    _2
  _37 = resume _1, _2

  %% Unique:
  %%    _37
  _56 = succeeded:body _37
  br ^46

46:
  %% Unique:
  %%    _49
  _89 = landingpad `'try'`, _49

  %% Aliased:
  %%    _89
  _14 = extract _89, `1`

  %% Aliased:
  %%    _89
  _13 = extract _89, `2`

  %% Unique:
  %%    _49
  _90 = kill_try_tag _49
  br ^31

31:
  %% receive_SUITE.erl:377
  _27 = peek_message `none`

  %% Aliased:
  %%    _27
  _87 = succeeded:guard _27
  br _87, ^85, ^86

85:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _79 = bif:'=:=' _27, `0`
  br _79, ^78, ^77

78:
  _40 = remove_message

  %% Aliased:
  %%    _13, 
  %%    _14
  _42 = resume _13, _14

  %% Unique:
  %%    _42
  _88 = succeeded:body _42
  br ^1

77:
  _41 = recv_next
  br ^31

86:
  _80 = wait_timeout `infinity`

  %% Unique:
  %%    _80
  _81 = succeeded:body _80
  br _81, ^84, ^1

84:
  br ^31

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% receive_SUITE.erl:386
%% Counter = 17
%% bs_ensure_opt: true
function `receive_SUITE`:`otp_7980`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _9 = bif:is_list _0
  br _9, ^9, ^8

9:
  %% receive_SUITE.erl:387
  %% Result type:
  %%    number()
  _3 = call (`otp_7980_add_clients`/1), `10`

  %% Aliased:
  %%    _3
  _10 = succeeded:body _3
  br _10, ^10, ^1

10:
  %% Argument types:
  %%    _3 => number()
  %% Unique:
  %%    _3
  _14 = bif:'=:=' _3, `7`
  br _14, ^13, ^12

13:
  %% Result type:
  %%    'ok'
  ret `ok`

12:
  %% receive_SUITE.erl:387
  %% Aliased:
  %%    _3
  _4 = match_fail `badmatch`, _3

  %% Unique:
  %%    _4
  _15 = succeeded:body _4
  br ^1

8:
  %% receive_SUITE.erl:386
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-otp_7980/1-',1}}
  _5 = match_fail `function_clause`, _0

  %% Unique:
  %%    _5
  _16 = succeeded:body _5
  br ^1

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% receive_SUITE.erl:390
%% Counter = 19
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     10
function `receive_SUITE`:`otp_7980_add_clients`(_0) {
0:
  %% Result type:
  %%    number()
  _7 = make_fun (`'-otp_7980_add_clients/1-fun-0-'`/2)

  %% receive_SUITE.erl:392
  %% Aliased:
  %%    _7
  _14 = call (`lists`:`foldl`/3), _7, `10`, `[1,2,3]`

  %% Aliased:
  %%    _14
  _17 = succeeded:body _14
  br _17, ^17, ^1

17:
  %% Result type:
  %%    number()
  %% Aliased:
  %%    _14
  ret _14

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% receive_SUITE.erl:400
%% Counter = 28
%% bs_ensure_opt: true
function `receive_SUITE`:`ref_opt`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _17 = bif:is_list _0
  br _17, ^17, ^16

17:
  %% receive_SUITE.erl:401
  %% Aliased:
  %%    _0
  DataDir = call (`proplists`:`get_value`/2), `data_dir`, _0

  %% Aliased:
  %%    DataDir
  _18 = succeeded:body DataDir
  br _18, ^18, ^1

18:
  %% receive_SUITE.erl:402
  %% Aliased:
  %%    _0
  PrivDir = call (`proplists`:`get_value`/2), `priv_dir`, _0

  %% Aliased:
  %%    PrivDir
  _19 = succeeded:body PrivDir
  br _19, ^19, ^1

19:
  %% Argument types:
  %%    
  %% Aliased:
  %%    DataDir
  _9 = put_list DataDir, `["ref_opt","*.{erl,S}"]`

  %% receive_SUITE.erl:403
  %% Unique:
  %%    _9
  _3 = call (`filename`:`join`/1), _9

  %% Aliased:
  %%    _3
  _20 = succeeded:body _3
  br _20, ^20, ^1

20:
  %% receive_SUITE.erl:403
  %% Aliased:
  %%    _3
  Sources = call (`filelib`:`wildcard`/1), _3

  %% Aliased:
  %%    Sources
  _21 = succeeded:body Sources
  br _21, ^21, ^1

21:
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    PrivDir
  _7 = make_fun (`'-ref_opt/1-fun-0-'`/2), PrivDir

  %% receive_SUITE.erl:404
  %% Aliased:
  %%    _7, 
  %%    Sources
  _11 = call (`test_lib`:`p_run`/2), _7, Sources

  %% Aliased:
  %%    _11
  _22 = succeeded:body _11
  br _22, ^22, ^1

22:
  %% receive_SUITE.erl:407
  %% Result type:
  %%    'ok'
  _12 = call (`cover_recv_instructions`/0)

  %% Unique:
  %%    _12
  _23 = succeeded:body _12
  br _23, ^27, ^1

27:
  ret _12

16:
  %% receive_SUITE.erl:400
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-ref_opt/1-',1}}
  _13 = match_fail `function_clause`, _0

  %% Unique:
  %%    _13
  _24 = succeeded:body _13
  br ^1

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% receive_SUITE.erl:410
%% Counter = 235
%% bs_ensure_opt: true
function `receive_SUITE`:`do_ref_opt`(_0, _1) {
0:
  br ^234

234:
  _119 = new_try_tag `'try'`
  br _119, ^118, ^116

118:
  %% receive_SUITE.erl:412
  %% Aliased:
  %%    _0
  Ext = call (`filename`:`extension`/1), _0

  %% Aliased:
  %%    Ext
  _120 = succeeded:body Ext
  br _120, ^120, ^116

120:
  %% Argument types:
  %%    
  %% Aliased:
  %%    Ext
  _123 = bif:'=:=' Ext, `".S"`
  br _123, ^123, ^122

123:
  br ^121

122:
  br ^121

121:
  _3 = phi { `[]`, ^122 }, { `[from_asm]`, ^123 }

  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _53 = put_tuple `outdir`, _1

  %% Argument types:
  %%    _53 => {'outdir', any()}
  %%    _3 => list('from_asm')
  %% Unique:
  %%    _3, 
  %%    _53
  _54 = put_list _53, _3

  %% Argument types:
  %%    _54 => nonempty_list('from_asm' | {'outdir', any()})
  %% Unique:
  %%    _54
  _55 = put_list `report_warnings`, _54

  %% Argument types:
  %%    _55 => nonempty_list('from_asm' | 'report_warnings' | {'outdir', any()})
  %% Unique:
  %%    _55
  _4 = put_list `report_errors`, _55

  %% receive_SUITE.erl:413
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _4
  _56 = call (`compile`:`file`/2), _0, _4

  %% Aliased:
  %%    _56
  _124 = succeeded:body _56
  br _124, ^124, ^116

124:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _56
  _204 = is_tagged_tuple _56, `2`, `ok`
  br _204, ^201, ^126

201:
  %% receive_SUITE.erl:416
  %% Aliased:
  %%    _0
  _6 = call (`filename`:`basename`/1), _0

  %% Aliased:
  %%    _6
  _127 = succeeded:body _6
  br _127, ^127, ^116

127:
  %% receive_SUITE.erl:416
  %% Aliased:
  %%    _6, 
  %%    Ext
  Base = call (`filename`:`rootname`/2), _6, Ext

  %% Aliased:
  %%    Base
  _128 = succeeded:body Base
  br _128, ^128, ^116

128:
  %% receive_SUITE.erl:417
  %% Aliased:
  %%    Base
  _8 = call (`erlang`:`list_to_atom`/1), Base

  %% Aliased:
  %%    _8
  _129 = succeeded:body _8
  br _129, ^129, ^116

129:
  %% receive_SUITE.erl:417
  %% Aliased:
  %%    _8
  _99 = call (`code`:`purge`/1), _8

  %% Aliased:
  %%    _99
  _130 = succeeded:body _99
  br _130, ^130, ^116

130:
  %% receive_SUITE.erl:418
  %% Aliased:
  %%    _1, 
  %%    Base
  BeamFile = call (`filename`:`join`/2), _1, Base

  %% Aliased:
  %%    BeamFile
  _131 = succeeded:body BeamFile
  br _131, ^131, ^116

131:
  %% receive_SUITE.erl:419
  %% Aliased:
  %%    BeamFile
  _100 = call (`code`:`load_abs`/1), BeamFile

  %% Aliased:
  %%    _100
  _132 = succeeded:body _100
  br _132, ^132, ^116

132:
  %% Argument types:
  %%    _56 => {'ok', any()}
  %% Aliased:
  %%    _56
  _57 = get_tuple_element _56, `1`

  %% receive_SUITE.erl:420
  _59 = call (_57:_57/0)

  %% Aliased:
  %%    _59
  _133 = succeeded:body _59
  br _133, ^133, ^116

133:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _59
  _199 = bif:'=:=' _59, `ok`
  br _199, ^198, ^135

198:
  %% receive_SUITE.erl:421
  %% Aliased:
  %%    BeamFile
  _60 = call (`beam_disasm`:`file`/1), BeamFile

  %% Aliased:
  %%    _60
  _136 = succeeded:body _60
  br _136, ^136, ^116

136:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _60
  _194 = is_tagged_tuple _60, `6`, `beam_file`
  br _194, ^191, ^138

191:
  %% Argument types:
  %%    _60 => {'beam_file', any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _60
  _65 = get_tuple_element _60, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _57, 
  %%    _65
  _139 = bif:'=:=' _65, _57
  br _139, ^139, ^138

139:
  %% Aliased:
  %%    Base
  _189 = is_nonempty_list Base
  br _189, ^189, ^141

189:
  %% Argument types:
  %%    _60 => {'beam_file', any(), any(), any(), any(), any()}
  %% Aliased:
  %%    _60
  _61 = get_tuple_element _60, `5`

  %% Argument types:
  %%    Base => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Base
  _68 = get_hd Base

  %% Argument types:
  %%    Base => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    Base
  _67 = get_tl Base
  switch _68, ^141, [
    { `110`, ^187 },
    { `121`, ^188 }
  ]

188:
  %% Aliased:
  %%    _67
  _186 = is_nonempty_list _67
  br _186, ^186, ^141

186:
  %% Argument types:
  %%    _67 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _67
  _75 = get_hd _67

  %% Argument types:
  %%    _67 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _67
  _74 = get_tl _67

  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _185 = bif:'=:=' _75, `101`
  br _185, ^184, ^141

184:
  %% Aliased:
  %%    _74
  _183 = is_nonempty_list _74
  br _183, ^183, ^141

183:
  %% Argument types:
  %%    _74 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _74
  _77 = get_hd _74

  %% Argument types:
  %%    _74 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _74
  _76 = get_tl _74

  %% Argument types:
  %%    
  %% Aliased:
  %%    _77
  _182 = bif:'=:=' _77, `115`
  br _182, ^181, ^141

181:
  %% Aliased:
  %%    _76
  _180 = is_nonempty_list _76
  br _180, ^180, ^141

180:
  %% Argument types:
  %%    _76 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _76
  _79 = get_hd _76

  %% Argument types:
  %%    
  %% Aliased:
  %%    _79
  _179 = bif:'=:=' _79, `95`
  br _179, ^178, ^141

178:
  %% receive_SUITE.erl:426
  %% Aliased:
  %%    _61
  Instrs = call (`collect_recv_opt_instrs`/1), _61

  %% Aliased:
  %%    Instrs
  _153 = succeeded:body Instrs
  br _153, ^153, ^116

153:
  %% Result type:
  %%    'false' | 'true'
  _16 = make_fun (`'-do_ref_opt/2-fun-0-'`/1)

  %% receive_SUITE.erl:430
  %% Aliased:
  %%    _16, 
  %%    Instrs
  _82 = call (`lists`:`any`/2), _16, Instrs

  %% Aliased:
  %%    _82
  _154 = succeeded:body _82
  br _154, ^154, ^116

154:
  br _82, ^175, ^156

175:
  %% Result type:
  %%    'false' | 'true'
  _20 = make_fun (`'-do_ref_opt/2-fun-1-'`/1)

  %% receive_SUITE.erl:434
  %% Aliased:
  %%    _20, 
  %%    Instrs
  _86 = call (`lists`:`any`/2), _20, Instrs

  %% Aliased:
  %%    _86
  _157 = succeeded:body _86
  br _157, ^157, ^116

157:
  br _86, ^172, ^159

172:
  %% Result type:
  %%    'false' | 'true'
  _24 = make_fun (`'-do_ref_opt/2-fun-2-'`/1)

  %% receive_SUITE.erl:438
  %% Aliased:
  %%    _24, 
  %%    Instrs
  _89 = call (`lists`:`any`/2), _24, Instrs

  %% Aliased:
  %%    _89
  _160 = succeeded:body _89
  br _160, ^160, ^116

160:
  br _89, ^169, ^162

169:
  %% Result type:
  %%    'false' | 'true'
  _28 = make_fun (`'-do_ref_opt/2-fun-3-'`/1)

  %% receive_SUITE.erl:442
  %% Aliased:
  %%    _28, 
  %%    Instrs
  _92 = call (`lists`:`any`/2), _28, Instrs

  %% Aliased:
  %%    _92
  _163 = succeeded:body _92
  br _163, ^163, ^116

163:
  br _92, ^125, ^165

165:
  %% receive_SUITE.erl:442
  _103 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _103
  _168 = succeeded:body _103
  br ^116

162:
  %% receive_SUITE.erl:438
  _104 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _104
  _171 = succeeded:body _104
  br ^116

159:
  %% receive_SUITE.erl:434
  _105 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _105
  _174 = succeeded:body _105
  br ^116

156:
  %% receive_SUITE.erl:430
  _106 = match_fail `badmatch`, `false`

  %% Unique:
  %%    _106
  _177 = succeeded:body _106
  br ^116

187:
  %% Aliased:
  %%    _67
  _152 = is_nonempty_list _67
  br _152, ^152, ^141

152:
  %% Argument types:
  %%    _67 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _67
  _70 = get_hd _67

  %% Argument types:
  %%    _67 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _67
  _69 = get_tl _67

  %% Argument types:
  %%    
  %% Aliased:
  %%    _70
  _151 = bif:'=:=' _70, `111`
  br _151, ^150, ^141

150:
  %% Aliased:
  %%    _69
  _149 = is_nonempty_list _69
  br _149, ^149, ^141

149:
  %% Argument types:
  %%    _69 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _69
  _72 = get_hd _69

  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _148 = bif:'=:=' _72, `95`
  br _148, ^147, ^141

147:
  %% receive_SUITE.erl:424
  %% Aliased:
  %%    _61
  _73 = call (`collect_recv_opt_instrs`/1), _61

  %% Aliased:
  %%    _73
  _142 = succeeded:body _73
  br _142, ^142, ^116

142:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _73
  _145 = bif:'=:=' _73, `[]`
  br _145, ^125, ^144

125:
  %% Unique:
  %%    _119
  _211 = kill_try_tag _119
  %% Result type:
  %%    'ok'
  ret `ok`

144:
  %% receive_SUITE.erl:424
  %% Aliased:
  %%    _73
  _107 = match_fail `badmatch`, _73

  %% Unique:
  %%    _107
  _146 = succeeded:body _107
  br ^116

141:
  %% receive_SUITE.erl:422
  %% Aliased:
  %%    Base
  _108 = match_fail `case_clause`, Base

  %% Unique:
  %%    _108
  _190 = succeeded:body _108
  br ^116

138:
  %% receive_SUITE.erl:421
  %% Aliased:
  %%    _60
  _109 = match_fail `badmatch`, _60

  %% Unique:
  %%    _109
  _197 = succeeded:body _109
  br ^116

135:
  %% receive_SUITE.erl:420
  %% Aliased:
  %%    _59
  _110 = match_fail `badmatch`, _59

  %% Unique:
  %%    _110
  _200 = succeeded:body _110
  br ^116

126:
  %% receive_SUITE.erl:413
  %% Aliased:
  %%    _56
  _111 = match_fail `badmatch`, _56

  %% Unique:
  %%    _111
  _207 = succeeded:body _111
  br ^116

116:
  %% Unique:
  %%    _119
  _209 = landingpad `'try'`, _119

  %% Aliased:
  %%    _209
  _34 = extract _209, `0`

  %% Aliased:
  %%    _209
  _33 = extract _209, `1`

  %% Aliased:
  %%    _209
  _32 = extract _209, `2`

  %% Unique:
  %%    _119
  _210 = kill_try_tag _119

  %% Aliased:
  %%    _32
  Stk = build_stacktrace _32

  %% Argument types:
  %%    
  %% Aliased:
  %%    Stk
  _93 = put_list Stk, `[]`

  %% Argument types:
  %%    _93 => nonempty_list(any())
  %% Aliased:
  %%    _33
  %% Unique:
  %%    _93
  _94 = put_list _33, _93

  %% Argument types:
  %%    _34 => 'error' | 'exit' | 'throw'
  %%    _94 => nonempty_list(any())
  %% Unique:
  %%    _34, 
  %%    _94
  _95 = put_list _34, _94

  %% Argument types:
  %%    _95 => nonempty_list(any())
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _95
  _96 = put_list _0, _95
  br ^217

217:
  %% receive_SUITE.erl:449
  %% Unique:
  %%    _96
  _112 = call (`io`:`format`/2), `"~s: ~p ~p\n~p\n"`, _96

  %% Aliased:
  %%    _112
  _208 = succeeded:body _112
  br _208, ^208, ^1

208:
  %% Result type:
  %%    'error'
  ret `error`

1:
  _113 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _113
}

%% receive_SUITE.erl:453
%% Counter = 57
%% bs_ensure_opt: true
function `receive_SUITE`:`collect_recv_opt_instrs`(_0) {
0:
  %% receive_SUITE.erl:463
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _0
  _15 = call (`'-collect_recv_opt_instrs/1-lc$^0/1-0-'`/1), _0

  %% Unique:
  %%    _15
  _55 = succeeded:body _15
  br _55, ^55, ^1

55:
  %% receive_SUITE.erl:464
  %% Unique:
  %%    _15
  _52 = call (`lists`:`append`/1), _15

  %% Aliased:
  %%    _52
  _56 = succeeded:body _52
  br _56, ^56, ^1

56:
  %% Aliased:
  %%    _52
  ret _52

1:
  _53 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _53
}

%% receive_SUITE.erl:466
%% Counter = 51
%% bs_ensure_opt: true
function `receive_SUITE`:`cover_recv_instructions`() {
0:
  _0 = make_fun (`'-cover_recv_instructions/0-fun-0-'`/0)

  %% receive_SUITE.erl:476
  %% Aliased:
  %%    _0
  Pid = call (`erlang`:`spawn_link`/1), _0

  %% Aliased:
  %%    Pid
  _26 = succeeded:body Pid
  br _26, ^26, ^1

26:
  %% receive_SUITE.erl:481
  _42 = recv_marker_reserve

  %% receive_SUITE.erl:481
  _14 = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:482
  %% Argument types:
  %%    
  _3 = bif:self

  %% Argument types:
  %%    _3 => pid()
  %%    _14 => reference()
  %% Unique:
  %%    _3, 
  %%    _14
  _15 = put_tuple _3, _14

  %% Aliased:
  %%    _14
  %% Unique:
  %%    _42
  _43 = recv_marker_bind _42, _14

  %% receive_SUITE.erl:482
  %% Aliased:
  %%    Pid
  %% Unique:
  %%    _15
  _21 = call (`erlang`:`'!'`/2), Pid, _15

  %% Aliased:
  %%    _21
  _28 = succeeded:body _21
  br _28, ^28, ^1

28:
  br ^16

16:
  %% receive_SUITE.erl:483
  %% Aliased:
  %%    _14
  _8 = peek_message _14

  %% Aliased:
  %%    _8
  _41 = succeeded:guard _8
  br _41, ^39, ^40

39:
  %% Argument types:
  %%    _14 => reference()
  %% Aliased:
  %%    _8
  %% Unique:
  %%    _14
  _33 = bif:'=:=' _8, _14
  br _33, ^47, ^32

47:
  %% Aliased:
  %%    _14
  _44 = recv_marker_clear _14
  _22 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  _23 = recv_next
  br ^16

40:
  _34 = wait_timeout `infinity`

  %% Unique:
  %%    _34
  _35 = succeeded:body _34
  br _35, ^38, ^1

38:
  br ^16

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% receive_SUITE.erl:487
%% Counter = 61
%% bs_ensure_opt: true
function `receive_SUITE`:`export`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _25 = bif:is_list _0
  br _25, ^25, ^24

25:
  %% receive_SUITE.erl:488
  _52 = recv_marker_reserve

  %% receive_SUITE.erl:488
  Ref = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:489
  %% Argument types:
  %%    
  _2 = bif:self

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _9 = put_tuple `result`, Ref, `42`

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _52
  _53 = recv_marker_bind _52, Ref

  %% receive_SUITE.erl:489
  %% Unique:
  %%    _2, 
  %%    _9
  _16 = call (`erlang`:`'!'`/2), _2, _9

  %% Aliased:
  %%    _16
  _27 = succeeded:body _16
  br _27, ^27, ^1

27:
  %% receive_SUITE.erl:490
  %% Aliased:
  %%    Ref
  _10 = call (`export_1`/1), Ref

  %% Aliased:
  %%    _10
  _28 = succeeded:body _10
  br _28, ^28, ^1

28:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _49 = bif:'=:=' _10, `42`
  br _49, ^48, ^56

48:
  %% receive_SUITE.erl:491
  %% Aliased:
  %%    Ref
  _11 = call (`export_1`/1), Ref

  %% Aliased:
  %%    _11
  _31 = succeeded:body _11
  br _31, ^57, ^1

57:
  %% Aliased:
  %%    Ref
  _54 = recv_marker_clear Ref

  %% Argument types:
  %%    
  %% Aliased:
  %%    _11
  _46 = bif:'=:=' _11, `{error,timeout}`
  br _46, ^46, ^33

46:
  %% receive_SUITE.erl:493
  %% Argument types:
  %%    
  _5 = bif:self

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _12 = put_tuple `result`, Ref

  %% receive_SUITE.erl:493
  %% Unique:
  %%    _5, 
  %%    _12
  _17 = call (`erlang`:`'!'`/2), _5, _12

  %% Aliased:
  %%    _17
  _34 = succeeded:body _17
  br _34, ^34, ^1

34:
  %% receive_SUITE.erl:494
  %% Result type:
  %%    {'ok', any()}
  _13 = call (`export_2`/0)

  %% Unique:
  %%    _13
  _35 = succeeded:body _13
  br _35, ^39, ^1

39:
  %% Argument types:
  %%    _13 => {'ok', any()}
  %% Unique:
  %%    _13
  _14 = get_tuple_element _13, `1`

  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _14
  %% Unique:
  %%    Ref
  _38 = bif:'=:=' _14, Ref
  br _38, ^38, ^37

38:
  %% Result type:
  %%    'ok'
  ret `ok`

37:
  %% receive_SUITE.erl:494
  %% Unique:
  %%    _13
  _18 = match_fail `badmatch`, _13

  %% Unique:
  %%    _18
  _45 = succeeded:body _18
  br ^1

33:
  %% receive_SUITE.erl:491
  %% Aliased:
  %%    _11
  _19 = match_fail `badmatch`, _11

  %% Unique:
  %%    _19
  _47 = succeeded:body _19
  br ^1

56:
  %% Aliased:
  %%    Ref
  _55 = recv_marker_clear Ref

  %% receive_SUITE.erl:490
  %% Aliased:
  %%    _10
  _20 = match_fail `badmatch`, _10

  %% Unique:
  %%    _20
  _50 = succeeded:body _20
  br ^1

24:
  %% receive_SUITE.erl:487
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-export/1-',1}}
  _21 = match_fail `function_clause`, _0

  %% Unique:
  %%    _21
  _51 = succeeded:body _21
  br ^1

1:
  _22 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _22
}

%% receive_SUITE.erl:498
%% Counter = 49
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     reference()
function `receive_SUITE`:`export_1`(_0) {
0:
  %% receive_SUITE.erl:499
  %% Aliased:
  %%    _0
  _15 = call (`id`/1), _0

  %% Aliased:
  %%    _15
  _27 = succeeded:body _15
  br _27, ^27, ^1

27:
  br ^9

9:
  %% receive_SUITE.erl:500
  %% Aliased:
  %%    _0
  _6 = peek_message _0

  %% Aliased:
  %%    _6
  _46 = succeeded:guard _6
  br _46, ^45, ^44

45:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _41 = is_tagged_tuple _6, `3`, `result`
  br _41, ^40, ^36

40:
  %% Argument types:
  %%    _6 => {'result', any(), any()}
  %% Aliased:
  %%    _6
  _11 = get_tuple_element _6, `1`

  %% Argument types:
  %%    _6 => {'result', any(), any()}
  %% Aliased:
  %%    _6
  _10 = get_tuple_element _6, `2`

  %% Argument types:
  %%    _0 => reference()
  %% Aliased:
  %%    _11
  %% Unique:
  %%    _0
  _37 = bif:'=:=' _11, _0
  br _37, ^37, ^36

37:
  _20 = remove_message
  br ^29

36:
  _21 = recv_next
  br ^9

44:
  _30 = wait_timeout `1`

  %% Unique:
  %%    _30
  _31 = succeeded:body _30
  br _31, ^31, ^1

31:
  br _30, ^33, ^34

33:
  br ^29

29:
  _16 = phi { `{error,timeout}`, ^33 }, { _10, ^37 }

  %% receive_SUITE.erl:509
  %% Argument types:
  %%    
  _2 = bif:self

  %% Argument types:
  %%    _2 => pid()
  %% Unique:
  %%    _2
  _14 = put_tuple `build`, _2

  %% receive_SUITE.erl:509
  %% Unique:
  %%    _14
  _24 = call (`id`/1), _14

  %% Aliased:
  %%    _24
  _47 = succeeded:body _24
  br _47, ^47, ^1

47:
  %% Aliased:
  %%    _16
  ret _16

34:
  br ^9

1:
  _25 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _25
}

%% receive_SUITE.erl:512
%% Counter = 39
%% bs_ensure_opt: true
function `receive_SUITE`:`export_2`() {
0:
  br ^4

4:
  %% receive_SUITE.erl:513
  _1 = peek_message `none`

  %% Aliased:
  %%    _1
  _36 = succeeded:guard _1
  br _36, ^34, ^35

34:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _1
  _26 = is_tagged_tuple _1, `2`, `result`
  br _26, ^23, ^22

23:
  %% Argument types:
  %%    _1 => {'result', any()}
  %% Aliased:
  %%    _1
  _5 = get_tuple_element _1, `1`
  _14 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _37 = put_tuple `ok`, _5
  %% Result type:
  %%    {'ok', any()}
  %% Unique:
  %%    _37
  ret _37

22:
  _15 = recv_next
  br ^4

35:
  _29 = wait_timeout `infinity`

  %% Unique:
  %%    _29
  _30 = succeeded:body _29
  br _30, ^33, ^1

33:
  br ^4

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% receive_SUITE.erl:516
%% Counter = 88
%% bs_ensure_opt: true
function `receive_SUITE`:`wait`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _27 = bif:is_list _0
  br _27, ^27, ^26

27:
  %% receive_SUITE.erl:517
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:517
  %% Unique:
  %%    _1
  _16 = call (`erlang`:`'!'`/2), _1, `<<"*">>`

  %% Aliased:
  %%    _16
  _28 = succeeded:body _16
  br _28, ^28, ^1

28:
  %% receive_SUITE.erl:518
  %% Result type:
  %%    bs_matchable(1)
  _9 = call (`wait_1`/3), `r`, `1`, `2`

  %% Aliased:
  %%    _9
  _29 = succeeded:body _9
  br _29, ^29, ^1

29:
  %% Argument types:
  %%    _9 => bs_matchable(1)
  %% Aliased:
  %%    _9
  _67 = bif:'=:=' _9, `<<"*">>`
  br _67, ^67, ^31

67:
  %% receive_SUITE.erl:519
  %% Result type:
  %%    {1, 1..2, 2..3}
  _10 = call (`wait_1`/3), `1`, `2`, `3`

  %% Unique:
  %%    _10
  _32 = succeeded:body _10
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _10 => {1, 1..2, 2..3}
  %% Unique:
  %%    _10
  _65 = bif:'=:=' _10, `{1,2,3}`
  br _65, ^86, ^34

86:
  br ^87

87:
  _38 = new_try_tag `'catch'`
  br _38, ^36, ^37

36:
  br ^11

11:
  _41 = wait_timeout `[]`

  %% Unique:
  %%    _41
  _42 = succeeded:body _41
  br _42, ^42, ^37

42:
  br _41, ^44, ^45

44:
  br ^35

45:
  br ^11

37:
  %% Unique:
  %%    _38
  _48 = landingpad `'catch'`, _38

  %% Aliased:
  %%    _48
  _46 = extract _48, `0`
  br ^35

35:
  _49 = phi { _46, ^37 }, { `timeout`, ^44 }

  %% Aliased:
  %%    _49
  %% Unique:
  %%    _38
  _4 = catch_end _38, _49

  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _61 = is_tagged_tuple _4, `2`, `'EXIT'`
  br _61, ^58, ^51

58:
  %% Argument types:
  %%    _4 => {''EXIT'', any()}
  %% Aliased:
  %%    _4
  _12 = get_tuple_element _4, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _12
  _55 = is_tagged_tuple _12, `2`, `timeout_value`
  br _55, ^52, ^51

52:
  %% Result type:
  %%    'ok'
  ret `ok`

51:
  %% receive_SUITE.erl:520
  %% Aliased:
  %%    _4
  _20 = match_fail `badmatch`, _4

  %% Unique:
  %%    _20
  _64 = succeeded:body _20
  br ^1

34:
  %% receive_SUITE.erl:519
  %% Unique:
  %%    _10
  _21 = match_fail `badmatch`, _10

  %% Unique:
  %%    _21
  _66 = succeeded:body _21
  br ^1

31:
  %% receive_SUITE.erl:518
  %% Aliased:
  %%    _9
  _22 = match_fail `badmatch`, _9

  %% Unique:
  %%    _22
  _68 = succeeded:body _22
  br ^1

26:
  %% receive_SUITE.erl:516
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-wait/1-',1}}
  _23 = match_fail `function_clause`, _0

  %% Unique:
  %%    _23
  _69 = succeeded:body _23
  br ^1

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% receive_SUITE.erl:523
%% Counter = 37
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'r' | 1
%%    _1 =>
%%     1..2
%%    _2 =>
%%     2..3
function `receive_SUITE`:`wait_1`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _0 => 'r' | 1
  %% Unique:
  %%    _0
  _36 = bif:'=:=' _0, `r`
  br _36, ^35, ^19

35:
  br ^12

12:
  %% receive_SUITE.erl:524
  _9 = peek_message `none`

  %% Aliased:
  %%    _9
  _34 = succeeded:guard _9
  br _34, ^33, ^32

33:
  %% receive_SUITE.erl:525
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _3 = bif:byte_size _9

  %% Unique:
  %%    _3
  _25 = succeeded:guard _3
  br _25, ^25, ^23

25:
  %% Argument types:
  %%    _3 => 0..288230376151711743
  %% Unique:
  %%    _3
  _26 = bif:'>' _3, `0`
  br _26, ^26, ^23

26:
  _14 = remove_message
  %% Result type:
  %%    bs_matchable(1)
  %% Aliased:
  %%    _9
  ret _9

23:
  _15 = recv_next
  br ^12

32:
  _27 = wait_timeout `infinity`

  %% Unique:
  %%    _27
  _28 = succeeded:body _27
  br _28, ^31, ^1

31:
  br ^12

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17

19:
  %% Argument types:
  %%    _1 => 1..2
  %%    _2 => 2..3
  %% Unique:
  %%    _1, 
  %%    _2
  _16 = put_tuple `1`, _1, _2
  %% Result type:
  %%    {1, 1..2, 2..3}
  %% Unique:
  %%    _16
  ret _16
}

%% receive_SUITE.erl:533
%% Counter = 69
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_try`(_0) {
0:
  %% receive_SUITE.erl:534
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:534
  %% Unique:
  %%    _1
  _17 = call (`erlang`:`'!'`/2), _1, `{ok,fh}`

  %% Aliased:
  %%    _17
  _31 = succeeded:body _17
  br _31, ^31, ^1

31:
  %% receive_SUITE.erl:534
  %% Result type:
  %%    'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  _13 = call (`recv_in_try_1`/2), `infinity`, `native`

  %% Unique:
  %%    _13
  _32 = succeeded:body _13
  br _32, ^32, ^1

32:
  %% Argument types:
  %%    _13 => 'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  %% Unique:
  %%    _13
  _59 = bif:'=:=' _13, `{ok,fh}`
  br _59, ^59, ^34

59:
  %% receive_SUITE.erl:535
  %% Argument types:
  %%    
  _3 = bif:self

  %% receive_SUITE.erl:535
  %% Unique:
  %%    _3
  _18 = call (`erlang`:`'!'`/2), _3, `{ok,ignored}`

  %% Aliased:
  %%    _18
  _35 = succeeded:body _18
  br _35, ^35, ^1

35:
  %% receive_SUITE.erl:535
  %% Result type:
  %%    'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  _14 = call (`recv_in_try_1`/2), `infinity`, `plain`

  %% Unique:
  %%    _14
  _36 = succeeded:body _14
  br _36, ^36, ^1

36:
  %% Argument types:
  %%    _14 => 'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  %% Unique:
  %%    _14
  _57 = bif:'=:=' _14, `{ok,42}`
  br _57, ^57, ^38

57:
  %% receive_SUITE.erl:536
  %% Argument types:
  %%    
  _5 = bif:self

  %% receive_SUITE.erl:536
  %% Unique:
  %%    _5
  _19 = call (`erlang`:`'!'`/2), _5, `{error,ignored}`

  %% Aliased:
  %%    _19
  _39 = succeeded:body _19
  br _39, ^39, ^1

39:
  %% receive_SUITE.erl:536
  %% Result type:
  %%    'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  _15 = call (`recv_in_try_1`/2), `infinity`, `plain`

  %% Unique:
  %%    _15
  _40 = succeeded:body _15
  br _40, ^40, ^1

40:
  %% Argument types:
  %%    _15 => 'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  %% Unique:
  %%    _15
  _55 = bif:'=:=' _15, `nok`
  br _55, ^54, ^42

54:
  %% receive_SUITE.erl:537
  %% Result type:
  %%    'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  _16 = call (`recv_in_try_1`/2), `1`, `plain`

  %% Unique:
  %%    _16
  _43 = succeeded:body _16
  br _43, ^43, ^1

43:
  %% Argument types:
  %%    _16 => 'nok' | 'timeout' | {'nok', any()} | {'ok', any()}
  %% Unique:
  %%    _16
  _52 = bif:'=:=' _16, `timeout`
  br _52, ^51, ^45

51:
  %% Result type:
  %%    none()
  _8 = make_fun (`recv_in_try_2`/0)

  %% receive_SUITE.erl:539
  %% Aliased:
  %%    _8
  _20 = call (`smoke_receive`/1), _8

  %% Aliased:
  %%    _20
  _46 = succeeded:body _20
  br _46, ^46, ^1

46:
  %% Result type:
  %%    #{reference()=>'false' | 'true'}
  _9 = make_fun (`recv_in_try_3`/0)

  %% receive_SUITE.erl:540
  %% Aliased:
  %%    _9
  _21 = call (`smoke_receive`/1), _9

  %% Aliased:
  %%    _21
  _47 = succeeded:body _21
  br _47, ^47, ^1

47:
  %% Result type:
  %%    #{reference()=>'false' | 'true'}
  _10 = make_fun (`recv_in_try_4`/0)

  %% receive_SUITE.erl:541
  %% Aliased:
  %%    _10
  _22 = call (`smoke_receive`/1), _10

  %% Aliased:
  %%    _22
  _48 = succeeded:body _22
  br _48, ^48, ^1

48:
  %% Result type:
  %%    none()
  _11 = make_fun (`recv_in_try_5`/0)

  %% receive_SUITE.erl:542
  %% Aliased:
  %%    _11
  _23 = call (`smoke_receive`/1), _11

  %% Aliased:
  %%    _23
  _49 = succeeded:body _23
  br _49, ^49, ^1

49:
  _12 = make_fun (`recv_in_catch_1`/0)

  %% receive_SUITE.erl:543
  %% Aliased:
  %%    _12
  _24 = call (`smoke_receive`/1), _12

  %% Aliased:
  %%    _24
  _50 = succeeded:body _24
  br _50, ^50, ^1

50:
  %% Result type:
  %%    'ok'
  ret `ok`

45:
  %% receive_SUITE.erl:537
  %% Unique:
  %%    _16
  _25 = match_fail `badmatch`, _16

  %% Unique:
  %%    _25
  _53 = succeeded:body _25
  br ^1

42:
  %% receive_SUITE.erl:536
  %% Unique:
  %%    _15
  _26 = match_fail `badmatch`, _15

  %% Unique:
  %%    _26
  _56 = succeeded:body _26
  br ^1

38:
  %% receive_SUITE.erl:535
  %% Unique:
  %%    _14
  _27 = match_fail `badmatch`, _14

  %% Unique:
  %%    _27
  _58 = succeeded:body _27
  br ^1

34:
  %% receive_SUITE.erl:534
  %% Unique:
  %%    _13
  _28 = match_fail `badmatch`, _13

  %% Unique:
  %%    _28
  _60 = succeeded:body _28
  br ^1

1:
  _29 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _29
}

%% receive_SUITE.erl:547
%% Counter = 106
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'infinity' | 1
%%    _1 =>
%%     'native' | 'plain'
function `receive_SUITE`:`recv_in_try_1`(_0, _1) {
0:
  br ^105

105:
  _45 = new_try_tag `'try'`
  br _45, ^44, ^42

44:
  br ^19

19:
  %% receive_SUITE.erl:549
  _13 = peek_message `none`

  %% Aliased:
  %%    _13
  _73 = succeeded:guard _13
  br _73, ^72, ^71

72:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _68 = bif:is_tuple _13
  br _68, ^68, ^54

68:
  %% Argument types:
  %%    _13 => {...}
  %% Aliased:
  %%    _13
  _69 = bif:tuple_size _13

  %% Argument types:
  %%    _69 => 0..16777215
  %% Unique:
  %%    _69
  _70 = bif:'=:=' _69, `2`
  br _70, ^67, ^54

67:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _21 = get_tuple_element _13, `0`
  _28 = remove_message

  %% Unique:
  %%    _1
  _104 = bif:'=:=' _1, `plain`
  br _104, ^60, ^59

60:
  %% receive_SUITE.erl:565
  _29 = call (`id`/1), `42`

  %% Aliased:
  %%    _29
  _58 = succeeded:body _29
  br _58, ^58, ^42

58:
  br ^55

59:
  %% Argument types:
  %%    _13 => {any(), any()}
  %% Aliased:
  %%    _13
  _20 = get_tuple_element _13, `1`

  %% receive_SUITE.erl:563
  %% Aliased:
  %%    _20
  _30 = call (`id`/1), _20

  %% Aliased:
  %%    _30
  _57 = succeeded:body _30
  br _57, ^57, ^42

57:
  br ^55

55:
  _3 = phi { _30, ^57 }, { _29, ^58 }
  switch _21, ^63, [
    { `error`, ^64 },
    { `ok`, ^65 }
  ]

65:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _33 = put_tuple `ok`, _3
  br ^47

64:
  br ^47

63:
  %% receive_SUITE.erl:567
  %% Aliased:
  %%    _21
  _34 = match_fail `case_clause`, _21

  %% Unique:
  %%    _34
  _66 = succeeded:body _34
  br ^42

54:
  _35 = recv_next
  br ^19

71:
  %% Unique:
  %%    _0
  _48 = wait_timeout _0

  %% Unique:
  %%    _48
  _49 = succeeded:body _48
  br _49, ^49, ^42

49:
  br _48, ^51, ^52

51:
  br ^47

47:
  _26 = phi { `timeout`, ^51 }, { `nok`, ^64 }, { _33, ^65 }

  %% Unique:
  %%    _45
  _87 = kill_try_tag _45
  %% Result type:
  %%    'nok' | 'timeout' | {'ok', any()}
  %% Unique:
  %%    _26
  ret _26

52:
  br ^19

42:
  %% Unique:
  %%    _45
  _85 = landingpad `'try'`, _45

  %% Aliased:
  %%    _85
  _9 = extract _85, `0`

  %% Aliased:
  %%    _85
  _8 = extract _85, `1`

  %% Aliased:
  %%    _85
  _7 = extract _85, `2`

  %% Unique:
  %%    _45
  _86 = kill_try_tag _45

  %% Argument types:
  %%    _9 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _9
  _83 = bif:'=:=' _9, `throw`
  br _83, ^82, ^75

82:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _79 = is_tagged_tuple _8, `2`, `error`
  br _79, ^76, ^75

76:
  %% Argument types:
  %%    _8 => {'error', any()}
  %% Aliased:
  %%    _8
  _22 = get_tuple_element _8, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _37 = put_tuple `nok`, _22
  %% Result type:
  %%    {'nok', any()}
  %% Unique:
  %%    _37
  ret _37

75:
  %% Aliased:
  %%    _7, 
  %%    _8
  _38 = resume _7, _8

  %% Unique:
  %%    _38
  _84 = succeeded:body _38
  br ^1

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% receive_SUITE.erl:583
%% Counter = 57
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_try_2`() {
0:
  br ^56

56:
  _29 = new_try_tag `'try'`
  br _29, ^28, ^26

28:
  br ^18

18:
  _31 = wait_timeout `infinity`

  %% Unique:
  %%    _31
  _32 = succeeded:body _31
  br _32, ^35, ^26

35:
  br ^18

26:
  %% Unique:
  %%    _29
  _37 = landingpad `'try'`, _29

  %% Aliased:
  %%    _37
  _10 = extract _37, `1`

  %% Aliased:
  %%    _37
  _9 = extract _37, `2`

  %% Unique:
  %%    _29
  _38 = kill_try_tag _29

  %% Aliased:
  %%    _9, 
  %%    _10
  _22 = resume _9, _10

  %% Unique:
  %%    _22
  _36 = succeeded:body _22
  br ^1

1:
  _23 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _23
}

%% receive_SUITE.erl:596
%% Counter = 82
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_try_3`() {
0:
  %% receive_SUITE.erl:597
  _0 = call (`erlang`:`make_ref`/0)
  _22 = new_try_tag `'catch'`
  br _22, ^80, ^21

80:
  br ^81

81:
  _27 = new_try_tag `'catch'`
  br _27, ^25, ^26

25:
  %% receive_SUITE.erl:599
  _10 = match_fail `badmatch`, `kid`

  %% Unique:
  %%    _10
  _29 = succeeded:body _10
  br ^26

26:
  %% Unique:
  %%    _27
  _32 = landingpad `'catch'`, _27

  %% Aliased:
  %%    _32
  _30 = extract _32, `0`
  br ^24

24:
  %% Aliased:
  %%    _30
  %% Unique:
  %%    _27
  _2 = catch_end _27, _30
  br ^7

7:
  _35 = wait_timeout `infinity`

  %% Unique:
  %%    _35
  _36 = succeeded:body _35
  br _36, ^39, ^21

39:
  br ^7

21:
  %% Unique:
  %%    _22
  _46 = landingpad `'catch'`, _22

  %% Aliased:
  %%    _46
  _44 = extract _46, `0`
  br ^19

19:
  %% Aliased:
  %%    _44
  %% Unique:
  %%    _22
  _4 = catch_end _22, _44

  %% receive_SUITE.erl:598
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _5 = bif:'not' _4

  %% Unique:
  %%    _5
  _48 = succeeded:body _5
  br _48, ^48, ^1

48:
  %% receive_SUITE.erl:597
  %% Aliased:
  %%    _0, 
  %%    _5
  _15 = put_map `assoc`, `#{}`, _0, _5
  %% Result type:
  %%    #{reference()=>'false' | 'true'}
  %% Aliased:
  %%    _15
  ret _15

1:
  _16 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _16
}

%% receive_SUITE.erl:604
%% Counter = 90
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_try_4`() {
0:
  %% receive_SUITE.erl:605
  _0 = call (`erlang`:`make_ref`/0)
  _26 = new_try_tag `'catch'`
  br _26, ^88, ^25

88:
  br ^89

89:
  _31 = new_try_tag `'catch'`
  br _31, ^29, ^30

29:
  %% receive_SUITE.erl:607
  _12 = match_fail `badmatch`, `kid`

  %% Unique:
  %%    _12
  _33 = succeeded:body _12
  br ^30

30:
  %% Unique:
  %%    _31
  _36 = landingpad `'catch'`, _31

  %% Aliased:
  %%    _36
  _34 = extract _36, `0`
  br ^28

28:
  %% Aliased:
  %%    _34
  %% Unique:
  %%    _31
  _2 = catch_end _31, _34
  br ^9

9:
  %% receive_SUITE.erl:608
  _6 = peek_message `none`

  %% Aliased:
  %%    _6
  _47 = succeeded:guard _6
  br _47, ^45, ^46

45:
  _15 = recv_next
  br ^9

46:
  _40 = wait_timeout `infinity`

  %% Unique:
  %%    _40
  _41 = succeeded:body _40
  br _41, ^44, ^25

44:
  br ^9

25:
  %% Unique:
  %%    _26
  _54 = landingpad `'catch'`, _26

  %% Aliased:
  %%    _54
  _52 = extract _54, `0`
  br ^23

23:
  %% Aliased:
  %%    _52
  %% Unique:
  %%    _26
  _4 = catch_end _26, _52

  %% receive_SUITE.erl:606
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _5 = bif:'not' _4

  %% Unique:
  %%    _5
  _56 = succeeded:body _5
  br _56, ^56, ^1

56:
  %% receive_SUITE.erl:605
  %% Aliased:
  %%    _0, 
  %%    _5
  _19 = put_map `assoc`, `#{}`, _0, _5
  %% Result type:
  %%    #{reference()=>'false' | 'true'}
  %% Aliased:
  %%    _19
  ret _19

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}

%% receive_SUITE.erl:612
%% Counter = 84
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_try_5`() {
0:
  %% receive_SUITE.erl:616
  _2 = bs_init_writable `256`
  _53 = new_try_tag `'try'`
  br _53, ^67, ^50

67:
  %% receive_SUITE.erl:616
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _2
  _10 = call (`'-recv_in_try_5/0-lbc$^0/2-0-'`/2), `<<3:4>>`, _2

  %% Unique:
  %%    _10
  _54 = succeeded:body _10
  br _54, ^54, ^50

54:
  %% receive_SUITE.erl:616
  _11 = call (`erlang`:`get`/0)
  br ^39

39:
  _57 = wait_timeout `infinity`

  %% Unique:
  %%    _57
  _58 = succeeded:body _57
  br _58, ^61, ^50

61:
  br ^39

50:
  %% Unique:
  %%    _53
  _64 = landingpad `'try'`, _53

  %% Aliased:
  %%    _64
  _19 = extract _64, `1`

  %% Aliased:
  %%    _64
  _18 = extract _64, `2`

  %% Unique:
  %%    _53
  _65 = kill_try_tag _53

  %% Aliased:
  %%    _18, 
  %%    _19
  _46 = resume _18, _19

  %% Unique:
  %%    _46
  _63 = succeeded:body _46
  br ^1

1:
  _47 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _47
}

%% receive_SUITE.erl:626
%% Counter = 59
%% bs_ensure_opt: true
function `receive_SUITE`:`recv_in_catch_1`() {
0:
  br ^58

58:
  _23 = new_try_tag `'catch'`
  br _23, ^21, ^22

21:
  br ^11

11:
  _26 = wait_timeout `infinity`

  %% Unique:
  %%    _26
  _27 = succeeded:body _26
  br _27, ^30, ^22

30:
  br ^11

22:
  %% Unique:
  %%    _23
  _39 = landingpad `'catch'`, _23

  %% Aliased:
  %%    _39
  _37 = extract _39, `0`
  br ^20

20:
  %% Aliased:
  %%    _37
  %% Unique:
  %%    _23
  _12 = catch_end _23, _37
  %% Aliased:
  %%    _12
  ret _12
}

%% receive_SUITE.erl:641
%% Counter = 47
%% bs_ensure_opt: true
function `receive_SUITE`:`double_recv`(_0) {
0:
  %% receive_SUITE.erl:642
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:642
  %% Unique:
  %%    _1
  _11 = call (`erlang`:`'!'`/2), _1, `{more,{a,term}}`

  %% Aliased:
  %%    _11
  _19 = succeeded:body _11
  br _19, ^19, ^1

19:
  %% receive_SUITE.erl:643
  %% Result type:
  %%    'error' | 'ok'
  _7 = call (`do_double_recv`/2), `{more,{a,term}}`, `any`

  %% Unique:
  %%    _7
  _20 = succeeded:body _7
  br _20, ^20, ^1

20:
  %% Argument types:
  %%    _7 => 'error' | 'ok'
  %% Unique:
  %%    _7
  _43 = bif:'=:=' _7, `ok`
  br _43, ^42, ^22

42:
  %% receive_SUITE.erl:644
  %% Argument types:
  %%    
  _3 = bif:self

  %% receive_SUITE.erl:644
  %% Unique:
  %%    _3
  _12 = call (`erlang`:`'!'`/2), _3, `message`

  %% Aliased:
  %%    _12
  _23 = succeeded:body _12
  br _23, ^23, ^1

23:
  %% receive_SUITE.erl:645
  %% Result type:
  %%    'error' | 'ok'
  _8 = call (`do_double_recv`/2), `whatever`, `message`

  %% Unique:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    _8 => 'error' | 'ok'
  %% Unique:
  %%    _8
  _40 = bif:'=:=' _8, `ok`
  br _40, ^39, ^26

39:
  %% receive_SUITE.erl:647
  %% Result type:
  %%    'error' | 'ok'
  _9 = call (`do_double_recv`/2), `{more,42}`, `whatever`

  %% Unique:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    _9 => 'error' | 'ok'
  %% Unique:
  %%    _9
  _37 = bif:'=:=' _9, `error`
  br _37, ^36, ^29

36:
  %% receive_SUITE.erl:648
  %% Result type:
  %%    'error' | 'ok'
  _10 = call (`do_double_recv`/2), `whatever`, `whatever`

  %% Unique:
  %%    _10
  _30 = succeeded:body _10
  br _30, ^30, ^1

30:
  %% Argument types:
  %%    _10 => 'error' | 'ok'
  %% Unique:
  %%    _10
  _34 = bif:'=:=' _10, `error`
  br _34, ^33, ^32

33:
  %% Result type:
  %%    'ok'
  ret `ok`

32:
  %% receive_SUITE.erl:648
  _13 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _13
  _35 = succeeded:body _13
  br ^1

29:
  %% receive_SUITE.erl:647
  _14 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _14
  _38 = succeeded:body _14
  br ^1

26:
  %% receive_SUITE.erl:645
  _15 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _15
  _41 = succeeded:body _15
  br ^1

22:
  %% receive_SUITE.erl:643
  _16 = match_fail `badmatch`, `error`

  %% Unique:
  %%    _16
  _44 = succeeded:body _16
  br ^1

1:
  _17 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _17
}

%% receive_SUITE.erl:651
%% Counter = 65
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     'whatever' | {'more', 42 | {'a', 'term'}}
%%    _1 =>
%%     'any' | 'message' | 'whatever'
function `receive_SUITE`:`do_double_recv`(_0, _1) {
0:
  %% Argument types:
  %%    _0 => 'whatever' | {'more', 42 | {'a', 'term'}}
  %% Unique:
  %%    _0
  _49 = bif:is_tuple _0
  br _49, ^46, ^26

46:
  %% Argument types:
  %%    _0 => {'more', 42 | {'a', 'term'}}
  %% Unique:
  %%    _0
  _14 = get_tuple_element _0, `1`
  br ^16

16:
  %% receive_SUITE.erl:652
  _7 = peek_message `none`

  %% Aliased:
  %%    _7
  _45 = succeeded:guard _7
  br _45, ^44, ^43

44:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _40 = is_tagged_tuple _7, `2`, `more`
  br _40, ^39, ^35

39:
  %% Argument types:
  %%    _7 => {'more', any()}
  %% Aliased:
  %%    _7
  _18 = get_tuple_element _7, `1`

  %% Argument types:
  %%    _14 => 42 | {'a', 'term'}
  %% Aliased:
  %%    _14, 
  %%    _18
  _36 = bif:'=:=' _18, _14
  br _36, ^36, ^35

36:
  _20 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

35:
  _21 = recv_next
  br ^16

43:
  _29 = wait_timeout `0`

  %% Unique:
  %%    _29
  _30 = succeeded:body _29
  br _30, ^30, ^1

30:
  br _29, ^32, ^33

32:
  %% Result type:
  %%    'error'
  ret `error`

33:
  br ^16

26:
  br ^13

13:
  %% receive_SUITE.erl:659
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _64 = succeeded:guard _10
  br _64, ^63, ^62

63:
  %% Argument types:
  %%    _1 => 'any' | 'message' | 'whatever'
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _1
  _61 = bif:'=:=' _10, _1
  br _61, ^61, ^60

61:
  _22 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

60:
  _23 = recv_next
  br ^13

62:
  _54 = wait_timeout `0`

  %% Unique:
  %%    _54
  _55 = succeeded:body _54
  br _55, ^55, ^1

55:
  br _54, ^57, ^58

57:
  %% Result type:
  %%    'error'
  ret `error`

58:
  br ^13

1:
  _24 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _24
}

%% receive_SUITE.erl:668
%% Counter = 137
%% bs_ensure_opt: true
function `receive_SUITE`:`receive_var_zero`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _54 = bif:is_list _0
  br _54, ^54, ^53

54:
  %% receive_SUITE.erl:669
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:669
  %% Unique:
  %%    _1
  _32 = call (`erlang`:`'!'`/2), _1, `x`

  %% Aliased:
  %%    _32
  _55 = succeeded:body _32
  br _55, ^55, ^1

55:
  %% receive_SUITE.erl:670
  %% Argument types:
  %%    
  _2 = bif:self

  %% receive_SUITE.erl:670
  %% Unique:
  %%    _2
  _33 = call (`erlang`:`'!'`/2), _2, `y`

  %% Aliased:
  %%    _33
  _56 = succeeded:body _33
  br _56, ^56, ^1

56:
  %% receive_SUITE.erl:671
  %% Result type:
  %%    0
  Z = call (`zero`/0)

  %% Unique:
  %%    Z
  _57 = succeeded:body Z
  br _57, ^57, ^1

57:
  br ^23

23:
  %% receive_SUITE.erl:672
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _71 = succeeded:guard _10
  br _71, ^70, ^69

70:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _68 = bif:'=:=' _10, `z`
  br _68, ^67, ^66

67:
  _36 = remove_message

  %% receive_SUITE.erl:672
  _49 = match_fail `badmatch`, `ok`

  %% Unique:
  %%    _49
  _131 = succeeded:body _49
  br ^1

66:
  _37 = recv_next
  br ^23

69:
  _60 = wait_timeout `0`

  %% Unique:
  %%    _60
  _61 = succeeded:body _60
  br _61, ^61, ^1

61:
  br _60, ^24, ^64

24:
  _75 = wait_timeout `0`

  %% Unique:
  %%    _75
  _76 = succeeded:body _75
  br _76, ^76, ^1

76:
  br _75, ^126, ^24

126:
  %% receive_SUITE.erl:679
  %% Argument types:
  %%    
  _8 = bif:self

  %% receive_SUITE.erl:679
  %% Unique:
  %%    _8
  _40 = call (`erlang`:`'!'`/2), _8, `w`

  %% Aliased:
  %%    _40
  _82 = succeeded:body _40
  br _82, ^82, ^1

82:
  br ^25

25:
  %% receive_SUITE.erl:680
  _20 = peek_message `none`

  %% Aliased:
  %%    _20
  _125 = succeeded:guard _20
  br _125, ^123, ^124

123:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _116 = bif:'=:=' _20, `x`
  br _116, ^115, ^86

115:
  _41 = remove_message
  br ^28

28:
  %% receive_SUITE.erl:682
  _14 = peek_message `none`

  %% Aliased:
  %%    _14
  _100 = succeeded:guard _14
  br _100, ^98, ^99

98:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _92 = bif:'=:=' _14, `y`
  br _92, ^91, ^90

91:
  _42 = remove_message
  br ^30

30:
  %% receive_SUITE.erl:683
  _17 = peek_message `none`

  %% Aliased:
  %%    _17
  _114 = succeeded:guard _17
  br _114, ^112, ^113

112:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _106 = bif:'=:=' _17, `w`
  br _106, ^105, ^104

105:
  _44 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

104:
  _45 = recv_next
  br ^30

113:
  _107 = wait_timeout `infinity`

  %% Unique:
  %%    _107
  _108 = succeeded:body _107
  br _108, ^111, ^1

111:
  br ^30

90:
  _43 = recv_next
  br ^28

99:
  _93 = wait_timeout `infinity`

  %% Unique:
  %%    _93
  _94 = succeeded:body _93
  br _94, ^97, ^1

97:
  br ^28

86:
  _46 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _20
  _27 = put_tuple `bad_message`, _20

  %% receive_SUITE.erl:685
  %% Unique:
  %%    _27
  _47 = call (`ct`:`fail`/1), _27

  %% Aliased:
  %%    _47
  _117 = succeeded:body _47
  br _117, ^117, ^1

117:
  %% Aliased:
  %%    _47
  ret _47

124:
  _118 = wait_timeout `infinity`

  %% Unique:
  %%    _118
  _119 = succeeded:body _118
  br _119, ^122, ^1

122:
  br ^25

64:
  br ^23

53:
  %% receive_SUITE.erl:668
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-receive_var_zero/1-',1}}
  _50 = match_fail `function_clause`, _0

  %% Unique:
  %%    _50
  _132 = succeeded:body _50
  br ^1

1:
  _51 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _51
}

%% receive_SUITE.erl:688
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`zero`() {
0:
  %% Result type:
  %%    0
  ret `0`
}

%% receive_SUITE.erl:709
%% Counter = 341
%% bs_ensure_opt: true
function `receive_SUITE`:`match_built_terms`(_0) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _150 = bif:is_list _0
  br _150, ^150, ^149

150:
  %% receive_SUITE.erl:710
  _308 = recv_marker_reserve

  %% receive_SUITE.erl:710
  Ref = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _308
  _309 = recv_marker_bind _308, Ref

  %% receive_SUITE.erl:710
  A = call (`id`/1), `97`

  %% Aliased:
  %%    A
  _152 = succeeded:body A
  br _152, ^152, ^1

152:
  %% receive_SUITE.erl:710
  B = call (`id`/1), `98`

  %% Aliased:
  %%    B
  _153 = succeeded:body B
  br _153, ^153, ^1

153:
  %% Argument types:
  %%    
  %% Aliased:
  %%    B
  _78 = put_list B, `[]`

  %% Argument types:
  %%    _78 => nonempty_list(any())
  %% Aliased:
  %%    A
  %% Unique:
  %%    _78
  _79 = put_list A, _78

  %% receive_SUITE.erl:710
  %% Unique:
  %%    _79
  Built = call (`id`/1), _79

  %% Aliased:
  %%    Built
  _154 = succeeded:body Built
  br _154, ^154, ^1

154:
  %% receive_SUITE.erl:710
  %% Argument types:
  %%    
  _5 = bif:self

  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    A, 
  %%    B
  %% Unique:
  %%    Ref
  _80 = put_tuple Ref, A, B

  %% receive_SUITE.erl:710
  %% Unique:
  %%    _5, 
  %%    _80
  _126 = call (`erlang`:`'!'`/2), _5, _80

  %% Aliased:
  %%    _126
  _155 = succeeded:body _126
  br _155, ^155, ^1

155:
  br ^81

81:
  %% receive_SUITE.erl:710
  %% Aliased:
  %%    Ref
  _66 = peek_message Ref

  %% Aliased:
  %%    _66
  _176 = succeeded:guard _66
  br _176, ^175, ^174

175:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _66
  _171 = bif:is_tuple _66
  br _171, ^171, ^165

171:
  %% Argument types:
  %%    _66 => {...}
  %% Aliased:
  %%    _66
  _172 = bif:tuple_size _66

  %% Argument types:
  %%    _172 => 0..16777215
  %% Unique:
  %%    _172
  _173 = bif:'=:=' _172, `3`
  br _173, ^170, ^165

170:
  %% Argument types:
  %%    _66 => {any(), any(), any()}
  %% Aliased:
  %%    _66
  _84 = get_tuple_element _66, `0`

  %% Argument types:
  %%    _66 => {any(), any(), any()}
  %% Aliased:
  %%    _66
  _83 = get_tuple_element _66, `1`

  %% Argument types:
  %%    _66 => {any(), any(), any()}
  %% Aliased:
  %%    _66
  _82 = get_tuple_element _66, `2`

  %% receive_SUITE.erl:710
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _84
  %% Unique:
  %%    Ref
  _37 = bif:'=:=' _84, Ref
  br _37, ^296, ^165

296:
  %% receive_SUITE.erl:710
  %% Argument types:
  %%    
  %% Aliased:
  %%    _83, 
  %%    A
  _35 = bif:'=:=' _83, A
  br _35, ^297, ^165

297:
  %% receive_SUITE.erl:710
  %% Argument types:
  %%    
  %% Aliased:
  %%    _82, 
  %%    B
  _33 = bif:'=:=' _82, B
  br _33, ^298, ^165

298:
  %% Argument types:
  %%    
  %% Aliased:
  %%    B
  _85 = put_list B, `[]`

  %% Argument types:
  %%    _85 => nonempty_list(any())
  %% Aliased:
  %%    A
  %% Unique:
  %%    _85
  _86 = put_list A, _85

  %% receive_SUITE.erl:710
  %% Argument types:
  %%    _86 => nonempty_list(any())
  %% Aliased:
  %%    Built
  %% Unique:
  %%    _86
  _34 = bif:'=:=' _86, Built
  br _34, ^325, ^165

325:
  %% Aliased:
  %%    Ref
  _310 = recv_marker_clear Ref
  _127 = remove_message
  br ^157

165:
  _128 = recv_next
  br ^81

174:
  _158 = wait_timeout `5000`

  %% Unique:
  %%    _158
  _159 = succeeded:body _158
  br _159, ^159, ^1

159:
  br _158, ^318, ^162

318:
  %% Aliased:
  %%    Ref
  _317 = recv_marker_clear Ref

  %% receive_SUITE.erl:710
  _129 = call (`ct`:`fail`/1), `"Failed to match message with term built in receive guard."`

  %% Aliased:
  %%    _129
  _161 = succeeded:body _129
  br _161, ^157, ^1

157:
  %% receive_SUITE.erl:711
  _306 = recv_marker_reserve

  %% receive_SUITE.erl:711
  _88 = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    _88
  %% Unique:
  %%    _306
  _307 = recv_marker_bind _306, _88

  %% receive_SUITE.erl:711
  _89 = call (`id`/1), `97`

  %% Aliased:
  %%    _89
  _178 = succeeded:body _89
  br _178, ^178, ^1

178:
  %% receive_SUITE.erl:711
  _90 = call (`id`/1), `98`

  %% Aliased:
  %%    _90
  _179 = succeeded:body _90
  br _179, ^179, ^1

179:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _89, 
  %%    _90
  _91 = put_tuple _89, _90

  %% receive_SUITE.erl:711
  %% Unique:
  %%    _91
  _92 = call (`id`/1), _91

  %% Aliased:
  %%    _92
  _180 = succeeded:body _92
  br _180, ^180, ^1

180:
  %% receive_SUITE.erl:711
  %% Argument types:
  %%    
  _11 = bif:self

  %% Argument types:
  %%    _88 => reference()
  %% Aliased:
  %%    _89, 
  %%    _90
  %% Unique:
  %%    _88
  _93 = put_tuple _88, _89, _90

  %% receive_SUITE.erl:711
  %% Unique:
  %%    _11, 
  %%    _93
  _130 = call (`erlang`:`'!'`/2), _11, _93

  %% Aliased:
  %%    _130
  _181 = succeeded:body _130
  br _181, ^181, ^1

181:
  br ^94

94:
  %% receive_SUITE.erl:711
  %% Aliased:
  %%    _88
  _69 = peek_message _88

  %% Aliased:
  %%    _69
  _202 = succeeded:guard _69
  br _202, ^201, ^200

201:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _69
  _197 = bif:is_tuple _69
  br _197, ^197, ^191

197:
  %% Argument types:
  %%    _69 => {...}
  %% Aliased:
  %%    _69
  _198 = bif:tuple_size _69

  %% Argument types:
  %%    _198 => 0..16777215
  %% Unique:
  %%    _198
  _199 = bif:'=:=' _198, `3`
  br _199, ^196, ^191

196:
  %% Argument types:
  %%    _69 => {any(), any(), any()}
  %% Aliased:
  %%    _69
  _98 = get_tuple_element _69, `0`

  %% Argument types:
  %%    _69 => {any(), any(), any()}
  %% Aliased:
  %%    _69
  _97 = get_tuple_element _69, `1`

  %% Argument types:
  %%    _69 => {any(), any(), any()}
  %% Aliased:
  %%    _69
  _96 = get_tuple_element _69, `2`

  %% receive_SUITE.erl:711
  %% Argument types:
  %%    _88 => reference()
  %% Aliased:
  %%    _98
  %% Unique:
  %%    _88
  _46 = bif:'=:=' _98, _88
  br _46, ^287, ^191

287:
  %% receive_SUITE.erl:711
  %% Argument types:
  %%    
  %% Aliased:
  %%    _89, 
  %%    _97
  _44 = bif:'=:=' _97, _89
  br _44, ^288, ^191

288:
  %% receive_SUITE.erl:711
  %% Argument types:
  %%    
  %% Aliased:
  %%    _90, 
  %%    _96
  _42 = bif:'=:=' _96, _90
  br _42, ^289, ^191

289:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _89, 
  %%    _90
  _99 = put_tuple _89, _90

  %% receive_SUITE.erl:711
  %% Argument types:
  %%    _99 => {any(), any()}
  %% Aliased:
  %%    _92
  %% Unique:
  %%    _99
  _43 = bif:'=:=' _99, _92
  br _43, ^324, ^191

324:
  %% Aliased:
  %%    _88
  _311 = recv_marker_clear _88
  _131 = remove_message
  br ^183

191:
  _132 = recv_next
  br ^94

200:
  _184 = wait_timeout `5000`

  %% Unique:
  %%    _184
  _185 = succeeded:body _184
  br _185, ^185, ^1

185:
  br _184, ^319, ^188

319:
  %% Aliased:
  %%    _88
  _316 = recv_marker_clear _88

  %% receive_SUITE.erl:711
  _133 = call (`ct`:`fail`/1), `"Failed to match message with term built in receive guard."`

  %% Aliased:
  %%    _133
  _187 = succeeded:body _133
  br _187, ^183, ^1

183:
  %% receive_SUITE.erl:712
  _304 = recv_marker_reserve

  %% receive_SUITE.erl:712
  _101 = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    _101
  %% Unique:
  %%    _304
  _305 = recv_marker_bind _304, _101

  %% receive_SUITE.erl:712
  _102 = call (`id`/1), `97`

  %% Aliased:
  %%    _102
  _204 = succeeded:body _102
  br _204, ^204, ^1

204:
  %% receive_SUITE.erl:712
  _103 = call (`id`/1), `98`

  %% Aliased:
  %%    _103
  _205 = succeeded:body _103
  br _205, ^205, ^1

205:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    
  %% Aliased:
  %%    _102, 
  %%    _103
  %% Anno: #{unit => 16}
  _16 = bs_create_bin `integer`, `[1,{segment,1}]`, _102, `8`, `integer`, `[1,{segment,2}]`, _103, `8`

  %% Aliased:
  %%    _16
  _206 = succeeded:body _16
  br _206, ^206, ^1

206:
  %% receive_SUITE.erl:712
  %% Aliased:
  %%    _16
  _104 = call (`id`/1), _16

  %% Aliased:
  %%    _104
  _207 = succeeded:body _104
  br _207, ^207, ^1

207:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    
  _18 = bif:self

  %% Argument types:
  %%    _101 => reference()
  %% Aliased:
  %%    _102, 
  %%    _103
  %% Unique:
  %%    _101
  _105 = put_tuple _101, _102, _103

  %% receive_SUITE.erl:712
  %% Unique:
  %%    _18, 
  %%    _105
  _134 = call (`erlang`:`'!'`/2), _18, _105

  %% Aliased:
  %%    _134
  _208 = succeeded:body _134
  br _208, ^208, ^1

208:
  br ^106

106:
  %% receive_SUITE.erl:712
  %% Aliased:
  %%    _101
  _72 = peek_message _101

  %% Aliased:
  %%    _72
  _232 = succeeded:guard _72
  br _232, ^231, ^230

231:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _72
  _227 = bif:is_tuple _72
  br _227, ^227, ^218

227:
  %% Argument types:
  %%    _72 => {...}
  %% Aliased:
  %%    _72
  _228 = bif:tuple_size _72

  %% Argument types:
  %%    _228 => 0..16777215
  %% Unique:
  %%    _228
  _229 = bif:'=:=' _228, `3`
  br _229, ^226, ^218

226:
  %% Argument types:
  %%    _72 => {any(), any(), any()}
  %% Aliased:
  %%    _72
  _110 = get_tuple_element _72, `0`

  %% Argument types:
  %%    _72 => {any(), any(), any()}
  %% Aliased:
  %%    _72
  _109 = get_tuple_element _72, `1`

  %% Argument types:
  %%    _72 => {any(), any(), any()}
  %% Aliased:
  %%    _72
  _108 = get_tuple_element _72, `2`

  %% receive_SUITE.erl:712
  %% Argument types:
  %%    _101 => reference()
  %% Aliased:
  %%    _110
  %% Unique:
  %%    _101
  _55 = bif:'=:=' _110, _101
  br _55, ^279, ^218

279:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    
  %% Aliased:
  %%    _102, 
  %%    _109
  _53 = bif:'=:=' _109, _102
  br _53, ^280, ^218

280:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    
  %% Aliased:
  %%    _103, 
  %%    _108
  _51 = bif:'=:=' _108, _103
  br _51, ^281, ^218

281:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    
  %% Aliased:
  %%    _102, 
  %%    _103
  %% Anno: #{unit => 16}
  _19 = bs_create_bin `integer`, `[1,{segment,1}]`, _102, `8`, `integer`, `[1,{segment,2}]`, _103, `8`

  %% Aliased:
  %%    _19
  _221 = succeeded:guard _19
  br _221, ^274, ^218

274:
  %% receive_SUITE.erl:712
  %% Argument types:
  %%    _19 => bitstring(16)
  %% Aliased:
  %%    _19, 
  %%    _104
  _136 = bif:'=:=' _19, _104
  br _136, ^323, ^218

323:
  %% Aliased:
  %%    _101
  _312 = recv_marker_clear _101
  _137 = remove_message
  br ^210

218:
  _138 = recv_next
  br ^106

230:
  _211 = wait_timeout `5000`

  %% Unique:
  %%    _211
  _212 = succeeded:body _211
  br _212, ^212, ^1

212:
  br _211, ^320, ^215

320:
  %% Aliased:
  %%    _101
  _315 = recv_marker_clear _101

  %% receive_SUITE.erl:712
  _139 = call (`ct`:`fail`/1), `"Failed to match message with term built in receive guard."`

  %% Aliased:
  %%    _139
  _214 = succeeded:body _139
  br _214, ^210, ^1

210:
  %% receive_SUITE.erl:713
  _302 = recv_marker_reserve

  %% receive_SUITE.erl:713
  _112 = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    _112
  %% Unique:
  %%    _302
  _303 = recv_marker_bind _302, _112

  %% receive_SUITE.erl:713
  _113 = call (`id`/1), `97`

  %% Aliased:
  %%    _113
  _234 = succeeded:body _113
  br _234, ^234, ^1

234:
  %% receive_SUITE.erl:713
  _114 = call (`id`/1), `98`

  %% Aliased:
  %%    _114
  _235 = succeeded:body _114
  br _235, ^235, ^1

235:
  %% receive_SUITE.erl:713
  %% Aliased:
  %%    _113, 
  %%    _114
  _24 = put_map `assoc`, `#{}`, `1`, _113, `2`, _114

  %% receive_SUITE.erl:713
  %% Aliased:
  %%    _24
  _115 = call (`id`/1), _24

  %% Aliased:
  %%    _115
  _236 = succeeded:body _115
  br _236, ^236, ^1

236:
  %% receive_SUITE.erl:713
  %% Argument types:
  %%    
  _26 = bif:self

  %% Argument types:
  %%    _112 => reference()
  %% Aliased:
  %%    _113, 
  %%    _114
  %% Unique:
  %%    _112
  _116 = put_tuple _112, _113, _114

  %% receive_SUITE.erl:713
  %% Unique:
  %%    _26, 
  %%    _116
  _140 = call (`erlang`:`'!'`/2), _26, _116

  %% Aliased:
  %%    _140
  _237 = succeeded:body _140
  br _237, ^237, ^1

237:
  br ^117

117:
  %% receive_SUITE.erl:713
  %% Aliased:
  %%    _112
  _75 = peek_message _112

  %% Aliased:
  %%    _75
  _260 = succeeded:guard _75
  br _260, ^259, ^258

259:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _75
  _255 = bif:is_tuple _75
  br _255, ^255, ^247

255:
  %% Argument types:
  %%    _75 => {...}
  %% Aliased:
  %%    _75
  _256 = bif:tuple_size _75

  %% Argument types:
  %%    _256 => 0..16777215
  %% Unique:
  %%    _256
  _257 = bif:'=:=' _256, `3`
  br _257, ^254, ^247

254:
  %% Argument types:
  %%    _75 => {any(), any(), any()}
  %% Aliased:
  %%    _75
  _121 = get_tuple_element _75, `0`

  %% Argument types:
  %%    _75 => {any(), any(), any()}
  %% Aliased:
  %%    _75
  _120 = get_tuple_element _75, `1`

  %% Argument types:
  %%    _75 => {any(), any(), any()}
  %% Aliased:
  %%    _75
  _119 = get_tuple_element _75, `2`

  %% receive_SUITE.erl:713
  %% Argument types:
  %%    _112 => reference()
  %% Aliased:
  %%    _121
  %% Unique:
  %%    _112
  _64 = bif:'=:=' _121, _112
  br _64, ^267, ^247

267:
  %% receive_SUITE.erl:713
  %% Argument types:
  %%    
  %% Aliased:
  %%    _113, 
  %%    _120
  _62 = bif:'=:=' _120, _113
  br _62, ^268, ^247

268:
  %% receive_SUITE.erl:713
  %% Argument types:
  %%    
  %% Aliased:
  %%    _114, 
  %%    _119
  _60 = bif:'=:=' _119, _114
  br _60, ^269, ^247

269:
  %% receive_SUITE.erl:713
  %% Aliased:
  %%    _113, 
  %%    _114
  _27 = put_map `assoc`, `#{}`, `1`, _113, `2`, _114

  %% receive_SUITE.erl:713
  %% Argument types:
  %%    _27 => #{1..2=>any()}
  %% Aliased:
  %%    _27, 
  %%    _115
  _142 = bif:'=:=' _27, _115
  br _142, ^322, ^247

322:
  %% Aliased:
  %%    _112
  _313 = recv_marker_clear _112
  _143 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

247:
  _144 = recv_next
  br ^117

258:
  _240 = wait_timeout `5000`

  %% Unique:
  %%    _240
  _241 = succeeded:body _240
  br _241, ^241, ^1

241:
  br _240, ^321, ^244

321:
  %% Aliased:
  %%    _112
  _314 = recv_marker_clear _112

  %% receive_SUITE.erl:713
  _145 = call (`ct`:`fail`/1), `"Failed to match message with term built in receive guard."`

  %% Aliased:
  %%    _145
  _243 = succeeded:body _145
  br _243, ^243, ^1

243:
  %% Aliased:
  %%    _145
  ret _145

244:
  br ^117

215:
  br ^106

188:
  br ^94

162:
  br ^81

149:
  %% receive_SUITE.erl:709
  %% Aliased:
  %%    _0
  %% Anno: #{inlined => {'-inlined-match_built_terms/1-',1}}
  _146 = match_fail `function_clause`, _0

  %% Unique:
  %%    _146
  _261 = succeeded:body _146
  br ^1

1:
  _147 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _147
}

%% receive_SUITE.erl:715
%% Counter = 106
%% bs_ensure_opt: true
function `receive_SUITE`:`elusive_common_exit`(_0) {
0:
  %% receive_SUITE.erl:716
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:716
  %% Unique:
  %%    _1
  _33 = call (`erlang`:`'!'`/2), _1, `{1,a}`

  %% Aliased:
  %%    _33
  _45 = succeeded:body _33
  br _45, ^45, ^1

45:
  %% receive_SUITE.erl:717
  %% Argument types:
  %%    
  _2 = bif:self

  %% receive_SUITE.erl:717
  %% Unique:
  %%    _2
  _34 = call (`erlang`:`'!'`/2), _2, `{2,b}`

  %% Aliased:
  %%    _34
  _46 = succeeded:body _34
  br _46, ^46, ^1

46:
  %% receive_SUITE.erl:718
  %% Result type:
  %%    {list('x' | 'y' | 'z'), list({any(), any()})}
  _21 = call (`elusive_loop`/3), `[x,y,z]`, `2`, `[]`

  %% Unique:
  %%    _21
  _47 = succeeded:body _21
  br _47, ^47, ^1

47:
  %% Argument types:
  %%    _21 => {list('x' | 'y' | 'z'), list({any(), any()})}
  %% Unique:
  %%    _21
  _77 = bif:'=:=' _21, `{[z],[{2,b},{1,a}]}`
  br _77, ^77, ^49

77:
  %% receive_SUITE.erl:720
  CodeServer = call (`erlang`:`whereis`/1), `code_server`

  %% Aliased:
  %%    CodeServer
  _50 = succeeded:body CodeServer
  br _50, ^50, ^1

50:
  %% receive_SUITE.erl:721
  %% Argument types:
  %%    
  Self = bif:self

  %% Argument types:
  %%    Self => pid()
  %% Unique:
  %%    Self
  _22 = put_tuple Self, `abc`

  %% receive_SUITE.erl:722
  %% Aliased:
  %%    Self
  %% Unique:
  %%    _22
  _35 = call (`erlang`:`'!'`/2), Self, _22

  %% Aliased:
  %%    _35
  _51 = succeeded:body _35
  br _51, ^51, ^1

51:
  %% Argument types:
  %%    
  %% Aliased:
  %%    CodeServer
  _23 = put_tuple CodeServer, `[]`

  %% receive_SUITE.erl:723
  %% Aliased:
  %%    Self
  %% Unique:
  %%    _23
  _36 = call (`erlang`:`'!'`/2), Self, _23

  %% Aliased:
  %%    _36
  _52 = succeeded:body _36
  br _52, ^52, ^1

52:
  %% Argument types:
  %%    Self => pid()
  %% Unique:
  %%    Self
  _24 = put_tuple Self, `other`

  %% receive_SUITE.erl:724
  %% Aliased:
  %%    Self
  %% Unique:
  %%    _24
  _37 = call (`erlang`:`'!'`/2), Self, _24

  %% Aliased:
  %%    _37
  _53 = succeeded:body _37
  br _53, ^104, ^1

104:
  br ^105

105:
  _58 = new_try_tag `'try'`
  br _58, ^57, ^55

57:
  %% receive_SUITE.erl:725
  %% Result type:
  %%    none()
  _39 = call (`elusive2`/1), `[]`

  %% Aliased:
  %%    _39
  _59 = succeeded:body _39
  br ^55

55:
  %% Unique:
  %%    _58
  _74 = landingpad `'try'`, _58

  %% Aliased:
  %%    _74
  _10 = extract _74, `0`

  %% Aliased:
  %%    _74
  _9 = extract _74, `1`

  %% Aliased:
  %%    _74
  _8 = extract _74, `2`

  %% Unique:
  %%    _58
  _75 = kill_try_tag _58

  %% Argument types:
  %%    _10 => 'error' | 'exit' | 'throw'
  %% Unique:
  %%    _10
  _72 = bif:'=:=' _10, `throw`
  br _72, ^71, ^62

71:
  %% Aliased:
  %%    _9
  _70 = is_nonempty_list _9
  br _70, ^70, ^62

70:
  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _27 = get_hd _9

  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _26 = get_tl _9

  %% Argument types:
  %%    
  %% Aliased:
  %%    _27
  _69 = bif:'=:=' _27, `other`
  br _69, ^68, ^62

68:
  %% Aliased:
  %%    _26
  _67 = is_nonempty_list _26
  br _67, ^67, ^62

67:
  %% Argument types:
  %%    _26 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _26
  _29 = get_hd _26

  %% Argument types:
  %%    _26 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _26
  _28 = get_tl _26

  %% Aliased:
  %%    _28
  _66 = is_nonempty_list _28
  br _66, ^66, ^62

66:
  %% Argument types:
  %%    _28 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _28
  _31 = get_hd _28

  %% Argument types:
  %%    _28 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _28
  _30 = get_tl _28

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _65 = bif:'=:=' _30, `[]`
  br _65, ^65, ^62

65:
  %% receive_SUITE.erl:729
  %% Argument types:
  %%    
  %% Aliased:
  %%    _29, 
  %%    CodeServer
  _15 = bif:'=:=' _29, CodeServer
  br _15, ^81, ^62

81:
  %% receive_SUITE.erl:729
  %% Argument types:
  %%    Self => pid()
  %% Aliased:
  %%    _31
  %% Unique:
  %%    Self
  _16 = bif:'=:=' _31, Self
  br _16, ^56, ^62

56:
  %% Result type:
  %%    'ok'
  ret `ok`

62:
  %% Aliased:
  %%    _8, 
  %%    _9
  _41 = resume _8, _9

  %% Unique:
  %%    _41
  _73 = succeeded:body _41
  br ^1

49:
  %% receive_SUITE.erl:718
  %% Unique:
  %%    _21
  _42 = match_fail `badmatch`, _21

  %% Unique:
  %%    _42
  _78 = succeeded:body _42
  br ^1

1:
  _43 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _43
}

%% receive_SUITE.erl:735
%% Counter = 77
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list('x' | 'y' | 'z')
%%    _1 =>
%%     '-inf'..2
%%    _2 =>
%%     list({any(), any()})
function `receive_SUITE`:`elusive_loop`(_0, _1, _2) {
0:
  %% Argument types:
  %%    _1 => '-inf'..2
  %% Unique:
  %%    _1
  _43 = bif:'=:=' _1, `0`
  br _43, ^42, ^41

42:
  %% Argument types:
  %%    _0 => list('x' | 'y' | 'z')
  %%    _2 => list({any(), any()})
  %% Aliased:
  %%    _0
  %% Unique:
  %%    _2
  _26 = put_tuple _0, _2
  %% Result type:
  %%    {list('x' | 'y' | 'z'), list({any(), any()})}
  %% Unique:
  %%    _26
  ret _26

41:
  br ^15

15:
  %% receive_SUITE.erl:739
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _66 = succeeded:guard _10
  br _66, ^64, ^65

64:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _56 = bif:is_tuple _10
  br _56, ^56, ^47

56:
  %% Argument types:
  %%    _10 => {...}
  %% Aliased:
  %%    _10
  _57 = bif:tuple_size _10

  %% Argument types:
  %%    _57 => 0..16777215
  %% Unique:
  %%    _57
  _58 = bif:'=:=' _57, `2`
  br _58, ^55, ^47

55:
  %% Argument types:
  %%    _0 => list('x' | 'y' | 'z')
  %% Aliased:
  %%    _0
  _49 = bif:'=:=' _0, `[]`
  br _49, ^54, ^49

54:
  _30 = remove_message

  %% Argument types:
  %%    _10 => {any(), any()}
  %% Aliased:
  %%    _10
  _31 = put_tuple _10, `[]`
  br ^45

49:
  _32 = remove_message

  %% Argument types:
  %%    _0 => nonempty_list('x' | 'y' | 'z')
  %% Aliased:
  %%    _0
  _21 = get_tl _0

  %% Argument types:
  %%    _10 => {any(), any()}
  %%    _21 => list('x' | 'y' | 'z')
  %% Aliased:
  %%    _10, 
  %%    _21
  _34 = put_tuple _10, _21
  br ^45

45:
  _27 = phi { _34, ^49 }, { _31, ^54 }

  %% receive_SUITE.erl:749
  %% Argument types:
  %%    _1 => '-inf'..2
  %% Unique:
  %%    _1
  _6 = bif:'-' _1, `1`

  %% Unique:
  %%    _6
  _69 = succeeded:body _6
  br _69, ^69, ^1

69:
  %% Argument types:
  %%    _27 => {{any(), any()}, list('x' | 'y' | 'z')}
  %% Aliased:
  %%    _27
  _24 = get_tuple_element _27, `0`

  %% Argument types:
  %%    _24 => {any(), any()}
  %%    _2 => list({any(), any()})
  %% Aliased:
  %%    _24
  %% Unique:
  %%    _2
  _25 = put_list _24, _2

  %% Argument types:
  %%    _27 => {{any(), any()}, list('x' | 'y' | 'z')}
  %% Aliased:
  %%    _27
  _23 = get_tuple_element _27, `1`

  %% receive_SUITE.erl:749
  %% Result type:
  %%    {list('x' | 'y' | 'z'), list({any(), any()})}
  %% Aliased:
  %%    _23
  %% Unique:
  %%    _6, 
  %%    _25
  _37 = call (`elusive_loop`/3), _23, _6, _25

  %% Unique:
  %%    _37
  _70 = succeeded:body _37
  br _70, ^70, ^1

70:
  %% Result type:
  %%    {list('x' | 'y' | 'z'), list({any(), any()})}
  %% Unique:
  %%    _37
  ret _37

47:
  _36 = recv_next
  br ^15

65:
  _59 = wait_timeout `infinity`

  %% Unique:
  %%    _59
  _60 = succeeded:body _59
  br _60, ^63, ^1

63:
  br ^15

1:
  _39 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _39
}

%% receive_SUITE.erl:752
%% Counter = 54
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     list(any())
function `receive_SUITE`:`elusive2`(_0) {
0:
  br ^6

6:
  %% receive_SUITE.erl:753
  _3 = peek_message `none`

  %% Aliased:
  %%    _3
  _50 = succeeded:guard _3
  br _50, ^48, ^49

48:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _40 = bif:is_tuple _3
  br _40, ^40, ^31

40:
  %% Argument types:
  %%    _3 => {...}
  %% Aliased:
  %%    _3
  _41 = bif:tuple_size _3

  %% Argument types:
  %%    _41 => 0..16777215
  %% Unique:
  %%    _41
  _42 = bif:'=:=' _41, `2`
  br _42, ^39, ^31

39:
  %% Argument types:
  %%    _3 => {any(), any()}
  %% Aliased:
  %%    _3
  _9 = get_tuple_element _3, `1`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _35 = bif:is_atom _9
  br _35, ^35, ^33

35:
  %% Argument types:
  %%    _9 => atom()
  %% Unique:
  %%    _9
  _36 = bif:'=:=' _9, `abc`
  br _36, ^34, ^32

34:
  _22 = remove_message
  br ^29

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _37 = bif:'=:=' _9, `[]`
  br _37, ^37, ^32

37:
  _21 = remove_message
  br ^29

29:
  %% Argument types:
  %%    _3 => {any(), 'abc' | nil()}
  %% Aliased:
  %%    _3
  _10 = get_tuple_element _3, `0`

  %% Argument types:
  %%    _0 => list(any())
  %% Aliased:
  %%    _10
  %% Unique:
  %%    _0
  _14 = put_list _10, _0

  %% receive_SUITE.erl:770
  %% Result type:
  %%    none()
  %% Unique:
  %%    _14
  _25 = call (`elusive2`/1), _14

  %% Aliased:
  %%    _25
  _51 = succeeded:body _25
  br ^1

32:
  _23 = remove_message

  %% Argument types:
  %%    _9 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %%    _0 => list(any())
  %% Aliased:
  %%    _9
  %% Unique:
  %%    _0
  _11 = put_list _9, _0

  %% receive_SUITE.erl:767
  %% Unique:
  %%    _11
  %% Anno: #{thrown_type => {t_cons,any,nil}}
  _12 = call (`erlang`:`throw`/1), _11

  %% Aliased:
  %%    _12
  _38 = succeeded:body _12
  br ^1

31:
  _24 = recv_next
  br ^6

49:
  _43 = wait_timeout `infinity`

  %% Unique:
  %%    _43
  _44 = succeeded:body _43
  br _44, ^47, ^1

47:
  br ^6

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% receive_SUITE.erl:772
%% Counter = 12
%% bs_ensure_opt: true
function `receive_SUITE`:`return_before_receive`(_0) {
0:
  %% receive_SUITE.erl:773
  %% Result type:
  %%    'ref_received' | 'timeout'
  _2 = call (`do_return_before_receive`/0)

  %% Unique:
  %%    _2
  _6 = succeeded:body _2
  br _6, ^6, ^1

6:
  %% Argument types:
  %%    _2 => 'ref_received' | 'timeout'
  %% Unique:
  %%    _2
  _10 = bif:'=:=' _2, `ref_received`
  br _10, ^9, ^8

9:
  %% Result type:
  %%    'ok'
  ret `ok`

8:
  %% receive_SUITE.erl:773
  _3 = match_fail `badmatch`, `timeout`

  %% Unique:
  %%    _3
  _11 = succeeded:body _3
  br ^1

1:
  _4 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _4
}

%% receive_SUITE.erl:776
%% Counter = 48
%% bs_ensure_opt: true
function `receive_SUITE`:`do_return_before_receive`() {
0:
  %% receive_SUITE.erl:777
  _40 = recv_marker_reserve

  %% receive_SUITE.erl:777
  Ref = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:778
  %% Argument types:
  %%    
  _1 = bif:self

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _7 = put_tuple `ref`, Ref

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _40
  _41 = recv_marker_bind _40, Ref

  %% receive_SUITE.erl:778
  %% Unique:
  %%    _1, 
  %%    _7
  _11 = call (`erlang`:`'!'`/2), _1, _7

  %% Aliased:
  %%    _11
  _18 = succeeded:body _11
  br _18, ^18, ^1

18:
  %% receive_SUITE.erl:779
  _2 = call (`id`/1), `false`

  %% Aliased:
  %%    _2
  _19 = succeeded:body _2
  br _19, ^19, ^1

19:
  %% receive_SUITE.erl:779
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _2
  _12 = call (`maybe_receive`/1), _2

  %% Unique:
  %%    _12
  _20 = succeeded:body _12
  br _20, ^20, ^1

20:
  br ^8

8:
  %% receive_SUITE.erl:780
  %% Aliased:
  %%    Ref
  _4 = peek_message Ref

  %% Aliased:
  %%    _4
  _39 = succeeded:guard _4
  br _39, ^38, ^37

38:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _4
  _34 = is_tagged_tuple _4, `2`, `ref`
  br _34, ^33, ^29

33:
  %% Argument types:
  %%    _4 => {'ref', any()}
  %% Aliased:
  %%    _4
  _9 = get_tuple_element _4, `1`

  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _9
  %% Unique:
  %%    Ref
  _30 = bif:'=:=' _9, Ref
  br _30, ^45, ^29

45:
  %% Aliased:
  %%    Ref
  _42 = recv_marker_clear Ref
  _13 = remove_message
  %% Result type:
  %%    'ref_received'
  ret `ref_received`

29:
  _14 = recv_next
  br ^8

37:
  _23 = wait_timeout `1`

  %% Unique:
  %%    _23
  _24 = succeeded:body _23
  br _24, ^24, ^1

24:
  br _23, ^44, ^27

44:
  %% Aliased:
  %%    Ref
  _43 = recv_marker_clear Ref
  %% Result type:
  %%    'timeout'
  ret `timeout`

27:
  br ^8

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% receive_SUITE.erl:789
%% Counter = 44
%% bs_ensure_opt: true
function `receive_SUITE`:`maybe_receive`(_0) {
0:
  %% receive_SUITE.erl:790
  _33 = recv_marker_reserve

  %% receive_SUITE.erl:790
  NewRef = call (`erlang`:`make_ref`/0)

  %% Aliased:
  %%    NewRef
  %% Unique:
  %%    _33
  _34 = recv_marker_bind _33, NewRef
  switch _0, ^39, [
    { `false`, ^40 },
    { `true`, ^31 }
  ]

31:
  br ^8

8:
  %% receive_SUITE.erl:793
  %% Aliased:
  %%    NewRef
  _5 = peek_message NewRef

  %% Aliased:
  %%    _5
  _29 = succeeded:guard _5
  br _29, ^27, ^28

27:
  %% Argument types:
  %%    NewRef => reference()
  %% Aliased:
  %%    _5
  %% Unique:
  %%    NewRef
  _21 = bif:'=:=' _5, NewRef
  br _21, ^42, ^20

42:
  %% Aliased:
  %%    NewRef
  _35 = recv_marker_clear NewRef
  _9 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

20:
  _10 = recv_next
  br ^8

28:
  _22 = wait_timeout `infinity`

  %% Unique:
  %%    _22
  _23 = succeeded:body _22
  br _23, ^26, ^1

26:
  br ^8

40:
  %% Aliased:
  %%    NewRef
  _38 = recv_marker_clear NewRef
  %% Result type:
  %%    'ok'
  ret `ok`

39:
  %% Aliased:
  %%    NewRef
  _37 = recv_marker_clear NewRef

  %% receive_SUITE.erl:791
  %% Aliased:
  %%    _0
  _11 = match_fail `case_clause`, _0

  %% Unique:
  %%    _11
  _32 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% receive_SUITE.erl:803
%% Counter = 22
%% bs_ensure_opt: true
function `receive_SUITE`:`trapping`(_0) {
0:
  %% receive_SUITE.erl:804
  %% Result type:
  %%    'ok'
  _3 = call (`do_trapping`/1), `0`

  %% Unique:
  %%    _3
  _9 = succeeded:body _3
  br _9, ^18, ^1

18:
  %% receive_SUITE.erl:805
  %% Result type:
  %%    'ok'
  _4 = call (`do_trapping`/1), `1`

  %% Unique:
  %%    _4
  _12 = succeeded:body _4
  br _12, ^21, ^1

21:
  ret _4

1:
  _7 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _7
}

%% receive_SUITE.erl:809
%% Counter = 63
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..1
function `receive_SUITE`:`do_trapping`(_0) {
0:
  %% receive_SUITE.erl:810
  _54 = recv_marker_reserve

  %% receive_SUITE.erl:810
  Ref = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:811
  %% Argument types:
  %%    
  _2 = bif:self

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _54
  _55 = recv_marker_bind _54, Ref

  %% receive_SUITE.erl:811
  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _2
  _15 = call (`erlang`:`'!'`/2), _2, Ref

  %% Aliased:
  %%    _15
  _22 = succeeded:body _15
  br _22, ^22, ^1

22:
  %% receive_SUITE.erl:812
  %% Argument types:
  %%    _0 => 0..1
  %% Unique:
  %%    _0
  _11 = bif:'rem' _0, `2`

  %% Argument types:
  %%    _11 => 0..1
  %% Unique:
  %%    _11
  _62 = bif:'=:=' _11, `0`
  br _62, ^33, ^24

33:
  br ^12

12:
  _27 = wait_timeout `1`

  %% Unique:
  %%    _27
  _28 = succeeded:body _27
  br _28, ^28, ^1

28:
  br _27, ^24, ^31

31:
  br ^12

24:
  br ^13

13:
  %% receive_SUITE.erl:820
  %% Aliased:
  %%    Ref
  _7 = peek_message Ref

  %% Aliased:
  %%    _7
  _47 = succeeded:guard _7
  br _47, ^45, ^46

45:
  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _7
  %% Unique:
  %%    Ref
  _39 = bif:'=:=' _7, Ref
  br _39, ^59, ^38

59:
  %% Aliased:
  %%    Ref
  _56 = recv_marker_clear Ref
  _17 = remove_message
  br ^14

14:
  _49 = wait_timeout `1`

  %% Unique:
  %%    _49
  _50 = succeeded:body _49
  br _50, ^50, ^1

50:
  br _49, ^52, ^53

52:
  %% Result type:
  %%    'ok'
  ret `ok`

53:
  br ^14

38:
  _18 = recv_next
  br ^13

46:
  _40 = wait_timeout `infinity`

  %% Unique:
  %%    _40
  _41 = succeeded:body _40
  br _41, ^44, ^1

44:
  br ^13

1:
  _19 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _19
}

%% receive_SUITE.erl:823
%% Counter = 52
%% bs_ensure_opt: true
function `receive_SUITE`:`after_expression`(_0) {
0:
  %% receive_SUITE.erl:824
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:824
  %% Unique:
  %%    _1
  _12 = call (`erlang`:`'!'`/2), _1, `{a,message}`

  %% Aliased:
  %%    _12
  _20 = succeeded:body _12
  br _20, ^20, ^1

20:
  %% receive_SUITE.erl:825
  _7 = call (`after_expr`/1), `0`

  %% Aliased:
  %%    _7
  _21 = succeeded:body _7
  br _21, ^21, ^1

21:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _48 = bif:'=:=' _7, `{a,message}`
  br _48, ^48, ^23

48:
  %% receive_SUITE.erl:826
  _8 = call (`after_expr`/1), `0`

  %% Aliased:
  %%    _8
  _24 = succeeded:body _8
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _8
  _46 = bif:'=:=' _8, `timeout`
  br _46, ^45, ^26

45:
  %% receive_SUITE.erl:827
  _9 = call (`after_expr`/1), `10`

  %% Aliased:
  %%    _9
  _27 = succeeded:body _9
  br _27, ^27, ^1

27:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _43 = bif:'=:=' _9, `timeout`
  br _43, ^42, ^29

42:
  %% receive_SUITE.erl:828
  %% Result type:
  %%    'ok'
  _10 = call (`after_expr_timeout`/1), `0`

  %% Unique:
  %%    _10
  _30 = succeeded:body _10
  br _30, ^39, ^1

39:
  %% receive_SUITE.erl:829
  %% Result type:
  %%    'ok'
  _11 = call (`after_expr_timeout`/1), `1`

  %% Unique:
  %%    _11
  _33 = succeeded:body _11
  br _33, ^51, ^1

51:
  ret _11

29:
  %% receive_SUITE.erl:827
  %% Aliased:
  %%    _9
  _15 = match_fail `badmatch`, _9

  %% Unique:
  %%    _15
  _44 = succeeded:body _15
  br ^1

26:
  %% receive_SUITE.erl:826
  %% Aliased:
  %%    _8
  _16 = match_fail `badmatch`, _8

  %% Unique:
  %%    _16
  _47 = succeeded:body _16
  br ^1

23:
  %% receive_SUITE.erl:825
  %% Aliased:
  %%    _7
  _17 = match_fail `badmatch`, _7

  %% Unique:
  %%    _17
  _49 = succeeded:body _17
  br ^1

1:
  _18 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _18
}

%% receive_SUITE.erl:832
%% Counter = 21
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..10
function `receive_SUITE`:`after_expr`(_0) {
0:
  %% receive_SUITE.erl:835
  %% Unique:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _10 = succeeded:body _2
  br _10, ^10, ^1

10:
  br ^6

6:
  %% receive_SUITE.erl:833
  _3 = peek_message `none`

  %% Aliased:
  %%    _3
  _20 = succeeded:guard _3
  br _20, ^18, ^19

18:
  _7 = remove_message
  %% Aliased:
  %%    _3
  ret _3

19:
  %% Aliased:
  %%    _2
  _13 = wait_timeout _2

  %% Unique:
  %%    _13
  _14 = succeeded:body _13
  br _14, ^14, ^1

14:
  br _13, ^16, ^17

16:
  %% Result type:
  %%    'timeout'
  ret `timeout`

17:
  br ^6

1:
  _8 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _8
}

%% receive_SUITE.erl:839
%% Counter = 14
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     0..1
function `receive_SUITE`:`after_expr_timeout`(_0) {
0:
  %% receive_SUITE.erl:841
  %% Unique:
  %%    _0
  _2 = call (`id`/1), _0

  %% Aliased:
  %%    _2
  _7 = succeeded:body _2
  br _7, ^7, ^1

7:
  br ^4

4:
  %% Aliased:
  %%    _2
  _9 = wait_timeout _2

  %% Unique:
  %%    _9
  _10 = succeeded:body _9
  br _10, ^10, ^1

10:
  br _9, ^12, ^13

12:
  %% Result type:
  %%    'ok'
  ret `ok`

13:
  br ^4

1:
  _5 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _5
}

%% receive_SUITE.erl:845
%% Counter = 142
%% bs_ensure_opt: true
function `receive_SUITE`:`in_after`(_0) {
0:
  %% receive_SUITE.erl:846
  %% Argument types:
  %%    
  _1 = bif:self

  %% receive_SUITE.erl:846
  %% Unique:
  %%    _1
  _26 = call (`erlang`:`'!'`/2), _1, `first`

  %% Aliased:
  %%    _26
  _48 = succeeded:body _26
  br _48, ^48, ^1

48:
  %% receive_SUITE.erl:847
  %% Argument types:
  %%    
  _2 = bif:self

  %% receive_SUITE.erl:847
  %% Unique:
  %%    _2
  _27 = call (`erlang`:`'!'`/2), _2, `message`

  %% Aliased:
  %%    _27
  _49 = succeeded:body _27
  br _49, ^49, ^1

49:
  %% Result type:
  %%    'ok'
  _3 = make_fun (`'-in_after/1-fun-0-'`/0)

  %% receive_SUITE.erl:848
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _3
  _28 = call (`do_in_after`/1), _3

  %% Unique:
  %%    _28
  _50 = succeeded:body _28
  br _50, ^50, ^1

50:
  %% Result type:
  %%    'ok'
  _4 = make_fun (`'-in_after/1-fun-1-'`/0)

  %% receive_SUITE.erl:849
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _4
  _29 = call (`do_in_after`/1), _4

  %% Unique:
  %%    _29
  _51 = succeeded:body _29
  br _51, ^51, ^1

51:
  %% receive_SUITE.erl:850
  %% Argument types:
  %%    
  _5 = bif:self

  %% receive_SUITE.erl:850
  %% Unique:
  %%    _5
  _30 = call (`erlang`:`'!'`/2), _5, `message`

  %% Aliased:
  %%    _30
  _52 = succeeded:body _30
  br _52, ^52, ^1

52:
  %% Result type:
  %%    none()
  _6 = make_fun (`'-in_after/1-fun-2-'`/0)
  _57 = new_try_tag `'try'`
  br _57, ^107, ^54

107:
  %% receive_SUITE.erl:851
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _6
  _33 = call (`do_in_after`/1), _6

  %% Unique:
  %%    _33
  _58 = succeeded:body _33
  br _58, ^58, ^54

58:
  %% Unique:
  %%    _57
  _61 = kill_try_tag _57
  br ^55

54:
  %% Unique:
  %%    _57
  _59 = landingpad `'try'`, _57

  %% Unique:
  %%    _57
  _60 = kill_try_tag _57
  br ^55

55:
  %% Result type:
  %%    none()
  _7 = make_fun (`'-in_after/1-fun-3-'`/0)
  _66 = new_try_tag `'try'`
  br _66, ^108, ^63

108:
  %% receive_SUITE.erl:852
  %% Result type:
  %%    'ok'
  %% Aliased:
  %%    _7
  _36 = call (`do_in_after`/1), _7

  %% Unique:
  %%    _36
  _67 = succeeded:body _36
  br _67, ^67, ^63

67:
  %% Unique:
  %%    _66
  _70 = kill_try_tag _66
  br ^64

63:
  %% Unique:
  %%    _66
  _68 = landingpad `'try'`, _66

  %% Unique:
  %%    _66
  _69 = kill_try_tag _66
  br ^64

64:
  %% receive_SUITE.erl:853
  %% Argument types:
  %%    
  _8 = bif:self

  %% receive_SUITE.erl:853
  %% Unique:
  %%    _8
  _37 = call (`erlang`:`'!'`/2), _8, `last`

  %% Aliased:
  %%    _37
  _71 = succeeded:body _37
  br _71, ^71, ^1

71:
  br ^24

24:
  %% receive_SUITE.erl:854
  _14 = peek_message `none`

  %% Aliased:
  %%    _14
  _81 = succeeded:guard _14
  br _81, ^79, ^80

79:
  _40 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _100 = bif:'=:=' _14, `first`
  br _100, ^99, ^83

99:
  br ^25

25:
  %% receive_SUITE.erl:855
  _17 = peek_message `none`

  %% Aliased:
  %%    _17
  _93 = succeeded:guard _17
  br _93, ^91, ^92

91:
  _43 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _17
  _97 = bif:'=:=' _17, `last`
  br _97, ^96, ^95

96:
  %% Result type:
  %%    'ok'
  ret `ok`

95:
  %% receive_SUITE.erl:855
  %% Aliased:
  %%    _17
  _44 = match_fail `badmatch`, _17

  %% Unique:
  %%    _44
  _98 = succeeded:body _44
  br ^1

92:
  _86 = wait_timeout `infinity`

  %% Unique:
  %%    _86
  _87 = succeeded:body _86
  br _87, ^90, ^1

90:
  br ^25

83:
  %% receive_SUITE.erl:854
  %% Aliased:
  %%    _14
  _45 = match_fail `badmatch`, _14

  %% Unique:
  %%    _45
  _101 = succeeded:body _45
  br ^1

80:
  _74 = wait_timeout `infinity`

  %% Unique:
  %%    _74
  _75 = succeeded:body _74
  br _75, ^78, ^1

78:
  br ^24

1:
  _46 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _46
}

%% receive_SUITE.erl:858
%% Counter = 83
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(() -> 'ok')
function `receive_SUITE`:`do_in_after`(_0) {
0:
  br ^82

82:
  _32 = new_try_tag `'try'`
  br _32, ^31, ^29

31:
  %% receive_SUITE.erl:860
  %% Result type:
  %%    'ok'
  %% Argument types:
  %%    _0 => fun(() -> 'ok')
  %% Aliased:
  %%    _0
  _20 = call _0

  %% Aliased:
  %%    _20
  _33 = succeeded:body _20
  br _33, ^33, ^29

33:
  %% Unique:
  %%    _32
  _65 = kill_try_tag _32
  br ^16

16:
  %% receive_SUITE.erl:862
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _47 = succeeded:guard _10
  br _47, ^46, ^45

46:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _44 = bif:'=:=' _10, `message`
  br _44, ^43, ^42

43:
  _21 = remove_message
  br ^30

42:
  _22 = recv_next
  br ^16

45:
  _36 = wait_timeout `1`

  %% Unique:
  %%    _36
  _37 = succeeded:body _36
  br _37, ^37, ^1

37:
  br _36, ^30, ^40

30:
  %% Result type:
  %%    'ok'
  ret `ok`

40:
  br ^16

29:
  %% Unique:
  %%    _32
  _63 = landingpad `'try'`, _32

  %% Aliased:
  %%    _63
  _5 = extract _63, `1`

  %% Aliased:
  %%    _63
  _4 = extract _63, `2`

  %% Unique:
  %%    _32
  _64 = kill_try_tag _32
  br ^17

17:
  %% receive_SUITE.erl:862
  _13 = peek_message `none`

  %% Aliased:
  %%    _13
  _61 = succeeded:guard _13
  br _61, ^60, ^59

60:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _13
  _58 = bif:'=:=' _13, `message`
  br _58, ^57, ^56

57:
  _23 = remove_message
  br ^49

56:
  _24 = recv_next
  br ^17

59:
  _50 = wait_timeout `1`

  %% Unique:
  %%    _50
  _51 = succeeded:body _50
  br _51, ^51, ^1

51:
  br _50, ^49, ^54

49:
  %% Aliased:
  %%    _4, 
  %%    _5
  _25 = resume _4, _5

  %% Unique:
  %%    _25
  _62 = succeeded:body _25
  br ^1

54:
  br ^17

1:
  _26 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _26
}

%% receive_SUITE.erl:871
%% Counter = 93
%% bs_ensure_opt: true
function `receive_SUITE`:`type_optimized_markers`(_0) {
0:
  %% receive_SUITE.erl:872
  _75 = recv_marker_reserve

  %% receive_SUITE.erl:872
  Ref = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:874
  %% Argument types:
  %%    
  _2 = bif:self

  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _75
  _76 = recv_marker_bind _75, Ref

  %% receive_SUITE.erl:874
  %% Unique:
  %%    _2
  _23 = call (`erlang`:`'!'`/2), _2, `foobar`

  %% Aliased:
  %%    _23
  _37 = succeeded:body _23
  br _37, ^37, ^1

37:
  %% receive_SUITE.erl:875
  _3 = call (`id`/1), `undefined`

  %% Aliased:
  %%    _3
  _38 = succeeded:body _3
  br _38, ^38, ^1

38:
  %% receive_SUITE.erl:875
  %% Result type:
  %%    'gaffel' | 'gurka'
  %% Aliased:
  %%    _3
  _17 = call (`tom_1`/1), _3

  %% Unique:
  %%    _17
  _39 = succeeded:body _17
  br _39, ^39, ^1

39:
  %% Argument types:
  %%    _17 => 'gaffel' | 'gurka'
  %% Unique:
  %%    _17
  _73 = bif:'=:=' _17, `gurka`
  br _73, ^72, ^81

72:
  %% receive_SUITE.erl:877
  %% Argument types:
  %%    
  _5 = bif:self

  %% receive_SUITE.erl:877
  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _5
  _24 = call (`erlang`:`'!'`/2), _5, Ref

  %% Aliased:
  %%    _24
  _42 = succeeded:body _24
  br _42, ^42, ^1

42:
  %% receive_SUITE.erl:878
  %% Result type:
  %%    'gaffel'
  %% Aliased:
  %%    Ref
  _18 = call (`tom_1`/1), Ref

  %% Unique:
  %%    _18
  _43 = succeeded:body _18
  br _43, ^69, ^1

69:
  %% receive_SUITE.erl:880
  %% Argument types:
  %%    
  _7 = bif:self

  %% receive_SUITE.erl:880
  %% Unique:
  %%    _7
  _25 = call (`erlang`:`'!'`/2), _7, `foobar`

  %% Aliased:
  %%    _25
  _46 = succeeded:body _25
  br _46, ^46, ^1

46:
  %% receive_SUITE.erl:881
  %% Argument types:
  %%    
  _8 = bif:self

  %% receive_SUITE.erl:881
  %% Unique:
  %%    _8
  _26 = call (`erlang`:`'!'`/2), _8, `undefined`

  %% Aliased:
  %%    _26
  _47 = succeeded:body _26
  br _47, ^47, ^1

47:
  %% receive_SUITE.erl:882
  _9 = call (`id`/1), `undefined`

  %% Aliased:
  %%    _9
  _48 = succeeded:body _9
  br _48, ^48, ^1

48:
  %% receive_SUITE.erl:882
  %% Result type:
  %%    'gaffel' | 'gurka'
  %% Aliased:
  %%    _9
  _19 = call (`tom_2`/1), _9

  %% Unique:
  %%    _19
  _49 = succeeded:body _19
  br _49, ^49, ^1

49:
  %% Argument types:
  %%    _19 => 'gaffel' | 'gurka'
  %% Unique:
  %%    _19
  _67 = bif:'=:=' _19, `gurka`
  br _67, ^66, ^83

66:
  %% receive_SUITE.erl:884
  %% Argument types:
  %%    
  _11 = bif:self

  %% receive_SUITE.erl:884
  %% Aliased:
  %%    Ref
  %% Unique:
  %%    _11
  _27 = call (`erlang`:`'!'`/2), _11, Ref

  %% Aliased:
  %%    _27
  _52 = succeeded:body _27
  br _52, ^52, ^1

52:
  %% receive_SUITE.erl:885
  %% Result type:
  %%    'gaffel'
  %% Aliased:
  %%    Ref
  _20 = call (`tom_2`/1), Ref

  %% Unique:
  %%    _20
  _53 = succeeded:body _20
  br _53, ^84, ^1

84:
  %% Aliased:
  %%    Ref
  _77 = recv_marker_clear Ref

  %% receive_SUITE.erl:887
  %% Argument types:
  %%    
  _14 = bif:self

  %% Argument types:
  %%    _14 => pid()
  %% Unique:
  %%    _14
  _21 = put_tuple `inet_reply`, _14, `all_well`

  %% receive_SUITE.erl:887
  %% Unique:
  %%    _14, 
  %%    _21
  _28 = call (`erlang`:`'!'`/2), _14, _21

  %% Aliased:
  %%    _28
  _56 = succeeded:body _28
  br _56, ^56, ^1

56:
  %% receive_SUITE.erl:888
  %% Argument types:
  %%    
  _15 = bif:self

  %% receive_SUITE.erl:888
  %% Unique:
  %%    _15
  _22 = call (`tom_3`/3), _15, `undefined`, `1`

  %% Aliased:
  %%    _22
  _57 = succeeded:body _22
  br _57, ^57, ^1

57:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _61 = bif:'=:=' _22, `all_well`
  br _61, ^60, ^59

60:
  %% Result type:
  %%    'ok'
  ret `ok`

59:
  %% receive_SUITE.erl:888
  %% Aliased:
  %%    _22
  _29 = match_fail `badmatch`, _22

  %% Unique:
  %%    _29
  _62 = succeeded:body _29
  br ^1

83:
  %% Aliased:
  %%    Ref
  _78 = recv_marker_clear Ref

  %% receive_SUITE.erl:882
  _31 = match_fail `badmatch`, `gaffel`

  %% Unique:
  %%    _31
  _68 = succeeded:body _31
  br ^1

81:
  %% Aliased:
  %%    Ref
  _80 = recv_marker_clear Ref

  %% receive_SUITE.erl:875
  _33 = match_fail `badmatch`, `gaffel`

  %% Unique:
  %%    _33
  _74 = succeeded:body _33
  br ^1

1:
  _34 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _34
}

%% receive_SUITE.erl:892
%% Counter = 36
%% bs_ensure_opt: true
function `receive_SUITE`:`tom_1`(_0) {
0:
  br ^8

8:
  %% receive_SUITE.erl:893
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _35 = succeeded:guard _5
  br _35, ^33, ^34

33:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _25 = bif:'=:=' _5, `foobar`
  br _25, ^24, ^18

24:
  _9 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _22 = bif:'=:=' _0, `undefined`
  br _22, ^21, ^20

21:
  %% Result type:
  %%    'gurka'
  ret `gurka`

20:
  %% receive_SUITE.erl:902
  %% Aliased:
  %%    _0
  _10 = call (`erlang`:`demonitor`/2), _0, `[flush]`

  %% Aliased:
  %%    _10
  _23 = succeeded:body _10
  br _23, ^23, ^1

23:
  %% Result type:
  %%    'gaffel'
  ret `gaffel`

18:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _5
  _27 = bif:'=:=' _5, _0
  br _27, ^27, ^26

27:
  _11 = remove_message
  %% Result type:
  %%    'gaffel'
  ret `gaffel`

26:
  _12 = recv_next
  br ^8

34:
  _28 = wait_timeout `infinity`

  %% Unique:
  %%    _28
  _29 = succeeded:body _28
  br _29, ^32, ^1

32:
  br ^8

1:
  _13 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _13
}

%% receive_SUITE.erl:909
%% Counter = 67
%% bs_ensure_opt: true
function `receive_SUITE`:`tom_2`(_0) {
0:
  br ^12

12:
  %% receive_SUITE.erl:910
  _9 = peek_message `none`

  %% Aliased:
  %%    _9
  _56 = succeeded:guard _9
  br _56, ^54, ^55

54:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _46 = bif:'=:=' _9, `foobar`
  br _46, ^45, ^26

45:
  _15 = remove_message

  %% Argument types:
  %%    
  %% Aliased:
  %%    _0
  _43 = bif:'=:=' _0, `undefined`
  br _43, ^42, ^28

42:
  br ^13

13:
  %% receive_SUITE.erl:916
  _6 = peek_message `none`

  %% Aliased:
  %%    _6
  _41 = succeeded:guard _6
  br _41, ^39, ^40

39:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _6
  _33 = bif:'=:=' _6, `undefined`
  br _33, ^33, ^32

33:
  _16 = remove_message
  %% Result type:
  %%    'gurka'
  ret `gurka`

32:
  _17 = recv_next
  br ^13

40:
  _34 = wait_timeout `infinity`

  %% Unique:
  %%    _34
  _35 = succeeded:body _34
  br _35, ^38, ^1

38:
  br ^13

28:
  %% receive_SUITE.erl:921
  %% Aliased:
  %%    _0
  _18 = call (`erlang`:`demonitor`/2), _0, `[flush]`

  %% Aliased:
  %%    _18
  _44 = succeeded:body _18
  br _44, ^63, ^1

63:
  %% Aliased:
  %%    _0
  _60 = recv_marker_clear _0
  %% Result type:
  %%    'gaffel'
  ret `gaffel`

26:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _0, 
  %%    _9
  _48 = bif:'=:=' _9, _0
  br _48, ^62, ^47

62:
  %% Aliased:
  %%    _0
  _61 = recv_marker_clear _0
  _19 = remove_message
  %% Result type:
  %%    'gaffel'
  ret `gaffel`

47:
  _20 = recv_next
  br ^12

55:
  _49 = wait_timeout `infinity`

  %% Unique:
  %%    _49
  _50 = succeeded:body _49
  br _50, ^53, ^1

53:
  br ^12

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% receive_SUITE.erl:928
%% Counter = 59
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     pid()
%%    _1 =>
%%     'undefined' | reference()
%%    _2 =>
%%     1
function `receive_SUITE`:`tom_3`(_0, _1, _2) {
0:
  br ^13

13:
  %% receive_SUITE.erl:929
  _10 = peek_message `none`

  %% Aliased:
  %%    _10
  _48 = succeeded:guard _10
  br _48, ^47, ^46

47:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _10
  _43 = is_tagged_tuple _10, `3`, `inet_reply`
  br _43, ^42, ^33

42:
  %% Argument types:
  %%    _10 => {'inet_reply', any(), any()}
  %% Aliased:
  %%    _10
  _15 = get_tuple_element _10, `1`

  %% Argument types:
  %%    _0 => pid()
  %% Aliased:
  %%    _15
  %% Unique:
  %%    _0
  _34 = bif:'=:=' _15, _0
  br _34, ^34, ^33

34:
  _17 = remove_message

  %% Argument types:
  %%    _1 => 'undefined' | reference()
  %% Aliased:
  %%    _1
  _38 = bif:'=:=' _1, `undefined`
  br _38, ^35, ^36

36:
  %% receive_SUITE.erl:935
  %% Aliased:
  %%    _1
  _18 = call (`erlang`:`demonitor`/2), _1, `[flush]`

  %% Aliased:
  %%    _18
  _39 = succeeded:body _18
  br _39, ^56, ^1

56:
  %% Aliased:
  %%    _1
  _51 = recv_marker_clear _1
  br ^35

35:
  %% Argument types:
  %%    _10 => {'inet_reply', pid(), any()}
  %% Aliased:
  %%    _10
  _14 = get_tuple_element _10, `2`
  %% Aliased:
  %%    _14
  ret _14

33:
  _19 = recv_next
  br ^13

46:
  _25 = wait_timeout `1`

  %% Unique:
  %%    _25
  _26 = succeeded:body _25
  br _26, ^26, ^1

26:
  br _25, ^54, ^30

54:
  %% Aliased:
  %%    _1
  _53 = recv_marker_clear _1

  %% receive_SUITE.erl:940
  _49 = recv_marker_reserve

  %% receive_SUITE.erl:940
  %% Aliased:
  %%    _0
  _3 = call (`erlang`:`monitor`/2), `process`, _0

  %% Aliased:
  %%    _3
  _28 = succeeded:body _3
  br _28, ^28, ^1

28:
  %% Aliased:
  %%    _3
  %% Unique:
  %%    _49
  _50 = recv_marker_bind _49, _3

  %% receive_SUITE.erl:940
  %% Aliased:
  %%    _0, 
  %%    _3
  _20 = call (`tom_3`/3), _0, _3, `1`

  %% Aliased:
  %%    _20
  _29 = succeeded:body _20
  br _29, ^29, ^1

29:
  %% Aliased:
  %%    _20
  ret _20

30:
  br ^13

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% receive_SUITE.erl:943
%% Counter = 27
%% bs_ensure_opt: true
function `receive_SUITE`:`bs_get_tail`(_0) {
0:
  %% receive_SUITE.erl:944
  Ref = call (`erlang`:`make_ref`/0)

  %% receive_SUITE.erl:945
  %% Argument types:
  %%    
  _2 = bif:self

  %% Argument types:
  %%    Ref => reference()
  %% Unique:
  %%    Ref
  _6 = put_tuple `<<1,97,98,99>>`, Ref

  %% receive_SUITE.erl:945
  %% Unique:
  %%    _2, 
  %%    _6
  _10 = call (`erlang`:`'!'`/2), _2, _6

  %% Aliased:
  %%    _10
  _15 = succeeded:body _10
  br _15, ^15, ^1

15:
  %% receive_SUITE.erl:946
  %% Result type:
  %%    {any(), any()}
  _7 = call (`do_bs_get_tail`/0)

  %% Unique:
  %%    _7
  _16 = succeeded:body _7
  br _16, ^21, ^1

21:
  %% Argument types:
  %%    _7 => {any(), any()}
  %% Unique:
  %%    _7
  _9 = get_tuple_element _7, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _20 = bif:'=:=' _9, `<<"abc">>`
  br _20, ^20, ^18

20:
  %% Argument types:
  %%    _7 => {bitstring(8), any()}
  %% Unique:
  %%    _7
  _8 = get_tuple_element _7, `1`

  %% Argument types:
  %%    Ref => reference()
  %% Aliased:
  %%    _8
  %% Unique:
  %%    Ref
  _19 = bif:'=:=' _8, Ref
  br _19, ^19, ^18

19:
  %% Result type:
  %%    'ok'
  ret `ok`

18:
  %% receive_SUITE.erl:946
  %% Unique:
  %%    _7
  _11 = match_fail `badmatch`, _7

  %% Unique:
  %%    _11
  _25 = succeeded:body _11
  br ^1

1:
  _12 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _12
}

%% receive_SUITE.erl:950
%% Counter = 42
%% bs_ensure_opt: true
function `receive_SUITE`:`do_bs_get_tail`() {
0:
  br ^5

5:
  %% receive_SUITE.erl:951
  _2 = peek_message `none`

  %% Aliased:
  %%    _2
  _37 = succeeded:guard _2
  br _37, ^35, ^36

35:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _2
  _27 = bif:is_tuple _2
  br _27, ^27, ^20

27:
  %% Argument types:
  %%    _2 => {...}
  %% Aliased:
  %%    _2
  _28 = bif:tuple_size _2

  %% Argument types:
  %%    _28 => 0..16777215
  %% Unique:
  %%    _28
  _29 = bif:'=:=' _28, `2`
  br _29, ^26, ^20

26:
  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _7 = get_tuple_element _2, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _7
  _8 = bs_start_match `new`, _7

  %% Aliased:
  %%    _8
  _25 = succeeded:guard _8
  br _25, ^25, ^20

25:
  _40 = bs_ensure _8, `8`, `1`
  _41 = succeeded:guard _40
  br _41, ^39, ^20

39:
  %% Argument types:
  %%    _40 => bs_context(1)
  %% Aliased:
  %%    _8
  %% Anno: #{ensured => true}
  _9 = bs_match `string`, _40, `<<1>>`

  %% Aliased:
  %%    _9
  _21 = succeeded:guard _9
  br _21, ^21, ^20

21:
  %% receive_SUITE.erl:952
  %% Aliased:
  %%    _9
  _10 = bs_get_tail _9
  _12 = remove_message

  %% receive_SUITE.erl:953
  %% Aliased:
  %%    _10
  %% Anno: #{bsm_info => {no_match_on_entry,{b_local,{b_literal,id},1}}}
  A = call (`id`/1), _10

  %% Aliased:
  %%    A
  _23 = succeeded:body A
  br _23, ^23, ^1

23:
  %% Argument types:
  %%    _2 => {any(), any()}
  %% Aliased:
  %%    _2
  _6 = get_tuple_element _2, `1`

  %% receive_SUITE.erl:954
  %% Aliased:
  %%    _6
  B = call (`id`/1), _6

  %% Aliased:
  %%    B
  _24 = succeeded:body B
  br _24, ^24, ^1

24:
  %% Argument types:
  %%    
  %% Aliased:
  %%    A, 
  %%    B
  _13 = put_tuple A, B
  %% Result type:
  %%    {any(), any()}
  %% Unique:
  %%    _13
  ret _13

20:
  _14 = recv_next
  br ^5

36:
  _30 = wait_timeout `infinity`

  %% Unique:
  %%    _30
  _31 = succeeded:body _30
  br _31, ^34, ^1

34:
  br ^5

1:
  _15 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _15
}

%% receive_SUITE.erl:962
%% Counter = 16
%% bs_ensure_opt: true
%% Parameters
%%    _0 =>
%%     fun(())
function `receive_SUITE`:`smoke_receive`(_0) {
0:
  %% receive_SUITE.erl:963
  %% Aliased:
  %%    _0
  NoClausesLeft = call (`erlang`:`spawn`/1), _0

  %% Aliased:
  %%    NoClausesLeft
  _8 = succeeded:body NoClausesLeft
  br _8, ^8, ^1

8:
  br ^4

4:
  _10 = wait_timeout `1`

  %% Unique:
  %%    _10
  _11 = succeeded:body _10
  br _11, ^11, ^1

11:
  br _10, ^9, ^14

9:
  %% receive_SUITE.erl:965
  %% Aliased:
  %%    NoClausesLeft
  _5 = call (`erlang`:`exit`/2), NoClausesLeft, `kill`

  %% Aliased:
  %%    _5
  _15 = succeeded:body _5
  br _15, ^15, ^1

15:
  %% Aliased:
  %%    _5
  ret _5

14:
  br ^4

1:
  _6 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _6
}

%% receive_SUITE.erl:967
%% Counter = 4
%% bs_ensure_opt: true
function `receive_SUITE`:`id`(_0) {
0:
  %% Aliased:
  %%    _0
  ret _0
}

%% Counter = 6
%% bs_ensure_opt: true
function `receive_SUITE`:`module_info`() {
0:
  _2 = call (`erlang`:`get_module_info`/1), `receive_SUITE`

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% Counter = 6
%% bs_ensure_opt: true
function `receive_SUITE`:`module_info`(_0) {
0:
  %% Aliased:
  %%    _0
  _2 = call (`erlang`:`get_module_info`/2), `receive_SUITE`, _0

  %% Aliased:
  %%    _2
  _5 = succeeded:body _2
  br _5, ^5, ^1

5:
  %% Aliased:
  %%    _2
  ret _2

1:
  _3 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _3
}

%% receive_SUITE.erl:852
%% Counter = 39
%% bs_ensure_opt: true
function `receive_SUITE`:`'-in_after/1-fun-3-'`() {
0:
  %% receive_SUITE.erl:852
  _35 = call (`erlang`:`error`/1), `bad`

  %% Aliased:
  %%    _35
  _38 = succeeded:body _35
  br ^1

1:
  _36 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _36
}

%% receive_SUITE.erl:851
%% Counter = 36
%% bs_ensure_opt: true
function `receive_SUITE`:`'-in_after/1-fun-2-'`() {
0:
  %% receive_SUITE.erl:851
  _32 = call (`erlang`:`error`/1), `bad`

  %% Aliased:
  %%    _32
  _35 = succeeded:body _32
  br ^1

1:
  _33 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _33
}

%% receive_SUITE.erl:849
%% Counter = 31
%% bs_ensure_opt: true
function `receive_SUITE`:`'-in_after/1-fun-1-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:848
%% Counter = 30
%% bs_ensure_opt: true
function `receive_SUITE`:`'-in_after/1-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:616
%% Counter = 73
%% bs_ensure_opt: true
%% Parameters
%%    _5 =>
%%     bitstring(8,appendable)
%%    _6 =>
%%     bs_matchable(4)
%%     accepts_match_context
function `receive_SUITE`:`'-recv_in_try_5/0-lbc$^0/2-0-'`(_6, _5) {
0:
  %% Argument types:
  %%    _6 => bs_matchable(4)
  %% Aliased:
  %%    _6
  %% Anno: #{accepts_match_contexts => true}
  _30 = bs_start_match `new`, _6
  _71 = bs_ensure _30, `4`, `1`
  _72 = succeeded:guard _71
  br _72, ^70, ^57

70:
  %% receive_SUITE.erl:616
  %% Argument types:
  %%    _71 => bs_context(4)
  %% Aliased:
  %%    _30
  %% Anno: #{ensured => true}
  _31 = bs_match `integer`, _71, `[unsigned,big]`, `4`, `1`

  %% Aliased:
  %%    _31
  _48 = succeeded:guard _31
  br _48, ^48, ^57

48:
  %% Aliased:
  %%    _31
  _32 = bs_extract _31

  %% Argument types:
  %%    _32 => 0..15
  %% Unique:
  %%    _32
  _54 = bif:'=:=' _32, `3`
  br _54, ^50, ^67

50:
  %% receive_SUITE.erl:616
  %% Result type:
  %%    bitstring(8,appendable)
  %% Argument types:
  %%    _5 => bitstring(8,appendable)
  %% Unique:
  %%    _5
  %% Anno: #{unit => 8}
  _24 = bs_create_bin `private_append`, `[1,{segment,1}]`, _5, `all`, `binary`, `[1]`, `<<0>>`, `all`

  %% Unique:
  %%    _24
  _51 = succeeded:body _24
  br _51, ^51, ^1

51:
  %% receive_SUITE.erl:616
  %% Result type:
  %%    bitstring(8,appendable)
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _24
  %% Anno: #{bsm_info => context_reused}
  _41 = call (`'-recv_in_try_5/0-lbc$^0/2-0-'`/2), _31, _24

  %% Unique:
  %%    _41
  _52 = succeeded:body _41
  br _52, ^52, ^1

52:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _41
  ret _41

67:
  %% receive_SUITE.erl:616
  %% Result type:
  %%    bitstring(8,appendable)
  %% Aliased:
  %%    _31
  %% Unique:
  %%    _5
  %% Anno: #{bsm_info => context_reused}
  _42 = call (`'-recv_in_try_5/0-lbc$^0/2-0-'`/2), _31, _5

  %% Unique:
  %%    _42
  _56 = succeeded:body _42
  br _56, ^56, ^1

56:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _42
  ret _42

1:
  _65 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _65

57:
  %% Result type:
  %%    bitstring(8,appendable)
  %% Unique:
  %%    _5
  ret _5
}

%% receive_SUITE.erl:476
%% Counter = 41
%% bs_ensure_opt: true
function `receive_SUITE`:`'-cover_recv_instructions/0-fun-0-'`() {
0:
  br ^11

11:
  %% receive_SUITE.erl:477
  _5 = peek_message `none`

  %% Aliased:
  %%    _5
  _39 = succeeded:guard _5
  br _39, ^37, ^38

37:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _5
  _29 = bif:is_tuple _5
  br _29, ^29, ^26

29:
  %% Argument types:
  %%    _5 => {...}
  %% Aliased:
  %%    _5
  _30 = bif:tuple_size _5

  %% Argument types:
  %%    _30 => 0..16777215
  %% Unique:
  %%    _30
  _31 = bif:'=:=' _30, `2`
  br _31, ^28, ^26

28:
  _18 = remove_message

  %% Argument types:
  %%    _5 => {any(), any()}
  %% Aliased:
  %%    _5
  _13 = get_tuple_element _5, `0`

  %% Argument types:
  %%    _5 => {any(), any()}
  %% Aliased:
  %%    _5
  _12 = get_tuple_element _5, `1`

  %% receive_SUITE.erl:478
  %% Aliased:
  %%    _12, 
  %%    _13
  _19 = call (`erlang`:`'!'`/2), _13, _12

  %% Aliased:
  %%    _19
  _27 = succeeded:body _19
  br _27, ^27, ^1

27:
  %% Aliased:
  %%    _19
  ret _19

26:
  _20 = recv_next
  br ^11

38:
  _32 = wait_timeout `infinity`

  %% Unique:
  %%    _32
  _33 = succeeded:body _32
  br _33, ^36, ^1

36:
  br ^11

1:
  _21 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _21
}

%% receive_SUITE.erl:463
%% Counter = 70
%% bs_ensure_opt: true
function `receive_SUITE`:`'-collect_recv_opt_instrs/1-lc$^0/1-0-'`(_3) {
0:
  %% Aliased:
  %%    _3
  _66 = is_nonempty_list _3
  br _66, ^66, ^55

66:
  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _30 = get_hd _3

  %% Argument types:
  %%    _3 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _3
  _29 = get_tl _3

  %% Argument types:
  %%    
  %% Aliased:
  %%    _30
  _62 = is_tagged_tuple _30, `5`, `function`
  br _62, ^59, ^56

59:
  %% Argument types:
  %%    _30 => {'function', any(), any(), any(), any()}
  %% Aliased:
  %%    _30
  _31 = get_tuple_element _30, `4`

  %% receive_SUITE.erl:454
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _31
  _13 = call (`'-collect_recv_opt_instrs/1-lc$^1/1-1-'`/1), _31

  %% Unique:
  %%    _13
  _57 = succeeded:body _13
  br _57, ^57, ^1

57:
  %% receive_SUITE.erl:463
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _29
  _14 = call (`'-collect_recv_opt_instrs/1-lc$^0/1-0-'`/1), _29

  %% Unique:
  %%    _14
  _58 = succeeded:body _14
  br _58, ^58, ^1

58:
  %% Argument types:
  %%    _13 => list(any())
  %%    _14 => list(list(any()))
  %% Unique:
  %%    _13, 
  %%    _14
  _49 = put_list _13, _14
  %% Result type:
  %%    nonempty_list(list(any()))
  %% Unique:
  %%    _49
  ret _49

56:
  %% receive_SUITE.erl:463
  %% Result type:
  %%    list(list(any()))
  %% Aliased:
  %%    _29
  _50 = call (`'-collect_recv_opt_instrs/1-lc$^0/1-0-'`/1), _29

  %% Unique:
  %%    _50
  _65 = succeeded:body _50
  br _65, ^65, ^1

65:
  %% Result type:
  %%    list(list(any()))
  %% Unique:
  %%    _50
  ret _50

55:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _67 = bif:'=:=' _3, `[]`
  br _67, ^67, ^54

67:
  %% Result type:
  %%    nil()
  ret `[]`

54:
  %% Argument types:
  %%    _3 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _3
  _28 = put_tuple `bad_generator`, _3

  %% receive_SUITE.erl:463
  %% Unique:
  %%    _28
  _51 = call (`erlang`:`error`/1), _28

  %% Aliased:
  %%    _51
  _68 = succeeded:body _51
  br ^1

1:
  _52 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _52
}

%% receive_SUITE.erl:454
%% Counter = 73
%% bs_ensure_opt: true
function `receive_SUITE`:`'-collect_recv_opt_instrs/1-lc$^1/1-1-'`(_9) {
0:
  %% Aliased:
  %%    _9
  _69 = is_nonempty_list _9
  br _69, ^69, ^52

69:
  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _39 = get_hd _9

  %% Argument types:
  %%    _9 => nonempty_improper_list(any(), any())
  %% Aliased:
  %%    _9
  _38 = get_tl _9

  %% Argument types:
  %%    
  %% Aliased:
  %%    _39
  _60 = bif:is_tuple _39
  br _60, ^60, ^67

60:
  %% Argument types:
  %%    _39 => {...}
  %% Aliased:
  %%    _39
  _61 = bif:tuple_size _39
  %% Argument types:
  %%    
  switch _61, ^67, [
    { `2`, ^59 },
    { `3`, ^58 }
  ]

58:
  %% Argument types:
  %%    _39 => {any(), any(), any()}
  %% Aliased:
  %%    _39
  _42 = get_tuple_element _39, `0`

  %% Argument types:
  %%    
  %% Aliased:
  %%    _42
  _56 = bif:'=:=' _42, `recv_marker_bind`
  br _56, ^66, ^67

59:
  %% Argument types:
  %%    _39 => {any(), any()}
  %% Aliased:
  %%    _39
  _44 = get_tuple_element _39, `0`
  switch _44, ^67, [
    { `recv_marker_clear`, ^66 },
    { `recv_marker_reserve`, ^66 },
    { `recv_marker_use`, ^66 }
  ]

66:
  %% receive_SUITE.erl:454
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _38
  _11 = call (`'-collect_recv_opt_instrs/1-lc$^1/1-1-'`/1), _38

  %% Unique:
  %%    _11
  _65 = succeeded:body _11
  br _65, ^65, ^1

65:
  %% Argument types:
  %%    _39 => {'recv_marker_clear', any()} | {'recv_marker_reserve', any()} | {'recv_marker_use', any()} | {'recv_marker_bind', any(), any()}
  %%    _11 => list(any())
  %% Aliased:
  %%    _39
  %% Unique:
  %%    _11
  _45 = put_list _39, _11
  %% Result type:
  %%    nonempty_list(any())
  %% Unique:
  %%    _45
  ret _45

67:
  %% receive_SUITE.erl:454
  %% Result type:
  %%    list(any())
  %% Aliased:
  %%    _38
  _46 = call (`'-collect_recv_opt_instrs/1-lc$^1/1-1-'`/1), _38

  %% Unique:
  %%    _46
  _64 = succeeded:body _46
  br _64, ^64, ^1

64:
  %% Result type:
  %%    list(any())
  %% Unique:
  %%    _46
  ret _46

52:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _9
  _70 = bif:'=:=' _9, `[]`
  br _70, ^70, ^51

70:
  %% Result type:
  %%    nil()
  ret `[]`

51:
  %% Argument types:
  %%    _9 => atom() | nonempty_improper_list(any(), any()) | number() | {...} | other()
  %% Aliased:
  %%    _9
  _37 = put_tuple `bad_generator`, _9

  %% receive_SUITE.erl:454
  %% Unique:
  %%    _37
  _48 = call (`erlang`:`error`/1), _37

  %% Aliased:
  %%    _48
  _71 = succeeded:body _48
  br ^1

1:
  _49 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _49
}

%% receive_SUITE.erl:442
%% Counter = 112
%% bs_ensure_opt: true
function `receive_SUITE`:`'-do_ref_opt/2-fun-3-'`(_26) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _26
  _109 = is_tagged_tuple _26, `2`, `recv_marker_use`
  br _109, ^106, ^105

106:
  %% Result type:
  %%    'true'
  ret `true`

105:
  %% Result type:
  %%    'false'
  ret `false`
}

%% receive_SUITE.erl:438
%% Counter = 112
%% bs_ensure_opt: true
function `receive_SUITE`:`'-do_ref_opt/2-fun-2-'`(_22) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _22
  _109 = is_tagged_tuple _22, `2`, `recv_marker_clear`
  br _109, ^106, ^105

106:
  %% Result type:
  %%    'true'
  ret `true`

105:
  %% Result type:
  %%    'false'
  ret `false`
}

%% receive_SUITE.erl:434
%% Counter = 112
%% bs_ensure_opt: true
function `receive_SUITE`:`'-do_ref_opt/2-fun-1-'`(_18) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _18
  _109 = is_tagged_tuple _18, `3`, `recv_marker_bind`
  br _109, ^106, ^105

106:
  %% Result type:
  %%    'true'
  ret `true`

105:
  %% Result type:
  %%    'false'
  ret `false`
}

%% receive_SUITE.erl:430
%% Counter = 112
%% bs_ensure_opt: true
function `receive_SUITE`:`'-do_ref_opt/2-fun-0-'`(_14) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _14
  _109 = is_tagged_tuple _14, `2`, `recv_marker_reserve`
  br _109, ^106, ^105

106:
  %% Result type:
  %%    'true'
  ret `true`

105:
  %% Result type:
  %%    'false'
  ret `false`
}

%% receive_SUITE.erl:404
%% Counter = 14
%% bs_ensure_opt: true
function `receive_SUITE`:`'-ref_opt/1-fun-0-'`(_5, PrivDir) {
0:
  %% receive_SUITE.erl:405
  %% Result type:
  %%    'error' | 'ok'
  %% Aliased:
  %%    _5, 
  %%    PrivDir
  _10 = call (`do_ref_opt`/2), _5, PrivDir

  %% Unique:
  %%    _10
  _13 = succeeded:body _10
  br _13, ^13, ^1

13:
  %% Result type:
  %%    'error' | 'ok'
  %% Unique:
  %%    _10
  ret _10

1:
  _11 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _11
}

%% receive_SUITE.erl:392
%% Counter = 27
%% bs_ensure_opt: true
function `receive_SUITE`:`'-otp_7980_add_clients/1-fun-0-'`(_4, _3) {
0:
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _19 = bif:'=:=' _3, `1`
  br _19, ^16, ^17

17:
  br ^12

12:
  _21 = wait_timeout `42`

  %% Unique:
  %%    _21
  _22 = succeeded:body _21
  br _22, ^22, ^1

22:
  br _21, ^16, ^25

16:
  %% receive_SUITE.erl:397
  %% Argument types:
  %%    
  %% Aliased:
  %%    _3
  _13 = bif:'-' _3, `1`

  %% Unique:
  %%    _13
  _26 = succeeded:body _13
  br _26, ^26, ^1

26:
  %% Result type:
  %%    number()
  %% Unique:
  %%    _13
  ret _13

25:
  br ^12

1:
  _14 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _14
}

%% receive_SUITE.erl:178
%% Counter = 145
%% bs_ensure_opt: true
function `receive_SUITE`:`'-coverage/1-after$^1/0-0-'`() {
0:
  br ^92

92:
  %% receive_SUITE.erl:188
  _69 = peek_message `none`

  %% Aliased:
  %%    _69
  _144 = succeeded:guard _69
  br _144, ^142, ^143

142:
  _132 = remove_message
  %% Result type:
  %%    'ok'
  ret `ok`

143:
  _137 = wait_timeout `infinity`

  %% Unique:
  %%    _137
  _138 = succeeded:body _137
  br _138, ^141, ^1

141:
  br ^92

1:
  _133 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _133
}

%% receive_SUITE.erl:176
%% Counter = 133
%% bs_ensure_opt: true
function `receive_SUITE`:`'-coverage/1-fun-0-'`() {
0:
  %% Result type:
  %%    'ok'
  ret `ok`
}

%% receive_SUITE.erl:87
%% Counter = 23
%% bs_ensure_opt: true
function `receive_SUITE`:`'-recv/1-fun-0-'`() {
0:
  %% receive_SUITE.erl:87
  %% Result type:
  %%    none()
  _19 = call (`loop`/1), `{state,true}`
  _22 = succeeded:body _19
  br ^1

1:
  _20 = call (`erlang`:`error`/1), `badarg`
  %% Result type:
  %%    none()
  ret _20
}
