{attribute,{1,1},file,{"beam_ssa_lint.erl",1}}.
{attribute,{22,2},module,beam_ssa_lint}.
{attribute,{25,2},export,[{module,2},{format_error,1}]}.
{attribute,{27,2},import,{lists,[{append,1},{foldl,3},{foreach,2}]}}.
{attribute,{1,1},file,{"beam_ssa.hrl",1}}.
{attribute,
    {21,2},
    record,
    {b_module,
        [{typed_record_field,
             {record_field,{21,20},{atom,{21,20},anno},{map,{21,25},[]}},
             {remote_type,
                 {21,32},
                 [{atom,{21,32},beam_ssa},{atom,{21,41},anno},[]]}},
         {typed_record_field,
             {record_field,{22,20},{atom,{22,20},name}},
             {type,{22,28},module,[]}},
         {typed_record_field,
             {record_field,{23,20},{atom,{23,20},exports}},
             {type,
                 {23,31},
                 list,
                 [{type,
                      {23,32},
                      tuple,
                      [{type,{23,33},atom,[]},{type,{23,40},arity,[]}]}]}},
         {typed_record_field,
             {record_field,{24,20},{atom,{24,20},attributes}},
             {type,{24,34},list,[]}},
         {typed_record_field,
             {record_field,{25,20},{atom,{25,20},body}},
             {type,
                 {25,28},
                 list,
                 [{remote_type,
                      {25,29},
                      [{atom,{25,29},beam_ssa},
                       {atom,{25,38},b_function},
                       []]}]}}]}}.
{attribute,
    {26,2},
    record,
    {b_function,
        [{typed_record_field,
             {record_field,{26,22},{atom,{26,22},anno},{map,{26,27},[]}},
             {remote_type,
                 {26,34},
                 [{atom,{26,34},beam_ssa},{atom,{26,43},anno},[]]}},
         {typed_record_field,
             {record_field,{27,22},{atom,{27,22},args}},
             {type,
                 {27,30},
                 list,
                 [{remote_type,
                      {27,31},
                      [{atom,{27,31},beam_ssa},{atom,{27,40},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{28,22},{atom,{28,22},bs}},
             {type,
                 {28,28},
                 map,
                 [{type,
                      {28,46},
                      map_field_exact,
                      [{remote_type,
                           {28,30},
                           [{atom,{28,30},beam_ssa},{atom,{28,39},label},[]]},
                       {remote_type,
                           {28,48},
                           [{atom,{28,48},beam_ssa},
                            {atom,{28,57},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{29,22},{atom,{29,22},cnt}},
             {remote_type,
                 {29,29},
                 [{atom,{29,29},beam_ssa},{atom,{29,38},label},[]]}}]}}.
{attribute,
    {31,2},
    record,
    {b_blk,
        [{typed_record_field,
             {record_field,{31,17},{atom,{31,17},anno},{map,{31,22},[]}},
             {remote_type,
                 {31,29},
                 [{atom,{31,29},beam_ssa},{atom,{31,38},anno},[]]}},
         {typed_record_field,
             {record_field,{32,17},{atom,{32,17},is}},
             {type,
                 {32,23},
                 list,
                 [{remote_type,
                      {32,24},
                      [{atom,{32,24},beam_ssa},{atom,{32,33},b_set},[]]}]}},
         {typed_record_field,
             {record_field,{33,17},{atom,{33,17},last}},
             {remote_type,
                 {33,25},
                 [{atom,{33,25},beam_ssa},{atom,{33,34},terminator},[]]}}]}}.
{attribute,
    {34,2},
    record,
    {b_set,
        [{typed_record_field,
             {record_field,{34,17},{atom,{34,17},anno},{map,{34,22},[]}},
             {remote_type,
                 {34,29},
                 [{atom,{34,29},beam_ssa},{atom,{34,38},anno},[]]}},
         {typed_record_field,
             {record_field,{35,17},{atom,{35,17},dst},{atom,{35,21},none}},
             {type,
                 {35,29},
                 union,
                 [{atom,{35,29},none},
                  {remote_type,
                      {35,36},
                      [{atom,{35,36},beam_ssa},{atom,{35,45},b_var},[]]}]}},
         {typed_record_field,
             {record_field,{36,17},{atom,{36,17},op}},
             {remote_type,
                 {36,23},
                 [{atom,{36,23},beam_ssa},{atom,{36,32},op},[]]}},
         {typed_record_field,
             {record_field,{37,17},{atom,{37,17},args},{nil,{37,22}}},
             {type,
                 {37,28},
                 list,
                 [{remote_type,
                      {37,29},
                      [{atom,{37,29},beam_ssa},
                       {atom,{37,38},argument},
                       []]}]}}]}}.
{attribute,
    {40,2},
    record,
    {b_ret,
        [{typed_record_field,
             {record_field,{40,17},{atom,{40,17},anno},{map,{40,22},[]}},
             {remote_type,
                 {40,29},
                 [{atom,{40,29},beam_ssa},{atom,{40,38},anno},[]]}},
         {typed_record_field,
             {record_field,{41,17},{atom,{41,17},arg}},
             {remote_type,
                 {41,24},
                 [{atom,{41,24},beam_ssa},{atom,{41,33},value},[]]}}]}}.
{attribute,
    {43,2},
    record,
    {b_br,
        [{record_field,{43,16},{atom,{43,16},anno},{map,{43,21},[]}},
         {typed_record_field,
             {record_field,{44,16},{atom,{44,16},bool}},
             {remote_type,
                 {44,24},
                 [{atom,{44,24},beam_ssa},{atom,{44,33},value},[]]}},
         {typed_record_field,
             {record_field,{45,16},{atom,{45,16},succ}},
             {remote_type,
                 {45,24},
                 [{atom,{45,24},beam_ssa},{atom,{45,33},label},[]]}},
         {typed_record_field,
             {record_field,{46,16},{atom,{46,16},fail}},
             {remote_type,
                 {46,24},
                 [{atom,{46,24},beam_ssa},{atom,{46,33},label},[]]}}]}}.
{attribute,
    {48,2},
    record,
    {b_switch,
        [{typed_record_field,
             {record_field,{48,20},{atom,{48,20},anno},{map,{48,25},[]}},
             {remote_type,
                 {48,32},
                 [{atom,{48,32},beam_ssa},{atom,{48,41},anno},[]]}},
         {typed_record_field,
             {record_field,{49,20},{atom,{49,20},arg}},
             {remote_type,
                 {49,27},
                 [{atom,{49,27},beam_ssa},{atom,{49,36},value},[]]}},
         {typed_record_field,
             {record_field,{50,20},{atom,{50,20},fail}},
             {remote_type,
                 {50,28},
                 [{atom,{50,28},beam_ssa},{atom,{50,37},label},[]]}},
         {typed_record_field,
             {record_field,{51,20},{atom,{51,20},list}},
             {type,
                 {51,28},
                 list,
                 [{type,
                      {51,29},
                      tuple,
                      [{remote_type,
                           {51,30},
                           [{atom,{51,30},beam_ssa},
                            {atom,{51,39},b_literal},
                            []]},
                       {remote_type,
                           {51,51},
                           [{atom,{51,51},beam_ssa},
                            {atom,{51,60},label},
                            []]}]}]}}]}}.
{attribute,
    {54,2},
    record,
    {b_var,
        [{typed_record_field,
             {record_field,{54,17},{atom,{54,17},name}},
             {remote_type,
                 {54,25},
                 [{atom,{54,25},beam_ssa},{atom,{54,34},var_name},[]]}}]}}.
{attribute,
    {56,2},
    record,
    {b_literal,
        [{typed_record_field,
             {record_field,{56,21},{atom,{56,21},val}},
             {remote_type,
                 {56,28},
                 [{atom,{56,28},beam_ssa},
                  {atom,{56,37},literal_value},
                  []]}}]}}.
{attribute,
    {58,2},
    record,
    {b_remote,
        [{typed_record_field,
             {record_field,{58,20},{atom,{58,20},mod}},
             {remote_type,
                 {58,29},
                 [{atom,{58,29},beam_ssa},{atom,{58,38},value},[]]}},
         {typed_record_field,
             {record_field,{59,20},{atom,{59,20},name}},
             {remote_type,
                 {59,29},
                 [{atom,{59,29},beam_ssa},{atom,{59,38},value},[]]}},
         {typed_record_field,
             {record_field,{60,20},{atom,{60,20},arity}},
             {type,{60,29},non_neg_integer,[]}}]}}.
{attribute,
    {62,2},
    record,
    {b_local,
        [{typed_record_field,
             {record_field,{62,19},{atom,{62,19},name}},
             {remote_type,
                 {62,28},
                 [{atom,{62,28},beam_ssa},{atom,{62,37},b_literal},[]]}},
         {typed_record_field,
             {record_field,{63,19},{atom,{63,19},arity}},
             {type,{63,28},non_neg_integer,[]}}]}}.
{attribute,{30,1},file,{"beam_ssa_lint.erl",30}}.
{attribute,
    {31,2},
    spec,
    {{module,2},
     [{type,
          {31,13},
          'fun',
          [{type,
               {31,13},
               product,
               [{type,{31,14},record,[{atom,{31,15},b_module}]},
                {type,
                    {31,27},
                    list,
                    [{remote_type,
                         {31,28},
                         [{atom,{31,28},compile},
                          {atom,{31,36},option},
                          []]}]}]},
           {type,
               {32,21},
               union,
               [{type,
                    {32,21},
                    tuple,
                    [{atom,{32,22},ok},
                     {type,{32,27},record,[{atom,{32,28},b_module}]}]},
                {type,
                    {32,42},
                    tuple,
                    [{atom,{32,43},error},{type,{32,51},list,[]}]}]}]}]}}.
{function,
 {33,1},
 module,2,
 [{clause,
   {33,1},
   [{var,{33,1},'_'},{var,{33,1},'_'}],
   [[{call,
      {33,1},
      {remote,{33,1},{atom,{33,1},fake},{atom,{33,1},is_beam_bif_info}},
      []}]],
   [{debug_line,33,1},{atom,{33,1},ignore}]},
  {clause,
   {33,1},
   [{match,
     {33,8},
     {tuple,
      {33,8},
      [{atom,{33,8},b_module},
       {var,{33,8},'_'},
       {var,{33,31},'Name'},
       {var,{33,8},'_'},
       {var,{33,8},'_'},
       {var,{33,23},'Fs'}]},
     {var,{33,37},'Mod0'}},
    {var,{33,43},'_Options'}],
   [],
   [{debug_line,34,2},
    {match,
     {34,5},
     {var,{34,5},'Es0'},
     {call,
      {34,11},
      {remote,{34,11},{atom,{34,11},lists},{atom,{34,11},append}},
      [{block,0,
        [{lc,
          {34,18},
          {block,0,
           [{call,
             {34,19},
             {atom,{34,19},validate_function},
             [{var,{34,37},'F'}]}]},
          [{block,0,[{atom,{34,48},true}]},
           {generate,{34,45},{var,{34,43},'F'},{var,{34,48},'Fs'}}]}]}]}},
    {debug_line,35,3},
    {'case',
     {35,5},
     {lc,
      {35,10},
      {block,0,
       [{tuple,
         {35,11},
         [{atom,{35,12},none},
          {atom,{35,18},beam_ssa_lint},
          {var,{35,25},'E'}]}]},
      [{block,0,[{atom,{35,36},true}]},
       {generate,{35,33},{var,{35,31},'E'},{var,{35,36},'Es0'}}]},
     [{clause,
       {36,9},
       [{nil,{36,9}}],
       [],
       [{debug_line,37,4},
        {tuple,{37,13},[{atom,{37,14},ok},{var,{37,18},'Mod0'}]}]},
      {clause,
       {38,9},
       [{match,
         {38,9},
         {cons,{38,9},{var,{38,10},'_'},{var,{38,12},'_'}},
         {var,{38,15},'Es'}}],
       [],
       [{debug_line,39,5},
        {tuple,
         {39,13},
         [{atom,{39,14},error},
          {cons,
           {39,20},
           {tuple,
            {39,21},
            [{call,
              {39,22},
              {remote,
               {39,22},
               {atom,{39,22},erlang},
               {atom,{39,22},atom_to_list}},
              [{var,{39,35},'Name'}]},
             {var,{39,42},'Es'}]},
           {nil,{39,45}}}]}]}]}]}]}.
{attribute,{42,2},
           spec,
           {{format_error,1},
            [{type,{42,19},
                   'fun',
                   [{type,{42,19},product,[{type,{42,20},term,[]}]},
                    {type,{42,31},iolist,[]}]}]}}.
{function,
    {43,1},
    format_error,1,
    [{clause,
         {43,1},
         [{var,{43,1},'_'}],
         [[{call,
               {43,1},
               {remote,
                   {43,1},
                   {atom,{43,1},fake},
                   {atom,{43,1},is_beam_bif_info}},
               []}]],
         [{debug_line,43,6},{atom,{43,1},ignore}]},
     {clause,
         {43,1},
         [{tuple,
              {43,14},
              [{tuple,
                   {43,15},
                   [{var,{43,16},'_M'},{var,{43,19},'F'},{var,{43,21},'A'}]},
               {var,{43,24},'Error'}]}],
         [],
         [{debug_line,44,7},
          {cons,
              {44,5},
              {call,
                  {44,6},
                  {remote,{44,12},{atom,{44,6},io_lib},{atom,{44,13},format}},
                  [{block,0,[{string,{44,20},"~p/~p: "}]},
                   {block,0,
                       [{cons,
                            {44,31},
                            {var,{44,32},'F'},
                            {cons,
                                {44,34},
                                {var,{44,34},'A'},
                                {nil,{44,35}}}}]}]},
              {cons,
                  {44,38},
                  {call,
                      {44,38},
                      {atom,{44,38},format_error_1},
                      [{var,{44,53},'Error'}]},
                  {nil,{44,59}}}}]}]}.
{function,
    {46,1},
    format_instr,1,
    [{clause,
         {46,1},
         [{var,{46,1},'_'}],
         [[{call,
               {46,1},
               {remote,
                   {46,1},
                   {atom,{46,1},fake},
                   {atom,{46,1},is_beam_bif_info}},
               []}]],
         [{debug_line,46,8},{atom,{46,1},ignore}]},
     {clause,
         {46,1},
         [{var,{46,14},'I'}],
         [],
         [{debug_line,47,9},
          {cons,
              {47,5},
              {char,{47,6},39},
              {cons,
                  {47,9},
                  {call,
                      {47,9},
                      {remote,
                          {47,20},
                          {atom,{47,9},beam_ssa_pp},
                          {atom,{47,21},format_instr}},
                      [{var,{47,34},'I'}]},
                  {cons,{47,37},{char,{47,37},39},{nil,{47,39}}}}}]}]}.
{function,{49,1},
          format_vars,1,
          [{clause,{49,1},
                   [{var,{49,1},'_'}],
                   [[{call,{49,1},
                           {remote,{49,1},
                                   {atom,{49,1},fake},
                                   {atom,{49,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,49,10},{atom,{49,1},ignore}]},
           {clause,{49,1},
                   [{var,{49,13},'Vs'}],
                   [],
                   [{debug_line,50,11},
                    {cons,{50,5},
                          {char,{50,6},91},
                          {cons,{50,10},
                                {call,{50,10},
                                      {atom,{50,10},format_vars_1},
                                      [{var,{50,24},'Vs'}]},
                                {cons,{50,29},
                                      {char,{50,29},93},
                                      {nil,{50,31}}}}}]}]}.
{function,
    {52,1},
    format_vars_1,1,
    [{clause,
         {52,1},
         [{var,{52,1},'_'}],
         [[{call,
               {52,1},
               {remote,
                   {52,1},
                   {atom,{52,1},fake},
                   {atom,{52,1},is_beam_bif_info}},
               []}]],
         [{debug_line,52,12},{atom,{52,1},ignore}]},
     {clause,
         {52,1},
         [{cons,{52,15},{var,{52,16},'V'},{nil,{52,17}}}],
         [],
         [{debug_line,53,13},
          {cons,
              {53,5},
              {call,
                  {53,6},
                  {remote,
                      {53,17},
                      {atom,{53,6},beam_ssa_pp},
                      {atom,{53,18},format_var}},
                  [{var,{53,29},'V'}]},
              {nil,{53,31}}}]},
     {clause,
         {54,1},
         [{cons,{54,15},{var,{54,16},'V'},{var,{54,20},'Vs'}}],
         [],
         [{debug_line,55,14},
          {cons,
              {55,5},
              {call,
                  {55,6},
                  {remote,
                      {55,17},
                      {atom,{55,6},beam_ssa_pp},
                      {atom,{55,18},format_var}},
                  [{var,{55,29},'V'}]},
              {cons,
                  {55,33},
                  {char,{55,33},44},
                  {call,
                      {55,38},
                      {atom,{55,38},format_vars_1},
                      [{var,{55,52},'Vs'}]}}}]},
     {clause,{56,1},[{nil,{56,15}}],[],[{debug_line,57,15},{nil,{57,5}}]}]}.
{function,{59,1},
          format_var,1,
          [{clause,{59,1},
                   [{var,{59,1},'_'}],
                   [[{call,{59,1},
                           {remote,{59,1},
                                   {atom,{59,1},fake},
                                   {atom,{59,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,59,16},{atom,{59,1},ignore}]},
           {clause,{59,1},
                   [{var,{59,12},'V'}],
                   [],
                   [{debug_line,60,17},
                    {call,{60,5},
                          {remote,{60,16},
                                  {atom,{60,5},beam_ssa_pp},
                                  {atom,{60,17},format_var}},
                          [{var,{60,28},'V'}]}]}]}.
{function,
 {62,1},
 validate_function,1,
 [{clause,
   {62,1},
   [{var,{62,1},'_'}],
   [[{call,
      {62,1},
      {remote,{62,1},{atom,{62,1},fake},{atom,{62,1},is_beam_bif_info}},
      []}]],
   [{debug_line,62,18},{atom,{62,1},ignore}]},
  {clause,
   {62,1},
   [{var,{62,19},'F'}],
   [],
   [{debug_line,63,19},
    {'try',
     {63,5},
     [{debug_line,64,20},
      {call,{64,9},{atom,{64,9},validate_variables},[{var,{64,28},'F'}]},
      {debug_line,65,21},
      {nil,{65,9}}],
     [],
     [{clause,
       {67,9},
       [{tuple,
         {67,9},
         [{atom,{67,9},throw},{var,{67,15},'Reason'},{var,{67,15},'_'}]}],
       [],
       [{debug_line,68,22},
        {match,
         {68,13},
         {map,
          {68,13},
          [{map_field_exact,
            {68,24},
            {atom,{68,15},func_info},
            {var,{68,26},'MFA'}}]},
         {'case',
          {68,33},
          {var,{68,33},'F'},
          [{clause,
            [{generated,true},{location,{68,33}}],
            [{tuple,
              [{generated,true},{location,{68,33}}],
              [{atom,{68,33},b_function},
               {var,{68,33},rec0},
               {var,{68,33},'_'},
               {var,{68,33},'_'},
               {var,{68,33},'_'}]}],
            [],
            [{var,{68,33},rec0}]},
           {clause,
            [{generated,true},{location,{68,33}}],
            [{var,{68,33},rec0}],
            [],
            [{call,
              [{generated,true},{location,{68,33}}],
              {remote,
               [{generated,true},{location,{68,33}}],
               {atom,[{generated,true},{location,{68,33}}],erlang},
               {atom,[{generated,true},{location,{68,33}}],error}},
              [{tuple,
                [{generated,true},{location,{68,33}}],
                [{atom,[{generated,true},{location,{68,33}}],badrecord},
                 {var,{68,33},rec0}]}]}]}]}},
        {debug_line,69,23},
        {cons,
         {69,13},
         {tuple,{69,14},[{var,{69,15},'MFA'},{var,{69,19},'Reason'}]},
         {nil,{69,26}}}]},
      {clause,
       {70,9},
       [{tuple,
         {70,9},
         [{var,{70,9},'Class'},{var,{70,15},'Error'},{var,{70,21},'Stack'}]}],
       [],
       [{debug_line,71,24},
        {call,
         {71,13},
         {remote,{71,15},{atom,{71,13},io},{atom,{71,16},fwrite}},
         [{block,0,[{string,{71,23},"Function: ~p\n"}]},
          {block,0,
           [{cons,
             {71,41},
             {'case',
              {71,42},
              {var,{71,42},'F'},
              [{clause,
                [{generated,true},{location,{71,42}}],
                [{tuple,
                  [{generated,true},{location,{71,42}}],
                  [{atom,{71,42},b_function},
                   {var,{71,42},rec1},
                   {var,{71,42},'_'},
                   {var,{71,42},'_'},
                   {var,{71,42},'_'}]}],
                [],
                [{var,{71,42},rec1}]},
               {clause,
                [{generated,true},{location,{71,42}}],
                [{var,{71,42},rec1}],
                [],
                [{call,
                  [{generated,true},{location,{71,42}}],
                  {remote,
                   [{generated,true},{location,{71,42}}],
                   {atom,[{generated,true},{location,{71,42}}],erlang},
                   {atom,[{generated,true},{location,{71,42}}],error}},
                  [{tuple,
                    [{generated,true},{location,{71,42}}],
                    [{atom,[{generated,true},{location,{71,42}}],badrecord},
                     {var,{71,42},rec1}]}]}]}]},
             {nil,{71,59}}}]}]},
        {debug_line,72,25},
        {call,
         {72,13},
         {remote,{72,19},{atom,{72,13},erlang},{atom,{72,20},raise}},
         [{var,{72,26},'Class'},
          {var,{72,33},'Error'},
          {var,{72,40},'Stack'}]}]}],
     []}]}]}.
{attribute,
    {75,2},
    type,
    {variables,
        {remote_type,
            {75,22},
            [{atom,{75,22},gb_sets},
             {atom,{75,30},set},
             [{remote_type,
                  {75,34},
                  [{atom,{75,34},beam_ssa},{atom,{75,43},argument},[]]}]]},
        []}}.
{attribute,
    {76,2},
    type,
    {try_tags,
        {remote_type,
            {76,21},
            [{atom,{76,21},gb_sets},
             {atom,{76,29},set},
             [{remote_type,
                  {76,33},
                  [{atom,{76,33},beam_ssa},{atom,{76,42},b_var},[]]}]]},
        []}}.
{attribute,{77,2},
           type,
           {branch,{type,{77,19},
                         tuple,
                         [{user_type,{77,20},variables,[]},
                          {user_type,{77,33},try_tags,[]}]},
                   []}}.
{attribute,
    {79,2},
    record,
    {vvars,
        [{typed_record_field,
             {record_field,{80,11},{atom,{80,11},blocks}},
             {type,
                 {80,21},
                 map,
                 [{type,
                      {80,41},
                      map_field_assoc,
                      [{remote_type,
                           {80,24},
                           [{atom,{80,24},beam_ssa},{atom,{80,33},label},[]]},
                       {remote_type,
                           {80,44},
                           [{atom,{80,44},beam_ssa},
                            {atom,{80,53},b_blk},
                            []]}]}]}},
         {typed_record_field,
             {record_field,{81,11},{atom,{81,11},branches}},
             {type,
                 {81,23},
                 map,
                 [{type,
                      {84,51},
                      map_field_assoc,
                      [{type,
                           {83,26},
                           tuple,
                           [{ann_type,
                                {83,27},
                                [{var,{83,27},'From'},
                                 {remote_type,
                                     {83,35},
                                     [{atom,{83,35},beam_ssa},
                                      {atom,{83,44},label},
                                      []]}]},
                            {ann_type,
                                {84,27},
                                [{var,{84,27},'To'},
                                 {remote_type,
                                     {84,33},
                                     [{atom,{84,33},beam_ssa},
                                      {atom,{84,42},label},
                                      []]}]}]},
                       {user_type,{84,54},branch,[]}]},
                  {type,
                      {88,43},
                      map_field_assoc,
                      [{remote_type,
                           {88,26},
                           [{atom,{88,26},beam_ssa},{atom,{88,35},label},[]]},
                       {user_type,{88,46},branch,[]}]}]}},
         {typed_record_field,
             {record_field,{89,11},{atom,{89,11},variables}},
             {user_type,{89,24},variables,[]}},
         {typed_record_field,
             {record_field,{90,11},{atom,{90,11},try_tags}},
             {user_type,{90,23},try_tags,[]}}]}}.
{attribute,
    {92,2},
    spec,
    {{validate_variables,1},
     [{type,
          {92,25},
          'fun',
          [{type,
               {92,25},
               product,
               [{remote_type,
                    {92,26},
                    [{atom,{92,26},beam_ssa},{atom,{92,35},b_function},[]]}]},
           {atom,{92,52},ok}]}]}}.
{function,
    {93,1},
    validate_variables,1,
    [{clause,
         {93,1},
         [{var,{93,1},'_'}],
         [[{call,
               {93,1},
               {remote,
                   {93,1},
                   {atom,{93,1},fake},
                   {atom,{93,1},is_beam_bif_info}},
               []}]],
         [{debug_line,93,26},{atom,{93,1},ignore}]},
     {clause,
         {93,1},
         [{tuple,
              {93,20},
              [{atom,{93,20},b_function},
               {var,{93,20},'_'},
               {var,{93,40},'Args'},
               {var,{93,51},'Blocks'},
               {var,{93,20},'_'}]}],
         [],
         [{debug_line,95,27},
          {match,
              {95,5},
              {var,{95,5},'Args'},
              {call,
                  {95,12},
                  {atom,{95,12},vvars_get_variables},
                  [{var,{95,32},'Args'}]}},
          {debug_line,96,28},
          {match,
              {96,5},
              {var,{96,5},'Vars'},
              {call,
                  {96,12},
                  {remote,
                      {96,19},
                      {atom,{96,12},gb_sets},
                      {atom,{96,20},from_list}},
                  [{var,{96,30},'Args'}]}},
          {debug_line,97,29},
          {match,
              {97,5},
              {var,{97,5},'TryTags'},
              {call,
                  {97,15},
                  {remote,{97,22},{atom,{97,15},gb_sets},{atom,{97,23},new}},
                  []}},
          {debug_line,98,30},
          {match,{98,5},{var,{98,5},'Entry'},{integer,{98,13},0}},
          {debug_line,100,31},
          {match,
              {100,5},
              {var,{100,5},'State'},
              {tuple,
                  {100,13},
                  [{atom,{100,13},vvars},
                   {var,{100,29},'Blocks'},
                   {map,
                       {101,31},
                       [{map_field_assoc,
                            {101,40},
                            {var,{101,34},'Entry'},
                            {tuple,
                                {101,43},
                                [{var,{101,44},'Vars'},
                                 {var,{101,50},'TryTags'}]}}]},
                   {var,{102,32},'Vars'},
                   {var,{103,31},'TryTags'}]}},
          {debug_line,104,32},
          {match,
              {104,5},
              {atom,{104,5},ok},
              {call,
                  {104,10},
                  {atom,{104,10},vvars_assert_unique},
                  [{var,{104,30},'Blocks'},{var,{104,38},'Args'}]}},
          {debug_line,105,33},
          {call,
              {105,5},
              {atom,{105,5},vvars_phi_nodes},
              [{block,0,
                   [{call,
                        {105,21},
                        {atom,{105,21},vvars_block},
                        [{var,{105,33},'Entry'},
                         {var,{105,40},'State'}]}]}]}]}]}.
{attribute,
    {108,2},
    spec,
    {{vvars_assert_unique,2},
     [{type,
          {108,26},
          bounded_fun,
          [{type,
               {108,26},
               'fun',
               [{type,
                    {108,26},
                    product,
                    [{var,{108,27},'Blocks'},
                     {type,
                         {108,35},
                         list,
                         [{remote_type,
                              {108,36},
                              [{atom,{108,36},beam_ssa},
                               {atom,{108,45},b_var},
                               []]}]}]},
                {atom,{108,58},ok}]},
           [{type,
                {109,7},
                constraint,
                [{atom,{109,7},is_subtype},
                 [{var,{109,7},'Blocks'},
                  {type,
                      {109,17},
                      map,
                      [{type,
                           {109,37},
                           map_field_assoc,
                           [{remote_type,
                                {109,20},
                                [{atom,{109,20},beam_ssa},
                                 {atom,{109,29},label},
                                 []]},
                            {remote_type,
                                {109,40},
                                [{atom,{109,40},beam_ssa},
                                 {atom,{109,49},b_blk},
                                 []]}]}]}]]}]]}]}}.
{function,
 {110,1},
 vvars_assert_unique,2,
 [{clause,
   {110,1},
   [{var,{110,1},'_'},{var,{110,1},'_'}],
   [[{call,
      {110,1},
      {remote,{110,1},{atom,{110,1},fake},{atom,{110,1},is_beam_bif_info}},
      []}]],
   [{debug_line,110,34},{atom,{110,1},ignore}]},
  {clause,
   {110,1},
   [{var,{110,21},'Blocks'},{var,{110,29},'Args'}],
   [],
   [{debug_line,111,35},
    {match,
     {111,5},
     {var,{111,5},'BlockIs'},
     {lc,
      {111,15},
      {block,0,[{var,{111,16},'Is'}]},
      [{block,0,[{atom,{111,40},true}]},
       {generate_strict,
        {111,36},
        {tuple,
         {111,22},
         [{atom,{111,22},b_blk},
          {var,{111,22},'_'},
          {var,{111,32},'Is'},
          {var,{111,22},'_'}]},
        {call,
         {111,40},
         {remote,{111,44},{atom,{111,40},maps},{atom,{111,45},values}},
         [{var,{111,52},'Blocks'}]}}]}},
    {debug_line,112,36},
    {match,
     {112,5},
     {var,{112,5},'Defined0'},
     {mc,
      {112,16},
      {map_field_assoc,
       {112,20},
       {block,0,[{var,{112,18},'V'}]},
       {block,0,[{atom,{112,23},argument}]}},
      [{block,0,[{atom,{112,40},true}]},
       {generate,{112,37},{var,{112,35},'V'},{var,{112,40},'Args'}}]}},
    {debug_line,113,37},
    {match,
     {113,5},
     {var,{113,5},'_'},
     {call,
      {113,9},
      {remote,{113,9},{atom,{113,9},lists},{atom,{113,9},foldl}},
      [{block,0,
        [{'fun',
          {113,15},
          {clauses,
           [{clause,
             {113,18},
             [{var,{113,19},'Is'},{var,{113,23},'Defined'}],
             [],
             [{debug_line,114,38},
              {call,
               {114,23},
               {atom,{114,23},vvars_assert_unique_1},
               [{var,{114,45},'Is'},{var,{114,49},'Defined'}]}]}]}}]},
       {var,{115,20},'Defined0'},
       {var,{115,30},'BlockIs'}]}},
    {debug_line,116,39},
    {atom,{116,5},ok}]}]}.
{attribute,
    {118,2},
    spec,
    {{vvars_assert_unique_1,2},
     [{type,
          {118,28},
          bounded_fun,
          [{type,
               {118,28},
               'fun',
               [{type,
                    {118,28},
                    product,
                    [{var,{118,29},'Is'},{var,{118,33},'Defined'}]},
                {atom,{118,45},ok}]},
           [{type,
                {119,7},
                constraint,
                [{atom,{119,7},is_subtype},
                 [{var,{119,7},'Is'},
                  {type,
                      {119,13},
                      list,
                      [{remote_type,
                           {119,18},
                           [{atom,{119,18},beam_ssa},
                            {atom,{119,27},b_set},
                            []]}]}]]},
            {type,
                {120,7},
                constraint,
                [{atom,{120,7},is_subtype},
                 [{var,{120,7},'Defined'},
                  {type,
                      {120,18},
                      map,
                      [{type,
                           {120,38},
                           map_field_assoc,
                           [{remote_type,
                                {120,21},
                                [{atom,{120,21},beam_ssa},
                                 {atom,{120,30},b_var},
                                 []]},
                            {remote_type,
                                {120,41},
                                [{atom,{120,41},beam_ssa},
                                 {atom,{120,50},b_set},
                                 []]}]}]}]]}]]}]}}.
{function,
    {121,1},
    vvars_assert_unique_1,2,
    [{clause,
         {121,1},
         [{var,{121,1},'_'},{var,{121,1},'_'}],
         [[{call,
               {121,1},
               {remote,
                   {121,1},
                   {atom,{121,1},fake},
                   {atom,{121,1},is_beam_bif_info}},
               []}]],
         [{debug_line,121,40},{atom,{121,1},ignore}]},
     {clause,
         {121,1},
         [{cons,
              {121,23},
              {match,
                  {121,24},
                  {tuple,
                      {121,24},
                      [{atom,{121,24},b_set},
                       {var,{121,44},'Anno'},
                       {var,{121,35},'Dst'},
                       {var,{121,24},'_'},
                       {var,{121,24},'_'}]},
                  {var,{121,50},'I'}},
              {var,{121,52},'Is'}},
          {var,{121,57},'Defined'}],
         [],
         [{debug_line,122,41},
          {call,{122,5},{atom,{122,5},check_anno},[{var,{122,16},'Anno'}]},
          {debug_line,123,42},
          {'case',
              {123,5},
              {var,{123,10},'Defined'},
              [{clause,
                   {124,9},
                   [{map,
                        {124,9},
                        [{map_field_exact,
                             {124,14},
                             {var,{124,11},'Dst'},
                             {var,{124,16},'Old'}}]}],
                   [],
                   [{debug_line,124,43},
                    {call,
                        {124,24},
                        {remote,
                            {124,24},
                            {atom,{124,24},erlang},
                            {atom,{124,24},throw}},
                        [{block,0,
                             [{tuple,
                                  {124,30},
                                  [{atom,{124,31},redefined_variable},
                                   {var,{124,51},'Dst'},
                                   {var,{124,56},'Old'},
                                   {var,{124,61},'I'}]}]}]}]},
               {clause,
                   {125,9},
                   [{var,{125,9},'_'}],
                   [],
                   [{debug_line,125,44},
                    {call,
                        {125,14},
                        {atom,{125,14},vvars_assert_unique_1},
                        [{var,{125,36},'Is'},
                         {block,0,
                             [{map,
                                  {125,47},
                                  {var,{125,40},'Defined'},
                                  [{map_field_assoc,
                                       {125,52},
                                       {var,{125,49},'Dst'},
                                       {var,{125,54},'I'}}]}]}]}]}]}]},
     {clause,
         {127,1},
         [{nil,{127,23}},{var,{127,27},'Defined'}],
         [],
         [{debug_line,128,45},{var,{128,5},'Defined'}]}]}.
{attribute,
    {130,2},
    spec,
    {{vvars_phi_nodes,1},
     [{type,
          {130,22},
          'fun',
          [{type,
               {130,22},
               product,
               [{ann_type,
                    {130,23},
                    [{var,{130,23},'State'},
                     {type,{130,32},record,[{atom,{130,33},vvars}]}]}]},
           {atom,{130,45},ok}]}]}}.
{function,
    {131,1},
    vvars_phi_nodes,1,
    [{clause,
         {131,1},
         [{var,{131,1},'_'}],
         [[{call,
               {131,1},
               {remote,
                   {131,1},
                   {atom,{131,1},fake},
                   {atom,{131,1},is_beam_bif_info}},
               []}]],
         [{debug_line,131,46},{atom,{131,1},ignore}]},
     {clause,
         {131,1},
         [{match,
              {131,17},
              {tuple,
                  {131,17},
                  [{atom,{131,17},vvars},
                   {var,{131,34},'Blocks'},
                   {var,{131,17},'_'},
                   {var,{131,17},'_'},
                   {var,{131,17},'_'}]},
              {var,{131,43},'State'}}],
         [],
         [{debug_line,132,47},
          {match,
              {132,5},
              {var,{132,5},'_'},
              {lc,{132,9},
                  {block,0,
                      [{call,
                           {132,10},
                           {atom,{132,10},vvars_phi_nodes_1},
                           [{var,{132,28},'Is'},
                            {var,{132,32},'Id'},
                            {var,{132,36},'State'}]}]},
                  [{block,0,[{debug_line,133,48},{atom,{133,41},true}]},
                   {m_generate_strict,
                       {133,37},
                       {map_field_exact,
                           {133,16},
                           {var,{133,13},'Id'},
                           {tuple,
                               {133,19},
                               [{atom,{133,19},b_blk},
                                {var,{133,19},'_'},
                                {var,{133,32},'Is'},
                                {var,{133,19},'_'}]}},
                       {var,{133,41},'Blocks'}}]}},
          {debug_line,134,49},
          {atom,{134,5},ok}]}]}.
{attribute,
    {136,2},
    spec,
    {{vvars_phi_nodes_1,3},
     [{type,
          {136,24},
          bounded_fun,
          [{type,
               {136,24},
               'fun',
               [{type,
                    {136,24},
                    product,
                    [{var,{136,25},'Is'},
                     {var,{136,29},'Id'},
                     {var,{136,33},'State'}]},
                {atom,{136,43},ok}]},
           [{type,
                {137,7},
                constraint,
                [{atom,{137,7},is_subtype},
                 [{var,{137,7},'Is'},
                  {type,
                      {137,13},
                      list,
                      [{remote_type,
                           {137,18},
                           [{atom,{137,18},beam_ssa},
                            {atom,{137,27},b_set},
                            []]}]}]]},
            {type,
                {138,7},
                constraint,
                [{atom,{138,7},is_subtype},
                 [{var,{138,7},'Id'},
                  {remote_type,
                      {138,13},
                      [{atom,{138,13},beam_ssa},{atom,{138,22},label},[]]}]]},
            {type,
                {139,7},
                constraint,
                [{atom,{139,7},is_subtype},
                 [{var,{139,7},'State'},
                  {type,{139,16},record,[{atom,{139,17},vvars}]}]]}]]}]}}.
{function,
    {140,1},
    vvars_phi_nodes_1,3,
    [{clause,
         {140,1},
         [{var,{140,1},'_'},{var,{140,1},'_'},{var,{140,1},'_'}],
         [[{call,
               {140,1},
               {remote,
                   {140,1},
                   {atom,{140,1},fake},
                   {atom,{140,1},is_beam_bif_info}},
               []}]],
         [{debug_line,140,50},{atom,{140,1},ignore}]},
     {clause,
         {140,1},
         [{cons,
              {140,19},
              {match,
                  {140,20},
                  {tuple,
                      {140,20},
                      [{atom,{140,20},b_set},
                       {var,{140,20},'_'},
                       {var,{140,20},'_'},
                       {atom,{140,33},phi},
                       {var,{140,45},'Phis'}]},
                  {var,{140,52},'I'}},
              {var,{140,56},'Is'}},
          {var,{140,61},'Id'},
          {var,{140,65},'State'}],
         [],
         [{debug_line,141,51},
          {match,
              {141,5},
              {atom,{141,5},ok},
              {call,
                  {141,10},
                  {atom,{141,10},vvars_assert_phi_paths},
                  [{var,{141,33},'Phis'},
                   {var,{141,39},'I'},
                   {var,{141,42},'Id'},
                   {var,{141,46},'State'}]}},
          {debug_line,142,52},
          {match,
              {142,5},
              {atom,{142,5},ok},
              {call,
                  {142,10},
                  {atom,{142,10},vvars_assert_phi_vars},
                  [{var,{142,32},'Phis'},
                   {var,{142,38},'I'},
                   {var,{142,41},'Id'},
                   {var,{142,45},'State'}]}},
          {debug_line,143,53},
          {call,
              {143,5},
              {atom,{143,5},vvars_phi_nodes_1},
              [{var,{143,23},'Is'},
               {var,{143,27},'Id'},
               {var,{143,31},'State'}]}]},
     {clause,
         {144,1},
         [{cons,{144,19},{var,{144,20},'_'},{var,{144,24},'Is'}},
          {var,{144,29},'Id'},
          {var,{144,33},'_State'}],
         [],
         [{debug_line,145,54},
          {'case',
              {145,5},
              {lc,{145,10},
                  {block,0,[{var,{145,11},'Dst'}]},
                  [{block,0,[{atom,{145,44},true}]},
                   {generate,
                       {145,41},
                       {tuple,
                           {145,18},
                           [{atom,{145,18},b_set},
                            {var,{145,18},'_'},
                            {var,{145,36},'Dst'},
                            {atom,{145,28},phi},
                            {var,{145,18},'_'}]},
                       {var,{145,44},'Is'}}]},
              [{clause,
                   {146,9},
                   [{cons,{146,9},{var,{146,10},'Var'},{var,{146,14},'_'}}],
                   [],
                   [{debug_line,147,55},
                    {call,
                        {147,13},
                        {remote,
                            {147,13},
                            {atom,{147,13},erlang},
                            {atom,{147,13},throw}},
                        [{block,0,
                             [{tuple,
                                  {147,19},
                                  [{atom,{147,20},phi_inside_block},
                                   {var,{147,38},'Var'},
                                   {var,{147,43},'Id'}]}]}]}]},
               {clause,
                   {148,9},
                   [{nil,{148,9}}],
                   [],
                   [{debug_line,149,56},{atom,{149,13},ok}]}]}]},
     {clause,
         {151,1},
         [{nil,{151,19}},{var,{151,23},'_Id'},{var,{151,28},'_State'}],
         [],
         [{debug_line,152,57},{atom,{152,5},ok}]}]}.
{attribute,
    {156,2},
    spec,
    {{vvars_assert_phi_paths,4},
     [{type,
          {156,29},
          bounded_fun,
          [{type,
               {156,29},
               'fun',
               [{type,
                    {156,29},
                    product,
                    [{var,{156,30},'Phis'},
                     {var,{156,36},'I'},
                     {var,{156,39},'Id'},
                     {var,{156,43},'State'}]},
                {atom,{156,53},ok}]},
           [{type,
                {157,7},
                constraint,
                [{atom,{157,7},is_subtype},
                 [{var,{157,7},'Phis'},
                  {type,
                      {157,15},
                      list,
                      [{type,
                           {157,20},
                           tuple,
                           [{remote_type,
                                {157,21},
                                [{atom,{157,21},beam_ssa},
                                 {atom,{157,30},argument},
                                 []]},
                            {remote_type,
                                {157,42},
                                [{atom,{157,42},beam_ssa},
                                 {atom,{157,51},label},
                                 []]}]}]}]]},
            {type,
                {158,7},
                constraint,
                [{atom,{158,7},is_subtype},
                 [{var,{158,7},'Id'},
                  {remote_type,
                      {158,13},
                      [{atom,{158,13},beam_ssa},{atom,{158,22},label},[]]}]]},
            {type,
                {159,7},
                constraint,
                [{atom,{159,7},is_subtype},
                 [{var,{159,7},'I'},
                  {remote_type,
                      {159,12},
                      [{atom,{159,12},beam_ssa},{atom,{159,21},b_set},[]]}]]},
            {type,
                {160,7},
                constraint,
                [{atom,{160,7},is_subtype},
                 [{var,{160,7},'State'},
                  {type,{160,16},record,[{atom,{160,17},vvars}]}]]}]]}]}}.
{function,
 {161,1},
 vvars_assert_phi_paths,4,
 [{clause,
   {161,1},
   [{var,{161,1},'_'},{var,{161,1},'_'},{var,{161,1},'_'},{var,{161,1},'_'}],
   [[{call,
      {161,1},
      {remote,{161,1},{atom,{161,1},fake},{atom,{161,1},is_beam_bif_info}},
      []}]],
   [{debug_line,161,58},{atom,{161,1},ignore}]},
  {clause,
   {161,1},
   [{var,{161,24},'Phis'},
    {var,{161,30},'I'},
    {var,{161,33},'Id'},
    {var,{161,37},'State'}],
   [],
   [{debug_line,162,59},
    {match,
     {162,5},
     {var,{162,5},'BranchKeys'},
     {call,
      {162,18},
      {remote,{162,22},{atom,{162,18},maps},{atom,{162,23},keys}},
      [{block,0,
        [{'case',
          {162,28},
          {var,{162,28},'State'},
          [{clause,
            [{generated,true},{location,{162,28}}],
            [{tuple,
              [{generated,true},{location,{162,28}}],
              [{atom,{162,28},vvars},
               {var,{162,28},'_'},
               {var,{162,28},rec2},
               {var,{162,28},'_'},
               {var,{162,28},'_'}]}],
            [],
            [{var,{162,28},rec2}]},
           {clause,
            [{generated,true},{location,{162,28}}],
            [{var,{162,28},rec2}],
            [],
            [{call,
              [{generated,true},{location,{162,28}}],
              {remote,
               [{generated,true},{location,{162,28}}],
               {atom,[{generated,true},{location,{162,28}}],erlang},
               {atom,[{generated,true},{location,{162,28}}],error}},
              [{tuple,
                [{generated,true},{location,{162,28}}],
                [{atom,[{generated,true},{location,{162,28}}],badrecord},
                 {var,{162,28},rec2}]}]}]}]}]}]}},
    {debug_line,163,60},
    {match,
     {163,5},
     {var,{163,5},'RequiredPaths'},
     {call,
      {163,21},
      {remote,{163,28},{atom,{163,21},ordsets},{atom,{163,29},from_list}},
      [{block,0,
        [{lc,
          {163,39},
          {block,0,[{var,{163,40},'From'}]},
          [{block,0,[{atom,{163,62},true}]},
           {generate,
            {163,59},
            {tuple,{163,48},[{var,{163,49},'From'},{var,{163,55},'To'}]},
            {var,{163,62},'BranchKeys'}},
           {block,0,[{atom,{163,77},true}]},
           {op,{163,77},'=:=',{var,{163,74},'To'},{var,{163,81},'Id'}}]}]}]}},
    {debug_line,164,61},
    {match,
     {164,5},
     {var,{164,5},'ProvidedPaths'},
     {call,
      {164,21},
      {remote,{164,28},{atom,{164,21},ordsets},{atom,{164,29},from_list}},
      [{block,0,
        [{lc,
          {164,39},
          {block,0,[{var,{164,40},'From'}]},
          [{block,0,[{atom,{164,67},true}]},
           {generate_strict,
            {164,63},
            {tuple,{164,48},[{var,{164,49},'_Value'},{var,{164,57},'From'}]},
            {var,{164,67},'Phis'}}]}]}]}},
    {debug_line,165,62},
    {'case',
     {165,5},
     {call,
      {165,10},
      {remote,{165,17},{atom,{165,10},ordsets},{atom,{165,18},subtract}},
      [{var,{165,27},'RequiredPaths'},{var,{165,42},'ProvidedPaths'}]},
     [{clause,
       {166,9},
       [{match,
         {166,9},
         {cons,{166,9},{var,{166,10},'_'},{var,{166,12},'_'}},
         {var,{166,15},'MissingPaths'}}],
       [],
       [{debug_line,166,63},
        {call,
         {166,31},
         {remote,{166,31},{atom,{166,31},erlang},{atom,{166,31},throw}},
         [{block,0,
           [{tuple,
             {166,37},
             [{atom,{166,38},missing_phi_paths},
              {var,{166,57},'MissingPaths'},
              {var,{166,71},'I'}]}]}]}]},
      {clause,
       {167,9},
       [{nil,{167,9}}],
       [],
       [{debug_line,167,64},{atom,{167,15},ok}]}]}]}]}.
{attribute,
    {179,2},
    spec,
    {{vvars_assert_phi_vars,4},
     [{type,
          {179,28},
          bounded_fun,
          [{type,
               {179,28},
               'fun',
               [{type,
                    {179,28},
                    product,
                    [{var,{179,29},'Phis'},
                     {var,{179,35},'I'},
                     {var,{179,38},'Id'},
                     {var,{179,42},'State'}]},
                {atom,{179,52},ok}]},
           [{type,
                {180,7},
                constraint,
                [{atom,{180,7},is_subtype},
                 [{var,{180,7},'Phis'},
                  {type,
                      {180,15},
                      list,
                      [{type,
                           {180,20},
                           tuple,
                           [{remote_type,
                                {180,21},
                                [{atom,{180,21},beam_ssa},
                                 {atom,{180,30},argument},
                                 []]},
                            {remote_type,
                                {180,42},
                                [{atom,{180,42},beam_ssa},
                                 {atom,{180,51},label},
                                 []]}]}]}]]},
            {type,
                {181,7},
                constraint,
                [{atom,{181,7},is_subtype},
                 [{var,{181,7},'Id'},
                  {remote_type,
                      {181,13},
                      [{atom,{181,13},beam_ssa},{atom,{181,22},label},[]]}]]},
            {type,
                {182,7},
                constraint,
                [{atom,{182,7},is_subtype},
                 [{var,{182,7},'I'},
                  {remote_type,
                      {182,12},
                      [{atom,{182,12},beam_ssa},{atom,{182,21},b_set},[]]}]]},
            {type,
                {183,7},
                constraint,
                [{atom,{183,7},is_subtype},
                 [{var,{183,7},'State'},
                  {type,{183,16},record,[{atom,{183,17},vvars}]}]]}]]}]}}.
{function,
 {184,1},
 vvars_assert_phi_vars,4,
 [{clause,
   {184,1},
   [{var,{184,1},'_'},{var,{184,1},'_'},{var,{184,1},'_'},{var,{184,1},'_'}],
   [[{call,
      {184,1},
      {remote,{184,1},{atom,{184,1},fake},{atom,{184,1},is_beam_bif_info}},
      []}]],
   [{debug_line,184,65},{atom,{184,1},ignore}]},
  {clause,
   {184,1},
   [{var,{184,23},'Phis'},
    {var,{184,29},'I'},
    {var,{184,32},'Id'},
    {tuple,
     {184,36},
     [{atom,{184,36},vvars},
      {var,{184,50},'Blocks'},
      {var,{184,66},'Branches'},
      {var,{184,36},'_'},
      {var,{184,36},'_'}]}],
   [],
   [{debug_line,185,66},
    {match,
     {185,5},
     {var,{185,5},'PhiVars'},
     {lc,
      {185,15},
      {block,0,
       [{tuple,{185,16},[{var,{185,17},'Var'},{var,{185,22},'From'}]}]},
      [{block,0,[{atom,{185,55},true}]},
       {generate,
        {185,52},
        {tuple,
         {185,31},
         [{match,
           {185,32},
           {tuple,{185,32},[{atom,{185,32},b_var},{var,{185,32},'_'}]},
           {var,{185,41},'Var'}},
          {var,{185,46},'From'}]},
        {var,{185,55},'Phis'}}]}},
    {debug_line,186,67},
    {call,
     {186,5},
     {remote,{186,5},{atom,{186,5},lists},{atom,{186,5},foreach}},
     [{block,0,
       [{'fun',
         {186,13},
         {clauses,
          [{clause,
            {186,16},
            [{tuple,{186,17},[{var,{186,18},'Var'},{var,{186,23},'From'}]}],
            [],
            [{debug_line,187,68},
             {'case',
              {187,21},
              {var,{187,26},'Branches'},
              [{clause,
                {188,25},
                [{map,
                  {188,25},
                  [{map_field_exact,
                    {188,39},
                    {tuple,
                     {188,28},
                     [{var,{188,29},'From'},{var,{188,35},'Id'}]},
                    {tuple,
                     {188,42},
                     [{var,{188,43},'Vars'},{var,{188,49},'_TryTags'}]}}]}],
                [],
                [{debug_line,189,69},
                 {'case',
                  {189,29},
                  {call,
                   {189,34},
                   {remote,
                    {189,41},
                    {atom,{189,34},gb_sets},
                    {atom,{189,42},is_member}},
                   [{var,{189,52},'Var'},{var,{189,57},'Vars'}]},
                  [{clause,
                    {190,33},
                    [{atom,{190,33},true}],
                    [],
                    [{debug_line,190,70},{atom,{190,41},ok}]},
                   {clause,
                    {191,33},
                    [{atom,{191,33},false}],
                    [],
                    [{debug_line,191,71},
                     {call,
                      {191,42},
                      {remote,
                       {191,42},
                       {atom,{191,42},erlang},
                       {atom,{191,42},throw}},
                      [{block,0,
                        [{tuple,
                          {191,48},
                          [{atom,{191,49},unknown_variable},
                           {var,{191,67},'Var'},
                           {var,{191,72},'I'}]}]}]}]}]}]},
               {clause,
                {193,25},
                [{map,{193,25},[]}],
                [],
                [{debug_line,194,72},
                 {call,
                  {194,29},
                  {remote,
                   {194,29},
                   {atom,{194,29},erlang},
                   {atom,{194,29},throw}},
                  [{block,0,
                    [{tuple,
                      {194,35},
                      [{atom,{194,36},unknown_phi_variable},
                       {var,{194,58},'Var'},
                       {tuple,
                        {194,63},
                        [{var,{194,64},'From'},{var,{194,70},'Id'}]},
                       {var,{194,75},'I'}]}]}]}]}]}]}]}}]},
      {var,{196,18},'PhiVars'}]},
    {debug_line,197,73},
    {match,
     {197,5},
     {var,{197,5},'Labels'},
     {lc,
      {197,14},
      {block,0,[{var,{197,15},'From'}]},
      [{block,0,[{atom,{197,46},true}]},
       {generate,
        {197,43},
        {tuple,
         {197,23},
         [{tuple,{197,24},[{atom,{197,24},b_literal},{var,{197,24},'_'}]},
          {var,{197,37},'From'}]},
        {var,{197,46},'Phis'}}]}},
    {debug_line,198,74},
    {call,
     {198,5},
     {remote,{198,5},{atom,{198,5},lists},{atom,{198,5},foreach}},
     [{block,0,
       [{'fun',
         {198,13},
         {clauses,
          [{clause,
            {198,16},
            [{var,{198,17},'Label'}],
            [],
            [{debug_line,199,75},
             {'case',
              {199,21},
              {var,{199,26},'Blocks'},
              [{clause,
                {200,25},
                [{map,
                  {200,25},
                  [{map_field_exact,
                    {200,32},
                    {var,{200,27},'Label'},
                    {var,{200,34},'_'}}]}],
                [],
                [{debug_line,201,76},{atom,{201,29},ok}]},
               {clause,
                {202,25},
                [{map,{202,25},[]}],
                [],
                [{debug_line,203,77},
                 {call,
                  {203,29},
                  {remote,
                   {203,29},
                   {atom,{203,29},erlang},
                   {atom,{203,29},throw}},
                  [{block,0,
                    [{tuple,
                      {203,35},
                      [{atom,{203,36},undefined_label_in_phi},
                       {var,{203,60},'Label'},
                       {var,{203,67},'I'}]}]}]}]}]}]}]}}]},
      {var,{205,18},'Labels'}]}]}]}.
{attribute,
    {207,2},
    spec,
    {{vvars_block,2},
     [{type,
          {207,18},
          bounded_fun,
          [{type,
               {207,18},
               'fun',
               [{type,
                    {207,18},
                    product,
                    [{var,{207,19},'Id'},{var,{207,23},'State'}]},
                {type,{207,33},record,[{atom,{207,34},vvars}]}]},
           [{type,
                {208,7},
                constraint,
                [{atom,{208,7},is_subtype},
                 [{var,{208,7},'Id'},
                  {remote_type,
                      {208,13},
                      [{atom,{208,13},beam_ssa},{atom,{208,22},label},[]]}]]},
            {type,
                {209,7},
                constraint,
                [{atom,{209,7},is_subtype},
                 [{var,{209,7},'State'},
                  {type,{209,16},record,[{atom,{209,17},vvars}]}]]}]]}]}}.
{function,
 {210,1},
 vvars_block,2,
 [{clause,
   {210,1},
   [{var,{210,1},'_'},{var,{210,1},'_'}],
   [[{call,
      {210,1},
      {remote,{210,1},{atom,{210,1},fake},{atom,{210,1},is_beam_bif_info}},
      []}]],
   [{debug_line,210,78},{atom,{210,1},ignore}]},
  {clause,
   {210,1},
   [{var,{210,13},'Id'},{var,{210,17},'State0'}],
   [],
   [{debug_line,211,79},
    {match,
     {211,5},
     {map,
      {211,5},
      [{map_field_exact,
        {211,11},
        {var,{211,8},'Id'},
        {tuple,
         {211,14},
         [{atom,{211,14},b_blk},
          {var,{211,14},'_'},
          {var,{211,27},'Is'},
          {var,{211,38},'Terminator'}]}}]},
     {'case',
      {211,54},
      {var,{211,54},'State0'},
      [{clause,
        [{generated,true},{location,{211,54}}],
        [{tuple,
          [{generated,true},{location,{211,54}}],
          [{atom,{211,54},vvars},
           {var,{211,54},rec3},
           {var,{211,54},'_'},
           {var,{211,54},'_'},
           {var,{211,54},'_'}]}],
        [],
        [{var,{211,54},rec3}]},
       {clause,
        [{generated,true},{location,{211,54}}],
        [{var,{211,54},rec3}],
        [],
        [{call,
          [{generated,true},{location,{211,54}}],
          {remote,
           [{generated,true},{location,{211,54}}],
           {atom,[{generated,true},{location,{211,54}}],erlang},
           {atom,[{generated,true},{location,{211,54}}],error}},
          [{tuple,
            [{generated,true},{location,{211,54}}],
            [{atom,[{generated,true},{location,{211,54}}],badrecord},
             {var,{211,54},rec3}]}]}]}]}},
    {debug_line,212,80},
    {match,
     {212,5},
     {map,
      {212,5},
      [{map_field_exact,
        {212,11},
        {var,{212,8},'Id'},
        {tuple,{212,14},[{var,{212,15},'Vars'},{var,{212,21},'TryTags'}]}}]},
     {'case',
      {212,34},
      {var,{212,34},'State0'},
      [{clause,
        [{generated,true},{location,{212,34}}],
        [{tuple,
          [{generated,true},{location,{212,34}}],
          [{atom,{212,34},vvars},
           {var,{212,34},'_'},
           {var,{212,34},rec4},
           {var,{212,34},'_'},
           {var,{212,34},'_'}]}],
        [],
        [{var,{212,34},rec4}]},
       {clause,
        [{generated,true},{location,{212,34}}],
        [{var,{212,34},rec4}],
        [],
        [{call,
          [{generated,true},{location,{212,34}}],
          {remote,
           [{generated,true},{location,{212,34}}],
           {atom,[{generated,true},{location,{212,34}}],erlang},
           {atom,[{generated,true},{location,{212,34}}],error}},
          [{tuple,
            [{generated,true},{location,{212,34}}],
            [{atom,[{generated,true},{location,{212,34}}],badrecord},
             {var,{212,34},rec4}]}]}]}]}},
    {debug_line,213,81},
    {call,
     {213,5},
     {atom,{213,5},validate_normalized},
     [{var,{213,25},'Terminator'}]},
    {debug_line,214,82},
    {match,
     {214,5},
     {var,{214,5},'State'},
     {block,
      {214,13},
      [{match,{214,13},{var,{214,13},rec5},{var,{214,13},'State0'}},
       {'case',
        {214,27},
        {var,{214,13},rec5},
        [{clause,
          {214,27},
          [{tuple,
            {214,27},
            [{atom,{214,27},vvars},
             {var,{214,27},'_'},
             {var,{214,27},'_'},
             {var,{214,27},'_'},
             {var,{214,27},'_'}]}],
          [],
          [{call,
            {214,27},
            {remote,
             {214,27},
             {atom,{214,27},erlang},
             {atom,{214,27},setelement}},
            [{integer,{214,27},4},
             {call,
              {214,45},
              {remote,
               {214,45},
               {atom,{214,45},erlang},
               {atom,{214,45},setelement}},
              [{integer,{214,45},5},
               {var,{214,13},rec5},
               {var,{214,56},'TryTags'}]},
             {var,{214,39},'Vars'}]}]},
         {clause,
          [{generated,true},{location,{214,27}}],
          [{var,[{generated,true},{location,{214,27}}],'_'}],
          [],
          [{call,
            [{generated,true},{location,{214,27}}],
            {remote,
             [{generated,true},{location,{214,27}}],
             {atom,[{generated,true},{location,{214,27}}],erlang},
             {atom,[{generated,true},{location,{214,27}}],error}},
            [{tuple,
              [{generated,true},{location,{214,27}}],
              [{atom,[{generated,true},{location,{214,27}}],badrecord},
               {var,{214,13},rec5}]}]}]}]}]}},
    {debug_line,215,83},
    {call,
     {215,5},
     {atom,{215,5},vvars_terminator},
     [{var,{215,22},'Terminator'},
      {var,{215,34},'Id'},
      {block,0,
       [{call,
         {215,38},
         {atom,{215,38},vvars_block_1},
         [{var,{215,52},'Is'},
          {var,{215,56},'Terminator'},
          {var,{215,68},'State'}]}]}]}]}]}.
{function,
    {217,1},
    validate_normalized,1,
    [{clause,
         {217,1},
         [{var,{217,1},'_'}],
         [[{call,
               {217,1},
               {remote,
                   {217,1},
                   {atom,{217,1},fake},
                   {atom,{217,1},is_beam_bif_info}},
               []}]],
         [{debug_line,217,84},{atom,{217,1},ignore}]},
     {clause,
         {217,1},
         [{var,{217,21},'I'}],
         [],
         [{debug_line,218,85},
          {'case',
              {218,5},
              {call,
                  {218,10},
                  {remote,
                      {218,18},
                      {atom,{218,10},beam_ssa},
                      {atom,{218,19},normalize}},
                  [{var,{218,29},'I'}]},
              [{clause,
                   {219,9},
                   [{var,{219,9},'I'}],
                   [],
                   [{debug_line,220,86},{atom,{220,13},ok}]},
               {clause,
                   {221,9},
                   [{var,{221,9},'_'}],
                   [],
                   [{debug_line,228,87},
                    {call,
                        {228,13},
                        {remote,
                            {228,13},
                            {atom,{228,13},erlang},
                            {atom,{228,13},throw}},
                        [{block,0,
                             [{tuple,
                                  {228,19},
                                  [{atom,{228,20},not_normalized},
                                   {var,{228,36},'I'}]}]}]}]}]}]}]}.
{attribute,
    {231,2},
    spec,
    {{vvars_block_1,3},
     [{type,
          {231,20},
          bounded_fun,
          [{type,
               {231,20},
               'fun',
               [{type,
                    {231,20},
                    product,
                    [{var,{231,21},'Is'},
                     {var,{231,25},'Terminator'},
                     {var,{231,37},'State'}]},
                {type,{231,47},record,[{atom,{231,48},vvars}]}]},
           [{type,
                {232,7},
                constraint,
                [{atom,{232,7},is_subtype},
                 [{var,{232,7},'Is'},
                  {type,
                      {232,13},
                      list,
                      [{type,{232,18},record,[{atom,{232,19},b_set}]}]}]]},
            {type,
                {233,7},
                constraint,
                [{atom,{233,7},is_subtype},
                 [{var,{233,7},'Terminator'},
                  {remote_type,
                      {233,21},
                      [{atom,{233,21},beam_ssa},
                       {atom,{233,30},terminator},
                       []]}]]},
            {type,
                {234,7},
                constraint,
                [{atom,{234,7},is_subtype},
                 [{var,{234,7},'State'},
                  {type,{234,16},record,[{atom,{234,17},vvars}]}]]}]]}]}}.
{function,
    {235,1},
    vvars_block_1,3,
    [{clause,
         {235,1},
         [{var,{235,1},'_'},{var,{235,1},'_'},{var,{235,1},'_'}],
         [[{call,
               {235,1},
               {remote,
                   {235,1},
                   {atom,{235,1},fake},
                   {atom,{235,1},is_beam_bif_info}},
               []}]],
         [{debug_line,235,88},{atom,{235,1},ignore}]},
     {clause,
         {235,1},
         [{cons,
              {235,15},
              {match,
                  {235,16},
                  {tuple,
                      {235,16},
                      [{atom,{235,16},b_set},
                       {var,{235,16},'_'},
                       {var,{235,27},'OpVar'},
                       {var,{235,16},'_'},
                       {var,{235,38},'OpArgs'}]},
                  {var,{235,46},'I'}},
              {cons,
                  {236,16},
                  {tuple,
                      {236,16},
                      [{atom,{236,16},b_set},
                       {var,{236,16},'_'},
                       {var,{236,60},'SuccVar'},
                       {tuple,
                           {236,26},
                           [{atom,{236,27},succeeded},{var,{236,37},'Kind'}]},
                       {cons,{236,48},{var,{236,49},'OpVar'},{nil,{236,54}}}]},
                  {nil,{236,68}}}},
          {var,{237,15},'Terminator'},
          {var,{237,27},'State'}],
         [],
         [{debug_line,238,89},
          {match,
              {238,5},
              {atom,{238,5},true},
              {'case',
                  {238,17},
                  {op,{238,17},
                      '=:=',
                      {var,{238,12},'Kind'},
                      {atom,{238,21},guard}},
                  [{clause,
                       {238,17},
                       [{atom,{238,17},true}],
                       [],
                       [{atom,{238,17},true}]},
                   {clause,
                       {238,17},
                       [{atom,{238,17},false}],
                       [],
                       [{op,{238,39},
                            '=:=',
                            {var,{238,34},'Kind'},
                            {atom,{238,43},body}}]},
                   {clause,
                       [{generated,true},{location,{238,17}}],
                       [{var,{238,17},cov1}],
                       [],
                       [{call,
                            {238,17},
                            {remote,
                                {238,17},
                                {atom,{238,17},erlang},
                                {atom,{238,17},error}},
                            [{block,0,
                                 [{tuple,
                                      {238,17},
                                      [{atom,{238,17},badarg},
                                       {var,{238,17},cov1}]}]}]}]}]}},
          {debug_line,239,90},
          {'case',
              {239,5},
              {var,{239,10},'Terminator'},
              [{clause,
                   {240,9},
                   [{tuple,
                        {240,9},
                        [{atom,{240,9},b_br},
                         {var,{240,9},'_'},
                         {tuple,
                             {240,20},
                             [{atom,{240,20},b_var},{var,{240,20},'_'}]},
                         {var,{240,9},'_'},
                         {var,{240,9},'_'}]}],
                   [],
                   [{debug_line,241,91},
                    {match,
                        {241,13},
                        {atom,{241,13},ok},
                        {call,
                            {241,18},
                            {atom,{241,18},vvars_assert_args},
                            [{var,{241,36},'OpArgs'},
                             {var,{241,44},'I'},
                             {var,{241,47},'State'}]}},
                    {debug_line,242,92},
                    {call,
                        {242,13},
                        {atom,{242,13},vvars_save_var},
                        [{var,{242,28},'SuccVar'},
                         {block,0,
                             [{call,
                                  {242,37},
                                  {atom,{242,37},vvars_save_var},
                                  [{var,{242,52},'OpVar'},
                                   {var,{242,59},'State'}]}]}]}]},
               {clause,
                   {243,9},
                   [{var,{243,9},'_'}],
                   [[{op,{243,21},
                         '=:=',
                         {var,{243,16},'Kind'},
                         {atom,{243,25},body}}]],
                   [{debug_line,244,93},
                    {match,
                        {244,13},
                        {atom,{244,13},ok},
                        {call,
                            {244,18},
                            {atom,{244,18},vvars_assert_args},
                            [{var,{244,36},'OpArgs'},
                             {var,{244,44},'I'},
                             {var,{244,47},'State'}]}},
                    {debug_line,245,94},
                    {call,
                        {245,13},
                        {atom,{245,13},vvars_save_var},
                        [{var,{245,28},'SuccVar'},
                         {block,0,
                             [{call,
                                  {245,37},
                                  {atom,{245,37},vvars_save_var},
                                  [{var,{245,52},'OpVar'},
                                   {var,{245,59},'State'}]}]}]}]},
               {clause,
                   {246,9},
                   [{var,{246,9},'_'}],
                   [],
                   [{debug_line,249,95},
                    {call,
                        {249,13},
                        {remote,
                            {249,13},
                            {atom,{249,13},erlang},
                            {atom,{249,13},throw}},
                        [{block,0,
                             [{tuple,
                                  {249,19},
                                  [{atom,
                                       {249,20},
                                       succeeded_not_followed_by_two_way_br},
                                   {var,{249,58},'I'}]}]}]}]}]}]},
     {clause,
         {251,1},
         [{cons,
              {251,15},
              {match,
                  {251,16},
                  {tuple,
                      {251,16},
                      [{atom,{251,16},b_set},
                       {var,{251,16},'_'},
                       {var,{251,16},'_'},
                       {tuple,
                           {251,26},
                           [{atom,{251,27},succeeded},{atom,{251,37},guard}]},
                       {var,{251,49},'Args'}]},
                  {var,{251,55},'I'}},
              {cons,{251,59},{var,{251,60},'_'},{var,{251,62},'_'}}},
          {var,{252,15},'_Terminator'},
          {var,{252,28},'State'}],
         [],
         [{debug_line,253,96},
          {match,
              {253,5},
              {atom,{253,5},ok},
              {call,
                  {253,10},
                  {atom,{253,10},vvars_assert_args},
                  [{var,{253,28},'Args'},
                   {var,{253,34},'I'},
                   {var,{253,37},'State'}]}},
          {debug_line,255,97},
          {call,
              {255,5},
              {remote,{255,5},{atom,{255,5},erlang},{atom,{255,5},throw}},
              [{block,0,
                   [{tuple,
                        {255,11},
                        [{atom,{255,12},succeeded_not_last},
                         {var,{255,32},'I'}]}]}]}]},
     {clause,
         {256,1},
         [{cons,
              {256,15},
              {match,
                  {256,16},
                  {tuple,
                      {256,16},
                      [{atom,{256,16},b_set},
                       {var,{256,16},'_'},
                       {var,{256,16},'_'},
                       {tuple,
                           {256,26},
                           [{atom,{256,27},succeeded},{var,{256,37},'_'}]},
                       {var,{256,45},'Args'}]},
                  {var,{256,51},'I'}},
              {nil,{256,52}}},
          {var,{256,55},'_Terminator'},
          {var,{256,68},'State'}],
         [],
         [{debug_line,257,98},
          {match,
              {257,5},
              {atom,{257,5},ok},
              {call,
                  {257,10},
                  {atom,{257,10},vvars_assert_args},
                  [{var,{257,28},'Args'},
                   {var,{257,34},'I'},
                   {var,{257,37},'State'}]}},
          {debug_line,259,99},
          {call,
              {259,5},
              {remote,{259,5},{atom,{259,5},erlang},{atom,{259,5},throw}},
              [{block,0,
                   [{tuple,
                        {259,11},
                        [{atom,{259,12},succeeded_not_preceded},
                         {var,{259,36},'I'}]}]}]}]},
     {clause,
         {260,1},
         [{cons,
              {260,15},
              {tuple,
                  {260,16},
                  [{atom,{260,16},b_set},
                   {var,{260,16},'_'},
                   {var,{260,30},'Dst'},
                   {atom,{260,40},phi},
                   {var,{260,16},'_'}]},
              {var,{260,48},'Is'}},
          {var,{260,53},'Terminator'},
          {var,{260,65},'State'}],
         [],
         [{debug_line,264,100},
          {call,
              {264,5},
              {atom,{264,5},vvars_block_1},
              [{var,{264,19},'Is'},
               {var,{264,23},'Terminator'},
               {block,0,
                   [{call,
                        {264,35},
                        {atom,{264,35},vvars_save_var},
                        [{var,{264,50},'Dst'},{var,{264,55},'State'}]}]}]}]},
     {clause,
         {265,1},
         [{cons,
              {265,15},
              {match,
                  {265,16},
                  {tuple,
                      {265,16},
                      [{atom,{265,16},b_set},
                       {var,{265,16},'_'},
                       {var,{265,48},'Dst'},
                       {atom,{265,29},new_try_tag},
                       {var,{265,60},'Args'}]},
                  {var,{265,67},'I'}},
              {var,{265,71},'Is'}},
          {var,{266,15},'Terminator'},
          {var,{266,27},'State'}],
         [],
         [{debug_line,267,101},
          {match,
              {267,5},
              {atom,{267,5},ok},
              {call,
                  {267,10},
                  {atom,{267,10},vvars_assert_args},
                  [{var,{267,28},'Args'},
                   {var,{267,34},'I'},
                   {var,{267,37},'State'}]}},
          {debug_line,268,102},
          {call,
              {268,5},
              {atom,{268,5},vvars_block_1},
              [{var,{268,19},'Is'},
               {var,{268,23},'Terminator'},
               {block,0,
                   [{call,
                        {268,35},
                        {atom,{268,35},vvars_save_try_tag},
                        [{var,{268,54},'Dst'},{var,{268,59},'State'}]}]}]}]},
     {clause,
         {269,1},
         [{cons,
              {269,15},
              {match,
                  {269,16},
                  {tuple,
                      {269,16},
                      [{atom,{269,16},b_set},
                       {var,{269,16},'_'},
                       {var,{270,30},'Dst'},
                       {atom,{269,29},kill_try_tag},
                       {cons,{271,31},{var,{271,32},'Tag'},{nil,{271,35}}}]},
                  {var,{271,39},'I'}},
              {var,{271,43},'Is'}},
          {var,{272,15},'Terminator'},
          {var,{272,27},'State0'}],
         [],
         [{debug_line,273,103},
          {match,
              {273,5},
              {atom,{273,5},ok},
              {call,
                  {273,10},
                  {atom,{273,10},vvars_assert_args},
                  [{block,0,
                       [{cons,{273,28},{var,{273,29},'Tag'},{nil,{273,32}}}]},
                   {var,{273,35},'I'},
                   {var,{273,38},'State0'}]}},
          {debug_line,274,104},
          {match,
              {274,5},
              {var,{274,5},'State'},
              {call,
                  {274,13},
                  {atom,{274,13},vvars_kill_try_tag},
                  [{var,{274,32},'Tag'},{var,{274,37},'State0'}]}},
          {debug_line,275,105},
          {call,
              {275,5},
              {atom,{275,5},vvars_block_1},
              [{var,{275,19},'Is'},
               {var,{275,23},'Terminator'},
               {block,0,
                   [{call,
                        {275,35},
                        {atom,{275,35},vvars_save_var},
                        [{var,{275,50},'Dst'},{var,{275,55},'State'}]}]}]}]},
     {clause,
         {276,1},
         [{cons,
              {276,15},
              {match,
                  {276,16},
                  {tuple,
                      {276,16},
                      [{atom,{276,16},b_set},
                       {var,{276,16},'_'},
                       {var,{277,30},'Dst'},
                       {atom,{276,29},catch_end},
                       {cons,
                           {278,31},
                           {var,{278,32},'Tag'},
                           {cons,
                               {278,37},
                               {var,{278,37},'Kind'},
                               {nil,{278,41}}}}]},
                  {var,{278,45},'I'}},
              {var,{278,49},'Is'}},
          {var,{279,15},'Terminator'},
          {var,{279,27},'State0'}],
         [],
         [{debug_line,280,106},
          {match,
              {280,5},
              {atom,{280,5},ok},
              {call,
                  {280,10},
                  {atom,{280,10},vvars_assert_args},
                  [{block,0,
                       [{cons,{280,28},{var,{280,29},'Kind'},{nil,{280,33}}}]},
                   {var,{280,36},'I'},
                   {var,{280,39},'State0'}]}},
          {debug_line,281,107},
          {match,
              {281,5},
              {var,{281,5},'State'},
              {call,
                  {281,13},
                  {atom,{281,13},vvars_kill_try_tag},
                  [{var,{281,32},'Tag'},{var,{281,37},'State0'}]}},
          {debug_line,282,108},
          {call,
              {282,5},
              {atom,{282,5},vvars_block_1},
              [{var,{282,19},'Is'},
               {var,{282,23},'Terminator'},
               {block,0,
                   [{call,
                        {282,35},
                        {atom,{282,35},vvars_save_var},
                        [{var,{282,50},'Dst'},{var,{282,55},'State'}]}]}]}]},
     {clause,
         {283,1},
         [{cons,
              {283,15},
              {match,
                  {283,16},
                  {tuple,
                      {283,16},
                      [{atom,{283,16},b_set},
                       {var,{283,16},'_'},
                       {var,{283,30},'Dst'},
                       {var,{283,16},'_'},
                       {var,{283,42},'Args'}]},
                  {var,{283,49},'I'}},
              {var,{283,53},'Is'}},
          {var,{283,58},'Terminator'},
          {var,{283,70},'State'}],
         [],
         [{debug_line,284,109},
          {match,
              {284,5},
              {atom,{284,5},ok},
              {call,
                  {284,10},
                  {atom,{284,10},vvars_assert_args},
                  [{var,{284,28},'Args'},
                   {var,{284,34},'I'},
                   {var,{284,37},'State'}]}},
          {debug_line,285,110},
          {call,
              {285,5},
              {atom,{285,5},vvars_block_1},
              [{var,{285,19},'Is'},
               {var,{285,23},'Terminator'},
               {block,0,
                   [{call,
                        {285,35},
                        {atom,{285,35},vvars_save_var},
                        [{var,{285,50},'Dst'},{var,{285,55},'State'}]}]}]}]},
     {clause,
         {286,1},
         [{nil,{286,15}},{var,{286,19},'_Terminator'},{var,{286,32},'State'}],
         [],
         [{debug_line,287,111},{var,{287,5},'State'}]}]}.
{attribute,
    {289,2},
    spec,
    {{vvars_terminator,3},
     [{type,
          {289,23},
          bounded_fun,
          [{type,
               {289,23},
               'fun',
               [{type,
                    {289,23},
                    product,
                    [{var,{289,24},'Terminator'},
                     {var,{289,36},'From'},
                     {var,{289,42},'State'}]},
                {type,{289,52},record,[{atom,{289,53},vvars}]}]},
           [{type,
                {290,7},
                constraint,
                [{atom,{290,7},is_subtype},
                 [{var,{290,7},'Terminator'},
                  {remote_type,
                      {290,21},
                      [{atom,{290,21},beam_ssa},
                       {atom,{290,30},terminator},
                       []]}]]},
            {type,
                {291,7},
                constraint,
                [{atom,{291,7},is_subtype},
                 [{var,{291,7},'From'},
                  {remote_type,
                      {291,15},
                      [{atom,{291,15},beam_ssa},{atom,{291,24},label},[]]}]]},
            {type,
                {292,7},
                constraint,
                [{atom,{292,7},is_subtype},
                 [{var,{292,7},'State'},
                  {type,{292,16},record,[{atom,{292,17},vvars}]}]]}]]}]}}.
{function,
    {293,1},
    vvars_terminator,3,
    [{clause,
         {293,1},
         [{var,{293,1},'_'},{var,{293,1},'_'},{var,{293,1},'_'}],
         [[{call,
               {293,1},
               {remote,
                   {293,1},
                   {atom,{293,1},fake},
                   {atom,{293,1},is_beam_bif_info}},
               []}]],
         [{debug_line,293,112},{atom,{293,1},ignore}]},
     {clause,
         {293,1},
         [{match,
              {293,18},
              {tuple,
                  {293,18},
                  [{atom,{293,18},b_ret},
                   {var,{293,38},'Anno'},
                   {var,{293,29},'Arg'}]},
              {var,{293,44},'I'}},
          {var,{293,47},'From'},
          {var,{293,53},'State'}],
         [],
         [{debug_line,294,113},
          {call,{294,5},{atom,{294,5},check_anno},[{var,{294,16},'Anno'}]},
          {debug_line,295,114},
          {match,
              {295,5},
              {atom,{295,5},ok},
              {call,
                  {295,10},
                  {atom,{295,10},vvars_assert_args},
                  [{block,0,
                       [{cons,{295,28},{var,{295,29},'Arg'},{nil,{295,32}}}]},
                   {var,{295,35},'I'},
                   {var,{295,38},'State'}]}},
          {debug_line,296,115},
          {match,
              {296,5},
              {var,{296,5},'TryTags'},
              {'case',
                  {296,15},
                  {var,{296,15},'State'},
                  [{clause,
                       [{generated,true},{location,{296,15}}],
                       [{tuple,
                            [{generated,true},{location,{296,15}}],
                            [{atom,{296,15},vvars},
                             {var,{296,15},'_'},
                             {var,{296,15},'_'},
                             {var,{296,15},'_'},
                             {var,{296,15},rec6}]}],
                       [],
                       [{var,{296,15},rec6}]},
                   {clause,
                       [{generated,true},{location,{296,15}}],
                       [{var,{296,15},rec6}],
                       [],
                       [{call,
                            [{generated,true},{location,{296,15}}],
                            {remote,
                                [{generated,true},{location,{296,15}}],
                                {atom,
                                    [{generated,true},{location,{296,15}}],
                                    erlang},
                                {atom,
                                    [{generated,true},{location,{296,15}}],
                                    error}},
                            [{tuple,
                                 [{generated,true},{location,{296,15}}],
                                 [{atom,
                                      [{generated,true},{location,{296,15}}],
                                      badrecord},
                                  {var,{296,15},rec6}]}]}]}]}},
          {debug_line,297,116},
          {'case',
              {297,5},
              {tuple,
                  {297,10},
                  [{call,
                       {297,11},
                       {remote,
                           {297,18},
                           {atom,{297,11},gb_sets},
                           {atom,{297,19},is_empty}},
                       [{var,{297,28},'TryTags'}]},
                   {var,{297,37},'From'}]},
              [{clause,
                   {298,9},
                   [{tuple,
                        {298,9},
                        [{atom,{298,10},false},{integer,{298,17},1}]}],
                   [],
                   [{debug_line,302,117},{var,{302,13},'State'}]},
               {clause,
                   {303,9},
                   [{tuple,
                        {303,9},
                        [{atom,{303,10},false},{var,{303,16},'_'}]}],
                   [],
                   [{debug_line,304,118},
                    {call,
                        {304,13},
                        {remote,
                            {304,13},
                            {atom,{304,13},erlang},
                            {atom,{304,13},throw}},
                        [{block,0,
                             [{tuple,
                                  {304,19},
                                  [{atom,{304,20},active_try_tags_on_return},
                                   {var,{304,47},'TryTags'},
                                   {var,{304,56},'I'}]}]}]}]},
               {clause,
                   {305,9},
                   [{tuple,{305,9},[{atom,{305,10},true},{var,{305,15},'_'}]}],
                   [],
                   [{debug_line,306,119},{var,{306,13},'State'}]}]}]},
     {clause,
         {308,1},
         [{match,
              {308,18},
              {tuple,
                  {308,18},
                  [{atom,{308,18},b_switch},
                   {var,{308,63},'Anno'},
                   {var,{308,32},'Arg'},
                   {var,{308,41},'Fail'},
                   {var,{308,51},'Switch'}]},
              {var,{308,69},'I'}},
          {var,{308,72},'From'},
          {var,{308,78},'State'}],
         [],
         [{debug_line,309,120},
          {call,{309,5},{atom,{309,5},check_anno},[{var,{309,16},'Anno'}]},
          {debug_line,310,121},
          {match,
              {310,5},
              {atom,{310,5},ok},
              {call,
                  {310,10},
                  {atom,{310,10},vvars_assert_args},
                  [{block,0,
                       [{cons,{310,28},{var,{310,29},'Arg'},{nil,{310,32}}}]},
                   {var,{310,35},'I'},
                   {var,{310,38},'State'}]}},
          {debug_line,311,122},
          {match,
              {311,5},
              {atom,{311,5},ok},
              {call,
                  {311,10},
                  {atom,{311,10},vvars_assert_args},
                  [{block,0,
                       [{lc,{311,28},
                            {block,0,[{var,{311,29},'A'}]},
                            [{block,0,[{atom,{311,47},true}]},
                             {generate_strict,
                                 {311,43},
                                 {tuple,
                                     {311,34},
                                     [{var,{311,35},'A'},
                                      {var,{311,37},'_Lbl'}]},
                                 {var,{311,47},'Switch'}}]}]},
                   {var,{311,56},'I'},
                   {var,{311,59},'State'}]}},
          {debug_line,312,123},
          {match,
              {312,5},
              {var,{312,5},'Labels'},
              {cons,
                  {312,14},
                  {var,{312,15},'Fail'},
                  {lc,{312,22},
                      {block,0,[{var,{312,23},'Lbl'}]},
                      [{block,0,[{atom,{312,46},true}]},
                       {generate_strict,
                           {312,42},
                           {tuple,
                               {312,30},
                               [{var,{312,31},'_Arg'},{var,{312,37},'Lbl'}]},
                           {var,{312,46},'Switch'}}]}}},
          {debug_line,313,124},
          {match,
              {313,5},
              {atom,{313,5},ok},
              {call,
                  {313,10},
                  {atom,{313,10},vvars_assert_labels},
                  [{var,{313,30},'Labels'},
                   {var,{313,38},'I'},
                   {var,{313,41},'State'}]}},
          {debug_line,314,125},
          {call,
              {314,5},
              {atom,{314,5},vvars_terminator_1},
              [{var,{314,24},'Labels'},
               {var,{314,32},'From'},
               {var,{314,38},'State'}]}]},
     {clause,
         {315,1},
         [{match,
              {315,18},
              {tuple,
                  {315,18},
                  [{atom,{315,18},b_br},
                   {var,{315,65},'Anno'},
                   {tuple,
                       {315,29},
                       [{atom,{315,29},b_literal},{atom,{315,44},true}]},
                   {var,{315,55},'Succ'},
                   {var,{315,18},'_'}]},
              {var,{315,71},'I'}},
          {var,{315,74},'From'},
          {var,{315,80},'State'}],
         [],
         [{debug_line,316,126},
          {call,{316,5},{atom,{316,5},check_anno},[{var,{316,16},'Anno'}]},
          {debug_line,317,127},
          {match,
              {317,5},
              {var,{317,5},'Labels'},
              {cons,{317,14},{var,{317,15},'Succ'},{nil,{317,19}}}},
          {debug_line,318,128},
          {match,
              {318,5},
              {atom,{318,5},ok},
              {call,
                  {318,10},
                  {atom,{318,10},vvars_assert_labels},
                  [{var,{318,30},'Labels'},
                   {var,{318,38},'I'},
                   {var,{318,41},'State'}]}},
          {debug_line,319,129},
          {call,
              {319,5},
              {atom,{319,5},vvars_terminator_1},
              [{var,{319,24},'Labels'},
               {var,{319,32},'From'},
               {var,{319,38},'State'}]}]},
     {clause,
         {320,1},
         [{match,
              {320,18},
              {tuple,
                  {320,18},
                  [{atom,{320,18},b_br},
                   {var,{320,58},'Anno'},
                   {var,{320,29},'Arg'},
                   {var,{320,38},'Succ'},
                   {var,{320,48},'Fail'}]},
              {var,{320,64},'I'}},
          {var,{320,67},'From'},
          {var,{320,73},'State'}],
         [],
         [{debug_line,321,130},
          {call,{321,5},{atom,{321,5},check_anno},[{var,{321,16},'Anno'}]},
          {debug_line,322,131},
          {match,
              {322,5},
              {atom,{322,5},ok},
              {call,
                  {322,10},
                  {atom,{322,10},vvars_assert_args},
                  [{block,0,
                       [{cons,{322,28},{var,{322,29},'Arg'},{nil,{322,32}}}]},
                   {var,{322,35},'I'},
                   {var,{322,38},'State'}]}},
          {debug_line,323,132},
          {match,
              {323,5},
              {var,{323,5},'Labels'},
              {cons,
                  {323,14},
                  {var,{323,15},'Fail'},
                  {cons,{323,21},{var,{323,21},'Succ'},{nil,{323,25}}}}},
          {debug_line,324,133},
          {match,
              {324,5},
              {atom,{324,5},ok},
              {call,
                  {324,10},
                  {atom,{324,10},vvars_assert_labels},
                  [{var,{324,30},'Labels'},
                   {var,{324,38},'I'},
                   {var,{324,41},'State'}]}},
          {debug_line,325,134},
          {call,
              {325,5},
              {atom,{325,5},vvars_terminator_1},
              [{var,{325,24},'Labels'},
               {var,{325,32},'From'},
               {var,{325,38},'State'}]}]}]}.
{attribute,
    {327,2},
    spec,
    {{vvars_terminator_1,3},
     [{type,
          {327,25},
          bounded_fun,
          [{type,
               {327,25},
               'fun',
               [{type,
                    {327,25},
                    product,
                    [{var,{327,26},'Labels'},
                     {var,{327,34},'From'},
                     {var,{327,40},'State'}]},
                {type,{327,50},record,[{atom,{327,51},vvars}]}]},
           [{type,
                {328,7},
                constraint,
                [{atom,{328,7},is_subtype},
                 [{var,{328,7},'Labels'},
                  {type,
                      {328,17},
                      list,
                      [{remote_type,
                           {328,22},
                           [{atom,{328,22},beam_ssa},
                            {atom,{328,31},label},
                            []]}]}]]},
            {type,
                {329,7},
                constraint,
                [{atom,{329,7},is_subtype},
                 [{var,{329,7},'From'},
                  {remote_type,
                      {329,15},
                      [{atom,{329,15},beam_ssa},{atom,{329,24},label},[]]}]]},
            {type,
                {330,7},
                constraint,
                [{atom,{330,7},is_subtype},
                 [{var,{330,7},'State'},
                  {type,{330,16},record,[{atom,{330,17},vvars}]}]]}]]}]}}.
{function,
 {331,1},
 vvars_terminator_1,3,
 [{clause,
   {331,1},
   [{var,{331,1},'_'},{var,{331,1},'_'},{var,{331,1},'_'}],
   [[{call,
      {331,1},
      {remote,{331,1},{atom,{331,1},fake},{atom,{331,1},is_beam_bif_info}},
      []}]],
   [{debug_line,331,135},{atom,{331,1},ignore}]},
  {clause,
   {331,1},
   [{var,{331,20},'Labels0'},
    {var,{331,29},'From'},
    {match,
     {331,35},
     {tuple,
      {331,35},
      [{atom,{331,35},vvars},
       {var,{331,35},'_'},
       {var,{331,51},'Branches'},
       {var,{331,35},'_'},
       {var,{331,35},'_'}]},
     {var,{331,61},'State0'}}],
   [],
   [{debug_line,334,136},
    {match,
     {334,5},
     {var,{334,5},'Labels'},
     {lc,
      {334,14},
      {block,0,[{var,{334,15},'To'}]},
      [{block,0,[{atom,{334,27},true}]},
       {generate,{334,24},{var,{334,21},'To'},{var,{334,27},'Labels0'}},
       {op,
        {335,21},
        'not',
        {call,
         {335,25},
         {remote,{335,29},{atom,{335,25},maps},{atom,{335,30},is_key}},
         [{block,0,
           [{debug_line,335,137},
            {tuple,{335,37},[{var,{335,38},'From'},{var,{335,44},'To'}]}]},
          {var,{335,49},'Branches'}]}}]}},
    {debug_line,336,138},
    {match,
     {336,5},
     {atom,{336,5},true},
     {'case',
      {336,19},
      {op,{336,19},'=:=',{var,{336,12},'Labels'},{var,{336,23},'Labels0'}},
      [{clause,{336,19},[{atom,{336,19},true}],[],[{atom,{336,19},true}]},
       {clause,
        {336,19},
        [{atom,{336,19},false}],
        [],
        [{op,{336,45},'=:=',{var,{336,38},'Labels'},{nil,{336,49}}}]},
       {clause,
        [{generated,true},{location,{336,19}}],
        [{var,{336,19},cov1}],
        [],
        [{call,
          {336,19},
          {remote,{336,19},{atom,{336,19},erlang},{atom,{336,19},error}},
          [{block,0,
            [{tuple,
              {336,19},
              [{atom,{336,19},badarg},{var,{336,19},cov1}]}]}]}]}]}},
    {debug_line,337,139},
    {match,
     {337,5},
     {var,{337,5},'State1'},
     {call,
      {337,14},
      {remote,{337,14},{atom,{337,14},lists},{atom,{337,14},foldl}},
      [{block,0,
        [{'fun',
          {337,20},
          {clauses,
           [{clause,
             {337,23},
             [{var,{337,24},'To'},{var,{337,28},'State'}],
             [],
             [{debug_line,338,140},
              {call,
               {338,28},
               {atom,{338,28},vvars_save_branch},
               [{var,{338,46},'From'},
                {var,{338,52},'To'},
                {var,{338,56},'State'}]}]}]}}]},
       {var,{339,25},'State0'},
       {var,{339,33},'Labels'}]}},
    {debug_line,340,141},
    {call,
     {340,5},
     {remote,{340,5},{atom,{340,5},lists},{atom,{340,5},foldl}},
     [{block,0,
       [{'fun',
         {340,11},
         {clauses,
          [{clause,
            {340,14},
            [{var,{340,15},'To'},{var,{340,19},'State'}],
            [],
            [{debug_line,341,142},
             {call,
              {341,19},
              {atom,{341,19},vvars_block},
              [{var,{341,31},'To'},{var,{341,35},'State'}]}]}]}}]},
      {var,{342,16},'State1'},
      {var,{342,24},'Labels'}]}]}]}.
{attribute,
    {345,2},
    spec,
    {{vvars_get_variables,1},
     [{type,
          {345,26},
          bounded_fun,
          [{type,
               {345,26},
               'fun',
               [{type,{345,26},product,[{var,{345,27},'Args'}]},
                {type,
                    {345,36},
                    list,
                    [{remote_type,
                         {345,41},
                         [{atom,{345,41},beam_ssa},
                          {atom,{345,50},b_var},
                          []]}]}]},
           [{type,
                {346,7},
                constraint,
                [{atom,{346,7},is_subtype},
                 [{var,{346,7},'Args'},
                  {type,
                      {346,15},
                      list,
                      [{remote_type,
                           {346,20},
                           [{atom,{346,20},beam_ssa},
                            {atom,{346,29},argument},
                            []]}]}]]}]]}]}}.
{function,
    {347,1},
    vvars_get_variables,1,
    [{clause,
         {347,1},
         [{var,{347,1},'_'}],
         [[{call,
               {347,1},
               {remote,
                   {347,1},
                   {atom,{347,1},fake},
                   {atom,{347,1},is_beam_bif_info}},
               []}]],
         [{debug_line,347,143},{atom,{347,1},ignore}]},
     {clause,
         {347,1},
         [{var,{347,21},'Args'}],
         [],
         [{debug_line,348,144},
          {lc,{348,5},
              {block,0,[{var,{348,6},'Var'}]},
              [{block,0,[{atom,{348,29},true}]},
               {generate,
                   {348,26},
                   {match,
                       {348,13},
                       {tuple,
                           {348,13},
                           [{atom,{348,13},b_var},{var,{348,13},'_'}]},
                       {var,{348,22},'Var'}},
                   {var,{348,29},'Args'}}]}]}]}.
{attribute,
    {352,2},
    spec,
    {{vvars_assert_args,3},
     [{type,
          {352,24},
          bounded_fun,
          [{type,
               {352,24},
               'fun',
               [{type,
                    {352,24},
                    product,
                    [{var,{352,25},'Args'},
                     {var,{352,31},'I'},
                     {var,{352,34},'State'}]},
                {atom,{352,44},ok}]},
           [{type,
                {353,7},
                constraint,
                [{atom,{353,7},is_subtype},
                 [{var,{353,7},'Args'},
                  {type,
                      {353,15},
                      list,
                      [{remote_type,
                           {353,20},
                           [{atom,{353,20},beam_ssa},
                            {atom,{353,29},argument},
                            []]}]}]]},
            {type,
                {354,7},
                constraint,
                [{atom,{354,7},is_subtype},
                 [{var,{354,7},'I'},
                  {type,
                      {354,12},
                      union,
                      [{remote_type,
                           {354,12},
                           [{atom,{354,12},beam_ssa},
                            {atom,{354,21},terminator},
                            []]},
                       {remote_type,
                           {354,36},
                           [{atom,{354,36},beam_ssa},
                            {atom,{354,45},b_set},
                            []]}]}]]},
            {type,
                {355,7},
                constraint,
                [{atom,{355,7},is_subtype},
                 [{var,{355,7},'State'},
                  {type,{355,16},record,[{atom,{355,17},vvars}]}]]}]]}]}}.
{function,
 {356,1},
 vvars_assert_args,3,
 [{clause,
   {356,1},
   [{var,{356,1},'_'},{var,{356,1},'_'},{var,{356,1},'_'}],
   [[{call,
      {356,1},
      {remote,{356,1},{atom,{356,1},fake},{atom,{356,1},is_beam_bif_info}},
      []}]],
   [{debug_line,356,145},{atom,{356,1},ignore}]},
  {clause,
   {356,1},
   [{var,{356,19},'Args'},
    {var,{356,25},'I'},
    {match,
     {356,28},
     {tuple,
      {356,28},
      [{atom,{356,28},vvars},
       {var,{356,28},'_'},
       {var,{356,28},'_'},
       {var,{356,45},'Vars'},
       {var,{356,28},'_'}]},
     {var,{356,51},'State'}}],
   [],
   [{debug_line,357,146},
    {call,
     {357,5},
     {remote,{357,5},{atom,{357,5},lists},{atom,{357,5},foreach}},
     [{block,0,
       [{'fun',
         {357,13},
         {clauses,
          [{clause,
            {357,16},
            [{tuple,
              {357,17},
              [{atom,{357,17},b_remote},
               {var,{357,31},'Mod'},
               {var,{357,40},'Name'},
               {var,{357,17},'_'}]}],
            [],
            [{debug_line,358,147},
             {call,
              {358,21},
              {atom,{358,21},vvars_assert_args},
              [{block,0,
                [{cons,
                  {358,39},
                  {var,{358,40},'Mod'},
                  {cons,{358,44},{var,{358,44},'Name'},{nil,{358,48}}}}]},
               {var,{358,51},'I'},
               {var,{358,54},'State'}]}]},
           {clause,
            {359,16},
            [{match,
              {359,17},
              {tuple,{359,17},[{atom,{359,17},b_var},{var,{359,17},'_'}]},
              {var,{359,26},'Var'}}],
            [],
            [{debug_line,360,148},
             {'case',
              {360,21},
              {call,
               {360,26},
               {remote,
                {360,33},
                {atom,{360,26},gb_sets},
                {atom,{360,34},is_member}},
               [{var,{360,44},'Var'},{var,{360,49},'Vars'}]},
              [{clause,
                {361,25},
                [{atom,{361,25},true}],
                [],
                [{debug_line,361,149},{atom,{361,33},ok}]},
               {clause,
                {362,25},
                [{atom,{362,25},false}],
                [],
                [{debug_line,362,150},
                 {call,
                  {362,34},
                  {remote,
                   {362,34},
                   {atom,{362,34},erlang},
                   {atom,{362,34},throw}},
                  [{block,0,
                    [{tuple,
                      {362,40},
                      [{atom,{362,41},unknown_variable},
                       {var,{362,58},'Var'},
                       {var,{362,62},'I'}]}]}]}]}]}]},
           {clause,
            {364,16},
            [{var,{364,17},'_'}],
            [],
            [{debug_line,364,151},{atom,{364,23},ok}]}]}}]},
      {var,{365,18},'Args'}]}]}]}.
{attribute,
    {368,2},
    spec,
    {{vvars_assert_labels,3},
     [{type,
          {368,26},
          bounded_fun,
          [{type,
               {368,26},
               'fun',
               [{type,
                    {368,26},
                    product,
                    [{var,{368,27},'Labels'},
                     {var,{368,35},'I'},
                     {var,{368,38},'State'}]},
                {atom,{368,48},ok}]},
           [{type,
                {369,7},
                constraint,
                [{atom,{369,7},is_subtype},
                 [{var,{369,7},'Labels'},
                  {type,
                      {369,17},
                      list,
                      [{remote_type,
                           {369,22},
                           [{atom,{369,22},beam_ssa},
                            {atom,{369,31},label},
                            []]}]}]]},
            {type,
                {370,7},
                constraint,
                [{atom,{370,7},is_subtype},
                 [{var,{370,7},'I'},
                  {remote_type,
                      {370,12},
                      [{atom,{370,12},beam_ssa},
                       {atom,{370,21},terminator},
                       []]}]]},
            {type,
                {371,7},
                constraint,
                [{atom,{371,7},is_subtype},
                 [{var,{371,7},'State'},
                  {type,{371,16},record,[{atom,{371,17},vvars}]}]]}]]}]}}.
{function,
 {372,1},
 vvars_assert_labels,3,
 [{clause,
   {372,1},
   [{var,{372,1},'_'},{var,{372,1},'_'},{var,{372,1},'_'}],
   [[{call,
      {372,1},
      {remote,{372,1},{atom,{372,1},fake},{atom,{372,1},is_beam_bif_info}},
      []}]],
   [{debug_line,372,152},{atom,{372,1},ignore}]},
  {clause,
   {372,1},
   [{var,{372,21},'Labels'},
    {var,{372,29},'I'},
    {tuple,
     {372,32},
     [{atom,{372,32},vvars},
      {var,{372,46},'Blocks'},
      {var,{372,32},'_'},
      {var,{372,32},'_'},
      {var,{372,32},'_'}]}],
   [],
   [{debug_line,373,153},
    {call,
     {373,5},
     {remote,{373,5},{atom,{373,5},lists},{atom,{373,5},foreach}},
     [{block,0,
       [{'fun',
         {373,13},
         {clauses,
          [{clause,
            {373,16},
            [{var,{373,17},'Label'}],
            [],
            [{debug_line,374,154},
             {'case',
              {374,21},
              {call,
               {374,26},
               {remote,{374,30},{atom,{374,26},maps},{atom,{374,31},is_key}},
               [{var,{374,38},'Label'},{var,{374,45},'Blocks'}]},
              [{clause,
                {375,25},
                [{atom,{375,25},false}],
                [],
                [{debug_line,375,155},
                 {call,
                  {375,34},
                  {remote,
                   {375,34},
                   {atom,{375,34},erlang},
                   {atom,{375,34},throw}},
                  [{block,0,
                    [{tuple,
                      {375,40},
                      [{atom,{375,41},unknown_block},
                       {var,{375,56},'Label'},
                       {var,{375,63},'I'}]}]}]}]},
               {clause,
                {376,25},
                [{atom,{376,25},true}],
                [],
                [{debug_line,376,156},{atom,{376,33},ok}]}]}]}]}}]},
      {var,{378,18},'Labels'}]}]}]}.
{attribute,
    {380,2},
    spec,
    {{vvars_save_branch,3},
     [{type,
          {380,24},
          bounded_fun,
          [{type,
               {380,24},
               'fun',
               [{type,
                    {380,24},
                    product,
                    [{var,{380,25},'From'},
                     {var,{380,31},'To'},
                     {var,{380,35},'State'}]},
                {type,{380,45},record,[{atom,{380,46},vvars}]}]},
           [{type,
                {381,7},
                constraint,
                [{atom,{381,7},is_subtype},
                 [{var,{381,7},'From'},
                  {remote_type,
                      {381,15},
                      [{atom,{381,15},beam_ssa},{atom,{381,24},label},[]]}]]},
            {type,
                {382,7},
                constraint,
                [{atom,{382,7},is_subtype},
                 [{var,{382,7},'To'},
                  {remote_type,
                      {382,13},
                      [{atom,{382,13},beam_ssa},{atom,{382,22},label},[]]}]]},
            {type,
                {383,7},
                constraint,
                [{atom,{383,7},is_subtype},
                 [{var,{383,7},'State'},
                  {type,{383,16},record,[{atom,{383,17},vvars}]}]]}]]}]}}.
{function,
 {384,1},
 vvars_save_branch,3,
 [{clause,
   {384,1},
   [{var,{384,1},'_'},{var,{384,1},'_'},{var,{384,1},'_'}],
   [[{call,
      {384,1},
      {remote,{384,1},{atom,{384,1},fake},{atom,{384,1},is_beam_bif_info}},
      []}]],
   [{debug_line,384,157},{atom,{384,1},ignore}]},
  {clause,
   {384,1},
   [{var,{384,19},'From'},{var,{384,25},'To'},{var,{384,29},'State'}],
   [],
   [{debug_line,385,158},
    {match,
     {385,5},
     {var,{385,5},'Vars'},
     {'case',
      {385,12},
      {var,{385,12},'State'},
      [{clause,
        [{generated,true},{location,{385,12}}],
        [{tuple,
          [{generated,true},{location,{385,12}}],
          [{atom,{385,12},vvars},
           {var,{385,12},'_'},
           {var,{385,12},'_'},
           {var,{385,12},rec7},
           {var,{385,12},'_'}]}],
        [],
        [{var,{385,12},rec7}]},
       {clause,
        [{generated,true},{location,{385,12}}],
        [{var,{385,12},rec7}],
        [],
        [{call,
          [{generated,true},{location,{385,12}}],
          {remote,
           [{generated,true},{location,{385,12}}],
           {atom,[{generated,true},{location,{385,12}}],erlang},
           {atom,[{generated,true},{location,{385,12}}],error}},
          [{tuple,
            [{generated,true},{location,{385,12}}],
            [{atom,[{generated,true},{location,{385,12}}],badrecord},
             {var,{385,12},rec7}]}]}]}]}},
    {debug_line,386,159},
    {match,
     {386,5},
     {var,{386,5},'TryTags'},
     {'case',
      {386,15},
      {var,{386,15},'State'},
      [{clause,
        [{generated,true},{location,{386,15}}],
        [{tuple,
          [{generated,true},{location,{386,15}}],
          [{atom,{386,15},vvars},
           {var,{386,15},'_'},
           {var,{386,15},'_'},
           {var,{386,15},'_'},
           {var,{386,15},rec8}]}],
        [],
        [{var,{386,15},rec8}]},
       {clause,
        [{generated,true},{location,{386,15}}],
        [{var,{386,15},rec8}],
        [],
        [{call,
          [{generated,true},{location,{386,15}}],
          {remote,
           [{generated,true},{location,{386,15}}],
           {atom,[{generated,true},{location,{386,15}}],erlang},
           {atom,[{generated,true},{location,{386,15}}],error}},
          [{tuple,
            [{generated,true},{location,{386,15}}],
            [{atom,[{generated,true},{location,{386,15}}],badrecord},
             {var,{386,15},rec8}]}]}]}]}},
    {debug_line,387,160},
    {match,
     {387,5},
     {var,{387,5},'Branches0'},
     {'case',
      {387,17},
      {var,{387,17},'State'},
      [{clause,
        [{generated,true},{location,{387,17}}],
        [{tuple,
          [{generated,true},{location,{387,17}}],
          [{atom,{387,17},vvars},
           {var,{387,17},'_'},
           {var,{387,17},rec9},
           {var,{387,17},'_'},
           {var,{387,17},'_'}]}],
        [],
        [{var,{387,17},rec9}]},
       {clause,
        [{generated,true},{location,{387,17}}],
        [{var,{387,17},rec9}],
        [],
        [{call,
          [{generated,true},{location,{387,17}}],
          {remote,
           [{generated,true},{location,{387,17}}],
           {atom,[{generated,true},{location,{387,17}}],erlang},
           {atom,[{generated,true},{location,{387,17}}],error}},
          [{tuple,
            [{generated,true},{location,{387,17}}],
            [{atom,[{generated,true},{location,{387,17}}],badrecord},
             {var,{387,17},rec9}]}]}]}]}},
    {debug_line,388,161},
    {'case',
     {388,5},
     {var,{388,10},'Branches0'},
     [{clause,
       {389,9},
       [{map,
         {389,9},
         [{map_field_exact,
           {389,15},
           {var,{389,12},'To'},
           {tuple,
            {389,18},
            [{var,{389,19},'LblVars'},{var,{389,28},'LblTryTags'}]}}]}],
       [],
       [{debug_line,390,162},
        {match,
         {390,13},
         {var,{390,13},'MergedVars'},
         {call,
          {390,26},
          {atom,{390,26},vvars_merge_variables},
          [{var,{390,48},'Vars'},{var,{390,54},'LblVars'}]}},
        {debug_line,391,163},
        {match,
         {391,13},
         {var,{391,13},'MergedTags'},
         {call,
          {391,26},
          {atom,{391,26},vvars_merge_try_tags},
          [{var,{391,47},'TryTags'},{var,{391,56},'LblTryTags'}]}},
        {debug_line,393,164},
        {match,
         {393,13},
         {var,{393,13},'Merged'},
         {tuple,
          {393,22},
          [{var,{393,23},'MergedVars'},{var,{393,35},'MergedTags'}]}},
        {debug_line,394,165},
        {match,
         {394,13},
         {var,{394,13},'Branch'},
         {tuple,{394,22},[{var,{394,23},'Vars'},{var,{394,29},'TryTags'}]}},
        {debug_line,396,166},
        {match,
         {396,13},
         {var,{396,13},'Branches'},
         {map,
          {396,33},
          {var,{396,24},'Branches0'},
          [{map_field_assoc,
            {396,39},
            {var,{396,36},'To'},
            {var,{396,42},'Merged'}},
           {map_field_assoc,
            {396,61},
            {tuple,{396,50},[{var,{396,51},'From'},{var,{396,57},'To'}]},
            {var,{396,64},'Branch'}}]}},
        {debug_line,397,167},
        {block,
         {397,13},
         [{match,{397,13},{var,{397,13},rec10},{var,{397,13},'State'}},
          {'case',
           {397,27},
           {var,{397,13},rec10},
           [{clause,
             {397,27},
             [{tuple,
               {397,27},
               [{atom,{397,27},vvars},
                {var,{397,27},'_'},
                {var,{397,27},'_'},
                {var,{397,27},'_'},
                {var,{397,27},'_'}]}],
             [],
             [{call,
               {397,27},
               {remote,
                {397,27},
                {atom,{397,27},erlang},
                {atom,{397,27},setelement}},
               [{integer,{397,27},3},
                {var,{397,13},rec10},
                {var,{397,38},'Branches'}]}]},
            {clause,
             [{generated,true},{location,{397,27}}],
             [{var,[{generated,true},{location,{397,27}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{397,27}}],
               {remote,
                [{generated,true},{location,{397,27}}],
                {atom,[{generated,true},{location,{397,27}}],erlang},
                {atom,[{generated,true},{location,{397,27}}],error}},
               [{tuple,
                 [{generated,true},{location,{397,27}}],
                 [{atom,[{generated,true},{location,{397,27}}],badrecord},
                  {var,{397,13},rec10}]}]}]}]}]}]},
      {clause,
       {398,9},
       [{var,{398,9},'_'}],
       [],
       [{debug_line,399,168},
        {match,
         {399,13},
         {var,{399,13},'Branch'},
         {tuple,{399,22},[{var,{399,23},'Vars'},{var,{399,29},'TryTags'}]}},
        {debug_line,400,169},
        {match,
         {400,13},
         {var,{400,13},'Branches'},
         {map,
          {400,33},
          {var,{400,24},'Branches0'},
          [{map_field_assoc,
            {400,39},
            {var,{400,36},'To'},
            {var,{400,42},'Branch'}},
           {map_field_assoc,
            {400,61},
            {tuple,{400,50},[{var,{400,51},'From'},{var,{400,57},'To'}]},
            {var,{400,64},'Branch'}}]}},
        {debug_line,401,170},
        {block,
         {401,13},
         [{match,{401,13},{var,{401,13},rec11},{var,{401,13},'State'}},
          {'case',
           {401,27},
           {var,{401,13},rec11},
           [{clause,
             {401,27},
             [{tuple,
               {401,27},
               [{atom,{401,27},vvars},
                {var,{401,27},'_'},
                {var,{401,27},'_'},
                {var,{401,27},'_'},
                {var,{401,27},'_'}]}],
             [],
             [{call,
               {401,27},
               {remote,
                {401,27},
                {atom,{401,27},erlang},
                {atom,{401,27},setelement}},
               [{integer,{401,27},3},
                {var,{401,13},rec11},
                {var,{401,38},'Branches'}]}]},
            {clause,
             [{generated,true},{location,{401,27}}],
             [{var,[{generated,true},{location,{401,27}}],'_'}],
             [],
             [{call,
               [{generated,true},{location,{401,27}}],
               {remote,
                [{generated,true},{location,{401,27}}],
                {atom,[{generated,true},{location,{401,27}}],erlang},
                {atom,[{generated,true},{location,{401,27}}],error}},
               [{tuple,
                 [{generated,true},{location,{401,27}}],
                 [{atom,[{generated,true},{location,{401,27}}],badrecord},
                  {var,{401,13},rec11}]}]}]}]}]}]}]}]}]}.
{attribute,{404,2},
           spec,
           {{vvars_merge_variables,2},
            [{type,{404,28},
                   bounded_fun,
                   [{type,{404,28},
                          'fun',
                          [{type,{404,28},
                                 product,
                                 [{var,{404,29},'New'},
                                  {var,{404,34},'Existing'}]},
                           {user_type,{404,47},variables,[]}]},
                    [{type,{405,7},
                           constraint,
                           [{atom,{405,7},is_subtype},
                            [{var,{405,7},'New'},
                             {user_type,{405,14},variables,[]}]]},
                     {type,{406,7},
                           constraint,
                           [{atom,{406,7},is_subtype},
                            [{var,{406,7},'Existing'},
                             {user_type,{406,19},variables,[]}]]}]]}]}}.
{function,{407,1},
          vvars_merge_variables,2,
          [{clause,{407,1},
                   [{var,{407,1},'_'},{var,{407,1},'_'}],
                   [[{call,{407,1},
                           {remote,{407,1},
                                   {atom,{407,1},fake},
                                   {atom,{407,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,407,171},{atom,{407,1},ignore}]},
           {clause,{407,1},
                   [{var,{407,23},'New'},{var,{407,28},'Existing'}],
                   [],
                   [{debug_line,408,172},
                    {call,{408,5},
                          {remote,{408,12},
                                  {atom,{408,5},gb_sets},
                                  {atom,{408,13},intersection}},
                          [{var,{408,26},'New'},
                           {var,{408,31},'Existing'}]}]}]}.
{attribute,{410,2},
           spec,
           {{vvars_merge_try_tags,2},
            [{type,{410,27},
                   bounded_fun,
                   [{type,{410,27},
                          'fun',
                          [{type,{410,27},
                                 product,
                                 [{var,{410,28},'New'},
                                  {var,{410,33},'Existing'}]},
                           {user_type,{410,46},try_tags,[]}]},
                    [{type,{411,7},
                           constraint,
                           [{atom,{411,7},is_subtype},
                            [{var,{411,7},'New'},
                             {user_type,{411,14},try_tags,[]}]]},
                     {type,{412,7},
                           constraint,
                           [{atom,{412,7},is_subtype},
                            [{var,{412,7},'Existing'},
                             {user_type,{412,19},try_tags,[]}]]}]]}]}}.
{function,{413,1},
          vvars_merge_try_tags,2,
          [{clause,{413,1},
                   [{var,{413,1},'_'},{var,{413,1},'_'}],
                   [[{call,{413,1},
                           {remote,{413,1},
                                   {atom,{413,1},fake},
                                   {atom,{413,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,413,173},{atom,{413,1},ignore}]},
           {clause,{413,1},
                   [{var,{413,22},'New'},{var,{413,27},'Existing'}],
                   [],
                   [{debug_line,414,174},
                    {call,{414,5},
                          {remote,{414,12},
                                  {atom,{414,5},gb_sets},
                                  {atom,{414,13},union}},
                          [{var,{414,19},'New'},
                           {var,{414,24},'Existing'}]}]}]}.
{attribute,{416,2},
           spec,
           {{vvars_save_var,2},
            [{type,{416,21},
                   bounded_fun,
                   [{type,{416,21},
                          'fun',
                          [{type,{416,21},
                                 product,
                                 [{var,{416,22},'Var'},
                                  {var,{416,27},'State'}]},
                           {type,{416,37},record,[{atom,{416,38},vvars}]}]},
                    [{type,{417,7},
                           constraint,
                           [{atom,{417,7},is_subtype},
                            [{var,{417,7},'Var'},
                             {type,{417,14},record,[{atom,{417,15},b_var}]}]]},
                     {type,{418,7},
                           constraint,
                           [{atom,{418,7},is_subtype},
                            [{var,{418,7},'State'},
                             {type,{418,16},
                                   record,
                                   [{atom,{418,17},vvars}]}]]}]]}]}}.
{function,
 {419,1},
 vvars_save_var,2,
 [{clause,
   {419,1},
   [{var,{419,1},'_'},{var,{419,1},'_'}],
   [[{call,
      {419,1},
      {remote,{419,1},{atom,{419,1},fake},{atom,{419,1},is_beam_bif_info}},
      []}]],
   [{debug_line,419,175},{atom,{419,1},ignore}]},
  {clause,
   {419,1},
   [{var,{419,16},'Var'},{var,{419,21},'State0'}],
   [],
   [{debug_line,421,176},
    {match,
     {421,5},
     {var,{421,5},'Vars'},
     {call,
      {421,12},
      {remote,{421,19},{atom,{421,12},gb_sets},{atom,{421,20},insert}},
      [{var,{421,27},'Var'},
       {block,0,
        [{'case',
          {421,32},
          {var,{421,32},'State0'},
          [{clause,
            [{generated,true},{location,{421,32}}],
            [{tuple,
              [{generated,true},{location,{421,32}}],
              [{atom,{421,32},vvars},
               {var,{421,32},'_'},
               {var,{421,32},'_'},
               {var,{421,32},rec12},
               {var,{421,32},'_'}]}],
            [],
            [{var,{421,32},rec12}]},
           {clause,
            [{generated,true},{location,{421,32}}],
            [{var,{421,32},rec12}],
            [],
            [{call,
              [{generated,true},{location,{421,32}}],
              {remote,
               [{generated,true},{location,{421,32}}],
               {atom,[{generated,true},{location,{421,32}}],erlang},
               {atom,[{generated,true},{location,{421,32}}],error}},
              [{tuple,
                [{generated,true},{location,{421,32}}],
                [{atom,[{generated,true},{location,{421,32}}],badrecord},
                 {var,{421,32},rec12}]}]}]}]}]}]}},
    {debug_line,422,177},
    {block,
     {422,5},
     [{match,{422,5},{var,{422,5},rec13},{var,{422,5},'State0'}},
      {'case',
       {422,19},
       {var,{422,5},rec13},
       [{clause,
         {422,19},
         [{tuple,
           {422,19},
           [{atom,{422,19},vvars},
            {var,{422,19},'_'},
            {var,{422,19},'_'},
            {var,{422,19},'_'},
            {var,{422,19},'_'}]}],
         [],
         [{call,
           {422,19},
           {remote,{422,19},{atom,{422,19},erlang},{atom,{422,19},setelement}},
           [{integer,{422,19},4},{var,{422,5},rec13},{var,{422,31},'Vars'}]}]},
        {clause,
         [{generated,true},{location,{422,19}}],
         [{var,[{generated,true},{location,{422,19}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{422,19}}],
           {remote,
            [{generated,true},{location,{422,19}}],
            {atom,[{generated,true},{location,{422,19}}],erlang},
            {atom,[{generated,true},{location,{422,19}}],error}},
           [{tuple,
             [{generated,true},{location,{422,19}}],
             [{atom,[{generated,true},{location,{422,19}}],badrecord},
              {var,{422,5},rec13}]}]}]}]}]}]}]}.
{attribute,{424,2},
           spec,
           {{vvars_save_try_tag,2},
            [{type,{424,25},
                   bounded_fun,
                   [{type,{424,25},
                          'fun',
                          [{type,{424,25},
                                 product,
                                 [{var,{424,26},'Var'},
                                  {var,{424,31},'State'}]},
                           {type,{424,41},record,[{atom,{424,42},vvars}]}]},
                    [{type,{425,7},
                           constraint,
                           [{atom,{425,7},is_subtype},
                            [{var,{425,7},'Var'},
                             {type,{425,14},record,[{atom,{425,15},b_var}]}]]},
                     {type,{426,7},
                           constraint,
                           [{atom,{426,7},is_subtype},
                            [{var,{426,7},'State'},
                             {type,{426,16},
                                   record,
                                   [{atom,{426,17},vvars}]}]]}]]}]}}.
{function,
 {427,1},
 vvars_save_try_tag,2,
 [{clause,
   {427,1},
   [{var,{427,1},'_'},{var,{427,1},'_'}],
   [[{call,
      {427,1},
      {remote,{427,1},{atom,{427,1},fake},{atom,{427,1},is_beam_bif_info}},
      []}]],
   [{debug_line,427,178},{atom,{427,1},ignore}]},
  {clause,
   {427,1},
   [{var,{427,20},'Var'},{var,{427,25},'State0'}],
   [],
   [{debug_line,428,179},
    {match,
     {428,5},
     {var,{428,5},'Vars'},
     {call,
      {428,12},
      {remote,{428,19},{atom,{428,12},gb_sets},{atom,{428,20},insert}},
      [{var,{428,27},'Var'},
       {block,0,
        [{'case',
          {428,32},
          {var,{428,32},'State0'},
          [{clause,
            [{generated,true},{location,{428,32}}],
            [{tuple,
              [{generated,true},{location,{428,32}}],
              [{atom,{428,32},vvars},
               {var,{428,32},'_'},
               {var,{428,32},'_'},
               {var,{428,32},rec14},
               {var,{428,32},'_'}]}],
            [],
            [{var,{428,32},rec14}]},
           {clause,
            [{generated,true},{location,{428,32}}],
            [{var,{428,32},rec14}],
            [],
            [{call,
              [{generated,true},{location,{428,32}}],
              {remote,
               [{generated,true},{location,{428,32}}],
               {atom,[{generated,true},{location,{428,32}}],erlang},
               {atom,[{generated,true},{location,{428,32}}],error}},
              [{tuple,
                [{generated,true},{location,{428,32}}],
                [{atom,[{generated,true},{location,{428,32}}],badrecord},
                 {var,{428,32},rec14}]}]}]}]}]}]}},
    {debug_line,429,180},
    {match,
     {429,5},
     {var,{429,5},'TryTags'},
     {call,
      {429,15},
      {remote,{429,22},{atom,{429,15},gb_sets},{atom,{429,23},insert}},
      [{var,{429,30},'Var'},
       {block,0,
        [{'case',
          {429,35},
          {var,{429,35},'State0'},
          [{clause,
            [{generated,true},{location,{429,35}}],
            [{tuple,
              [{generated,true},{location,{429,35}}],
              [{atom,{429,35},vvars},
               {var,{429,35},'_'},
               {var,{429,35},'_'},
               {var,{429,35},'_'},
               {var,{429,35},rec15}]}],
            [],
            [{var,{429,35},rec15}]},
           {clause,
            [{generated,true},{location,{429,35}}],
            [{var,{429,35},rec15}],
            [],
            [{call,
              [{generated,true},{location,{429,35}}],
              {remote,
               [{generated,true},{location,{429,35}}],
               {atom,[{generated,true},{location,{429,35}}],erlang},
               {atom,[{generated,true},{location,{429,35}}],error}},
              [{tuple,
                [{generated,true},{location,{429,35}}],
                [{atom,[{generated,true},{location,{429,35}}],badrecord},
                 {var,{429,35},rec15}]}]}]}]}]}]}},
    {debug_line,430,181},
    {block,
     {430,5},
     [{match,{430,5},{var,{430,5},rec16},{var,{430,5},'State0'}},
      {'case',
       {430,19},
       {var,{430,5},rec16},
       [{clause,
         {430,19},
         [{tuple,
           {430,19},
           [{atom,{430,19},vvars},
            {var,{430,19},'_'},
            {var,{430,19},'_'},
            {var,{430,19},'_'},
            {var,{430,19},'_'}]}],
         [],
         [{call,
           {430,19},
           {remote,{430,19},{atom,{430,19},erlang},{atom,{430,19},setelement}},
           [{integer,{430,19},4},
            {call,
             {430,37},
             {remote,
              {430,37},
              {atom,{430,37},erlang},
              {atom,{430,37},setelement}},
             [{integer,{430,37},5},
              {var,{430,5},rec16},
              {var,{430,48},'TryTags'}]},
            {var,{430,31},'Vars'}]}]},
        {clause,
         [{generated,true},{location,{430,19}}],
         [{var,[{generated,true},{location,{430,19}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{430,19}}],
           {remote,
            [{generated,true},{location,{430,19}}],
            {atom,[{generated,true},{location,{430,19}}],erlang},
            {atom,[{generated,true},{location,{430,19}}],error}},
           [{tuple,
             [{generated,true},{location,{430,19}}],
             [{atom,[{generated,true},{location,{430,19}}],badrecord},
              {var,{430,5},rec16}]}]}]}]}]}]}]}.
{attribute,{432,2},
           spec,
           {{vvars_kill_try_tag,2},
            [{type,{432,25},
                   bounded_fun,
                   [{type,{432,25},
                          'fun',
                          [{type,{432,25},
                                 product,
                                 [{var,{432,26},'Var'},
                                  {var,{432,31},'State'}]},
                           {type,{432,41},record,[{atom,{432,42},vvars}]}]},
                    [{type,{433,7},
                           constraint,
                           [{atom,{433,7},is_subtype},
                            [{var,{433,7},'Var'},
                             {type,{433,14},record,[{atom,{433,15},b_var}]}]]},
                     {type,{434,7},
                           constraint,
                           [{atom,{434,7},is_subtype},
                            [{var,{434,7},'State'},
                             {type,{434,16},
                                   record,
                                   [{atom,{434,17},vvars}]}]]}]]}]}}.
{function,
 {435,1},
 vvars_kill_try_tag,2,
 [{clause,
   {435,1},
   [{var,{435,1},'_'},{var,{435,1},'_'}],
   [[{call,
      {435,1},
      {remote,{435,1},{atom,{435,1},fake},{atom,{435,1},is_beam_bif_info}},
      []}]],
   [{debug_line,435,182},{atom,{435,1},ignore}]},
  {clause,
   {435,1},
   [{var,{435,20},'Var'},{var,{435,25},'State0'}],
   [],
   [{debug_line,436,183},
    {match,
     {436,5},
     {var,{436,5},'TryTags'},
     {call,
      {436,15},
      {remote,{436,22},{atom,{436,15},gb_sets},{atom,{436,23},delete}},
      [{var,{436,30},'Var'},
       {block,0,
        [{'case',
          {436,35},
          {var,{436,35},'State0'},
          [{clause,
            [{generated,true},{location,{436,35}}],
            [{tuple,
              [{generated,true},{location,{436,35}}],
              [{atom,{436,35},vvars},
               {var,{436,35},'_'},
               {var,{436,35},'_'},
               {var,{436,35},'_'},
               {var,{436,35},rec17}]}],
            [],
            [{var,{436,35},rec17}]},
           {clause,
            [{generated,true},{location,{436,35}}],
            [{var,{436,35},rec17}],
            [],
            [{call,
              [{generated,true},{location,{436,35}}],
              {remote,
               [{generated,true},{location,{436,35}}],
               {atom,[{generated,true},{location,{436,35}}],erlang},
               {atom,[{generated,true},{location,{436,35}}],error}},
              [{tuple,
                [{generated,true},{location,{436,35}}],
                [{atom,[{generated,true},{location,{436,35}}],badrecord},
                 {var,{436,35},rec17}]}]}]}]}]}]}},
    {debug_line,437,184},
    {block,
     {437,5},
     [{match,{437,5},{var,{437,5},rec18},{var,{437,5},'State0'}},
      {'case',
       {437,19},
       {var,{437,5},rec18},
       [{clause,
         {437,19},
         [{tuple,
           {437,19},
           [{atom,{437,19},vvars},
            {var,{437,19},'_'},
            {var,{437,19},'_'},
            {var,{437,19},'_'},
            {var,{437,19},'_'}]}],
         [],
         [{call,
           {437,19},
           {remote,{437,19},{atom,{437,19},erlang},{atom,{437,19},setelement}},
           [{integer,{437,19},5},
            {var,{437,5},rec18},
            {var,{437,30},'TryTags'}]}]},
        {clause,
         [{generated,true},{location,{437,19}}],
         [{var,[{generated,true},{location,{437,19}}],'_'}],
         [],
         [{call,
           [{generated,true},{location,{437,19}}],
           {remote,
            [{generated,true},{location,{437,19}}],
            {atom,[{generated,true},{location,{437,19}}],erlang},
            {atom,[{generated,true},{location,{437,19}}],error}},
           [{tuple,
             [{generated,true},{location,{437,19}}],
             [{atom,[{generated,true},{location,{437,19}}],badrecord},
              {var,{437,5},rec18}]}]}]}]}]}]}]}.
{function,
    {439,1},
    check_anno,1,
    [{clause,
         {439,1},
         [{var,{439,1},'_'}],
         [[{call,
               {439,1},
               {remote,
                   {439,1},
                   {atom,{439,1},fake},
                   {atom,{439,1},is_beam_bif_info}},
               []}]],
         [{debug_line,439,185},{atom,{439,1},ignore}]},
     {clause,
         {439,1},
         [{map,{439,12},[]}],
         [],
         [{debug_line,439,186},{atom,{439,20},ok}]},
     {clause,
         {440,1},
         [{var,{440,12},'BadAnno'}],
         [],
         [{debug_line,440,187},
          {call,
              {440,24},
              {remote,{440,24},{atom,{440,24},erlang},{atom,{440,24},throw}},
              [{block,0,
                   [{tuple,
                        {440,30},
                        [{atom,{440,31},bad_annotation},
                         {var,{440,46},'BadAnno'}]}]}]}]}]}.
{function,
    {442,1},
    format_error_1,1,
    [{clause,
         {442,1},
         [{var,{442,1},'_'}],
         [[{call,
               {442,1},
               {remote,
                   {442,1},
                   {atom,{442,1},fake},
                   {atom,{442,1},is_beam_bif_info}},
               []}]],
         [{debug_line,442,188},{atom,{442,1},ignore}]},
     {clause,
         {442,1},
         [{tuple,
              {442,16},
              [{atom,{442,17},redefined_variable},
               {var,{442,37},'Name'},
               {var,{442,43},'Old'},
               {var,{442,48},'I'}]}],
         [],
         [{debug_line,443,189},
          {call,
              {443,5},
              {remote,{443,11},{atom,{443,5},io_lib},{atom,{443,12},format}},
              [{block,0,
                   [{string,{443,19},"Variable ~ts (~ts) redefined by ~ts"}]},
               {block,0,
                   [{debug_line,444,190},
                    {cons,
                        {444,19},
                        {call,
                            {444,20},
                            {atom,{444,20},format_var},
                            [{var,{444,31},'Name'}]},
                        {cons,
                            {444,38},
                            {call,
                                {444,38},
                                {atom,{444,38},format_instr},
                                [{var,{444,51},'Old'}]},
                            {cons,
                                {444,57},
                                {call,
                                    {444,57},
                                    {atom,{444,57},format_instr},
                                    [{var,{444,70},'I'}]},
                                {nil,{444,72}}}}}]}]}]},
     {clause,
         {445,1},
         [{tuple,
              {445,16},
              [{atom,{445,17},missing_phi_paths},
               {var,{445,36},'Paths'},
               {var,{445,43},'I'}]}],
         [],
         [{debug_line,446,191},
          {call,
              {446,5},
              {remote,{446,11},{atom,{446,5},io_lib},{atom,{446,12},format}},
              [{block,0,
                   [{string,
                        {446,19},
                        "Phi node ~ts doesn't define a value for these branches: ~w"}]},
               {block,0,
                   [{debug_line,448,192},
                    {cons,
                        {448,19},
                        {call,
                            {448,20},
                            {atom,{448,20},format_instr},
                            [{var,{448,33},'I'}]},
                        {cons,
                            {448,37},
                            {var,{448,37},'Paths'},
                            {nil,{448,42}}}}]}]}]},
     {clause,
         {449,1},
         [{tuple,
              {449,16},
              [{atom,{449,17},garbage_phi_paths},
               {var,{449,36},'Paths'},
               {var,{449,43},'I'}]}],
         [],
         [{debug_line,450,193},
          {call,
              {450,5},
              {remote,{450,11},{atom,{450,5},io_lib},{atom,{450,12},format}},
              [{block,0,
                   [{string,
                        {450,19},
                        "Phi node ~ts defines a value for these unreachable or non-existent branches: ~w"}]},
               {block,0,
                   [{debug_line,452,194},
                    {cons,
                        {452,19},
                        {call,
                            {452,20},
                            {atom,{452,20},format_instr},
                            [{var,{452,33},'I'}]},
                        {cons,
                            {452,37},
                            {var,{452,37},'Paths'},
                            {nil,{452,42}}}}]}]}]},
     {clause,
         {453,1},
         [{tuple,
              {453,16},
              [{atom,{453,17},unknown_phi_variable},
               {var,{453,39},'Name'},
               {tuple,{453,45},[{var,{453,46},'From'},{var,{453,52},'_To'}]},
               {var,{453,58},'I'}]}],
         [],
         [{debug_line,454,195},
          {call,
              {454,5},
              {remote,{454,11},{atom,{454,5},io_lib},{atom,{454,12},format}},
              [{block,0,
                   [{string,
                        {454,19},
                        "Variable ~ts used in phi node ~ts is undefined on branch ~w"}]},
               {block,0,
                   [{debug_line,456,196},
                    {cons,
                        {456,19},
                        {call,
                            {456,20},
                            {atom,{456,20},format_var},
                            [{var,{456,31},'Name'}]},
                        {cons,
                            {456,38},
                            {call,
                                {456,38},
                                {atom,{456,38},format_instr},
                                [{var,{456,51},'I'}]},
                            {cons,
                                {456,55},
                                {var,{456,55},'From'},
                                {nil,{456,59}}}}}]}]}]},
     {clause,
         {457,1},
         [{tuple,
              {457,16},
              [{atom,{457,17},unknown_block},
               {var,{457,32},'Label'},
               {var,{457,39},'I'}]}],
         [],
         [{debug_line,458,197},
          {call,
              {458,5},
              {remote,{458,11},{atom,{458,5},io_lib},{atom,{458,12},format}},
              [{block,0,
                   [{string,{458,19},"Unknown block ~p referenced in ~ts"}]},
               {block,0,
                   [{debug_line,459,198},
                    {cons,
                        {459,19},
                        {var,{459,20},'Label'},
                        {cons,
                            {459,27},
                            {var,{459,27},'I'},
                            {nil,{459,28}}}}]}]}]},
     {clause,
         {460,1},
         [{tuple,
              {460,16},
              [{atom,{460,17},unknown_variable},
               {var,{460,35},'Name'},
               {var,{460,41},'I'}]}],
         [],
         [{debug_line,461,199},
          {call,
              {461,5},
              {remote,{461,11},{atom,{461,5},io_lib},{atom,{461,12},format}},
              [{block,0,
                   [{string,{461,19},"Unbound variable ~ts used in ~ts"}]},
               {block,0,
                   [{debug_line,462,200},
                    {cons,
                        {462,19},
                        {call,
                            {462,20},
                            {atom,{462,20},format_var},
                            [{var,{462,31},'Name'}]},
                        {cons,
                            {462,38},
                            {call,
                                {462,38},
                                {atom,{462,38},format_instr},
                                [{var,{462,51},'I'}]},
                            {nil,{462,53}}}}]}]}]},
     {clause,
         {463,1},
         [{tuple,
              {463,16},
              [{atom,{463,17},phi_inside_block},
               {var,{463,35},'Name'},
               {var,{463,41},'Id'}]}],
         [],
         [{debug_line,464,201},
          {call,
              {464,5},
              {remote,{464,11},{atom,{464,5},io_lib},{atom,{464,12},format}},
              [{block,0,
                   [{string,
                        {464,19},
                        "Phi node defining ~ts is not at start of block ~p"}]},
               {block,0,
                   [{debug_line,465,202},
                    {cons,
                        {465,19},
                        {call,
                            {465,20},
                            {atom,{465,20},format_var},
                            [{var,{465,31},'Name'}]},
                        {cons,
                            {465,38},
                            {var,{465,38},'Id'},
                            {nil,{465,40}}}}]}]}]},
     {clause,
         {466,1},
         [{tuple,
              {466,16},
              [{atom,{466,17},undefined_label_in_phi},
               {var,{466,41},'Label'},
               {var,{466,48},'I'}]}],
         [],
         [{debug_line,467,203},
          {call,
              {467,5},
              {remote,{467,11},{atom,{467,5},io_lib},{atom,{467,12},format}},
              [{block,0,
                   [{string,
                        {467,19},
                        "Unknown block label ~p in phi node ~ts"}]},
               {block,0,
                   [{debug_line,468,204},
                    {cons,
                        {468,19},
                        {var,{468,20},'Label'},
                        {cons,
                            {468,27},
                            {call,
                                {468,27},
                                {atom,{468,27},format_instr},
                                [{var,{468,40},'I'}]},
                            {nil,{468,42}}}}]}]}]},
     {clause,
         {469,1},
         [{tuple,
              {469,16},
              [{atom,{469,17},succeeded_not_preceded},{var,{469,41},'I'}]}],
         [],
         [{debug_line,470,205},
          {call,
              {470,5},
              {remote,{470,11},{atom,{470,5},io_lib},{atom,{470,12},format}},
              [{block,0,
                   [{string,
                        {470,19},
                        "~ts does not reference the preceding instruction"}]},
               {block,0,
                   [{debug_line,471,206},
                    {cons,
                        {471,19},
                        {call,
                            {471,20},
                            {atom,{471,20},format_instr},
                            [{var,{471,33},'I'}]},
                        {nil,{471,35}}}]}]}]},
     {clause,
         {472,1},
         [{tuple,
              {472,16},
              [{atom,{472,17},succeeded_not_last},{var,{472,37},'I'}]}],
         [],
         [{debug_line,473,207},
          {call,
              {473,5},
              {remote,{473,11},{atom,{473,5},io_lib},{atom,{473,12},format}},
              [{block,0,
                   [{string,
                        {473,19},
                        "~ts is not the last instruction in its block"}]},
               {block,0,
                   [{debug_line,474,208},
                    {cons,
                        {474,19},
                        {call,
                            {474,20},
                            {atom,{474,20},format_instr},
                            [{var,{474,33},'I'}]},
                        {nil,{474,35}}}]}]}]},
     {clause,
         {475,1},
         [{tuple,
              {475,16},
              [{atom,{475,17},not_normalized},{var,{475,33},'I'}]}],
         [],
         [{debug_line,476,209},
          {call,
              {476,5},
              {remote,{476,11},{atom,{476,5},io_lib},{atom,{476,12},format}},
              [{block,0,
                   [{string,
                        {476,19},
                        "~ts is not normalized by beam_ssa:normalize/1"}]},
               {block,0,
                   [{debug_line,477,210},
                    {cons,
                        {477,19},
                        {call,
                            {477,20},
                            {atom,{477,20},format_instr},
                            [{var,{477,33},'I'}]},
                        {nil,{477,35}}}]}]}]},
     {clause,
         {478,1},
         [{tuple,
              {478,16},
              [{atom,{478,17},succeeded_not_followed_by_two_way_br},
               {var,{478,55},'I'}]}],
         [],
         [{debug_line,479,211},
          {call,
              {479,5},
              {remote,{479,11},{atom,{479,5},io_lib},{atom,{479,12},format}},
              [{block,0,
                   [{string,{479,19},"~ts not followed by a two-way branch"}]},
               {block,0,
                   [{debug_line,480,212},
                    {cons,
                        {480,19},
                        {call,
                            {480,20},
                            {atom,{480,20},format_instr},
                            [{var,{480,33},'I'}]},
                        {nil,{480,35}}}]}]}]},
     {clause,
         {481,1},
         [{tuple,
              {481,16},
              [{atom,{481,17},active_try_tags_on_return},
               {var,{481,44},'TryTags0'},
               {var,{481,54},'I'}]}],
         [],
         [{debug_line,482,213},
          {match,
              {482,5},
              {var,{482,5},'TryTags'},
              {call,
                  {482,15},
                  {atom,{482,15},format_vars},
                  [{block,0,
                       [{call,
                            {482,27},
                            {remote,
                                {482,34},
                                {atom,{482,27},gb_sets},
                                {atom,{482,35},to_list}},
                            [{var,{482,43},'TryTags0'}]}]}]}},
          {debug_line,483,214},
          {call,
              {483,5},
              {remote,{483,11},{atom,{483,5},io_lib},{atom,{483,12},format}},
              [{block,0,
                   [{string,{483,19},"Try tags ~ts are still active on ~ts"}]},
               {block,0,
                   [{debug_line,484,215},
                    {cons,
                        {484,19},
                        {var,{484,20},'TryTags'},
                        {cons,
                            {484,29},
                            {call,
                                {484,29},
                                {atom,{484,29},format_instr},
                                [{var,{484,42},'I'}]},
                            {nil,{484,44}}}}]}]}]},
     {clause,
         {485,1},
         [{tuple,
              {485,16},
              [{atom,{485,17},bad_annotation},{var,{485,33},'BadAnno'}]}],
         [],
         [{debug_line,486,216},
          {call,
              {486,5},
              {remote,{486,11},{atom,{486,5},io_lib},{atom,{486,12},format}},
              [{block,0,[{string,{486,19},"Badly formed annotation: ~p"}]},
               {block,0,
                   [{cons,
                        {486,50},
                        {var,{486,51},'BadAnno'},
                        {nil,{486,58}}}]}]}]}]}.
{eof,{487,1}}.
