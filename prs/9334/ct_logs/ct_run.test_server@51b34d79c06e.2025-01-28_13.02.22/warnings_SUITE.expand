{attribute,{1,1},file,{"warnings_SUITE.erl",1}}.
{attribute,{20,2},module,warnings_SUITE}.
{attribute,{1,1},
           file,
           {[47,98,117,105,108,100,114,111,111,116,47,111,116,112,47,69,114,
             108,97,110,103,32,8709,8868,8478,47,108,105,98,47,99,111,109,109,
             111,110,95,116,101,115,116,45,49,46,50,55,46,54,47,105,110,99,
             108,117,100,101,47,99,116,46,104,114,108],
            1}}.
{attribute,{31,1},file,{"warnings_SUITE.erl",31}}.
{attribute,{35,2},
           export,
           [{all,0},
            {suite,0},
            {groups,0},
            {init_per_suite,1},
            {end_per_suite,1},
            {init_per_group,2},
            {end_per_group,2},
            {init_per_testcase,2},
            {end_per_testcase,2}]}.
{attribute,{39,2},
           export,
           [{pattern,1},
            {pattern2,1},
            {pattern3,1},
            {pattern4,1},
            {guard,1},
            {bad_arith,1},
            {bool_cases,1},
            {bad_apply,1},
            {files,1},
            {effect,1},
            {bin_opt_info,1},
            {bin_construction,1},
            {comprehensions,1},
            {maps,1},
            {maps_bin_opt_info,1},
            {redundant_boolean_clauses,1},
            {underscore,1},
            {no_warnings,1},
            {bit_syntax,1},
            {inlining,1},
            {tuple_calls,1},
            {recv_opt_info,1},
            {opportunistic_warnings,1},
            {eep49,1},
            {inline_list_funcs,1}]}.
{function,{49,1},
          init_per_testcase,2,
          [{clause,{49,1},
                   [{var,{49,1},'_'},{var,{49,1},'_'}],
                   [[{call,{49,1},
                           {remote,{49,1},
                                   {atom,{49,1},fake},
                                   {atom,{49,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,49,1},{atom,{49,1},ignore}]},
           {clause,{49,1},
                   [{var,{49,19},'_Case'},{var,{49,26},'Config'}],
                   [],
                   [{debug_line,50,2},{var,{50,5},'Config'}]}]}.
{function,{52,1},
          end_per_testcase,2,
          [{clause,{52,1},
                   [{var,{52,1},'_'},{var,{52,1},'_'}],
                   [[{call,{52,1},
                           {remote,{52,1},
                                   {atom,{52,1},fake},
                                   {atom,{52,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,52,3},{atom,{52,1},ignore}]},
           {clause,{52,1},
                   [{var,{52,18},'_Case'},{var,{52,25},'_Config'}],
                   [],
                   [{debug_line,53,4},{atom,{53,5},ok}]}]}.
{function,
    {55,1},
    suite,0,
    [{clause,
         {55,1},
         [],
         [[{call,
               {55,1},
               {remote,
                   {55,1},
                   {atom,{55,1},fake},
                   {atom,{55,1},is_beam_bif_info}},
               []}]],
         [{debug_line,55,5},{atom,{55,1},ignore}]},
     {clause,
         {55,1},
         [],[],
         [{debug_line,56,6},
          {cons,
              {56,5},
              {tuple,
                  {56,6},
                  [{atom,{56,7},ct_hooks},
                   {cons,
                       {56,16},
                       {atom,{56,17},ts_install_cth},
                       {nil,{56,31}}}]},
              {cons,
                  {57,6},
                  {tuple,
                      {57,6},
                      [{atom,{57,7},timetrap},
                       {tuple,
                           {57,16},
                           [{atom,{57,17},minutes},{integer,{57,25},2}]}]},
                  {nil,{57,28}}}}]}]}.
{function,{59,1},
          all,0,
          [{clause,{59,1},
                   [],
                   [[{call,{59,1},
                           {remote,{59,1},
                                   {atom,{59,1},fake},
                                   {atom,{59,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,59,7},{atom,{59,1},ignore}]},
           {clause,{59,1},
                   [],[],
                   [{debug_line,60,8},
                    {cons,{60,5},
                          {tuple,{60,6},
                                 [{atom,{60,7},group},{atom,{60,13},p}]},
                          {nil,{60,15}}}]}]}.
{function,
 {62,1},
 groups,0,
 [{clause,
   {62,1},
   [],
   [[{call,
      {62,1},
      {remote,{62,1},{atom,{62,1},fake},{atom,{62,1},is_beam_bif_info}},
      []}]],
   [{debug_line,62,9},{atom,{62,1},ignore}]},
  {clause,
   {62,1},
   [],[],
   [{debug_line,63,10},
    {cons,
     {63,5},
     {tuple,
      {63,6},
      [{atom,{63,7},p},
       {call,
        {63,9},
        {remote,{63,17},{atom,{63,9},test_lib},{atom,{63,18},parallel}},
        []},
       {cons,
        {64,7},
        {atom,{64,8},pattern},
        {cons,
         {64,16},
         {atom,{64,16},pattern2},
         {cons,
          {64,25},
          {atom,{64,25},pattern3},
          {cons,
           {64,34},
           {atom,{64,34},pattern4},
           {cons,
            {64,43},
            {atom,{64,43},guard},
            {cons,
             {65,8},
             {atom,{65,8},bad_arith},
             {cons,
              {65,18},
              {atom,{65,18},bool_cases},
              {cons,
               {65,29},
               {atom,{65,29},bad_apply},
               {cons,
                {65,39},
                {atom,{65,39},files},
                {cons,
                 {65,45},
                 {atom,{65,45},effect},
                 {cons,
                  {66,8},
                  {atom,{66,8},bin_opt_info},
                  {cons,
                   {66,21},
                   {atom,{66,21},bin_construction},
                   {cons,
                    {66,38},
                    {atom,{66,38},comprehensions},
                    {cons,
                     {66,53},
                     {atom,{66,53},maps},
                     {cons,
                      {67,8},
                      {atom,{67,8},maps_bin_opt_info},
                      {cons,
                       {68,8},
                       {atom,{68,8},redundant_boolean_clauses},
                       {cons,
                        {69,8},
                        {atom,{69,8},underscore},
                        {cons,
                         {69,19},
                         {atom,{69,19},no_warnings},
                         {cons,
                          {69,31},
                          {atom,{69,31},bit_syntax},
                          {cons,
                           {69,42},
                           {atom,{69,42},inlining},
                           {cons,
                            {70,8},
                            {atom,{70,8},tuple_calls},
                            {cons,
                             {70,20},
                             {atom,{70,20},recv_opt_info},
                             {cons,
                              {70,34},
                              {atom,{70,34},opportunistic_warnings},
                              {cons,
                               {71,8},
                               {atom,{71,8},eep49},
                               {cons,
                                {71,14},
                                {atom,{71,14},inline_list_funcs},
                                {nil,{71,31}}}}}}}}}}}}}}}}}}}}}}}}}}}]},
     {nil,{71,33}}}]}]}.
{function,{73,1},
          init_per_suite,1,
          [{clause,{73,1},
                   [{var,{73,1},'_'}],
                   [[{call,{73,1},
                           {remote,{73,1},
                                   {atom,{73,1},fake},
                                   {atom,{73,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,73,11},{atom,{73,1},ignore}]},
           {clause,{73,1},
                   [{var,{73,16},'Config'}],
                   [],
                   [{debug_line,74,12},
                    {call,{74,5},
                          {remote,{74,13},
                                  {atom,{74,5},test_lib},
                                  {atom,{74,14},recompile}},
                          [{atom,{74,25},warnings_SUITE}]},
                    {debug_line,75,13},
                    {var,{75,5},'Config'}]}]}.
{function,{77,1},
          end_per_suite,1,
          [{clause,{77,1},
                   [{var,{77,1},'_'}],
                   [[{call,{77,1},
                           {remote,{77,1},
                                   {atom,{77,1},fake},
                                   {atom,{77,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,77,14},{atom,{77,1},ignore}]},
           {clause,{77,1},
                   [{var,{77,15},'_Config'}],
                   [],
                   [{debug_line,78,15},{atom,{78,5},ok}]}]}.
{function,{80,1},
          init_per_group,2,
          [{clause,{80,1},
                   [{var,{80,1},'_'},{var,{80,1},'_'}],
                   [[{call,{80,1},
                           {remote,{80,1},
                                   {atom,{80,1},fake},
                                   {atom,{80,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,80,16},{atom,{80,1},ignore}]},
           {clause,{80,1},
                   [{var,{80,16},'_GroupName'},{var,{80,28},'Config'}],
                   [],
                   [{debug_line,81,17},{var,{81,5},'Config'}]}]}.
{function,{83,1},
          end_per_group,2,
          [{clause,{83,1},
                   [{var,{83,1},'_'},{var,{83,1},'_'}],
                   [[{call,{83,1},
                           {remote,{83,1},
                                   {atom,{83,1},fake},
                                   {atom,{83,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,83,18},{atom,{83,1},ignore}]},
           {clause,{83,1},
                   [{var,{83,15},'_GroupName'},{var,{83,27},'Config'}],
                   [],
                   [{debug_line,84,19},{var,{84,5},'Config'}]}]}.
{function,
 {87,1},
 pattern,1,
 [{clause,
   {87,1},
   [{var,{87,1},'_'}],
   [[{call,
      {87,1},
      {remote,{87,1},{atom,{87,1},fake},{atom,{87,1},is_beam_bif_info}},
      []}]],
   [{debug_line,87,20},{atom,{87,1},ignore}]},
  {clause,
   {87,1},
   [{var,{87,9},'Config'}],
   [[{call,
      {87,22},
      {remote,{87,22},{atom,{87,22},erlang},{atom,{87,22},is_list}},
      [{var,{87,30},'Config'}]}]],
   [{debug_line,89,21},
    {match,
     {89,5},
     {var,{89,5},'Ts'},
     {cons,
      {89,10},
      {tuple,
       {89,11},
       [{atom,{89,12},pattern},
        {bin,
         {90,12},
         [{bin_element,
           {90,14},
           {string,
            {90,14},
            "%% Just a comment here.\n              f(a={glurf,2}=A) -> A.\n\n              g(A) ->\n                 case A of\n                   a=[_|_] -> error;\n                   Other -> true\n                 end.\n\n              foo(X) ->\n                 a = {nisse,b} = X.\n           "},
           default,default}]},
        {cons,{102,12},{atom,{102,13},warn_unused_vars},{nil,{102,29}}},
        {tuple,
         {103,12},
         [{atom,{103,13},warnings},
          {cons,
           {104,13},
           {tuple,
            {104,14},
            [{tuple,{104,15},[{integer,{104,16},2},{integer,{104,18},15}]},
             {atom,{104,22},v3_core},
             {tuple,
              {104,30},
              [{atom,{104,31},nomatch},{atom,{104,39},pattern}]}]},
           {cons,
            {105,14},
            {tuple,
             {105,14},
             [{tuple,{105,15},[{integer,{105,16},6},{integer,{105,18},20}]},
              {atom,{105,22},v3_core},
              {tuple,
               {105,30},
               [{atom,{105,31},nomatch},{atom,{105,39},pattern}]}]},
            {nil,{106,13}}}}]}]},
      {nil,{106,16}}}},
    {debug_line,107,22},
    {match,
     {107,5},
     {nil,{107,5}},
     {call,
      {107,10},
      {atom,{107,10},run},
      [{var,{107,14},'Config'},{var,{107,22},'Ts'}]}},
    {debug_line,108,23},
    {atom,{108,5},ok}]}]}.
{function,
 {110,1},
 pattern2,1,
 [{clause,
   {110,1},
   [{var,{110,1},'_'}],
   [[{call,
      {110,1},
      {remote,{110,1},{atom,{110,1},fake},{atom,{110,1},is_beam_bif_info}},
      []}]],
   [{debug_line,110,24},{atom,{110,1},ignore}]},
  {clause,
   {110,1},
   [{var,{110,10},'Config'}],
   [[{call,
      {110,23},
      {remote,{110,23},{atom,{110,23},erlang},{atom,{110,23},is_list}},
      [{var,{110,31},'Config'}]}]],
   [{debug_line,114,25},
    {match,
     {114,5},
     {var,{114,5},'Source'},
     {bin,
      {114,14},
      [{bin_element,
        {114,16},
        {string,
         {114,16},
         "f(A) -> ok;\n                f(B) -> error.\n                t(A, B, C) ->\n                  case {A,B,C} of\n                    {a,B} -> ok;\n                    {_,B} -> ok\n                  end.\n                c(E) ->\n                  case E of\n                    _ -> ok;\n                    _ -> ok\n                  end.\n           "},
        default,default}]}},
    {debug_line,129,26},
    {match,
     {129,5},
     {var,{129,5},'Ts'},
     {cons,
      {129,10},
      {tuple,
       {129,11},
       [{atom,{129,12},pattern2},
        {var,{130,5},'Source'},
        {cons,{131,5},{atom,{131,6},nowarn_unused_vars},{nil,{131,24}}},
        {tuple,
         {132,12},
         [{atom,{132,13},warnings},
          {cons,
           {132,22},
           {tuple,
            {132,23},
            [{tuple,{132,24},[{integer,{132,25},2},{integer,{132,27},17}]},
             {atom,{132,31},sys_core_fold},
             {tuple,
              {132,45},
              [{atom,{132,46},nomatch},
               {tuple,
                {132,54},
                [{atom,{132,55},shadow},
                 {integer,{132,62},1},
                 {tuple,
                  {132,64},
                  [{atom,{132,65},f},{integer,{132,67},1}]}]}]}]},
           {cons,
            {133,23},
            {tuple,
             {133,23},
             [{tuple,{133,24},[{integer,{133,25},4},{integer,{133,27},19}]},
              {atom,{133,31},sys_core_fold},
              {tuple,
               {133,45},
               [{atom,{133,46},nomatch},{atom,{133,54},no_clause}]}]},
            {cons,
             {134,23},
             {tuple,
              {134,23},
              [{tuple,{134,24},[{integer,{134,25},5},{integer,{134,27},21}]},
               {atom,{134,31},sys_core_fold},
               {tuple,
                {134,45},
                [{atom,{134,46},nomatch},{atom,{134,54},clause_type}]}]},
             {cons,
              {135,23},
              {tuple,
               {135,23},
               [{tuple,{135,24},[{integer,{135,25},6},{integer,{135,27},21}]},
                {atom,{135,31},sys_core_fold},
                {tuple,
                 {135,45},
                 [{atom,{135,46},nomatch},{atom,{135,54},clause_type}]}]},
              {cons,
               {136,23},
               {tuple,
                {136,23},
                [{tuple,
                  {136,24},
                  [{integer,{136,25},11},{integer,{136,28},21}]},
                 {atom,{136,32},sys_core_fold},
                 {tuple,
                  {136,46},
                  [{atom,{136,47},nomatch},
                   {tuple,
                    {136,55},
                    [{atom,{136,56},shadow},{integer,{136,63},10}]}]}]},
               {nil,{137,22}}}}}}}]}]},
      {nil,{137,25}}}},
    {debug_line,138,27},
    {match,
     {138,5},
     {nil,{138,5}},
     {call,
      {138,10},
      {atom,{138,10},run},
      [{var,{138,14},'Config'},{var,{138,22},'Ts'}]}},
    {debug_line,142,28},
    {match,
     {142,5},
     {var,{142,5},'Ts2'},
     {cons,
      {142,11},
      {tuple,
       {142,12},
       [{atom,{142,13},pattern2},
        {var,{143,6},'Source'},
        {cons,
         {144,6},
         {atom,{144,7},nowarn_unused_vars},
         {cons,{144,26},{atom,{144,26},no_copt},{nil,{144,33}}}},
        {tuple,
         {145,6},
         [{atom,{145,7},warnings},
          {cons,
           {146,7},
           {tuple,
            {146,8},
            [{tuple,{146,9},[{integer,{146,10},2},{integer,{146,12},17}]},
             {atom,{146,16},beam_core_to_ssa},
             {tuple,
              {146,33},
              [{atom,{146,34},nomatch},
               {tuple,
                {146,42},
                [{atom,{146,43},shadow},{integer,{146,50},1}]}]}]},
           {cons,
            {147,15},
            {tuple,
             {147,15},
             [{tuple,{147,16},[{integer,{147,17},11},{integer,{147,20},21}]},
              {atom,{147,24},beam_core_to_ssa},
              {tuple,
               {147,41},
               [{atom,{147,42},nomatch},
                {tuple,
                 {147,50},
                 [{atom,{147,51},shadow},{integer,{147,58},10}]}]}]},
            {nil,{148,14}}}}]}]},
      {nil,{148,17}}}},
    {debug_line,149,29},
    {match,
     {149,5},
     {nil,{149,5}},
     {call,
      {149,10},
      {atom,{149,10},run},
      [{var,{149,14},'Config'},{var,{149,22},'Ts2'}]}},
    {debug_line,150,30},
    {atom,{150,5},ok}]}]}.
{function,
 {152,1},
 pattern3,1,
 [{clause,
   {152,1},
   [{var,{152,1},'_'}],
   [[{call,
      {152,1},
      {remote,{152,1},{atom,{152,1},fake},{atom,{152,1},is_beam_bif_info}},
      []}]],
   [{debug_line,152,31},{atom,{152,1},ignore}]},
  {clause,
   {152,1},
   [{var,{152,10},'Config'}],
   [[{call,
      {152,23},
      {remote,{152,23},{atom,{152,23},erlang},{atom,{152,23},is_list}},
      [{var,{152,31},'Config'}]}]],
   [{debug_line,156,32},
    {match,
     {156,5},
     {var,{156,5},'Ts'},
     {cons,
      {156,10},
      {tuple,
       {156,11},
       [{atom,{156,12},pattern3},
        {bin,
         {157,5},
         [{bin_element,
           {157,7},
           {string,
            {157,7},
            "\n            f({A,_}) -> {ok,A};\n            f([_|_]=B) -> {ok,B};\n            f({urk,nisse}) -> urka_glurka.\n            word(<<\"AND\">>) -> <<\"and\">>;\n            word(<<\"AS\">>) -> <<\"as\">>;\n            word(<<\"A\">>) -> <<\"a\">>;\n            word(<<\"AS\">>) -> <<\"as\">>.\n           "},
           default,default}]},
        {cons,{166,5},{atom,{166,6},nowarn_unused_vars},{nil,{166,24}}},
        {tuple,
         {167,5},
         [{atom,{167,6},warnings},
          {cons,
           {168,13},
           {tuple,
            {168,14},
            [{tuple,{168,15},[{integer,{168,16},4},{integer,{168,18},13}]},
             {atom,{168,22},beam_core_to_ssa},
             {tuple,
              {168,39},
              [{atom,{168,40},nomatch},
               {tuple,
                {168,48},
                [{atom,{168,49},shadow},{integer,{168,56},2}]}]}]},
           {cons,
            {169,14},
            {tuple,
             {169,14},
             [{tuple,{169,15},[{integer,{169,16},8},{integer,{169,18},13}]},
              {atom,{169,22},beam_core_to_ssa},
              {tuple,
               {169,39},
               [{atom,{169,40},nomatch},
                {tuple,
                 {169,48},
                 [{atom,{169,49},shadow},{integer,{169,56},6}]}]}]},
            {nil,{169,60}}}}]}]},
      {nil,{169,63}}}},
    {debug_line,170,33},
    {match,
     {170,5},
     {nil,{170,5}},
     {call,
      {170,10},
      {atom,{170,10},run},
      [{var,{170,14},'Config'},{var,{170,22},'Ts'}]}},
    {debug_line,172,34},
    {atom,{172,5},ok}]}]}.
{function,
 {174,1},
 pattern4,1,
 [{clause,
   {174,1},
   [{var,{174,1},'_'}],
   [[{call,
      {174,1},
      {remote,{174,1},{atom,{174,1},fake},{atom,{174,1},is_beam_bif_info}},
      []}]],
   [{debug_line,174,35},{atom,{174,1},ignore}]},
  {clause,
   {174,1},
   [{var,{174,10},'Config'}],
   [[{call,
      {174,23},
      {remote,{174,23},{atom,{174,23},erlang},{atom,{174,23},is_list}},
      [{var,{174,31},'Config'}]}]],
   [{debug_line,177,36},
    {match,
     {177,5},
     {var,{177,5},'Ts'},
     {cons,
      {177,10},
      {tuple,
       {177,11},
       [{atom,{177,12},pattern4},
        {bin,
         {178,5},
         [{bin_element,
           {178,7},
           {string,
            {178,7},
            "\n             t() ->\n               case true of \n                 false -> a;\n                 true -> b\n               end.\n\n             fi() ->\n               case true of \n                 false -> a;\n                 false -> b\n               end,\n               case true of \n                 true -> a;\n                 true -> b;\n                 X -> X\n               end,\n               case boolean of \n                 true -> a;\n                 false -> b\n               end.\n             int() ->\n               case 42 of\n                 [a|b] -> no;\n                 <<1>> -> no;\n                 <<X>> -> no;\n                 17 -> no;\n                 [] -> no;\n                 a -> no;\n                 {a,b,c} -> no\n               end.\n             tuple() ->\n               case {x,y,z} of\n                 \"xyz\" -> no;\n                 [a|b] -> no;\n                 <<1>> -> no;\n                 <<X>> -> no;\n                 17 -> no;\n                 [] -> no;\n                 a -> no;\n                 {a,b,c} -> no;\n                 {x,y} -> no\n               end.\n           "},
           default,default}]},
        {cons,{222,5},{atom,{222,6},nowarn_unused_vars},{nil,{222,24}}},
        {tuple,
         {223,5},
         [{atom,{223,6},warnings},
          {cons,
           {224,13},
           {tuple,
            {224,14},
            [{tuple,{224,15},[{integer,{224,16},9},{integer,{224,18},16}]},
             {atom,{224,22},sys_core_fold},
             {tuple,
              {224,36},
              [{atom,{224,37},nomatch},{atom,{224,45},no_clause}]}]},
           {cons,
            {225,14},
            {tuple,
             {225,14},
             [{tuple,{225,15},[{integer,{225,16},11},{integer,{225,19},18}]},
              {atom,{225,23},sys_core_fold},
              {tuple,
               {225,37},
               [{atom,{225,38},nomatch},{atom,{225,46},shadow}]}]},
            {cons,
             {226,14},
             {tuple,
              {226,14},
              [{tuple,{226,15},[{integer,{226,16},15},{integer,{226,19},18}]},
               {atom,{226,23},sys_core_fold},
               {tuple,
                {226,37},
                [{atom,{226,38},nomatch},{atom,{226,46},shadow}]}]},
             {cons,
              {227,14},
              {tuple,
               {227,14},
               [{tuple,{227,15},[{integer,{227,16},18},{integer,{227,19},16}]},
                {atom,{227,23},sys_core_fold},
                {tuple,
                 {227,37},
                 [{atom,{227,38},nomatch},{atom,{227,46},no_clause}]}]},
              {cons,
               {228,14},
               {tuple,
                {228,14},
                [{tuple,
                  {228,15},
                  [{integer,{228,16},23},{integer,{228,19},16}]},
                 {atom,{228,23},sys_core_fold},
                 {tuple,
                  {228,37},
                  [{atom,{228,38},nomatch},{atom,{228,46},no_clause}]}]},
               {cons,
                {229,14},
                {tuple,
                 {229,14},
                 [{tuple,
                   {229,15},
                   [{integer,{229,16},33},{integer,{229,19},16}]},
                  {atom,{229,23},sys_core_fold},
                  {tuple,
                   {229,37},
                   [{atom,{229,38},nomatch},{atom,{229,46},no_clause}]}]},
                {nil,{230,6}}}}}}}}]}]},
      {nil,{230,9}}}},
    {debug_line,231,37},
    {match,
     {231,5},
     {nil,{231,5}},
     {call,
      {231,10},
      {atom,{231,10},run},
      [{var,{231,14},'Config'},{var,{231,22},'Ts'}]}},
    {debug_line,233,38},
    {atom,{233,5},ok}]}]}.
{function,
 {235,1},
 guard,1,
 [{clause,
   {235,1},
   [{var,{235,1},'_'}],
   [[{call,
      {235,1},
      {remote,{235,1},{atom,{235,1},fake},{atom,{235,1},is_beam_bif_info}},
      []}]],
   [{debug_line,235,39},{atom,{235,1},ignore}]},
  {clause,
   {235,1},
   [{var,{235,7},'Config'}],
   [[{call,
      {235,20},
      {remote,{235,20},{atom,{235,20},erlang},{atom,{235,20},is_list}},
      [{var,{235,28},'Config'}]}]],
   [{debug_line,238,40},
    {match,
     {238,5},
     {var,{238,5},'Ts'},
     {cons,
      {238,10},
      {tuple,
       {238,11},
       [{atom,{238,12},guard},
        {bin,
         {239,5},
         [{bin_element,
           {239,7},
           {string,
            {239,7},
            "\n              t(A, B) when element(x, dum) -> ok.\n\n              tt(A, B) when 1 == 2 -> ok.\n\n              ttt() when element(x, dum) -> ok.\n\n              t4(T, F) when element({F}, T) -> ok.\n              t5(T, F) when element([F], T) -> ok.\n              t6(Pos, F) when element(Pos, [F]) -> ok.\n              t7(Pos) when element(Pos, []) -> ok.\n           "},
           default,default}]},
        {cons,{251,5},{atom,{251,6},nowarn_unused_vars},{nil,{251,24}}},
        {tuple,
         {252,5},
         [{atom,{252,6},warnings},
          {cons,
           {253,13},
           {tuple,
            {253,14},
            [{tuple,{253,15},[{integer,{253,16},2},{integer,{253,18},28}]},
             {atom,{253,22},sys_core_fold},
             {tuple,
              {254,15},
              [{atom,{254,16},failed},
               {tuple,
                {254,23},
                [{atom,{254,24},eval_failure},
                 {tuple,
                  {255,24},
                  [{atom,{255,25},erlang},
                   {atom,{255,32},element},
                   {integer,{255,40},2}]},
                 {atom,{256,24},badarg}]}]}]},
           {cons,
            {257,14},
            {tuple,
             {257,14},
             [{tuple,{257,15},[{integer,{257,16},4},{integer,{257,18},15}]},
              {atom,{257,22},sys_core_fold},
              {tuple,
               {257,36},
               [{atom,{257,37},nomatch},{atom,{257,45},guard}]}]},
            {cons,
             {258,14},
             {tuple,
              {258,14},
              [{tuple,{258,15},[{integer,{258,16},4},{integer,{258,18},15}]},
               {atom,{258,22},sys_core_fold},
               {tuple,
                {258,36},
                [{atom,{258,37},nomatch},{atom,{258,45},no_clause}]}]},
             {cons,
              {259,14},
              {tuple,
               {259,14},
               [{tuple,{259,15},[{integer,{259,16},6},{integer,{259,18},26}]},
                {atom,{259,22},sys_core_fold},
                {tuple,
                 {260,15},
                 [{atom,{260,16},failed},
                  {tuple,
                   {261,16},
                   [{atom,{261,17},eval_failure},
                    {tuple,
                     {262,17},
                     [{atom,{262,18},erlang},
                      {atom,{262,25},element},
                      {integer,{262,33},2}]},
                    {atom,{263,17},badarg}]}]}]},
              {nil,{264,6}}}}}}]}]},
      {nil,{264,9}}}},
    {debug_line,265,41},
    {match,
     {265,5},
     {nil,{265,5}},
     {call,
      {265,10},
      {atom,{265,10},run},
      [{var,{265,14},'Config'},{var,{265,22},'Ts'}]}},
    {debug_line,267,42},
    {atom,{267,5},ok}]}]}.
{function,
 {269,1},
 bad_arith,1,
 [{clause,
   {269,1},
   [{var,{269,1},'_'}],
   [[{call,
      {269,1},
      {remote,{269,1},{atom,{269,1},fake},{atom,{269,1},is_beam_bif_info}},
      []}]],
   [{debug_line,269,43},{atom,{269,1},ignore}]},
  {clause,
   {269,1},
   [{var,{269,11},'Config'}],
   [[{call,
      {269,24},
      {remote,{269,24},{atom,{269,24},erlang},{atom,{269,24},is_list}},
      [{var,{269,32},'Config'}]}]],
   [{debug_line,270,44},
    {match,
     {270,5},
     {var,{270,5},'Ts'},
     {cons,
      {270,10},
      {tuple,
       {270,11},
       [{atom,{270,12},bad_arith},
        {bin,
         {271,12},
         [{bin_element,
           {271,14},
           {string,
            {271,14},
            "f() ->\n                if\n                  a + 3 > 3 -> ok;\n                 true -> error\n              end.\n\n              g(A) ->\n                if\n                  is_integer(A), a + 3 > 3 -> ok;\n                  a + 3 > 42, is_integer(A) -> ok;\n                 true -> error\n              end.\n\n              h(A) ->\n                a + 3 + A.\n           "},
           default,default}]},
        {nil,{287,5}},
        {tuple,
         {288,5},
         [{atom,{288,6},warnings},
          {cons,
           {289,13},
           {tuple,
            {289,14},
            [{tuple,{289,15},[{integer,{289,16},3},{integer,{289,18},21}]},
             {atom,{289,22},sys_core_fold},
             {tuple,
              {290,15},
              [{atom,{290,16},failed},
               {tuple,
                {290,23},
                [{atom,{290,24},eval_failure},
                 {tuple,
                  {291,24},
                  [{atom,{291,25},erlang},
                   {atom,{291,32},'+'},
                   {integer,{291,36},2}]},
                 {atom,{292,24},badarith}]}]}]},
           {cons,
            {293,14},
            {tuple,
             {293,14},
             [{tuple,{293,15},[{integer,{293,16},9},{integer,{293,18},36}]},
              {atom,{293,22},sys_core_fold},
              {tuple,
               {294,15},
               [{atom,{294,16},failed},
                {tuple,
                 {294,23},
                 [{atom,{294,24},eval_failure},
                  {tuple,
                   {295,24},
                   [{atom,{295,25},erlang},
                    {atom,{295,32},'+'},
                    {integer,{295,36},2}]},
                  {atom,{296,24},badarith}]}]}]},
            {cons,
             {297,14},
             {tuple,
              {297,14},
              [{tuple,{297,15},[{integer,{297,16},10},{integer,{297,19},21}]},
               {atom,{297,23},sys_core_fold},
               {tuple,
                {298,15},
                [{atom,{298,16},failed},
                 {tuple,
                  {298,23},
                  [{atom,{298,24},eval_failure},
                   {tuple,
                    {299,24},
                    [{atom,{299,25},erlang},
                     {atom,{299,32},'+'},
                     {integer,{299,36},2}]},
                   {atom,{300,24},badarith}]}]}]},
             {cons,
              {301,14},
              {tuple,
               {301,14},
               [{tuple,{301,15},[{integer,{301,16},15},{integer,{301,19},19}]},
                {atom,{301,23},sys_core_fold},
                {tuple,
                 {302,15},
                 [{atom,{302,16},failed},
                  {tuple,
                   {302,23},
                   [{atom,{302,24},eval_failure},
                    {tuple,
                     {303,24},
                     [{atom,{303,25},erlang},
                      {atom,{303,32},'+'},
                      {integer,{303,36},2}]},
                    {atom,{304,24},badarith}]}]}]},
              {nil,{305,6}}}}}}]}]},
      {nil,{305,10}}}},
    {debug_line,306,45},
    {match,
     {306,5},
     {nil,{306,5}},
     {call,
      {306,10},
      {atom,{306,10},run},
      [{var,{306,14},'Config'},{var,{306,22},'Ts'}]}},
    {debug_line,307,46},
    {atom,{307,5},ok}]}]}.
{function,
 {309,1},
 bool_cases,1,
 [{clause,
   {309,1},
   [{var,{309,1},'_'}],
   [[{call,
      {309,1},
      {remote,{309,1},{atom,{309,1},fake},{atom,{309,1},is_beam_bif_info}},
      []}]],
   [{debug_line,309,47},{atom,{309,1},ignore}]},
  {clause,
   {309,1},
   [{var,{309,12},'Config'}],
   [[{call,
      {309,25},
      {remote,{309,25},{atom,{309,25},erlang},{atom,{309,25},is_list}},
      [{var,{309,33},'Config'}]}]],
   [{debug_line,310,48},
    {match,
     {310,5},
     {var,{310,5},'Ts'},
     {cons,
      {310,10},
      {tuple,
       {310,11},
       [{atom,{310,12},bool_cases},
        {bin,
         {311,5},
         [{bin_element,
           {311,7},
           {string,
            {311,7},
            "\n            f(A, B) ->\n               case A > B of\n                 true -> true;\n                 false -> false;\n                 Other -> {error,not_bool}\n               end.\n\n            g(A, B) ->\n               case A =/= B of\n                 false -> false;\n                 true -> true;\n                 Other -> {error,not_bool}\n               end.\n\n            h(Bool) ->\n               case not Bool of\n                 'maybe' -> strange;\n                 false -> ok;\n                 true -> error\n               end.\n           "},
           default,default}]},
        {cons,{333,12},{atom,{333,13},nowarn_unused_vars},{nil,{333,31}}},
        {tuple,
         {334,12},
         [{atom,{334,13},warnings},
          {cons,
           {335,13},
           {tuple,
            {335,14},
            [{tuple,{335,15},[{integer,{335,16},6},{integer,{335,18},18}]},
             {atom,{335,22},sys_core_fold},
             {tuple,
              {335,36},
              [{atom,{335,37},nomatch},{atom,{335,45},shadow}]}]},
           {cons,
            {336,14},
            {tuple,
             {336,14},
             [{tuple,{336,15},[{integer,{336,16},13},{integer,{336,19},18}]},
              {atom,{336,23},sys_core_fold},
              {tuple,
               {336,37},
               [{atom,{336,38},nomatch},{atom,{336,46},shadow}]}]},
            {cons,
             {337,14},
             {tuple,
              {337,14},
              [{tuple,{337,15},[{integer,{337,16},18},{integer,{337,19},18}]},
               {atom,{337,23},sys_core_fold},
               {tuple,
                {337,37},
                [{atom,{337,38},nomatch},{atom,{337,46},clause_type}]}]},
             {nil,{337,60}}}}}]}]},
      {nil,{337,64}}}},
    {debug_line,338,49},
    {match,
     {338,5},
     {nil,{338,5}},
     {call,
      {338,10},
      {atom,{338,10},run},
      [{var,{338,14},'Config'},{var,{338,22},'Ts'}]}},
    {debug_line,339,50},
    {atom,{339,5},ok}]}]}.
{function,
 {341,1},
 bad_apply,1,
 [{clause,
   {341,1},
   [{var,{341,1},'_'}],
   [[{call,
      {341,1},
      {remote,{341,1},{atom,{341,1},fake},{atom,{341,1},is_beam_bif_info}},
      []}]],
   [{debug_line,341,51},{atom,{341,1},ignore}]},
  {clause,
   {341,1},
   [{var,{341,11},'Config'}],
   [[{call,
      {341,24},
      {remote,{341,24},{atom,{341,24},erlang},{atom,{341,24},is_list}},
      [{var,{341,32},'Config'}]}]],
   [{debug_line,342,52},
    {match,
     {342,5},
     {var,{342,5},'Ts'},
     {cons,
      {342,10},
      {tuple,
       {342,11},
       [{atom,{342,12},bad_apply},
        {bin,
         {343,5},
         [{bin_element,
           {343,7},
           {string,
            {343,7},
            "\n             t(1) -> 42:42();\n             t(2) -> erlang:42();\n             t(3) -> 42:start();\n             t(4) -> []:start();\n             t(5) -> erlang:[]();\n             t(6) -> [a,b,c]().\n           "},
           default,default}]},
        {nil,{351,12}},
        {tuple,
         {352,12},
         [{atom,{352,13},warnings},
          {cons,
           {353,13},
           {tuple,
            {353,14},
            [{tuple,{353,15},[{integer,{353,16},2},{integer,{353,18},22}]},
             {atom,{353,22},beam_core_to_ssa},
             {tuple,
              {353,39},
              [{atom,{353,40},failed},{atom,{353,47},bad_call}]}]},
           {cons,
            {354,14},
            {tuple,
             {354,14},
             [{tuple,{354,15},[{integer,{354,16},3},{integer,{354,18},22}]},
              {atom,{354,22},beam_core_to_ssa},
              {tuple,
               {354,39},
               [{atom,{354,40},failed},{atom,{354,47},bad_call}]}]},
            {cons,
             {355,14},
             {tuple,
              {355,14},
              [{tuple,{355,15},[{integer,{355,16},4},{integer,{355,18},22}]},
               {atom,{355,22},beam_core_to_ssa},
               {tuple,
                {355,39},
                [{atom,{355,40},failed},{atom,{355,47},bad_call}]}]},
             {cons,
              {356,14},
              {tuple,
               {356,14},
               [{tuple,{356,15},[{integer,{356,16},5},{integer,{356,18},22}]},
                {atom,{356,22},beam_core_to_ssa},
                {tuple,
                 {356,39},
                 [{atom,{356,40},failed},{atom,{356,47},bad_call}]}]},
              {cons,
               {357,14},
               {tuple,
                {357,14},
                [{tuple,{357,15},[{integer,{357,16},6},{integer,{357,18},22}]},
                 {atom,{357,22},beam_core_to_ssa},
                 {tuple,
                  {357,39},
                  [{atom,{357,40},failed},{atom,{357,47},bad_call}]}]},
               {cons,
                {358,14},
                {tuple,
                 {358,14},
                 [{tuple,
                   {358,15},
                   [{integer,{358,16},7},{integer,{358,18},22}]},
                  {atom,{358,22},sys_core_fold},
                  {tuple,
                   {358,36},
                   [{atom,{358,37},failed},{atom,{358,44},bad_call}]}]},
                {nil,{359,13}}}}}}}}]}]},
      {nil,{359,16}}}},
    {debug_line,360,53},
    {match,
     {360,5},
     {nil,{360,5}},
     {call,
      {360,10},
      {atom,{360,10},run},
      [{var,{360,14},'Config'},{var,{360,22},'Ts'}]}},
    {debug_line,363,54},
    {'try',
     {363,5},
     [{call,
       {363,9},
       {remote,{363,15},{atom,{363,9},erlang},{integer,{363,16},42}},
       []}],
     [{clause,
       {364,8},
       [{var,{364,8},'_'}],
       [],
       [{debug_line,364,55},
        {call,
         {364,13},
         {remote,{364,15},{atom,{364,13},ct},{atom,{364,16},fail}},
         [{atom,{364,21},should_fail}]}]}],
     [{clause,
       {366,8},
       [{tuple,
         {366,8},
         [{atom,{366,8},error},{atom,{366,14},badarg},{var,{366,14},'_'}]}],
       [],
       [{debug_line,366,56},{atom,{366,24},ok}]}],
     []},
    {debug_line,368,57},
    {atom,{368,5},ok}]}]}.
{function,
 {370,1},
 files,1,
 [{clause,
   {370,1},
   [{var,{370,1},'_'}],
   [[{call,
      {370,1},
      {remote,{370,1},{atom,{370,1},fake},{atom,{370,1},is_beam_bif_info}},
      []}]],
   [{debug_line,370,58},{atom,{370,1},ignore}]},
  {clause,
   {370,1},
   [{var,{370,7},'Config'}],
   [[{call,
      {370,20},
      {remote,{370,20},{atom,{370,20},erlang},{atom,{370,20},is_list}},
      [{var,{370,28},'Config'}]}]],
   [{debug_line,371,59},
    {match,
     {371,5},
     {var,{371,5},'Ts'},
     {cons,
      {371,10},
      {tuple,
       {371,11},
       [{atom,{371,12},files_1},
        {bin,
         {372,5},
         [{bin_element,
           {372,7},
           {string,
            {372,7},
            "\n              -file(\"file1\", 14).\n\n              t1() ->\n                  1/0.\n\n              -file(\"file2\", 7).\n\n              t2() ->\n                  1/0.\n           "},
           default,default}]},
        {nil,{383,12}},
        {tuple,
         {384,12},
         [{atom,{384,13},warnings},
          {cons,
           {385,13},
           {tuple,
            {385,14},
            [{string,{385,15},"file1"},
             {cons,
              {385,23},
              {tuple,
               {385,24},
               [{tuple,{385,25},[{integer,{385,26},17},{integer,{385,29},20}]},
                {atom,{385,33},sys_core_fold},
                {tuple,
                 {386,25},
                 [{atom,{386,26},failed},
                  {tuple,
                   {386,33},
                   [{atom,{386,34},eval_failure},
                    {tuple,
                     {387,34},
                     [{atom,{387,35},erlang},
                      {atom,{387,42},'/'},
                      {integer,{387,46},2}]},
                    {atom,{388,34},badarith}]}]}]},
              {nil,{388,45}}}]},
           {cons,
            {389,14},
            {tuple,
             {389,14},
             [{string,{389,15},"file2"},
              {cons,
               {389,23},
               {tuple,
                {389,24},
                [{tuple,
                  {389,25},
                  [{integer,{389,26},10},{integer,{389,29},20}]},
                 {atom,{389,33},sys_core_fold},
                 {tuple,
                  {390,25},
                  [{atom,{390,26},failed},
                   {tuple,
                    {390,33},
                    [{atom,{390,34},eval_failure},
                     {tuple,
                      {391,34},
                      [{atom,{391,35},erlang},
                       {atom,{391,42},'/'},
                       {integer,{391,46},2}]},
                     {atom,{392,34},badarith}]}]}]},
               {nil,{392,45}}}]},
            {nil,{392,47}}}}]}]},
      {nil,{392,50}}}},
    {debug_line,394,60},
    {match,
     {394,5},
     {nil,{394,5}},
     {call,
      {394,10},
      {atom,{394,10},run},
      [{var,{394,14},'Config'},{var,{394,22},'Ts'}]}},
    {debug_line,395,61},
    {atom,{395,5},ok}]}]}.
{function,
 {398,1},
 effect,1,
 [{clause,
   {398,1},
   [{var,{398,1},'_'}],
   [[{call,
      {398,1},
      {remote,{398,1},{atom,{398,1},fake},{atom,{398,1},is_beam_bif_info}},
      []}]],
   [{debug_line,398,62},{atom,{398,1},ignore}]},
  {clause,
   {398,1},
   [{var,{398,8},'Config'}],
   [[{call,
      {398,21},
      {remote,{398,21},{atom,{398,21},erlang},{atom,{398,21},is_list}},
      [{var,{398,29},'Config'}]}]],
   [{debug_line,399,63},
    {match,
     {399,5},
     {var,{399,5},'Ts'},
     {cons,
      {399,10},
      {tuple,
       {399,11},
       [{atom,{399,12},no_warnings},
        {bin,
         {401,12},
         [{bin_element,
           {401,14},
           {string,
            {401,14},
            "\n             m1(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = 0;\n                  true -> ok\n                end,\n                ok.\n\n             m2(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz};\n                  true -> ok\n                end,\n                ok.\n\n             m3(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = [a,Sz];\n                  true -> ok\n                end,\n                ok.\n\n             m4(X, Sz, Var) ->\n                if\n                  Sz =:= 0 -> X = Var;\n                  true -> ok\n                end,\n                ok.\n\n             m5(X, Sz) ->\n                if\n                   Sz =:= 0 -> X = {a,b,c};\n                   true -> ok\n                end,\n                ok.\n\n             m6(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz,[1,2,3]};\n                  true -> ok\n                end,\n                ok.\n\n             m7(X, Sz) ->\n                if\n                  Sz =:= 0 -> X = {a,Sz,[1,2,3],abs(Sz)};\n                  true -> ok\n                end,\n                ok.\n\n             m8(A, B) ->\n                case {A,B} of\n                  V -> V\n                end,\n                ok.\n\n             m9(Bs) ->\n                [{B,ok} = {B,foo:bar(B)} || B <- Bs],\n                ok.\n\n             m10(ConfigTableSize) ->\n               case ConfigTableSize of\n                 apa ->\n                   CurrentConfig = {id(camel_phase3),id(sms)},\n                   case CurrentConfig of\n                     {apa, bepa} -> ok;\n                     _ -> ok\n                   end\n               end,\n               ok.\n\n             id(I) -> I.\n             "},
           default,default}]},
        {nil,{474,12}},
        {nil,{474,15}}]},
      {cons,
       {476,11},
       {tuple,
        {476,11},
        [{atom,{476,12},basic},
         {bin,
          {477,12},
          [{bin_element,
            {477,14},
            {string,
             {477,14},
             "\n             t(X) ->\n               case X of\n                warn_lc ->\n                    [is_integer(Z) || Z <- [1,2,3]];\n                warn_lc_2 ->\n                    [{error,Z} || Z <- [1,2,3]];\n                warn_lc_3 ->\n                    [{error,abs(Z)} || Z <- [1,2,3]];\n                no_warn_lc ->\n                    [put(last_integer, Z) || Z <- [1,2,3]]; %no warning\n                unused_tuple_literal ->\n                    {a,b,c};\n                unused_list_literal ->\n                    [1,2,3,4];\n                unused_integer ->\n                    42;\n                unused_arith ->\n                    X*X\n               end,\n               ok.\n             "},
            default,default}]},
         {nil,{499,12}},
         {tuple,
          {500,12},
          [{atom,{500,13},warnings},
           {cons,
            {500,22},
            {tuple,
             {500,23},
             [{tuple,{500,24},[{integer,{500,25},5},{integer,{500,27},22}]},
              {atom,{500,31},sys_core_fold},
              {tuple,
               {500,45},
               [{atom,{500,46},ignored},
                {tuple,
                 {500,54},
                 [{atom,{500,55},no_effect},
                  {tuple,
                   {500,65},
                   [{atom,{500,66},erlang},
                    {atom,{500,73},is_integer},
                    {integer,{500,84},1}]}]}]}]},
            {cons,
             {501,23},
             {tuple,
              {501,23},
              [{tuple,{501,24},[{integer,{501,25},7},{integer,{501,27},22}]},
               {atom,{501,31},sys_core_fold},
               {tuple,
                {501,45},
                [{atom,{501,46},ignored},{atom,{501,54},useless_building}]}]},
             {cons,
              {502,23},
              {tuple,
               {502,23},
               [{tuple,{502,24},[{integer,{502,25},9},{integer,{502,27},22}]},
                {atom,{502,31},sys_core_fold},
                {tuple,
                 {502,45},
                 [{atom,{502,46},ignored},{atom,{502,54},useless_building}]}]},
              {cons,
               {503,23},
               {tuple,
                {503,23},
                [{tuple,{503,24},[{integer,{503,25},9},{integer,{503,27},29}]},
                 {atom,{503,31},sys_core_fold},
                 {tuple,
                  {503,45},
                  [{atom,{503,46},ignored},
                   {tuple,
                    {503,54},
                    [{atom,{503,55},result},
                     {tuple,
                      {503,62},
                      [{atom,{503,63},erlang},
                       {atom,{503,70},abs},
                       {integer,{503,74},1}]}]}]}]},
               {cons,
                {504,23},
                {tuple,
                 {504,23},
                 [{tuple,
                   {504,24},
                   [{integer,{504,25},13},{integer,{504,28},21}]},
                  {atom,{504,32},sys_core_fold},
                  {tuple,
                   {504,46},
                   [{atom,{504,47},ignored},
                    {atom,{504,55},useless_building}]}]},
                {cons,
                 {505,23},
                 {tuple,
                  {505,23},
                  [{tuple,
                    {505,24},
                    [{integer,{505,25},15},{integer,{505,28},21}]},
                   {atom,{505,32},sys_core_fold},
                   {tuple,
                    {505,46},
                    [{atom,{505,47},ignored},
                     {atom,{505,55},useless_building}]}]},
                 {cons,
                  {506,23},
                  {tuple,
                   {506,23},
                   [{tuple,
                     {506,24},
                     [{integer,{506,25},17},{integer,{506,28},21}]},
                    {atom,{506,32},sys_core_fold},
                    {tuple,
                     {506,46},
                     [{atom,{506,47},ignored},
                      {atom,{506,55},useless_building}]}]},
                  {cons,
                   {507,23},
                   {tuple,
                    {507,23},
                    [{tuple,
                      {507,24},
                      [{integer,{507,25},19},{integer,{507,28},22}]},
                     {atom,{507,32},sys_core_fold},
                     {tuple,
                      {507,46},
                      [{atom,{507,47},ignored},
                       {tuple,
                        {507,55},
                        [{atom,{507,56},result},
                         {tuple,
                          {507,64},
                          [{atom,{507,65},erlang},
                           {atom,{507,72},'*'},
                           {integer,{507,76},2}]}]}]}]},
                   {nil,{508,22}}}}}}}}}}]}]},
       {cons,
        {510,11},
        {tuple,
         {510,11},
         [{atom,{510,12},nested},
          {bin,
           {511,13},
           [{bin_element,
             {511,15},
             {string,
              {511,15},
              "\n             t(X) ->\n               case X of\n                nested ->\n                    [{ok,node(),module:foo(),self(),[time(),date()],time()},\n                     is_integer(X)];\n                unused_bit_syntax ->\n                    <<X:8>>;\n                unused_fun ->\n                    fun() -> {ok,X} end;\n                unused_named_fun ->\n                    fun F(0) -> 1;\n                        F(N) -> N*F(N-1)\n                    end;\n                unused_atom ->\n                    ignore;                             %no warning\n                unused_nil ->\n                    [];                                 %no warning\n                comp_op ->\n                    X =:= 2;\n                cookie ->\n                    erlang:get_cookie();\n                result_ignore ->\n                    _ = list_to_integer(X);\n                warn_lc_4 ->\n                    %% No warning because of assignment to _.\n                    [_ = abs(Z) || Z <- [1,2,3]]\n               end,\n               ok.\n             "},
             default,default}]},
          {nil,{541,12}},
          {tuple,
           {542,12},
           [{atom,{542,13},warnings},
            {cons,
             {542,22},
             {tuple,
              {542,23},
              [{tuple,{542,24},[{integer,{542,25},5},{integer,{542,27},21}]},
               {atom,{542,31},sys_core_fold},
               {tuple,
                {542,45},
                [{atom,{542,46},ignored},{atom,{542,54},useless_building}]}]},
             {cons,
              {543,23},
              {tuple,
               {543,23},
               [{tuple,{543,24},[{integer,{543,25},5},{integer,{543,27},26}]},
                {atom,{543,31},sys_core_fold},
                {tuple,
                 {543,45},
                 [{atom,{543,46},ignored},
                  {tuple,
                   {543,54},
                   [{atom,{543,55},no_effect},
                    {tuple,
                     {543,65},
                     [{atom,{543,66},erlang},
                      {atom,{543,73},node},
                      {integer,{543,78},0}]}]}]}]},
              {cons,
               {544,23},
               {tuple,
                {544,23},
                [{tuple,{544,24},[{integer,{544,25},5},{integer,{544,27},46}]},
                 {atom,{544,31},sys_core_fold},
                 {tuple,
                  {544,45},
                  [{atom,{544,46},ignored},
                   {tuple,
                    {544,54},
                    [{atom,{544,55},no_effect},
                     {tuple,
                      {544,65},
                      [{atom,{544,66},erlang},
                       {atom,{544,73},self},
                       {integer,{544,78},0}]}]}]}]},
               {cons,
                {545,23},
                {tuple,
                 {545,23},
                 [{tuple,
                   {545,24},
                   [{integer,{545,25},5},{integer,{545,27},54}]},
                  {atom,{545,31},sys_core_fold},
                  {tuple,
                   {545,45},
                   [{atom,{545,46},ignored},
                    {tuple,
                     {545,54},
                     [{atom,{545,55},no_effect},
                      {tuple,
                       {545,65},
                       [{atom,{545,66},erlang},
                        {atom,{545,73},time},
                        {integer,{545,78},0}]}]}]}]},
                {cons,
                 {546,23},
                 {tuple,
                  {546,23},
                  [{tuple,
                    {546,24},
                    [{integer,{546,25},5},{integer,{546,27},61}]},
                   {atom,{546,31},sys_core_fold},
                   {tuple,
                    {546,45},
                    [{atom,{546,46},ignored},
                     {tuple,
                      {546,54},
                      [{atom,{546,55},no_effect},
                       {tuple,
                        {546,65},
                        [{atom,{546,66},erlang},
                         {atom,{546,73},date},
                         {integer,{546,78},0}]}]}]}]},
                 {cons,
                  {547,23},
                  {tuple,
                   {547,23},
                   [{tuple,
                     {547,24},
                     [{integer,{547,25},5},{integer,{547,27},69}]},
                    {atom,{547,31},sys_core_fold},
                    {tuple,
                     {547,45},
                     [{atom,{547,46},ignored},
                      {tuple,
                       {547,54},
                       [{atom,{547,55},no_effect},
                        {tuple,
                         {547,65},
                         [{atom,{547,66},erlang},
                          {atom,{547,73},time},
                          {integer,{547,78},0}]}]}]}]},
                  {cons,
                   {548,23},
                   {tuple,
                    {548,23},
                    [{tuple,
                      {548,24},
                      [{integer,{548,25},6},{integer,{548,27},22}]},
                     {atom,{548,31},sys_core_fold},
                     {tuple,
                      {548,45},
                      [{atom,{548,46},ignored},
                       {tuple,
                        {548,54},
                        [{atom,{548,55},no_effect},
                         {tuple,
                          {548,65},
                          [{atom,{548,66},erlang},
                           {atom,{548,73},is_integer},
                           {integer,{548,84},1}]}]}]}]},
                   {cons,
                    {549,23},
                    {tuple,
                     {549,23},
                     [{tuple,
                       {549,24},
                       [{integer,{549,25},8},{integer,{549,27},21}]},
                      {atom,{549,31},sys_core_fold},
                      {tuple,
                       {549,45},
                       [{atom,{549,46},ignored},
                        {atom,{549,54},useless_building}]}]},
                    {cons,
                     {550,23},
                     {tuple,
                      {550,23},
                      [{tuple,
                        {550,24},
                        [{integer,{550,25},10},{integer,{550,28},21}]},
                       {atom,{550,32},sys_core_fold},
                       {tuple,
                        {550,46},
                        [{atom,{550,47},ignored},
                         {atom,{550,55},useless_building}]}]},
                     {cons,
                      {551,23},
                      {tuple,
                       {551,23},
                       [{tuple,
                         {551,24},
                         [{integer,{551,25},12},{integer,{551,28},21}]},
                        {atom,{551,32},sys_core_fold},
                        {tuple,
                         {551,46},
                         [{atom,{551,47},ignored},
                          {atom,{551,55},useless_building}]}]},
                      {cons,
                       {552,23},
                       {tuple,
                        {552,23},
                        [{tuple,
                          {552,24},
                          [{integer,{552,25},20},{integer,{552,28},23}]},
                         {atom,{552,32},sys_core_fold},
                         {tuple,
                          {552,46},
                          [{atom,{552,47},ignored},
                           {tuple,
                            {552,55},
                            [{atom,{552,56},no_effect},
                             {tuple,
                              {552,66},
                              [{atom,{552,67},erlang},
                               {atom,{552,74},'=:='},
                               {integer,{552,80},2}]}]}]}]},
                       {cons,
                        {553,23},
                        {tuple,
                         {553,23},
                         [{tuple,
                           {553,24},
                           [{integer,{553,25},22},{integer,{553,28},21}]},
                          {atom,{553,32},sys_core_fold},
                          {tuple,
                           {553,46},
                           [{atom,{553,47},ignored},
                            {tuple,
                             {553,55},
                             [{atom,{553,56},no_effect},
                              {tuple,
                               {553,66},
                               [{atom,{553,67},erlang},
                                {atom,{553,74},get_cookie},
                                {integer,{553,85},0}]}]}]}]},
                        {nil,{554,23}}}}}}}}}}}}}}]}]},
        {cons,
         {556,11},
         {tuple,
          {556,11},
          [{atom,{556,12},seq},
           {bin,
            {557,12},
            [{bin_element,
              {557,14},
              {string,
               {557,14},
               "\n             t(T) ->\n               [ {a,b,T} ],  [ {x,y,T} ],\n               ok.\n             "},
              default,default}]},
           {nil,{562,12}},
           {tuple,
            {563,12},
            [{atom,{563,13},warnings},
             {cons,
              {563,22},
              {tuple,
               {563,23},
               [{tuple,{563,24},[{integer,{563,25},3},{integer,{563,27},16}]},
                {atom,{563,31},sys_core_fold},
                {tuple,
                 {563,45},
                 [{atom,{563,46},ignored},{atom,{563,54},useless_building}]}]},
              {cons,
               {564,23},
               {tuple,
                {564,23},
                [{tuple,{564,24},[{integer,{564,25},3},{integer,{564,27},30}]},
                 {atom,{564,31},sys_core_fold},
                 {tuple,
                  {564,45},
                  [{atom,{564,46},ignored},
                   {atom,{564,54},useless_building}]}]},
               {nil,{564,72}}}}]}]},
         {cons,
          {566,11},
          {tuple,
           {566,11},
           [{atom,{566,12},propagated_literal},
            {bin,
             {567,12},
             [{bin_element,
               {567,14},
               {string,
                {567,14},
                "\n            foo(X) ->\n                Y = [$.],\n                %% There must not be a warning for constructing a term that\n                %% is never used.\n                fun() -> X = Y ++ [$.] end(),\n                ok.\n             "},
               default,default}]},
            {nil,{575,12}},
            {nil,{576,12}}]},
          {nil,{577,10}}}}}}}},
    {debug_line,578,64},
    {match,
     {578,5},
     {nil,{578,5}},
     {call,
      {578,10},
      {atom,{578,10},run},
      [{var,{578,14},'Config'},{var,{578,22},'Ts'}]}},
    {debug_line,579,65},
    {atom,{579,5},ok}]}]}.
{function,
 {581,1},
 bin_opt_info,1,
 [{clause,
   {581,1},
   [{var,{581,1},'_'}],
   [[{call,
      {581,1},
      {remote,{581,1},{atom,{581,1},fake},{atom,{581,1},is_beam_bif_info}},
      []}]],
   [{debug_line,581,66},{atom,{581,1},ignore}]},
  {clause,
   {581,1},
   [{var,{581,14},'Config'}],
   [[{call,
      {581,27},
      {remote,{581,27},{atom,{581,27},erlang},{atom,{581,27},is_list}},
      [{var,{581,35},'Config'}]}]],
   [{debug_line,582,67},
    {match,
     {582,5},
     {var,{582,5},'Code'},
     {bin,
      {582,12},
      [{bin_element,
        {582,14},
        {string,
         {582,14},
         "\n             t1(Bin) ->\n               case Bin of\n                 _ when byte_size(Bin) > 20 -> erlang:error(too_long);\n                 <<_,T/binary>> -> t1(T);\n                 <<>> -> ok\n             end.\n\n             %% We use a tail in a BIF instruction, remote call, function\n             %% return, and an optimizable tail call for better coverage.\n             t2(<<A,B,T/bytes>>) ->\n                 if\n                     A > B -> t2(T);\n                     A =< B -> T\n                 end;\n             t2(<<_,T/bytes>>) when byte_size(T) < 4 ->\n                 foo;\n             t2(<<_,T/bytes>>) ->\n                 split_binary(T, 4).\n           "},
        default,default}]}},
    {debug_line,603,68},
    {match,
     {603,5},
     {var,{603,5},'Ws'},
     {'catch',
      {603,11},
      {call,
       {603,17},
       {atom,{603,17},run_test},
       [{var,{603,26},'Config'},
        {var,{603,34},'Code'},
        {block,0,
         [{cons,{603,40},{atom,{603,41},bin_opt_info},{nil,{603,53}}}]}]}}},
    {debug_line,608,69},
    {match,
     {608,5},
     {tuple,
      {608,5},
      [{atom,{608,6},warnings},
       {cons,
        {609,6},
        {tuple,
         {609,7},
         [{integer,{609,8},5},
          {atom,{609,10},beam_ssa_bsm},
          {tuple,
           {609,23},
           [{atom,{609,24},unsuitable_call},
            {tuple,
             {610,24},
             [{tuple,
               {610,25},
               [{atom,{610,26},b_local},
                {tuple,
                 {610,34},
                 [{atom,{610,35},b_literal},{atom,{610,45},t1}]},
                {integer,{610,49},1}]},
              {tuple,
               {611,25},
               [{atom,{611,26},used_before_match},
                {tuple,
                 {612,26},
                 [{atom,{612,27},b_set},
                  {var,{612,33},'_'},
                  {var,{612,35},'_'},
                  {tuple,
                   {612,37},
                   [{atom,{612,38},bif},{atom,{612,42},byte_size}]},
                  {cons,{612,53},{var,{612,54},'_'},{nil,{612,55}}}]}]}]}]}]},
        {cons,
         {613,7},
         {tuple,
          {613,7},
          [{integer,{613,8},5},
           {atom,{613,10},beam_ssa_bsm},
           {tuple,
            {613,23},
            [{atom,{613,24},binary_created},
             {var,{613,39},'_'},
             {var,{613,41},'_'}]}]},
         {cons,
          {614,7},
          {tuple,
           {614,7},
           [{integer,{614,8},11},
            {atom,{614,11},beam_ssa_bsm},
            {tuple,
             {614,24},
             [{atom,{614,25},binary_created},
              {var,{614,40},'_'},
              {var,{614,42},'_'}]}]},
          {cons,
           {615,7},
           {tuple,
            {615,7},
            [{integer,{615,8},13},
             {atom,{615,11},beam_ssa_bsm},
             {atom,{615,24},context_reused}]},
           {cons,
            {616,7},
            {tuple,
             {616,7},
             [{integer,{616,8},16},
              {atom,{616,11},beam_ssa_bsm},
              {atom,{616,24},context_reused}]},
            {cons,
             {617,7},
             {tuple,
              {617,7},
              [{integer,{617,8},19},
               {atom,{617,11},beam_ssa_bsm},
               {tuple,
                {617,24},
                [{atom,{617,25},remote_call},
                 {tuple,
                  {618,25},
                  [{atom,{618,26},b_remote},
                   {tuple,
                    {619,26},
                    [{atom,{619,27},b_literal},{atom,{619,37},erlang}]},
                   {tuple,
                    {620,26},
                    [{atom,{620,27},b_literal},{atom,{620,37},split_binary}]},
                   {integer,{620,51},2}]}]}]},
             {cons,
              {621,7},
              {tuple,
               {621,7},
               [{integer,{621,8},19},
                {atom,{621,11},beam_ssa_bsm},
                {tuple,
                 {621,24},
                 [{atom,{621,25},binary_created},
                  {var,{621,40},'_'},
                  {var,{621,42},'_'}]}]},
              {nil,{622,6}}}}}}}}}]},
     {var,{622,11},'Ws'}},
    {debug_line,625,70},
    {match,
     {625,5},
     {nil,{625,5}},
     {'catch',
      {625,11},
      {call,
       {625,17},
       {atom,{625,17},run_test},
       [{var,{625,26},'Config'},{var,{625,34},'Code'},{nil,{625,40}}]}}},
    {debug_line,635,71},
    {match,
     {635,5},
     {var,{635,5},'Forms'},
     {cons,
      {635,13},
      {tuple,
       {635,14},
       [{atom,{635,15},attribute},
        {integer,{635,25},0},
        {atom,{635,27},module},
        {atom,{635,34},nolocation_binary}]},
      {cons,
       {636,14},
       {tuple,
        {636,14},
        [{atom,{636,15},attribute},
         {integer,{636,25},0},
         {atom,{636,27},export},
         {cons,
          {636,34},
          {tuple,{636,35},[{atom,{636,36},t1},{integer,{636,39},1}]},
          {nil,{636,41}}}]},
       {cons,
        {637,14},
        {tuple,
         {637,14},
         [{atom,{637,15},function},
          {integer,{637,24},0},
          {atom,{637,26},t1},
          {integer,{637,29},1},
          {cons,
           {638,17},
           {tuple,
            {638,18},
            [{atom,{638,19},clause},
             {integer,{638,26},0},
             {cons,
              {638,28},
              {tuple,
               {638,29},
               [{atom,{638,30},var},
                {integer,{638,34},0},
                {atom,{638,36},'Bin'}]},
              {nil,{638,42}}},
             {nil,{638,44}},
             {cons,
              {639,22},
              {tuple,
               {639,23},
               [{atom,{639,24},'case'},
                {integer,{639,31},0},
                {tuple,
                 {639,33},
                 [{atom,{639,34},var},
                  {integer,{639,38},0},
                  {atom,{639,40},'Bin'}]},
                {cons,
                 {640,27},
                 {tuple,
                  {640,28},
                  [{atom,{640,29},clause},
                   {integer,{640,36},0},
                   {cons,
                    {641,32},
                    {tuple,
                     {641,33},
                     [{atom,{641,34},var},
                      {integer,{641,38},0},
                      {atom,{641,40},'_'}]},
                    {nil,{641,44}}},
                   {cons,
                    {642,32},
                    {cons,
                     {642,33},
                     {tuple,
                      {642,34},
                      [{atom,{642,35},op},
                       {integer,{642,38},0},
                       {atom,{642,40},'>'},
                       {tuple,
                        {643,38},
                        [{atom,{643,39},call},
                         {integer,{643,44},0},
                         {tuple,
                          {643,46},
                          [{atom,{643,47},atom},
                           {integer,{643,52},0},
                           {atom,{643,54},byte_size}]},
                         {cons,
                          {643,65},
                          {tuple,
                           {643,66},
                           [{atom,{643,67},var},
                            {integer,{643,71},0},
                            {atom,{643,73},'Bin'}]},
                          {nil,{643,79}}}]},
                       {tuple,
                        {644,38},
                        [{atom,{644,39},integer},
                         {integer,{644,47},0},
                         {integer,{644,49},20}]}]},
                     {nil,{644,53}}},
                    {nil,{644,54}}},
                   {cons,
                    {645,32},
                    {tuple,
                     {645,33},
                     [{atom,{645,34},call},
                      {integer,{645,39},0},
                      {tuple,
                       {646,37},
                       [{atom,{646,38},remote},
                        {integer,{646,45},0},
                        {tuple,
                         {646,47},
                         [{atom,{646,48},atom},
                          {integer,{646,53},0},
                          {atom,{646,55},erlang}]},
                        {tuple,
                         {646,63},
                         [{atom,{646,64},atom},
                          {integer,{646,69},0},
                          {atom,{646,71},error}]}]},
                      {cons,
                       {647,37},
                       {tuple,
                        {647,38},
                        [{atom,{647,39},atom},
                         {integer,{647,44},0},
                         {atom,{647,46},too_long}]},
                       {nil,{647,55}}}]},
                    {nil,{647,57}}}]},
                 {cons,
                  {648,28},
                  {tuple,
                   {648,28},
                   [{atom,{648,29},clause},
                    {integer,{648,36},0},
                    {cons,
                     {649,32},
                     {tuple,
                      {649,33},
                      [{atom,{649,34},bin},
                       {integer,{649,38},0},
                       {cons,
                        {650,37},
                        {tuple,
                         {650,38},
                         [{atom,{650,39},bin_element},
                          {integer,{650,51},0},
                          {tuple,
                           {650,53},
                           [{atom,{650,54},var},
                            {integer,{650,58},0},
                            {atom,{650,60},'_'}]},
                          {atom,{650,65},default},
                          {atom,{650,73},default}]},
                        {cons,
                         {651,38},
                         {tuple,
                          {651,38},
                          [{atom,{651,39},bin_element},
                           {integer,{651,51},0},
                           {tuple,
                            {651,53},
                            [{atom,{651,54},var},
                             {integer,{651,58},0},
                             {atom,{651,60},'T'}]},
                           {atom,{651,65},default},
                           {cons,
                            {651,73},
                            {atom,{651,74},binary},
                            {nil,{651,80}}}]},
                         {nil,{651,82}}}}]},
                     {nil,{651,84}}},
                    {nil,{652,32}},
                    {cons,
                     {653,32},
                     {tuple,
                      {653,33},
                      [{atom,{653,34},call},
                       {integer,{653,39},0},
                       {tuple,
                        {653,41},
                        [{atom,{653,42},atom},
                         {integer,{653,47},0},
                         {atom,{653,49},t1}]},
                       {cons,
                        {653,53},
                        {tuple,
                         {653,54},
                         [{atom,{653,55},var},
                          {integer,{653,59},0},
                          {atom,{653,61},'T'}]},
                        {nil,{653,65}}}]},
                     {nil,{653,67}}}]},
                  {cons,
                   {654,28},
                   {tuple,
                    {654,28},
                    [{atom,{654,29},clause},
                     {integer,{654,36},0},
                     {cons,
                      {654,38},
                      {tuple,
                       {654,39},
                       [{atom,{654,40},bin},
                        {integer,{654,44},0},
                        {nil,{654,46}}]},
                      {nil,{654,49}}},
                     {nil,{654,51}},
                     {cons,
                      {654,54},
                      {tuple,
                       {654,55},
                       [{atom,{654,56},atom},
                        {integer,{654,61},0},
                        {atom,{654,63},ok}]},
                      {nil,{654,66}}}]},
                   {nil,{654,68}}}}}]},
              {nil,{654,70}}}]},
           {nil,{654,72}}}]},
        {nil,{654,74}}}}}},
    {debug_line,655,72},
    {match,
     {655,5},
     {var,{655,5},'Wsf'},
     {'catch',
      {655,12},
      {call,
       {655,18},
       {atom,{655,18},run_forms},
       [{var,{655,28},'Forms'},
        {block,0,
         [{cons,{655,35},{atom,{655,36},bin_opt_info},{nil,{655,48}}}]}]}}},
    {debug_line,657,73},
    {match,
     {657,5},
     {tuple,
      {657,5},
      [{atom,{657,6},warnings},
       {cons,
        {658,6},
        {tuple,
         {658,7},
         [{atom,{658,8},none},
          {atom,{658,13},beam_ssa_bsm},
          {tuple,
           {658,26},
           [{atom,{658,27},unsuitable_call},
            {tuple,
             {659,24},
             [{tuple,
               {659,25},
               [{atom,{659,26},b_local},
                {tuple,
                 {659,34},
                 [{atom,{659,35},b_literal},{atom,{659,45},t1}]},
                {integer,{659,49},1}]},
              {tuple,
               {660,25},
               [{atom,{660,26},used_before_match},
                {tuple,
                 {661,26},
                 [{atom,{661,27},b_set},
                  {var,{661,33},'_'},
                  {var,{661,35},'_'},
                  {tuple,
                   {661,37},
                   [{atom,{661,38},bif},{atom,{661,42},byte_size}]},
                  {cons,{661,53},{var,{661,54},'_'},{nil,{661,55}}}]}]}]}]}]},
        {cons,
         {662,7},
         {tuple,
          {662,7},
          [{atom,{662,8},none},
           {atom,{662,13},beam_ssa_bsm},
           {tuple,
            {662,26},
            [{atom,{662,27},binary_created},
             {var,{662,42},'_'},
             {var,{662,44},'_'}]}]},
         {nil,{663,6}}}}]},
     {var,{663,11},'Wsf'}},
    {debug_line,665,74},
    {atom,{665,5},ok}]}]}.
{function,
 {667,1},
 bin_construction,1,
 [{clause,
   {667,1},
   [{var,{667,1},'_'}],
   [[{call,
      {667,1},
      {remote,{667,1},{atom,{667,1},fake},{atom,{667,1},is_beam_bif_info}},
      []}]],
   [{debug_line,667,75},{atom,{667,1},ignore}]},
  {clause,
   {667,1},
   [{var,{667,18},'Config'}],
   [[{call,
      {667,31},
      {remote,{667,31},{atom,{667,31},erlang},{atom,{667,31},is_list}},
      [{var,{667,39},'Config'}]}]],
   [{debug_line,668,76},
    {match,
     {668,5},
     {var,{668,5},'Ts'},
     {cons,
      {668,10},
      {tuple,
       {668,11},
       [{atom,{668,12},bin_construction},
        {bin,
         {669,5},
         [{bin_element,
           {669,7},
           {string,
            {669,7},
            "\n             t() ->\n                 Bin = <<1,2,3>>,\n                 <<Bin:4/binary>>.\n\n             x() ->\n                 Bin = <<1,2,3,7:4>>,\n                 <<Bin/binary>>.\n\n             y() -> <<0.5>>.\n             z() -> <<99999999999999/utf8>>.\n             w() -> <<0.5:1/float>>.\n\n             a() ->\n               Size = bad_size,\n               <<1:Size>>.\n           "},
           default,default}]},
        {nil,{686,12}},
        {tuple,
         {687,12},
         [{atom,{687,13},warnings},
          {cons,
           {687,22},
           {tuple,
            {687,23},
            [{tuple,{687,24},[{integer,{687,25},4},{integer,{687,27},18}]},
             {atom,{687,31},sys_core_fold},
             {tuple,
              {687,45},
              [{atom,{687,46},failed},{atom,{687,53},embedded_binary_size}]}]},
           {cons,
            {688,23},
            {tuple,
             {688,23},
             [{tuple,{688,24},[{integer,{688,25},8},{integer,{688,27},18}]},
              {atom,{688,31},sys_core_fold},
              {tuple,
               {688,45},
               [{atom,{688,46},failed},
                {tuple,
                 {688,53},
                 [{atom,{688,54},embedded_unit},
                  {integer,{688,68},8},
                  {integer,{688,70},28}]}]}]},
            {cons,
             {689,23},
             {tuple,
              {689,23},
              [{tuple,{689,24},[{integer,{689,25},10},{integer,{689,28},21}]},
               {atom,{689,32},v3_core},
               {tuple,
                {689,40},
                [{atom,{689,41},failed},{atom,{689,48},bad_binary}]}]},
             {cons,
              {690,23},
              {tuple,
               {690,23},
               [{tuple,{690,24},[{integer,{690,25},11},{integer,{690,28},21}]},
                {atom,{690,32},sys_core_fold},
                {tuple,
                 {690,46},
                 [{atom,{690,47},failed},{atom,{690,54},bad_unicode}]}]},
              {cons,
               {691,23},
               {tuple,
                {691,23},
                [{tuple,
                  {691,24},
                  [{integer,{691,25},12},{integer,{691,28},21}]},
                 {atom,{691,32},sys_core_fold},
                 {tuple,
                  {691,46},
                  [{atom,{691,47},failed},{atom,{691,54},bad_float_size}]}]},
               {cons,
                {692,23},
                {tuple,
                 {692,23},
                 [{tuple,
                   {692,24},
                   [{integer,{692,25},16},{integer,{692,28},18}]},
                  {atom,{692,32},beam_core_to_ssa},
                  {tuple,
                   {692,49},
                   [{atom,{692,50},failed},
                    {atom,{692,57},bad_segment_size}]}]},
                {nil,{693,22}}}}}}}}]}]},
      {nil,{693,25}}}},
    {debug_line,694,77},
    {match,
     {694,5},
     {nil,{694,5}},
     {call,
      {694,10},
      {atom,{694,10},run},
      [{var,{694,14},'Config'},{var,{694,22},'Ts'}]}},
    {debug_line,696,78},
    {atom,{696,5},ok}]}]}.
{function,
    {698,1},
    comprehensions,1,
    [{clause,
         {698,1},
         [{var,{698,1},'_'}],
         [[{call,
               {698,1},
               {remote,
                   {698,1},
                   {atom,{698,1},fake},
                   {atom,{698,1},is_beam_bif_info}},
               []}]],
         [{debug_line,698,79},{atom,{698,1},ignore}]},
     {clause,
         {698,1},
         [{var,{698,16},'Config'}],
         [[{call,
               {698,29},
               {remote,
                   {698,29},
                   {atom,{698,29},erlang},
                   {atom,{698,29},is_list}},
               [{var,{698,37},'Config'}]}]],
         [{debug_line,699,80},
          {match,
              {699,5},
              {var,{699,5},'Ts'},
              {cons,
                  {699,10},
                  {tuple,
                      {699,11},
                      [{atom,{699,12},tautologic_guards},
                       {bin,
                           {700,12},
                           [{bin_element,
                                {700,14},
                                {string,
                                    {700,14},
                                    "\n             f() -> [ true || true ].\n             g() -> << <<1>> || true >>.\n           "},
                                default,default}]},
                       {nil,{704,12}},
                       {nil,{704,16}}]},
                  {nil,{704,19}}}},
          {debug_line,705,81},
          {call,
              {705,5},
              {atom,{705,5},run},
              [{var,{705,9},'Config'},{var,{705,17},'Ts'}]},
          {debug_line,706,82},
          {atom,{706,5},ok}]}]}.
{function,
 {708,1},
 maps,1,
 [{clause,
   {708,1},
   [{var,{708,1},'_'}],
   [[{call,
      {708,1},
      {remote,{708,1},{atom,{708,1},fake},{atom,{708,1},is_beam_bif_info}},
      []}]],
   [{debug_line,708,83},{atom,{708,1},ignore}]},
  {clause,
   {708,1},
   [{var,{708,6},'Config'}],
   [[{call,
      {708,19},
      {remote,{708,19},{atom,{708,19},erlang},{atom,{708,19},is_list}},
      [{var,{708,27},'Config'}]}]],
   [{debug_line,709,84},
    {match,
     {709,5},
     {var,{709,5},'Ts'},
     {cons,
      {709,10},
      {tuple,
       {709,11},
       [{atom,{709,12},bad_map},
        {bin,
         {710,12},
         [{bin_element,
           {710,14},
           {string,
            {710,14},
            "\n             t() ->\n                 case maybe_map of\n                     #{} -> ok;\n                     not_map -> error\n                 end.\n             x() ->\n                 case true of\n                     #{}  -> error;\n                     true -> ok\n                 end.\n           "},
           default,default}]},
        {nil,{722,12}},
        {tuple,
         {723,12},
         [{atom,{723,13},warnings},
          {cons,
           {723,22},
           {tuple,
            {723,23},
            [{tuple,{723,24},[{integer,{723,25},3},{integer,{723,27},18}]},
             {atom,{723,31},sys_core_fold},
             {tuple,
              {723,45},
              [{atom,{723,46},nomatch},{atom,{723,54},no_clause}]}]},
           {cons,
            {724,23},
            {tuple,
             {724,23},
             [{tuple,{724,24},[{integer,{724,25},9},{integer,{724,27},22}]},
              {atom,{724,31},sys_core_fold},
              {tuple,
               {724,45},
               [{atom,{724,46},nomatch},{atom,{724,54},clause_type}]}]},
            {nil,{724,67}}}}]}]},
      {cons,
       {725,5},
       {tuple,
        {725,5},
        [{atom,{725,6},bad_map_src1},
         {bin,
          {726,12},
          [{bin_element,
            {726,14},
            {string,
             {726,14},
             "\n             t() ->\n                 M = {a,[]},\n                 {'EXIT',{badarg,_}} = (catch(M#{ a => 1 })),\n                 ok.\n           "},
            default,default}]},
         {nil,{732,12}},
         {tuple,
          {733,12},
          [{atom,{733,13},warnings},
           {cons,
            {733,22},
            {tuple,
             {733,23},
             [{tuple,{733,24},[{integer,{733,25},4},{integer,{733,27},48}]},
              {atom,{733,31},sys_core_fold},
              {tuple,
               {733,45},
               [{atom,{733,46},failed},{atom,{733,53},bad_map_update}]}]},
            {nil,{733,69}}}]}]},
       {cons,
        {734,5},
        {tuple,
         {734,5},
         [{atom,{734,6},bad_map_src2},
          {bin,
           {735,12},
           [{bin_element,
             {735,14},
             {string,
              {735,14},
              "\n             t() ->\n\t\t M = id({a,[]}),\n\t\t {'EXIT',{badarg,_}} = (catch(M#{ a => 1})),\n\t\t ok.\n\t     id(I) -> I.\n           "},
             default,default}]},
          {cons,{742,5},{atom,{742,6},inline},{nil,{742,12}}},
          {nil,{743,6}}]},
        {cons,
         {744,5},
         {tuple,
          {744,5},
          [{atom,{744,6},bad_map_src3},
           {bin,
            {745,12},
            [{bin_element,
              {745,14},
              {string,
               {745,14},
               "\n             t() ->\n                 {'EXIT',{badarg,_}} = (catch <<>>#{ a := 1}),\n                 ok.\n           "},
              default,default}]},
           {nil,{750,12}},
           {tuple,
            {751,12},
            [{atom,{751,13},warnings},
             {cons,
              {751,22},
              {tuple,
               {751,23},
               [{tuple,{751,24},[{integer,{751,25},3},{integer,{751,27},51}]},
                {atom,{751,31},sys_core_fold},
                {tuple,
                 {751,45},
                 [{atom,{751,46},failed},{atom,{751,53},bad_map_update}]}]},
              {nil,{751,69}}}]}]},
         {cons,
          {752,12},
          {tuple,
           {752,12},
           [{atom,{752,13},ok_map_literal_key},
            {bin,
             {753,12},
             [{bin_element,
               {753,14},
               {string,
                {753,14},
                "\n             t() ->\n\t\t V = id(1),\n\t\t M = id(#{ <<$h,$i>> => V }),\n\t\t V = case M of\n\t\t    #{ <<0:257>> := Val } -> Val;\n\t\t    #{ <<$h,$i>> := Val } -> Val\n\t\t end,\n\t\t ok.\n\t     id(I) -> I.\n           "},
               default,default}]},
            {nil,{764,12}},
            {nil,{765,5}}]},
          {cons,
           {766,12},
           {tuple,
            {766,12},
            [{atom,{766,13},repeated_keys1},
             {bin,
              {767,12},
              [{bin_element,
                {767,14},
                {string,
                 {767,14},
                 "\n             foo1() ->\n                 #{a=>1,\n                   b=> 2,\n                   a=>3}.\n             \n             bar1(M) ->\n                 M#{a=>1, b=> 2, a:=3}.\n             \n             baz1(M) ->\n                 M#{a=>1, b=> 2, a:=3}.\n             \n             foo2() ->\n                 #{\"a\"=>1, \"b\"=> 2, \"a\"=>3}.\n             \n             bar2(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             baz2(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             foo3() ->\n                 #{\"a\"=>1,\n                   \"b\"=> 2,\n                   \"a\"=>3}.\n             \n             bar3(M) ->\n                 M#{\"a\"=>1, \"b\"=> 2, \"a\":=3}.\n             \n             baz3(M) ->\n                 M#{<<\"a\">>=>1, <<\"b\">>=> 2, <<\"a\">>:=3}.\n           "},
                default,default}]},
             {nil,{799,12}},
             {tuple,
              {800,12},
              [{atom,{800,13},warnings},
               {cons,
                {800,22},
                {tuple,
                 {800,23},
                 [{tuple,
                   {800,24},
                   [{integer,{800,25},3},{integer,{800,27},20}]},
                  {atom,{800,31},v3_core},
                  {tuple,
                   {800,39},
                   [{atom,{800,40},map_key_repeated},{atom,{800,57},a}]}]},
                {cons,
                 {801,23},
                 {tuple,
                  {801,23},
                  [{tuple,
                    {801,24},
                    [{integer,{801,25},8},{integer,{801,27},21}]},
                   {atom,{801,31},v3_core},
                   {tuple,
                    {801,39},
                    [{atom,{801,40},map_key_repeated},{atom,{801,57},a}]}]},
                 {cons,
                  {802,23},
                  {tuple,
                   {802,23},
                   [{tuple,
                     {802,24},
                     [{integer,{802,25},11},{integer,{802,28},21}]},
                    {atom,{802,32},v3_core},
                    {tuple,
                     {802,40},
                     [{atom,{802,41},map_key_repeated},{atom,{802,58},a}]}]},
                  {cons,
                   {803,23},
                   {tuple,
                    {803,23},
                    [{tuple,
                      {803,24},
                      [{integer,{803,25},14},{integer,{803,28},20}]},
                     {atom,{803,32},v3_core},
                     {tuple,
                      {803,40},
                      [{atom,{803,41},map_key_repeated},
                       {string,{803,58},"a"}]}]},
                   {cons,
                    {804,23},
                    {tuple,
                     {804,23},
                     [{tuple,
                       {804,24},
                       [{integer,{804,25},17},{integer,{804,28},21}]},
                      {atom,{804,32},v3_core},
                      {tuple,
                       {804,40},
                       [{atom,{804,41},map_key_repeated},
                        {string,{804,58},"a"}]}]},
                    {cons,
                     {805,23},
                     {tuple,
                      {805,23},
                      [{tuple,
                        {805,24},
                        [{integer,{805,25},20},{integer,{805,28},21}]},
                       {atom,{805,32},v3_core},
                       {tuple,
                        {805,40},
                        [{atom,{805,41},map_key_repeated},
                         {string,{805,58},"a"}]}]},
                     {cons,
                      {806,23},
                      {tuple,
                       {806,23},
                       [{tuple,
                         {806,24},
                         [{integer,{806,25},23},{integer,{806,28},20}]},
                        {atom,{806,32},v3_core},
                        {tuple,
                         {806,40},
                         [{atom,{806,41},map_key_repeated},
                          {string,{806,58},"a"}]}]},
                      {cons,
                       {807,23},
                       {tuple,
                        {807,23},
                        [{tuple,
                          {807,24},
                          [{integer,{807,25},28},{integer,{807,28},21}]},
                         {atom,{807,32},v3_core},
                         {tuple,
                          {807,40},
                          [{atom,{807,41},map_key_repeated},
                           {string,{807,58},"a"}]}]},
                       {cons,
                        {808,23},
                        {tuple,
                         {808,23},
                         [{tuple,
                           {808,24},
                           [{integer,{808,25},31},{integer,{808,28},21}]},
                          {atom,{808,32},v3_core},
                          {tuple,
                           {808,40},
                           [{atom,{808,41},map_key_repeated},
                            {bin,
                             {808,58},
                             [{bin_element,
                               {808,60},
                               {string,{808,60},"a"},
                               default,default}]}]}]},
                        {nil,{809,22}}}}}}}}}}}]}]},
           {cons,
            {810,12},
            {tuple,
             {810,12},
             [{atom,{810,13},repeated_keys2},
              {bin,
               {811,12},
               [{bin_element,
                 {811,14},
                 {string,
                  {811,14},
                  "\n             foo4(K) ->\n                 #{\"a\"=>1, K => 1, \"b\"=> 2, \"a\"=>3, K=>2}.\n             \n             bar4(M,K) ->\n                 M#{a=>1, K =>1, b=> 2, a:=3, K=>2}.\n             \n             baz4(M,K) ->\n                 M#{<<\"a\">>=>1,\n                     K => 1, <<\"b\">>=> 2,\n                     <<\"a\">>:=3, K=>2}.\n             \n             foo5(K) ->\n                 #{{\"a\",1}=>1, K => 1, \"b\"=> 2, {\"a\",1}=>3, K=>2}.\n             \n             bar5(M,K) ->\n                 M#{{\"a\",<<\"b\">>}=>1, K =>1,\n                    \"b\"=> 2, {\"a\",<<\"b\">>}:=3, K=>2}.\n             \n             baz5(M,K) ->\n                 M#{{<<\"a\">>,1}=>1, K => 1,\n                    <<\"b\">>=> 2, {<<\"a\">>,1}:=3,K=>2}.\n             \n             foo6(K) ->\n                 #{#{\"a\"=>1}=>1, K => 1, \"b\"=> 2, #{\"a\"=>1}=>3, K=>2}.\n             \n             bar6(M,K) ->\n                 M#{#{\"a\"=><<\"b\">>}=>1, K =>1,\n                    \"b\"=> 2, #{\"a\"=><<\"b\">>}:=3, K=>2}.\n             \n             baz6(M,K) ->\n                 M#{#{<<\"a\">>=>1}=>1,\n                    K => 1,\n                    <<\"b\">>=> 2,\n                    #{<<\"a\">>=>1}:=3,K=>2}.\n             \n             foo7(K) ->\n                 M1 = #{#{\"a\"=>1}=>1, K => 1, \"b\"=> 2},\n                 M1#{#{\"a\"=>1}=>3, K=>2}.\n             \n             bar7(M,K) ->\n                 M1 = M#{#{\"a\"=><<\"b\">>}=>1, K =>1, \"b\"=> 2},\n                 M1#{#{\"a\"=><<\"b\">>}:=3, K=>2}.\n             \n             baz7(M,K) ->\n                 M1 = M#{#{<<\"a\">>=>1}=>1,\n                    K => 1,\n                    <<\"b\">>=> 2},\n                 M1#{#{<<\"a\">>=>1}:=3,K=>2}.\n          "},
                 default,default}]},
              {nil,{861,12}},
              {tuple,
               {862,12},
               [{atom,{862,13},warnings},
                {cons,
                 {862,22},
                 {tuple,
                  {862,23},
                  [{tuple,
                    {862,24},
                    [{integer,{862,25},3},{integer,{862,27},20}]},
                   {atom,{862,31},v3_core},
                   {tuple,
                    {862,39},
                    [{atom,{862,40},map_key_repeated},
                     {string,{862,57},"a"}]}]},
                 {cons,
                  {863,23},
                  {tuple,
                   {863,23},
                   [{tuple,
                     {863,24},
                     [{integer,{863,25},6},{integer,{863,27},21}]},
                    {atom,{863,31},v3_core},
                    {tuple,
                     {863,39},
                     [{atom,{863,40},map_key_repeated},{atom,{863,57},a}]}]},
                  {cons,
                   {864,23},
                   {tuple,
                    {864,23},
                    [{tuple,
                      {864,24},
                      [{integer,{864,25},9},{integer,{864,27},21}]},
                     {atom,{864,31},v3_core},
                     {tuple,
                      {864,39},
                      [{atom,{864,40},map_key_repeated},
                       {bin,
                        {864,57},
                        [{bin_element,
                          {864,59},
                          {string,{864,59},"a"},
                          default,default}]}]}]},
                   {cons,
                    {865,23},
                    {tuple,
                     {865,23},
                     [{tuple,
                       {865,24},
                       [{integer,{865,25},14},{integer,{865,28},20}]},
                      {atom,{865,32},v3_core},
                      {tuple,
                       {865,40},
                       [{atom,{865,41},map_key_repeated},
                        {tuple,
                         {865,58},
                         [{string,{865,59},"a"},{integer,{865,63},1}]}]}]},
                    {cons,
                     {866,23},
                     {tuple,
                      {866,23},
                      [{tuple,
                        {866,24},
                        [{integer,{866,25},17},{integer,{866,28},21}]},
                       {atom,{866,32},v3_core},
                       {tuple,
                        {866,40},
                        [{atom,{866,41},map_key_repeated},
                         {tuple,
                          {866,58},
                          [{string,{866,59},"a"},
                           {bin,
                            {866,63},
                            [{bin_element,
                              {866,65},
                              {string,{866,65},"b"},
                              default,default}]}]}]}]},
                     {cons,
                      {867,23},
                      {tuple,
                       {867,23},
                       [{tuple,
                         {867,24},
                         [{integer,{867,25},21},{integer,{867,28},21}]},
                        {atom,{867,32},v3_core},
                        {tuple,
                         {867,40},
                         [{atom,{867,41},map_key_repeated},
                          {tuple,
                           {867,58},
                           [{bin,
                             {867,59},
                             [{bin_element,
                               {867,61},
                               {string,{867,61},"a"},
                               default,default}]},
                            {integer,{867,67},1}]}]}]},
                      {cons,
                       {868,23},
                       {tuple,
                        {868,23},
                        [{tuple,
                          {868,24},
                          [{integer,{868,25},25},{integer,{868,28},20}]},
                         {atom,{868,32},v3_core},
                         {tuple,
                          {868,40},
                          [{atom,{868,41},map_key_repeated},
                           {map,
                            {868,58},
                            [{map_field_assoc,
                              {868,64},
                              {string,{868,60},"a"},
                              {integer,{868,67},1}}]}]}]},
                       {cons,
                        {869,23},
                        {tuple,
                         {869,23},
                         [{tuple,
                           {869,24},
                           [{integer,{869,25},28},{integer,{869,28},21}]},
                          {atom,{869,32},v3_core},
                          {tuple,
                           {869,40},
                           [{atom,{869,41},map_key_repeated},
                            {map,
                             {869,58},
                             [{map_field_assoc,
                               {869,64},
                               {string,{869,60},"a"},
                               {bin,
                                {869,67},
                                [{bin_element,
                                  {869,69},
                                  {string,{869,69},"b"},
                                  default,default}]}}]}]}]},
                        {cons,
                         {870,23},
                         {tuple,
                          {870,23},
                          [{tuple,
                            {870,24},
                            [{integer,{870,25},32},{integer,{870,28},21}]},
                           {atom,{870,32},v3_core},
                           {tuple,
                            {870,40},
                            [{atom,{870,41},map_key_repeated},
                             {map,
                              {870,58},
                              [{map_field_assoc,
                                {870,68},
                                {bin,
                                 {870,60},
                                 [{bin_element,
                                   {870,62},
                                   {string,{870,62},"a"},
                                   default,default}]},
                                {integer,{870,71},1}}]}]}]},
                         {nil,{871,22}}}}}}}}}}}]}]},
            {cons,
             {872,11},
             {tuple,
              {872,11},
              [{atom,{872,12},map_nomatch},
               {bin,
                {873,12},
                [{bin_element,
                  {873,13},
                  {string,
                   {873,13},
                   "match_map_1(#{}) ->\n    a;\nmatch_map_1(#{first := First}) ->\n    {b,First};\nmatch_map_1(#{first := First, second := Second}) ->\n    {c,First,Second}.\n\nmatch_map_1(#{}, A) ->\n    {a,A};\nmatch_map_1(#{first := First}, A) ->\n    {b,A,First};\nmatch_map_1(#{first := First, second := Second}, A) ->\n    {c,A,First,Second}.\n\nmatch_map_2(#{first := First}) ->\n    {b,First};\nmatch_map_2(#{first := First, second := Second}) ->\n    {c,First,Second}.\n\nmatch_map_2(#{first := First}, A, B) ->\n    {b,A,B,First};\nmatch_map_2(#{first := First, second := Second}, A, B) ->\n    {c,A,B,First,Second}.\n\nmatch_map_3([#{} | _]) ->\n    a;\nmatch_map_3([#{first := First} | _]) ->\n    {b,First};\nmatch_map_3([#{first := First, second := Second} | _]) ->\n    {c,First,Second}.\n\nmatch_map_4([#{first := First} | _]) ->\n    {b,First};\nmatch_map_4([#{first := First, second := Second} | _]) ->\n    {c,First,Second}."},
                  default,
                  [utf8]}]},
               {nil,{910,12}},
               {tuple,
                {911,12},
                [{atom,{911,13},warnings},
                 {cons,
                  {911,22},
                  {tuple,
                   {911,23},
                   [{tuple,
                     {911,24},
                     [{integer,{911,25},3},{integer,{911,27},1}]},
                    {atom,{911,30},beam_core_to_ssa},
                    {tuple,
                     {911,47},
                     [{atom,{911,48},nomatch},
                      {tuple,
                       {911,56},
                       [{atom,{911,57},shadow},{integer,{911,64},1}]}]}]},
                  {cons,
                   {912,23},
                   {tuple,
                    {912,23},
                    [{tuple,
                      {912,24},
                      [{integer,{912,25},10},{integer,{912,28},1}]},
                     {atom,{912,31},beam_core_to_ssa},
                     {tuple,
                      {912,48},
                      [{atom,{912,49},nomatch},
                       {tuple,
                        {912,57},
                        [{atom,{912,58},shadow},{integer,{912,65},8}]}]}]},
                   {cons,
                    {913,23},
                    {tuple,
                     {913,23},
                     [{tuple,
                       {913,24},
                       [{integer,{913,25},17},{integer,{913,28},1}]},
                      {atom,{913,31},beam_core_to_ssa},
                      {tuple,
                       {913,48},
                       [{atom,{913,49},nomatch},
                        {tuple,
                         {913,57},
                         [{atom,{913,58},shadow},{integer,{913,65},15}]}]}]},
                    {cons,
                     {914,23},
                     {tuple,
                      {914,23},
                      [{tuple,
                        {914,24},
                        [{integer,{914,25},22},{integer,{914,28},1}]},
                       {atom,{914,31},beam_core_to_ssa},
                       {tuple,
                        {914,48},
                        [{atom,{914,49},nomatch},
                         {tuple,
                          {914,57},
                          [{atom,{914,58},shadow},{integer,{914,65},20}]}]}]},
                     {cons,
                      {915,23},
                      {tuple,
                       {915,23},
                       [{tuple,
                         {915,24},
                         [{integer,{915,25},27},{integer,{915,28},1}]},
                        {atom,{915,31},beam_core_to_ssa},
                        {tuple,
                         {915,48},
                         [{atom,{915,49},nomatch},
                          {tuple,
                           {915,57},
                           [{atom,{915,58},shadow},{integer,{915,65},25}]}]}]},
                      {cons,
                       {916,23},
                       {tuple,
                        {916,23},
                        [{tuple,
                          {916,24},
                          [{integer,{916,25},34},{integer,{916,28},1}]},
                         {atom,{916,31},beam_core_to_ssa},
                         {tuple,
                          {916,48},
                          [{atom,{916,49},nomatch},
                           {tuple,
                            {916,57},
                            [{atom,{916,58},shadow},
                             {integer,{916,65},32}]}]}]},
                       {nil,{916,70}}}}}}}}]}]},
             {cons,
              {917,11},
              {tuple,
               {917,11},
               [{atom,{917,12},map_nowarn},
                {bin,
                 {922,12},
                 [{bin_element,
                   {922,13},
                   {string,
                    {922,13},
                    "%% The compiler does not detect this shadowing.\nmatch_map_nowarn_1([#{}]) -> no;\nmatch_map_nowarn_1([#{a := A}]) -> {a,A}.\n\n%% The guard in the first clause can fail.\nmatch_map_nowarn_2(#{}, X) when is_integer(X) -> {a,X};\nmatch_map_nowarn_2(#{b := B}, X) -> {b,X,B}.\n\n%% The first clause will fail to match if the second\n%% argument is not `x`.\nmatch_map_nowarn_3(#{}, x) -> a;\nmatch_map_nowarn_3(#{b := B}, y) -> {b,B}.\n\n%% The compiler does not detect this shadowing.\nmatch_map_nowarn_4(#{}, x) -> a;\nmatch_map_nowarn_4(#{b := B}, x) -> {b,B}."},
                   default,
                   [utf8]}]},
                {nil,{940,12}},
                {nil,{941,12}}]},
              {nil,{942,10}}}}}}}}}}}},
    {debug_line,943,85},
    {call,
     {943,5},
     {atom,{943,5},run},
     [{var,{943,9},'Config'},{var,{943,17},'Ts'}]},
    {debug_line,944,86},
    {atom,{944,5},ok}]}]}.
{function,
    {946,1},
    maps_bin_opt_info,1,
    [{clause,
         {946,1},
         [{var,{946,1},'_'}],
         [[{call,
               {946,1},
               {remote,
                   {946,1},
                   {atom,{946,1},fake},
                   {atom,{946,1},is_beam_bif_info}},
               []}]],
         [{debug_line,946,87},{atom,{946,1},ignore}]},
     {clause,
         {946,1},
         [{var,{946,19},'Config'}],
         [[{call,
               {946,32},
               {remote,
                   {946,32},
                   {atom,{946,32},erlang},
                   {atom,{946,32},is_list}},
               [{var,{946,40},'Config'}]}]],
         [{debug_line,947,88},
          {match,
              {947,5},
              {var,{947,5},'Ts'},
              {cons,
                  {947,10},
                  {tuple,
                      {947,11},
                      [{atom,{947,12},map_bsm},
                       {bin,
                           {948,12},
                           [{bin_element,
                                {948,14},
                                {string,
                                    {948,14},
                                    "\n             t1(<<0:8,7:8,T/binary>>,#{val := I}=M) ->\n                 t1(T, M#{val := I+1});\n             t1(<<_:8>>,M) ->\n                 M.\n           "},
                                default,default}]},
                       {cons,
                           {954,12},
                           {atom,{954,13},bin_opt_info},
                           {nil,{954,25}}},
                       {tuple,
                           {955,12},
                           [{atom,{955,13},warnings},
                            {cons,
                                {955,22},
                                {tuple,
                                    {955,23},
                                    [{integer,{955,24},3},
                                     {atom,{955,26},beam_ssa_bsm},
                                     {atom,{955,39},context_reused}]},
                                {nil,{955,54}}}]}]},
                  {nil,{955,57}}}},
          {debug_line,956,89},
          {match,
              {956,5},
              {nil,{956,5}},
              {call,
                  {956,10},
                  {atom,{956,10},run},
                  [{var,{956,14},'Config'},{var,{956,22},'Ts'}]}},
          {debug_line,957,90},
          {atom,{957,5},ok}]}]}.
{function,
 {959,1},
 redundant_boolean_clauses,1,
 [{clause,
   {959,1},
   [{var,{959,1},'_'}],
   [[{call,
      {959,1},
      {remote,{959,1},{atom,{959,1},fake},{atom,{959,1},is_beam_bif_info}},
      []}]],
   [{debug_line,959,91},{atom,{959,1},ignore}]},
  {clause,
   {959,1},
   [{var,{959,27},'Config'}],
   [[{call,
      {959,40},
      {remote,{959,40},{atom,{959,40},erlang},{atom,{959,40},is_list}},
      [{var,{959,48},'Config'}]}]],
   [{debug_line,960,92},
    {match,
     {960,5},
     {var,{960,5},'Ts'},
     {cons,
      {960,10},
      {tuple,
       {960,11},
       [{atom,{960,12},redundant_boolean_clauses},
        {bin,
         {961,12},
         [{bin_element,
           {961,14},
           {string,
            {961,14},
            "\n             t(X) ->\n                 case X == 0 of\n                     false -> no;\n                     false -> no;\n                     true -> yes\n                 end.\n           "},
           default,default}]},
        {nil,{969,12}},
        {tuple,
         {970,12},
         [{atom,{970,13},warnings},
          {cons,
           {970,22},
           {tuple,
            {970,23},
            [{tuple,{970,24},[{integer,{970,25},5},{integer,{970,27},22}]},
             {atom,{970,31},sys_core_fold},
             {tuple,
              {970,45},
              [{atom,{970,46},nomatch},{atom,{970,54},shadow}]}]},
           {nil,{970,62}}}]}]},
      {nil,{970,65}}}},
    {debug_line,971,93},
    {call,
     {971,5},
     {atom,{971,5},run},
     [{var,{971,9},'Config'},{var,{971,17},'Ts'}]},
    {debug_line,972,94},
    {atom,{972,5},ok}]}]}.
{function,
 {974,1},
 underscore,1,
 [{clause,
   {974,1},
   [{var,{974,1},'_'}],
   [[{call,
      {974,1},
      {remote,{974,1},{atom,{974,1},fake},{atom,{974,1},is_beam_bif_info}},
      []}]],
   [{debug_line,974,95},{atom,{974,1},ignore}]},
  {clause,
   {974,1},
   [{var,{974,12},'Config'}],
   [[{call,
      {974,25},
      {remote,{974,25},{atom,{974,25},erlang},{atom,{974,25},is_list}},
      [{var,{974,33},'Config'}]}]],
   [{debug_line,976,96},
    {match,
     {976,5},
     {var,{976,5},'S0'},
     {bin,
      {976,10},
      [{bin_element,
        {976,12},
        {string,
         {976,12},
         "\n            f(A) ->\n              _VAR1 = <<A>>,\n              _VAR2 = {ok,A},\n              _VAR3 = [A],\n              ok.\n            g(A) ->\n              _VAR1 = A/0,\n              _VAR2 = date(),\n              ok.\n            h() ->\n               _VAR1 = fun() -> ok end,\n              ok.\n            i(A) ->\n               _VAR1 = #{A=>42},\n              ok.\n\t "},
        default,default}]}},
    {debug_line,995,97},
    {match,
     {995,5},
     {var,{995,5},'Warnings'},
     {cons,
      {995,16},
      {tuple,
       {995,17},
       [{tuple,{995,18},[{integer,{995,19},3},{integer,{995,21},23}]},
        {atom,{995,25},sys_core_fold},
        {tuple,
         {995,39},
         [{atom,{995,40},ignored},{atom,{995,48},useless_building}]}]},
      {cons,
       {996,17},
       {tuple,
        {996,17},
        [{tuple,{996,18},[{integer,{996,19},4},{integer,{996,21},23}]},
         {atom,{996,25},sys_core_fold},
         {tuple,
          {996,39},
          [{atom,{996,40},ignored},{atom,{996,48},useless_building}]}]},
       {cons,
        {997,17},
        {tuple,
         {997,17},
         [{tuple,{997,18},[{integer,{997,19},5},{integer,{997,21},23}]},
          {atom,{997,25},sys_core_fold},
          {tuple,
           {997,39},
           [{atom,{997,40},ignored},{atom,{997,48},useless_building}]}]},
        {cons,
         {998,17},
         {tuple,
          {998,17},
          [{tuple,{998,18},[{integer,{998,19},8},{integer,{998,21},24}]},
           {atom,{998,25},sys_core_fold},
           {tuple,
            {998,39},
            [{atom,{998,40},ignored},
             {tuple,
              {998,48},
              [{atom,{998,49},result},
               {tuple,
                {998,56},
                [{atom,{998,57},erlang},
                 {atom,{998,64},'/'},
                 {integer,{998,68},2}]}]}]}]},
         {cons,
          {999,17},
          {tuple,
           {999,17},
           [{tuple,{999,18},[{integer,{999,19},9},{integer,{999,21},23}]},
            {atom,{999,25},sys_core_fold},
            {tuple,
             {999,39},
             [{atom,{999,40},ignored},
              {tuple,
               {999,48},
               [{atom,{999,49},no_effect},
                {tuple,
                 {999,59},
                 [{atom,{999,60},erlang},
                  {atom,{999,67},date},
                  {integer,{999,72},0}]}]}]}]},
          {cons,
           {1000,17},
           {tuple,
            {1000,17},
            [{tuple,{1000,18},[{integer,{1000,19},12},{integer,{1000,22},24}]},
             {atom,{1000,26},sys_core_fold},
             {tuple,
              {1000,40},
              [{atom,{1000,41},ignored},{atom,{1000,49},useless_building}]}]},
           {cons,
            {1001,17},
            {tuple,
             {1001,17},
             [{tuple,
               {1001,18},
               [{integer,{1001,19},15},{integer,{1001,22},24}]},
              {atom,{1001,26},sys_core_fold},
              {tuple,
               {1001,40},
               [{atom,{1001,41},ignored},{atom,{1001,49},useless_building}]}]},
            {nil,{1001,67}}}}}}}}}},
    {debug_line,1006,98},
    {match,
     {1006,5},
     {var,{1006,5},'Ts0'},
     {cons,
      {1006,11},
      {tuple,
       {1006,12},
       [{atom,{1006,13},underscore0},
        {var,{1006,25},'S0'},
        {nil,{1006,28}},
        {nil,{1006,31}}]},
      {nil,{1006,34}}}},
    {debug_line,1007,99},
    {match,
     {1007,5},
     {nil,{1007,5}},
     {call,
      {1007,10},
      {atom,{1007,10},run},
      [{var,{1007,14},'Config'},{var,{1007,22},'Ts0'}]}},
    {debug_line,1011,100},
    {match,
     {1011,5},
     {var,{1011,5},'S1'},
     {call,
      {1011,10},
      {remote,{1011,12},{atom,{1011,10},re},{atom,{1011,13},replace}},
      [{var,{1011,21},'S0'},
       {block,0,[{string,{1011,25},"_VAR\\d+"}]},
       {block,0,[{string,{1011,37},"_"}]},
       {block,0,[{cons,{1011,42},{atom,{1011,43},global},{nil,{1011,49}}}]}]}},
    {debug_line,1012,101},
    {call,
     {1012,5},
     {remote,{1012,7},{atom,{1012,5},io},{atom,{1012,8},format}},
     [{block,0,[{string,{1012,15},"~s\n"}]},
      {block,0,[{cons,{1012,23},{var,{1012,24},'S1'},{nil,{1012,26}}}]}]},
    {debug_line,1013,102},
    {match,
     {1013,5},
     {var,{1013,5},'Ts1'},
     {cons,
      {1013,11},
      {tuple,
       {1013,12},
       [{atom,{1013,13},underscore1},
        {var,{1013,25},'S1'},
        {nil,{1013,28}},
        {nil,{1013,31}}]},
      {nil,{1013,34}}}},
    {debug_line,1014,103},
    {match,
     {1014,5},
     {nil,{1014,5}},
     {call,
      {1014,10},
      {atom,{1014,10},run},
      [{var,{1014,14},'Config'},{var,{1014,22},'Ts1'}]}},
    {debug_line,1017,104},
    {match,
     {1017,5},
     {var,{1017,5},'S2'},
     {call,
      {1017,10},
      {remote,{1017,12},{atom,{1017,10},re},{atom,{1017,13},replace}},
      [{var,{1017,21},'S0'},
       {block,0,[{string,{1017,25},"_VAR\\d = "}]},
       {block,0,[{string,{1017,39},"        "}]},
       {block,0,[{cons,{1017,51},{atom,{1017,52},global},{nil,{1017,58}}}]}]}},
    {debug_line,1018,105},
    {call,
     {1018,5},
     {remote,{1018,7},{atom,{1018,5},io},{atom,{1018,8},format}},
     [{block,0,[{string,{1018,15},"~s\n"}]},
      {block,0,[{cons,{1018,23},{var,{1018,24},'S2'},{nil,{1018,26}}}]}]},
    {debug_line,1019,106},
    {match,
     {1019,5},
     {var,{1019,5},'Ts2'},
     {cons,
      {1019,11},
      {tuple,
       {1019,12},
       [{atom,{1019,13},underscore2},
        {var,{1019,25},'S2'},
        {nil,{1019,28}},
        {tuple,
         {1019,31},
         [{atom,{1019,32},warnings},{var,{1019,41},'Warnings'}]}]},
      {nil,{1019,51}}}},
    {debug_line,1020,107},
    {match,
     {1020,5},
     {nil,{1020,5}},
     {call,
      {1020,10},
      {atom,{1020,10},run},
      [{var,{1020,14},'Config'},{var,{1020,22},'Ts2'}]}},
    {debug_line,1025,108},
    {match,
     {1025,5},
     {var,{1025,5},'S3'},
     {call,
      {1025,10},
      {remote,{1025,12},{atom,{1025,10},re},{atom,{1025,13},replace}},
      [{var,{1025,21},'S0'},
       {block,0,[{string,{1025,25},"_(?=VAR\\d+)"}]},
       {block,0,[{string,{1025,41}," "}]},
       {block,0,[{cons,{1025,46},{atom,{1025,47},global},{nil,{1025,53}}}]}]}},
    {debug_line,1026,109},
    {call,
     {1026,5},
     {remote,{1026,7},{atom,{1026,5},io},{atom,{1026,8},format}},
     [{block,0,[{string,{1026,15},"~s\n"}]},
      {block,0,[{cons,{1026,23},{var,{1026,24},'S3'},{nil,{1026,26}}}]}]},
    {debug_line,1027,110},
    {match,
     {1027,5},
     {var,{1027,5},'Ts3'},
     {cons,
      {1027,11},
      {tuple,
       {1027,12},
       [{atom,{1027,13},underscore2},
        {var,{1027,25},'S3'},
        {nil,{1027,28}},
        {tuple,
         {1027,31},
         [{atom,{1027,32},warnings},{var,{1027,41},'Warnings'}]}]},
      {nil,{1027,51}}}},
    {debug_line,1028,111},
    {match,
     {1028,5},
     {nil,{1028,5}},
     {call,
      {1028,10},
      {atom,{1028,10},run},
      [{var,{1028,14},'Config'},{var,{1028,22},'Ts3'}]}},
    {debug_line,1030,112},
    {atom,{1030,5},ok}]}]}.
{function,
    {1032,1},
    no_warnings,1,
    [{clause,
         {1032,1},
         [{var,{1032,1},'_'}],
         [[{call,
               {1032,1},
               {remote,
                   {1032,1},
                   {atom,{1032,1},fake},
                   {atom,{1032,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1032,113},{atom,{1032,1},ignore}]},
     {clause,
         {1032,1},
         [{var,{1032,13},'Config'}],
         [[{call,
               {1032,26},
               {remote,
                   {1032,26},
                   {atom,{1032,26},erlang},
                   {atom,{1032,26},is_list}},
               [{var,{1032,34},'Config'}]}]],
         [{debug_line,1033,114},
          {match,
              {1033,5},
              {var,{1033,5},'Ts'},
              {cons,
                  {1033,10},
                  {tuple,
                      {1033,11},
                      [{atom,{1033,12},no_warnings},
                       {bin,
                           {1034,12},
                           [{bin_element,
                                {1034,14},
                                {string,
                                    {1034,14},
                                    "-record(r, {s=ordsets:new(),a,b}).\n\n              a() ->\n                R = #r{},\t\t\t%No warning expected.\n                {R#r.a,R#r.b}.\n\n              b(X) ->\n                T = true,\n                Var = [X],\t\t\t%No warning expected.\n                case T of\n\t          false -> Var;\n                  true -> []\n                end.\n\n              c() ->\n                R0 = {r,\"abc\",undefined,os:timestamp()}, %No warning.\n                case R0 of\n\t          {r,V1,_V2,V3} -> {r,V1,\"def\",V3}\n                end.\n\n              d(In0, Bool) ->\n                {In1,Int} = case id(Bool) of\n                              false -> {In0,0}\n                            end,\n                [In1,Int].\n\n              id(I) -> I.\n           "},
                                default,default}]},
                       {nil,{1062,12}},
                       {nil,{1063,12}}]},
                  {nil,{1063,15}}}},
          {debug_line,1064,115},
          {call,
              {1064,5},
              {atom,{1064,5},run},
              [{var,{1064,9},'Config'},{var,{1064,17},'Ts'}]},
          {debug_line,1065,116},
          {atom,{1065,5},ok}]}]}.
{function,
 {1067,1},
 bit_syntax,1,
 [{clause,
   {1067,1},
   [{var,{1067,1},'_'}],
   [[{call,
      {1067,1},
      {remote,{1067,1},{atom,{1067,1},fake},{atom,{1067,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1067,117},{atom,{1067,1},ignore}]},
  {clause,
   {1067,1},
   [{var,{1067,12},'Config'}],
   [],
   [{debug_line,1068,118},
    {match,
     {1068,5},
     {var,{1068,5},'Ts'},
     {cons,
      {1068,10},
      {tuple,
       {1068,11},
       [{atom,{1068,13},bit_syntax},
        {bin,
         {1069,12},
         [{bin_element,
           {1069,14},
           {string,
            {1069,14},
            "\n              a(<<-1>>) -> ok;\n              a(<<1023>>) -> ok;\n              a(<<777/signed>>) -> ok;\n              a(<<a/binary>>) -> ok;\n              a(<<a/integer>>) -> ok;\n              a(<<a/float>>) -> ok;\n              a(<<a/utf8>>) -> ok;\n              a(<<a/utf16>>) -> ok;\n              a(<<a/utf32>>) -> ok;\n              a(<<a/utf32>>) -> ok.\n              b(Bin) -> Sz = bad, <<42:Sz>> = Bin.\n              c(Sz, Bin) ->\n                case Bin of\n                  <<-42:Sz/unsigned>> -> ok;\n                  <<42:Sz/float>> -> ok;\n                  <<42:Sz/binary>> -> ok\n                end.\n              d(<<16#110000/utf8>>) -> error;\n              d(_) -> ok.\n             "},
           default,default}]},
        {nil,{1090,5}},
        {tuple,
         {1091,12},
         [{atom,{1091,13},warnings},
          {cons,
           {1091,22},
           {tuple,
            {1091,23},
            [{tuple,{1091,24},[{integer,{1091,25},2},{integer,{1091,27},15}]},
             {atom,{1091,31},sys_core_fold},
             {tuple,
              {1091,45},
              [{atom,{1091,46},nomatch},{atom,{1091,54},no_clause}]}]},
           {cons,
            {1092,23},
            {tuple,
             {1092,23},
             [{tuple,{1092,24},[{integer,{1092,25},2},{integer,{1092,27},19}]},
              {atom,{1092,31},sys_core_fold},
              {tuple,
               {1092,45},
               [{atom,{1092,46},nomatch},
                {tuple,
                 {1092,54},
                 [{atom,{1092,55},bit_syntax_unsigned},
                  {op,{1092,75},'-',{integer,{1092,76},1}}]}]}]},
            {cons,
             {1093,23},
             {tuple,
              {1093,23},
              [{tuple,
                {1093,24},
                [{integer,{1093,25},3},{integer,{1093,27},19}]},
               {atom,{1093,31},sys_core_fold},
               {tuple,
                {1093,45},
                [{atom,{1093,46},nomatch},
                 {tuple,
                  {1093,54},
                  [{atom,{1093,55},bit_syntax_truncated},
                   {atom,{1094,46},unsigned},
                   {integer,{1094,55},1023},
                   {integer,{1094,60},8}]}]}]},
             {cons,
              {1095,23},
              {tuple,
               {1095,23},
               [{tuple,
                 {1095,24},
                 [{integer,{1095,25},4},{integer,{1095,27},19}]},
                {atom,{1095,31},sys_core_fold},
                {tuple,
                 {1095,45},
                 [{atom,{1095,46},nomatch},
                  {tuple,
                   {1095,54},
                   [{atom,{1095,55},bit_syntax_truncated},
                    {atom,{1096,46},signed},
                    {integer,{1096,53},777},
                    {integer,{1096,57},8}]}]}]},
              {cons,
               {1097,23},
               {tuple,
                {1097,23},
                [{tuple,
                  {1097,24},
                  [{integer,{1097,25},5},{integer,{1097,27},19}]},
                 {atom,{1097,31},sys_core_fold},
                 {tuple,
                  {1097,45},
                  [{atom,{1097,46},nomatch},
                   {tuple,
                    {1097,54},
                    [{atom,{1097,55},bit_syntax_type},
                     {atom,{1097,71},a},
                     {atom,{1097,73},binary}]}]}]},
               {cons,
                {1098,23},
                {tuple,
                 {1098,23},
                 [{tuple,
                   {1098,24},
                   [{integer,{1098,25},6},{integer,{1098,27},19}]},
                  {atom,{1098,31},sys_core_fold},
                  {tuple,
                   {1098,45},
                   [{atom,{1098,46},nomatch},
                    {tuple,
                     {1098,54},
                     [{atom,{1098,55},bit_syntax_type},
                      {atom,{1098,71},a},
                      {atom,{1098,73},integer}]}]}]},
                {cons,
                 {1099,23},
                 {tuple,
                  {1099,23},
                  [{tuple,
                    {1099,24},
                    [{integer,{1099,25},7},{integer,{1099,27},19}]},
                   {atom,{1099,31},sys_core_fold},
                   {tuple,
                    {1099,45},
                    [{atom,{1099,46},nomatch},
                     {tuple,
                      {1099,54},
                      [{atom,{1099,55},bit_syntax_type},
                       {atom,{1099,71},a},
                       {atom,{1099,73},float}]}]}]},
                 {cons,
                  {1100,23},
                  {tuple,
                   {1100,23},
                   [{tuple,
                     {1100,24},
                     [{integer,{1100,25},8},{integer,{1100,27},19}]},
                    {atom,{1100,31},sys_core_fold},
                    {tuple,
                     {1100,45},
                     [{atom,{1100,46},nomatch},
                      {tuple,
                       {1100,54},
                       [{atom,{1100,55},bit_syntax_type},
                        {atom,{1100,71},a},
                        {atom,{1100,73},utf8}]}]}]},
                  {cons,
                   {1101,23},
                   {tuple,
                    {1101,23},
                    [{tuple,
                      {1101,24},
                      [{integer,{1101,25},9},{integer,{1101,27},19}]},
                     {atom,{1101,31},sys_core_fold},
                     {tuple,
                      {1101,45},
                      [{atom,{1101,46},nomatch},
                       {tuple,
                        {1101,54},
                        [{atom,{1101,55},bit_syntax_type},
                         {atom,{1101,71},a},
                         {atom,{1101,73},utf16}]}]}]},
                   {cons,
                    {1102,23},
                    {tuple,
                     {1102,23},
                     [{tuple,
                       {1102,24},
                       [{integer,{1102,25},10},{integer,{1102,28},19}]},
                      {atom,{1102,32},sys_core_fold},
                      {tuple,
                       {1102,46},
                       [{atom,{1102,47},nomatch},
                        {tuple,
                         {1102,55},
                         [{atom,{1102,56},bit_syntax_type},
                          {atom,{1102,72},a},
                          {atom,{1102,74},utf32}]}]}]},
                    {cons,
                     {1103,23},
                     {tuple,
                      {1103,23},
                      [{tuple,
                        {1103,24},
                        [{integer,{1103,25},11},{integer,{1103,28},19}]},
                       {atom,{1103,32},sys_core_fold},
                       {tuple,
                        {1103,46},
                        [{atom,{1103,47},nomatch},
                         {tuple,
                          {1103,55},
                          [{atom,{1103,56},bit_syntax_type},
                           {atom,{1103,72},a},
                           {atom,{1103,74},utf32}]}]}]},
                     {cons,
                      {1104,23},
                      {tuple,
                       {1104,23},
                       [{tuple,
                         {1104,24},
                         [{integer,{1104,25},12},{integer,{1104,28},35}]},
                        {atom,{1104,32},sys_core_fold},
                        {tuple,
                         {1104,46},
                         [{atom,{1104,47},nomatch},
                          {atom,{1104,55},no_clause}]}]},
                      {cons,
                       {1105,23},
                       {tuple,
                        {1105,23},
                        [{tuple,
                          {1105,24},
                          [{integer,{1105,25},12},{integer,{1105,28},37}]},
                         {atom,{1105,32},sys_core_fold},
                         {tuple,
                          {1105,46},
                          [{atom,{1105,47},nomatch},
                           {tuple,
                            {1105,55},
                            [{atom,{1105,56},bit_syntax_size},
                             {atom,{1105,72},bad}]}]}]},
                       {cons,
                        {1106,23},
                        {tuple,
                         {1106,23},
                         [{tuple,
                           {1106,24},
                           [{integer,{1106,25},15},{integer,{1106,28},21}]},
                          {atom,{1106,32},sys_core_fold},
                          {tuple,
                           {1106,46},
                           [{atom,{1106,47},nomatch},
                            {tuple,
                             {1106,55},
                             [{atom,{1106,56},bit_syntax_unsigned},
                              {op,{1106,76},'-',{integer,{1106,77},42}}]}]}]},
                        {cons,
                         {1107,23},
                         {tuple,
                          {1107,23},
                          [{tuple,
                            {1107,24},
                            [{integer,{1107,25},17},{integer,{1107,28},21}]},
                           {atom,{1107,32},sys_core_fold},
                           {tuple,
                            {1107,46},
                            [{atom,{1107,47},nomatch},
                             {tuple,
                              {1107,55},
                              [{atom,{1107,56},bit_syntax_type},
                               {integer,{1107,72},42},
                               {atom,{1107,75},binary}]}]}]},
                         {cons,
                          {1108,23},
                          {tuple,
                           {1108,23},
                           [{tuple,
                             {1108,24},
                             [{integer,{1108,25},19},{integer,{1108,28},19}]},
                            {atom,{1108,32},sys_core_fold},
                            {tuple,
                             {1108,46},
                             [{atom,{1108,47},nomatch},
                              {tuple,
                               {1108,55},
                               [{atom,{1108,56},bit_syntax_unicode},
                                {integer,{1108,75},1114112}]}]}]},
                          {nil,{1109,22}}}}}}}}}}}}}}}}}}]}]},
      {nil,{1110,12}}}},
    {debug_line,1111,119},
    {call,
     {1111,5},
     {atom,{1111,5},run},
     [{var,{1111,9},'Config'},{var,{1111,17},'Ts'}]},
    {debug_line,1112,120},
    {atom,{1112,5},ok}]}]}.
{function,
 {1114,1},
 inlining,1,
 [{clause,
   {1114,1},
   [{var,{1114,1},'_'}],
   [[{call,
      {1114,1},
      {remote,{1114,1},{atom,{1114,1},fake},{atom,{1114,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1114,121},{atom,{1114,1},ignore}]},
  {clause,
   {1114,1},
   [{var,{1114,10},'Config'}],
   [],
   [{debug_line,1117,122},
    {match,
     {1117,5},
     {var,{1117,5},'Ts'},
     {cons,
      {1117,10},
      {tuple,
       {1117,11},
       [{atom,{1117,12},inlining_1},
        {bin,
         {1118,12},
         [{bin_element,
           {1118,14},
           {string,
            {1118,14},
            "-compile(inline).\n              compute1(X) -> add(X, 0).\n              add(1, 0) -> 1;\n              add(1, Y) -> 1 + Y;\n              add(X, Y) -> X + Y.\n           "},
           default,default}]},
        {nil,{1124,12}},
        {nil,{1125,12}}]},
      {cons,
       {1126,4},
       {tuple,
        {1126,4},
        [{atom,{1126,5},inlining_2},
         {bin,
          {1127,12},
          [{bin_element,
            {1127,14},
            {string,
             {1127,14},
             "-compile({inline,[add/2]}).\n              compute1(X) -> add(X, 0).\n              add(1, 0) -> 1;\n              add(1, Y) -> 1 + Y;\n              add(X, Y) -> X + Y.\n           "},
            default,default}]},
         {nil,{1133,12}},
         {nil,{1134,12}}]},
       {nil,{1135,3}}}}},
    {debug_line,1136,123},
    {call,
     {1136,5},
     {atom,{1136,5},run},
     [{var,{1136,9},'Config'},{var,{1136,17},'Ts'}]},
    {debug_line,1137,124},
    {atom,{1137,5},ok}]}]}.
{function,
    {1139,1},
    tuple_calls,1,
    [{clause,
         {1139,1},
         [{var,{1139,1},'_'}],
         [[{call,
               {1139,1},
               {remote,
                   {1139,1},
                   {atom,{1139,1},fake},
                   {atom,{1139,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1139,125},{atom,{1139,1},ignore}]},
     {clause,
         {1139,1},
         [{var,{1139,13},'Config'}],
         [],
         [{debug_line,1141,126},
          {match,
              {1141,5},
              {var,{1141,5},'Ts'},
              {cons,
                  {1141,10},
                  {tuple,
                      {1141,11},
                      [{atom,{1141,12},inlining_1},
                       {bin,
                           {1142,12},
                           [{bin_element,
                                {1142,14},
                                {string,
                                    {1142,14},
                                    "-compile(tuple_calls).\n              dispatch(X) ->\n                (list_to_atom(\"prefix_\" ++\n                atom_to_list(suffix))):doit(X).\n           "},
                                default,default}]},
                       {nil,{1147,12}},
                       {nil,{1148,12}}]},
                  {nil,{1149,3}}}},
          {debug_line,1150,127},
          {call,
              {1150,5},
              {atom,{1150,5},run},
              [{var,{1150,9},'Config'},{var,{1150,17},'Ts'}]},
          {debug_line,1151,128},
          {atom,{1151,5},ok}]}]}.
{function,
 {1153,1},
 recv_opt_info,1,
 [{clause,
   {1153,1},
   [{var,{1153,1},'_'}],
   [[{call,
      {1153,1},
      {remote,{1153,1},{atom,{1153,1},fake},{atom,{1153,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1153,129},{atom,{1153,1},ignore}]},
  {clause,
   {1153,1},
   [{var,{1153,15},'Config'}],
   [[{call,
      {1153,28},
      {remote,{1153,28},{atom,{1153,28},erlang},{atom,{1153,28},is_list}},
      [{var,{1153,36},'Config'}]}]],
   [{debug_line,1154,130},
    {match,
     {1154,5},
     {var,{1154,5},'Code'},
     {bin,
      {1154,12},
      [{bin_element,
        {1154,14},
        {string,
         {1154,14},
         "\n                simple_receive() ->\n                    receive\n                        Message -> handle:msg(Message)\n                    end.\n\n                selective_receive(Tag, Message) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                cross_function_receive() ->\n                    cross_function_receive_1(make_ref()).\n\n                cross_function_receive_1(Tag) ->\n                    receive\n                        {Tag, Message} -> handle:msg(Message)\n                    end.\n\n                optimized_receive(Process, Request) ->\n                    MRef = monitor(process, Process),\n                    Process ! {self(), MRef, Request},\n                    receive\n                        {MRef, Reply} ->\n                            erlang:demonitor(MRef, [flush]),\n                            handle:reply(Reply);\n                        {'DOWN', MRef, _, _, Reason} ->\n                            handle:error(Reason)\n                    end.\n           "},
        default,default}]}},
    {debug_line,1185,131},
    {match,
     {1185,5},
     {var,{1185,5},'Ws'},
     {'catch',
      {1185,11},
      {call,
       {1185,17},
       {atom,{1185,17},run_test},
       [{var,{1185,26},'Config'},
        {var,{1185,34},'Code'},
        {block,0,
         [{cons,
           {1185,40},
           {atom,{1185,41},recv_opt_info},
           {nil,{1185,54}}}]}]}}},
    {debug_line,1190,132},
    {match,
     {1190,5},
     {tuple,
      {1190,5},
      [{atom,{1190,6},warnings},
       {cons,
        {1191,9},
        {tuple,
         {1192,10},
         [{integer,{1192,11},3},
          {atom,{1192,13},beam_ssa_recv},
          {atom,{1192,27},matches_any_message}]},
        {cons,
         {1194,10},
         {tuple,
          {1194,10},
          [{integer,{1194,11},8},
           {atom,{1194,13},beam_ssa_recv},
           {atom,{1194,27},unoptimized_selective_receive}]},
         {cons,
          {1195,10},
          {tuple,
           {1195,10},
           [{integer,{1195,11},13},
            {atom,{1195,14},beam_ssa_recv},
            {atom,{1195,28},reserved_receive_marker}]},
          {cons,
           {1197,10},
           {tuple,
            {1197,10},
            [{integer,{1197,11},13},
             {atom,{1197,14},beam_ssa_recv},
             {tuple,
              {1197,28},
              [{atom,{1197,29},passed_marker},{var,{1197,43},'_'}]}]},
           {cons,
            {1199,10},
            {tuple,
             {1199,10},
             [{integer,{1199,11},16},
              {atom,{1199,14},beam_ssa_recv},
              {tuple,
               {1199,28},
               [{atom,{1199,29},used_receive_marker},
                {tuple,
                 {1199,49},
                 [{atom,{1199,50},parameter},{integer,{1199,60},1}]}]}]},
            {cons,
             {1201,10},
             {tuple,
              {1201,10},
              [{integer,{1201,11},21},
               {atom,{1201,14},beam_ssa_recv},
               {atom,{1201,28},reserved_receive_marker}]},
             {cons,
              {1202,10},
              {tuple,
               {1202,10},
               [{integer,{1202,11},23},
                {atom,{1202,14},beam_ssa_recv},
                {tuple,
                 {1202,28},
                 [{atom,{1202,29},used_receive_marker},{var,{1202,49},'_'}]}]},
              {nil,{1202,52}}}}}}}}}]},
     {var,{1202,57},'Ws'}},
    {debug_line,1205,133},
    {match,
     {1205,5},
     {nil,{1205,5}},
     {'catch',
      {1205,11},
      {call,
       {1205,17},
       {atom,{1205,17},run_test},
       [{var,{1205,26},'Config'},{var,{1205,34},'Code'},{nil,{1205,40}}]}}},
    {debug_line,1213,134},
    {match,
     {1213,5},
     {var,{1213,5},'Forms'},
     {cons,
      {1213,13},
      {tuple,
       {1213,14},
       [{atom,{1213,15},attribute},
        {integer,{1213,25},0},
        {atom,{1213,27},module},
        {atom,{1213,34},nolocation_recv}]},
      {cons,
       {1214,14},
       {tuple,
        {1214,14},
        [{atom,{1214,15},attribute},
         {integer,{1214,25},0},
         {atom,{1214,27},export},
         {cons,
          {1214,34},
          {tuple,{1214,35},[{atom,{1214,36},t1},{integer,{1214,39},0}]},
          {nil,{1214,41}}}]},
       {cons,
        {1215,14},
        {tuple,
         {1215,14},
         [{atom,{1215,15},function},
          {integer,{1215,24},0},
          {atom,{1215,26},t1},
          {integer,{1215,29},0},
          {cons,
           {1216,18},
           {tuple,
            {1216,19},
            [{atom,{1216,20},clause},
             {integer,{1216,27},0},
             {nil,{1216,29}},
             {nil,{1216,32}},
             {cons,
              {1217,23},
              {tuple,
               {1217,24},
               [{atom,{1217,25},'receive'},
                {integer,{1217,35},0},
                {cons,
                 {1218,28},
                 {tuple,
                  {1218,29},
                  [{atom,{1218,30},clause},
                   {integer,{1218,37},0},
                   {cons,
                    {1219,33},
                    {tuple,
                     {1219,34},
                     [{atom,{1219,35},var},
                      {integer,{1219,39},0},
                      {atom,{1219,41},'Msg'}]},
                    {nil,{1219,47}}},
                   {nil,{1220,33}},
                   {cons,
                    {1221,33},
                    {tuple,
                     {1221,34},
                     [{atom,{1221,35},call},
                      {integer,{1221,40},0},
                      {tuple,
                       {1222,38},
                       [{atom,{1222,39},remote},
                        {integer,{1222,46},0},
                        {tuple,
                         {1222,48},
                         [{atom,{1222,49},atom},
                          {integer,{1222,54},0},
                          {atom,{1222,56},handle}]},
                        {tuple,
                         {1222,64},
                         [{atom,{1222,65},atom},
                          {integer,{1222,70},0},
                          {atom,{1222,72},msg}]}]},
                      {cons,
                       {1223,38},
                       {tuple,
                        {1223,39},
                        [{atom,{1223,40},var},
                         {integer,{1223,44},0},
                         {atom,{1223,46},'Msg'}]},
                       {nil,{1223,52}}}]},
                    {nil,{1223,54}}}]},
                 {nil,{1223,56}}}]},
              {nil,{1223,58}}}]},
           {nil,{1223,60}}}]},
        {nil,{1224,5}}}}}},
    {debug_line,1226,135},
    {match,
     {1226,5},
     {var,{1226,5},'Wsf'},
     {'catch',
      {1226,12},
      {call,
       {1226,18},
       {atom,{1226,18},run_forms},
       [{var,{1226,28},'Forms'},
        {block,0,
         [{cons,
           {1226,35},
           {atom,{1226,36},recv_opt_info},
           {nil,{1226,49}}}]}]}}},
    {debug_line,1227,136},
    {match,
     {1227,5},
     {tuple,
      {1227,5},
      [{atom,{1227,6},warnings},
       {cons,
        {1227,16},
        {tuple,
         {1227,17},
         [{atom,{1227,18},none},
          {atom,{1227,23},beam_ssa_recv},
          {atom,{1227,37},matches_any_message}]},
        {nil,{1227,57}}}]},
     {var,{1227,62},'Wsf'}},
    {debug_line,1229,137},
    {atom,{1229,5},ok}]}]}.
{function,
 {1232,1},
 opportunistic_warnings,1,
 [{clause,
   {1232,1},
   [{var,{1232,1},'_'}],
   [[{call,
      {1232,1},
      {remote,{1232,1},{atom,{1232,1},fake},{atom,{1232,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1232,138},{atom,{1232,1},ignore}]},
  {clause,
   {1232,1},
   [{var,{1232,24},'Config'}],
   [],
   [{debug_line,1233,139},
    {match,
     {1233,5},
     {var,{1233,5},'Source'},
     {bin,
      {1233,14},
      [{bin_element,
        {1233,16},
        {string,
         {1233,16},
         "m(_) -> ok;\n                m(_) -> error.\n\n                a() -> <<0.5>>.\n                b() -> Bin = <<1,2,3,7:4>>, <<Bin/binary>>.\n                c() -> Size = bad_size, <<1:Size>>.\n\n                i() -> {a,b,c}, ok.\n           "},
        default,default}]}},
    {debug_line,1244,140},
    {match,
     {1244,5},
     {var,{1244,5},'Ts1'},
     {cons,
      {1244,11},
      {tuple,
       {1244,12},
       [{atom,{1244,13},nothing_disabled},
        {var,{1245,13},'Source'},
        {nil,{1246,13}},
        {tuple,
         {1247,13},
         [{atom,{1247,14},warnings},
          {cons,
           {1247,23},
           {tuple,
            {1247,24},
            [{tuple,{1247,25},[{integer,{1247,26},2},{integer,{1247,28},17}]},
             {atom,{1247,32},sys_core_fold},
             {tuple,
              {1247,46},
              [{atom,{1247,47},nomatch},
               {tuple,
                {1247,55},
                [{atom,{1247,56},shadow},
                 {integer,{1247,63},1},
                 {tuple,
                  {1247,65},
                  [{atom,{1247,66},m},{integer,{1247,68},1}]}]}]}]},
           {cons,
            {1248,24},
            {tuple,
             {1248,24},
             [{tuple,{1248,25},[{integer,{1248,26},4},{integer,{1248,28},24}]},
              {atom,{1248,32},v3_core},
              {tuple,
               {1248,40},
               [{atom,{1248,41},failed},{atom,{1248,48},bad_binary}]}]},
            {cons,
             {1249,24},
             {tuple,
              {1249,24},
              [{tuple,
                {1249,25},
                [{integer,{1249,26},5},{integer,{1249,28},45}]},
               {atom,{1249,32},sys_core_fold},
               {tuple,
                {1249,46},
                [{atom,{1249,47},failed},
                 {tuple,
                  {1249,54},
                  [{atom,{1249,55},embedded_unit},
                   {integer,{1249,69},8},
                   {integer,{1249,71},28}]}]}]},
             {cons,
              {1250,24},
              {tuple,
               {1250,24},
               [{tuple,
                 {1250,25},
                 [{integer,{1250,26},6},{integer,{1250,28},43}]},
                {atom,{1250,32},beam_core_to_ssa},
                {tuple,
                 {1250,49},
                 [{atom,{1250,50},failed},
                  {atom,{1250,57},bad_segment_size}]}]},
              {cons,
               {1251,24},
               {tuple,
                {1251,24},
                [{tuple,
                  {1251,25},
                  [{integer,{1251,26},8},{integer,{1251,28},24}]},
                 {atom,{1251,32},sys_core_fold},
                 {tuple,
                  {1251,46},
                  [{atom,{1251,47},ignored},
                   {atom,{1251,55},useless_building}]}]},
               {nil,{1252,23}}}}}}}]}]},
      {nil,{1252,26}}}},
    {debug_line,1253,141},
    {match,
     {1253,5},
     {nil,{1253,5}},
     {call,
      {1253,10},
      {atom,{1253,10},run},
      [{var,{1253,14},'Config'},{var,{1253,22},'Ts1'}]}},
    {debug_line,1256,142},
    {match,
     {1256,5},
     {var,{1256,5},'Ts2'},
     {cons,
      {1256,11},
      {tuple,
       {1256,12},
       [{atom,{1256,13},all_disabled},
        {var,{1257,13},'Source'},
        {cons,{1258,13},{atom,{1258,14},nowarn_opportunistic},{nil,{1258,34}}},
        {nil,{1259,13}}]},
      {nil,{1259,16}}}},
    {debug_line,1260,143},
    {match,
     {1260,5},
     {nil,{1260,5}},
     {call,
      {1260,10},
      {atom,{1260,10},run},
      [{var,{1260,14},'Config'},{var,{1260,22},'Ts2'}]}},
    {debug_line,1263,144},
    {match,
     {1263,5},
     {var,{1263,5},'Ts3'},
     {cons,
      {1263,11},
      {tuple,
       {1263,12},
       [{atom,{1263,13},nomatch_disabled},
        {var,{1264,13},'Source'},
        {cons,{1265,13},{atom,{1265,14},nowarn_nomatch},{nil,{1265,28}}},
        {tuple,
         {1266,13},
         [{atom,{1266,14},warnings},
          {cons,
           {1266,23},
           {tuple,
            {1266,24},
            [{tuple,{1266,25},[{integer,{1266,26},4},{integer,{1266,28},24}]},
             {atom,{1266,32},v3_core},
             {tuple,
              {1266,40},
              [{atom,{1266,41},failed},{atom,{1266,48},bad_binary}]}]},
           {cons,
            {1267,24},
            {tuple,
             {1267,24},
             [{tuple,{1267,25},[{integer,{1267,26},5},{integer,{1267,28},45}]},
              {atom,{1267,32},sys_core_fold},
              {tuple,
               {1267,46},
               [{atom,{1267,47},failed},
                {tuple,
                 {1267,54},
                 [{atom,{1267,55},embedded_unit},
                  {integer,{1267,69},8},
                  {integer,{1267,71},28}]}]}]},
            {cons,
             {1268,24},
             {tuple,
              {1268,24},
              [{tuple,
                {1268,25},
                [{integer,{1268,26},6},{integer,{1268,28},43}]},
               {atom,{1268,32},beam_core_to_ssa},
               {tuple,
                {1268,49},
                [{atom,{1268,50},failed},{atom,{1268,57},bad_segment_size}]}]},
             {cons,
              {1269,24},
              {tuple,
               {1269,24},
               [{tuple,
                 {1269,25},
                 [{integer,{1269,26},8},{integer,{1269,28},24}]},
                {atom,{1269,32},sys_core_fold},
                {tuple,
                 {1269,46},
                 [{atom,{1269,47},ignored},
                  {atom,{1269,55},useless_building}]}]},
              {nil,{1270,23}}}}}}]}]},
      {nil,{1270,26}}}},
    {debug_line,1271,145},
    {match,
     {1271,5},
     {nil,{1271,5}},
     {call,
      {1271,10},
      {atom,{1271,10},run},
      [{var,{1271,14},'Config'},{var,{1271,22},'Ts3'}]}},
    {debug_line,1274,146},
    {match,
     {1274,5},
     {var,{1274,5},'Ts4'},
     {cons,
      {1274,11},
      {tuple,
       {1274,12},
       [{atom,{1274,13},failures_disabled},
        {var,{1275,13},'Source'},
        {cons,{1276,13},{atom,{1276,14},nowarn_failed},{nil,{1276,27}}},
        {tuple,
         {1277,13},
         [{atom,{1277,14},warnings},
          {cons,
           {1277,23},
           {tuple,
            {1277,24},
            [{tuple,{1277,25},[{integer,{1277,26},2},{integer,{1277,28},17}]},
             {atom,{1277,32},sys_core_fold},
             {tuple,
              {1277,46},
              [{atom,{1277,47},nomatch},
               {tuple,
                {1277,55},
                [{atom,{1277,56},shadow},
                 {integer,{1277,63},1},
                 {tuple,
                  {1277,65},
                  [{atom,{1277,66},m},{integer,{1277,68},1}]}]}]}]},
           {cons,
            {1278,24},
            {tuple,
             {1278,24},
             [{tuple,{1278,25},[{integer,{1278,26},8},{integer,{1278,28},24}]},
              {atom,{1278,32},sys_core_fold},
              {tuple,
               {1278,46},
               [{atom,{1278,47},ignored},{atom,{1278,55},useless_building}]}]},
            {nil,{1279,23}}}}]}]},
      {nil,{1279,26}}}},
    {debug_line,1280,147},
    {match,
     {1280,5},
     {nil,{1280,5}},
     {call,
      {1280,10},
      {atom,{1280,10},run},
      [{var,{1280,14},'Config'},{var,{1280,22},'Ts4'}]}},
    {debug_line,1283,148},
    {match,
     {1283,5},
     {var,{1283,5},'Ts5'},
     {cons,
      {1283,11},
      {tuple,
       {1283,12},
       [{atom,{1283,13},disabled_useless_building},
        {var,{1284,13},'Source'},
        {cons,{1285,13},{atom,{1285,14},nowarn_ignored},{nil,{1285,28}}},
        {tuple,
         {1286,13},
         [{atom,{1286,14},warnings},
          {cons,
           {1286,23},
           {tuple,
            {1286,24},
            [{tuple,{1286,25},[{integer,{1286,26},2},{integer,{1286,28},17}]},
             {atom,{1286,32},sys_core_fold},
             {tuple,
              {1286,46},
              [{atom,{1286,47},nomatch},
               {tuple,
                {1286,55},
                [{atom,{1286,56},shadow},
                 {integer,{1286,63},1},
                 {tuple,
                  {1286,65},
                  [{atom,{1286,66},m},{integer,{1286,68},1}]}]}]}]},
           {cons,
            {1287,24},
            {tuple,
             {1287,24},
             [{tuple,{1287,25},[{integer,{1287,26},4},{integer,{1287,28},24}]},
              {atom,{1287,32},v3_core},
              {tuple,
               {1287,40},
               [{atom,{1287,41},failed},{atom,{1287,48},bad_binary}]}]},
            {cons,
             {1288,24},
             {tuple,
              {1288,24},
              [{tuple,
                {1288,25},
                [{integer,{1288,26},5},{integer,{1288,28},45}]},
               {atom,{1288,32},sys_core_fold},
               {tuple,
                {1288,46},
                [{atom,{1288,47},failed},
                 {tuple,
                  {1288,54},
                  [{atom,{1288,55},embedded_unit},
                   {integer,{1288,69},8},
                   {integer,{1288,71},28}]}]}]},
             {cons,
              {1289,24},
              {tuple,
               {1289,24},
               [{tuple,
                 {1289,25},
                 [{integer,{1289,26},6},{integer,{1289,28},43}]},
                {atom,{1289,32},beam_core_to_ssa},
                {tuple,
                 {1289,49},
                 [{atom,{1289,50},failed},
                  {atom,{1289,57},bad_segment_size}]}]},
              {nil,{1290,23}}}}}}]}]},
      {nil,{1290,26}}}},
    {debug_line,1291,149},
    {match,
     {1291,5},
     {nil,{1291,5}},
     {call,
      {1291,10},
      {atom,{1291,10},run},
      [{var,{1291,14},'Config'},{var,{1291,22},'Ts5'}]}},
    {debug_line,1294,150},
    {match,
     {1294,5},
     {var,{1294,5},'Ts6'},
     {cons,
      {1294,11},
      {tuple,
       {1294,12},
       [{atom,{1294,13},disabled_combination},
        {var,{1295,13},'Source'},
        {cons,
         {1296,13},
         {atom,{1296,14},nowarn_ignored},
         {cons,{1296,29},{atom,{1296,29},nowarn_failed},{nil,{1296,42}}}},
        {tuple,
         {1297,13},
         [{atom,{1297,14},warnings},
          {cons,
           {1297,23},
           {tuple,
            {1297,24},
            [{tuple,{1297,25},[{integer,{1297,26},2},{integer,{1297,28},17}]},
             {atom,{1297,32},sys_core_fold},
             {tuple,
              {1297,46},
              [{atom,{1297,47},nomatch},
               {tuple,
                {1297,55},
                [{atom,{1297,56},shadow},
                 {integer,{1297,63},1},
                 {tuple,
                  {1297,65},
                  [{atom,{1297,66},m},{integer,{1297,68},1}]}]}]}]},
           {nil,{1298,23}}}]}]},
      {nil,{1298,26}}}},
    {debug_line,1299,151},
    {match,
     {1299,5},
     {nil,{1299,5}},
     {call,
      {1299,10},
      {atom,{1299,10},run},
      [{var,{1299,14},'Config'},{var,{1299,22},'Ts6'}]}},
    {debug_line,1302,152},
    {atom,{1302,5},ok}]}]}.
{function,
 {1305,1},
 eep49,1,
 [{clause,
   {1305,1},
   [{var,{1305,1},'_'}],
   [[{call,
      {1305,1},
      {remote,{1305,1},{atom,{1305,1},fake},{atom,{1305,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1305,153},{atom,{1305,1},ignore}]},
  {clause,
   {1305,1},
   [{var,{1305,7},'Config'}],
   [],
   [{debug_line,1306,154},
    {match,
     {1306,5},
     {var,{1306,5},'Ts'},
     {cons,
      {1306,10},
      {tuple,
       {1306,11},
       [{atom,{1306,12},basic},
        {bin,
         {1307,12},
         [{bin_element,
           {1307,14},
           {string,
            {1307,14},
            "foo(X) ->\n                  maybe\n                      %% There should be no warning.\n                      Always ?= X,\n                      Always\n                  end.\n           "},
           default,default}]},
        {cons,
         {1314,12},
         {tuple,
          {1314,13},
          [{atom,{1314,14},feature},
           {atom,{1314,22},maybe_expr},
           {atom,{1314,33},enable}]},
         {nil,{1314,40}}},
        {nil,{1315,12}}]},
      {cons,
       {1316,11},
       {tuple,
        {1316,11},
        [{atom,{1316,12},disabled},
         {bin,
          {1317,12},
          [{bin_element,
            {1317,14},
            {string,
             {1317,14},
             "foo() -> maybe.                        %Atom maybe.\n           "},
            default,default}]},
         {cons,
          {1319,12},
          {tuple,
           {1319,13},
           [{atom,{1319,14},feature},
            {atom,{1319,22},maybe_expr},
            {atom,{1319,33},disable}]},
          {nil,{1319,41}}},
         {nil,{1320,12}}]},
       {nil,{1321,3}}}}},
    {debug_line,1322,155},
    {call,
     {1322,5},
     {atom,{1322,5},run},
     [{var,{1322,9},'Config'},{var,{1322,17},'Ts'}]},
    {debug_line,1323,156},
    {atom,{1323,5},ok}]}]}.
{function,
    {1326,1},
    inline_list_funcs,1,
    [{clause,
         {1326,1},
         [{var,{1326,1},'_'}],
         [[{call,
               {1326,1},
               {remote,
                   {1326,1},
                   {atom,{1326,1},fake},
                   {atom,{1326,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1326,157},{atom,{1326,1},ignore}]},
     {clause,
         {1326,1},
         [{var,{1326,19},'Config'}],
         [],
         [{debug_line,1327,158},
          {match,
              {1327,5},
              {var,{1327,5},'Ts'},
              {cons,
                  {1327,10},
                  {tuple,
                      {1327,11},
                      [{atom,{1327,12},basic},
                       {bin,
                           {1328,12},
                           [{bin_element,
                                {1328,14},
                                {string,
                                    {1328,14},
                                    "all(L) ->\n                  lists:all(fun erlang:is_integer/1, L).\n              any(L) ->\n                  lists:any(fun erlang:is_integer/1, L).\n              foreach(L) ->\n                  lists:foreach(fun erlang:is_integer/1, L).\n              map(L) ->\n                  lists:map(fun erlang:abs/1, L).\n              filter(L) ->\n                  lists:map(fun erlang:is_integer/1, L).\n              foldl(L) ->\n                  lists:foldl(fun erlang:is_function/2, L).\n              foldr(L) ->\n                  lists:foldl(fun erlang:is_function/2, L).\n              mapfoldl(L) ->\n                  lists:mapfoldl(fun erlang:is_function/2, L).\n              mapfoldr(L) ->\n                  lists:mapfoldr(fun erlang:is_function/2, L).\n              "},
                                default,default}]},
                       {cons,
                           {1347,12},
                           {atom,{1347,13},inline_list_funcs},
                           {nil,{1347,30}}},
                       {nil,{1348,12}}]},
                  {nil,{1349,10}}}},
          {debug_line,1350,159},
          {call,
              {1350,5},
              {atom,{1350,5},run},
              [{var,{1350,9},'Config'},{var,{1350,17},'Ts'}]},
          {debug_line,1352,160},
          {atom,{1352,5},ok}]}]}.
{function,
    {1359,1},
    run,2,
    [{clause,
         {1359,1},
         [{var,{1359,1},'_'},{var,{1359,1},'_'}],
         [[{call,
               {1359,1},
               {remote,
                   {1359,1},
                   {atom,{1359,1},fake},
                   {atom,{1359,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1359,161},{atom,{1359,1},ignore}]},
     {clause,
         {1359,1},
         [{var,{1359,5},'Config'},{var,{1359,13},'Tests0'}],
         [],
         [{debug_line,1360,162},
          {call,
              {1360,5},
              {atom,{1360,5},do_run},
              [{var,{1360,12},'Config'},{var,{1360,20},'Tests0'}]},
          {debug_line,1363,163},
          {match,
              {1363,5},
              {var,{1363,5},'Tests'},
              {lc,{1363,13},
                  {block,0,
                      [{call,
                           {1363,14},
                           {atom,{1363,14},lines_only},
                           [{var,{1363,25},'T'}]}]},
                  [{block,0,[{atom,{1363,36},true}]},
                   {generate,
                       {1363,33},
                       {var,{1363,31},'T'},
                       {var,{1363,36},'Tests0'}}]}},
          {debug_line,1364,164},
          {call,
              {1364,5},
              {atom,{1364,5},do_run},
              [{var,{1364,12},'Config'},{var,{1364,20},'Tests'}]}]}]}.
{function,
    {1366,1},
    lines_only,1,
    [{clause,
         {1366,1},
         [{var,{1366,1},'_'}],
         [[{call,
               {1366,1},
               {remote,
                   {1366,1},
                   {atom,{1366,1},fake},
                   {atom,{1366,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1366,165},{atom,{1366,1},ignore}]},
     {clause,
         {1366,1},
         [{tuple,
              {1366,12},
              [{var,{1366,13},'Name'},
               {var,{1366,18},'Test'},
               {var,{1366,23},'Opts'},
               {tuple,
                   {1366,28},
                   [{atom,{1366,29},warnings},{var,{1366,38},'Result0'}]}]}],
         [],
         [{debug_line,1367,166},
          {match,
              {1367,5},
              {var,{1367,5},'Result1'},
              {call,
                  {1367,15},
                  {remote,
                      {1367,20},
                      {atom,{1367,15},lists},
                      {atom,{1367,21},map}},
                  [{block,0,[{'fun',{1367,25},{function,lines_only_1,1}}]},
                   {var,{1367,45},'Result0'}]}},
          {debug_line,1368,167},
          {match,
              {1368,5},
              {var,{1368,5},'Result'},
              {tuple,
                  {1368,14},
                  [{atom,{1368,15},warnings},
                   {call,
                       {1368,24},
                       {remote,
                           {1368,29},
                           {atom,{1368,24},lists},
                           {atom,{1368,30},usort}},
                       [{var,{1368,36},'Result1'}]}]}},
          {debug_line,1369,168},
          {tuple,
              {1369,5},
              [{var,{1369,6},'Name'},
               {var,{1369,11},'Test'},
               {cons,
                   {1369,16},
                   {tuple,
                       {1369,17},
                       [{atom,{1369,18},error_location},
                        {atom,{1369,33},line}]},
                   {var,{1369,39},'Opts'}},
               {var,{1369,45},'Result'}]}]},
     {clause,
         {1370,1},
         [{var,{1370,12},'NoWarnings'}],
         [],
         [{debug_line,1370,169},{var,{1370,27},'NoWarnings'}]}]}.
{function,
    {1372,1},
    lines_only_1,1,
    [{clause,
         {1372,1},
         [{var,{1372,1},'_'}],
         [[{call,
               {1372,1},
               {remote,
                   {1372,1},
                   {atom,{1372,1},fake},
                   {atom,{1372,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1372,170},{atom,{1372,1},ignore}]},
     {clause,
         {1372,1},
         [{tuple,{1372,14},[{var,{1372,15},'File'},{var,{1372,20},'Es0'}]}],
         [[{call,
               {1372,31},
               {remote,
                   {1372,31},
                   {atom,{1372,31},erlang},
                   {atom,{1372,31},is_list}},
               [{var,{1372,39},'Es0'}]}]],
         [{debug_line,1373,171},
          {match,
              {1373,5},
              {var,{1373,5},'Es'},
              {lc,{1373,10},
                  {block,0,
                      [{call,
                           {1373,11},
                           {atom,{1373,11},lines_only_1},
                           [{var,{1373,24},'E'}]}]},
                  [{block,0,[{atom,{1373,35},true}]},
                   {generate,
                       {1373,32},
                       {var,{1373,30},'E'},
                       {var,{1373,35},'Es0'}}]}},
          {debug_line,1374,172},
          {tuple,{1374,5},[{var,{1374,6},'File'},{var,{1374,11},'Es'}]}]},
     {clause,
         {1375,1},
         [{tuple,
              {1375,14},
              [{var,{1375,15},'Loc'},
               {var,{1375,19},'Mod'},
               {var,{1375,23},'Error'}]}],
         [],
         [{debug_line,1376,173},
          {'case',
              {1376,5},
              {var,{1376,10},'Loc'},
              [{clause,
                   {1377,9},
                   [{tuple,
                        {1377,9},
                        [{var,{1377,10},'Line'},{var,{1377,15},'_Col'}]}],
                   [],
                   [{debug_line,1378,174},
                    {tuple,
                        {1378,13},
                        [{var,{1378,14},'Line'},
                         {var,{1378,19},'Mod'},
                         {var,{1378,23},'Error'}]}]},
               {clause,
                   {1379,9},
                   [{var,{1379,9},'Line'}],
                   [[{call,
                         {1379,19},
                         {remote,
                             {1379,19},
                             {atom,{1379,19},erlang},
                             {atom,{1379,19},is_integer}},
                         [{var,{1379,30},'Line'}]}]],
                   [{debug_line,1380,175},
                    {tuple,
                        {1380,13},
                        [{var,{1380,14},'Line'},
                         {var,{1380,19},'Mod'},
                         {var,{1380,23},'Error'}]}]}]}]}]}.
{function,
 {1383,1},
 do_run,2,
 [{clause,
   {1383,1},
   [{var,{1383,1},'_'},{var,{1383,1},'_'}],
   [[{call,
      {1383,1},
      {remote,{1383,1},{atom,{1383,1},fake},{atom,{1383,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1383,176},{atom,{1383,1},ignore}]},
  {clause,
   {1383,1},
   [{var,{1383,8},'Config'},{var,{1383,16},'Tests'}],
   [],
   [{debug_line,1384,177},
    {match,
     {1384,5},
     {var,{1384,5},'F'},
     {'fun',
      {1384,9},
      {clauses,
       [{clause,
         {1384,12},
         [{tuple,
           {1384,13},
           [{var,{1384,14},'N'},
            {var,{1384,16},'P'},
            {var,{1384,18},'Ws'},
            {var,{1384,21},'E'}]},
          {var,{1384,25},'BadL'}],
         [],
         [{debug_line,1385,178},
          {call,
           {1385,17},
           {remote,{1385,19},{atom,{1385,17},io},{atom,{1385,20},format}},
           [{block,0,[{string,{1385,27},"### ~s\n"}]},
            {block,0,[{cons,{1385,39},{var,{1385,40},'N'},{nil,{1385,41}}}]}]},
          {debug_line,1386,179},
          {'case',
           {1386,17},
           {'catch',
            {1386,22},
            {call,
             {1386,28},
             {atom,{1386,28},run_test},
             [{var,{1386,37},'Config'},
              {var,{1386,45},'P'},
              {var,{1386,48},'Ws'}]}},
           [{clause,
             {1387,21},
             [{var,{1387,21},'E'}],
             [],
             [{debug_line,1388,180},{var,{1388,25},'BadL'}]},
            {clause,
             {1389,21},
             [{var,{1389,21},'Bad'}],
             [],
             [{debug_line,1390,181},
              {call,
               {1390,25},
               {remote,{1390,27},{atom,{1390,25},io},{atom,{1390,28},format}},
               [{block,0,
                 [{string,
                   {1390,35},
                   "~nTest ~p failed. Expected~n  ~p~nbut got~n  ~p~n"}]},
                {block,0,
                 [{debug_line,1391,182},
                  {cons,
                   {1391,54},
                   {var,{1391,55},'N'},
                   {cons,
                    {1391,58},
                    {var,{1391,58},'E'},
                    {cons,
                     {1391,61},
                     {var,{1391,61},'Bad'},
                     {nil,{1391,64}}}}}]}]},
              {debug_line,1392,183},
              {call,{1392,4},{atom,{1392,4},fail},[]}]}]}]}]}}},
    {debug_line,1395,184},
    {call,
     {1395,5},
     {remote,{1395,10},{atom,{1395,5},lists},{atom,{1395,11},foldl}},
     [{var,{1395,17},'F'},{nil,{1395,20}},{var,{1395,24},'Tests'}]}]}]}.
{function,
    {1399,1},
    run_test,3,
    [{clause,
         {1399,1},
         [{var,{1399,1},'_'},{var,{1399,1},'_'},{var,{1399,1},'_'}],
         [[{call,
               {1399,1},
               {remote,
                   {1399,1},
                   {atom,{1399,1},fake},
                   {atom,{1399,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1399,185},{atom,{1399,1},ignore}]},
     {clause,
         {1399,1},
         [{var,{1399,10},'Conf'},
          {var,{1399,16},'Test0'},
          {var,{1399,23},'Warnings'}],
         [],
         [{debug_line,1400,186},
          {match,
              {1400,5},
              {var,{1400,5},'Module'},
              {op,{1400,25},
                  '++',
                  {string,{1400,14},"warnings"},
                  {call,
                      {1400,28},
                      {remote,
                          {1400,36},
                          {atom,{1400,28},test_lib},
                          {atom,{1400,37},uniq}},
                      []}}},
          {debug_line,1401,187},
          {match,
              {1401,5},
              {var,{1401,5},'Filename'},
              {op,{1401,23},
                  '++',
                  {var,{1401,16},'Module'},
                  {string,{1401,26},".erl"}}},
          {debug_line,1402,188},
          {match,
              {1402,5},
              {var,{1402,5},'DataDir'},
              {call,
                  {1402,16},
                  {remote,
                      {1402,16},
                      {atom,{1402,16},proplists},
                      {atom,{1402,16},get_value}},
                  [{atom,{1402,16},priv_dir},{var,{1402,16},'Conf'}]}},
          {debug_line,1403,189},
          {match,
              {1403,5},
              {var,{1403,5},'Test1'},
              {cons,
                  {1403,13},
                  {string,{1403,14},"-module("},
                  {cons,
                      {1403,26},
                      {var,{1403,26},'Module'},
                      {cons,
                          {1403,34},
                          {string,{1403,34},"). -file( \""},
                          {cons,
                              {1403,50},
                              {var,{1403,50},'Filename'},
                              {cons,
                                  {1403,60},
                                  {string,{1403,60},"\", 1). "},
                                  {cons,
                                      {1403,72},
                                      {var,{1403,72},'Test0'},
                                      {nil,{1403,77}}}}}}}}},
          {debug_line,1404,190},
          {match,
              {1404,5},
              {var,{1404,5},'Test'},
              {call,
                  {1404,12},
                  {remote,
                      {1404,12},
                      {atom,{1404,12},erlang},
                      {atom,{1404,12},iolist_to_binary}},
                  [{var,{1404,29},'Test1'}]}},
          {debug_line,1405,191},
          {match,
              {1405,5},
              {var,{1405,5},'File'},
              {call,
                  {1405,12},
                  {remote,
                      {1405,20},
                      {atom,{1405,12},filename},
                      {atom,{1405,21},join}},
                  [{var,{1405,26},'DataDir'},{var,{1405,35},'Filename'}]}},
          {debug_line,1406,192},
          {match,
              {1406,5},
              {var,{1406,5},'Opts'},
              {cons,
                  {1406,12},
                  {atom,{1406,13},binary},
                  {cons,
                      {1406,20},
                      {atom,{1406,20},export_all},
                      {cons,
                          {1406,31},
                          {atom,{1406,31},return},
                          {var,{1406,38},'Warnings'}}}}},
          {debug_line,1407,193},
          {match,
              {1407,5},
              {atom,{1407,5},ok},
              {call,
                  {1407,10},
                  {remote,
                      {1407,14},
                      {atom,{1407,10},file},
                      {atom,{1407,15},write_file}},
                  [{var,{1407,26},'File'},{var,{1407,32},'Test'}]}},
          {debug_line,1410,194},
          {call,
              {1410,5},
              {remote,{1410,12},{atom,{1410,5},compile},{atom,{1410,13},file}},
              [{var,{1410,18},'File'},
               {block,0,
                   [{cons,
                        {1410,24},
                        {atom,{1410,25},binary},
                        {cons,
                            {1410,32},
                            {atom,{1410,32},export_all},
                            {cons,
                                {1410,43},
                                {atom,{1410,43},report},
                                {var,{1410,50},'Warnings'}}}}]}]},
          {debug_line,1413,195},
          {match,
              {1413,5},
              {var,{1413,5},'Res'},
              {call,
                  {1413,11},
                  {atom,{1413,11},get_warnings},
                  [{block,0,
                       [{call,
                            {1413,24},
                            {remote,
                                {1413,31},
                                {atom,{1413,24},compile},
                                {atom,{1413,32},file}},
                            [{var,{1413,37},'File'},
                             {var,{1413,43},'Opts'}]}]}]}},
          {debug_line,1414,196},
          {'case',
              {1414,5},
              {var,{1414,10},'Res'},
              [{clause,
                   {1415,9},
                   [{nil,{1415,9}}],
                   [],
                   [{debug_line,1415,197},{nil,{1415,15}}]},
               {clause,
                   {1416,9},
                   [{tuple,
                        {1416,9},
                        [{atom,{1416,10},warnings},{var,{1416,20},'Ws'}]}],
                   [],
                   [{debug_line,1416,198},
                    {call,
                        {1416,27},
                        {atom,{1416,27},print_warnings},
                        [{var,{1416,42},'Ws'},{var,{1416,46},'Test'}]}]}]},
          {debug_line,1418,199},
          {call,
              {1418,5},
              {remote,{1418,9},{atom,{1418,5},file},{atom,{1418,10},delete}},
              [{var,{1418,17},'File'}]},
          {debug_line,1419,200},
          {var,{1419,5},'Res'}]}]}.
{function,
    {1421,1},
    run_forms,2,
    [{clause,
         {1421,1},
         [{var,{1421,1},'_'},{var,{1421,1},'_'}],
         [[{call,
               {1421,1},
               {remote,
                   {1421,1},
                   {atom,{1421,1},fake},
                   {atom,{1421,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1421,201},{atom,{1421,1},ignore}]},
     {clause,
         {1421,1},
         [{var,{1421,11},'Forms'},{var,{1421,18},'Warnings'}],
         [],
         [{debug_line,1422,202},
          {call,
              {1422,5},
              {atom,{1422,5},get_warnings},
              [{block,0,
                   [{call,
                        {1422,18},
                        {remote,
                            {1422,25},
                            {atom,{1422,18},compile},
                            {atom,{1422,26},forms}},
                        [{var,{1422,32},'Forms'},
                         {block,0,
                             [{cons,
                                  {1422,39},
                                  {atom,{1422,40},binary},
                                  {cons,
                                      {1422,47},
                                      {atom,{1422,47},return},
                                      {var,{1422,54},'Warnings'}}}]}]}]}]}]}]}.
{function,
 {1424,1},
 get_warnings,1,
 [{clause,
   {1424,1},
   [{var,{1424,1},'_'}],
   [[{call,
      {1424,1},
      {remote,{1424,1},{atom,{1424,1},fake},{atom,{1424,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1424,203},{atom,{1424,1},ignore}]},
  {clause,
   {1424,1},
   [{var,{1424,14},'Result'}],
   [],
   [{debug_line,1425,204},
    {'case',
     {1425,5},
     {var,{1425,10},'Result'},
     [{clause,
       {1426,9},
       [{tuple,
         {1426,9},
         [{atom,{1426,10},ok},
          {var,{1426,14},'_M'},
          {var,{1426,18},'Bin'},
          {nil,{1426,23}}]}],
       [[{call,
          {1426,32},
          {remote,
           {1426,32},
           {atom,{1426,32},erlang},
           {atom,{1426,32},is_binary}},
          [{var,{1426,42},'Bin'}]}]],
       [{debug_line,1427,205},{nil,{1427,13}}]},
      {clause,
       {1428,9},
       [{tuple,
         {1428,9},
         [{atom,{1428,10},ok},
          {var,{1428,14},'_M'},
          {var,{1428,18},'Bin'},
          {var,{1428,23},'Ws0'}]}],
       [[{call,
          {1428,33},
          {remote,
           {1428,33},
           {atom,{1428,33},erlang},
           {atom,{1428,33},is_binary}},
          [{var,{1428,43},'Bin'}]}]],
       [{debug_line,1431,206},
        {match,
         {1431,13},
         {var,{1431,13},'WsL'},
         {lc,
          {1431,19},
          {block,0,
           [{tuple,
             {1431,20},
             [{var,{1431,21},'F'},
              {lc,
               {1431,23},
               {block,0,[{var,{1431,24},'W'}]},
               [{block,0,[{atom,{1431,44},true}]},
                {generate,
                 {1431,41},
                 {match,
                  {1431,29},
                  {tuple,
                   {1431,29},
                   [{var,{1431,30},'_'},
                    {var,{1431,32},'Mod'},
                    {var,{1431,36},'_'}]},
                  {var,{1431,39},'W'}},
                 {var,{1431,44},'Ws'}},
                {block,0,[{debug_line,1432,207},{atom,{1432,33},true}]},
                {op,
                 {1432,33},
                 '=/=',
                 {var,{1432,29},'Mod'},
                 {atom,{1432,37},erl_lint}}]}]}]},
          [{block,0,[{debug_line,1433,208},{atom,{1433,33},true}]},
           {generate,
            {1433,30},
            {tuple,{1433,23},[{var,{1433,24},'F'},{var,{1433,26},'Ws'}]},
            {var,{1433,33},'Ws0'}}]}},
        {debug_line,1434,209},
        {'case',
         {1434,13},
         {var,{1434,18},'WsL'},
         [{clause,
           {1435,17},
           [{cons,
             {1435,17},
             {tuple,{1435,18},[{var,{1435,19},'_File'},{var,{1435,25},'Ws'}]},
             {nil,{1435,28}}}],
           [],
           [{debug_line,1435,210},
            {tuple,
             {1435,33},
             [{atom,{1435,34},warnings},{var,{1435,44},'Ws'}]}]},
          {clause,
           {1436,17},
           [{var,{1436,17},'_'}],
           [],
           [{debug_line,1436,211},
            {call,
             {1436,22},
             {remote,
              {1436,22},
              {atom,{1436,22},erlang},
              {atom,{1436,22},list_to_tuple}},
             [{block,0,
               [{cons,
                 {1436,36},
                 {atom,{1436,37},warnings},
                 {cons,
                  {1436,47},
                  {var,{1436,47},'WsL'},
                  {nil,{1436,50}}}}]}]}]}]}]}]}]}]}.
{function,
    {1440,1},
    print_warnings,2,
    [{clause,
         {1440,1},
         [{var,{1440,1},'_'},{var,{1440,1},'_'}],
         [[{call,
               {1440,1},
               {remote,
                   {1440,1},
                   {atom,{1440,1},fake},
                   {atom,{1440,1},is_beam_bif_info}},
               []}]],
         [{debug_line,1440,212},{atom,{1440,1},ignore}]},
     {clause,
         {1440,1},
         [{var,{1440,16},'Warnings'},{var,{1440,26},'Source'}],
         [],
         [{debug_line,1441,213},
          {match,
              {1441,5},
              {var,{1441,5},'Lines'},
              {call,
                  {1441,13},
                  {remote,
                      {1441,19},
                      {atom,{1441,13},binary},
                      {atom,{1441,20},split}},
                  [{var,{1441,26},'Source'},
                   {block,0,
                       [{bin,
                            {1441,34},
                            [{bin_element,
                                 {1441,36},
                                 {string,{1441,36},"\n"},
                                 default,default}]}]},
                   {block,0,
                       [{cons,
                            {1441,44},
                            {atom,{1441,45},global},
                            {nil,{1441,51}}}]}]}},
          {debug_line,1442,214},
          {match,
              {1442,5},
              {var,{1442,5},'Cs'},
              {lc,{1442,10},
                  {block,0,
                      [{call,
                           {1442,11},
                           {atom,{1442,11},print_warning},
                           [{var,{1442,25},'W'},{var,{1442,28},'Lines'}]}]},
                  [{block,0,[{atom,{1442,43},true}]},
                   {generate,
                       {1442,40},
                       {var,{1442,38},'W'},
                       {var,{1442,43},'Warnings'}}]}},
          {debug_line,1443,215},
          {call,
              {1443,5},
              {remote,{1443,7},{atom,{1443,5},io},{atom,{1443,8},put_chars}},
              [{var,{1443,18},'Cs'}]},
          {debug_line,1444,216},
          {atom,{1444,5},ok}]}]}.
{function,
 {1446,1},
 print_warning,2,
 [{clause,
   {1446,1},
   [{var,{1446,1},'_'},{var,{1446,1},'_'}],
   [[{call,
      {1446,1},
      {remote,{1446,1},{atom,{1446,1},fake},{atom,{1446,1},is_beam_bif_info}},
      []}]],
   [{debug_line,1446,217},{atom,{1446,1},ignore}]},
  {clause,
   {1446,1},
   [{tuple,
     {1446,15},
     [{tuple,{1446,16},[{var,{1446,17},'LineNum'},{var,{1446,25},'Column'}]},
      {var,{1446,33},'Mod'},
      {var,{1446,37},'Data'}]},
    {var,{1446,44},'Lines'}],
   [],
   [{debug_line,1447,218},
    {match,
     {1447,5},
     {var,{1447,5},'Line0'},
     {call,
      {1447,13},
      {remote,{1447,18},{atom,{1447,13},lists},{atom,{1447,19},nth}},
      [{var,{1447,23},'LineNum'},{var,{1447,32},'Lines'}]}},
    {debug_line,1448,219},
    {match,
     {1448,5},
     {bin,
      {1448,5},
      [{bin_element,
        {1448,7},
        {var,{1448,7},'Line1'},
        {op,{1448,20},'-',{var,{1448,14},'Column'},{integer,{1448,21},1}},
        [binary]},
       {bin_element,{1448,31},{var,{1448,31},'_'},default,[binary]}]},
     {var,{1448,44},'Line0'}},
    {debug_line,1449,220},
    {match,
     {1449,5},
     {var,{1449,5},'Spaces'},
     {call,
      {1449,14},
      {remote,{1449,16},{atom,{1449,14},re},{atom,{1449,17},replace}},
      [{var,{1449,25},'Line1'},
       {block,0,
        [{bin,
          {1449,32},
          [{bin_element,
            {1449,34},
            {string,{1449,34},"[^\t]"},
            default,default}]}]},
       {block,0,
        [{bin,
          {1449,45},
          [{bin_element,{1449,47},{string,{1449,47}," "},default,default}]}]},
       {block,0,[{cons,{1449,54},{atom,{1449,55},global},{nil,{1449,61}}}]}]}},
    {debug_line,1450,221},
    {match,
     {1450,5},
     {var,{1450,5},'CaretLine'},
     {cons,
      {1450,17},
      {var,{1450,18},'Spaces'},
      {cons,{1450,25},{string,{1450,25},"^"},{nil,{1450,28}}}}},
    {debug_line,1451,222},
    {cons,
     {1451,5},
     {call,
      {1451,6},
      {remote,{1451,12},{atom,{1451,6},io_lib},{atom,{1451,13},format}},
      [{block,0,[{string,{1451,20},"~p:~p: ~ts\n"}]},
       {block,0,
        [{debug_line,1452,223},
         {cons,
          {1452,20},
          {var,{1452,21},'LineNum'},
          {cons,
           {1452,29},
           {var,{1452,29},'Column'},
           {cons,
            {1452,36},
            {call,
             {1452,36},
             {remote,
              {1452,39},
              {var,{1452,36},'Mod'},
              {atom,{1452,40},format_error}},
             [{var,{1452,53},'Data'}]},
            {nil,{1452,58}}}}}]}]},
     {cons,
      {1453,6},
      {var,{1453,6},'Line0'},
      {cons,
       {1453,13},
       {string,{1453,13},"\n"},
       {cons,
        {1454,6},
        {var,{1454,6},'CaretLine'},
        {cons,{1454,17},{string,{1454,17},"\n\n"},{nil,{1454,23}}}}}}}]},
  {clause,
   {1455,1},
   [{var,{1455,15},'_'},{var,{1455,18},'_'}],
   [],
   [{debug_line,1456,224},{nil,{1456,5}}]}]}.
{function,{1458,1},
          fail,0,
          [{clause,{1458,1},
                   [],
                   [[{call,{1458,1},
                           {remote,{1458,1},
                                   {atom,{1458,1},fake},
                                   {atom,{1458,1},is_beam_bif_info}},
                           []}]],
                   [{debug_line,1458,225},{atom,{1458,1},ignore}]},
           {clause,{1458,1},
                   [],[],
                   [{debug_line,1459,226},
                    {call,{1459,5},
                          {remote,{1459,7},
                                  {atom,{1459,5},ct},
                                  {atom,{1459,8},fail}},
                          [{atom,{1459,13},failed}]}]}]}.
{eof,{1460,1}}.
